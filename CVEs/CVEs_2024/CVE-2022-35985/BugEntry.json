{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// LRN = Local Response Normalization\n// See docs in ../ops/nn_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n\n#if defined(TENSORFLOW_USE_CUSTOM_CONTRACTION_KERNEL)\n#include \"tensorflow/core/kernels/eigen_contraction_kernel.h\"\n#endif\n\n#if !defined(IS_MOBILE_PLATFORM)\n#include \"tensorflow/core/util/work_sharder.h\"\n#endif\n\n#if GOOGLE_CUDA\n#include \"third_party/gpus/cuda/include/cuda.h\"\n#endif\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#include \"tensorflow/core/kernels/conv_2d.h\"\n#include \"tensorflow/core/kernels/gpu_utils.h\"\n#if TENSORFLOW_USE_ROCM\n#include \"tensorflow/core/kernels/conv_ops_gpu.h\"\n#endif\n#include \"tensorflow/core/platform/stream_executor.h\"\n#include \"tensorflow/core/util/stream_executor_util.h\"\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\nnamespace tensorflow {\n\nnamespace {\n\n// When the depth is large and beta_ is 0.5 or 1.0, Single-threaded\n// LRN is faster than the main band matrix approach used\n// below. Benchmarks suggest switching to SingleThreadedLRN when depth > 384.\nconst int kSingleThreadedLRNDepthCutoff = 384;\n\n// Create a depth-by-depth band matrix with 1s along a swath of size (2 *\n// depth_radius + 1) around the diagonal.\ntemplate <typename T>\nvoid GetBandMatrix(int depth, int depth_radius,\n                   Eigen::Tensor<T, 2, Eigen::RowMajor>* result) {\n  result->setZero();\n  for (int row = 0; row < depth; ++row) {\n    const int begin = std::max<int>(0, row - depth_radius);\n    const int end = std::min<int>(depth, row + depth_radius + 1);\n    Eigen::DSizes<Eigen::DenseIndex, 2> start(row, begin);\n    Eigen::DSizes<Eigen::DenseIndex, 2> sizes(1, end - begin);\n    result->slice(start, sizes).setConstant(T(1));\n  }\n}\n\n}  // namespace\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate <typename Device, typename T>\nstruct LaunchLRN;\n\ntemplate <typename T>\nstruct LaunchLRN<CPUDevice, T> {\n  LaunchLRN(int depth_radius, T bias, T alpha, T beta)\n      : depth_radius_(depth_radius), bias_(bias), alpha_(alpha), beta_(beta) {}\n\n  void launch(OpKernelContext* context, OpKernel* kernel, const Tensor& in,\n              Tensor* output) {\n    const int batch = static_cast<int>(in.dim_size(0));\n    const int rows = static_cast<int>(in.dim_size(1));\n    const int cols = static_cast<int>(in.dim_size(2));\n    const int depth = static_cast<int>(in.dim_size(3));\n\n#if defined(IS_MOBILE_PLATFORM)\n    SingleThreadedLRN(in, batch, rows, cols, depth, output);\n#else\n    const int nodes = cols * rows;\n    if (depth > kSingleThreadedLRNDepthCutoff &&\n        (beta_ == T(0.5) || beta_ == T(1))) {\n      SingleThreadedLRN(in, batch, rows, cols, depth, output);\n      return;\n    }\n\n    auto in_shaped = in.shaped<T, 2>({nodes * batch, depth});\n\n    // Multiplying the input with the band matrix has the effect of reducing the\n    // correct patch along the depth.\n    Eigen::Tensor<T, 2, Eigen::RowMajor> multiplier(depth, depth);\n    GetBandMatrix<T>(depth, depth_radius_, &multiplier);\n\n    auto out_shaped = output->shaped<T, 2>({nodes * batch, depth});\n    Eigen::array<DimPair, 1> dims = {{DimPair(1, 0)}};\n    auto tmp = in_shaped.square().contract(multiplier, dims) * alpha_ + bias_;\n    if (beta_ == T(1)) {\n      out_shaped.device(context->eigen_cpu_device()) =\n          in_shaped * tmp.inverse();\n    } else if (beta_ == T(0.5)) {\n      out_shaped.device(context->eigen_cpu_device()) = in_shaped * tmp.rsqrt();\n    } else {\n      out_shaped.device(context->eigen_cpu_device()) =\n          in_shaped * (tmp.log() * -beta_).exp();\n    }\n#endif\n  }\n\n private:\n  typedef typename Eigen::Tensor<T, 1, Eigen::RowMajor>::DimensionPair DimPair;\n\n  void SingleThreadedLRN(const Tensor& in, const int batch, const int rows,\n                         const int cols, const int depth, Tensor* out) {\n    Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>> data_in(\n        in.flat<T>().data(), depth, batch * rows * cols);\n\n    Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>> data_out(\n        out->flat<T>().data(), depth, batch * rows * cols);\n\n    const int double_depth_radius = depth_radius_ * 2;\n    Eigen::Matrix<T, Eigen::Dynamic, 1> padded_square(data_in.rows() +\n                                                      double_depth_radius);\n    padded_square.setZero();\n    for (int r = 0; r < data_in.cols(); ++r) {\n      // Do local response normalization for data_in(:, r). First, compute the\n      // square and store them in buffer for repeated use.\n      padded_square.block(depth_radius_, 0, data_out.rows(), 1) =\n          data_in.col(r).cwiseProduct(data_in.col(r)) * alpha_;\n      // Then, compute the scale and write it to data_out.\n      T accumulated_scale(0);\n      for (int i = 0; i < double_depth_radius; ++i) {\n        accumulated_scale += padded_square(i);\n      }\n      for (int i = 0; i < data_in.rows(); ++i) {\n        accumulated_scale += padded_square(i + double_depth_radius);\n        data_out(i, r) = bias_ + accumulated_scale;\n        accumulated_scale -= padded_square(i);\n      }\n    }\n\n    if (beta_ == T(1)) {\n      data_out.array() = data_in.array() * data_out.array().inverse();\n    } else if (beta_ == T(0.5)) {\n      data_out.array() = data_in.array() * data_out.array().rsqrt();\n    } else {\n      data_out.array() =\n          data_in.array() * (data_out.array().log() * -beta_).exp();\n    }\n  }\n\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename T>\nstruct LaunchLRN<GPUDevice, T> {\n  LaunchLRN(int depth_radius, T bias, T alpha, T beta)\n      : depth_radius_(depth_radius), bias_(bias), alpha_(alpha), beta_(beta) {}\n\n  void launch(OpKernelContext* context, OpKernel* kernel, const Tensor& in,\n              Tensor* output) {\n#if GOOGLE_CUDA\n    OP_REQUIRES(\n        context, beta_ >= 0.01,\n        errors::InvalidArgument(\"cuDNN requires beta >= 0.01, got: \", beta_));\n\n    OP_REQUIRES(\n        context, depth_radius_ > 0 && depth_radius_ <= 7,\n        errors::InvalidArgument(\"cuDNN requires depth_radius in [1, 7], got: \",\n                                depth_radius_));\n    OP_REQUIRES(\n        context, bias_ >= 1e-5,\n        errors::InvalidArgument(\"cuDNN requires bias >= 1e-5, got: \", bias_));\n\n    // Cast to platform-specific int to avoid conversion warnings.\n    const int batch = static_cast<int>(in.dim_size(0));\n    const int rows = static_cast<int>(in.dim_size(1));\n    const int cols = static_cast<int>(in.dim_size(2));\n    const int depth = static_cast<int>(in.dim_size(3));\n\n    se::dnn::BatchDescriptor dimensions_desc;\n    dimensions_desc.set_count(batch)\n        .set_height(rows)\n        .set_width(cols)\n        .set_feature_map_count(depth)\n        .set_layout(se::dnn::DataLayout::kBatchYXDepth);\n\n    se::dnn::NormalizeDescriptor normalize_desc;\n    normalize_desc.set_bias(bias_)\n        .set_range(depth_radius_)\n        .set_alpha(alpha_)\n        .set_beta(beta_);\n\n    auto input_data = StreamExecutorUtil::AsDeviceMemory<T>(in);\n    auto output_data = StreamExecutorUtil::AsDeviceMemory<T>(*output);\n\n    auto* stream = context->op_device_context()->stream();\n    OP_REQUIRES(context, stream, errors::Internal(\"No GPU stream available.\"));\n\n    bool status =\n        stream\n            ->ThenNormalizeWithDimensions(normalize_desc, dimensions_desc,\n                                          input_data, &output_data)\n            .ok();\n    OP_REQUIRES(context, status,\n                errors::Internal(\"NormalizeWithDimensions launch failed\"));\n#elif TENSORFLOW_USE_ROCM\n    // For NHWC input/output tensors, convert to NCHW because it's the only\n    // supported format in MIOpen for now.\n\n    // Cast to platform-specific int to avoid conversion warnings.\n    const int batch = static_cast<int>(in.dim_size(0));\n    const int rows = static_cast<int>(in.dim_size(1));\n    const int cols = static_cast<int>(in.dim_size(2));\n    const int depth = static_cast<int>(in.dim_size(3));\n\n    Tensor transformed_input;\n    OP_REQUIRES_OK(context,\n                   context->allocate_temp(\n                       DataTypeToEnum<T>::value,\n                       ShapeFromFormat(FORMAT_NCHW, in.shape(), FORMAT_NHWC),\n                       &transformed_input));\n    functor::NHWCToNCHW<GPUDevice, T, 4>()(context->eigen_device<GPUDevice>(),\n                                           in.tensor<T, 4>(),\n                                           transformed_input.tensor<T, 4>());\n\n    Tensor transformed_output;\n    OP_REQUIRES_OK(\n        context, context->allocate_temp(\n                     DataTypeToEnum<T>::value,\n                     ShapeFromFormat(FORMAT_NCHW, output->shape(), FORMAT_NHWC),\n                     &transformed_output));\n\n    perftools::gputools::dnn::BatchDescriptor dimensions_desc;\n    dimensions_desc.set_count(batch)\n        .set_height(rows)\n        .set_width(cols)\n        .set_feature_map_count(depth)\n        .set_layout(perftools::gputools::dnn::DataLayout::kBatchDepthYX);\n\n    perftools::gputools::dnn::NormalizeDescriptor normalize_desc;\n    normalize_desc.set_bias(bias_)\n        .set_range(depth_radius_)\n        .set_alpha(alpha_)\n        .set_beta(beta_);\n\n    auto input_data =\n        AsDeviceMemory(transformed_input.template flat<T>().data(),\n                       transformed_input.template flat<T>().size());\n    auto output_data =\n        AsDeviceMemory(transformed_output.template flat<T>().data(),\n                       transformed_output.template flat<T>().size());\n\n    auto* stream = context->op_device_context()->stream();\n    OP_REQUIRES(context, stream, errors::Internal(\"No GPU stream available.\"));\n\n    bool status =\n        stream\n            ->ThenNormalizeWithDimensions(normalize_desc, dimensions_desc,\n                                          input_data, &output_data)\n            .ok();\n    OP_REQUIRES(context, status,\n                errors::Internal(\"NormalizeWithDimensions launch failed\"));\n\n    // Need to convert it back to NHWC once MIOpen kernels finishes.\n    auto toConstTensor = [](const Tensor& x) -> const Tensor { return x; };\n    functor::NCHWToNHWC<GPUDevice, T, 4>()(\n        context->eigen_device<GPUDevice>(),\n        toConstTensor(transformed_output).template tensor<T, 4>(),\n        output->tensor<T, 4>());\n#endif\n  }\n\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename T>\nclass LRNOp : public OpKernel {\n public:\n  explicit LRNOp(OpKernelConstruction* context) : OpKernel(context) {\n    int64_t depth_radius64;\n    OP_REQUIRES_OK(context, context->GetAttr(\"depth_radius\", &depth_radius64));\n    OP_REQUIRES(\n        context,\n        FastBoundsCheck(depth_radius64, std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"depth_radius = \", depth_radius64,\n                                \" larger than int max\"));\n    depth_radius_ = static_cast<int>(depth_radius64);\n    float tmp;\n    OP_REQUIRES_OK(context, context->GetAttr(\"bias\", &tmp));\n    bias_ = T(tmp);\n    OP_REQUIRES_OK(context, context->GetAttr(\"alpha\", &tmp));\n    alpha_ = T(tmp);\n    OP_REQUIRES_OK(context, context->GetAttr(\"beta\", &tmp));\n    beta_ = T(tmp);\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& in = context->input(0);\n    OP_REQUIRES(context, in.dims() == 4,\n                errors::InvalidArgument(\"in must be 4-dimensional\"));\n    OP_REQUIRES(\n        context,\n        FastBoundsCheck(in.NumElements(), std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"argument to LRN too large\"));\n    // Cast to platform-specific int to avoid conversion warnings.\n    const int batch = static_cast<int>(in.dim_size(0));\n    const int rows = static_cast<int>(in.dim_size(1));\n    const int cols = static_cast<int>(in.dim_size(2));\n    const int depth = static_cast<int>(in.dim_size(3));\n\n    OP_REQUIRES(context,\n                (depth + depth_radius_) <= std::numeric_limits<int>::max(),\n                errors::InvalidArgument(\"depth \", depth, \" + depth_radius \",\n                                        depth_radius_, \" exceeds int max.\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(\n                       0, TensorShape({batch, rows, cols, depth}), &output));\n\n    LaunchLRN<Device, T> launcher(depth_radius_, bias_, alpha_, beta_);\n    launcher.launch(context, this, in, output);\n  }\n\n private:\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#define REGISTER_CPU(T)                                      \\\n  REGISTER_KERNEL_BUILDER(                                   \\\n      Name(\"LRN\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      LRNOp<CPUDevice, T>);\nTF_CALL_float(REGISTER_CPU);\nTF_CALL_half(REGISTER_CPU);\n\n#undef REGISTER_CPU\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_GPU(T)                                      \\\n  REGISTER_KERNEL_BUILDER(                                   \\\n      Name(\"LRN\").Device(DEVICE_GPU).TypeConstraint<T>(\"T\"), \\\n      LRNOp<GPUDevice, T>);\nTF_CALL_float(REGISTER_GPU);\n\n#undef REGISTER_GPU\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#if !defined(IS_MOBILE_PLATFORM)\n\ntemplate <typename Device, typename T>\nstruct LaunchLRNGrad;\n\ntemplate <typename T>\nstruct LaunchLRNGrad<CPUDevice, T> {\n  LaunchLRNGrad(int depth_radius, T bias, T alpha, T beta)\n      : depth_radius_(depth_radius),\n        bias_(bias),\n        alpha_(alpha),\n        beta_(beta),\n        alpha_beta_2_(T(-2) * alpha * beta) {}\n\n  void launch(OpKernelContext* context, OpKernel* kernel,\n              const Tensor& in_grads, const Tensor& in_image,\n              const Tensor& out_image, Tensor* output) {\n    const int64_t batch = in_grads.dim_size(0);\n    const int64_t rows = in_grads.dim_size(1);\n    const int64_t cols = in_grads.dim_size(2);\n    const int64_t depth = in_grads.dim_size(3);\n    const auto nodes = cols * rows;\n    auto grads_shaped = in_grads.shaped<T, 2>({nodes * batch, depth});\n    auto in_shaped = in_image.shaped<T, 2>({nodes * batch, depth});\n    auto activations = out_image.shaped<T, 2>({nodes * batch, depth});\n\n    auto out_shaped = output->shaped<T, 2>({nodes * batch, depth});\n    out_shaped.setZero();\n\n    auto shard = [this, activations, in_shaped, grads_shaped, out_shaped,\n                  depth](int64_t begin, int64_t end) {\n      for (int64_t i = begin; i < end; ++i) {\n        for (int64_t j = 0; j < depth; ++j) {\n          // Let y be the LRN activations and x be the inputs along the depth\n          // dimension. (LRN operates independently along rows, cols, and\n          // batch).\n          // We have\n          // yi = xi / (bias + alpha(sum_j_{i - depth_radius}^{i + depth_radius}\n          //      x_j^2))^beta\n          //\n          // Let N = (bias + alpha(sum_j_{i - depth_radius}^{i + depth_radius}\n          //           x_j^2))\n          // dy_i/dx_i = (N^beta - xi. beta*N^(beta-1)*2*alpha*xi)/N^(2*beta)\n          // dy_i/dx_j = (       - xi. beta*N^(beta-1)*2*alpha*xj)/N^(2*beta)\n          //\n          // NOTE(keveman) : We can compute N by doing (yi/xi) ^ (1/beta).\n          // However, this is numerically unstable for small values of xi. We\n          // compute N explicitly here to avoid that.\n\n          T gs = grads_shaped(i, j);\n          if (gs == T(0)) continue;\n\n          int64_t depth_begin = std::max<int64_t>(0, j - depth_radius_);\n          int64_t depth_end = std::min<int64_t>(depth, j + depth_radius_ + 1);\n\n          T norm(0);\n          for (int64_t k = depth_begin; k < depth_end; ++k) {\n            norm += in_shaped(i, k) * in_shaped(i, k);\n          }\n          norm = alpha_ * norm + bias_;\n          DCHECK_GT(norm, T(1e-6));\n          T pre_computed_pow = Eigen::numext::pow(norm, -beta_);\n          T activations_ab2 = alpha_beta_2_ * activations(i, j);\n          for (int64_t k = depth_begin; k < depth_end; ++k) {\n            T dyi = in_shaped(i, k) * activations_ab2 / norm;\n            if (k == j) {\n              dyi += pre_computed_pow;\n            }\n            dyi *= gs;\n            const_cast<typename TTypes<T, 2>::Tensor&>(out_shaped)(i, k) += dyi;\n          }\n        }\n      }\n    };\n    auto worker_threads = *(context->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers, nodes * batch,\n          depth * depth, shard);\n  }\n\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n  T alpha_beta_2_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename T>\nstruct LaunchLRNGrad<GPUDevice, T> {\n  LaunchLRNGrad(int depth_radius, T bias, T alpha, T beta)\n      : depth_radius_(depth_radius), bias_(bias), alpha_(alpha), beta_(beta) {}\n\n  void launch(OpKernelContext* context, OpKernel* kernel,\n              const Tensor& in_grads, const Tensor& in_image,\n              const Tensor& out_image, Tensor* output) {\n#if GOOGLE_CUDA\n    OP_REQUIRES(\n        context, beta_ >= 0.01,\n        errors::InvalidArgument(\"cuDNN requires beta >= 0.01, got: \", beta_));\n\n    OP_REQUIRES(\n        context, depth_radius_ > 0 && depth_radius_ <= 7,\n        errors::InvalidArgument(\"cuDNN requires depth_radius in [1, 7], got: \",\n                                depth_radius_));\n    OP_REQUIRES(\n        context, bias_ >= 1e-5,\n        errors::InvalidArgument(\"cuDNN requires bias >= 1e-5, got: \", bias_));\n\n    const int64_t batch = in_grads.dim_size(0);\n    const int64_t rows = in_grads.dim_size(1);\n    const int64_t cols = in_grads.dim_size(2);\n    const int64_t depth = in_grads.dim_size(3);\n\n    se::dnn::BatchDescriptor dimensions_desc;\n    dimensions_desc.set_count(batch)\n        .set_height(rows)\n        .set_width(cols)\n        .set_feature_map_count(depth)\n        .set_layout(se::dnn::DataLayout::kBatchYXDepth);\n\n    se::dnn::NormalizeDescriptor normalize_desc;\n    normalize_desc.set_bias(bias_)\n        .set_range(depth_radius_)\n        .set_alpha(alpha_)\n        .set_beta(beta_);\n\n    auto input_grads_data = StreamExecutorUtil::AsDeviceMemory<T>(in_grads);\n    auto input_image_data = StreamExecutorUtil::AsDeviceMemory<T>(in_image);\n    auto output_image_data = StreamExecutorUtil::AsDeviceMemory<T>(out_image);\n    auto output_grads_data = StreamExecutorUtil::AsDeviceMemory<T>(*output);\n\n    auto* stream = context->op_device_context()->stream();\n    OP_REQUIRES(context, stream, errors::Internal(\"No GPU stream available.\"));\n\n    bool status =\n        stream\n            ->ThenNormalizeBackwardWithDimensions(\n                normalize_desc, dimensions_desc, input_image_data,\n                output_image_data, input_grads_data, &output_grads_data)\n            .ok();\n    OP_REQUIRES(\n        context, status,\n        errors::Internal(\"NormalizeBackwardWithDimensions launch failed\"));\n#elif TENSORFLOW_USE_ROCM\n    // For NHWC input/output tensors, convert to NCHW because it's the only\n    // supported format in MIOpen for now.\n    const int64 batch = in_grads.dim_size(0);\n    const int64 rows = in_grads.dim_size(1);\n    const int64 cols = in_grads.dim_size(2);\n    const int64 depth = in_grads.dim_size(3);\n\n    Tensor transformed_in_grads;\n    OP_REQUIRES_OK(context, context->allocate_temp(\n                                DataTypeToEnum<T>::value,\n                                ShapeFromFormat(FORMAT_NCHW, in_grads.shape(),\n                                                FORMAT_NHWC),\n                                &transformed_in_grads));\n    functor::NHWCToNCHW<GPUDevice, T, 4>()(context->eigen_device<GPUDevice>(),\n                                           in_grads.tensor<T, 4>(),\n                                           transformed_in_grads.tensor<T, 4>());\n\n    Tensor transformed_in_image;\n    OP_REQUIRES_OK(context, context->allocate_temp(\n                                DataTypeToEnum<T>::value,\n                                ShapeFromFormat(FORMAT_NCHW, in_image.shape(),\n                                                FORMAT_NHWC),\n                                &transformed_in_image));\n    functor::NHWCToNCHW<GPUDevice, T, 4>()(context->eigen_device<GPUDevice>(),\n                                           in_image.tensor<T, 4>(),\n                                           transformed_in_image.tensor<T, 4>());\n\n    Tensor transformed_out_image;\n    OP_REQUIRES_OK(context, context->allocate_temp(\n                                DataTypeToEnum<T>::value,\n                                ShapeFromFormat(FORMAT_NCHW, out_image.shape(),\n                                                FORMAT_NHWC),\n                                &transformed_out_image));\n    functor::NHWCToNCHW<GPUDevice, T, 4>()(\n        context->eigen_device<GPUDevice>(), out_image.tensor<T, 4>(),\n        transformed_out_image.tensor<T, 4>());\n\n    Tensor transformed_output;\n    OP_REQUIRES_OK(\n        context, context->allocate_temp(\n                     DataTypeToEnum<T>::value,\n                     ShapeFromFormat(FORMAT_NCHW, output->shape(), FORMAT_NHWC),\n                     &transformed_output));\n\n    perftools::gputools::dnn::BatchDescriptor dimensions_desc;\n    dimensions_desc.set_count(batch)\n        .set_height(rows)\n        .set_width(cols)\n        .set_feature_map_count(depth)\n        .set_layout(perftools::gputools::dnn::DataLayout::kBatchDepthYX);\n\n    perftools::gputools::dnn::NormalizeDescriptor normalize_desc;\n    normalize_desc.set_bias(bias_)\n        .set_range(depth_radius_)\n        .set_alpha(alpha_)\n        .set_beta(beta_);\n\n    auto input_grads_data =\n        AsDeviceMemory(transformed_in_grads.template flat<T>().data(),\n                       transformed_in_grads.template flat<T>().size());\n    auto input_image_data =\n        AsDeviceMemory(transformed_in_image.template flat<T>().data(),\n                       transformed_in_image.template flat<T>().size());\n    auto output_image_data =\n        AsDeviceMemory(transformed_out_image.template flat<T>().data(),\n                       transformed_out_image.template flat<T>().size());\n    auto output_grads_data =\n        AsDeviceMemory(transformed_output.template flat<T>().data(),\n                       transformed_output.template flat<T>().size());\n\n    auto* stream = context->op_device_context()->stream();\n    OP_REQUIRES(context, stream, errors::Internal(\"No GPU stream available.\"));\n\n    static int64 NormalizeBackwardScratchSize = GetDnnWorkspaceLimit(\n        // default value is in bytes despite the name of the environment\n        // variable\n        \"TF_CUDNN_WORKSPACE_LIMIT_IN_MB\", 1LL << 32  // 4GB\n    );\n\n    DnnScratchAllocator scratch_allocator(NormalizeBackwardScratchSize,\n                                          context);\n    bool status = stream\n                      ->ThenNormalizeBackwardWithDimensions(\n                          normalize_desc, dimensions_desc, input_image_data,\n                          output_image_data, input_grads_data,\n                          &output_grads_data, &scratch_allocator)\n                      .ok();\n    OP_REQUIRES(\n        context, status,\n        errors::Internal(\"NormalizeBackwardWithDimensions launch failed\"));\n\n    // Need to convert it back to NHWC once MIOpen kernels finishes.\n    auto toConstTensor = [](const Tensor& x) -> const Tensor { return x; };\n    functor::NCHWToNHWC<GPUDevice, T, 4>()(\n        context->eigen_device<GPUDevice>(),\n        toConstTensor(transformed_output).template tensor<T, 4>(),\n        output->tensor<T, 4>());\n#endif\n  }\n\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename T>\nclass LRNGradOp : public OpKernel {\n public:\n  explicit LRNGradOp(OpKernelConstruction* context) : OpKernel(context) {\n    int64_t depth_radius64;\n    OP_REQUIRES_OK(context, context->GetAttr(\"depth_radius\", &depth_radius64));\n    OP_REQUIRES(\n        context,\n        FastBoundsCheck(depth_radius64, std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"depth_radius = \", depth_radius64,\n                                \" larger than int max\"));\n    depth_radius_ = static_cast<int>(depth_radius64);\n    float tmp;\n    OP_REQUIRES_OK(context, context->GetAttr(\"bias\", &tmp));\n    bias_ = T(tmp);\n    OP_REQUIRES_OK(context, context->GetAttr(\"alpha\", &tmp));\n    alpha_ = T(tmp);\n    OP_REQUIRES_OK(context, context->GetAttr(\"beta\", &tmp));\n    beta_ = T(tmp);\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& in_grads = context->input(0);\n    const Tensor& in_image = context->input(1);\n    const Tensor& out_image = context->input(2);\n\n    OP_REQUIRES(context, in_grads.dims() == 4 && in_image.dims() == 4,\n                errors::InvalidArgument(\"inputs must be 4-dimensional\"));\n    const int64_t batch = in_grads.dim_size(0);\n    const int64_t rows = in_grads.dim_size(1);\n    const int64_t cols = in_grads.dim_size(2);\n    const int64_t depth = in_grads.dim_size(3);\n    OP_REQUIRES(\n        context,\n        in_image.dim_size(0) == batch && in_image.dim_size(1) == rows &&\n            in_image.dim_size(2) == cols && in_image.dim_size(3) == depth &&\n            out_image.dim_size(0) == batch && out_image.dim_size(1) == rows &&\n            out_image.dim_size(2) == cols && out_image.dim_size(3) == depth,\n        errors::InvalidArgument(\n            \"input_grads, input_image, and out_image should have the same \"\n            \"shape\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(\n                       0, TensorShape({batch, rows, cols, depth}), &output));\n\n    LaunchLRNGrad<Device, T> launcher(depth_radius_, bias_, alpha_, beta_);\n    launcher.launch(context, this, in_grads, in_image, out_image, output);\n  }\n\n private:\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#define REGISTER_CPU(T)                                          \\\n  REGISTER_KERNEL_BUILDER(                                       \\\n      Name(\"LRNGrad\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      LRNGradOp<CPUDevice, T>);\nTF_CALL_float(REGISTER_CPU);\nTF_CALL_half(REGISTER_CPU);\n\n#undef REGISTER_CPU\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_GPU(T)                                          \\\n  REGISTER_KERNEL_BUILDER(                                       \\\n      Name(\"LRNGrad\").Device(DEVICE_GPU).TypeConstraint<T>(\"T\"), \\\n      LRNGradOp<GPUDevice, T>);\nTF_CALL_float(REGISTER_GPU);\n\n#undef REGISTER_GPU\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#endif  // !defined(IS_MOBILE_PLATFORM)\n\n}  // namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for local response normalization.\"\"\"\n\nimport copy\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gradient_checker\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import nn\nimport tensorflow.python.ops.nn_grad  # pylint: disable=unused-import\nfrom tensorflow.python.platform import test\n\n\nclass LRNOpTest(test.TestCase):\n\n  def _LRN(self, input_image, lrn_depth_radius=5, bias=1.0, alpha=1.0,\n           beta=0.5):\n    \"\"\"Compute expected result.\"\"\"\n    output = copy.deepcopy(input_image)\n    batch_size = input_image.shape[0]\n    rows = input_image.shape[1]\n    cols = input_image.shape[2]\n    depth = input_image.shape[3]\n    for b in range(batch_size):\n      for r in range(rows):\n        for c in range(cols):\n          for d in range(depth):\n            begin = max(0, d - lrn_depth_radius)\n            end = min(depth, d + lrn_depth_radius + 1)\n            patch = input_image[b, r, c, begin:end]\n            output[b, r, c, d] /= (\n                np.power(bias + alpha * np.sum(patch * patch), beta))\n    return output\n\n  def _RunAndVerify(self, dtype):\n    with self.cached_session():\n      # random shape\n      shape = np.random.randint(1, 16, size=4)\n      # Make depth at least 2 to make it meaningful\n      shape[3] += 1\n      p = array_ops.placeholder(dtype, shape=shape)\n      # random depth_radius, bias, alpha, beta. cuDNN requires depth_radius to\n      # be in [1, 7].\n      lrn_depth_radius = np.random.randint(1, min(8, shape[3]))\n\n      bias = 1.0 + np.random.rand()\n      alpha = 2.0 * np.random.rand()\n      # cuDNN requires beta >= 0.01.\n      beta = 0.01 + 2.0 * np.random.rand()\n      lrn_t = nn.local_response_normalization(\n          p,\n          name=\"lrn\",\n          depth_radius=lrn_depth_radius,\n          bias=bias,\n          alpha=alpha,\n          beta=beta)\n      params = {p: np.random.rand(*shape).astype(\"f\")}\n      result = lrn_t.eval(feed_dict=params)\n    expected = self._LRN(\n        params[p],\n        lrn_depth_radius=lrn_depth_radius,\n        bias=bias,\n        alpha=alpha,\n        beta=beta)\n    err = np.amax(np.abs(result - expected))\n    print(\"LRN error for bias \", bias, \"alpha \", alpha, \" beta \", beta, \" is \",\n          err)\n    if dtype == dtypes.float32:\n      self.assertTrue(err < 1e-4)\n    else:\n      self.assertTrue(err < 1e-2)\n    self.assertShapeEqual(expected, lrn_t)\n\n  @test_util.run_deprecated_v1\n  def testCompute(self):\n    for _ in range(2):\n      self._RunAndVerify(dtypes.float32)\n      # Enable when LRN supports tf.float16 on GPU.\n      if not test.is_gpu_available():\n        self._RunAndVerify(dtypes.float16)\n\n  @test_util.run_deprecated_v1\n  def testGradientsZeroInput(self):\n    with self.session():\n      shape = [4, 4, 4, 4]\n      p = array_ops.placeholder(dtypes.float32, shape=shape)\n      inp_array = np.zeros(shape).astype(\"f\")\n      lrn_op = nn.local_response_normalization(p, 2, 1.0, 0.0, 1.0, name=\"lrn\")\n      grad = gradients_impl.gradients([lrn_op], [p])[0]\n      params = {p: inp_array}\n      r = grad.eval(feed_dict=params)\n    expected = np.ones(shape).astype(\"f\")\n    self.assertAllClose(r, expected)\n    self.assertShapeEqual(expected, grad)\n\n  def _RunAndVerifyGradients(self, dtype):\n    with self.cached_session():\n      # random shape\n      shape = np.random.randint(1, 5, size=4)\n      # Make depth at least 2 to make it meaningful\n      shape[3] += 1\n      # random depth_radius, bias, alpha, beta. cuDNN requires depth_radius to\n      # be in [1, 7].\n      lrn_depth_radius = np.random.randint(1, min(8, shape[3]))\n      bias = 1.0 + np.random.rand()\n      alpha = 1.0 * np.random.rand()\n      # cuDNN requires beta >= 0.01.\n      beta = 0.01 + 1.0 * np.random.rand()\n      if dtype == dtypes.float32:\n        inp_array = np.random.rand(*shape).astype(np.float32)\n      else:\n        inp_array = np.random.rand(*shape).astype(np.float16)\n\n      inp = constant_op.constant(\n          list(inp_array.ravel(order=\"C\")), shape=shape, dtype=dtype)\n      lrn_op = nn.local_response_normalization(\n          inp,\n          name=\"lrn\",\n          depth_radius=lrn_depth_radius,\n          bias=bias,\n          alpha=alpha,\n          beta=beta)\n      err = gradient_checker.compute_gradient_error(inp, shape, lrn_op, shape)\n    print(\"LRN Gradient error for bias \", bias, \"alpha \", alpha, \" beta \", beta,\n          \" is \", err)\n    if dtype == dtypes.float32:\n      self.assertLess(err, 1e-4)\n    else:\n      self.assertLess(err, 1.0)\n\n  @test_util.run_deprecated_v1\n  def testGradients(self):\n    for _ in range(2):\n      self._RunAndVerifyGradients(dtypes.float32)\n      # Enable when LRN supports tf.float16 on GPU.\n      if not test.is_gpu_available():\n        self._RunAndVerifyGradients(dtypes.float16)\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// LRN = Local Response Normalization\n// See docs in ../ops/nn_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n\n#if defined(TENSORFLOW_USE_CUSTOM_CONTRACTION_KERNEL)\n#include \"tensorflow/core/kernels/eigen_contraction_kernel.h\"\n#endif\n\n#if !defined(IS_MOBILE_PLATFORM)\n#include \"tensorflow/core/util/work_sharder.h\"\n#endif\n\n#if GOOGLE_CUDA\n#include \"third_party/gpus/cuda/include/cuda.h\"\n#endif\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#include \"tensorflow/core/kernels/conv_2d.h\"\n#include \"tensorflow/core/kernels/gpu_utils.h\"\n#if TENSORFLOW_USE_ROCM\n#include \"tensorflow/core/kernels/conv_ops_gpu.h\"\n#endif\n#include \"tensorflow/core/platform/stream_executor.h\"\n#include \"tensorflow/core/util/stream_executor_util.h\"\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\nnamespace tensorflow {\n\nnamespace {\n\n// When the depth is large and beta_ is 0.5 or 1.0, Single-threaded\n// LRN is faster than the main band matrix approach used\n// below. Benchmarks suggest switching to SingleThreadedLRN when depth > 384.\nconst int kSingleThreadedLRNDepthCutoff = 384;\n\n// Create a depth-by-depth band matrix with 1s along a swath of size (2 *\n// depth_radius + 1) around the diagonal.\ntemplate <typename T>\nvoid GetBandMatrix(int depth, int depth_radius,\n                   Eigen::Tensor<T, 2, Eigen::RowMajor>* result) {\n  result->setZero();\n  for (int row = 0; row < depth; ++row) {\n    const int begin = std::max<int>(0, row - depth_radius);\n    const int end = std::min<int>(depth, row + depth_radius + 1);\n    Eigen::DSizes<Eigen::DenseIndex, 2> start(row, begin);\n    Eigen::DSizes<Eigen::DenseIndex, 2> sizes(1, end - begin);\n    result->slice(start, sizes).setConstant(T(1));\n  }\n}\n\n}  // namespace\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate <typename Device, typename T>\nstruct LaunchLRN;\n\ntemplate <typename T>\nstruct LaunchLRN<CPUDevice, T> {\n  LaunchLRN(int depth_radius, T bias, T alpha, T beta)\n      : depth_radius_(depth_radius), bias_(bias), alpha_(alpha), beta_(beta) {}\n\n  void launch(OpKernelContext* context, OpKernel* kernel, const Tensor& in,\n              Tensor* output) {\n    const int batch = static_cast<int>(in.dim_size(0));\n    const int rows = static_cast<int>(in.dim_size(1));\n    const int cols = static_cast<int>(in.dim_size(2));\n    const int depth = static_cast<int>(in.dim_size(3));\n\n#if defined(IS_MOBILE_PLATFORM)\n    SingleThreadedLRN(in, batch, rows, cols, depth, output);\n#else\n    const int nodes = cols * rows;\n    if (depth > kSingleThreadedLRNDepthCutoff &&\n        (beta_ == T(0.5) || beta_ == T(1))) {\n      SingleThreadedLRN(in, batch, rows, cols, depth, output);\n      return;\n    }\n\n    auto in_shaped = in.shaped<T, 2>({nodes * batch, depth});\n\n    // Multiplying the input with the band matrix has the effect of reducing the\n    // correct patch along the depth.\n    Eigen::Tensor<T, 2, Eigen::RowMajor> multiplier(depth, depth);\n    GetBandMatrix<T>(depth, depth_radius_, &multiplier);\n\n    auto out_shaped = output->shaped<T, 2>({nodes * batch, depth});\n    Eigen::array<DimPair, 1> dims = {{DimPair(1, 0)}};\n    auto tmp = in_shaped.square().contract(multiplier, dims) * alpha_ + bias_;\n    if (beta_ == T(1)) {\n      out_shaped.device(context->eigen_cpu_device()) =\n          in_shaped * tmp.inverse();\n    } else if (beta_ == T(0.5)) {\n      out_shaped.device(context->eigen_cpu_device()) = in_shaped * tmp.rsqrt();\n    } else {\n      out_shaped.device(context->eigen_cpu_device()) =\n          in_shaped * (tmp.log() * -beta_).exp();\n    }\n#endif\n  }\n\n private:\n  typedef typename Eigen::Tensor<T, 1, Eigen::RowMajor>::DimensionPair DimPair;\n\n  void SingleThreadedLRN(const Tensor& in, const int batch, const int rows,\n                         const int cols, const int depth, Tensor* out) {\n    Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>> data_in(\n        in.flat<T>().data(), depth, batch * rows * cols);\n\n    Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>> data_out(\n        out->flat<T>().data(), depth, batch * rows * cols);\n\n    const int double_depth_radius = depth_radius_ * 2;\n    Eigen::Matrix<T, Eigen::Dynamic, 1> padded_square(data_in.rows() +\n                                                      double_depth_radius);\n    padded_square.setZero();\n    for (int r = 0; r < data_in.cols(); ++r) {\n      // Do local response normalization for data_in(:, r). First, compute the\n      // square and store them in buffer for repeated use.\n      padded_square.block(depth_radius_, 0, data_out.rows(), 1) =\n          data_in.col(r).cwiseProduct(data_in.col(r)) * alpha_;\n      // Then, compute the scale and write it to data_out.\n      T accumulated_scale(0);\n      for (int i = 0; i < double_depth_radius; ++i) {\n        accumulated_scale += padded_square(i);\n      }\n      for (int i = 0; i < data_in.rows(); ++i) {\n        accumulated_scale += padded_square(i + double_depth_radius);\n        data_out(i, r) = bias_ + accumulated_scale;\n        accumulated_scale -= padded_square(i);\n      }\n    }\n\n    if (beta_ == T(1)) {\n      data_out.array() = data_in.array() * data_out.array().inverse();\n    } else if (beta_ == T(0.5)) {\n      data_out.array() = data_in.array() * data_out.array().rsqrt();\n    } else {\n      data_out.array() =\n          data_in.array() * (data_out.array().log() * -beta_).exp();\n    }\n  }\n\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename T>\nstruct LaunchLRN<GPUDevice, T> {\n  LaunchLRN(int depth_radius, T bias, T alpha, T beta)\n      : depth_radius_(depth_radius), bias_(bias), alpha_(alpha), beta_(beta) {}\n\n  void launch(OpKernelContext* context, OpKernel* kernel, const Tensor& in,\n              Tensor* output) {\n#if GOOGLE_CUDA\n    OP_REQUIRES(\n        context, beta_ >= 0.01,\n        errors::InvalidArgument(\"cuDNN requires beta >= 0.01, got: \", beta_));\n\n    OP_REQUIRES(\n        context, depth_radius_ > 0 && depth_radius_ <= 7,\n        errors::InvalidArgument(\"cuDNN requires depth_radius in [1, 7], got: \",\n                                depth_radius_));\n    OP_REQUIRES(\n        context, bias_ >= 1e-5,\n        errors::InvalidArgument(\"cuDNN requires bias >= 1e-5, got: \", bias_));\n\n    // Cast to platform-specific int to avoid conversion warnings.\n    const int batch = static_cast<int>(in.dim_size(0));\n    const int rows = static_cast<int>(in.dim_size(1));\n    const int cols = static_cast<int>(in.dim_size(2));\n    const int depth = static_cast<int>(in.dim_size(3));\n\n    se::dnn::BatchDescriptor dimensions_desc;\n    dimensions_desc.set_count(batch)\n        .set_height(rows)\n        .set_width(cols)\n        .set_feature_map_count(depth)\n        .set_layout(se::dnn::DataLayout::kBatchYXDepth);\n\n    se::dnn::NormalizeDescriptor normalize_desc;\n    normalize_desc.set_bias(bias_)\n        .set_range(depth_radius_)\n        .set_alpha(alpha_)\n        .set_beta(beta_);\n\n    auto input_data = StreamExecutorUtil::AsDeviceMemory<T>(in);\n    auto output_data = StreamExecutorUtil::AsDeviceMemory<T>(*output);\n\n    auto* stream = context->op_device_context()->stream();\n    OP_REQUIRES(context, stream, errors::Internal(\"No GPU stream available.\"));\n\n    bool status =\n        stream\n            ->ThenNormalizeWithDimensions(normalize_desc, dimensions_desc,\n                                          input_data, &output_data)\n            .ok();\n    OP_REQUIRES(context, status,\n                errors::Internal(\"NormalizeWithDimensions launch failed\"));\n#elif TENSORFLOW_USE_ROCM\n    // For NHWC input/output tensors, convert to NCHW because it's the only\n    // supported format in MIOpen for now.\n\n    // Cast to platform-specific int to avoid conversion warnings.\n    const int batch = static_cast<int>(in.dim_size(0));\n    const int rows = static_cast<int>(in.dim_size(1));\n    const int cols = static_cast<int>(in.dim_size(2));\n    const int depth = static_cast<int>(in.dim_size(3));\n\n    Tensor transformed_input;\n    OP_REQUIRES_OK(context,\n                   context->allocate_temp(\n                       DataTypeToEnum<T>::value,\n                       ShapeFromFormat(FORMAT_NCHW, in.shape(), FORMAT_NHWC),\n                       &transformed_input));\n    functor::NHWCToNCHW<GPUDevice, T, 4>()(context->eigen_device<GPUDevice>(),\n                                           in.tensor<T, 4>(),\n                                           transformed_input.tensor<T, 4>());\n\n    Tensor transformed_output;\n    OP_REQUIRES_OK(\n        context, context->allocate_temp(\n                     DataTypeToEnum<T>::value,\n                     ShapeFromFormat(FORMAT_NCHW, output->shape(), FORMAT_NHWC),\n                     &transformed_output));\n\n    perftools::gputools::dnn::BatchDescriptor dimensions_desc;\n    dimensions_desc.set_count(batch)\n        .set_height(rows)\n        .set_width(cols)\n        .set_feature_map_count(depth)\n        .set_layout(perftools::gputools::dnn::DataLayout::kBatchDepthYX);\n\n    perftools::gputools::dnn::NormalizeDescriptor normalize_desc;\n    normalize_desc.set_bias(bias_)\n        .set_range(depth_radius_)\n        .set_alpha(alpha_)\n        .set_beta(beta_);\n\n    auto input_data =\n        AsDeviceMemory(transformed_input.template flat<T>().data(),\n                       transformed_input.template flat<T>().size());\n    auto output_data =\n        AsDeviceMemory(transformed_output.template flat<T>().data(),\n                       transformed_output.template flat<T>().size());\n\n    auto* stream = context->op_device_context()->stream();\n    OP_REQUIRES(context, stream, errors::Internal(\"No GPU stream available.\"));\n\n    bool status =\n        stream\n            ->ThenNormalizeWithDimensions(normalize_desc, dimensions_desc,\n                                          input_data, &output_data)\n            .ok();\n    OP_REQUIRES(context, status,\n                errors::Internal(\"NormalizeWithDimensions launch failed\"));\n\n    // Need to convert it back to NHWC once MIOpen kernels finishes.\n    auto toConstTensor = [](const Tensor& x) -> const Tensor { return x; };\n    functor::NCHWToNHWC<GPUDevice, T, 4>()(\n        context->eigen_device<GPUDevice>(),\n        toConstTensor(transformed_output).template tensor<T, 4>(),\n        output->tensor<T, 4>());\n#endif\n  }\n\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename T>\nclass LRNOp : public OpKernel {\n public:\n  explicit LRNOp(OpKernelConstruction* context) : OpKernel(context) {\n    int64_t depth_radius64;\n    OP_REQUIRES_OK(context, context->GetAttr(\"depth_radius\", &depth_radius64));\n    OP_REQUIRES(\n        context,\n        FastBoundsCheck(depth_radius64, std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"depth_radius = \", depth_radius64,\n                                \" larger than int max\"));\n    depth_radius_ = static_cast<int>(depth_radius64);\n    float tmp;\n    OP_REQUIRES_OK(context, context->GetAttr(\"bias\", &tmp));\n    bias_ = T(tmp);\n    OP_REQUIRES_OK(context, context->GetAttr(\"alpha\", &tmp));\n    alpha_ = T(tmp);\n    OP_REQUIRES_OK(context, context->GetAttr(\"beta\", &tmp));\n    beta_ = T(tmp);\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& in = context->input(0);\n    OP_REQUIRES(context, in.dims() == 4,\n                errors::InvalidArgument(\"in must be 4-dimensional\"));\n    OP_REQUIRES(\n        context,\n        FastBoundsCheck(in.NumElements(), std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"argument to LRN too large\"));\n    // Cast to platform-specific int to avoid conversion warnings.\n    const int batch = static_cast<int>(in.dim_size(0));\n    const int rows = static_cast<int>(in.dim_size(1));\n    const int cols = static_cast<int>(in.dim_size(2));\n    const int depth = static_cast<int>(in.dim_size(3));\n\n    OP_REQUIRES(context,\n                (depth + depth_radius_) <= std::numeric_limits<int>::max(),\n                errors::InvalidArgument(\"depth \", depth, \" + depth_radius \",\n                                        depth_radius_, \" exceeds int max.\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(\n                       0, TensorShape({batch, rows, cols, depth}), &output));\n\n    LaunchLRN<Device, T> launcher(depth_radius_, bias_, alpha_, beta_);\n    launcher.launch(context, this, in, output);\n  }\n\n private:\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#define REGISTER_CPU(T)                                      \\\n  REGISTER_KERNEL_BUILDER(                                   \\\n      Name(\"LRN\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      LRNOp<CPUDevice, T>);\nTF_CALL_float(REGISTER_CPU);\nTF_CALL_half(REGISTER_CPU);\n\n#undef REGISTER_CPU\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_GPU(T)                                      \\\n  REGISTER_KERNEL_BUILDER(                                   \\\n      Name(\"LRN\").Device(DEVICE_GPU).TypeConstraint<T>(\"T\"), \\\n      LRNOp<GPUDevice, T>);\nTF_CALL_float(REGISTER_GPU);\n\n#undef REGISTER_GPU\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#if !defined(IS_MOBILE_PLATFORM)\n\ntemplate <typename Device, typename T>\nstruct LaunchLRNGrad;\n\ntemplate <typename T>\nstruct LaunchLRNGrad<CPUDevice, T> {\n  LaunchLRNGrad(int depth_radius, T bias, T alpha, T beta)\n      : depth_radius_(depth_radius),\n        bias_(bias),\n        alpha_(alpha),\n        beta_(beta),\n        alpha_beta_2_(T(-2) * alpha * beta) {}\n\n  void launch(OpKernelContext* context, OpKernel* kernel,\n              const Tensor& in_grads, const Tensor& in_image,\n              const Tensor& out_image, Tensor* output) {\n    const int64_t batch = in_grads.dim_size(0);\n    const int64_t rows = in_grads.dim_size(1);\n    const int64_t cols = in_grads.dim_size(2);\n    const int64_t depth = in_grads.dim_size(3);\n    const auto nodes = cols * rows;\n    auto grads_shaped = in_grads.shaped<T, 2>({nodes * batch, depth});\n    auto in_shaped = in_image.shaped<T, 2>({nodes * batch, depth});\n    auto activations = out_image.shaped<T, 2>({nodes * batch, depth});\n\n    auto out_shaped = output->shaped<T, 2>({nodes * batch, depth});\n    out_shaped.setZero();\n\n    auto shard = [this, activations, in_shaped, grads_shaped, out_shaped,\n                  depth](int64_t begin, int64_t end) {\n      for (int64_t i = begin; i < end; ++i) {\n        for (int64_t j = 0; j < depth; ++j) {\n          // Let y be the LRN activations and x be the inputs along the depth\n          // dimension. (LRN operates independently along rows, cols, and\n          // batch).\n          // We have\n          // yi = xi / (bias + alpha(sum_j_{i - depth_radius}^{i + depth_radius}\n          //      x_j^2))^beta\n          //\n          // Let N = (bias + alpha(sum_j_{i - depth_radius}^{i + depth_radius}\n          //           x_j^2))\n          // dy_i/dx_i = (N^beta - xi. beta*N^(beta-1)*2*alpha*xi)/N^(2*beta)\n          // dy_i/dx_j = (       - xi. beta*N^(beta-1)*2*alpha*xj)/N^(2*beta)\n          //\n          // NOTE(keveman) : We can compute N by doing (yi/xi) ^ (1/beta).\n          // However, this is numerically unstable for small values of xi. We\n          // compute N explicitly here to avoid that.\n\n          T gs = grads_shaped(i, j);\n          if (gs == T(0)) continue;\n\n          int64_t depth_begin = std::max<int64_t>(0, j - depth_radius_);\n          int64_t depth_end = std::min<int64_t>(depth, j + depth_radius_ + 1);\n\n          T norm(0);\n          for (int64_t k = depth_begin; k < depth_end; ++k) {\n            norm += in_shaped(i, k) * in_shaped(i, k);\n          }\n          norm = alpha_ * norm + bias_;\n          DCHECK_GT(norm, T(1e-6));\n          T pre_computed_pow = Eigen::numext::pow(norm, -beta_);\n          T activations_ab2 = alpha_beta_2_ * activations(i, j);\n          for (int64_t k = depth_begin; k < depth_end; ++k) {\n            T dyi = in_shaped(i, k) * activations_ab2 / norm;\n            if (k == j) {\n              dyi += pre_computed_pow;\n            }\n            dyi *= gs;\n            const_cast<typename TTypes<T, 2>::Tensor&>(out_shaped)(i, k) += dyi;\n          }\n        }\n      }\n    };\n    auto worker_threads = *(context->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers, nodes * batch,\n          depth * depth, shard);\n  }\n\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n  T alpha_beta_2_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename T>\nstruct LaunchLRNGrad<GPUDevice, T> {\n  LaunchLRNGrad(int depth_radius, T bias, T alpha, T beta)\n      : depth_radius_(depth_radius), bias_(bias), alpha_(alpha), beta_(beta) {}\n\n  void launch(OpKernelContext* context, OpKernel* kernel,\n              const Tensor& in_grads, const Tensor& in_image,\n              const Tensor& out_image, Tensor* output) {\n#if GOOGLE_CUDA\n    OP_REQUIRES(\n        context, beta_ >= 0.01,\n        errors::InvalidArgument(\"cuDNN requires beta >= 0.01, got: \", beta_));\n\n    OP_REQUIRES(\n        context, depth_radius_ > 0 && depth_radius_ <= 7,\n        errors::InvalidArgument(\"cuDNN requires depth_radius in [1, 7], got: \",\n                                depth_radius_));\n    OP_REQUIRES(\n        context, bias_ >= 1e-5,\n        errors::InvalidArgument(\"cuDNN requires bias >= 1e-5, got: \", bias_));\n\n    const int64_t batch = in_grads.dim_size(0);\n    const int64_t rows = in_grads.dim_size(1);\n    const int64_t cols = in_grads.dim_size(2);\n    const int64_t depth = in_grads.dim_size(3);\n\n    se::dnn::BatchDescriptor dimensions_desc;\n    dimensions_desc.set_count(batch)\n        .set_height(rows)\n        .set_width(cols)\n        .set_feature_map_count(depth)\n        .set_layout(se::dnn::DataLayout::kBatchYXDepth);\n\n    se::dnn::NormalizeDescriptor normalize_desc;\n    normalize_desc.set_bias(bias_)\n        .set_range(depth_radius_)\n        .set_alpha(alpha_)\n        .set_beta(beta_);\n\n    auto input_grads_data = StreamExecutorUtil::AsDeviceMemory<T>(in_grads);\n    auto input_image_data = StreamExecutorUtil::AsDeviceMemory<T>(in_image);\n    auto output_image_data = StreamExecutorUtil::AsDeviceMemory<T>(out_image);\n    auto output_grads_data = StreamExecutorUtil::AsDeviceMemory<T>(*output);\n\n    auto* stream = context->op_device_context()->stream();\n    OP_REQUIRES(context, stream, errors::Internal(\"No GPU stream available.\"));\n\n    bool status =\n        stream\n            ->ThenNormalizeBackwardWithDimensions(\n                normalize_desc, dimensions_desc, input_image_data,\n                output_image_data, input_grads_data, &output_grads_data)\n            .ok();\n    OP_REQUIRES(\n        context, status,\n        errors::Internal(\"NormalizeBackwardWithDimensions launch failed\"));\n#elif TENSORFLOW_USE_ROCM\n    // For NHWC input/output tensors, convert to NCHW because it's the only\n    // supported format in MIOpen for now.\n    const int64 batch = in_grads.dim_size(0);\n    const int64 rows = in_grads.dim_size(1);\n    const int64 cols = in_grads.dim_size(2);\n    const int64 depth = in_grads.dim_size(3);\n\n    Tensor transformed_in_grads;\n    OP_REQUIRES_OK(context, context->allocate_temp(\n                                DataTypeToEnum<T>::value,\n                                ShapeFromFormat(FORMAT_NCHW, in_grads.shape(),\n                                                FORMAT_NHWC),\n                                &transformed_in_grads));\n    functor::NHWCToNCHW<GPUDevice, T, 4>()(context->eigen_device<GPUDevice>(),\n                                           in_grads.tensor<T, 4>(),\n                                           transformed_in_grads.tensor<T, 4>());\n\n    Tensor transformed_in_image;\n    OP_REQUIRES_OK(context, context->allocate_temp(\n                                DataTypeToEnum<T>::value,\n                                ShapeFromFormat(FORMAT_NCHW, in_image.shape(),\n                                                FORMAT_NHWC),\n                                &transformed_in_image));\n    functor::NHWCToNCHW<GPUDevice, T, 4>()(context->eigen_device<GPUDevice>(),\n                                           in_image.tensor<T, 4>(),\n                                           transformed_in_image.tensor<T, 4>());\n\n    Tensor transformed_out_image;\n    OP_REQUIRES_OK(context, context->allocate_temp(\n                                DataTypeToEnum<T>::value,\n                                ShapeFromFormat(FORMAT_NCHW, out_image.shape(),\n                                                FORMAT_NHWC),\n                                &transformed_out_image));\n    functor::NHWCToNCHW<GPUDevice, T, 4>()(\n        context->eigen_device<GPUDevice>(), out_image.tensor<T, 4>(),\n        transformed_out_image.tensor<T, 4>());\n\n    Tensor transformed_output;\n    OP_REQUIRES_OK(\n        context, context->allocate_temp(\n                     DataTypeToEnum<T>::value,\n                     ShapeFromFormat(FORMAT_NCHW, output->shape(), FORMAT_NHWC),\n                     &transformed_output));\n\n    perftools::gputools::dnn::BatchDescriptor dimensions_desc;\n    dimensions_desc.set_count(batch)\n        .set_height(rows)\n        .set_width(cols)\n        .set_feature_map_count(depth)\n        .set_layout(perftools::gputools::dnn::DataLayout::kBatchDepthYX);\n\n    perftools::gputools::dnn::NormalizeDescriptor normalize_desc;\n    normalize_desc.set_bias(bias_)\n        .set_range(depth_radius_)\n        .set_alpha(alpha_)\n        .set_beta(beta_);\n\n    auto input_grads_data =\n        AsDeviceMemory(transformed_in_grads.template flat<T>().data(),\n                       transformed_in_grads.template flat<T>().size());\n    auto input_image_data =\n        AsDeviceMemory(transformed_in_image.template flat<T>().data(),\n                       transformed_in_image.template flat<T>().size());\n    auto output_image_data =\n        AsDeviceMemory(transformed_out_image.template flat<T>().data(),\n                       transformed_out_image.template flat<T>().size());\n    auto output_grads_data =\n        AsDeviceMemory(transformed_output.template flat<T>().data(),\n                       transformed_output.template flat<T>().size());\n\n    auto* stream = context->op_device_context()->stream();\n    OP_REQUIRES(context, stream, errors::Internal(\"No GPU stream available.\"));\n\n    static int64 NormalizeBackwardScratchSize = GetDnnWorkspaceLimit(\n        // default value is in bytes despite the name of the environment\n        // variable\n        \"TF_CUDNN_WORKSPACE_LIMIT_IN_MB\", 1LL << 32  // 4GB\n    );\n\n    DnnScratchAllocator scratch_allocator(NormalizeBackwardScratchSize,\n                                          context);\n    bool status = stream\n                      ->ThenNormalizeBackwardWithDimensions(\n                          normalize_desc, dimensions_desc, input_image_data,\n                          output_image_data, input_grads_data,\n                          &output_grads_data, &scratch_allocator)\n                      .ok();\n    OP_REQUIRES(\n        context, status,\n        errors::Internal(\"NormalizeBackwardWithDimensions launch failed\"));\n\n    // Need to convert it back to NHWC once MIOpen kernels finishes.\n    auto toConstTensor = [](const Tensor& x) -> const Tensor { return x; };\n    functor::NCHWToNHWC<GPUDevice, T, 4>()(\n        context->eigen_device<GPUDevice>(),\n        toConstTensor(transformed_output).template tensor<T, 4>(),\n        output->tensor<T, 4>());\n#endif\n  }\n\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename T>\nclass LRNGradOp : public OpKernel {\n public:\n  explicit LRNGradOp(OpKernelConstruction* context) : OpKernel(context) {\n    int64_t depth_radius64;\n    OP_REQUIRES_OK(context, context->GetAttr(\"depth_radius\", &depth_radius64));\n    OP_REQUIRES(\n        context,\n        FastBoundsCheck(depth_radius64, std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"depth_radius = \", depth_radius64,\n                                \" larger than int max\"));\n    depth_radius_ = static_cast<int>(depth_radius64);\n    float tmp;\n    OP_REQUIRES_OK(context, context->GetAttr(\"bias\", &tmp));\n    bias_ = T(tmp);\n    OP_REQUIRES_OK(context, context->GetAttr(\"alpha\", &tmp));\n    alpha_ = T(tmp);\n    OP_REQUIRES_OK(context, context->GetAttr(\"beta\", &tmp));\n    beta_ = T(tmp);\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& in_grads = context->input(0);\n    const Tensor& in_image = context->input(1);\n    const Tensor& out_image = context->input(2);\n\n    OP_REQUIRES(context, in_grads.dims() == 4 && in_image.dims() == 4,\n                errors::InvalidArgument(\"inputs must be 4-dimensional\"));\n    const int64_t batch = in_grads.dim_size(0);\n    const int64_t rows = in_grads.dim_size(1);\n    const int64_t cols = in_grads.dim_size(2);\n    const int64_t depth = in_grads.dim_size(3);\n    OP_REQUIRES(\n        context,\n        in_image.dim_size(0) == batch && in_image.dim_size(1) == rows &&\n            in_image.dim_size(2) == cols && in_image.dim_size(3) == depth &&\n            out_image.dim_size(0) == batch && out_image.dim_size(1) == rows &&\n            out_image.dim_size(2) == cols && out_image.dim_size(3) == depth &&\n            out_image.dims() == 4,\n        errors::InvalidArgument(\n            \"input_grads, input_image, and out_image should have the same \"\n            \"shape\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(\n                       0, TensorShape({batch, rows, cols, depth}), &output));\n\n    LaunchLRNGrad<Device, T> launcher(depth_radius_, bias_, alpha_, beta_);\n    launcher.launch(context, this, in_grads, in_image, out_image, output);\n  }\n\n private:\n  int depth_radius_;\n  T bias_;\n  T alpha_;\n  T beta_;\n};\n\n#define REGISTER_CPU(T)                                          \\\n  REGISTER_KERNEL_BUILDER(                                       \\\n      Name(\"LRNGrad\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      LRNGradOp<CPUDevice, T>);\nTF_CALL_float(REGISTER_CPU);\nTF_CALL_half(REGISTER_CPU);\n\n#undef REGISTER_CPU\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_GPU(T)                                          \\\n  REGISTER_KERNEL_BUILDER(                                       \\\n      Name(\"LRNGrad\").Device(DEVICE_GPU).TypeConstraint<T>(\"T\"), \\\n      LRNGradOp<GPUDevice, T>);\nTF_CALL_float(REGISTER_GPU);\n\n#undef REGISTER_GPU\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#endif  // !defined(IS_MOBILE_PLATFORM)\n\n}  // namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for local response normalization.\"\"\"\n\nimport copy\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors_impl\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gradient_checker\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import nn\nfrom tensorflow.python.ops import random_ops\nimport tensorflow.python.ops.nn_grad  # pylint: disable=unused-import\nfrom tensorflow.python.platform import test\n\n\nclass LRNOpTest(test.TestCase):\n\n  def _LRN(self, input_image, lrn_depth_radius=5, bias=1.0, alpha=1.0,\n           beta=0.5):\n    \"\"\"Compute expected result.\"\"\"\n    output = copy.deepcopy(input_image)\n    batch_size = input_image.shape[0]\n    rows = input_image.shape[1]\n    cols = input_image.shape[2]\n    depth = input_image.shape[3]\n    for b in range(batch_size):\n      for r in range(rows):\n        for c in range(cols):\n          for d in range(depth):\n            begin = max(0, d - lrn_depth_radius)\n            end = min(depth, d + lrn_depth_radius + 1)\n            patch = input_image[b, r, c, begin:end]\n            output[b, r, c, d] /= (\n                np.power(bias + alpha * np.sum(patch * patch), beta))\n    return output\n\n  def _RunAndVerify(self, dtype):\n    with self.cached_session():\n      # random shape\n      shape = np.random.randint(1, 16, size=4)\n      # Make depth at least 2 to make it meaningful\n      shape[3] += 1\n      p = array_ops.placeholder(dtype, shape=shape)\n      # random depth_radius, bias, alpha, beta. cuDNN requires depth_radius to\n      # be in [1, 7].\n      lrn_depth_radius = np.random.randint(1, min(8, shape[3]))\n\n      bias = 1.0 + np.random.rand()\n      alpha = 2.0 * np.random.rand()\n      # cuDNN requires beta >= 0.01.\n      beta = 0.01 + 2.0 * np.random.rand()\n      lrn_t = nn.local_response_normalization(\n          p,\n          name=\"lrn\",\n          depth_radius=lrn_depth_radius,\n          bias=bias,\n          alpha=alpha,\n          beta=beta)\n      params = {p: np.random.rand(*shape).astype(\"f\")}\n      result = lrn_t.eval(feed_dict=params)\n    expected = self._LRN(\n        params[p],\n        lrn_depth_radius=lrn_depth_radius,\n        bias=bias,\n        alpha=alpha,\n        beta=beta)\n    err = np.amax(np.abs(result - expected))\n    print(\"LRN error for bias \", bias, \"alpha \", alpha, \" beta \", beta, \" is \",\n          err)\n    if dtype == dtypes.float32:\n      self.assertTrue(err < 1e-4)\n    else:\n      self.assertTrue(err < 1e-2)\n    self.assertShapeEqual(expected, lrn_t)\n\n  @test_util.run_deprecated_v1\n  def testCompute(self):\n    for _ in range(2):\n      self._RunAndVerify(dtypes.float32)\n      # Enable when LRN supports tf.float16 on GPU.\n      if not test.is_gpu_available():\n        self._RunAndVerify(dtypes.float16)\n\n  @test_util.run_deprecated_v1\n  def testGradientsZeroInput(self):\n    with self.session():\n      shape = [4, 4, 4, 4]\n      p = array_ops.placeholder(dtypes.float32, shape=shape)\n      inp_array = np.zeros(shape).astype(\"f\")\n      lrn_op = nn.local_response_normalization(p, 2, 1.0, 0.0, 1.0, name=\"lrn\")\n      grad = gradients_impl.gradients([lrn_op], [p])[0]\n      params = {p: inp_array}\n      r = grad.eval(feed_dict=params)\n    expected = np.ones(shape).astype(\"f\")\n    self.assertAllClose(r, expected)\n    self.assertShapeEqual(expected, grad)\n\n  @test_util.run_in_graph_and_eager_modes\n  def testIncompatibleInputAndOutputImageShapes(self):\n    depth_radius = 1\n    bias = 1.59018219\n    alpha = 0.117728651\n    beta = 0.404427052\n    input_grads = random_ops.random_uniform(\n        shape=[4, 4, 4, 4],\n        minval=-10000,\n        maxval=10000,\n        dtype=dtypes.float32,\n        seed=-2033)\n    input_image = random_ops.random_uniform(\n        shape=[4, 4, 4, 4],\n        minval=-10000,\n        maxval=10000,\n        dtype=dtypes.float32,\n        seed=-2033)\n    invalid_output_image = random_ops.random_uniform(\n        shape=[4, 4, 4, 4, 4, 4],\n        minval=-10000,\n        maxval=10000,\n        dtype=dtypes.float32,\n        seed=-2033)\n    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n      self.evaluate(\n          nn.lrn_grad(\n              input_grads=input_grads,\n              input_image=input_image,\n              output_image=invalid_output_image,\n              depth_radius=depth_radius,\n              bias=bias,\n              alpha=alpha,\n              beta=beta))\n\n  def _RunAndVerifyGradients(self, dtype):\n    with self.cached_session():\n      # random shape\n      shape = np.random.randint(1, 5, size=4)\n      # Make depth at least 2 to make it meaningful\n      shape[3] += 1\n      # random depth_radius, bias, alpha, beta. cuDNN requires depth_radius to\n      # be in [1, 7].\n      lrn_depth_radius = np.random.randint(1, min(8, shape[3]))\n      bias = 1.0 + np.random.rand()\n      alpha = 1.0 * np.random.rand()\n      # cuDNN requires beta >= 0.01.\n      beta = 0.01 + 1.0 * np.random.rand()\n      if dtype == dtypes.float32:\n        inp_array = np.random.rand(*shape).astype(np.float32)\n      else:\n        inp_array = np.random.rand(*shape).astype(np.float16)\n\n      inp = constant_op.constant(\n          list(inp_array.ravel(order=\"C\")), shape=shape, dtype=dtype)\n      lrn_op = nn.local_response_normalization(\n          inp,\n          name=\"lrn\",\n          depth_radius=lrn_depth_radius,\n          bias=bias,\n          alpha=alpha,\n          beta=beta)\n      err = gradient_checker.compute_gradient_error(inp, shape, lrn_op, shape)\n    print(\"LRN Gradient error for bias \", bias, \"alpha \", alpha, \" beta \", beta,\n          \" is \", err)\n    if dtype == dtypes.float32:\n      self.assertLess(err, 1e-4)\n    else:\n      self.assertLess(err, 1.0)\n\n  @test_util.run_deprecated_v1\n  def testGradients(self):\n    for _ in range(2):\n      self._RunAndVerifyGradients(dtypes.float32)\n      # Enable when LRN supports tf.float16 on GPU.\n      if not test.is_gpu_available():\n        self._RunAndVerifyGradients(dtypes.float16)\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/lrn_op.cc", "tensorflow/python/kernel_tests/nn_ops/lrn_op_test.py"], "buggy_code_start_loc": [671, 22], "buggy_code_end_loc": [672, 113], "fixing_code_start_loc": [671, 23], "fixing_code_end_loc": [673, 151], "type": "CWE-617", "message": "TensorFlow is an open source platform for machine learning. If `LRNGrad` is given an `output_image` input tensor that is not 4-D, it results in a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit bd90b3efab4ec958b228cd7cfe9125be1c0cf255. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-35985", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-16T22:15:11.427", "lastModified": "2022-09-20T14:53:56.407", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. If `LRNGrad` is given an `output_image` input tensor that is not 4-D, it results in a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit bd90b3efab4ec958b228cd7cfe9125be1c0cf255. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. Si a \"LRNGrad\" le es dado un tensor de entrada \"output_image\" que no es 4-D, es producido un fallo de \"CHECK\" que puede ser usado para desencadenar un ataque de denegaci\u00f3n de servicio. Hemos parcheado el problema en el commit bd90b3efab4ec958b228cd7cfe9125be1c0cf255 de GitHub. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.10.0. Tambi\u00e9n seleccionaremos este compromiso en TensorFlow versi\u00f3n 2.9.1, TensorFlow versi\u00f3n 2.8.1, y TensorFlow versi\u00f3n 2.7.2, ya que estos tambi\u00e9n est\u00e1n afectados y todav\u00eda est\u00e1n en el rango admitido. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-617"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.2", "matchCriteriaId": "C6622D95-1C86-45C5-AB55-E6EEEA0996DF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.8.0", "versionEndExcluding": "2.8.1", "matchCriteriaId": "0F9D273D-02DC-441E-AA91-EAC8DEAA4B44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.9.0", "versionEndExcluding": "2.9.1", "matchCriteriaId": "FE4F8A81-6CC2-4F7F-9602-C170FDD926E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc0:*:*:*:*:*:*", "matchCriteriaId": "1DBFBCE2-0A01-4575-BE45-6775ABFB8B28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc1:*:*:*:*:*:*", "matchCriteriaId": "89806CF9-E423-4CA6-A01A-8175C260CB24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc2:*:*:*:*:*:*", "matchCriteriaId": "F2B80690-A257-4E16-BD27-9AE045BC56ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc3:*:*:*:*:*:*", "matchCriteriaId": "F335F9A4-5AB8-4E53-BC18-E01F7C653E5E"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/bd90b3efab4ec958b228cd7cfe9125be1c0cf255", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/bd90b3efab4ec958b228cd7cfe9125be1c0cf255"}}