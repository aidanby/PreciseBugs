{"buggy_code": ["<?php\r\n//\r\n//  A simple PHP CAPTCHA script\r\n//\r\n//  Copyright 2011 by Cory LaViska for A Beautiful Site, LLC\r\n//\r\n//  See readme.md for usage, demo, and licensing info\r\n//\r\nfunction simple_php_captcha($config = array()) {\r\n\r\n    // Check for GD library\r\n    if( !function_exists('gd_info') ) {\r\n        throw new Exception('Required GD library is missing');\r\n    }\r\n\r\n    $bg_path = dirname(__FILE__) . '/backgrounds/';\r\n    $font_path = dirname(__FILE__) . '/fonts/';\r\n\r\n    // Default values\r\n    $captcha_config = array(\r\n        'code' => '',\r\n        'min_length' => 5,\r\n        'max_length' => 5,\r\n        'backgrounds' => array(\r\n            $bg_path . '45-degree-fabric.png',\r\n            $bg_path . 'cloth-alike.png',\r\n            $bg_path . 'grey-sandbag.png',\r\n            $bg_path . 'kinda-jean.png',\r\n            $bg_path . 'polyester-lite.png',\r\n            $bg_path . 'stitched-wool.png',\r\n            $bg_path . 'white-carbon.png',\r\n            $bg_path . 'white-wave.png'\r\n        ),\r\n        'fonts' => array(\r\n            $font_path . 'times_new_yorker.ttf'\r\n        ),\r\n        'characters' => 'ABCDEFGHJKLMNPRSTUVWXYZabcdefghjkmnprstuvwxyz23456789',\r\n        'min_font_size' => 28,\r\n        'max_font_size' => 28,\r\n        'color' => '#666',\r\n        'angle_min' => 0,\r\n        'angle_max' => 10,\r\n        'shadow' => true,\r\n        'shadow_color' => '#fff',\r\n        'shadow_offset_x' => -1,\r\n        'shadow_offset_y' => 1\r\n    );\r\n\r\n    // Overwrite defaults with custom config values\r\n    if( is_array($config) ) {\r\n        foreach( $config as $key => $value ) $captcha_config[$key] = $value;\r\n    }\r\n\r\n    // Restrict certain values\r\n    if( $captcha_config['min_length'] < 1 ) $captcha_config['min_length'] = 1;\r\n    if( $captcha_config['angle_min'] < 0 ) $captcha_config['angle_min'] = 0;\r\n    if( $captcha_config['angle_max'] > 10 ) $captcha_config['angle_max'] = 10;\r\n    if( $captcha_config['angle_max'] < $captcha_config['angle_min'] ) $captcha_config['angle_max'] = $captcha_config['angle_min'];\r\n    if( $captcha_config['min_font_size'] < 10 ) $captcha_config['min_font_size'] = 10;\r\n    if( $captcha_config['max_font_size'] < $captcha_config['min_font_size'] ) $captcha_config['max_font_size'] = $captcha_config['min_font_size'];\r\n\r\n    // Generate CAPTCHA code if not set by user\r\n    if( empty($captcha_config['code']) ) {\r\n        $captcha_config['code'] = '';\r\n        $length = rand($captcha_config['min_length'], $captcha_config['max_length']);\r\n        while( strlen($captcha_config['code']) < $length ) {\r\n            $captcha_config['code'] .= substr($captcha_config['characters'], rand() % (strlen($captcha_config['characters'])), 1);\r\n        }\r\n    }\r\n\r\n    // Generate HTML for image src\r\n    if ( strpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['DOCUMENT_ROOT']) ) {\r\n        $image_src = substr(__FILE__, strlen( realpath($_SERVER['DOCUMENT_ROOT']) )) . '?_CAPTCHA&amp;t=' . urlencode(microtime());\r\n        $image_src = '/' . ltrim(preg_replace('/\\\\\\\\/', '/', $image_src), '/');\r\n    } else {\r\n        $_SERVER['WEB_ROOT'] = str_replace($_SERVER['SCRIPT_NAME'], '', $_SERVER['SCRIPT_FILENAME']);\r\n        $image_src = substr(__FILE__, strlen( realpath($_SERVER['WEB_ROOT']) )) . '?_CAPTCHA&amp;t=' . urlencode(microtime());\r\n        $image_src = '/' . ltrim(preg_replace('/\\\\\\\\/', '/', $image_src), '/');\r\n    }\r\n\r\n    $_SESSION['_CAPTCHA']['config'] = serialize($captcha_config);\r\n\r\n    return array(\r\n        'code' => $captcha_config['code'],\r\n        'image_src' => $image_src\r\n    );\r\n\r\n}\r\n\r\n\r\nif( !function_exists('hex2rgb') ) {\r\n    function hex2rgb($hex_str, $return_string = false, $separator = ',') {\r\n        $hex_str = preg_replace(\"/[^0-9A-Fa-f]/\", '', $hex_str); // Gets a proper hex string\r\n        $rgb_array = array();\r\n        if( strlen($hex_str) == 6 ) {\r\n            $color_val = hexdec($hex_str);\r\n            $rgb_array['r'] = 0xFF & ($color_val >> 0x10);\r\n            $rgb_array['g'] = 0xFF & ($color_val >> 0x8);\r\n            $rgb_array['b'] = 0xFF & $color_val;\r\n        } elseif( strlen($hex_str) == 3 ) {\r\n            $rgb_array['r'] = hexdec(str_repeat(substr($hex_str, 0, 1), 2));\r\n            $rgb_array['g'] = hexdec(str_repeat(substr($hex_str, 1, 1), 2));\r\n            $rgb_array['b'] = hexdec(str_repeat(substr($hex_str, 2, 1), 2));\r\n        } else {\r\n            return false;\r\n        }\r\n        return $return_string ? implode($separator, $rgb_array) : $rgb_array;\r\n    }\r\n}\r\n\r\n// Draw the image\r\nif( isset($_GET['_CAPTCHA']) ) {\r\n\r\n    session_start();\r\n\r\n    $captcha_config = unserialize($_SESSION['_CAPTCHA']['config']);\r\n    if( !$captcha_config ) exit();\r\n\r\n    unset($_SESSION['_CAPTCHA']);\r\n\r\n    // Pick random background, get info, and start captcha\r\n    $background = $captcha_config['backgrounds'][rand(0, count($captcha_config['backgrounds']) -1)];\r\n    list($bg_width, $bg_height, $bg_type, $bg_attr) = getimagesize($background);\r\n\r\n    $captcha = imagecreatefrompng($background);\r\n\r\n    $color = hex2rgb($captcha_config['color']);\r\n    $color = imagecolorallocate($captcha, $color['r'], $color['g'], $color['b']);\r\n\r\n    // Determine text angle\r\n    $angle = rand( $captcha_config['angle_min'], $captcha_config['angle_max'] ) * (rand(0, 1) == 1 ? -1 : 1);\r\n\r\n    // Select font randomly\r\n    $font = $captcha_config['fonts'][rand(0, count($captcha_config['fonts']) - 1)];\r\n\r\n    // Verify font file exists\r\n    if( !file_exists($font) ) throw new Exception('Font file not found: ' . $font);\r\n\r\n    //Set the font size.\r\n    $font_size = rand($captcha_config['min_font_size'], $captcha_config['max_font_size']);\r\n    $text_box_size = imagettfbbox($font_size, $angle, $font, $captcha_config['code']);\r\n\r\n    // Determine text position\r\n    $box_width = abs($text_box_size[6] - $text_box_size[2]);\r\n    $box_height = abs($text_box_size[5] - $text_box_size[1]);\r\n    $text_pos_x_min = 0;\r\n    $text_pos_x_max = ($bg_width) - ($box_width);\r\n    $text_pos_x = rand($text_pos_x_min, $text_pos_x_max);\r\n    $text_pos_y_min = $box_height;\r\n    $text_pos_y_max = ($bg_height) - ($box_height / 2);\r\n    $text_pos_y = rand($text_pos_y_min, $text_pos_y_max);\r\n\r\n    // Draw shadow\r\n    if( $captcha_config['shadow'] ){\r\n        $shadow_color = hex2rgb($captcha_config['shadow_color']);\r\n        $shadow_color = imagecolorallocate($captcha, $shadow_color['r'], $shadow_color['g'], $shadow_color['b']);\r\n        imagettftext($captcha, $font_size, $angle, $text_pos_x + $captcha_config['shadow_offset_x'], $text_pos_y + $captcha_config['shadow_offset_y'], $shadow_color, $font, $captcha_config['code']);\r\n    }\r\n\r\n    // Draw text\r\n    imagettftext($captcha, $font_size, $angle, $text_pos_x, $text_pos_y, $color, $font, $captcha_config['code']);\r\n\r\n    // Output image\r\n    header(\"Content-type: image/png\");\r\n    imagepng($captcha);\r\n\r\n}"], "fixing_code": ["<?php\r\n//\r\n//  A simple PHP CAPTCHA script\r\n//\r\n//  Copyright 2011 by Cory LaViska for A Beautiful Site, LLC\r\n//\r\n//  See readme.md for usage, demo, and licensing info\r\n//\r\nfunction simple_php_captcha($config = array()) {\r\n\r\n    // Check for GD library\r\n    if( !function_exists('gd_info') ) {\r\n        throw new Exception('Required GD library is missing');\r\n    }\r\n\r\n    $bg_path = dirname(__FILE__) . '/backgrounds/';\r\n    $font_path = dirname(__FILE__) . '/fonts/';\r\n\r\n    // Default values\r\n    $captcha_config = array(\r\n        'code' => '',\r\n        'min_length' => 5,\r\n        'max_length' => 5,\r\n        'backgrounds' => array(\r\n            $bg_path . '45-degree-fabric.png',\r\n            $bg_path . 'cloth-alike.png',\r\n            $bg_path . 'grey-sandbag.png',\r\n            $bg_path . 'kinda-jean.png',\r\n            $bg_path . 'polyester-lite.png',\r\n            $bg_path . 'stitched-wool.png',\r\n            $bg_path . 'white-carbon.png',\r\n            $bg_path . 'white-wave.png'\r\n        ),\r\n        'fonts' => array(\r\n            $font_path . 'times_new_yorker.ttf'\r\n        ),\r\n        'characters' => 'ABCDEFGHJKLMNPRSTUVWXYZabcdefghjkmnprstuvwxyz23456789',\r\n        'min_font_size' => 28,\r\n        'max_font_size' => 28,\r\n        'color' => '#666',\r\n        'angle_min' => 0,\r\n        'angle_max' => 10,\r\n        'shadow' => true,\r\n        'shadow_color' => '#fff',\r\n        'shadow_offset_x' => -1,\r\n        'shadow_offset_y' => 1\r\n    );\r\n\r\n    // Overwrite defaults with custom config values\r\n    if( is_array($config) ) {\r\n        foreach( $config as $key => $value ) $captcha_config[$key] = $value;\r\n    }\r\n\r\n    // Restrict certain values\r\n    if( $captcha_config['min_length'] < 1 ) $captcha_config['min_length'] = 1;\r\n    if( $captcha_config['angle_min'] < 0 ) $captcha_config['angle_min'] = 0;\r\n    if( $captcha_config['angle_max'] > 10 ) $captcha_config['angle_max'] = 10;\r\n    if( $captcha_config['angle_max'] < $captcha_config['angle_min'] ) $captcha_config['angle_max'] = $captcha_config['angle_min'];\r\n    if( $captcha_config['min_font_size'] < 10 ) $captcha_config['min_font_size'] = 10;\r\n    if( $captcha_config['max_font_size'] < $captcha_config['min_font_size'] ) $captcha_config['max_font_size'] = $captcha_config['min_font_size'];\r\n\r\n    // Generate CAPTCHA code if not set by user\r\n    if( empty($captcha_config['code']) ) {\r\n        $captcha_config['code'] = '';\r\n        $length = mt_rand($captcha_config['min_length'], $captcha_config['max_length']);\r\n        while( strlen($captcha_config['code']) < $length ) {\r\n            $captcha_config['code'] .= substr($captcha_config['characters'], mt_rand() % (strlen($captcha_config['characters'])), 1);\r\n        }\r\n    }\r\n\r\n    // Generate HTML for image src\r\n    if ( strpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['DOCUMENT_ROOT']) ) {\r\n        $image_src = substr(__FILE__, strlen( realpath($_SERVER['DOCUMENT_ROOT']) )) . '?_CAPTCHA&amp;t=' . urlencode(microtime());\r\n        $image_src = '/' . ltrim(preg_replace('/\\\\\\\\/', '/', $image_src), '/');\r\n    } else {\r\n        $_SERVER['WEB_ROOT'] = str_replace($_SERVER['SCRIPT_NAME'], '', $_SERVER['SCRIPT_FILENAME']);\r\n        $image_src = substr(__FILE__, strlen( realpath($_SERVER['WEB_ROOT']) )) . '?_CAPTCHA&amp;t=' . urlencode(microtime());\r\n        $image_src = '/' . ltrim(preg_replace('/\\\\\\\\/', '/', $image_src), '/');\r\n    }\r\n\r\n    $_SESSION['_CAPTCHA']['config'] = serialize($captcha_config);\r\n\r\n    return array(\r\n        'code' => $captcha_config['code'],\r\n        'image_src' => $image_src\r\n    );\r\n\r\n}\r\n\r\n\r\nif( !function_exists('hex2rgb') ) {\r\n    function hex2rgb($hex_str, $return_string = false, $separator = ',') {\r\n        $hex_str = preg_replace(\"/[^0-9A-Fa-f]/\", '', $hex_str); // Gets a proper hex string\r\n        $rgb_array = array();\r\n        if( strlen($hex_str) == 6 ) {\r\n            $color_val = hexdec($hex_str);\r\n            $rgb_array['r'] = 0xFF & ($color_val >> 0x10);\r\n            $rgb_array['g'] = 0xFF & ($color_val >> 0x8);\r\n            $rgb_array['b'] = 0xFF & $color_val;\r\n        } elseif( strlen($hex_str) == 3 ) {\r\n            $rgb_array['r'] = hexdec(str_repeat(substr($hex_str, 0, 1), 2));\r\n            $rgb_array['g'] = hexdec(str_repeat(substr($hex_str, 1, 1), 2));\r\n            $rgb_array['b'] = hexdec(str_repeat(substr($hex_str, 2, 1), 2));\r\n        } else {\r\n            return false;\r\n        }\r\n        return $return_string ? implode($separator, $rgb_array) : $rgb_array;\r\n    }\r\n}\r\n\r\n// Draw the image\r\nif( isset($_GET['_CAPTCHA']) ) {\r\n\r\n    session_start();\r\n\r\n    $captcha_config = unserialize($_SESSION['_CAPTCHA']['config']);\r\n    if( !$captcha_config ) exit();\r\n\r\n    unset($_SESSION['_CAPTCHA']);\r\n\r\n    // Pick random background, get info, and start captcha\r\n    $background = $captcha_config['backgrounds'][mt_rand(0, count($captcha_config['backgrounds']) -1)];\r\n    list($bg_width, $bg_height, $bg_type, $bg_attr) = getimagesize($background);\r\n\r\n    $captcha = imagecreatefrompng($background);\r\n\r\n    $color = hex2rgb($captcha_config['color']);\r\n    $color = imagecolorallocate($captcha, $color['r'], $color['g'], $color['b']);\r\n\r\n    // Determine text angle\r\n    $angle = mt_rand( $captcha_config['angle_min'], $captcha_config['angle_max'] ) * (mt_rand(0, 1) == 1 ? -1 : 1);\r\n\r\n    // Select font randomly\r\n    $font = $captcha_config['fonts'][mt_rand(0, count($captcha_config['fonts']) - 1)];\r\n\r\n    // Verify font file exists\r\n    if( !file_exists($font) ) throw new Exception('Font file not found: ' . $font);\r\n\r\n    //Set the font size.\r\n    $font_size = mt_rand($captcha_config['min_font_size'], $captcha_config['max_font_size']);\r\n    $text_box_size = imagettfbbox($font_size, $angle, $font, $captcha_config['code']);\r\n\r\n    // Determine text position\r\n    $box_width = abs($text_box_size[6] - $text_box_size[2]);\r\n    $box_height = abs($text_box_size[5] - $text_box_size[1]);\r\n    $text_pos_x_min = 0;\r\n    $text_pos_x_max = ($bg_width) - ($box_width);\r\n    $text_pos_x = mt_rand($text_pos_x_min, $text_pos_x_max);\r\n    $text_pos_y_min = $box_height;\r\n    $text_pos_y_max = ($bg_height) - ($box_height / 2);\r\n    if ($text_pos_y_min > $text_pos_y_max) {\r\n        $temp_text_pos_y = $text_pos_y_min;\r\n        $text_pos_y_min = $text_pos_y_max;\r\n        $text_pos_y_max = $temp_text_pos_y;\r\n    }\r\n    $text_pos_y = mt_rand($text_pos_y_min, $text_pos_y_max);\r\n\r\n    // Draw shadow\r\n    if( $captcha_config['shadow'] ){\r\n        $shadow_color = hex2rgb($captcha_config['shadow_color']);\r\n        $shadow_color = imagecolorallocate($captcha, $shadow_color['r'], $shadow_color['g'], $shadow_color['b']);\r\n        imagettftext($captcha, $font_size, $angle, $text_pos_x + $captcha_config['shadow_offset_x'], $text_pos_y + $captcha_config['shadow_offset_y'], $shadow_color, $font, $captcha_config['code']);\r\n    }\r\n\r\n    // Draw text\r\n    imagettftext($captcha, $font_size, $angle, $text_pos_x, $text_pos_y, $color, $font, $captcha_config['code']);\r\n\r\n    // Output image\r\n    header(\"Content-type: image/png\");\r\n    imagepng($captcha);\r\n\r\n}"], "filenames": ["simple-php-captcha.php"], "buggy_code_start_loc": [65], "buggy_code_end_loc": [152], "fixing_code_start_loc": [65], "fixing_code_end_loc": [157], "type": "CWE-200", "message": "simple-php-captcha before commit 9d65a945029c7be7bb6bc893759e74c5636be694 allows remote attackers to automatically generate the captcha response by running the same code on the client-side.", "other": {"cve": {"id": "CVE-2015-6250", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-06T21:29:00.910", "lastModified": "2017-09-13T11:21:53.037", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "simple-php-captcha before commit 9d65a945029c7be7bb6bc893759e74c5636be694 allows remote attackers to automatically generate the captcha response by running the same code on the client-side."}, {"lang": "es", "value": "simple-php-captcha antes del commit con ID 9d65a945029c7be7bb6bc893759e74c5636be694 permite a atacantes remotos generar autom\u00e1ticamente la respuesta de captcha, ejecutando el mismo c\u00f3digo en el lado del cliente."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:simple-php-captcha_project:simple-php-captcha:*:*:*:*:*:*:*:*", "versionEndIncluding": "2015-08-31", "matchCriteriaId": "4D839BFD-16D4-42F1-8069-A1F9BB278D8A"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2015/08/17/7", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/claviska/simple-php-captcha/commit/9d65a945029c7be7bb6bc893759e74c5636be694", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/claviska/simple-php-captcha/issues/16", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/claviska/simple-php-captcha/commit/9d65a945029c7be7bb6bc893759e74c5636be694"}}