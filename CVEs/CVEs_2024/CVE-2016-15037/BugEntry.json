{"buggy_code": ["<% markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, extensions = {}) %>\n<% colors = {\"critical\"=>\"darkred\", \"high\"=> \"red\", \"medium\"=> \"orange\", \"low\"=> \"yellow\", \"informational\"=> \"blue\", \"observation\"=> \"info\"} %>\n<% index = SecureRandom.hex %>\n<% vuln_index = SecureRandom.hex %>\n<!-- move to application.js -->\n\n<dl class=\"accordion updateable\" data-updateable-id=\"<%= finding[\"id\"] %>\" data-accordion>\n  <dd class=\"accordion-navigation\">\n    <a href=\"#accordion_<%= index %>\">\n      <button href=\"#\" id=\"drop_<%= index %>1_button\" data-dropdown=\"drop_<%= index %>1\" aria-controls=\"drop_<%= index %>1\" aria-expanded=\"false\" class=\"severity label tiny button dropdown adjust_top <%= colors[finding[\"severity\"].to_s.downcase].to_s %>\"><%= finding[\"severity\"].to_s.titleize %></button>\n      <strong><%= finding[\"name\"] || finding[\"type\"]  %></strong>\n      <button href=\"#\" id=\"drop_<%= index %>_button\" data-dropdown=\"drop_<%= index %>\" aria-controls=\"drop_<%= index %>\" aria-expanded=\"false\" class=\"status right tiny button dropdown\"><%= finding[\"status\"] %></button><br>\n      <ul id=\"drop_<%= index %>1\" data-dropdown-content class=\"f-dropdown\" aria-hidden=\"true\">\n        <% [\"Critical\", \"High\", \"Medium\", \"Low\", \"Observation\", \"Informational\"].each do |status| %>\n          <li>\n            <%= link_to status, update_metadata_result_path(id: @result, \"key[0]\"=> \"vulnerabilities.[id:#{finding[\"id\"]}].severity\", \"value[0]\"=> status, \"target[0]\"=>\"#drop_#{index}1_button\"), remote: true %>\n          </li>\n        <% end %>\n      </ul>\n      <ul id=\"drop_<%= index %>\" data-dropdown-content class=\"f-dropdown\" aria-hidden=\"true\">\n        <% if finding.try(:[],\"status\").match(/open/i) %>\n          <% [\"Remediated\", \"False Positive\", \"Ignored\"].each do |status| %>\n            <li>\n              <%= link_to status, update_metadata_result_path(id: @result, \"key[0]\"=> \"vulnerabilities.[id:#{finding[\"id\"]}].status\", \"value[0]\"=> status, \"target[0]\"=>\"#drop_#{index}_button\"), remote: true %>\n            </li>\n          <% end %>\n        <% else %>\n          <% [\"Reopened\"].each do |status| %>\n            <li>\n              <%= link_to status, update_metadata_result_path(id: @result, \"key[0]\"=> \"vulnerabilities.[id:#{finding[\"id\"]}].status\", \"value[0]\"=> status, \"target[0]\"=>\"#drop_#{index}_button\"), remote: true %>\n            </li>\n          <% end %>\n        <% end %>\n      </ul>\n    </a>\n    <div id=\"accordion_<%= index %>\" class=\"content panel\">\n      <div class=\"row\">\n        <div class=\"large-8 columns\">\n          <dl class=\"dl-horizontal\" style=\"word-wrap: break-word\">\n            <dt>Type</dt>\n            <dd><%= finding[\"type\"] %></dd>\n            <dt>URL</dt>\n            <dd><%= finding[\"url\"] %></dd>\n          </dl>\n        </div>\n        <div class=\"large-4 columns\">\n          <dl class=\"dl-horizontal\">\n            <dt>Identified</dt>\n            <dd><%= time_ago_in_words(finding[\"identified\"]) %> ago</dd>\n            <dt>Source(s)</dt>\n            <dd><%= finding[\"source\"].join(\", \") %></dd>\n            <% vuln_index = SecureRandom.hex %>\n            <dt>Jira ID(s)</dt>\n            <dd id=\"jira_ids_<%= vuln_index %>\" name=\"jira_ids_<%= vuln_index %>\">\n            <% if @result.metadata[\"vulnerabilities\"][i].try(:[], \"jira_ids\").to_s != \"\" %>\n            <% @result.metadata[\"vulnerabilities\"][i].try(:[], \"jira_ids\").split(',').each do |jira| %>\n            <a href=\"<%= Jiralicious.uri %>/browse/<%= jira %>\" target=\"_blank\"><%= jira %></a>\n            <% end %>\n            <% end %>\n            </dd>\n            <dt>Update Jira</dt>\n            <dd>\n              <%= form_tag update_metadata_result_path(id: @result, \"key[0]\"=> \"vulnerabilities.[id:#{finding[\"id\"]}].jira_ids\", \"target[0]\" => \"#jira_ids_\" + vuln_index), remote: true do %>\n                <div class=\"row collapse\">\n                  <div class=\"small-8 columns\">\n                    <%= text_field_tag \"value[0]\", nil, placeholder: \"Jira IDs (comma separated)\", id: \"vulnerability_jira_field_\" + vuln_index %>\n                  </div>\n                  <input type=\"hidden\" name=\"<%= Jiralicious.uri.to_s %>\" id=\"jira_url\">\n                  <div class=\"small-2 columns\">\n                    <%= submit_tag \"Update\", class: \"button postfix tiny update_jira\", remote: true, :data => {result_id: vuln_index} %>\n                  </div>\n                </div>\n              <% end %>\n          </dd>\n        </dl>\n      </div>\n    </div>\n    <% if finding[\"source_code_file\"].to_s.strip != \"\" %>\n      <div class=\"row\">\n        <div class=\"large-8 columns\">\n          <dl class=\"dl-horizontal\">\n            <dt>Source Code File</dt>\n            <dd><%= finding[\"source_code_file\"] %></dd>\n          </dl>\n        </div>\n        <div class=\"large-4 columns\">\n          <dl class=\"dl-horizontal\">\n            <dt>Line</dt>\n            <dd><%= finding[\"source_code_line\"] %></dd>\n          </dl>\n        </div>\n      </div>\n    <% end %>\n    <% if finding.try(:[], \"source\").include? \"github\"%>\n      <div class=\"row\">\n        <div class=\"large-12 columns\">\n          <% if finding.try(:[], \"match_location\") == \"content\" %>\n            <pre>Confidence: <%= \"#{finding.try(:[], \"score\")}\" %></pre>\n            <dl class=\"dl-horizontal\">\n              <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n                <%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %>\n              </div>\n            </dl>\n          <% else %>\n            <dl class=\"dl-horizontal\">\n              <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n                <%= highlight(h(finding[\"url\"]), h(finding[\"term\"])) %>\n              </div>\n            </dl>\n          <% end %>\n        </div>\n      </div>\n    <% end %>\n    <% unless ([\"curl\", \"sketchy\", \"depot\"] & finding.try(:[], \"source\")).empty? %>\n      <div class=\"row\">\n        <div class=\"large-12 columns\">\n          <% if finding.try(:[], \"match_location\") == \"headers\" and finding.try(:[], \"code_fragment\") != nil%>\n            <div class=\"row\">\n              <div class=\"large-8 columns\">\n                <dl class=\"dl-horizontal\">\n                  <dt>Header Match</dt>\n                  <dd><%= \"#{finding[\"term\"]}\" %></dd>\n                </dl>\n              </div>\n            </div>\n            <dl class=\"dl-horizontal\">\n              <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n                <% if finding[\"line_number\"].present? and finding[\"line_number\"].to_i == 0 %>\n                  <b><%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %></b>\n                <% else %>\n                  <% (finding[\"before\"]||[]).each do |i| %>\n                  </br>\n                  <%= i[1].to_s.rstrip %>\n                <% end %>\n              <% end %>\n            </br>\n            <b><%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %></b>\n            <% (finding[\"after\"]||[]).each do |i| %>\n            </br>\n            <%= i[1].to_s.rstrip %>\n          <% end %>\n        </div>\n      </dl>\n      <!-- CUSTOMIZE THIS FOR PATHS AND BOTH,\n        THINK ABOUT TERMS WE MAY NEED TO -->\n    <% elsif finding.try(:[], \"match_location\") == \"both\" and finding.try(:[], \"code_fragment\") != nil%>\n      <div class=\"row\">\n        <div class=\"large-8 columns\">\n          <dl class=\"dl-horizontal\">\n            <dt>Content and Path Match</dt>\n            <dd><%= \"#{finding[\"term\"]}\" %></dd>\n            <dt>Path</dt>\n            <dd><%= \"#{finding[\"path\"]}\" %></dd>\n          </dl>\n        </div>\n      </div>\n      <dl class=\"dl-horizontal\">\n        <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n          <% if finding[\"line_number\"].present? and finding[\"line_number\"].to_i == 0 %>\n            <b><%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %></b>\n          <% else %>\n            <% (finding[\"before\"]||[]).each do |i| %>\n            </br>\n            <%= i[0].to_s.strip %> <%= i[1].to_s.rstrip %>\n          <% end %>\n        <% end %>\n      </br>\n      <%= finding[\"line_number\"].to_s.strip %> <b><%= highlight(h(finding[\"code_fragment\"].to_s),h(finding[\"term\"])) %></b>\n      <% (finding[\"after\"]||[]).each do |i| %>\n      </br>\n      <%= i[0].to_s.strip %> <%= i[1].to_s.rstrip %>\n    <% end %>\n  </div>\n</dl>\n<% elsif finding.try(:[], \"match_location\") == \"path\"%>\n  <div class=\"row\">\n    <div class=\"large-8 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Path Match</dt>\n        <dd><%= \"#{finding[\"path\"]}\" %></dd>\n      </dl>\n    </div>\n  </div>\n  <dl class=\"dl-horizontal\">\n    <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n      <b><%= highlight(h(finding[\"url\"]), h(finding[\"path\"])) %></b>\n    </br>\n  </div>\n</dl>\n<% elsif finding.try(:[], \"match_location\") == \"content\" and finding.try(:[], \"code_fragment\") != nil%>\n  <div class=\"row\">\n    <div class=\"large-8 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Content Match</dt>\n        <dd><%= \"#{finding[\"term\"]}\" %></dd>\n        <% unless finding[\"status_code\"].nil? %>\n          <dt>Status Code</dt>\n          <dd><%= \"#{finding[\"status_code\"]}\" %></dd>\n        <% end %>\n      </dl>\n    </div>\n  </div>\n  <dl class=\"dl-horizontal\">\n    <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n      <% if finding[\"line_number\"].present? and finding[\"line_number\"].to_i == 0 %>\n        <b><%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %></b>\n      <% else %>\n        <% (finding[\"before\"]||[]).each do |i| %>\n        </br>\n        <%= i[0].to_s.strip %> <%= i[1].to_s.rstrip %>\n      <% end %>\n    <% end %>\n  </br>\n  <%= finding[\"line_number\"].to_s.strip %> <b><%= highlight(h(finding[\"code_fragment\"].to_s),h(finding[\"term\"])) %></b>\n  <% (finding[\"after\"]||[]).each do |i| %>\n  </br>\n  <%= i[0].to_s.strip %> <%= i[1].to_s.rstrip %>\n<% end %>\n</div>\n</dl>\n<% else %>\n  <div class=\"row\">\n    <div class=\"large-8 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Status Code</dt>\n        <dd><%= \"#{finding[\"status_code\"]}\" %></dd>\n      </dl>\n    </div>\n  </div>\n  <!-- Ends inside if -->\n<% end %>\n<!-- Ends unless clause -->\n</div>\n</div>\n<% end %>\n<% if !finding[\"source_code\"].nil? && !finding[\"source_code\"][\"hit_source_line\"].nil? %>\n  <div class=\"row\">\n    <div class=\"large-12 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Source Code</dt>\n        <% if !finding[\"source_code\"][\"before\"].nil? %>\n          <% finding[\"source_code\"][\"before\"].each do |key, val| %>\n            <dd><%= key.to_i %>: <%= h(val).gsub(\" \", \"&nbsp;\").gsub(\"\\t\", \"&nbsp;&nbsp;\").html_safe %></dd>\n          <% end %>\n        <% end %>\n        <dd><b><%= finding[\"source_code\"][\"hit_line_number\"].to_i %>: <%=  h(finding[\"source_code\"][\"hit_source_line\"]).gsub(\" \", \"&nbsp;\").gsub(\"\\t\", \"&nbsp;&nbsp;\").html_safe %></b></dd>\n        <% if !finding[\"source_code\"][\"after\"].nil? %>\n          <% finding[\"source_code\"][\"after\"].each do |key, val| %>\n            <dd><%= key %>: <%= h(val).gsub(\" \", \"&nbsp;\").gsub(\"\\t\", \"&nbsp;&nbsp;\").html_safe %></dd>\n          <% end %>\n        <% end %>\n      </dl>\n    </div>\n  </div>\n<% end %>\n<% if finding[\"details\"].to_s.strip != \"\" %>\n  <div class=\"row\">\n    <div class=\"large-12 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Details</dt>\n        <dd><%= markdown.render(finding[\"details\"].to_s).html_safe %></dd>\n      </dl>\n    </div>\n  </div>\n<% end %>\n<% if finding[\"confidence_level\"].to_s.strip != \"\" %>\n  <div class=\"row\">\n    <div class=\"large-8 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Confidence Level</dt>\n        <dd><%= finding[\"confidence_level\"] %></dd>\n      </dl>\n    </div>\n    <div class=\"large-4 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt></dt>\n        <dd></dd>\n      </dl>\n    </div>\n  </div>\n<% end %>\n<% if !finding[\"attack_vectors\"].blank? %>\n  <h3 class=\"section_header\">Attack Vectors</h3>\n  <table>\n    <thead>\n      <tr>\n        <th>Input Type</th>\n        <th>Input Name</th>\n        <th>Payload</th>\n        <th>Method</th>\n        <th></th>\n      </tr>\n    </thead>\n    <tbody>\n      <% finding[\"attack_vectors\"].each do |vect| %>\n        <tr>\n          <td><%= vect[\"type\"] %></td>\n          <td><%= vect[\"name\"] %></td>\n          <td><%= vect[\"payload\"] %></td>\n          <td><%= vect[\"method\"] %></td>\n          <td>\n            <% if vect[\"note\"].present? %>\n              <span data-tooltip aria-haspopup=\"true\" class=\"has-tip tip-left\" title=\"<%= vect[\"note\"]%>\"><i class=\"fi-info\"></i></span></td>\n          <% end %>\n        </tr>\n      <% end %>\n    </tbody>\n  </table>\n<% end %>\n</div>\n</dd>\n</dl>\n", "<%= fields_for \"task[options]\", OpenStruct.new(task_options) do |builder| %>\n  <% task_type_options.each do |key, value| %>\n    <div class=\"field\">\n    <%= label_tag do %>\n    <%= value[:name] + (value[:required] == true ? \"*\" : \"\") %>\n      <% if value[:description].present? %>\n        <span data-tooltip aria-haspopup=\"true\" class=\"has-tip tip-right\" title=\"<%= value[:description] %>\"><i class=\"fi-info\"></i></span>\n      <% end %>\n    <% end %>\n\n    <% if value[:type] == :boolean %>\n      <%= builder.check_box key, value: builder.object[key] || value[:default] %>\n    <% elsif value[:type] == :choice %>\n      <%= builder.select key, value[:choices],{ selected: builder.object[key] || value[:default]} %>\n    <% elsif value[:type] == :saved_result_filter %>\n      <%= builder.collection_select key, (SavedFilter.where(saved_filter_type: \"Result\", user_id:current_user)+SavedFilter.where(saved_filter_type: \"Result\", public:true)).uniq, :id, :name, include_blank: true %>\n    <% elsif value[:type] == :system_metadata %>\n      <%= builder.collection_select key, SystemMetadata.all.uniq, :id, :key, include_blank: true %>\n\n    <% elsif value[:type] == :saved_event_filter %>\n      <%= builder.collection_select key, (SavedFilter.where(saved_filter_type: \"Event\", user_id:current_user)+SavedFilter.where(saved_filter_type: \"Event\", public:true)).uniq, :id, :name, include_blank: true %>\n<% elsif value[:type] == :text %>\n      <%= builder.text_area key, value: builder.object[key] || value[:default] %>\n    <% else %>\n      <%= builder.text_field key, value: builder.object[key] || value[:default] %>\n    <% end %>\n    </div>\n  <% end %>\n<% end %>\n", "<%= javascript_tag do %>\n  window.localStorage.setItem('expanded_all_tasks', \"false\");\n  $(document).ready(function () {\n    $(\"#loading\").hide();\n  });\n$(function(){\n  $('#expandall_arrow').click(function(){\n        $(\"#loading\").show();\n    });\n\n  $(document).ajaxStop(function(){\n        $(\"#loading\").hide();\n    });\n    });\n<% end %>\n<div id=\"loading\" class=\"loading\" style=\"display:nont\">Loading&#8230;</div>\n<div id=\"selection_table\">\n  <% i = 1 %>\n  <% @tasks.sort.each do |group, tasks| %>\n    <nav class=\"tab-bar\">\n      <section class=\"tab-bar-section\">\n        <h1>Group <%= i %></h1>\n      </section>\n    </nav>\n    <% i += 1 %>\n    <table>\n      <tr>\n        <th><%= link_to \"&#9658;\".html_safe, expandall_tasks_path(), :id => \"expandall_arrow\", :remote=>true %></th>\n        <th></th>\n        <th></th>\n        <th>Name</th>\n        <th>Task Type</th>\n        <th>Query</th>\n        <th>Last Success</th>\n        <th></th>\n      </tr>\n      <% tasks.partition{|v| v.enabled == true}.flatten.each do |task| %>\n        <tr class=\"<%= \"disabled\" if task.enabled != true %>\">\n          <td><%= link_to \"&#9658;\".html_safe, summary_task_path(task), :id => \"summary_icon_#{task.id}\", :remote=>true %></td>\n          <td><%= check_box_tag \"task_ids[]\", task.id, false, {:class=>\"result_checkbox\"} %></td>\n          <% status_class = task.metadata.try(:[], \"_last_status\").to_s.downcase %>\n          <% status_class = \"classification-\" + status_class if status_class.present? %>\n          <% if task.metadata.try(:[], \"_last_status\") %>\n            <% message = task.metadata.try(:[], \"_last_status\").to_s %>\n            <% message +=  \"<br/>\" + task.metadata.try(:[], \"_last_status_message\").to_s if task.metadata.try(:[], \"_last_status_message\")%>\n            <% message += \"<br/>\" + link_to(\"Event #{task.metadata.try(:[], \"_last_status_event\")}\", event_path(task.metadata.try(:[], \"_last_status_event\"))) if task.metadata.try(:[], \"_last_status_event\") %>\n            <% message +=  \"<br/>Last run: \" + time_ago_in_words(DateTime.parse(task.metadata.try(:[], \"_last_run\").to_s)) + \" ago\" if task.metadata.try(:[], \"_last_run\")%>\n            <% message +=  \"<br/>Last success: \" + time_ago_in_words(DateTime.parse(task.metadata.try(:[], \"_last_successful_run\").to_s)) + \" ago\" if task.metadata.try(:[], \"_last_successful_run\")%>\n            <% if task.metadata.try(:[], \"current_events\").try(:[], \"Error\").present? %>\n              <% message += search_form_for Event.search, :url=>search_events_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"current_events\"][\"Error\"].first(200).each do |error_event| %>\n                  <%= hidden_field_tag 'q[id_in][]', error_event %>\n                <% end %>\n                <%= link_to 'Current Event Errors: ' + task.metadata.try(:[], \"current_events\").try(:[], \"Error\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"current_events\").try(:[], \"Warn\").present? %>\n              <% message += search_form_for Event.search, :url=>search_events_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"current_events\"][\"Warn\"].first(200).each do |warn_event| %>\n                  <%= hidden_field_tag 'q[id_in][]', warn_event %>\n                <% end %>\n                <%= link_to 'Current Event Warnings: ' + task.metadata.try(:[], \"current_events\").try(:[], \"Warn\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"current_results\").try(:[], \"created\").present? %>\n              <% message += search_form_for Result.search, :url=>search_results_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"current_results\"][\"created\"].first(200).each do |created_result| %>\n                  <%= hidden_field_tag 'q[id_in][]', created_result %>\n                <% end %>\n                <%= link_to 'Current Results Created: ' + task.metadata.try(:[], \"current_results\").try(:[], \"created\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"current_results\").try(:[], \"updated\").present? %>\n              <% message += search_form_for Result.search, :url=>search_results_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"current_results\"][\"updated\"].first(200).each_with_index do |index, updated_result| %>\n                  <%= hidden_field_tag 'q[id_in][]', updated_result %>\n                <% end %>\n                <%= link_to 'Current Results Updated: ' + task.metadata.try(:[], \"current_results\").try(:[], \"updated\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"previous_events\").try(:[], \"Error\").present? %>\n              <% message += search_form_for Event.search, :url=>search_events_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"previous_events\"][\"Error\"].first(200).each do |error_event| %>\n                  <%= hidden_field_tag 'q[id_in][]', error_event %>\n                <% end %>\n                <%= link_to 'Previous Event Errors: ' + task.metadata.try(:[], \"previous_events\").try(:[], \"Error\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"previous_events\").try(:[], \"Warn\").present? %>\n              <% message += search_form_for Event.search, :url=>search_events_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"previous_events\"][\"Warn\"].first(200).each do |warn_event| %>\n                  <%= hidden_field_tag 'q[id_in][]', warn_event %>\n                <% end %>\n                <%= link_to 'Previous Event Warnings: ' + task.metadata.try(:[], \"previous_events\").try(:[], \"Warn\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"previous_results\").try(:[], \"created\").present? %>\n              <% message += search_form_for Result.search, :url=>search_results_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"previous_results\"][\"created\"].first(200).each do |created_result| %>\n                  <%= hidden_field_tag 'q[id_in][]', created_result %>\n                <% end %>\n                <%= link_to 'Previous Results Created: ' + task.metadata.try(:[], \"previous_results\").try(:[], \"created\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"previous_results\").try(:[], \"updated\").present? %>\n              <% message += search_form_for Result.search, :url=>search_results_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"previous_results\"][\"updated\"].first(200).each do |updated_result| %>\n                  <%= hidden_field_tag 'q[id_in][]', updated_result %>\n                <% end %>\n                <%= link_to 'Previous Results Updated: ' + task.metadata.try(:[], \"previous_results\").try(:[], \"updated\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n          <% end %>\n          <td class=\"<%= status_class %> has-tip bettertooltip\" data-tooltip data-options=\"hover_delay: 500;\" aria-haspopup=\"true\"  title=\"<%= message %>\">&nbsp;</td>\n          <td><%= link_to task.name, task %></td>\n          <td><%= task.task_type_name %></td>\n          <td><%= task.query %></td>\n          <td><%= time_ago_in_words(DateTime.parse(task.metadata.try(:[], \"_last_successful_run\").to_s)) + \" ago\" if task.metadata.try(:[], \"_last_successful_run\")%></td>\n          <td>\n            <% if task.enabled %>\n              <%= link_to 'Disable', disable_task_path(task), method: :post, class: \"button tiny\" if can? :disable, task %>\n            <% else %>\n              <%= link_to 'Enable', enable_task_path(task), method: :post, class: \"button tiny\" if can? :enable, task %>\n            <% end %>\n            <%= link_to 'Edit', edit_task_path(task), class: \"button tiny\" if can? :edit, task %>\n            <%= link_to 'Destroy', task, method: :delete, data: { confirm: 'Are you sure?' }, class: \"button tiny alert\" if can? :destroy, task %></td>\n        </tr>\n        <tr>\n          <td colspan=\"8\" style=\"padding: 0; margin: 0; border: 0;\">\n            <div id=\"summary_<%= task.id %>\" style=\"display:none;\"> </div>\n          </td>\n        </tr>\n      <% end %>\n    </table>\n    <br />\n  <% end %>\n</div>\n<%= link_to 'New Task', new_task_path, class: \"button\" if can? :create, Task %>\n<%= link_to 'Run All Enabled Tasks', run_tasks_path, class: \"button alert\" if can? :run, Task  %>\n<%= content_for :sidebar do %>\n  <div class=\"sidebar\">\n    <nav class=\"tab-bar\">\n      <section class=\"tab-bar-section\">\n        <h1>Actions</h1>\n      </section>\n    </nav>\n    <section class=\"panel sidepanel\">\n      <%= form_tag bulk_update_tasks_path, method: :post, :id=>\"update_multiple_form\" do %>\n        <dl class=\"dl-horizontal\">\n          <dt class=\"half\">Move to:</dt>\n          <dd>\n            <a href=\"#\" data-dropdown=\"drop_move\" class=\"button dropdown tiny secondary\">Choose group</a><br>\n            <ul id=\"drop_move\" data-dropdown-content class=\"f-dropdown\">\n              <% groups = Task.select(&:group).map(&:group).uniq.sort.each_with_index.map{|g,i| [g,\"Group #{i+1}\"]}\n            groups << [groups.try(:last).try(:first).to_i+1, \"New Group\"]\n           %>\n              <% groups.each do |group| %>\n                <li><%= link_to group.last, \"#\", method: :post, class: \"update_multiple_link\", data: {commit: \"Change Group\", group_id: group.first} %></li>\n              <% end %>\n            </ul>\n          </dd>\n        </dl>\n        <% if can? :enable, Task %>\n          <%= submit_tag \"Enable\", :method=>:post, :class=>\"button small update_multiple_button\" %>\n        <% end %>\n        <% if can? :disable, Task %>\n          <%= submit_tag \"Disable\", :method=>:post, :class=>\"button small update_multiple_button\" %>\n        <% end %>\n        <% if can? :run, Task %>\n          <%= submit_tag \"Run\", :method=>:post, :class=>\"button small update_multiple_button\" %>\n        <% end %>\n        <% if can? :destroy, Task %>\n          <%= submit_tag \"Delete\", :method=>:delete, :class=>\"button small alert update_multiple_button\", data: {:confirm=>\"Are you sure you want to delete these tasks?\"} %>\n        <% end %>\n      <% end %>\n    </section>\n  </div>\n<% end %>\n", "#     Copyright 2016 Netflix, Inc.\n#\n#     Licensed under the Apache License, Version 2.0 (the \"License\");\n#     you may not use this file except in compliance with the License.\n#     You may obtain a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#     Unless required by applicable law or agreed to in writing, software\n#     distributed under the License is distributed on an \"AS IS\" BASIS,\n#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#     See the License for the specific language governing permissions and\n#     limitations under the License.\n#\n#This task will download a repo via git or scraping depotsearch then run a scanner (or scanners) on it\nrequire 'shellwords'\nrequire 'posix/spawn'\n\nclass ScumblrTask::PythonAnalyzer < ScumblrTask::Async\n  include POSIX::Spawn\n  def self.task_type_name\n    \"Python Analyzer\"\n  end\n\n  def self.task_category\n    \"Security\"\n  end\n\n  def self.options\n    return {\n      :saved_result_filter=> {name: \"Result Filter\",\n                              description: \"Only run endpoint analyzer matching the given filter\",\n                              required: true,\n                              type: :saved_result_filter\n                              },\n      :key_suffix => {name: \"Key Suffix\",\n                      description: \"Provide a key suffix for testing out experimental regularz expressions\",\n                      required: false,\n                      type: :string\n                      },\n      :confidence_level => {name: \"Confidence Level\",\n                            description: \"Confidence level to include in results\",\n                            required: false,\n                            type: :choice,\n                            default: :High,\n                            choices: [:High, :Medium, :Low]\n                            },\n      :severity_level => {name: \"Confidence Level\",\n                          description: \"Confidence level to include in results\",\n                          required: false,\n                          type: :choice,\n                          default: :High,\n                          choices: [:High, :Medium, :Low]\n                          }\n    }\n  end\n\n  def self.description\n    \"Downloads python projects and runs Bandit. Creates vulnerabilities for findings\"\n  end\n\n  def self.config_options\n    {:downloads_tmp_dir =>{ name: \"Repo Download Location\",\n      description: \"Location to download repos. Defaults to /tmp/python_analyzer\",\n      required: false\n      }\n    }\n  end\n\n  def initialize(options={})\n    # Do setup\n    super\n\n    @temp_path = @downloads_tmp_dir.to_s.strip\n    if @temp_path == \"\"\n      @temp_path = \"/tmp\"\n    end\n    @temp_path += \"/python_analyzer/\"\n\n    unless File.directory?(@temp_path)\n      FileUtils.mkdir_p(@temp_path)\n    end\n\n  end\n\n  def tokenize_command(cmd)\n    res = cmd.split(/\\s(?=(?:[^'\"]|'[^']*'|\"[^\"]*\")*$)/).\n      select {|s| not s.empty? }.\n      map {|s| s.gsub(/(^ +)|( +$)|(^[\"']+)|([\"']+$)/,'')}\n    return res\n  end\n\n  def scan_with_bandit(local_repo_path)\n    results = []\n    \n    conf_str = \"\"\n    if @options[:confidence_level].to_s.downcase == \"low\"\n      conf_str = \"-i\"\n    elsif @options[:confidence_level].to_s.downcase == \"medium\"\n      conf_str = \"-ii\"\n    else\n      cond_str = \"-iii\"\n    end\n\n    sev_str = \"\"\n    if @options[:severity_level].to_s.downcase == \"low\"\n      sev_str = \"-l\"\n    elsif @options[:severity_level].to_s.downcase == \"medium\"\n      sev_str = \"-ll\"\n    else\n      sev_str = \"-lll\"\n    end\n\n    cmd = \"bandit #{conf_str} #{sev_str} -r -f json #{local_repo_path.shellescape}\"\n    data = \"\"\n    pid, stdin, stdout, stderr = popen4(*tokenize_command(cmd))\n    data += stdout.read\n    [stdin, stdout, stderr].each { |io| io.close if !io.closed? }\n    process, exit_status_wrapper = Process::waitpid2(pid)\n    exit_status = exit_status_wrapper.exitstatus.to_i\n    parsed_results = JSON.parse(data.strip) rescue nil\n    if !parsed_results.nil?\n      results.push parsed_results\n    end\n\n    return results\n  end\n\n  def perform_work(r)\n    repo_local_path = \"\"\n    findings = []\n    begin\n      if (r.metadata[\"github_analyzer\"][\"git_clone_url\"].nil? || r.metadata[\"github_analyzer\"][\"git_clone_url\"].to_s.strip == \"\") && r.url !~ /github.com/\n        create_error(\"No URL for result: #{r.id.to_s}\")\n      else\n        if r.metadata[\"github_analyzer\"][\"git_clone_url\"].nil?\n          git_url = r.url + \".git\"\n        else\n          git_url = r.metadata[\"github_analyzer\"][\"git_clone_url\"]\n        end\n        status = Timeout::timeout(600) do\n          Rails.logger.info \"Cloning and scanning #{git_url}\"\n          \n          #download the repo so we can scan it\n          repo_local_path = \"#{@temp_path}#{git_url.split('/').last.gsub(/\\.git$/,\"\")}\"\n          dsd = RepoDownloader.new(git_url, repo_local_path)\n          dsd.download\n        end\n\n        status = Timeout::timeout(600) do\n          scan_with_bandit(repo_local_path).each do |scan_result|\n            scan_result[\"results\"].each do |issue|\n              vuln = Vulnerability.new\n              vuln.type = issue[\"issue_text\"].to_s\n              vuln.task_id = @options[:_self].id.to_s\n\n              if(@options[:key_suffix].present?)\n                vuln.key_suffix = @options[:key_suffix]\n              end\n              vuln.source_code_file = issue[\"filename\"].to_s.gsub(@temp_path, \"\")\n              vuln.source_code_line = issue[\"line_number\"].to_s\n              vuln.confidence_level = issue[\"issue_confidence\"].to_s\n              vuln.severity = issue[\"issue_severity\"].to_s\n              vuln.source = \"Bandit\"\n              findings.push vuln\n            end\n          end\n        end\n        r.metadata[\"python_analyzer\"] = true\n        r.metadata[\"python_results\"] ||= {}\n        r.metadata[\"python_results\"][\"latest\"] ||= {}\n        r.metadata[\"python_results\"][\"git_repo\"] = git_url\n        r.metadata[\"python_results\"][\"results_date\"] = Time.now.to_s\n        if !findings.empty?\n          r.update_vulnerabilities(findings)\n        end\n        if r.changed?\n          r.save!\n        end\n      end\n      #now that we're done with it, delete the cloned repo\n    ensure\n      if repo_local_path != \"\" && Dir.exists?(repo_local_path)\n        FileUtils.rm_rf(repo_local_path)\n      end\n    end\n    \n  end\n\n  def run\n    super\n  end\n\nend\n"], "fixing_code": ["<% markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, extensions = {}) %>\n<% colors = {\"critical\"=>\"darkred\", \"high\"=> \"red\", \"medium\"=> \"orange\", \"low\"=> \"yellow\", \"informational\"=> \"blue\", \"observation\"=> \"info\"} %>\n<% index = SecureRandom.hex %>\n<% vuln_index = SecureRandom.hex %>\n<!-- move to application.js -->\n\n<dl class=\"accordion updateable\" data-updateable-id=\"<%= finding[\"id\"] %>\" data-accordion>\n  <dd class=\"accordion-navigation\">\n    <a href=\"#accordion_<%= index %>\">\n      <button href=\"#\" id=\"drop_<%= index %>1_button\" data-dropdown=\"drop_<%= index %>1\" aria-controls=\"drop_<%= index %>1\" aria-expanded=\"false\" class=\"severity label tiny button dropdown adjust_top <%= colors[finding[\"severity\"].to_s.downcase].to_s %>\"><%= finding[\"severity\"].to_s.titleize %></button>\n      <strong><%= finding[\"name\"] || finding[\"type\"]  %></strong>\n      <button href=\"#\" id=\"drop_<%= index %>_button\" data-dropdown=\"drop_<%= index %>\" aria-controls=\"drop_<%= index %>\" aria-expanded=\"false\" class=\"status right tiny button dropdown\"><%= finding[\"status\"] %></button><br>\n      <ul id=\"drop_<%= index %>1\" data-dropdown-content class=\"f-dropdown\" aria-hidden=\"true\">\n        <% [\"Critical\", \"High\", \"Medium\", \"Low\", \"Observation\", \"Informational\"].each do |status| %>\n          <li>\n            <%= link_to status, update_metadata_result_path(id: @result, \"key[0]\"=> \"vulnerabilities.[id:#{finding[\"id\"]}].severity\", \"value[0]\"=> status, \"target[0]\"=>\"#drop_#{index}1_button\"), remote: true %>\n          </li>\n        <% end %>\n      </ul>\n      <ul id=\"drop_<%= index %>\" data-dropdown-content class=\"f-dropdown\" aria-hidden=\"true\">\n        <% if finding.try(:[],\"status\").match(/open/i) %>\n          <% [\"Remediated\", \"False Positive\", \"Ignored\"].each do |status| %>\n            <li>\n              <%= link_to status, update_metadata_result_path(id: @result, \"key[0]\"=> \"vulnerabilities.[id:#{finding[\"id\"]}].status\", \"value[0]\"=> status, \"target[0]\"=>\"#drop_#{index}_button\"), remote: true %>\n            </li>\n          <% end %>\n        <% else %>\n          <% [\"Reopened\"].each do |status| %>\n            <li>\n              <%= link_to status, update_metadata_result_path(id: @result, \"key[0]\"=> \"vulnerabilities.[id:#{finding[\"id\"]}].status\", \"value[0]\"=> status, \"target[0]\"=>\"#drop_#{index}_button\"), remote: true %>\n            </li>\n          <% end %>\n        <% end %>\n      </ul>\n    </a>\n    <div id=\"accordion_<%= index %>\" class=\"content panel\">\n      <div class=\"row\">\n        <div class=\"large-8 columns\">\n          <dl class=\"dl-horizontal\" style=\"word-wrap: break-word\">\n            <dt>Type</dt>\n            <dd><%= finding[\"type\"] %></dd>\n            <dt>URL</dt>\n            <dd><%= finding[\"url\"] %></dd>\n          </dl>\n        </div>\n        <div class=\"large-4 columns\">\n          <dl class=\"dl-horizontal\">\n            <dt>Identified</dt>\n            <dd><%= time_ago_in_words(finding[\"identified\"]) %> ago</dd>\n            <dt>Source(s)</dt>\n            <dd><%= finding[\"source\"].join(\", \") %></dd>\n            <% vuln_index = SecureRandom.hex %>\n            <dt>Jira ID(s)</dt>\n            <dd id=\"jira_ids_<%= vuln_index %>\" name=\"jira_ids_<%= vuln_index %>\">\n            <% if @result.metadata[\"vulnerabilities\"][i].try(:[], \"jira_ids\").to_s != \"\" %>\n            <% @result.metadata[\"vulnerabilities\"][i].try(:[], \"jira_ids\").split(',').each do |jira| %>\n            <a href=\"<%= Jiralicious.uri %>/browse/<%= jira %>\" target=\"_blank\"><%= jira %></a>\n            <% end %>\n            <% end %>\n            </dd>\n            <dt>Update Jira</dt>\n            <dd>\n              <%= form_tag update_metadata_result_path(id: @result, \"key[0]\"=> \"vulnerabilities.[id:#{finding[\"id\"]}].jira_ids\", \"target[0]\" => \"#jira_ids_\" + vuln_index), remote: true do %>\n                <div class=\"row collapse\">\n                  <div class=\"small-8 columns\">\n                    <%= text_field_tag \"value[0]\", nil, placeholder: \"Jira IDs (comma separated)\", id: \"vulnerability_jira_field_\" + vuln_index %>\n                  </div>\n                  <input type=\"hidden\" name=\"<%= Jiralicious.uri.to_s %>\" id=\"jira_url\">\n                  <div class=\"small-2 columns\">\n                    <%= submit_tag \"Update\", class: \"button postfix tiny update_jira\", remote: true, :data => {result_id: vuln_index} %>\n                  </div>\n                </div>\n              <% end %>\n          </dd>\n        </dl>\n      </div>\n    </div>\n    <% if finding[\"source_code_file\"].to_s.strip != \"\" %>\n      <div class=\"row\">\n        <div class=\"large-8 columns\">\n          <dl class=\"dl-horizontal\">\n            <dt>Source Code File</dt>\n            <dd><%= finding[\"source_code_file\"] %></dd>\n          </dl>\n        </div>\n        <div class=\"large-4 columns\">\n          <dl class=\"dl-horizontal\">\n            <dt>Line</dt>\n            <dd><%= finding[\"source_code_line\"] %></dd>\n          </dl>\n        </div>\n      </div>\n    <% end %>\n    <% if finding.try(:[], \"source\").include? \"github\"%>\n      <div class=\"row\">\n        <div class=\"large-12 columns\">\n          <% if finding.try(:[], \"match_location\") == \"content\" %>\n            <pre>Confidence: <%= \"#{finding.try(:[], \"score\")}\" %></pre>\n            <dl class=\"dl-horizontal\">\n              <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n                <%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %>\n              </div>\n            </dl>\n          <% else %>\n            <dl class=\"dl-horizontal\">\n              <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n                <%= highlight(h(finding[\"url\"]), h(finding[\"term\"])) %>\n              </div>\n            </dl>\n          <% end %>\n        </div>\n      </div>\n    <% end %>\n    <% unless ([\"curl\", \"sketchy\", \"depot\"] & finding.try(:[], \"source\")).empty? %>\n      <div class=\"row\">\n        <div class=\"large-12 columns\">\n          <% if finding.try(:[], \"match_location\") == \"headers\" and finding.try(:[], \"code_fragment\") != nil%>\n            <div class=\"row\">\n              <div class=\"large-8 columns\">\n                <dl class=\"dl-horizontal\">\n                  <dt>Header Match</dt>\n                  <dd><%= \"#{finding[\"term\"]}\" %></dd>\n                </dl>\n              </div>\n            </div>\n            <dl class=\"dl-horizontal\">\n              <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n                <% if finding[\"line_number\"].present? and finding[\"line_number\"].to_i == 0 %>\n                  <b><%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %></b>\n                <% else %>\n                  <% (finding[\"before\"]||[]).each do |i| %>\n                  </br>\n                  <%= i[1].to_s.rstrip %>\n                <% end %>\n              <% end %>\n            </br>\n            <b><%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %></b>\n            <% (finding[\"after\"]||[]).each do |i| %>\n            </br>\n            <%= i[1].to_s.rstrip %>\n          <% end %>\n        </div>\n      </dl>\n      <!-- CUSTOMIZE THIS FOR PATHS AND BOTH,\n        THINK ABOUT TERMS WE MAY NEED TO -->\n    <% elsif finding.try(:[], \"match_location\") == \"both\" and finding.try(:[], \"code_fragment\") != nil%>\n      <div class=\"row\">\n        <div class=\"large-8 columns\">\n          <dl class=\"dl-horizontal\">\n            <dt>Content and Path Match</dt>\n            <dd><%= \"#{finding[\"term\"]}\" %></dd>\n            <dt>Path</dt>\n            <dd><%= \"#{finding[\"path\"]}\" %></dd>\n          </dl>\n        </div>\n      </div>\n      <dl class=\"dl-horizontal\">\n        <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n          <% if finding[\"line_number\"].present? and finding[\"line_number\"].to_i == 0 %>\n            <b><%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %></b>\n          <% else %>\n            <% (finding[\"before\"]||[]).each do |i| %>\n            </br>\n            <%= i[0].to_s.strip %> <%= i[1].to_s.rstrip %>\n          <% end %>\n        <% end %>\n      </br>\n      <%= finding[\"line_number\"].to_s.strip %> <b><%= highlight(h(finding[\"code_fragment\"].to_s),h(finding[\"term\"])) %></b>\n      <% (finding[\"after\"]||[]).each do |i| %>\n      </br>\n      <%= i[0].to_s.strip %> <%= i[1].to_s.rstrip %>\n    <% end %>\n  </div>\n</dl>\n<% elsif finding.try(:[], \"match_location\") == \"path\"%>\n  <div class=\"row\">\n    <div class=\"large-8 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Path Match</dt>\n        <dd><%= \"#{finding[\"path\"]}\" %></dd>\n      </dl>\n    </div>\n  </div>\n  <dl class=\"dl-horizontal\">\n    <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n      <b><%= highlight(h(finding[\"url\"]), h(finding[\"path\"])) %></b>\n    </br>\n  </div>\n</dl>\n<% elsif finding.try(:[], \"match_location\") == \"content\" and finding.try(:[], \"code_fragment\") != nil%>\n  <div class=\"row\">\n    <div class=\"large-8 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Content Match</dt>\n        <dd><%= \"#{finding[\"term\"]}\" %></dd>\n        <% unless finding[\"status_code\"].nil? %>\n          <dt>Status Code</dt>\n          <dd><%= \"#{finding[\"status_code\"]}\" %></dd>\n        <% end %>\n      </dl>\n    </div>\n  </div>\n  <dl class=\"dl-horizontal\">\n    <div class=\"panel\" style=\"word-wrap: break-word; font-family: monospace;\"\">\n      <% if finding[\"line_number\"].present? and finding[\"line_number\"].to_i == 0 %>\n        <b><%= highlight(h(finding[\"code_fragment\"]), h(finding[\"term\"])) %></b>\n      <% else %>\n        <% (finding[\"before\"]||[]).each do |i| %>\n        </br>\n        <%= i[0].to_s.strip %> <%= i[1].to_s.rstrip %>\n      <% end %>\n    <% end %>\n  </br>\n  <%= finding[\"line_number\"].to_s.strip %> <b><%= highlight(h(finding[\"code_fragment\"].to_s),h(finding[\"term\"])) %></b>\n  <% (finding[\"after\"]||[]).each do |i| %>\n  </br>\n  <%= i[0].to_s.strip %> <%= i[1].to_s.rstrip %>\n<% end %>\n</div>\n</dl>\n<% else %>\n  <div class=\"row\">\n    <div class=\"large-8 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Status Code</dt>\n        <dd><%= \"#{finding[\"status_code\"]}\" %></dd>\n      </dl>\n    </div>\n  </div>\n  <!-- Ends inside if -->\n<% end %>\n<!-- Ends unless clause -->\n</div>\n</div>\n<% end %>\n<% if !finding[\"source_code\"].nil? && !finding[\"source_code\"][\"hit_source_line\"].nil? %>\n  <div class=\"row\">\n    <div class=\"large-12 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Source Code</dt>\n        <% if !finding[\"source_code\"][\"before\"].nil? %>\n          <% finding[\"source_code\"][\"before\"].each do |key, val| %>\n            <dd><%= key.to_i %>: <%= h(val).gsub(\" \", \"&nbsp;\").gsub(\"\\t\", \"&nbsp;&nbsp;\").html_safe %></dd>\n          <% end %>\n        <% end %>\n        <dd><b><%= finding[\"source_code\"][\"hit_line_number\"].to_i %>: <%=  h(finding[\"source_code\"][\"hit_source_line\"]).gsub(\" \", \"&nbsp;\").gsub(\"\\t\", \"&nbsp;&nbsp;\").html_safe %></b></dd>\n        <% if !finding[\"source_code\"][\"after\"].nil? %>\n          <% finding[\"source_code\"][\"after\"].each do |key, val| %>\n            <dd><%= key %>: <%= h(val).gsub(\" \", \"&nbsp;\").gsub(\"\\t\", \"&nbsp;&nbsp;\").html_safe %></dd>\n          <% end %>\n        <% end %>\n      </dl>\n    </div>\n  </div>\n<% end %>\n<% if finding[\"details\"].to_s.strip != \"\" %>\n  <div class=\"row\">\n    <div class=\"large-12 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Details</dt>\n        <dd><%= markdown.render(finding[\"details\"].to_s).html_safe %></dd>\n      </dl>\n    </div>\n  </div>\n<% end %>\n<% if finding[\"confidence_level\"].to_s.strip != \"\" %>\n  <div class=\"row\">\n    <div class=\"large-8 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt>Confidence Level</dt>\n        <dd><%= finding[\"confidence_level\"] %></dd>\n      </dl>\n    </div>\n    <div class=\"large-4 columns\">\n      <dl class=\"dl-horizontal\">\n        <dt></dt>\n        <dd></dd>\n      </dl>\n    </div>\n  </div>\n<% end %>\n<% if !finding[\"attack_vectors\"].blank? %>\n  <h3 class=\"section_header\">Attack Vectors</h3>\n  <table>\n    <thead>\n      <tr>\n        <th>Input Type</th>\n        <th>Input Name</th>\n        <th>Payload</th>\n        <th>Method</th>\n        <th></th>\n      </tr>\n    </thead>\n    <tbody>\n      <% finding[\"attack_vectors\"].each do |vect| %>\n        <tr>\n          <td><%= vect[\"type\"] %></td>\n          <td><%= vect[\"name\"] %></td>\n          <td><%= vect[\"payload\"] %></td>\n          <td><%= vect[\"method\"] %></td>\n          <td>\n            <% if vect[\"note\"].present? %>\n              <span data-tooltip aria-haspopup=\"true\" class=\"has-tip tip-left\" title=\"<%= h(vect[\"note\"])%>\"><i class=\"fi-info\"></i></span></td>\n          <% end %>\n        </tr>\n      <% end %>\n    </tbody>\n  </table>\n<% end %>\n</div>\n</dd>\n</dl>\n", "<%= fields_for \"task[options]\", OpenStruct.new(task_options) do |builder| %>\n  <% task_type_options.each do |key, value| %>\n    <div class=\"field\">\n    <%= label_tag do %>\n    <%= value[:name] + (value[:required] == true ? \"*\" : \"\") %>\n      <% if value[:description].present? %>\n        <span data-tooltip aria-haspopup=\"true\" class=\"has-tip tip-right\" title=\"<%= h(value[:description]) %>\"><i class=\"fi-info\"></i></span>\n      <% end %>\n    <% end %>\n\n    <% if value[:type] == :boolean %>\n      <%= builder.check_box key, value: builder.object[key] || value[:default] %>\n    <% elsif value[:type] == :choice %>\n      <%= builder.select key, value[:choices],{ selected: builder.object[key] || value[:default]} %>\n    <% elsif value[:type] == :saved_result_filter %>\n      <%= builder.collection_select key, (SavedFilter.where(saved_filter_type: \"Result\", user_id:current_user)+SavedFilter.where(saved_filter_type: \"Result\", public:true)).uniq, :id, :name, include_blank: true %>\n    <% elsif value[:type] == :system_metadata %>\n      <%= builder.collection_select key, SystemMetadata.all.uniq, :id, :key, include_blank: true %>\n\n    <% elsif value[:type] == :saved_event_filter %>\n      <%= builder.collection_select key, (SavedFilter.where(saved_filter_type: \"Event\", user_id:current_user)+SavedFilter.where(saved_filter_type: \"Event\", public:true)).uniq, :id, :name, include_blank: true %>\n<% elsif value[:type] == :text %>\n      <%= builder.text_area key, value: builder.object[key] || value[:default] %>\n    <% else %>\n      <%= builder.text_field key, value: builder.object[key] || value[:default] %>\n    <% end %>\n    </div>\n  <% end %>\n<% end %>\n", "<%= javascript_tag do %>\n  window.localStorage.setItem('expanded_all_tasks', \"false\");\n  $(document).ready(function () {\n    $(\"#loading\").hide();\n  });\n$(function(){\n  $('#expandall_arrow').click(function(){\n        $(\"#loading\").show();\n    });\n\n  $(document).ajaxStop(function(){\n        $(\"#loading\").hide();\n    });\n    });\n<% end %>\n<div id=\"loading\" class=\"loading\" style=\"display:nont\">Loading&#8230;</div>\n<div id=\"selection_table\">\n  <% i = 1 %>\n  <% @tasks.sort.each do |group, tasks| %>\n    <nav class=\"tab-bar\">\n      <section class=\"tab-bar-section\">\n        <h1>Group <%= i %></h1>\n      </section>\n    </nav>\n    <% i += 1 %>\n    <table>\n      <tr>\n        <th><%= link_to \"&#9658;\".html_safe, expandall_tasks_path(), :id => \"expandall_arrow\", :remote=>true %></th>\n        <th></th>\n        <th></th>\n        <th>Name</th>\n        <th>Task Type</th>\n        <th>Query</th>\n        <th>Last Success</th>\n        <th></th>\n      </tr>\n      <% tasks.partition{|v| v.enabled == true}.flatten.each do |task| %>\n        <tr class=\"<%= \"disabled\" if task.enabled != true %>\">\n          <td><%= link_to \"&#9658;\".html_safe, summary_task_path(task), :id => \"summary_icon_#{task.id}\", :remote=>true %></td>\n          <td><%= check_box_tag \"task_ids[]\", task.id, false, {:class=>\"result_checkbox\"} %></td>\n          <% status_class = task.metadata.try(:[], \"_last_status\").to_s.downcase %>\n          <% status_class = \"classification-\" + status_class if status_class.present? %>\n          <% if task.metadata.try(:[], \"_last_status\") %>\n            <% message = task.metadata.try(:[], \"_last_status\").to_s %>\n            <% message +=  \"<br/>\" + h(task.metadata.try(:[], \"_last_status_message\").to_s) if task.metadata.try(:[], \"_last_status_message\") %>\n            <% message += \"<br/>\" + link_to(\"Event #{task.metadata.try(:[], \"_last_status_event\")}\", event_path(task.metadata.try(:[], \"_last_status_event\"))) if task.metadata.try(:[], \"_last_status_event\") %>\n            <% message +=  \"<br/>Last run: \" + time_ago_in_words(DateTime.parse(task.metadata.try(:[], \"_last_run\").to_s)) + \" ago\" if task.metadata.try(:[], \"_last_run\")%>\n            <% message +=  \"<br/>Last success: \" + time_ago_in_words(DateTime.parse(task.metadata.try(:[], \"_last_successful_run\").to_s)) + \" ago\" if task.metadata.try(:[], \"_last_successful_run\")%>\n            <% if task.metadata.try(:[], \"current_events\").try(:[], \"Error\").present? %>\n              <% message += search_form_for Event.search, :url=>search_events_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"current_events\"][\"Error\"].first(200).each do |error_event| %>\n                  <%= hidden_field_tag 'q[id_in][]', error_event %>\n                <% end %>\n                <%= link_to 'Current Event Errors: ' + task.metadata.try(:[], \"current_events\").try(:[], \"Error\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"current_events\").try(:[], \"Warn\").present? %>\n              <% message += search_form_for Event.search, :url=>search_events_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"current_events\"][\"Warn\"].first(200).each do |warn_event| %>\n                  <%= hidden_field_tag 'q[id_in][]', warn_event %>\n                <% end %>\n                <%= link_to 'Current Event Warnings: ' + task.metadata.try(:[], \"current_events\").try(:[], \"Warn\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"current_results\").try(:[], \"created\").present? %>\n              <% message += search_form_for Result.search, :url=>search_results_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"current_results\"][\"created\"].first(200).each do |created_result| %>\n                  <%= hidden_field_tag 'q[id_in][]', created_result %>\n                <% end %>\n                <%= link_to 'Current Results Created: ' + task.metadata.try(:[], \"current_results\").try(:[], \"created\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"current_results\").try(:[], \"updated\").present? %>\n              <% message += search_form_for Result.search, :url=>search_results_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"current_results\"][\"updated\"].first(200).each_with_index do |index, updated_result| %>\n                  <%= hidden_field_tag 'q[id_in][]', updated_result %>\n                <% end %>\n                <%= link_to 'Current Results Updated: ' + task.metadata.try(:[], \"current_results\").try(:[], \"updated\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"previous_events\").try(:[], \"Error\").present? %>\n              <% message += search_form_for Event.search, :url=>search_events_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"previous_events\"][\"Error\"].first(200).each do |error_event| %>\n                  <%= hidden_field_tag 'q[id_in][]', error_event %>\n                <% end %>\n                <%= link_to 'Previous Event Errors: ' + task.metadata.try(:[], \"previous_events\").try(:[], \"Error\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"previous_events\").try(:[], \"Warn\").present? %>\n              <% message += search_form_for Event.search, :url=>search_events_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"previous_events\"][\"Warn\"].first(200).each do |warn_event| %>\n                  <%= hidden_field_tag 'q[id_in][]', warn_event %>\n                <% end %>\n                <%= link_to 'Previous Event Warnings: ' + task.metadata.try(:[], \"previous_events\").try(:[], \"Warn\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"previous_results\").try(:[], \"created\").present? %>\n              <% message += search_form_for Result.search, :url=>search_results_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"previous_results\"][\"created\"].first(200).each do |created_result| %>\n                  <%= hidden_field_tag 'q[id_in][]', created_result %>\n                <% end %>\n                <%= link_to 'Previous Results Created: ' + task.metadata.try(:[], \"previous_results\").try(:[], \"created\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n            <% if task.metadata.try(:[], \"previous_results\").try(:[], \"updated\").present? %>\n              <% message += search_form_for Result.search, :url=>search_results_path, :html => {:target=>'_blank'}, :method=>:post, :authenticity_token => false, id:\"search_form\" do |f| %>\n                <% task.metadata[\"previous_results\"][\"updated\"].first(200).each do |updated_result| %>\n                  <%= hidden_field_tag 'q[id_in][]', updated_result %>\n                <% end %>\n                <%= link_to 'Previous Results Updated: ' + task.metadata.try(:[], \"previous_results\").try(:[], \"updated\").length.to_s, \"\", {class: \"submit_form_link\", target: '_blank'} %>\n              <% end %>\n            <% end %>\n          <% end %>\n          <td class=\"<%= status_class %> has-tip bettertooltip\" data-tooltip data-options=\"hover_delay: 500;\" aria-haspopup=\"true\"  title=\"<%= message %>\">&nbsp;</td>\n          <td><%= link_to task.name, task %></td>\n          <td><%= task.task_type_name %></td>\n          <td><%= task.query %></td>\n          <td><%= time_ago_in_words(DateTime.parse(task.metadata.try(:[], \"_last_successful_run\").to_s)) + \" ago\" if task.metadata.try(:[], \"_last_successful_run\")%></td>\n          <td>\n            <% if task.enabled %>\n              <%= link_to 'Disable', disable_task_path(task), method: :post, class: \"button tiny\" if can? :disable, task %>\n            <% else %>\n              <%= link_to 'Enable', enable_task_path(task), method: :post, class: \"button tiny\" if can? :enable, task %>\n            <% end %>\n            <%= link_to 'Edit', edit_task_path(task), class: \"button tiny\" if can? :edit, task %>\n            <%= link_to 'Destroy', task, method: :delete, data: { confirm: 'Are you sure?' }, class: \"button tiny alert\" if can? :destroy, task %></td>\n        </tr>\n        <tr>\n          <td colspan=\"8\" style=\"padding: 0; margin: 0; border: 0;\">\n            <div id=\"summary_<%= task.id %>\" style=\"display:none;\"> </div>\n          </td>\n        </tr>\n      <% end %>\n    </table>\n    <br />\n  <% end %>\n</div>\n<%= link_to 'New Task', new_task_path, class: \"button\" if can? :create, Task %>\n<%= link_to 'Run All Enabled Tasks', run_tasks_path, class: \"button alert\" if can? :run, Task  %>\n<%= content_for :sidebar do %>\n  <div class=\"sidebar\">\n    <nav class=\"tab-bar\">\n      <section class=\"tab-bar-section\">\n        <h1>Actions</h1>\n      </section>\n    </nav>\n    <section class=\"panel sidepanel\">\n      <%= form_tag bulk_update_tasks_path, method: :post, :id=>\"update_multiple_form\" do %>\n        <dl class=\"dl-horizontal\">\n          <dt class=\"half\">Move to:</dt>\n          <dd>\n            <a href=\"#\" data-dropdown=\"drop_move\" class=\"button dropdown tiny secondary\">Choose group</a><br>\n            <ul id=\"drop_move\" data-dropdown-content class=\"f-dropdown\">\n              <% groups = Task.select(&:group).map(&:group).uniq.sort.each_with_index.map{|g,i| [g,\"Group #{i+1}\"]}\n            groups << [groups.try(:last).try(:first).to_i+1, \"New Group\"]\n           %>\n              <% groups.each do |group| %>\n                <li><%= link_to group.last, \"#\", method: :post, class: \"update_multiple_link\", data: {commit: \"Change Group\", group_id: group.first} %></li>\n              <% end %>\n            </ul>\n          </dd>\n        </dl>\n        <% if can? :enable, Task %>\n          <%= submit_tag \"Enable\", :method=>:post, :class=>\"button small update_multiple_button\" %>\n        <% end %>\n        <% if can? :disable, Task %>\n          <%= submit_tag \"Disable\", :method=>:post, :class=>\"button small update_multiple_button\" %>\n        <% end %>\n        <% if can? :run, Task %>\n          <%= submit_tag \"Run\", :method=>:post, :class=>\"button small update_multiple_button\" %>\n        <% end %>\n        <% if can? :destroy, Task %>\n          <%= submit_tag \"Delete\", :method=>:delete, :class=>\"button small alert update_multiple_button\", data: {:confirm=>\"Are you sure you want to delete these tasks?\"} %>\n        <% end %>\n      <% end %>\n    </section>\n  </div>\n<% end %>\n", "#     Copyright 2016 Netflix, Inc.\n#\n#     Licensed under the Apache License, Version 2.0 (the \"License\");\n#     you may not use this file except in compliance with the License.\n#     You may obtain a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#     Unless required by applicable law or agreed to in writing, software\n#     distributed under the License is distributed on an \"AS IS\" BASIS,\n#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#     See the License for the specific language governing permissions and\n#     limitations under the License.\n#\n#This task will download a repo via git or scraping depotsearch then run a scanner (or scanners) on it\nrequire 'shellwords'\nrequire 'posix/spawn'\n\nclass ScumblrTask::PythonAnalyzer < ScumblrTask::Async\n  include POSIX::Spawn\n  def self.task_type_name\n    \"Python Analyzer\"\n  end\n\n  def self.task_category\n    \"Security\"\n  end\n\n  def self.options\n    return {\n      :saved_result_filter=> {name: \"Result Filter\",\n                              description: \"Only run endpoint analyzer matching the given filter\",\n                              required: true,\n                              type: :saved_result_filter\n                              },\n      :key_suffix => {name: \"Key Suffix\",\n                      description: \"Provide a key suffix for testing out experimental regularz expressions\",\n                      required: false,\n                      type: :string\n                      },\n      :confidence_level => {name: \"Confidence Level\",\n                            description: \"Confidence level to include in results\",\n                            required: false,\n                            type: :choice,\n                            default: :High,\n                            choices: [:High, :Medium, :Low]\n                            },\n      :severity_level => {name: \"Severity Level\",\n                          description: \"Severity level to include in results\",\n                          required: false,\n                          type: :choice,\n                          default: :High,\n                          choices: [:High, :Medium, :Low]\n                          }\n    }\n  end\n\n  def self.description\n    \"Downloads python projects and runs Bandit. Creates vulnerabilities for findings\"\n  end\n\n  def self.config_options\n    {:downloads_tmp_dir =>{ name: \"Repo Download Location\",\n      description: \"Location to download repos. Defaults to /tmp/python_analyzer\",\n      required: false\n      }\n    }\n  end\n\n  def initialize(options={})\n    # Do setup\n    super\n\n    @temp_path = @downloads_tmp_dir.to_s.strip\n    if @temp_path == \"\"\n      @temp_path = \"/tmp\"\n    end\n    @temp_path += \"/python_analyzer/\"\n\n    unless File.directory?(@temp_path)\n      FileUtils.mkdir_p(@temp_path)\n    end\n\n  end\n\n  def tokenize_command(cmd)\n    res = cmd.split(/\\s(?=(?:[^'\"]|'[^']*'|\"[^\"]*\")*$)/).\n      select {|s| not s.empty? }.\n      map {|s| s.gsub(/(^ +)|( +$)|(^[\"']+)|([\"']+$)/,'')}\n    return res\n  end\n\n  def scan_with_bandit(local_repo_path)\n    results = []\n    \n    conf_str = \"\"\n    if @options[:confidence_level].to_s.downcase == \"low\"\n      conf_str = \"-i\"\n    elsif @options[:confidence_level].to_s.downcase == \"medium\"\n      conf_str = \"-ii\"\n    else\n      cond_str = \"-iii\"\n    end\n\n    sev_str = \"\"\n    if @options[:severity_level].to_s.downcase == \"low\"\n      sev_str = \"-l\"\n    elsif @options[:severity_level].to_s.downcase == \"medium\"\n      sev_str = \"-ll\"\n    else\n      sev_str = \"-lll\"\n    end\n\n    cmd = \"bandit #{conf_str} #{sev_str} -r -f json #{local_repo_path.shellescape}\"\n    data = \"\"\n    pid, stdin, stdout, stderr = popen4(*tokenize_command(cmd))\n    data += stdout.read\n    [stdin, stdout, stderr].each { |io| io.close if !io.closed? }\n    process, exit_status_wrapper = Process::waitpid2(pid)\n    exit_status = exit_status_wrapper.exitstatus.to_i\n    parsed_results = JSON.parse(data.strip) rescue nil\n    if !parsed_results.nil?\n      results.push parsed_results\n    end\n\n    return results\n  end\n\n  def perform_work(r)\n    repo_local_path = \"\"\n    findings = []\n    begin\n      if (r.metadata[\"github_analyzer\"][\"git_clone_url\"].nil? || r.metadata[\"github_analyzer\"][\"git_clone_url\"].to_s.strip == \"\") && r.url !~ /github.com/\n        create_error(\"No URL for result: #{r.id.to_s}\")\n      else\n        if r.metadata[\"github_analyzer\"][\"git_clone_url\"].nil?\n          git_url = r.url + \".git\"\n        else\n          git_url = r.metadata[\"github_analyzer\"][\"git_clone_url\"]\n        end\n        status = Timeout::timeout(600) do\n          Rails.logger.info \"Cloning and scanning #{git_url}\"\n          \n          #download the repo so we can scan it\n          repo_local_path = \"#{@temp_path}#{git_url.split('/').last.gsub(/\\.git$/,\"\")}\"\n          dsd = RepoDownloader.new(git_url, repo_local_path)\n          dsd.download\n        end\n\n        status = Timeout::timeout(600) do\n          scan_with_bandit(repo_local_path).each do |scan_result|\n            scan_result[\"results\"].each do |issue|\n              vuln = Vulnerability.new\n              vuln.type = issue[\"issue_text\"].to_s\n              vuln.task_id = @options[:_self].id.to_s\n\n              if(@options[:key_suffix].present?)\n                vuln.key_suffix = @options[:key_suffix]\n              end\n              vuln.source_code_file = issue[\"filename\"].to_s.gsub(@temp_path, \"\")\n              vuln.source_code_line = issue[\"line_number\"].to_s\n              vuln.confidence_level = issue[\"issue_confidence\"].to_s\n              vuln.severity = issue[\"issue_severity\"].to_s\n              vuln.source = \"Bandit\"\n              findings.push vuln\n            end\n          end\n        end\n        r.metadata[\"python_analyzer\"] = true\n        r.metadata[\"python_results\"] ||= {}\n        r.metadata[\"python_results\"][\"latest\"] ||= {}\n        r.metadata[\"python_results\"][\"git_repo\"] = git_url\n        r.metadata[\"python_results\"][\"results_date\"] = Time.now.to_s\n        if !findings.empty?\n          r.update_vulnerabilities(findings)\n        end\n        if r.changed?\n          r.save!\n        end\n      end\n      #now that we're done with it, delete the cloned repo\n    ensure\n      if repo_local_path != \"\" && Dir.exists?(repo_local_path)\n        FileUtils.rm_rf(repo_local_path)\n      end\n    end\n    \n  end\n\n  def run\n    super\n  end\n\nend\n"], "filenames": ["app/views/results/metadata/_vulnerability.html.erb", "app/views/task_types/_options_fields.html.erb", "app/views/tasks/index.html.erb", "lib/scumblr_tasks/security/python_analyzer.rb"], "buggy_code_start_loc": [303, 7, 45, 48], "buggy_code_end_loc": [304, 8, 46, 50], "fixing_code_start_loc": [303, 7, 45, 48], "fixing_code_end_loc": [304, 8, 46, 50], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, has been found in go4rayyan Scumblr up to 2.0.1a. Affected by this issue is some unknown functionality of the component Task Handler. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 2.0.2 is able to address this issue. The patch is identified as 5c9120f2362ddb7cbe48f2c4620715adddc4ee35. It is recommended to upgrade the affected component. VDB-251570 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2016-15037", "sourceIdentifier": "cna@vuldb.com", "published": "2024-01-21T06:15:08.600", "lastModified": "2024-02-29T01:17:45.357", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in go4rayyan Scumblr up to 2.0.1a. Affected by this issue is some unknown functionality of the component Task Handler. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 2.0.2 is able to address this issue. The patch is identified as 5c9120f2362ddb7cbe48f2c4620715adddc4ee35. It is recommended to upgrade the affected component. VDB-251570 is the identifier assigned to this vulnerability."}, {"lang": "es", "value": "Una vulnerabilidad clasificada como problem\u00e1tica fue encontrada en go4rayyan Scumblr hasta 2.0.1a. Una funci\u00f3n desconocida del componente Task Handler es afectada por esta vulnerabilidad. La manipulaci\u00f3n conduce a cross site scripting. El ataque puede lanzarse de forma remota. La actualizaci\u00f3n a la versi\u00f3n 2.0.2 puede solucionar este problema. El parche se identifica como 5c9120f2362ddb7cbe48f2c4620715adddc4ee35. Se recomienda actualizar el componente afectado. VDB-251570 es el identificador asignado a esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.4, "baseSeverity": "LOW"}, "exploitabilityScore": 0.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:M/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "MULTIPLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.3}, "baseSeverity": "LOW", "exploitabilityScore": 6.4, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:go4rayyan:scumblr:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.2", "matchCriteriaId": "0135CFD1-33EB-4270-AF94-6C8D14B77683"}]}]}], "references": [{"url": "https://github.com/go4rayyan/CG1/commit/5c9120f2362ddb7cbe48f2c4620715adddc4ee35", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/go4rayyan/CG1/releases/tag/v2.0.2", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.251570", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.251570", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/go4rayyan/CG1/commit/5c9120f2362ddb7cbe48f2c4620715adddc4ee35"}}