{"buggy_code": ["from django.shortcuts import render\nfrom django.views.generic import TemplateView, View\nfrom haystack.query import SearchQuerySet\nfrom haystack.utils.geo import Point\nfrom django.http import HttpResponse\nfrom django.contrib.gis.measure import D\nfrom django.contrib.gis.geos import GEOSGeometry\nfrom django.db import connection\n\nfrom Data.models import BestBikeTrails, MinnesotaBikeTrails\n\nfrom requests import get\nimport xml.etree.ElementTree as ET\nfrom json import dumps, loads\n\n\nclass MainPage(TemplateView):\n    def get(self, request, *args, **kwargs):\n        return render(request, 'index.html')\n\n\nclass SearchAjax(TemplateView):\n    def get(self, request, *args, **kwargs):\n        lat = float(request.GET.get('lat',''))\n        lng = float(request.GET.get('lng',''))\n        qs = SearchQuerySet().filter(content_auto=request.GET.get('q',\"\")).distance('geometry',Point(lng,lat,srid=4326)).order_by('distance')\n        if len(qs)>6:\n            qs = qs[:5]\n        json = [(q.content_auto,\" \"+(\"%.2f\" % (q.distance.m if q.distance.m<1000 else q.distance.mi))+(\" meters\" if q.distance.m<1000 else \" miles\"),q.source,q.target,GEOSGeometry(q.geometry).coords[1], GEOSGeometry(q.geometry).coords[0]) for q in qs]\n        return HttpResponse(dumps(json),content_type=\"application/json\")\n\n\n\nclass GeoJsonAjax(View):\n    def get(self,request, *args, **kwargs):\n        lat = float(request.GET.get('lat1','45'))\n        lng = float(request.GET.get('lng1','-93.265'))\n        qs = BestBikeTrails.objects.filter(the_geom__distance_lte=(Point(lng,lat,srid=4326),D(mi=2)))\n        gj = []\n        for item in qs:\n            poly = GEOSGeometry(item.the_geom,srid=4326)\n            gj.append(loads(poly.geojson))\n        return HttpResponse(dumps(gj),content_type=\"application/json\")\n\n\nclass RouterAjax(View):\n    def get(self, request, *args, **kwargs):\n        id1 =  request.GET.get('bid')\n        id2 = request.GET.get('eid')\n        sql_inside_of_function = \"select id, source, target, cost * (4-rtng_ccpx) * (4-rtng_mean) * (4-rtng_cbf7) as cost,cost * (4-rtng_ccpx)*(4-rtng_mean)*(4-rtng_cbf7) * case when one_way=0 then 1 else one_way END as reverse_cost from \\\"Data_minnesotabiketrails\\\"\\'\"\n        sql_function = \"select ccp_name, the_geom from pgr_dijkstra(\\'\"\n\n        cursor = connection.cursor()\n        cursor.execute(sql_function+sql_inside_of_function+\",\"+str(id1)+\",\"+str(id2)+\", true,true) join \\\"Data_minnesotabiketrails\\\" as bt on bt.id=id2\")\n        all = cursor.fetchall()\n        names = []\n        gj = []\n        for item in all:\n            names.append(item[0])\n            gj.append(loads(GEOSGeometry(item[1]).geojson))\n        return HttpResponse(dumps({'names':names,'geojson':gj}),content_type=\"application/json; charset='utf-8'\")\n\n\nclass NiceRideAjax(View):\n    def get(self, request, *args, **kwargs):\n        r = get(url=\"https://secure.niceridemn.org/data2/bikeStations.xml\")\n        doc = ET.fromstring(r.text)\n        stations = doc.findall('station')\n        # this isn't really json it is a bunch of  python dicts inside a python list\n        json = [{item.tag: item.text for item in station} for station in stations]  #look at that beauty there\n        gj = []\n        for d in json:\n            if d['public']=='true':\n                lat = d['lat']\n                long = d['long']\n                del d['lat']\n                del d['long']\n                gj.append({'type': 'Point', 'coordinates': [long, lat], 'properties': d})\n        return HttpResponse(dumps(gj), content_type=\"application/json; charset='utf-8'\")\n"], "fixing_code": ["from django.shortcuts import render\nfrom django.views.generic import TemplateView, View\nfrom haystack.query import SearchQuerySet\nfrom haystack.utils.geo import Point\nfrom django.http import HttpResponse\nfrom django.contrib.gis.measure import D\nfrom django.contrib.gis.geos import GEOSGeometry\nfrom django.db import connection\n\nfrom Data.models import BestBikeTrails, MinnesotaBikeTrails\n\nfrom requests import get\nimport xml.etree.ElementTree as ET\nfrom json import dumps, loads\n\n\nclass MainPage(TemplateView):\n    def get(self, request, *args, **kwargs):\n        return render(request, 'index.html')\n\n\nclass SearchAjax(TemplateView):\n    def get(self, request, *args, **kwargs):\n        lat = float(request.GET.get('lat',''))\n        lng = float(request.GET.get('lng',''))\n        qs = SearchQuerySet().filter(content_auto=request.GET.get('q',\"\")).distance('geometry',Point(lng,lat,srid=4326)).order_by('distance')\n        if len(qs)>6:\n            qs = qs[:5]\n        json = [(q.content_auto,\" \"+(\"%.2f\" % (q.distance.m if q.distance.m<1000 else q.distance.mi))+(\" meters\" if q.distance.m<1000 else \" miles\"),q.source,q.target,GEOSGeometry(q.geometry).coords[1], GEOSGeometry(q.geometry).coords[0]) for q in qs]\n        return HttpResponse(dumps(json),content_type=\"application/json\")\n\n\n\nclass GeoJsonAjax(View):\n    def get(self,request, *args, **kwargs):\n        lat = float(request.GET.get('lat1','45'))\n        lng = float(request.GET.get('lng1','-93.265'))\n        qs = BestBikeTrails.objects.filter(the_geom__distance_lte=(Point(lng,lat,srid=4326),D(mi=2)))\n        gj = []\n        for item in qs:\n            poly = GEOSGeometry(item.the_geom,srid=4326)\n            gj.append(loads(poly.geojson))\n        return HttpResponse(dumps(gj),content_type=\"application/json\")\n\n\nclass RouterAjax(View):\n    def get(self, request, *args, **kwargs):\n        id1 =  request.GET.get('bid')\n        id2 = request.GET.get('eid')\n        sql_inside_of_function = \"select id, source, target, cost * (4-rtng_ccpx) * (4-rtng_mean) * (4-rtng_cbf7) as cost,cost * (4-rtng_ccpx)*(4-rtng_mean)*(4-rtng_cbf7) * case when one_way=0 then 1 else one_way END as reverse_cost from \\\"Data_minnesotabiketrails\\\"\\'\"\n        sql_function = \"select ccp_name, the_geom from pgr_dijkstra(\\'\"\n\n        cursor = connection.cursor()\n        cursor.execute(sql_function+sql_inside_of_function+\", %s , %s , true,true) join \\\"Data_minnesotabiketrails\\\" as bt on bt.id=id2\",(str(id1),str(id2),))\n        all = cursor.fetchall()\n        names = []\n        gj = []\n        for item in all:\n            names.append(item[0])\n            gj.append(loads(GEOSGeometry(item[1]).geojson))\n        return HttpResponse(dumps({'names':names,'geojson':gj}),content_type=\"application/json; charset='utf-8'\")\n\n\nclass NiceRideAjax(View):\n    def get(self, request, *args, **kwargs):\n        r = get(url=\"https://secure.niceridemn.org/data2/bikeStations.xml\")\n        doc = ET.fromstring(r.text)\n        stations = doc.findall('station')\n        # this isn't really json it is a bunch of  python dicts inside a python list\n        json = [{item.tag: item.text for item in station} for station in stations]  #look at that beauty there\n        gj = []\n        for d in json:\n            if d['public']=='true':\n                lat = d['lat']\n                long = d['long']\n                del d['lat']\n                del d['long']\n                gj.append({'type': 'Point', 'coordinates': [long, lat], 'properties': d})\n        return HttpResponse(dumps(gj), content_type=\"application/json; charset='utf-8'\")\n"], "filenames": ["Data/views.py"], "buggy_code_start_loc": [54], "buggy_code_end_loc": [55], "fixing_code_start_loc": [54], "fixing_code_end_loc": [55], "type": "CWE-89", "message": "A vulnerability was found in MNBikeways database and classified as critical. This issue affects some unknown processing of the file Data/views.py. The manipulation of the argument id1/id2 leads to sql injection. The name of the patch is 829a027aca7c17f5a7ec1addca8dd5d5542f86ac. It is recommended to apply a patch to fix this issue. The identifier VDB-218417 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10060", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-17T13:15:10.410", "lastModified": "2023-01-24T19:13:01.170", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in MNBikeways database and classified as critical. This issue affects some unknown processing of the file Data/views.py. The manipulation of the argument id1/id2 leads to sql injection. The name of the patch is 829a027aca7c17f5a7ec1addca8dd5d5542f86ac. It is recommended to apply a patch to fix this issue. The identifier VDB-218417 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mnbikeways_database_project:mnbikeways_database:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-06-22", "matchCriteriaId": "655A22F3-EE3D-44C6-AB68-1CD8CF9B3DAE"}]}]}], "references": [{"url": "https://github.com/MNBikeways/database/commit/829a027aca7c17f5a7ec1addca8dd5d5542f86ac", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218417", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.218417", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/MNBikeways/database/commit/829a027aca7c17f5a7ec1addca8dd5d5542f86ac"}}