{"buggy_code": ["#!/usr/bin/env python\n'''\nMIT License\n\nCopyright (c) 2019 Tenable Network Security, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'''\nimport click, logging, time, yaml, json, platform, sys, os, arrow\nfrom tenable.io import TenableIO\nfrom tenable.sc import TenableSC\nfrom .config import base_config\nfrom restfly.utils import dict_merge\nfrom .jira import Jira\nfrom .transform import Tio2Jira\nfrom . import __version__\n\ntroubleshooting = '''\n### Configuration File:\n```yaml\n{configfile}\n```\n\n### Debug Logs\n```\n{logging}\n```\n\n### Available IssueTypes\n```yaml\n{issuetypes}\n```\n'''\n\n@click.command()\n@click.option('--observed-since', '-s', envvar='SINCE', default=0,\n    type=click.INT, help='The unix timestamp of the age threshold')\n@click.option('--setup-only', is_flag=True,\n    help='Performs setup tasks and generates a config file.')\n@click.option('--troubleshoot', is_flag=True,\n    help='Outputs some basic troubleshooting data to file as an issue.')\n@click.argument('configfile', default='config.yaml', type=click.File('r'))\ndef cli(configfile, observed_since, setup_only=False, troubleshoot=False):\n    '''\n    Tenable.io -> Jira Cloud Transformer & Ingester\n    '''\n    # Load the config, but ensure that any additional fields are additive to the\n    # basic field set.\n    config_from_file = yaml.load(configfile, Loader=yaml.Loader)\n    fields = config_from_file.pop('custom_fields', list())\n    config = dict_merge(base_config(), config_from_file)\n    config['fields'] = config['fields'] + fields\n\n    if config['tenable'].get('tio_transform_tags'):\n        attr_cache = config['tenable'].get('tio_asset_attr_cache', list())\n        tag_attrs = config['tenable'].get('tio_transform_tags', list())\n        config['tenable']['tio_asset_attr_cache'] = attr_cache + tag_attrs\n\n\n    # Get the logging definition and define any defaults as need be.\n    log = config.get('log', {})\n    log_lvls = {'debug': 10, 'info': 20, 'warn': 30, 'error': 40}\n    log['level'] = log_lvls[log.get('level', 'warn')]\n    log['format'] = log.get('format',\n        '%(asctime)-15s %(name)s %(levelname)s %(message)s')\n\n    # Configure the root logging facility\n    if troubleshoot:\n        logging.basicConfig(\n            level=logging.DEBUG,\n            format=log['format'],\n            filename='tenable_debug.log'\n        )\n    else:\n        logging.basicConfig(**log)\n\n    # Output some basic information detailing the config file used and the\n    # python version & system arch.\n    logging.info('Tenable2JiraCloud Version {}'.format(__version__))\n    logging.info('Using configuration file {}'.format(configfile.name))\n    uname = platform.uname()\n    logging.info('Running on Python {} {}/{}'.format(\n        '.'.join([str(i) for i in sys.version_info][0:3]),\n        uname[0], uname[-2]))\n\n    # instantiate the Jira object\n    jira = Jira(\n        'https://{}/rest/api/3'.format(config['jira']['address']),\n        config['jira']['api_username'],\n        config['jira']['api_token']\n    )\n\n    # Initiate the Tenable.io API model, the Ingester model, and start the\n    # ingestion and data transformation.\n    if config['tenable'].get('platform') == 'tenable.io':\n        if not observed_since:\n            # if no since field is supplied, then look in the config file to see\n            # if an age was applied, if not, then use the default of 30 days.\n            observed_since = arrow.now()\\\n                .shift(days=-config['tenable'].get('tio_age', 30))\\\n                .floor('day').timestamp()\n\n        source = TenableIO(\n            access_key=config['tenable'].get('access_key'),\n            secret_key=config['tenable'].get('secret_key'),\n            vendor='Tenable',\n            product='JiraCloud',\n            build=__version__\n        )\n        if int(source.session.details().get('permissions')) < 64:\n            logging.error('API Keys tie to non-admin user.')\n    elif config['tenable'].get('platform') == 'tenable.sc':\n        source = TenableSC(\n            config['tenable'].get('address'),\n            port=int(config['tenable'].get('port', 443)),\n            username=config['tenable'].get('username'),\n            password=config['tenable'].get('password'),\n            access_key=config['tenable'].get('access_key'),\n            secret_key=config['tenable'].get('secret_key'),\n            vendor='Tenable',\n            product='JiraCloud',\n            build=__version__\n        )\n    else:\n        logging.error('No valid Tenable platform configuration defined.')\n        exit(1)\n    ingest = Tio2Jira(source, jira, config)\n\n    if troubleshoot:\n        # if the troubleshooting flag is set, then we will be collecting some\n        # basic information and outputting it to the screen in a format that\n        # Github issues would expect to format it all pretty.  This should help\n        # reduce the amount of time that is spent with back-and-forth debugging.\n        try:\n            ingest.ingest(int(observed_since))\n        except:\n            logging.exception('Caught the following Exception')\n\n        # Some basic redaction of sensitive data, such as API Keys, Usernames,\n        # Passwords, and hostnames.\n        addr = config_from_file['jira']['address']\n        sc_addr = 'NOTHING_TO_SEE_HERE_AT_ALL'\n        config_from_file['jira']['address'] = '<REDACTED>'\n        config_from_file['jira']['api_token'] = '<REDACTED>'\n        config_from_file['jira']['api_username'] = '<REDACTED>'\n        config_from_file['project']['leadAccountId'] = '<REDACTED>'\n        if config_from_file['tenable'].get('address'):\n            sc_addr = config_from_file['tenable']['address']\n            config_from_file['tenable']['address'] = '<REDACTED>'\n        if config_from_file['tenable'].get('access_key'):\n            config_from_file['tenable']['access_key'] = '<REDACTED>'\n        if config_from_file['tenable'].get('secret_key'):\n            config_from_file['tenable']['secret_key'] = '<REDACTED>'\n        if config_from_file['tenable'].get('username'):\n            config_from_file['tenable']['username'] = '<REDACTED>'\n        if config_from_file['tenable'].get('password'):\n            config_from_file['tenable']['password'] = '<REDACTED>'\n\n        output = troubleshooting.format(\n            configfile=yaml.dump(config_from_file, default_flow_style=False),\n            logging=open('tenable_debug.log').read() \\\n                .replace(addr, '<JIRA_CLOUD_HOST>') \\\n                .replace(sc_addr, '<TENABLE_SC_HOST>'),\n            issuetypes='\\n'.join(\n                [\n                    '{id}: {name}'.format(**a)\n                    for a in jira.issue_types.list()\n                    if a.get('name').lower() in ['task', 'subtask', 'sub-task']\n                ]\n            )\n        )\n        print(output)\n        print('\\n'.join([\n            '/-------------------------------NOTICE-----------------------------------\\\\',\n            '| The output above is helpful for us to troubleshoot exactly what is     |',\n            '| happening within the code and offer a diagnosis for how to correct.    |',\n            '| Please note that while some basic redaction has already been performed |',\n            '| that we ask you to review the information you\\'re about to send and     |',\n            '| ensure that nothing deemed sensitive is transmitted.                   |',\n            '| ---------------------------------------------------------------------- |',\n            '| -- Copy of output saved to \"issue_debug.md\"                            |',\n            '\\\\------------------------------------------------------------------------/'\n        ]))\n        with open('issue_debug.md', 'w') as reportfile:\n            print(output, file=reportfile)\n        os.remove('tenable_debug.log')\n    elif not setup_only:\n        ingest.ingest(observed_since)\n\n        # If we are expected to continually re-run the transformer, then we will\n        # need to track the passage of time and run every X hours, where X is\n        # defined by the user in the configuration.\n        if config.get('service', {}).get('interval', 0) > 0:\n            sleeper = int(config['service']['interval']) * 3600\n            while True:\n                last_run = int(time.time())\n                logging.info(\n                    'Sleeping for {}h'.format(sleeper/3600))\n                time.sleep(sleeper)\n                logging.info(\n                    'Initiating ingest with observed_since={}'.format(last_run))\n                ingest.ingest(last_run)\n    elif setup_only:\n        # In setup-only mode, the ingest will not run, and instead a config file\n        # will be generated that will have all of the JIRA identifiers baked in\n        # and will also inform the integration to ignore the screen builder.\n        # When using this config, if there are any changes to the code, then\n        # this config will need to be re-generated.\n        config['screen']['no_create'] = True\n        logging.info('Set to setup-only.  Will not run ingest.')\n        logging.info('The following is the updated config file from the setup.')\n        with open('generated_config.yaml', 'w') as outfile:\n            outfile.write(yaml.dump(config, Dumper=yaml.Dumper))\n        logging.info('Generated \"generated_config.yaml\" config file.')\n        logging.info('This config file should be updated for every new version of this integration.')\n"], "fixing_code": ["#!/usr/bin/env python\n'''\nMIT License\n\nCopyright (c) 2019 Tenable Network Security, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'''\nimport click, logging, time, yaml, json, platform, sys, os, arrow\nfrom tenable.io import TenableIO\nfrom tenable.sc import TenableSC\nfrom .config import base_config\nfrom restfly.utils import dict_merge\nfrom .jira import Jira\nfrom .transform import Tio2Jira\nfrom . import __version__\n\ntroubleshooting = '''\n### Configuration File:\n```yaml\n{configfile}\n```\n\n### Debug Logs\n```\n{logging}\n```\n\n### Available IssueTypes\n```yaml\n{issuetypes}\n```\n'''\n\n@click.command()\n@click.option('--observed-since', '-s', envvar='SINCE', default=0,\n    type=click.INT, help='The unix timestamp of the age threshold')\n@click.option('--setup-only', is_flag=True,\n    help='Performs setup tasks and generates a config file.')\n@click.option('--troubleshoot', is_flag=True,\n    help='Outputs some basic troubleshooting data to file as an issue.')\n@click.argument('configfile', default='config.yaml', type=click.File('r'))\ndef cli(configfile, observed_since, setup_only=False, troubleshoot=False):\n    '''\n    Tenable.io -> Jira Cloud Transformer & Ingester\n    '''\n    # Load the config, but ensure that any additional fields are additive to the\n    # basic field set.\n    config_from_file = yaml.safe_load(configfile)\n    fields = config_from_file.pop('custom_fields', list())\n    config = dict_merge(base_config(), config_from_file)\n    config['fields'] = config['fields'] + fields\n\n    if config['tenable'].get('tio_transform_tags'):\n        attr_cache = config['tenable'].get('tio_asset_attr_cache', list())\n        tag_attrs = config['tenable'].get('tio_transform_tags', list())\n        config['tenable']['tio_asset_attr_cache'] = attr_cache + tag_attrs\n\n\n    # Get the logging definition and define any defaults as need be.\n    log = config.get('log', {})\n    log_lvls = {'debug': 10, 'info': 20, 'warn': 30, 'error': 40}\n    log['level'] = log_lvls[log.get('level', 'warn')]\n    log['format'] = log.get('format',\n        '%(asctime)-15s %(name)s %(levelname)s %(message)s')\n\n    # Configure the root logging facility\n    if troubleshoot:\n        logging.basicConfig(\n            level=logging.DEBUG,\n            format=log['format'],\n            filename='tenable_debug.log'\n        )\n    else:\n        logging.basicConfig(**log)\n\n    # Output some basic information detailing the config file used and the\n    # python version & system arch.\n    logging.info('Tenable2JiraCloud Version {}'.format(__version__))\n    logging.info('Using configuration file {}'.format(configfile.name))\n    uname = platform.uname()\n    logging.info('Running on Python {} {}/{}'.format(\n        '.'.join([str(i) for i in sys.version_info][0:3]),\n        uname[0], uname[-2]))\n\n    # instantiate the Jira object\n    jira = Jira(\n        'https://{}/rest/api/3'.format(config['jira']['address']),\n        config['jira']['api_username'],\n        config['jira']['api_token']\n    )\n\n    # Initiate the Tenable.io API model, the Ingester model, and start the\n    # ingestion and data transformation.\n    if config['tenable'].get('platform') == 'tenable.io':\n        if not observed_since:\n            # if no since field is supplied, then look in the config file to see\n            # if an age was applied, if not, then use the default of 30 days.\n            observed_since = arrow.now()\\\n                .shift(days=-config['tenable'].get('tio_age', 30))\\\n                .floor('day').timestamp()\n\n        source = TenableIO(\n            access_key=config['tenable'].get('access_key'),\n            secret_key=config['tenable'].get('secret_key'),\n            vendor='Tenable',\n            product='JiraCloud',\n            build=__version__\n        )\n        if int(source.session.details().get('permissions')) < 64:\n            logging.error('API Keys tie to non-admin user.')\n    elif config['tenable'].get('platform') == 'tenable.sc':\n        source = TenableSC(\n            config['tenable'].get('address'),\n            port=int(config['tenable'].get('port', 443)),\n            username=config['tenable'].get('username'),\n            password=config['tenable'].get('password'),\n            access_key=config['tenable'].get('access_key'),\n            secret_key=config['tenable'].get('secret_key'),\n            vendor='Tenable',\n            product='JiraCloud',\n            build=__version__\n        )\n    else:\n        logging.error('No valid Tenable platform configuration defined.')\n        exit(1)\n    ingest = Tio2Jira(source, jira, config)\n\n    if troubleshoot:\n        # if the troubleshooting flag is set, then we will be collecting some\n        # basic information and outputting it to the screen in a format that\n        # Github issues would expect to format it all pretty.  This should help\n        # reduce the amount of time that is spent with back-and-forth debugging.\n        try:\n            ingest.ingest(int(observed_since))\n        except:\n            logging.exception('Caught the following Exception')\n\n        # Some basic redaction of sensitive data, such as API Keys, Usernames,\n        # Passwords, and hostnames.\n        addr = config_from_file['jira']['address']\n        sc_addr = 'NOTHING_TO_SEE_HERE_AT_ALL'\n        config_from_file['jira']['address'] = '<REDACTED>'\n        config_from_file['jira']['api_token'] = '<REDACTED>'\n        config_from_file['jira']['api_username'] = '<REDACTED>'\n        config_from_file['project']['leadAccountId'] = '<REDACTED>'\n        if config_from_file['tenable'].get('address'):\n            sc_addr = config_from_file['tenable']['address']\n            config_from_file['tenable']['address'] = '<REDACTED>'\n        if config_from_file['tenable'].get('access_key'):\n            config_from_file['tenable']['access_key'] = '<REDACTED>'\n        if config_from_file['tenable'].get('secret_key'):\n            config_from_file['tenable']['secret_key'] = '<REDACTED>'\n        if config_from_file['tenable'].get('username'):\n            config_from_file['tenable']['username'] = '<REDACTED>'\n        if config_from_file['tenable'].get('password'):\n            config_from_file['tenable']['password'] = '<REDACTED>'\n\n        output = troubleshooting.format(\n            configfile=yaml.dump(config_from_file, default_flow_style=False),\n            logging=open('tenable_debug.log').read() \\\n                .replace(addr, '<JIRA_CLOUD_HOST>') \\\n                .replace(sc_addr, '<TENABLE_SC_HOST>'),\n            issuetypes='\\n'.join(\n                [\n                    '{id}: {name}'.format(**a)\n                    for a in jira.issue_types.list()\n                    if a.get('name').lower() in ['task', 'subtask', 'sub-task']\n                ]\n            )\n        )\n        print(output)\n        print('\\n'.join([\n            '/-------------------------------NOTICE-----------------------------------\\\\',\n            '| The output above is helpful for us to troubleshoot exactly what is     |',\n            '| happening within the code and offer a diagnosis for how to correct.    |',\n            '| Please note that while some basic redaction has already been performed |',\n            '| that we ask you to review the information you\\'re about to send and     |',\n            '| ensure that nothing deemed sensitive is transmitted.                   |',\n            '| ---------------------------------------------------------------------- |',\n            '| -- Copy of output saved to \"issue_debug.md\"                            |',\n            '\\\\------------------------------------------------------------------------/'\n        ]))\n        with open('issue_debug.md', 'w') as reportfile:\n            print(output, file=reportfile)\n        os.remove('tenable_debug.log')\n    elif not setup_only:\n        ingest.ingest(observed_since)\n\n        # If we are expected to continually re-run the transformer, then we will\n        # need to track the passage of time and run every X hours, where X is\n        # defined by the user in the configuration.\n        if config.get('service', {}).get('interval', 0) > 0:\n            sleeper = int(config['service']['interval']) * 3600\n            while True:\n                last_run = int(time.time())\n                logging.info(\n                    'Sleeping for {}h'.format(sleeper/3600))\n                time.sleep(sleeper)\n                logging.info(\n                    'Initiating ingest with observed_since={}'.format(last_run))\n                ingest.ingest(last_run)\n    elif setup_only:\n        # In setup-only mode, the ingest will not run, and instead a config file\n        # will be generated that will have all of the JIRA identifiers baked in\n        # and will also inform the integration to ignore the screen builder.\n        # When using this config, if there are any changes to the code, then\n        # this config will need to be re-generated.\n        config['screen']['no_create'] = True\n        logging.info('Set to setup-only.  Will not run ingest.')\n        logging.info('The following is the updated config file from the setup.')\n        with open('generated_config.yaml', 'w') as outfile:\n            outfile.write(yaml.dump(config, Dumper=yaml.Dumper))\n        logging.info('Generated \"generated_config.yaml\" config file.')\n        logging.info('This config file should be updated for every new version of this integration.')\n"], "filenames": ["tenable_jira/cli.py"], "buggy_code_start_loc": [65], "buggy_code_end_loc": [66], "fixing_code_start_loc": [65], "fixing_code_end_loc": [66], "type": "CWE-502", "message": "Tenable for Jira Cloud is an open source project designed to pull Tenable.io vulnerability data, then generate Jira Tasks and sub-tasks based on the vulnerabilities' current state. It published in pypi as \"tenable-jira-cloud\". In tenable-jira-cloud before version 1.1.21, it is possible to run arbitrary commands through the yaml.load() method. This could allow an attacker with local access to the host to run arbitrary code by running the application with a specially crafted YAML configuration file. This is fixed in version 1.1.21 by using yaml.safe_load() instead of yaml.load().", "other": {"cve": {"id": "CVE-2021-21371", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-10T22:15:12.307", "lastModified": "2021-03-18T20:38:36.850", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tenable for Jira Cloud is an open source project designed to pull Tenable.io vulnerability data, then generate Jira Tasks and sub-tasks based on the vulnerabilities' current state. It published in pypi as \"tenable-jira-cloud\". In tenable-jira-cloud before version 1.1.21, it is possible to run arbitrary commands through the yaml.load() method. This could allow an attacker with local access to the host to run arbitrary code by running the application with a specially crafted YAML configuration file. This is fixed in version 1.1.21 by using yaml.safe_load() instead of yaml.load()."}, {"lang": "es", "value": "Tenable para Jira Cloud es un proyecto de c\u00f3digo abierto dise\u00f1ado para extraer datos de vulnerabilidad de Tenable.io y luego generar Tareas y subtareas de Jira en funci\u00f3n del estado actual de las vulnerabilidades.&#xa0;Se public\u00f3 en pypi como \"tenable-jira-cloud\".&#xa0;En tenable-jira-cloud versiones anteriores a 1.1.21, es posible ejecutar comandos arbitrarios por medio del m\u00e9todo yaml.load().&#xa0;Esto podr\u00eda permitir a un atacante con acceso local al host ejecutar c\u00f3digo arbitrario ejecutando la aplicaci\u00f3n con un archivo de configuraci\u00f3n YAML especialmente dise\u00f1ado.&#xa0;Esto se corrige en la versi\u00f3n 1.1.21 usando la funci\u00f3n yaml.safe_load() en lugar de la funci\u00f3n yaml.load()"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tenable:jira_cloud:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.1.21", "matchCriteriaId": "B52A05D1-EA41-4364-BE20-6A673A2EBF59"}]}]}], "references": [{"url": "https://github.com/tenable/integration-jira-cloud/commit/f8c2095fd529e664e7fa25403a0a4a85bb3907d0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tenable/integration-jira-cloud/security/advisories/GHSA-8278-88vv-x98r", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://pypi.org/project/tenable-jira-cloud/", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://pyyaml.docsforge.com/master/documentation/#loading-yaml", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tenable/integration-jira-cloud/commit/f8c2095fd529e664e7fa25403a0a4a85bb3907d0"}}