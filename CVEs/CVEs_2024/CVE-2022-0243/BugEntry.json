{"buggy_code": ["using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc.Infrastructure;\nusing Microsoft.AspNetCore.Mvc.Routing;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.ContentFields.Fields;\nusing OrchardCore.ContentFields.Settings;\nusing OrchardCore.ContentFields.ViewModels;\nusing OrchardCore.ContentManagement.Display.ContentDisplay;\nusing OrchardCore.ContentManagement.Display.Models;\nusing OrchardCore.ContentManagement.Metadata.Models;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Views;\nusing OrchardCore.Mvc.ModelBinding;\n\nnamespace OrchardCore.ContentFields.Drivers\n{\n    public class LinkFieldDisplayDriver : ContentFieldDisplayDriver<LinkField>\n    {\n        private readonly IUrlHelperFactory _urlHelperFactory;\n        private readonly IActionContextAccessor _actionContextAccessor;\n        private readonly IStringLocalizer S;\n\n        public LinkFieldDisplayDriver(\n            IUrlHelperFactory urlHelperFactory,\n            IActionContextAccessor actionContextAccessor,\n            IStringLocalizer<LinkFieldDisplayDriver> localizer)\n        {\n            _urlHelperFactory = urlHelperFactory;\n            _actionContextAccessor = actionContextAccessor;\n            S = localizer;\n        }\n\n        public override IDisplayResult Display(LinkField field, BuildFieldDisplayContext context)\n        {\n            return Initialize<DisplayLinkFieldViewModel>(GetDisplayShapeType(context), model =>\n            {\n                model.Field = field;\n                model.Part = context.ContentPart;\n                model.PartFieldDefinition = context.PartFieldDefinition;\n            })\n            .Location(\"Detail\", \"Content\")\n            .Location(\"Summary\", \"Content\");\n        }\n\n        public override IDisplayResult Edit(LinkField field, BuildFieldEditorContext context)\n        {\n            return Initialize<EditLinkFieldViewModel>(GetEditorShapeType(context), model =>\n            {\n                var settings = context.PartFieldDefinition.GetSettings<LinkFieldSettings>();\n                model.Url = context.IsNew ? settings.DefaultUrl : field.Url;\n                model.Text = context.IsNew ? settings.DefaultText : field.Text;\n                model.Field = field;\n                model.Part = context.ContentPart;\n                model.PartFieldDefinition = context.PartFieldDefinition;\n            });\n        }\n\n        public override async Task<IDisplayResult> UpdateAsync(LinkField field, IUpdateModel updater, UpdateFieldEditorContext context)\n        {\n            var modelUpdated = await updater.TryUpdateModelAsync(field, Prefix, f => f.Url, f => f.Text);\n\n            if (modelUpdated)\n            {\n                var settings = context.PartFieldDefinition.GetSettings<LinkFieldSettings>();\n\n                var urlToValidate = field.Url;\n                if (!String.IsNullOrEmpty(urlToValidate))\n                {\n                    var indexAnchor = urlToValidate.IndexOf('#');\n                    if (indexAnchor > -1)\n                    {\n                        urlToValidate = urlToValidate.Substring(0, indexAnchor);\n                    }\n\n                    if (urlToValidate.StartsWith(\"~/\", StringComparison.Ordinal))\n                    {\n                        var urlHelper = _urlHelperFactory.GetUrlHelper(_actionContextAccessor.ActionContext);\n                        urlToValidate = urlHelper.Content(urlToValidate);\n                    }\n\n                    urlToValidate = urlToValidate.ToUriComponents();\n                }\n\n                // Validate Url\n                if (settings.Required && String.IsNullOrWhiteSpace(field.Url))\n                {\n                    updater.ModelState.AddModelError(Prefix, nameof(field.Url), S[\"The url is required for {0}.\", context.PartFieldDefinition.DisplayName()]);\n                }\n                else if (!String.IsNullOrWhiteSpace(field.Url) && !Uri.IsWellFormedUriString(urlToValidate, UriKind.RelativeOrAbsolute))\n                {\n                    updater.ModelState.AddModelError(Prefix, nameof(field.Url), S[\"{0} is an invalid url.\", field.Url]);\n                }\n\n                // Validate Text\n                if (settings.LinkTextMode == LinkTextMode.Required && String.IsNullOrWhiteSpace(field.Text))\n                {\n                    updater.ModelState.AddModelError(Prefix, nameof(field.Text), S[\"The link text is required for {0}.\", context.PartFieldDefinition.DisplayName()]);\n                }\n                else if (settings.LinkTextMode == LinkTextMode.Static && String.IsNullOrWhiteSpace(settings.DefaultText))\n                {\n                    updater.ModelState.AddModelError(Prefix, nameof(field.Text), S[\"The text default value is required for {0}.\", context.PartFieldDefinition.DisplayName()]);\n                }\n\n                // Run this through a sanitizer in case someone puts html in it.\n                // No settings.\n            }\n\n            return Edit(field, context);\n        }\n    }\n}\n", "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.Extensions.Logging;\nusing OrchardCore.Admin;\nusing OrchardCore.AuditTrail.Indexes;\nusing OrchardCore.AuditTrail.Models;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display;\nusing OrchardCore.Contents.AuditTrail.Models;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Entities;\nusing OrchardCore.Modules;\nusing YesSql;\n\nnamespace OrchardCore.Contents.AuditTrail.Controllers\n{\n    [RequireFeatures(\"OrchardCore.AuditTrail\")]\n    [Admin]\n    public class AuditTrailContentController : Controller\n    {\n        private readonly ISession _session;\n        private readonly IContentManager _contentManager;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IContentItemDisplayManager _contentItemDisplayManager;\n        private readonly INotifier _notifier;\n        private readonly IHtmlLocalizer H;\n        private readonly ILogger _logger;\n\n        public AuditTrailContentController(\n            ISession session,\n            IContentManager contentManager,\n            IUpdateModelAccessor updateModelAccessor,\n            IAuthorizationService authorizationService,\n            IContentItemDisplayManager contentItemDisplayManager,\n            INotifier notifier,\n            IHtmlLocalizer<AuditTrailContentController> htmlLocalizer,\n            ILogger<AuditTrailContentController> logger)\n        {\n            _session = session;\n            _contentManager = contentManager;\n            _updateModelAccessor = updateModelAccessor;\n            _authorizationService = authorizationService;\n            _contentItemDisplayManager = contentItemDisplayManager;\n            _notifier = notifier;\n            H = htmlLocalizer;\n            _logger = logger;\n        }\n\n        public async Task<ActionResult> Display(string auditTrailEventId)\n        {\n            var auditTrailContentEvent = (await _session.Query<AuditTrailEvent, AuditTrailEventIndex>(collection: AuditTrailEvent.Collection)\n                .Where(index => index.EventId == auditTrailEventId)\n                .FirstOrDefaultAsync())\n                ?.As<AuditTrailContentEvent>();\n\n            if (auditTrailContentEvent == null || auditTrailContentEvent.ContentItem == null)\n            {\n                return NotFound();\n            }\n\n            var contentItem = auditTrailContentEvent.ContentItem;\n\n            contentItem.Id = 0;\n            contentItem.ContentItemVersionId = \"\";\n            contentItem.Published = false;\n            contentItem.Latest = false;\n\n            contentItem = await _contentManager.LoadAsync(contentItem);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var auditTrailPart = contentItem.As<AuditTrailPart>();\n            if (auditTrailPart != null)\n            {\n                auditTrailPart.ShowComment = true;\n            }\n\n            var model = await _contentItemDisplayManager.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n\n            model.Properties[\"VersionNumber\"] = auditTrailContentEvent.VersionNumber;\n\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<ActionResult> Restore(string auditTrailEventId)\n        {\n            var contentItem = (await _session.Query<AuditTrailEvent, AuditTrailEventIndex>(collection: AuditTrailEvent.Collection)\n                .Where(index => index.EventId == auditTrailEventId)\n                .FirstOrDefaultAsync())\n                ?.As<AuditTrailContentEvent>()\n                ?.ContentItem;\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            contentItem = await _contentManager.LoadAsync(contentItem);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var result = await _contentManager.RestoreAsync(contentItem);\n            if (!result.Succeeded)\n            {\n                await _notifier.WarningAsync(H[\"'{0}' was not restored, the version is not valid.\", contentItem.DisplayText]);\n                foreach (var error in result.Errors)\n                {\n                    await _notifier.WarningAsync(new LocalizedHtmlString(error.ErrorMessage, error.ErrorMessage));\n                }\n\n                return RedirectToAction(\"Index\", \"Admin\", new { area = \"OrchardCore.AuditTrail\" });\n            }\n\n            await _notifier.SuccessAsync(H[\"'{0}' has been restored.\", contentItem.DisplayText]);\n\n            return RedirectToAction(\"Index\", \"Admin\", new { area = \"OrchardCore.AuditTrail\" });\n        }\n    }\n}\n", "using System.Threading.Tasks;\nusing OrchardCore.ContentManagement.Display.ContentDisplay;\nusing OrchardCore.ContentManagement.Display.Models;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Views;\nusing OrchardCore.Infrastructure.Html;\nusing OrchardCore.Menu.Models;\nusing OrchardCore.Menu.Settings;\nusing OrchardCore.Menu.ViewModels;\n\nnamespace OrchardCore.Menu.Drivers\n{\n    public class HtmlMenuItemPartDisplayDriver : ContentPartDisplayDriver<HtmlMenuItemPart>\n    {\n        private readonly IHtmlSanitizerService _htmlSanitizerService;\n\n        public HtmlMenuItemPartDisplayDriver(IHtmlSanitizerService htmlSanitizerService)\n        {\n            _htmlSanitizerService = htmlSanitizerService;\n        }\n\n        public override IDisplayResult Display(HtmlMenuItemPart part, BuildPartDisplayContext context)\n        {\n            var settings = context.TypePartDefinition.GetSettings<HtmlMenuItemPartSettings>();\n\n            if (settings.SanitizeHtml)\n            {\n                part.Html = _htmlSanitizerService.Sanitize(part.Html);\n            }\n\n            return Combine(\n                Dynamic(\"HtmlMenuItemPart_Admin\", shape =>\n                {\n                    shape.MenuItemPart = part;\n                })\n                .Location(\"Admin\", \"Content:10\"),\n                Dynamic(\"HtmlMenuItemPart_Thumbnail\", shape =>\n                {\n                    shape.MenuItemPart = part;\n                })\n                .Location(\"Thumbnail\", \"Content:10\")\n            );\n        }\n\n        public override IDisplayResult Edit(HtmlMenuItemPart part)\n        {\n            return Initialize<HtmlMenuItemPartEditViewModel>(\"HtmlMenuItemPart_Edit\", model =>\n            {\n                model.Name = part.ContentItem.DisplayText;\n                model.Url = part.Url;\n                model.Html = part.Html;\n                model.MenuItemPart = part;\n            });\n        }\n\n        public override async Task<IDisplayResult> UpdateAsync(HtmlMenuItemPart part, IUpdateModel updater, UpdatePartEditorContext context)\n        {\n            var settings = context.TypePartDefinition.GetSettings<HtmlMenuItemPartSettings>();\n            var model = new HtmlMenuItemPartEditViewModel();\n            if (await updater.TryUpdateModelAsync(model, Prefix))\n            {\n                part.ContentItem.DisplayText = model.Name;\n                part.Html = settings.SanitizeHtml ? _htmlSanitizerService.Sanitize(model.Html) : model.Html;\n                part.Url = model.Url;\n            }\n\n            return Edit(part, context);\n        }\n    }\n}\n", "using System.Threading.Tasks;\nusing OrchardCore.ContentManagement.Display.ContentDisplay;\nusing OrchardCore.ContentManagement.Display.Models;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Views;\nusing OrchardCore.Menu.Models;\nusing OrchardCore.Menu.ViewModels;\n\nnamespace OrchardCore.Menu.Drivers\n{\n    public class LinkMenuItemPartDisplayDriver : ContentPartDisplayDriver<LinkMenuItemPart>\n    {\n\n        public override IDisplayResult Display(LinkMenuItemPart part, BuildPartDisplayContext context)\n        {\n            return Combine(\n                Dynamic(\"LinkMenuItemPart_Admin\", shape =>\n                {\n                    shape.MenuItemPart = part;\n                })\n                .Location(\"Admin\", \"Content:10\"),\n                Dynamic(\"LinkMenuItemPart_Thumbnail\", shape =>\n                {\n                    shape.MenuItemPart = part;\n                })\n                .Location(\"Thumbnail\", \"Content:10\")\n            );\n        }\n\n        public override IDisplayResult Edit(LinkMenuItemPart part)\n        {\n            return Initialize<LinkMenuItemPartEditViewModel>(\"LinkMenuItemPart_Edit\", model =>\n            {\n                model.Name = part.ContentItem.DisplayText;\n                model.Url = part.Url;\n                model.MenuItemPart = part;\n            });\n        }\n\n        public override async Task<IDisplayResult> UpdateAsync(LinkMenuItemPart part, IUpdateModel updater)\n        {\n            var model = new LinkMenuItemPartEditViewModel();\n\n            if (await updater.TryUpdateModelAsync(model, Prefix))\n            {\n                part.Url = model.Url;\n                part.ContentItem.DisplayText = model.Name;\n                // This code can be removed in a later release.\n#pragma warning disable 0618\n                part.Name = model.Name;\n#pragma warning restore 0618\n            }\n            return Edit(part);\n        }\n    }\n}\n", "using System.Collections.Generic;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.Email;\nusing OrchardCore.Users.Models;\nusing OrchardCore.Users.Services;\nusing OrchardCore.Workflows.Abstractions.Models;\nusing OrchardCore.Workflows.Activities;\nusing OrchardCore.Workflows.Models;\nusing OrchardCore.Workflows.Services;\n\nnamespace OrchardCore.Users.Workflows.Activities\n{\n    public class RegisterUserTask : TaskActivity\n    {\n        private readonly IUserService _userService;\n        private readonly UserManager<IUser> _userManager;\n        private readonly IWorkflowExpressionEvaluator _expressionEvaluator;\n        private readonly LinkGenerator _linkGenerator;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly IStringLocalizer S;\n        private readonly HtmlEncoder _htmlEncoder;\n\n        public RegisterUserTask(\n            IUserService userService,\n            UserManager<IUser> userManager,\n            IWorkflowExpressionEvaluator expressionEvaluator,\n            LinkGenerator linkGenerator,\n            IHttpContextAccessor httpContextAccessor,\n            IUpdateModelAccessor updateModelAccessor,\n            IStringLocalizer<RegisterUserTask> localizer,\n            HtmlEncoder htmlEncoder)\n        {\n            _userService = userService;\n            _userManager = userManager;\n            _expressionEvaluator = expressionEvaluator;\n            _linkGenerator = linkGenerator;\n            _httpContextAccessor = httpContextAccessor;\n            _updateModelAccessor = updateModelAccessor;\n            S = localizer;\n            _htmlEncoder = htmlEncoder;\n        }\n\n        // The technical name of the activity. Activities on a workflow definition reference this name.\n        public override string Name => nameof(RegisterUserTask);\n\n        public override LocalizedString DisplayText => S[\"Register User Task\"];\n\n        // The category to which this activity belongs. The activity picker groups activities by this category.\n        public override LocalizedString Category => S[\"User\"];\n\n        // The message to display.\n        public bool SendConfirmationEmail\n        {\n            get => GetProperty(() => true);\n            set => SetProperty(value);\n        }\n\n        public WorkflowExpression<string> ConfirmationEmailSubject\n        {\n            get => GetProperty(() => new WorkflowExpression<string>());\n            set => SetProperty(value);\n        }\n\n        // The message to display.\n        public WorkflowExpression<string> ConfirmationEmailTemplate\n        {\n            get => GetProperty(() => new WorkflowExpression<string>());\n            set => SetProperty(value);\n        }\n        public bool RequireModeration\n        {\n            get => GetProperty(() => false);\n            set => SetProperty(value);\n        }\n\n        // Returns the possible outcomes of this activity.\n        public override IEnumerable<Outcome> GetPossibleOutcomes(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n        {\n            return Outcomes(S[\"Done\"], S[\"Valid\"], S[\"Invalid\"]);\n        }\n\n        // This is the heart of the activity and actually performs the work to be done.\n        public override async Task<ActivityExecutionResult> ExecuteAsync(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n        {\n            bool isValid = false;\n            IFormCollection form = null;\n            string email = null;\n            if (_httpContextAccessor.HttpContext != null)\n            {\n                form = _httpContextAccessor.HttpContext.Request.Form;\n                email = form[\"Email\"];\n                isValid = !string.IsNullOrWhiteSpace(email);\n            }\n            var outcome = isValid ? \"Valid\" : \"Invalid\";\n\n            if (isValid)\n            {\n                var userName = form[\"UserName\"];\n                if (string.IsNullOrWhiteSpace(userName))\n                {\n                    userName = email.Replace('@', '+');\n                }\n\n                var errors = new Dictionary<string, string>();\n                var user = (User)await _userService.CreateUserAsync(new User() { UserName = userName, Email = email, IsEnabled = !RequireModeration }, null, (key, message) => errors.Add(key, message));\n                if (errors.Count > 0)\n                {\n                    var updater = _updateModelAccessor.ModelUpdater;\n                    if (updater != null)\n                    {\n                        foreach (var item in errors)\n                        {\n                            updater.ModelState.TryAddModelError(item.Key, S[item.Value]);\n                        }\n                    }\n                    outcome = \"Invalid\";\n                }\n                else if (SendConfirmationEmail)\n                {\n                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\n\n                    var uri = _linkGenerator.GetUriByAction(_httpContextAccessor.HttpContext, \"ConfirmEmail\",\n                        \"Registration\", new { area = \"OrchardCore.Users\", userId = user.UserId, code });\n\n                    workflowContext.Properties[\"EmailConfirmationUrl\"] = uri;\n\n                    var subject = await _expressionEvaluator.EvaluateAsync(ConfirmationEmailSubject, workflowContext, null);\n                    var localizedSubject = new LocalizedString(nameof(RegisterUserTask), subject);\n\n                    var body = await _expressionEvaluator.EvaluateAsync(ConfirmationEmailTemplate, workflowContext, _htmlEncoder);\n                    var localizedBody = new LocalizedHtmlString(nameof(RegisterUserTask), body);\n                    var message = new MailMessage()\n                    {\n                        To = email,\n                        Subject = localizedSubject.ResourceNotFound ? subject : localizedSubject.Value,\n                        Body = localizedBody.IsResourceNotFound ? body : localizedBody.Value,\n                        IsBodyHtml = true\n                    };\n                    var smtpService = _httpContextAccessor.HttpContext.RequestServices.GetService<ISmtpService>();\n\n                    if (smtpService == null)\n                    {\n                        var updater = _updateModelAccessor.ModelUpdater;\n                        if (updater != null)\n                        {\n                            updater.ModelState.TryAddModelError(\"\", S[\"No email service is available\"]);\n                        }\n                        outcome = \"Invalid\";\n                    }\n                    else\n                    {\n                        var result = await smtpService.SendAsync(message);\n                        if (!result.Succeeded)\n                        {\n                            var updater = _updateModelAccessor.ModelUpdater;\n                            if (updater != null)\n                            {\n                                foreach (var item in result.Errors)\n                                {\n                                    updater.ModelState.TryAddModelError(item.Name, item.Value);\n                                }\n                            }\n                            outcome = \"Invalid\";\n                        }\n                    }\n                }\n            }\n\n            return Outcomes(\"Done\", outcome);\n        }\n    }\n}\n", "using System.Collections.Generic;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Workflows.Abstractions.Models;\nusing OrchardCore.Workflows.Models;\nusing OrchardCore.Workflows.Services;\n\nnamespace OrchardCore.Workflows.Activities\n{\n    public class NotifyTask : TaskActivity\n    {\n        private readonly INotifier _notifier;\n        private readonly IWorkflowExpressionEvaluator _expressionEvaluator;\n        private readonly IStringLocalizer S;\n        private readonly HtmlEncoder _htmlEncoder;\n\n        public NotifyTask(\n            INotifier notifier,\n            IWorkflowExpressionEvaluator expressionvaluator,\n            IStringLocalizer<NotifyTask> localizer,\n            HtmlEncoder htmlEncoder)\n        {\n            _notifier = notifier;\n            _expressionEvaluator = expressionvaluator;\n            S = localizer;\n            _htmlEncoder = htmlEncoder;\n        }\n\n        public override string Name => nameof(NotifyTask);\n\n        public override LocalizedString DisplayText => S[\"Notify Task\"];\n\n        public override LocalizedString Category => S[\"UI\"];\n\n        public NotifyType NotificationType\n        {\n            get => GetProperty<NotifyType>();\n            set => SetProperty(value);\n        }\n\n        public WorkflowExpression<string> Message\n        {\n            get => GetProperty(() => new WorkflowExpression<string>());\n            set => SetProperty(value);\n        }\n\n        public override IEnumerable<Outcome> GetPossibleOutcomes(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n        {\n            return Outcomes(S[\"Done\"]);\n        }\n\n        public override async Task<ActivityExecutionResult> ExecuteAsync(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n        {\n            var message = await _expressionEvaluator.EvaluateAsync(Message, workflowContext, _htmlEncoder);\n            await _notifier.AddAsync(NotificationType, new LocalizedHtmlString(nameof(NotifyTask), message));\n\n            return Outcomes(\"Done\");\n        }\n    }\n}\n", "@using OrchardCore.Workflows.UserTasks.Activities;\n@model ActivityViewModel<UserTaskEvent>\n\n<header>\n    <h4><i class=\"fa fa-user-circle\" aria-hidden=\"true\"></i>@Model.Activity.GetTitleOrDefault(() => T[\"User Task\"])</h4>\n</header>\n\n@if (Model.Activity.Actions.Any())\n{\n    <span>@T[\"Request any user action of <em>{0}</em>\", string.Join(\", \", Model.Activity.Actions)]</span><br />\n    <span>@T[\"Required roles: <em>{0}</em>\", Model.Activity.Roles.Any() ? new LocalizedHtmlString(\"RequiredRoles\", string.Join(\", \", Model.Activity.Roles)) : T[\"Any\"]]</span>\n}\nelse\n{\n    <span>@T[\"No user actions specified\"]</span>\n}\n", "@model WorkflowViewModel\n@using OrchardCore.Workflows.Models;\n@using OrchardCore.Workflows.ViewModels;\n@inject OrchardCore.Modules.ILocalClock LocalClock\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(Model.WorkflowType.Name)</h1></zone>\n\n<zone name=\"Breadcrumbs\">\n<nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a asp-action=\"Index\" asp-controller=\"WorkflowType\">@T[\"Workflows\"]</a></li>\n        <li class=\"breadcrumb-item\"><a asp-action=\"Edit\" asp-controller=\"WorkflowType\" asp-route-id=\"@Model.WorkflowType.Id\">@Model.WorkflowType.Name</a></li>\n        <li class=\"breadcrumb-item\"><a asp-action=\"Index\" asp-controller=\"Workflow\" asp-route-workflowtypeid=\"@Model.WorkflowType.Id\">@T[\"Instances\"]</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">@Model.Workflow.WorkflowId</li>\n    </ol>\n</nav>\n</zone>\n<nav class=\"form-group\">\n    <ul class=\"nav nav-pills\" role=\"tablist\">\n        <li class=\"nav-item\">\n            <a class=\"nav-link active\" id=\"workflow-tab\" data-toggle=\"pill\" href=\"#workflow\" role=\"tab\" aria-controls=\"workflow\" aria-selected=\"true\">Workflow</a>\n        </li>\n        <li class=\"nav-item\">\n            <a class=\"nav-link\" id=\"state-tab\" data-toggle=\"pill\" href=\"#state\" role=\"tab\" aria-controls=\"state\">@T[\"State\"]</a>\n        </li>\n        @*TODO: Enable this when workflow logging is implemented.*@\n        @*<li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"log-tab\" data-toggle=\"pill\" href=\"#log\" role=\"tab\" aria-controls=\"log\">Log</a>\n            </li>*@\n    </ul>\n</nav>\n<div class=\"tab-content\">\n    <div id=\"workflow\" class=\"tab-pane active\" role=\"tabpanel\" aria-labelledby=\"workflow-tab\">\n        <div class=\"card form-group workflow-details\">\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col\">\n                        <label>@T[\"Workflow ID\"]</label>\n                        <span>@Model.Workflow.WorkflowId</span>\n                    </div>\n                    <div class=\"col\">\n                        <label>@T[\"Created\"]</label>\n                        <span>@await LocalClock.ConvertToLocalAsync(Model.Workflow.CreatedUtc)</span>\n                    </div>\n                    <div class=\"col\">\n                        <label>@T[\"Status\"]</label>\n                        <span>@Model.Workflow.Status.GetLocalizedStatus(T)</span>\n                    </div>\n                    @if (Model.Workflow.Status == WorkflowStatus.Faulted)\n                    {\n                        <div class=\"col\">\n                            <label>@T[\"Fault Message\"]</label>\n                            <span>@Model.Workflow.FaultMessage</span>\n                        </div>\n                    }\n                    <div class=\"col\">\n                        <label>@T[\"Correlation ID\"]</label>\n                        <span>@(Model.Workflow.CorrelationId ?? \"None\")</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"workflow-container\">\n                <div class=\"workflow-canvas-container\">\n                    <div class=\"workflow-canvas\" data-workflow-type=\"@Model.WorkflowTypeJson\">\n                        @foreach (var activityShape in Model.ActivityDesignShapes)\n                        {\n                            @await DisplayAsync(activityShape)\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div id=\"state\" class=\"tab-pane\" role=\"tabpanel\" aria-labelledby=\"state-tab\">\n        <div class=\"card form-group\">\n            <div class=\"card-body\">\n                <pre>@Model.WorkflowJson</pre>\n            </div>\n        </div>\n    </div>\n    @*TODO: Enable this when workflow logging is implemented.*@\n    @*<div id=\"log\" class=\"tab-pane\" role=\"tabpanel\" aria-labelledby=\"log-tab\">\n            <div class=\"card form-group\">\n                <div class=\"card-body\">\n                    Pretty LOG goes here...\n                </div>\n            </div>\n        </div>*@\n</div>\n<div class=\"form-group\">\n    <a class=\"btn btn-secondary\" asp-route-action=\"Index\" asp-route-workflowTypeId=\"@Model.WorkflowType.Id\">@T[\"Back\"]</a>\n    <a class=\"btn btn-danger\" data-message=\"@T[\"Are you sure you want to delete this workflow instance?\"]\" data-url-af=\"RemoveUrl UnsafeUrl\" asp-action=\"Delete\" asp-route-id=\"@Model.Workflow.Id\">@T[\"Delete\"]</a>\n</div>\n\n<style asp-name=\"jsplumbtoolkit-defaults\"></style>\n<style asp-src=\"~/OrchardCore.Workflows/Styles/orchard.workflows-viewer.min.css\" debug-src=\"~/OrchardCore.Workflows/Styles/orchard.workflows-viewer.css\"></style>\n<script asp-name=\"bootstrap\" version=\"4\" at=\"Foot\"></script>\n<script depends-on=\"jsplumb\" asp-src=\"~/OrchardCore.Workflows/Scripts/orchard.workflows-viewer.min.js\" debug-src=\"~/OrchardCore.Workflows/Scripts/orchard.workflows-viewer.js\" at=\"Foot\"></script>\n", "@model WorkflowIndexViewModel\n@using OrchardCore.Workflows.Models;\n@using OrchardCore.Workflows.ViewModels;\n\n@{\n    int startIndex = (Model.Pager.Page - 1) * (Model.Pager.PageSize) + 1;\n    int endIndex = startIndex + Model.Workflows.Count - 1;\n}\n<script asp-name=\"bootstrap-select\" depends-on=\"admin\" at=\"Foot\"></script>\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"{0} Instances\", Model.WorkflowType.Name])</h1></zone>\n\n<zone name=\"Breadcrumbs\">\n    <nav aria-label=\"breadcrumb\">\n        <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item\"><a asp-action=\"Index\" asp-controller=\"WorkflowType\">@T[\"Workflows\"]</a></li>\n            <li class=\"breadcrumb-item\"><a asp-action=\"Edit\" asp-controller=\"WorkflowType\" asp-route-id=\"@Model.WorkflowType.Id\">@Model.WorkflowType.Name</a></li>\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">@T[\"Instances\"]</li>\n        </ol>\n    </nav>\n</zone>\n\n<form asp-action=\"Index\" id=\"workflows-form\" method=\"post\" class=\"no-multisubmit\">\n    <input type=\"submit\" name=\"submit.Filter\" id=\"submitFilter\" class=\"sr-only\" />\n    <input type=\"submit\" name=\"submit.BulkAction\" class=\"sr-only\" />\n    <input asp-for=\"Options.BulkAction\" type=\"hidden\" />\n\n    <div class=\"form-group\">\n        <ul class=\"list-group with-checkbox\">\n            @if (Model.Workflows.Any())\n            {\n                <li class=\"list-group-item bg-primary\">\n                    <div class=\"row\">\n                        <div class=\"form-group col mb-n1 text-nowrap\">\n                            <div class=\"custom-control custom-checkbox mt-2 mr-n2\">\n                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"select-all\">\n                                <label class=\"custom-control-label\" for=\"select-all\" id=\"select-all-label\" title=\"@T[\"Select All\"]\"></label>\n                                <label id=\"items\" for=\"select-all\">@T.Plural(Model.Workflows.Count, \"1 item\", \"{0} items\")<span class=\"text-muted\" title=\"@T[\"Items {0} to {1}\", startIndex, endIndex]\">@T.Plural((int)Model.Pager.TotalItemCount, \" / {0} item in total\", \" / {0} items in total\")</span></label>\n                                <label id=\"selected-items\" class=\"text-muted\" for=\"select-all\"></label>\n                            </div>\n                        </div>\n                        <div class=\"form-group col-2 mb-n1\" style=\"display:none\" id=\"actions\">\n                            <span class=\"dropdown float-right mt-1\">\n                                <button class=\"btn btn-sm btn-light dropdown-toggle\" type=\"button\" id=\"bulk-action-menu-button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    @T[\"Actions\"]\n                                </button>\n                                <span class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"bulk-action-menu-button\">\n                                    @foreach (var item in Model.Options.WorkflowsBulkAction)\n                                    {\n                                        <a class=\"dropdown-item\" href=\"javascript:void(0)\" data-action=\"@item.Value\" data-title=\"@T[\"Bulk Action\"]\" data-message=\"@T[\"Are you sure you want to {0} these items?\", @item.Text.ToLower()]\">@item.Text</a>\n                                    }\n                                </span>\n                            </span>\n                        </div>\n                        <div class=\"form-group col mb-n1 filter\">\n                            <div class=\"btn-group float-right mt-1\">\n                                <select asp-for=\"Options.Filter\" asp-items=\"Model.Options.WorkflowsStatuses\" class=\"selectpicker show-tick mr-2\" data-header=\"@T[\"Filter by status\"]\" data-live-search=\"true\" data-selected-text-format=\"static\" data-dropdown-align-right=\"true\" data-width=\"fit\" title=\"@T[\"Status\"]\" data-style=\"btn-sm\">\n                                </select>\n                                <select asp-for=\"Options.OrderBy\" asp-items=\"@Model.Options.WorkflowsSorts\" class=\"selectpicker show-tick\" data-header=\"@T[\"Sort by\"]\" data-width=\"fit\" data-selected-text-format=\"static\" data-dropdown-align-right=\"true\" title=\"@T[\"Sort\"]\" data-style=\"btn-sm\"></select>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                @for (var i = 0; i < Model.Workflows.Count; i++)\n                {\n                    var entry = Model.Workflows[i];\n                    var statusCss = \"\";\n\n                    switch (entry.Workflow.Status)\n                    {\n                        case WorkflowStatus.Aborted:\n                            statusCss = \"warning\";\n                            break;\n                        case WorkflowStatus.Idle:\n                        default:\n                            statusCss = \"secondary\";\n                            break;\n                        case WorkflowStatus.Finished:\n                            statusCss = \"success\";\n                            break;\n                        case WorkflowStatus.Executing:\n                        case WorkflowStatus.Halted:\n                        case WorkflowStatus.Resuming:\n                        case WorkflowStatus.Starting:\n                            statusCss = \"info\";\n                            break;\n                        case WorkflowStatus.Faulted:\n                            statusCss = \"danger\";\n                            break;\n                    }\n\n                    <li class=\"list-group-item\">\n                        <div class=\"properties\">\n                            <div class=\"related\">\n                                <a asp-action=\"Delete\" asp-route-id=\"@entry.Workflow.Id\" class=\"btn btn-danger btn-sm\" data-message=\"@T[\"Are you sure you want to delete this workflow instance?\"]\" data-url-af=\"RemoveUrl UnsafeUrl\">@T[\"Delete\"]</a>\n                            </div>\n\n                            <div class=\"custom-control custom-checkbox float-left\">\n                                <input type=\"checkbox\" class=\"custom-control-input\" value=\"@entry.Workflow.Id\" name=\"itemIds\" id=\"itemIds-@entry.Workflow.Id\">\n                                <label class=\"custom-control-label\" for=\"itemIds-@entry.Workflow.Id\"></label>\n                            </div>\n                            <a asp-action=\"Details\" asp-route-id=\"@entry.Workflow.Id\">@entry.Workflow.WorkflowId</a>\n                            <div>\n                                <span class=\"hint\">@T[\"Created {0}\", (object)(await DisplayAsync(await New.TimeSpan(Utc: entry.Workflow.CreatedUtc)))]</span>\n                                <div class=\"info\">\n                                    <span class=\"badge badge-@statusCss\">\n                                        @entry.Workflow.Status.GetLocalizedStatus(T)\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                }\n            }\n            else\n            {\n                <li class=\"list-group-item\">\n                    <div class=\"alert alert-info mb-0\" role=\"alert\">\n                        @T[\"<strong>Nothing here!</strong> There are no halted workflows at the moment.\"]\n                    </div>\n                </li>\n            }\n        </ul>\n        @await DisplayAsync(Model.Pager)\n    </div>\n</form>\n\n<div class=\"form-group\">\n    <a class=\"btn btn-secondary\" href=\"@Model.ReturnUrl\">@T[\"Back\"]</a>\n</div>\n\n<script at=\"Foot\">\n    $(function () {\n        $('.selectpicker').selectpicker();\n\n        var actions = $(\"#actions\");\n        var items = $(\"#items\");\n        var filters = $(\".filter\");\n        var selectAllCtrl = $(\"#select-all\");\n        var selectedItems = $(\"#selected-items\");\n        var itemsCheckboxes = $(\":checkbox[name='itemIds']\");\n\n        $(\".filter-options input\").on(\"change\", function () {\n            $(\"[name='submit.Filter']\").click();\n        });\n\n        $('.selectpicker').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {\n            $(\"[name='submit.Filter']\").click();\n        });\n\n        $(\".dropdown-menu .dropdown-item\").filter(function() {\n            return $(this).data(\"action\");\n        }).on(\"click\", function () {\n            if ($(\":checkbox[name='itemIds']:checked\").length > 1) {\n                var $this = $(this);\n                confirmDialog({title: $this.data('title'), message: $this.data('message'), callback: function(r) {\n                    if (r) {\n                        $(\"[name='Options.BulkAction']\").val($this.data(\"action\"));\n                        $(\"[name='submit.BulkAction']\").click();\n                    }\n                }});\n            }\n        });\n\n        function displayActionsOrFilters() {\n            if ($(\":checkbox[name='itemIds']:checked\").length > 1) {\n                actions.show();\n                filters.hide();\n                selectedItems.show();\n                items.hide();\n            }\n            else {\n                actions.hide();\n                filters.show();\n                selectedItems.hide();\n                items.show();\n            }\n        }\n\n        selectAllCtrl.click(function(){\n            itemsCheckboxes.not(this).prop(\"checked\", this.checked);\n            selectedItems.text($(\":checkbox[name='itemIds']:checked\").length + ' @T[\"selected\"]');\n            displayActionsOrFilters();\n        });\n\n        itemsCheckboxes.on(\"click\", function () {\n            var itemsCount = $(\":checkbox[name='itemIds']\").length;\n            var selectedItemsCount = $(\":checkbox[name='itemIds']:checked\").length;\n\n            selectAllCtrl.prop(\"checked\", selectedItemsCount == itemsCount);\n            selectAllCtrl.prop(\"indeterminate\", selectedItemsCount > 0 && selectedItemsCount < itemsCount);\n\n            selectedItems.text(selectedItemsCount + ' @T[\"selected\"]');\n            displayActionsOrFilters();\n        });\n    });\n</script>\n", "using System;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing OrchardCore.Entities;\nusing OrchardCore.Workflows.Activities;\nusing OrchardCore.Workflows.Models;\n\nnamespace OrchardCore.Workflows.Helpers\n{\n    public static class ActivityExtensions\n    {\n        private static IHtmlLocalizer H;\n\n        public static bool IsEvent(this IActivity activity)\n        {\n            return activity is IEvent;\n        }\n\n        public static LocalizedHtmlString GetTitleOrDefault(this IActivity activity, Func<LocalizedHtmlString> defaultTitle)\n        {\n            var title = activity.As<ActivityMetadata>().Title;\n            return !string.IsNullOrEmpty(title) ? new LocalizedHtmlString(title, title) : defaultTitle();\n        }\n\n        public static LocalizedHtmlString GetLocalizedStatus(this WorkflowStatus status, IHtmlLocalizer localizer)\n        {\n            // Field for PoExtractor compatibility\n            H = localizer;\n\n            return status switch\n            {\n                WorkflowStatus.Aborted => H[\"Aborted\"],\n                WorkflowStatus.Executing => H[\"Executing\"],\n                WorkflowStatus.Faulted => H[\"Faulted\"],\n                WorkflowStatus.Finished => H[\"Finished\"],\n                WorkflowStatus.Halted => H[\"Halted\"],\n                WorkflowStatus.Idle => H[\"Idle\"],\n                WorkflowStatus.Resuming => H[\"Resuming\"],\n                WorkflowStatus.Starting => H[\"Starting\"],\n                _ => new LocalizedHtmlString(status.ToString(), status.ToString()),\n            };\n        }\n    }\n}\n"], "fixing_code": ["using System;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc.Infrastructure;\nusing Microsoft.AspNetCore.Mvc.Routing;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.ContentFields.Fields;\nusing OrchardCore.ContentFields.Settings;\nusing OrchardCore.ContentFields.ViewModels;\nusing OrchardCore.ContentManagement.Display.ContentDisplay;\nusing OrchardCore.ContentManagement.Display.Models;\nusing OrchardCore.ContentManagement.Metadata.Models;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Views;\nusing OrchardCore.Infrastructure.Html;\nusing OrchardCore.Mvc.ModelBinding;\n\nnamespace OrchardCore.ContentFields.Drivers\n{\n    public class LinkFieldDisplayDriver : ContentFieldDisplayDriver<LinkField>\n    {\n        private readonly IUrlHelperFactory _urlHelperFactory;\n        private readonly IActionContextAccessor _actionContextAccessor;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlSanitizerService _htmlSanitizerService;\n        private readonly HtmlEncoder _htmlencoder;\n\n        public LinkFieldDisplayDriver(\n            IUrlHelperFactory urlHelperFactory,\n            IActionContextAccessor actionContextAccessor,\n            IStringLocalizer<LinkFieldDisplayDriver> localizer,\n            IHtmlSanitizerService htmlSanitizerService,\n            HtmlEncoder htmlencoder)\n        {\n            _urlHelperFactory = urlHelperFactory;\n            _actionContextAccessor = actionContextAccessor;\n            S = localizer;\n            _htmlSanitizerService = htmlSanitizerService;\n            _htmlencoder = htmlencoder;\n        }\n\n        public override IDisplayResult Display(LinkField field, BuildFieldDisplayContext context)\n        {\n            return Initialize<DisplayLinkFieldViewModel>(GetDisplayShapeType(context), model =>\n            {\n                model.Field = field;\n                model.Part = context.ContentPart;\n                model.PartFieldDefinition = context.PartFieldDefinition;\n            })\n            .Location(\"Detail\", \"Content\")\n            .Location(\"Summary\", \"Content\");\n        }\n\n        public override IDisplayResult Edit(LinkField field, BuildFieldEditorContext context)\n        {\n            return Initialize<EditLinkFieldViewModel>(GetEditorShapeType(context), model =>\n            {\n                var settings = context.PartFieldDefinition.GetSettings<LinkFieldSettings>();\n                model.Url = context.IsNew ? settings.DefaultUrl : field.Url;\n                model.Text = context.IsNew ? settings.DefaultText : field.Text;\n                model.Field = field;\n                model.Part = context.ContentPart;\n                model.PartFieldDefinition = context.PartFieldDefinition;\n            });\n        }\n\n        public override async Task<IDisplayResult> UpdateAsync(LinkField field, IUpdateModel updater, UpdateFieldEditorContext context)\n        {\n            var modelUpdated = await updater.TryUpdateModelAsync(field, Prefix, f => f.Url, f => f.Text);\n\n            if (modelUpdated)\n            {\n                var settings = context.PartFieldDefinition.GetSettings<LinkFieldSettings>();\n\n                var urlToValidate = field.Url;\n                if (!String.IsNullOrEmpty(urlToValidate))\n                {\n                    var indexAnchor = urlToValidate.IndexOf('#');\n                    if (indexAnchor > -1)\n                    {\n                        urlToValidate = urlToValidate.Substring(0, indexAnchor);\n                    }\n\n                    if (urlToValidate.StartsWith(\"~/\", StringComparison.Ordinal))\n                    {\n                        var urlHelper = _urlHelperFactory.GetUrlHelper(_actionContextAccessor.ActionContext);\n                        urlToValidate = urlHelper.Content(urlToValidate);\n                    }\n\n                    urlToValidate = urlToValidate.ToUriComponents();\n                }\n\n                // Validate Url\n                if (settings.Required && String.IsNullOrWhiteSpace(field.Url))\n                {\n                    updater.ModelState.AddModelError(Prefix, nameof(field.Url), S[\"The url is required for {0}.\", context.PartFieldDefinition.DisplayName()]);\n                }\n                else if (!String.IsNullOrWhiteSpace(field.Url) && !Uri.IsWellFormedUriString(urlToValidate, UriKind.RelativeOrAbsolute))\n                {\n                    updater.ModelState.AddModelError(Prefix, nameof(field.Url), S[\"{0} is an invalid url.\", field.Url]);\n                }\n                else\n                {\n                    var link = $\"<a href=\\\"{_htmlencoder.Encode(urlToValidate)}\\\"></a>\";\n\n                    if (!String.Equals(link, _htmlSanitizerService.Sanitize(link), StringComparison.OrdinalIgnoreCase))\n                    {\n                        updater.ModelState.AddModelError(Prefix, nameof(field.Url), S[\"{0} is an invalid url.\", field.Url]);\n                    }\n                }\n\n                // Validate Text\n                if (settings.LinkTextMode == LinkTextMode.Required && String.IsNullOrWhiteSpace(field.Text))\n                {\n                    updater.ModelState.AddModelError(Prefix, nameof(field.Text), S[\"The link text is required for {0}.\", context.PartFieldDefinition.DisplayName()]);\n                }\n                else if (settings.LinkTextMode == LinkTextMode.Static && String.IsNullOrWhiteSpace(settings.DefaultText))\n                {\n                    updater.ModelState.AddModelError(Prefix, nameof(field.Text), S[\"The text default value is required for {0}.\", context.PartFieldDefinition.DisplayName()]);\n                }\n            }\n\n            return Edit(field, context);\n        }\n    }\n}\n", "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.Extensions.Logging;\nusing OrchardCore.Admin;\nusing OrchardCore.AuditTrail.Indexes;\nusing OrchardCore.AuditTrail.Models;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display;\nusing OrchardCore.Contents.AuditTrail.Models;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Entities;\nusing OrchardCore.Modules;\nusing YesSql;\n\nnamespace OrchardCore.Contents.AuditTrail.Controllers\n{\n    [RequireFeatures(\"OrchardCore.AuditTrail\")]\n    [Admin]\n    public class AuditTrailContentController : Controller\n    {\n        private readonly ISession _session;\n        private readonly IContentManager _contentManager;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IContentItemDisplayManager _contentItemDisplayManager;\n        private readonly INotifier _notifier;\n        private readonly IHtmlLocalizer H;\n        private readonly ILogger _logger;\n\n        public AuditTrailContentController(\n            ISession session,\n            IContentManager contentManager,\n            IUpdateModelAccessor updateModelAccessor,\n            IAuthorizationService authorizationService,\n            IContentItemDisplayManager contentItemDisplayManager,\n            INotifier notifier,\n            IHtmlLocalizer<AuditTrailContentController> htmlLocalizer,\n            ILogger<AuditTrailContentController> logger)\n        {\n            _session = session;\n            _contentManager = contentManager;\n            _updateModelAccessor = updateModelAccessor;\n            _authorizationService = authorizationService;\n            _contentItemDisplayManager = contentItemDisplayManager;\n            _notifier = notifier;\n            H = htmlLocalizer;\n            _logger = logger;\n        }\n\n        public async Task<ActionResult> Display(string auditTrailEventId)\n        {\n            var auditTrailContentEvent = (await _session.Query<AuditTrailEvent, AuditTrailEventIndex>(collection: AuditTrailEvent.Collection)\n                .Where(index => index.EventId == auditTrailEventId)\n                .FirstOrDefaultAsync())\n                ?.As<AuditTrailContentEvent>();\n\n            if (auditTrailContentEvent == null || auditTrailContentEvent.ContentItem == null)\n            {\n                return NotFound();\n            }\n\n            var contentItem = auditTrailContentEvent.ContentItem;\n\n            contentItem.Id = 0;\n            contentItem.ContentItemVersionId = \"\";\n            contentItem.Published = false;\n            contentItem.Latest = false;\n\n            contentItem = await _contentManager.LoadAsync(contentItem);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var auditTrailPart = contentItem.As<AuditTrailPart>();\n            if (auditTrailPart != null)\n            {\n                auditTrailPart.ShowComment = true;\n            }\n\n            var model = await _contentItemDisplayManager.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n\n            model.Properties[\"VersionNumber\"] = auditTrailContentEvent.VersionNumber;\n\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<ActionResult> Restore(string auditTrailEventId)\n        {\n            var contentItem = (await _session.Query<AuditTrailEvent, AuditTrailEventIndex>(collection: AuditTrailEvent.Collection)\n                .Where(index => index.EventId == auditTrailEventId)\n                .FirstOrDefaultAsync())\n                ?.As<AuditTrailContentEvent>()\n                ?.ContentItem;\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            contentItem = await _contentManager.LoadAsync(contentItem);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var result = await _contentManager.RestoreAsync(contentItem);\n\n            if (!result.Succeeded)\n            {\n                await _notifier.WarningAsync(H[\"'{0}' was not restored, the version is not valid.\", contentItem.DisplayText]);\n\n                foreach (var error in result.Errors)\n                {\n                    // Pass ErrorMessage as an argument to ensure it is encoded\n                    await _notifier.WarningAsync(new LocalizedHtmlString(nameof(AuditTrailContentController.Restore), \"{0}\", false, error.ErrorMessage));\n                }\n\n                return RedirectToAction(\"Index\", \"Admin\", new { area = \"OrchardCore.AuditTrail\" });\n            }\n\n            await _notifier.SuccessAsync(H[\"'{0}' has been restored.\", contentItem.DisplayText]);\n\n            return RedirectToAction(\"Index\", \"Admin\", new { area = \"OrchardCore.AuditTrail\" });\n        }\n    }\n}\n", "using System;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc.Infrastructure;\nusing Microsoft.AspNetCore.Mvc.Routing;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.ContentManagement.Display.ContentDisplay;\nusing OrchardCore.ContentManagement.Display.Models;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Views;\nusing OrchardCore.Infrastructure.Html;\nusing OrchardCore.Menu.Models;\nusing OrchardCore.Menu.Settings;\nusing OrchardCore.Menu.ViewModels;\n\nnamespace OrchardCore.Menu.Drivers\n{\n    public class HtmlMenuItemPartDisplayDriver : ContentPartDisplayDriver<HtmlMenuItemPart>\n    {\n        private readonly IUrlHelperFactory _urlHelperFactory;\n        private readonly IActionContextAccessor _actionContextAccessor;\n        private readonly IHtmlSanitizerService _htmlSanitizerService;\n        private readonly HtmlEncoder _htmlencoder;\n        private readonly IStringLocalizer S;\n\n        public HtmlMenuItemPartDisplayDriver(\n            IUrlHelperFactory urlHelperFactory,\n            IActionContextAccessor actionContextAccessor,\n            IStringLocalizer<HtmlMenuItemPartDisplayDriver> localizer,\n            IHtmlSanitizerService htmlSanitizerService,\n            HtmlEncoder htmlencoder\n            )\n        {\n            _urlHelperFactory = urlHelperFactory;\n            _actionContextAccessor = actionContextAccessor;\n            _htmlSanitizerService = htmlSanitizerService;\n            _htmlencoder = htmlencoder;\n            S = localizer;\n        }\n\n        public override IDisplayResult Display(HtmlMenuItemPart part, BuildPartDisplayContext context)\n        {\n            var settings = context.TypePartDefinition.GetSettings<HtmlMenuItemPartSettings>();\n\n            if (settings.SanitizeHtml)\n            {\n                part.Html = _htmlSanitizerService.Sanitize(part.Html);\n            }\n\n            return Combine(\n                Dynamic(\"HtmlMenuItemPart_Admin\", shape =>\n                {\n                    shape.MenuItemPart = part;\n                })\n                .Location(\"Admin\", \"Content:10\"),\n                Dynamic(\"HtmlMenuItemPart_Thumbnail\", shape =>\n                {\n                    shape.MenuItemPart = part;\n                })\n                .Location(\"Thumbnail\", \"Content:10\")\n            );\n        }\n\n        public override IDisplayResult Edit(HtmlMenuItemPart part)\n        {\n            return Initialize<HtmlMenuItemPartEditViewModel>(\"HtmlMenuItemPart_Edit\", model =>\n            {\n                model.Name = part.ContentItem.DisplayText;\n                model.Url = part.Url;\n                model.Html = part.Html;\n                model.MenuItemPart = part;\n            });\n        }\n\n        public override async Task<IDisplayResult> UpdateAsync(HtmlMenuItemPart part, IUpdateModel updater, UpdatePartEditorContext context)\n        {\n            var settings = context.TypePartDefinition.GetSettings<HtmlMenuItemPartSettings>();\n            var model = new HtmlMenuItemPartEditViewModel();\n            if (await updater.TryUpdateModelAsync(model, Prefix))\n            {\n                part.ContentItem.DisplayText = model.Name;\n                part.Html = settings.SanitizeHtml ? _htmlSanitizerService.Sanitize(model.Html) : model.Html;\n                part.Url = model.Url;\n\n                var urlToValidate = part.Url;\n\n                if (!String.IsNullOrEmpty(urlToValidate))\n                {\n                    urlToValidate = urlToValidate.Split('#', 2)[0];\n\n                    if (urlToValidate.StartsWith(\"~/\", StringComparison.Ordinal))\n                    {\n                        var urlHelper = _urlHelperFactory.GetUrlHelper(_actionContextAccessor.ActionContext);\n                        urlToValidate = urlHelper.Content(urlToValidate);\n                    }\n\n                    urlToValidate = urlToValidate.ToUriComponents();\n\n                    if (!Uri.IsWellFormedUriString(urlToValidate, UriKind.RelativeOrAbsolute))\n                    {\n                        updater.ModelState.AddModelError(nameof(part.Url), S[\"{0} is an invalid url.\", part.Url]);\n                    }\n                    else\n                    {\n                        var link = $\"<a href=\\\"{_htmlencoder.Encode(urlToValidate)}\\\"></a>\";\n\n                        if (!String.Equals(link, _htmlSanitizerService.Sanitize(link), StringComparison.OrdinalIgnoreCase))\n                        {\n                            updater.ModelState.AddModelError(nameof(part.Url), S[\"{0} is an invalid url.\", part.Url]);\n                        }\n                    }\n                }\n            }\n\n            return Edit(part, context);\n        }\n    }\n}\n", "using System;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc.Infrastructure;\nusing Microsoft.AspNetCore.Mvc.Routing;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.ContentManagement.Display.ContentDisplay;\nusing OrchardCore.ContentManagement.Display.Models;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Views;\nusing OrchardCore.Infrastructure.Html;\nusing OrchardCore.Menu.Models;\nusing OrchardCore.Menu.ViewModels;\n\nnamespace OrchardCore.Menu.Drivers\n{\n    public class LinkMenuItemPartDisplayDriver : ContentPartDisplayDriver<LinkMenuItemPart>\n    {\n        private readonly IUrlHelperFactory _urlHelperFactory;\n        private readonly IActionContextAccessor _actionContextAccessor;\n        private readonly IHtmlSanitizerService _htmlSanitizerService;\n        private readonly HtmlEncoder _htmlencoder;\n        private readonly IStringLocalizer S;\n\n        public LinkMenuItemPartDisplayDriver(\n            IUrlHelperFactory urlHelperFactory,\n            IActionContextAccessor actionContextAccessor,\n            IStringLocalizer<LinkMenuItemPartDisplayDriver> localizer,\n            IHtmlSanitizerService htmlSanitizerService,\n            HtmlEncoder htmlencoder\n            )\n        {\n            _urlHelperFactory = urlHelperFactory;\n            _actionContextAccessor = actionContextAccessor; \n            _htmlSanitizerService = htmlSanitizerService;\n            _htmlencoder = htmlencoder;\n            S = localizer;\n        }\n\n        public override IDisplayResult Display(LinkMenuItemPart part, BuildPartDisplayContext context)\n        {\n            return Combine(\n                Dynamic(\"LinkMenuItemPart_Admin\", shape =>\n                {\n                    shape.MenuItemPart = part;\n                })\n                .Location(\"Admin\", \"Content:10\"),\n                Dynamic(\"LinkMenuItemPart_Thumbnail\", shape =>\n                {\n                    shape.MenuItemPart = part;\n                })\n                .Location(\"Thumbnail\", \"Content:10\")\n            );\n        }\n\n        public override IDisplayResult Edit(LinkMenuItemPart part)\n        {\n            return Initialize<LinkMenuItemPartEditViewModel>(\"LinkMenuItemPart_Edit\", model =>\n            {\n                model.Name = part.ContentItem.DisplayText;\n                model.Url = part.Url;\n                model.MenuItemPart = part;\n            });\n        }\n\n        public override async Task<IDisplayResult> UpdateAsync(LinkMenuItemPart part, IUpdateModel updater)\n        {\n            var model = new LinkMenuItemPartEditViewModel();\n\n            if (await updater.TryUpdateModelAsync(model, Prefix))\n            {\n                part.Url = model.Url;\n                part.ContentItem.DisplayText = model.Name;\n\n                // This code can be removed in a later release.\n#pragma warning disable 0618\n                part.Name = model.Name;\n#pragma warning restore 0618\n\n                var urlToValidate = part.Url;\n\n                if (!String.IsNullOrEmpty(urlToValidate))\n                {\n                    urlToValidate = urlToValidate.Split('#', 2)[0];\n\n                    if (urlToValidate.StartsWith(\"~/\", StringComparison.Ordinal))\n                    {\n                        var urlHelper = _urlHelperFactory.GetUrlHelper(_actionContextAccessor.ActionContext);\n                        urlToValidate = urlHelper.Content(urlToValidate);\n                    }\n\n                    urlToValidate = urlToValidate.ToUriComponents();\n\n                    if (!Uri.IsWellFormedUriString(urlToValidate, UriKind.RelativeOrAbsolute))\n                    {\n                        updater.ModelState.AddModelError(nameof(part.Url), S[\"{0} is an invalid url.\", part.Url]);\n                    }\n                    else\n                    {\n                        var link = $\"<a href=\\\"{_htmlencoder.Encode(urlToValidate)}\\\"></a>\";\n\n                        if (!String.Equals(link, _htmlSanitizerService.Sanitize(link), StringComparison.OrdinalIgnoreCase))\n                        {\n                            updater.ModelState.AddModelError(nameof(part.Url), S[\"{0} is an invalid url.\", part.Url]);\n                        }\n                    }\n                }\n            }\n\n            return Edit(part);\n        }\n    }\n}\n", "using System.Collections.Generic;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.Email;\nusing OrchardCore.Users.Models;\nusing OrchardCore.Users.Services;\nusing OrchardCore.Workflows.Abstractions.Models;\nusing OrchardCore.Workflows.Activities;\nusing OrchardCore.Workflows.Models;\nusing OrchardCore.Workflows.Services;\n\nnamespace OrchardCore.Users.Workflows.Activities\n{\n    public class RegisterUserTask : TaskActivity\n    {\n        private readonly IUserService _userService;\n        private readonly UserManager<IUser> _userManager;\n        private readonly IWorkflowExpressionEvaluator _expressionEvaluator;\n        private readonly LinkGenerator _linkGenerator;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly IStringLocalizer S;\n        private readonly HtmlEncoder _htmlEncoder;\n\n        public RegisterUserTask(\n            IUserService userService,\n            UserManager<IUser> userManager,\n            IWorkflowExpressionEvaluator expressionEvaluator,\n            LinkGenerator linkGenerator,\n            IHttpContextAccessor httpContextAccessor,\n            IUpdateModelAccessor updateModelAccessor,\n            IStringLocalizer<RegisterUserTask> localizer,\n            HtmlEncoder htmlEncoder)\n        {\n            _userService = userService;\n            _userManager = userManager;\n            _expressionEvaluator = expressionEvaluator;\n            _linkGenerator = linkGenerator;\n            _httpContextAccessor = httpContextAccessor;\n            _updateModelAccessor = updateModelAccessor;\n            S = localizer;\n            _htmlEncoder = htmlEncoder;\n        }\n\n        // The technical name of the activity. Activities on a workflow definition reference this name.\n        public override string Name => nameof(RegisterUserTask);\n\n        public override LocalizedString DisplayText => S[\"Register User Task\"];\n\n        // The category to which this activity belongs. The activity picker groups activities by this category.\n        public override LocalizedString Category => S[\"User\"];\n\n        // The message to display.\n        public bool SendConfirmationEmail\n        {\n            get => GetProperty(() => true);\n            set => SetProperty(value);\n        }\n\n        public WorkflowExpression<string> ConfirmationEmailSubject\n        {\n            get => GetProperty(() => new WorkflowExpression<string>());\n            set => SetProperty(value);\n        }\n\n        // The message to display.\n        public WorkflowExpression<string> ConfirmationEmailTemplate\n        {\n            get => GetProperty(() => new WorkflowExpression<string>());\n            set => SetProperty(value);\n        }\n        public bool RequireModeration\n        {\n            get => GetProperty(() => false);\n            set => SetProperty(value);\n        }\n\n        // Returns the possible outcomes of this activity.\n        public override IEnumerable<Outcome> GetPossibleOutcomes(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n        {\n            return Outcomes(S[\"Done\"], S[\"Valid\"], S[\"Invalid\"]);\n        }\n\n        // This is the heart of the activity and actually performs the work to be done.\n        public override async Task<ActivityExecutionResult> ExecuteAsync(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n        {\n            bool isValid = false;\n            IFormCollection form = null;\n            string email = null;\n            if (_httpContextAccessor.HttpContext != null)\n            {\n                form = _httpContextAccessor.HttpContext.Request.Form;\n                email = form[\"Email\"];\n                isValid = !string.IsNullOrWhiteSpace(email);\n            }\n            var outcome = isValid ? \"Valid\" : \"Invalid\";\n\n            if (isValid)\n            {\n                var userName = form[\"UserName\"];\n                if (string.IsNullOrWhiteSpace(userName))\n                {\n                    userName = email.Replace('@', '+');\n                }\n\n                var errors = new Dictionary<string, string>();\n                var user = (User)await _userService.CreateUserAsync(new User() { UserName = userName, Email = email, IsEnabled = !RequireModeration }, null, (key, message) => errors.Add(key, message));\n                if (errors.Count > 0)\n                {\n                    var updater = _updateModelAccessor.ModelUpdater;\n                    if (updater != null)\n                    {\n                        foreach (var item in errors)\n                        {\n                            updater.ModelState.TryAddModelError(item.Key, S[item.Value]);\n                        }\n                    }\n                    outcome = \"Invalid\";\n                }\n                else if (SendConfirmationEmail)\n                {\n                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\n\n                    var uri = _linkGenerator.GetUriByAction(_httpContextAccessor.HttpContext, \"ConfirmEmail\",\n                        \"Registration\", new { area = \"OrchardCore.Users\", userId = user.UserId, code });\n\n                    workflowContext.Properties[\"EmailConfirmationUrl\"] = uri;\n\n                    var subject = await _expressionEvaluator.EvaluateAsync(ConfirmationEmailSubject, workflowContext, null);\n\n                    var body = await _expressionEvaluator.EvaluateAsync(ConfirmationEmailTemplate, workflowContext, _htmlEncoder);\n\n                    var message = new MailMessage()\n                    {\n                        To = email,\n                        Subject = subject,\n                        Body = body,\n                        IsBodyHtml = true\n                    };\n                    var smtpService = _httpContextAccessor.HttpContext.RequestServices.GetService<ISmtpService>();\n\n                    if (smtpService == null)\n                    {\n                        var updater = _updateModelAccessor.ModelUpdater;\n                        if (updater != null)\n                        {\n                            updater.ModelState.TryAddModelError(\"\", S[\"No email service is available\"]);\n                        }\n                        outcome = \"Invalid\";\n                    }\n                    else\n                    {\n                        var result = await smtpService.SendAsync(message);\n                        if (!result.Succeeded)\n                        {\n                            var updater = _updateModelAccessor.ModelUpdater;\n                            if (updater != null)\n                            {\n                                foreach (var item in result.Errors)\n                                {\n                                    updater.ModelState.TryAddModelError(item.Name, item.Value);\n                                }\n                            }\n                            outcome = \"Invalid\";\n                        }\n                    }\n                }\n            }\n\n            return Outcomes(\"Done\", outcome);\n        }\n    }\n}\n", "using System.Collections.Generic;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Workflows.Abstractions.Models;\nusing OrchardCore.Workflows.Models;\nusing OrchardCore.Workflows.Services;\n\nnamespace OrchardCore.Workflows.Activities\n{\n    public class NotifyTask : TaskActivity\n    {\n        private readonly INotifier _notifier;\n        private readonly IWorkflowExpressionEvaluator _expressionEvaluator;\n        private readonly IStringLocalizer S;\n        private readonly HtmlEncoder _htmlEncoder;\n\n        public NotifyTask(\n            INotifier notifier,\n            IWorkflowExpressionEvaluator expressionvaluator,\n            IStringLocalizer<NotifyTask> localizer,\n            HtmlEncoder htmlEncoder)\n        {\n            _notifier = notifier;\n            _expressionEvaluator = expressionvaluator;\n            S = localizer;\n            _htmlEncoder = htmlEncoder;\n        }\n\n        public override string Name => nameof(NotifyTask);\n\n        public override LocalizedString DisplayText => S[\"Notify Task\"];\n\n        public override LocalizedString Category => S[\"UI\"];\n\n        public NotifyType NotificationType\n        {\n            get => GetProperty<NotifyType>();\n            set => SetProperty(value);\n        }\n\n        public WorkflowExpression<string> Message\n        {\n            get => GetProperty(() => new WorkflowExpression<string>());\n            set => SetProperty(value);\n        }\n\n        public override IEnumerable<Outcome> GetPossibleOutcomes(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n        {\n            return Outcomes(S[\"Done\"]);\n        }\n\n        public override async Task<ActivityExecutionResult> ExecuteAsync(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n        {\n            var message = await _expressionEvaluator.EvaluateAsync(Message, workflowContext, _htmlEncoder);\n\n            // The notification message can contain HTML by design\n            await _notifier.AddAsync(NotificationType, new LocalizedHtmlString(nameof(NotifyTask), message));\n\n            return Outcomes(\"Done\");\n        }\n    }\n}\n", "@using OrchardCore.Workflows.UserTasks.Activities;\n@model ActivityViewModel<UserTaskEvent>\n\n<header>\n    <h4><i class=\"fa fa-user-circle\" aria-hidden=\"true\"></i>@Model.Activity.GetTitleOrDefault(() => T[\"User Task\"])</h4>\n</header>\n\n@if (Model.Activity.Actions.Any())\n{\n    <span>@T[\"Request any user action of <em>{0}</em>\", string.Join(\", \", Model.Activity.Actions)]</span><br />\n    <span>@T[\"Required roles: <em>{0}</em>\", Model.Activity.Roles.Any() ? Html.Raw(Html.Encode(string.Join(\", \", Model.Activity.Roles))) : T[\"Any\"]]</span>\n}\nelse\n{\n    <span>@T[\"No user actions specified\"]</span>\n}\n", "@model WorkflowViewModel\n@using OrchardCore.Workflows.Models;\n@using OrchardCore.Workflows.ViewModels;\n@inject OrchardCore.Modules.ILocalClock LocalClock\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(Model.WorkflowType.Name)</h1></zone>\n\n<zone name=\"Breadcrumbs\">\n<nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a asp-action=\"Index\" asp-controller=\"WorkflowType\">@T[\"Workflows\"]</a></li>\n        <li class=\"breadcrumb-item\"><a asp-action=\"Edit\" asp-controller=\"WorkflowType\" asp-route-id=\"@Model.WorkflowType.Id\">@Model.WorkflowType.Name</a></li>\n        <li class=\"breadcrumb-item\"><a asp-action=\"Index\" asp-controller=\"Workflow\" asp-route-workflowtypeid=\"@Model.WorkflowType.Id\">@T[\"Instances\"]</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">@Model.Workflow.WorkflowId</li>\n    </ol>\n</nav>\n</zone>\n<nav class=\"form-group\">\n    <ul class=\"nav nav-pills\" role=\"tablist\">\n        <li class=\"nav-item\">\n            <a class=\"nav-link active\" id=\"workflow-tab\" data-toggle=\"pill\" href=\"#workflow\" role=\"tab\" aria-controls=\"workflow\" aria-selected=\"true\">Workflow</a>\n        </li>\n        <li class=\"nav-item\">\n            <a class=\"nav-link\" id=\"state-tab\" data-toggle=\"pill\" href=\"#state\" role=\"tab\" aria-controls=\"state\">@T[\"State\"]</a>\n        </li>\n        @*TODO: Enable this when workflow logging is implemented.*@\n        @*<li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"log-tab\" data-toggle=\"pill\" href=\"#log\" role=\"tab\" aria-controls=\"log\">Log</a>\n            </li>*@\n    </ul>\n</nav>\n<div class=\"tab-content\">\n    <div id=\"workflow\" class=\"tab-pane active\" role=\"tabpanel\" aria-labelledby=\"workflow-tab\">\n        <div class=\"card form-group workflow-details\">\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col\">\n                        <label>@T[\"Workflow ID\"]</label>\n                        <span>@Model.Workflow.WorkflowId</span>\n                    </div>\n                    <div class=\"col\">\n                        <label>@T[\"Created\"]</label>\n                        <span>@await LocalClock.ConvertToLocalAsync(Model.Workflow.CreatedUtc)</span>\n                    </div>\n                    <div class=\"col\">\n                        <label>@T[\"Status\"]</label>\n                        <span>@T.GetLocalizedStatus(Model.Workflow.Status)</span>\n                    </div>\n                    @if (Model.Workflow.Status == WorkflowStatus.Faulted)\n                    {\n                        <div class=\"col\">\n                            <label>@T[\"Fault Message\"]</label>\n                            <span>@Model.Workflow.FaultMessage</span>\n                        </div>\n                    }\n                    <div class=\"col\">\n                        <label>@T[\"Correlation ID\"]</label>\n                        <span>@(Model.Workflow.CorrelationId ?? \"None\")</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"workflow-container\">\n                <div class=\"workflow-canvas-container\">\n                    <div class=\"workflow-canvas\" data-workflow-type=\"@Model.WorkflowTypeJson\">\n                        @foreach (var activityShape in Model.ActivityDesignShapes)\n                        {\n                            @await DisplayAsync(activityShape)\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div id=\"state\" class=\"tab-pane\" role=\"tabpanel\" aria-labelledby=\"state-tab\">\n        <div class=\"card form-group\">\n            <div class=\"card-body\">\n                <pre>@Model.WorkflowJson</pre>\n            </div>\n        </div>\n    </div>\n    @*TODO: Enable this when workflow logging is implemented.*@\n    @*<div id=\"log\" class=\"tab-pane\" role=\"tabpanel\" aria-labelledby=\"log-tab\">\n            <div class=\"card form-group\">\n                <div class=\"card-body\">\n                    Pretty LOG goes here...\n                </div>\n            </div>\n        </div>*@\n</div>\n<div class=\"form-group\">\n    <a class=\"btn btn-secondary\" asp-route-action=\"Index\" asp-route-workflowTypeId=\"@Model.WorkflowType.Id\">@T[\"Back\"]</a>\n    <a class=\"btn btn-danger\" data-message=\"@T[\"Are you sure you want to delete this workflow instance?\"]\" data-url-af=\"RemoveUrl UnsafeUrl\" asp-action=\"Delete\" asp-route-id=\"@Model.Workflow.Id\">@T[\"Delete\"]</a>\n</div>\n\n<style asp-name=\"jsplumbtoolkit-defaults\"></style>\n<style asp-src=\"~/OrchardCore.Workflows/Styles/orchard.workflows-viewer.min.css\" debug-src=\"~/OrchardCore.Workflows/Styles/orchard.workflows-viewer.css\"></style>\n<script asp-name=\"bootstrap\" version=\"4\" at=\"Foot\"></script>\n<script depends-on=\"jsplumb\" asp-src=\"~/OrchardCore.Workflows/Scripts/orchard.workflows-viewer.min.js\" debug-src=\"~/OrchardCore.Workflows/Scripts/orchard.workflows-viewer.js\" at=\"Foot\"></script>\n", "@model WorkflowIndexViewModel\n@using OrchardCore.Workflows.Models;\n@using OrchardCore.Workflows.ViewModels;\n\n@{\n    int startIndex = (Model.Pager.Page - 1) * (Model.Pager.PageSize) + 1;\n    int endIndex = startIndex + Model.Workflows.Count - 1;\n}\n<script asp-name=\"bootstrap-select\" depends-on=\"admin\" at=\"Foot\"></script>\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"{0} Instances\", Model.WorkflowType.Name])</h1></zone>\n\n<zone name=\"Breadcrumbs\">\n    <nav aria-label=\"breadcrumb\">\n        <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item\"><a asp-action=\"Index\" asp-controller=\"WorkflowType\">@T[\"Workflows\"]</a></li>\n            <li class=\"breadcrumb-item\"><a asp-action=\"Edit\" asp-controller=\"WorkflowType\" asp-route-id=\"@Model.WorkflowType.Id\">@Model.WorkflowType.Name</a></li>\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">@T[\"Instances\"]</li>\n        </ol>\n    </nav>\n</zone>\n\n<form asp-action=\"Index\" id=\"workflows-form\" method=\"post\" class=\"no-multisubmit\">\n    <input type=\"submit\" name=\"submit.Filter\" id=\"submitFilter\" class=\"sr-only\" />\n    <input type=\"submit\" name=\"submit.BulkAction\" class=\"sr-only\" />\n    <input asp-for=\"Options.BulkAction\" type=\"hidden\" />\n\n    <div class=\"form-group\">\n        <ul class=\"list-group with-checkbox\">\n            @if (Model.Workflows.Any())\n            {\n                <li class=\"list-group-item bg-primary\">\n                    <div class=\"row\">\n                        <div class=\"form-group col mb-n1 text-nowrap\">\n                            <div class=\"custom-control custom-checkbox mt-2 mr-n2\">\n                                <input type=\"checkbox\" class=\"custom-control-input\" id=\"select-all\">\n                                <label class=\"custom-control-label\" for=\"select-all\" id=\"select-all-label\" title=\"@T[\"Select All\"]\"></label>\n                                <label id=\"items\" for=\"select-all\">@T.Plural(Model.Workflows.Count, \"1 item\", \"{0} items\")<span class=\"text-muted\" title=\"@T[\"Items {0} to {1}\", startIndex, endIndex]\">@T.Plural((int)Model.Pager.TotalItemCount, \" / {0} item in total\", \" / {0} items in total\")</span></label>\n                                <label id=\"selected-items\" class=\"text-muted\" for=\"select-all\"></label>\n                            </div>\n                        </div>\n                        <div class=\"form-group col-2 mb-n1\" style=\"display:none\" id=\"actions\">\n                            <span class=\"dropdown float-right mt-1\">\n                                <button class=\"btn btn-sm btn-light dropdown-toggle\" type=\"button\" id=\"bulk-action-menu-button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    @T[\"Actions\"]\n                                </button>\n                                <span class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"bulk-action-menu-button\">\n                                    @foreach (var item in Model.Options.WorkflowsBulkAction)\n                                    {\n                                        <a class=\"dropdown-item\" href=\"javascript:void(0)\" data-action=\"@item.Value\" data-title=\"@T[\"Bulk Action\"]\" data-message=\"@T[\"Are you sure you want to {0} these items?\", @item.Text.ToLower()]\">@item.Text</a>\n                                    }\n                                </span>\n                            </span>\n                        </div>\n                        <div class=\"form-group col mb-n1 filter\">\n                            <div class=\"btn-group float-right mt-1\">\n                                <select asp-for=\"Options.Filter\" asp-items=\"Model.Options.WorkflowsStatuses\" class=\"selectpicker show-tick mr-2\" data-header=\"@T[\"Filter by status\"]\" data-live-search=\"true\" data-selected-text-format=\"static\" data-dropdown-align-right=\"true\" data-width=\"fit\" title=\"@T[\"Status\"]\" data-style=\"btn-sm\">\n                                </select>\n                                <select asp-for=\"Options.OrderBy\" asp-items=\"@Model.Options.WorkflowsSorts\" class=\"selectpicker show-tick\" data-header=\"@T[\"Sort by\"]\" data-width=\"fit\" data-selected-text-format=\"static\" data-dropdown-align-right=\"true\" title=\"@T[\"Sort\"]\" data-style=\"btn-sm\"></select>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                @for (var i = 0; i < Model.Workflows.Count; i++)\n                {\n                    var entry = Model.Workflows[i];\n                    var statusCss = \"\";\n\n                    switch (entry.Workflow.Status)\n                    {\n                        case WorkflowStatus.Aborted:\n                            statusCss = \"warning\";\n                            break;\n                        case WorkflowStatus.Idle:\n                        default:\n                            statusCss = \"secondary\";\n                            break;\n                        case WorkflowStatus.Finished:\n                            statusCss = \"success\";\n                            break;\n                        case WorkflowStatus.Executing:\n                        case WorkflowStatus.Halted:\n                        case WorkflowStatus.Resuming:\n                        case WorkflowStatus.Starting:\n                            statusCss = \"info\";\n                            break;\n                        case WorkflowStatus.Faulted:\n                            statusCss = \"danger\";\n                            break;\n                    }\n\n                    <li class=\"list-group-item\">\n                        <div class=\"properties\">\n                            <div class=\"related\">\n                                <a asp-action=\"Delete\" asp-route-id=\"@entry.Workflow.Id\" class=\"btn btn-danger btn-sm\" data-message=\"@T[\"Are you sure you want to delete this workflow instance?\"]\" data-url-af=\"RemoveUrl UnsafeUrl\">@T[\"Delete\"]</a>\n                            </div>\n\n                            <div class=\"custom-control custom-checkbox float-left\">\n                                <input type=\"checkbox\" class=\"custom-control-input\" value=\"@entry.Workflow.Id\" name=\"itemIds\" id=\"itemIds-@entry.Workflow.Id\">\n                                <label class=\"custom-control-label\" for=\"itemIds-@entry.Workflow.Id\"></label>\n                            </div>\n                            <a asp-action=\"Details\" asp-route-id=\"@entry.Workflow.Id\">@entry.Workflow.WorkflowId</a>\n                            <div>\n                                <span class=\"hint\">@T[\"Created {0}\", (object)(await DisplayAsync(await New.TimeSpan(Utc: entry.Workflow.CreatedUtc)))]</span>\n                                <div class=\"info\">\n                                    <span class=\"badge badge-@statusCss\">\n                                        @T.GetLocalizedStatus(entry.Workflow.Status)\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                }\n            }\n            else\n            {\n                <li class=\"list-group-item\">\n                    <div class=\"alert alert-info mb-0\" role=\"alert\">\n                        @T[\"<strong>Nothing here!</strong> There are no halted workflows at the moment.\"]\n                    </div>\n                </li>\n            }\n        </ul>\n        @await DisplayAsync(Model.Pager)\n    </div>\n</form>\n\n<div class=\"form-group\">\n    <a class=\"btn btn-secondary\" href=\"@Model.ReturnUrl\">@T[\"Back\"]</a>\n</div>\n\n<script at=\"Foot\">\n    $(function () {\n        $('.selectpicker').selectpicker();\n\n        var actions = $(\"#actions\");\n        var items = $(\"#items\");\n        var filters = $(\".filter\");\n        var selectAllCtrl = $(\"#select-all\");\n        var selectedItems = $(\"#selected-items\");\n        var itemsCheckboxes = $(\":checkbox[name='itemIds']\");\n\n        $(\".filter-options input\").on(\"change\", function () {\n            $(\"[name='submit.Filter']\").click();\n        });\n\n        $('.selectpicker').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {\n            $(\"[name='submit.Filter']\").click();\n        });\n\n        $(\".dropdown-menu .dropdown-item\").filter(function() {\n            return $(this).data(\"action\");\n        }).on(\"click\", function () {\n            if ($(\":checkbox[name='itemIds']:checked\").length > 1) {\n                var $this = $(this);\n                confirmDialog({title: $this.data('title'), message: $this.data('message'), callback: function(r) {\n                    if (r) {\n                        $(\"[name='Options.BulkAction']\").val($this.data(\"action\"));\n                        $(\"[name='submit.BulkAction']\").click();\n                    }\n                }});\n            }\n        });\n\n        function displayActionsOrFilters() {\n            if ($(\":checkbox[name='itemIds']:checked\").length > 1) {\n                actions.show();\n                filters.hide();\n                selectedItems.show();\n                items.hide();\n            }\n            else {\n                actions.hide();\n                filters.show();\n                selectedItems.hide();\n                items.show();\n            }\n        }\n\n        selectAllCtrl.click(function(){\n            itemsCheckboxes.not(this).prop(\"checked\", this.checked);\n            selectedItems.text($(\":checkbox[name='itemIds']:checked\").length + ' @T[\"selected\"]');\n            displayActionsOrFilters();\n        });\n\n        itemsCheckboxes.on(\"click\", function () {\n            var itemsCount = $(\":checkbox[name='itemIds']\").length;\n            var selectedItemsCount = $(\":checkbox[name='itemIds']:checked\").length;\n\n            selectAllCtrl.prop(\"checked\", selectedItemsCount == itemsCount);\n            selectAllCtrl.prop(\"indeterminate\", selectedItemsCount > 0 && selectedItemsCount < itemsCount);\n\n            selectedItems.text(selectedItemsCount + ' @T[\"selected\"]');\n            displayActionsOrFilters();\n        });\n    });\n</script>\n", "using System;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing OrchardCore.Entities;\nusing OrchardCore.Workflows.Activities;\nusing OrchardCore.Workflows.Models;\n\nnamespace OrchardCore.Workflows.Helpers\n{\n    public static class ActivityExtensions\n    {\n        public static bool IsEvent(this IActivity activity)\n        {\n            return activity is IEvent;\n        }\n\n        public static LocalizedHtmlString GetTitleOrDefault(this IActivity activity, Func<LocalizedHtmlString> defaultTitle)\n        {\n            var title = activity.As<ActivityMetadata>().Title;\n\n            // A string used in LocalizedHtmlString won't be encoded so it needs to be pre-encoded.\n            // Passing the title as an argument so it uses the HtmlEncoder when rendered\n            // Another options would be to use new LocalizedHtmlString(Html.Encode(title)) but it's not available in the current context\n\n            return !string.IsNullOrEmpty(title) ? new LocalizedHtmlString(nameof(ActivityExtensions.GetTitleOrDefault), \"{0}\", false, title) : defaultTitle();\n        }\n\n        public static LocalizedHtmlString GetLocalizedStatus(this IHtmlLocalizer H, WorkflowStatus status)\n        {\n            return status switch\n            {\n                WorkflowStatus.Aborted => H[\"Aborted\"],\n                WorkflowStatus.Executing => H[\"Executing\"],\n                WorkflowStatus.Faulted => H[\"Faulted\"],\n                WorkflowStatus.Finished => H[\"Finished\"],\n                WorkflowStatus.Halted => H[\"Halted\"],\n                WorkflowStatus.Idle => H[\"Idle\"],\n                WorkflowStatus.Resuming => H[\"Resuming\"],\n                WorkflowStatus.Starting => H[\"Starting\"],\n                _ => throw new NotSupportedException(),\n            };\n        }\n    }\n}\n"], "filenames": ["src/OrchardCore.Modules/OrchardCore.ContentFields/Drivers/LinkFieldDisplayDriver.cs", "src/OrchardCore.Modules/OrchardCore.Contents/AuditTrail/Controllers/AuditTrailContentController.cs", "src/OrchardCore.Modules/OrchardCore.Menu/Drivers/HtmlMenuItemPartDisplayDriver.cs", "src/OrchardCore.Modules/OrchardCore.Menu/Drivers/LinkMenuItemPartDisplayDriver.cs", "src/OrchardCore.Modules/OrchardCore.Users/Workflows/Activities/RegisterUserTask.cs", "src/OrchardCore.Modules/OrchardCore.Workflows/Activities/NotifyTask.cs", "src/OrchardCore.Modules/OrchardCore.Workflows/Views/Items/UserTaskEvent.Fields.Design.cshtml", "src/OrchardCore.Modules/OrchardCore.Workflows/Views/Workflow/Details.cshtml", "src/OrchardCore.Modules/OrchardCore.Workflows/Views/Workflow/Index.cshtml", "src/OrchardCore/OrchardCore.Workflows.Abstractions/Helpers/ActivityExtensions.cs"], "buggy_code_start_loc": [1, 113, 0, 0, 137, 57, 11, 47, 107, 11], "buggy_code_end_loc": [107, 120, 64, 52, 146, 57, 12, 48, 108, 40], "fixing_code_start_loc": [2, 114, 1, 1, 136, 58, 11, 47, 107, 10], "fixing_code_end_loc": [120, 123, 113, 110, 145, 60, 12, 48, 108, 40], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in NuGet OrchardCore.Application.Cms.Targets prior to 1.2.2.", "other": {"cve": {"id": "CVE-2022-0243", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-19T20:15:07.443", "lastModified": "2022-01-25T14:49:28.687", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in NuGet OrchardCore.Application.Cms.Targets prior to 1.2.2."}, {"lang": "es", "value": "Cross-site Scripting (XSS) - Almacenado en NuGet OrchardCore.Application.Cms.Targets versiones anteriores a 1.2.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:orchardcore:orchardcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.2", "matchCriteriaId": "5F5FC8A3-11C3-4539-82A5-E00F7855B9E5"}]}]}], "references": [{"url": "https://github.com/orchardcms/orchardcore/commit/218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/fa538421-ae55-4288-928f-4e96aaed5803", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/orchardcms/orchardcore/commit/218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4"}}