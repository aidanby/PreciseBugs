{"buggy_code": ["package io.onedev.server.web.resource;\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\n\nimport javax.persistence.EntityNotFoundException;\n\nimport org.apache.shiro.authz.UnauthorizedException;\nimport org.apache.tika.io.IOUtils;\nimport org.apache.wicket.request.mapper.parameter.PageParameters;\nimport org.apache.wicket.request.resource.AbstractResource;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Splitter;\n\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.LockUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.BuildManager;\nimport io.onedev.server.entitymanager.ProjectManager;\nimport io.onedev.server.model.Build;\nimport io.onedev.server.model.Project;\nimport io.onedev.server.security.SecurityUtils;\nimport io.onedev.server.util.ContentDetector;\n\npublic class ArtifactResource extends AbstractResource {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tprivate static final String PARAM_PROJECT = \"project\";\n\n\tprivate static final String PARAM_BUILD = \"build\";\n\n\t@Override\n\tprotected ResourceResponse newResourceResponse(Attributes attributes) {\n\t\tPageParameters params = attributes.getParameters();\n\n\t\tLong projectId = params.get(PARAM_PROJECT).toLong();\n\t\tProject project = OneDev.getInstance(ProjectManager.class).load(projectId);\n\t\t\n\t\tLong buildNumber = params.get(PARAM_BUILD).toOptionalLong();\n\t\t\n\t\tif (buildNumber == null)\n\t\t\tthrow new IllegalArgumentException(\"build number has to be specified\");\n\t\t\n\t\tBuild build = OneDev.getInstance(BuildManager.class).find(project, buildNumber);\n\n\t\tif (build == null) {\n\t\t\tString message = String.format(\"Unable to find build (project: %s, build number: %d)\", \n\t\t\t\t\tproject.getPath(), buildNumber);\n\t\t\tthrow new EntityNotFoundException(message);\n\t\t}\n\t\t\n\t\tif (!SecurityUtils.canAccess(build))\n\t\t\tthrow new UnauthorizedException();\n\t\t\n\t\tList<String> pathSegments = new ArrayList<>();\n\n\t\tfor (int i = 0; i < params.getIndexedCount(); i++) {\n\t\t\tString pathSegment = params.get(i).toString();\n\t\t\tif (pathSegment.length() != 0)\n\t\t\t\tpathSegments.add(pathSegment);\n\t\t}\n\t\t\n\t\tif (pathSegments.isEmpty())\n\t\t\tthrow new ExplicitException(\"Artifact path has to be specified\");\n\t\t\n\t\tString artifactPath = Joiner.on(\"/\").join(pathSegments);\n\t\t\n\t\tFile artifactsDir = build.getArtifactsDir();\n\t\tFile artifactFile = new File(artifactsDir, artifactPath);\n\t\tif (!artifactFile.exists() || artifactFile.isDirectory()) {\n\t\t\tString message = String.format(\"Specified artifact path does not exist or is a directory (project: %s, build number: %d, path: %s)\", \n\t\t\t\t\tproject.getPath(), build.getNumber(), artifactPath);\n\t\t\tthrow new ExplicitException(message);\n\t\t}\n\t\t\t\n\t\tResourceResponse response = new ResourceResponse();\n\t\ttry (InputStream is = new BufferedInputStream(new FileInputStream(artifactFile))) {\n\t\t\tresponse.setContentType(ContentDetector.detectMediaType(is, artifactPath).toString());\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t\tresponse.disableCaching();\n\t\t\n\t\ttry {\n\t\t\tresponse.setFileName(URLEncoder.encode(artifactFile.getName(), StandardCharsets.UTF_8.name()));\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t\tresponse.setContentLength(artifactFile.length());\n\t\t\n\t\tresponse.setWriteCallback(new WriteCallback() {\n\n\t\t\t@Override\n\t\t\tpublic void writeData(Attributes attributes) throws IOException {\n\t\t\t\tLockUtils.read(build.getArtifactsLockKey(), new Callable<Void>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\t\ttry (InputStream is = new FileInputStream(artifactFile)) {\n\t\t\t\t\t\t\tIOUtils.copy(is, attributes.getResponse().getOutputStream());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t}\t\t\t\n\t\t\t\n\t\t});\n\n\t\treturn response;\n\t}\n\n\tpublic static PageParameters paramsOf(Project project, Long buildNumber, String path) {\n\t\tPageParameters params = new PageParameters();\n\t\tparams.set(PARAM_PROJECT, project.getId());\n\t\tparams.set(PARAM_BUILD, buildNumber);\n\t\t\n\t\tint index = 0;\n\t\tfor (String segment: Splitter.on(\"/\").split(path)) {\n\t\t\tparams.set(index, segment);\n\t\t\tindex++;\n\t\t}\n\t\treturn params;\n\t}\n\n}\n"], "fixing_code": ["package io.onedev.server.web.resource;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\n\nimport javax.persistence.EntityNotFoundException;\n\nimport org.apache.shiro.authz.UnauthorizedException;\nimport org.apache.tika.io.IOUtils;\nimport org.apache.tika.mime.MimeTypes;\nimport org.apache.wicket.request.mapper.parameter.PageParameters;\nimport org.apache.wicket.request.resource.AbstractResource;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Splitter;\n\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.LockUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.BuildManager;\nimport io.onedev.server.entitymanager.ProjectManager;\nimport io.onedev.server.model.Build;\nimport io.onedev.server.model.Project;\nimport io.onedev.server.security.SecurityUtils;\n\npublic class ArtifactResource extends AbstractResource {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tprivate static final String PARAM_PROJECT = \"project\";\n\n\tprivate static final String PARAM_BUILD = \"build\";\n\n\t@Override\n\tprotected ResourceResponse newResourceResponse(Attributes attributes) {\n\t\tPageParameters params = attributes.getParameters();\n\n\t\tLong projectId = params.get(PARAM_PROJECT).toLong();\n\t\tProject project = OneDev.getInstance(ProjectManager.class).load(projectId);\n\t\t\n\t\tLong buildNumber = params.get(PARAM_BUILD).toOptionalLong();\n\t\t\n\t\tif (buildNumber == null)\n\t\t\tthrow new IllegalArgumentException(\"build number has to be specified\");\n\t\t\n\t\tBuild build = OneDev.getInstance(BuildManager.class).find(project, buildNumber);\n\n\t\tif (build == null) {\n\t\t\tString message = String.format(\"Unable to find build (project: %s, build number: %d)\", \n\t\t\t\t\tproject.getPath(), buildNumber);\n\t\t\tthrow new EntityNotFoundException(message);\n\t\t}\n\t\t\n\t\tif (!SecurityUtils.canAccess(build))\n\t\t\tthrow new UnauthorizedException();\n\t\t\n\t\tList<String> pathSegments = new ArrayList<>();\n\n\t\tfor (int i = 0; i < params.getIndexedCount(); i++) {\n\t\t\tString pathSegment = params.get(i).toString();\n\t\t\tif (pathSegment.length() != 0)\n\t\t\t\tpathSegments.add(pathSegment);\n\t\t}\n\t\t\n\t\tif (pathSegments.isEmpty())\n\t\t\tthrow new ExplicitException(\"Artifact path has to be specified\");\n\t\t\n\t\tString artifactPath = Joiner.on(\"/\").join(pathSegments);\n\t\t\n\t\tFile artifactsDir = build.getArtifactsDir();\n\t\tFile artifactFile = new File(artifactsDir, artifactPath);\n\t\tif (!artifactFile.exists() || artifactFile.isDirectory()) {\n\t\t\tString message = String.format(\"Specified artifact path does not exist or is a directory (project: %s, build number: %d, path: %s)\", \n\t\t\t\t\tproject.getPath(), build.getNumber(), artifactPath);\n\t\t\tthrow new ExplicitException(message);\n\t\t}\n\t\t\t\n\t\tResourceResponse response = new ResourceResponse();\n\t\tresponse.getHeaders().addHeader(\"X-Content-Type-Options\", \"nosniff\");\n\t\tresponse.setContentType(MimeTypes.OCTET_STREAM);\n\t\tresponse.disableCaching();\n\t\t\n\t\ttry {\n\t\t\tresponse.setFileName(URLEncoder.encode(artifactFile.getName(), StandardCharsets.UTF_8.name()));\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tresponse.setContentLength(artifactFile.length());\n\t\t\n\t\tresponse.setWriteCallback(new WriteCallback() {\n\n\t\t\t@Override\n\t\t\tpublic void writeData(Attributes attributes) throws IOException {\n\t\t\t\tLockUtils.read(build.getArtifactsLockKey(), new Callable<Void>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Void call() throws Exception {\n\t\t\t\t\t\ttry (InputStream is = new FileInputStream(artifactFile)) {\n\t\t\t\t\t\t\tIOUtils.copy(is, attributes.getResponse().getOutputStream());\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t}\t\t\t\n\t\t\t\n\t\t});\n\n\t\treturn response;\n\t}\n\n\tpublic static PageParameters paramsOf(Project project, Long buildNumber, String path) {\n\t\tPageParameters params = new PageParameters();\n\t\tparams.set(PARAM_PROJECT, project.getId());\n\t\tparams.set(PARAM_BUILD, buildNumber);\n\t\t\n\t\tint index = 0;\n\t\tfor (String segment: Splitter.on(\"/\").split(path)) {\n\t\t\tparams.set(index, segment);\n\t\t\tindex++;\n\t\t}\n\t\treturn params;\n\t}\n\n}\n"], "filenames": ["server-core/src/main/java/io/onedev/server/web/resource/ArtifactResource.java"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [102], "fixing_code_start_loc": [2], "fixing_code_end_loc": [95], "type": "CWE-79", "message": "Onedev is an open source, self-hosted Git Server with CI/CD and Kanban. During CI/CD builds, it is possible to save build artifacts for later retrieval. They can be accessed through OneDev's web UI after the successful run of a build. These artifact files are served by the webserver in the same context as the UI without any further restrictions. This leads to Cross-Site Scripting (XSS) when a user creates a build artifact that contains HTML. When accessing the artifact, the content is rendered by the browser, including any JavaScript that it contains. Since all cookies (except for the rememberMe one) do not set the HttpOnly flag, an attacker could steal the session of a victim and use it to impersonate them. To exploit this issue, attackers need to be able to modify the content of artifacts, which usually means they need to be able to modify a project's build spec. The exploitation requires the victim to click on an attacker's link. It can be used to elevate privileges by targeting admins of a OneDev instance. In the worst case, this can lead to arbitrary code execution on the server, because admins can create Server Shell Executors and use them to run any command on the server. This issue has been patched in version 7.3.0. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-39207", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-13T19:15:13.223", "lastModified": "2022-10-01T02:17:41.407", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Onedev is an open source, self-hosted Git Server with CI/CD and Kanban. During CI/CD builds, it is possible to save build artifacts for later retrieval. They can be accessed through OneDev's web UI after the successful run of a build. These artifact files are served by the webserver in the same context as the UI without any further restrictions. This leads to Cross-Site Scripting (XSS) when a user creates a build artifact that contains HTML. When accessing the artifact, the content is rendered by the browser, including any JavaScript that it contains. Since all cookies (except for the rememberMe one) do not set the HttpOnly flag, an attacker could steal the session of a victim and use it to impersonate them. To exploit this issue, attackers need to be able to modify the content of artifacts, which usually means they need to be able to modify a project's build spec. The exploitation requires the victim to click on an attacker's link. It can be used to elevate privileges by targeting admins of a OneDev instance. In the worst case, this can lead to arbitrary code execution on the server, because admins can create Server Shell Executors and use them to run any command on the server. This issue has been patched in version 7.3.0. Users are advised to upgrade. There are no known workarounds for this issue."}, {"lang": "es", "value": "Onedev es un servidor Git de c\u00f3digo abierto, auto-alojado con CI/CD y Kanban. Durante las construcciones CI/CD, es posible guardar los artefactos de construcci\u00f3n para su posterior recuperaci\u00f3n. Puede accederse a ellos mediante la interfaz web de OneDev despu\u00e9s de una ejecuci\u00f3n con \u00e9xito de una construcci\u00f3n. Estos archivos de artefactos son servidos por el servidor web en el mismo contexto que la Interfaz de Usuario sin m\u00e1s restricciones. Esto conlleva a un ataque de tipo Cross-Site Scripting (XSS) cuando un usuario crea un artefacto de construcci\u00f3n que contiene HTML. Cuando es accedido al artefacto, el contenido es renderizado por el navegador, incluyendo cualquier JavaScript que contenga. Como todas las cookies (excepto la de RememberMe) no establecen el flag HttpOnly, un atacante podr\u00eda robar la sesi\u00f3n de una v\u00edctima y usarla para suplantar su identidad. Para explotar este problema, los atacantes deben ser capaces de modificar el contenido de los artefactos, lo que normalmente significa que deben ser capaces de modificar las especificaciones de construcci\u00f3n de un proyecto. La explotaci\u00f3n requiere que la v\u00edctima haga clic en un enlace del atacante. Puede usarse para elevar los privilegios al dirigirse a administradores de una instancia de OneDev. En el peor de los casos, esto puede conllevar a una ejecuci\u00f3n de c\u00f3digo arbitrario en el servidor, ya que los administradores pueden crear ejecutores de shell de servidor y usarlos para ejecutar cualquier comando en el servidor. Este problema ha sido parcheado en versi\u00f3n 7.3.0. Es recomendado a usuarios actualizar. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:onedev_project:onedev:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.3.0", "matchCriteriaId": "EC376576-D05E-4FBF-8E5E-CB81C3965142"}]}]}], "references": [{"url": "https://blog.sonarsource.com/onedev-remote-code-execution/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/theonedev/onedev/commit/adb6e31476621f824fc3227a695232df830d83ab", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/theonedev/onedev/security/advisories/GHSA-27fw-gv88-qrpg", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/theonedev/onedev/commit/adb6e31476621f824fc3227a695232df830d83ab"}}