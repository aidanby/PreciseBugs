{"buggy_code": ["<?php\n/*\n * Copyright (C) 2007-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2018 delcroip <patrick@pmpd.eu>\n * Copyright (C) ---Put here your own copyright and developer email---\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *        \\file       dev/attendanceevents/attendanceevent_page.php\n *                \\ingroup    timesheet othermodule1 othermodule2\n *                \\brief      This file is an example of a php page\n *                                        Initialy built by build_class_from_table on 2018-11-05 20:22\n */\n/// Change this following line to use the correct relative path (../, ../../, etc)\ninclude './core/lib/includeMain.lib.php';\n// Change this following line to use the correct relative path from htdocs\n//include_once(DOL_DOCUMENT_ROOT.'/core/class/formcompany.class.php');\n//require_once 'lib/timesheet.lib.php';\nrequire_once 'class/AttendanceEvent.class.php';\nrequire_once 'core/lib/generic.lib.php';\n//require_once 'core/lib/attendanceevent.lib.php';\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n//document handling\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n//include_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formprojet.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\n$admin = $user->rights->timesheet->attendance->admin || $user->admin;\nif (!$admin) {\n    $accessforbidden = accessforbidden(\"You don't have the attendance admin right\");\n}\n//require_once DOL_DOCUMENT_ROOT.'/projet/class/projet.class.php';\n$PHP_SELF = $_SERVER['PHP_SELF'];\n// Load traductions files requiredby by page\n//$langs->load(\"companies\");\n//$langs->load(\"attendance@timesheet\");\n// Get parameter\n$id = GETPOST('id', 'int');\n$ref = GETPOST('ref', 'alpha');\n$action = GETPOST('action', 'alpha');\n$backtopage = GETPOST('backtopage');\n$cancel = GETPOST('cancel');\n$confirm = GETPOST('confirm');\n$token = GETPOST('token', 'alpha');\n//// Get parameters\n$sortfield = GETPOST('sortfield', 'alpha');\n$sortorder = GETPOST('sortorder', 'alpha')?GETPOST('sortorder', 'alpha'):'ASC';\n$removefilter = isset($_POST[\"removefilter_x\"]) || isset($_POST[\"removefilter\"]);\n//$applyfilter = isset($_POST[\"search_x\"]) ;//|| isset($_POST[\"search\"]);\nif (!$removefilter) {\n// Both test must be present to be compatible with all browsers {\n    $ls_date_time_event_month = GETPOST('ls_date_time_event_month', 'int');\n    $ls_date_time_event_year = GETPOST('ls_date_time_event_year', 'int');\n    $ls_event_location_ref = GETPOST('ls_event_location_ref', 'alpha');\n    $ls_event_type = GETPOST('ls_event_type', 'int');\n    $ls_note = GETPOST('ls_note', 'alpha');\n    $ls_userid = GETPOST('ls_userid', 'int');\n    if ($ls_userid == -1)$ls_userid = '';\n    $ls_third_party = GETPOST('ls_third_party', 'int');\n    $ls_task = GETPOST('ls_task', 'int');\n    $ls_project = GETPOST('ls_project', 'int');\n    $ls_token = GETPOST('ls_token', 'int');\n\n}\n$page = GETPOST('page', 'int');\nif ($page <= 0){\n    $page = 0;\n}\n$limit = GETPOST('limit', 'int')?GETPOST('limit', 'int'):$conf->liste_limit;\n$offset = $limit * $page;\n$pageprev = $page - 1;\n$pagenext = $page + 1;\n // uncomment to avoid resubmision\n//if (isset($_SESSION['attendanceevent_class'][$token]))\n//{\n //   $cancel = true;\n //  setEventMessages('Internal error, POST not exptected', null, 'errors');\n//}\n// Right Management\n /*\nif ($user->societe_id > 0 ||\n       (!$user->rights->timesheet->add && ($action == 'add' || $action = 'create')) ||\n       (!$user->rights->timesheet->view && ($action == 'list' || $action = 'view')) ||\n       (!$user->rights->timesheet->delete && ($action == 'confirm_delete')) ||\n       (!$user->rights->timesheet->edit && ($action == 'edit' || $action = 'update')))\n{\n        accessforbidden();\n}\n*/\n// create object and set id or ref if provided as parameter\n$object = new Attendanceevent($db, $user);\nif ($id>0) {\n    $object->id = $id;\n    $object->fetch($id);\n    $ref = dol_sanitizeFileName($object->ref);\n}\n$form = new Form($db);\n/*******************************************************************\n* ACTIONS\n*\n* Put here all code to do according to value of \"action\" parameter\n********************************************************************/\n// Action to remove record\nswitch($action) {\n    case 'confirm_delete':\n        $result = ($confirm == 'yes')?$object->delete($user):0;\n        if ($result > 0) {\n            // Delete OK\n            setEventMessage($langs->trans('RecordDeleted'), 'mesgs');\n        } else {\n            // Delete NOK\n            if (! empty($object->errors)){\n                setEventMessages(null, $object->errors, 'errors');\n            } else setEventMessage('RecordNotDeleted', 'errors');\n        }\n        break;\n    case 'add':\n        if (empty($token) || (!isset($_SESSION['Attendanceevent'][$token]))) {\n            setEventMessage('WrongTimeStamp_requestNotExpected', 'errors');\n            $action = 'list';\n        }\n    //retrive the data\n        $time = explode(':', GETPOST('DatetimeeventHour'));\n        $object->date_time_event = dol_mktime($time[0], $time[1], 0, \n            GETPOST('Datetimeeventmonth'), \n            GETPOST('Datetimeeventday'), GETPOST('Datetimeeventyear'));\n        $object->event_location_ref = GETPOST('Eventlocationref');\n        $object->event_type = GETPOST('Eventtype');\n        $object->note = GETPOST('Note');\n        $object->userid = GETPOST('Userid');\n        $object->third_party = GETPOST('Thirdparty');\n        $object->task = GETPOST('Task');\n        $object->project = GETPOST('Project');\n        $object->token = GETPOST('Token');\n        $result = $object->create($user);\n        if ($result > 0) {\n                // Creation OK\n            // remove the token\n               if ($ajax == 1) {\n                   $object->serialize(2); //return JSON\n                    ob_end_flush();\n                    exit();// don't remove the token. don't continue with the\n               }\n                   unset($_SESSION['Attendanceevent'][$token]);\n               setEventMessage('RecordSucessfullyCreated', 'mesgs');\n               //AttendanceeventReloadPage($backtopage, $result, '');\n        } else {\n                // Creation KO\n                if (! empty($object->errors)) setEventMessages(null, $object->errors, 'errors');\n                else  setEventMessage('RecordNotSucessfullyCreated', 'errors');\n                $action = 'create';\n        }\n    break;\n}\n    //Removing the token array so the order can't be submitted two times\nif (isset($_SESSION['Attendanceevent'][$token])) {\n    unset($_SESSION['Attendanceevent'][$token]);\n}\n    $token = getToken();\n    $_SESSION['Attendanceevent'][$token] = array();\n    $_SESSION['Attendanceevent'][$token]['action'] = $action;\n/***************************************************\n* VIEW\n*\n* Put here all code to build page\n****************************************************/\n$morejs = array(\"/timesheet/core/js/jsparameters.php\", \"/timesheet/core/js/timesheet.js?\"\n    .$conf->global->TIMESHEET_VERSION);\nllxHeader('', $langs->trans('AttendanceAdmin'), '', '', '', '', $morejs);\nprint \"<div> <!-- module body-->\";\n$form = new Form($db);\n$formother = new FormOther($db);\n$formproject = new FormProjets($db);\n$fuser = new User($db);\n        if ($action == 'delete' && ($id>0)) {\n         print $form->form_confirm(dol_buildpath('/timesheet/AttendanceEventAdmin.php', 1)\n            .'?action=confirm_delete&id='.$id, $langs->trans('DeleteAttendanceevent'), \n                $langs->trans('ConfirmDelete'), 'confirm_delete', '', 0, 1);\n         //if ($ret == 'html') print '<br />';\n         //to have the object to be deleted in the background\\\n        }\n// Put here content of your page\n// Example : Adding jquery code\n/*print '<script type = \"text/javascript\" language = \"javascript\">\njQuery(document).ready(function()\n{\n        function init_myfunc()\n        {\n                jQuery(\"#myid\").removeAttr(\\'disabled\\');\n                jQuery(\"#myid\").attr(\\'disabled\\', \\'disabled\\');\n        }\n        init_myfunc();\n        jQuery(\"#mybutton\").click(function()\n{\n                init_needroot();\n        });\n});\n</script>';*/\n    $sql = 'SELECT';\n    $sql .= ' t.rowid, ';\n    $sql .= ' t.date_time_event, ';\n    $sql .= ' t.event_location_ref, ';\n    $sql .= ' t.event_type, ';\n    $sql .= ' t.note, ';\n    $sql .= ' t.fk_userid, ';\n    $sql .= ' t.fk_third_party, ';\n    $sql .= ' t.fk_task, ';\n    $sql .= ' t.fk_project, ';\n    $sql .= ' t.token, ';\n    $sql .= '  st.date_time_event  as date_time_event_start ';\n    $sql .= ' FROM '.MAIN_DB_PREFIX.'attendance_event as t';\n    $sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"attendance_event as st ON t.token = st.token AND ABS(st.event_type)=2\";\n\n    $sqlwhere = '';\n    if (isset($object->entity))\n        $sqlwhere .= ' AND t.entity = '.$conf->entity;\n    if ($filter && $filter != -1) {\n        // GETPOST('filtre') may be a string {\n            $filtrearr = explode(', ', $filter);\n            foreach ($filtrearr as $fil) {\n                    $filt = explode(':', $fil);\n                    $sqlwhere .= ' AND ' . $filt[0] . ' = ' . $filt[1];\n            }\n    }\n    //pass the search criteria\n        if ($ls_date_time_event_month)\n            $sqlwhere .= ' AND MONTH(t.date_time_event) = \"'.$ls_date_time_event_month.\"'\";\n        if ($ls_date_time_event_year)\n            $sqlwhere .= ' AND YEAR(t.date_time_event) = \"'.$ls_date_time_event_year.\"'\";\n        if ($ls_event_location_ref) \n            $sqlwhere .= natural_search('t.event_location_ref', $ls_event_location_ref);\n        if ($ls_event_type) \n            $sqlwhere .= natural_search(array('t.event_type'), $ls_event_type);\n        if ($ls_note) \n            $sqlwhere .= natural_search('t.note', $ls_note);\n        if ($ls_userid) \n            $sqlwhere .= natural_search(array('t.fk_userid'), $ls_userid);\n        if ($ls_third_party) \n            $sqlwhere .= natural_search(array('t.fk_third_party'), $ls_third_party);\n        if ($ls_task) \n            $sqlwhere .= natural_search(array('t.fk_task'), $ls_task);\n        if ($ls_project) \n            $sqlwhere .= natural_search(array('t.fk_project'), $ls_project);\n        if ($ls_token) \n            $sqlwhere .= natural_search(array('t.token'), $ls_token);\n\n    //list limit\n    if (!empty($sqlwhere))\n        $sql .= ' WHERE '.substr($sqlwhere, 5);\n// Count total nb of records\n$nbtotalofrecords = 0;\nif (empty($conf->global->MAIN_DISABLE_FULL_SCANLIST)) {\n        $sqlcount = 'SELECT COUNT(*) as count FROM '.MAIN_DB_PREFIX.'attendance_event as t';\n        if (!empty($sqlwhere))\n            $sqlcount .= ' WHERE '.substr($sqlwhere, 5);\n        $result = $db->query($sqlcount);\n        $nbtotalofrecords = ($result)?$objcount = $db->fetch_object($result)->count:0;\n}\n    if (!empty($sortfield)) {\n        $sql .= $db->order($sortfield, $sortorder);\n    } else{\n       $sql .= ' ORDER BY t.date_time_event DESC';\n    }\n    if (!empty($limit)) {\n            $sql .= $db->plimit($limit+1, $offset);\n    }\n    //execute SQL\n    dol_syslog($script_file, LOG_DEBUG);\n    $resql = $db->query($sql);\n    if ($resql) {\n        $param = '';\n        if (! empty($contextpage) && $contextpage != $_SERVER[\"PHP_SELF\"]) \n            $param .= '&contextpage='.urlencode($contextpage);\n        if ($limit > 0 && $limit != $conf->liste_limit) \n            $param .= '&limit='.urlencode($limit);\n        if (!empty($ls_date_time_event_month))        \n            $param .= '&ls_date_time_event_month='.urlencode($ls_date_time_event_month);\n        if (!empty($ls_date_time_event_year))        \n            $param .= '&ls_date_time_event_year='.urlencode($ls_date_time_event_year);\n        if (!empty($ls_event_location_ref))        \n            $param .= '&ls_event_location_ref='.urlencode($ls_event_location_ref);\n        if (!empty($ls_event_type))        \n            $param .= '&ls_event_type='.urlencode($ls_event_type);\n        if (!empty($ls_note))        \n            $param .= '&ls_note='.urlencode($ls_note);\n        if (!empty($ls_userid))        \n            $param .= '&ls_userid='.urlencode($ls_userid);\n        if (!empty($ls_third_party))        \n            $param .= '&ls_third_party='.urlencode($ls_third_party);\n        if (!empty($ls_task))        \n            $param .= '&ls_task='.urlencode($ls_task);\n        if (!empty($ls_project))        \n            $param .= '&ls_project='.urlencode($ls_project);\n        if (!empty($ls_token))        \n            $param .= '&ls_token='.urlencode($ls_token);\n        if ($filter && $filter != -1) \n            $param .= '&filtre='.urlencode($filter);\n        $num = $db->num_rows($resql);\n        //print_barre_liste function defined in /core/lib/function.lib.php, possible to add a picto\n        print_barre_liste($langs->trans(\"Attendance\"), $page, $PHP_SELF, $param, $sortfield, $sortorder, '', $num, $nbtotalofrecords);\n        // QUICK FOR TO ADD A LINE\n        print '<form method = \"POST\" action=\"?action=add\">';\n        print '<table class = \"liste\" width = \"100%\">'.\"\\n\";\n        //TITLE ADD\n        print '<tr class = \"liste_titre\">';\n         print_liste_field_titre('Date', $PHP_SELF, 't.date_time_event', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Eventlocationref', $PHP_SELF, 't.event_location_ref', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Eventtype', $PHP_SELF, 't.event_type', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Note', $PHP_SELF, 't.note', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('User', $PHP_SELF, 't.fk_userid', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('ThirdParty', $PHP_SELF, 't.fk_third_party', '', $param, '', $sortfield, $sortorder);// fix translation\n        print \"\\n\";\n        print_liste_field_titre('Task', $PHP_SELF, 't.fk_task', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Project', $PHP_SELF, 't.fk_project', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Token', $PHP_SELF, 't.token', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print '</tr>';\n        //add\n        print '<tr><td>';\n        print '<input type=\"hidden\" id=\"csrf-token\" name=\"token\" value=\"'.$token.'\">';\n        print $form->select_date(time(), 'Datetimeevent');\n        print '<input type = \"text\" maxlength = \"5\" onkeypress = \"return regexEvent(this,event,\\'timeChar\\')\"'\n            .' name = \"DatetimeeventHour\" value = \"'.date('H:m').'\"/>';\n        print '</td><td>';\n        print '<input type = \"text\" value = \"'.$object->event_location_ref.'\" name = \"Eventlocationref\">';\n        print '</td><td>';\n        print $form->selectarray('Eventtype', $attendanceeventStatusArray, 2);\n        print '</td><td>';\n        print '<input type = \"text\" value = \"'.$object->note.'\" name = \"Note\">';\n        print '</td><td>';\n        if (empty($object->userid))$object->userid = $user->id;\n        print $form->select_dolusers($object->userid, 'Userid', 1, '', 0);\n        print '</td><td>';\n        $selected = $object->third_party;\n        $htmlname = 'Thirdparty';\n        print $form->select_company($selected, $htmlname, '', 1);\n        print '</td><td>';\n        $selected = $object->task;\n        $htmlname = 'Task';\n        $formproject->selectTasks(-1, $selected, $htmlname);\n        print '</td><td>';\n        $selected = $object->project;\n        $htmlname = 'Project';\n        $formproject->select_projects(-1, $selected, $htmlname);\n        print '</td><td>';\n        print '</td><td>';\n        print '<input type = \"submit\" value = \"'.$langs->trans('add').'\" \">';\n        print '</td></tr></table></form>';\n        print '<form method = \"POST\" action = \"\">';\n        print '<table class = \"liste\" width = \"100%\">'.\"\\n\";\n                //TITLE\n        print '<tr class = \"liste_titre\">';\n         print_liste_field_titre('Date', $PHP_SELF, 't.date_time_event', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Eventlocationref', $PHP_SELF, 't.event_location_ref', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Eventtype', $PHP_SELF, 't.event_type', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Note', $PHP_SELF, 't.note', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('User', $PHP_SELF, 't.fk_userid', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Thirdparty', $PHP_SELF, 't.fk_third_party', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Task', $PHP_SELF, 't.fk_task', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Project', $PHP_SELF, 't.fk_project', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Tocken', $PHP_SELF, 't.token', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Duration', '', '', '', '', '', '', '');\n        print \"<th></th>\\n\";\n        print '</tr>';\n        //SEARCH FIELDS\n        print '<tr class = \"liste_titre\">';\n        //Search field fordate_time_event\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        print '<input class = \"flat\" type = \"text\" size = \"1\" maxlength = \"2\" name = \"date_time_event_month\" value = \"'\n            .$ls_date_time_event_month.'\">';\n        $syear = $ls_date_time_event_year;\n        $formother->select_year($syear?$syear:-1, 'ls_date_time_event_year', 1, 20, 5);\n        print '</td>';\n//Search field forevent_location_ref\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        print '<input class = \"flat\" size = \"16\" type = \"text\" name = \"ls_event_location_ref\" value = \"'.$ls_event_location_ref.'\">';\n        print '</td>';\n//Search field forevent_type\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        print '<input class = \"flat\" size = \"16\" type = \"text\" name = \"ls_event_type\" value = \"'.$ls_event_type.'\">';\n        print '</td>';\n//Search field fornote\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        print '<input class = \"flat\" size = \"16\" type = \"text\" name = \"ls_note\" value = \"'.$ls_note.'\">';\n        print '</td>';\n//Search field foruserid\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n                print $form->select_dolusers('userid', $ls_userid);\n        print '</td>';\n//Search field forthird_party\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        $selected = $ls_third_party;\n        $htmlname = 'ls_third_party';\n        print $form->select_company($selected, $htmlname, '', 1);       \n        print '</td>';\n//Search field fortask\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        $selected = $ls_task;\n        $htmlname = 'ls_task';\n        $formproject->selectTasks(-1, $selected, $htmlname);\n        print '</td>';\n//Search field forproject\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        $selected = $ls_project;\n        $htmlname = 'ls_project';\n        $formproject->select_projects(-1, $selected, $htmlname);\n        print '</td>';\n//Search field fortoken\n        print '<td></td>';\n        //print '<td class = \"liste_titre\" colspan = \"1\" >';\n        //print '<input type = \"text\" name = \"ls_token\">';\n        //print '</td>';\n\n\n         print '<td class = \"liste_titre\" colspan = \"1\" />';\n        print '<td width = \"15px\">';\n        print '<input type = \"image\" class = \"liste_titre\" name = \"search\" src = \"'\n            .img_picto($langs->trans(\"Search\"), 'search.png', '', '', 1).'\" value = \"'\n            .dol_escape_htmltag($langs->trans(\"Search\")).'\" title = \"'\n            .dol_escape_htmltag($langs->trans(\"Search\")).'\">';\n        print '<input type = \"image\" class = \"liste_titre\" name = \"removefilter\" src = \"'\n            .img_picto($langs->trans(\"Search\"), 'searchclear.png', '', '', 1).'\" value = \"'\n            .dol_escape_htmltag($langs->trans(\"RemoveFilter\")).'\" title = \"'\n            .dol_escape_htmltag($langs->trans(\"RemoveFilter\")).'\">';\n        print '</td>';\n        print '</tr>'.\"\\n\";\n        $i = 0;\n       // $basedurl = dirname($PHP_SELF).'/attendanceeventCard.php?action=view&id=';\n        while($i < $num && $i<$limit)\n        {\n            $obj = $db->fetch_object($resql);\n            if ($obj) {\n                // You can use here results\n                print \"<tr class = \\\"oddeven\\\"  >\";\n                print \"<td>\".dol_print_date($db->jdate($obj->date_time_event), 'dayhour').\"</td>\";\n                print \"<td>\".$obj->event_location_ref.\"</td>\";\n                print \"<td>\".Attendanceevent::LibStatut($obj->event_type).\"</td>\";\n                print \"<td>\".$obj->note.\"</td>\";\n                print \"<td>\";\n                if ($obj->fk_userid>0) {\n                $sUser = new User($db);\n                $sUser->fetch($obj->fk_userid);\n                print  $sUser->getNomUrl(1);\n                }\n                print \"</td>\";\n//                print \"<td>\".  print_sellist('third_party', 'rowid', $obj->fk_third_party, 'rowid', 'description').\"</td>\";\n                print \"<td>\";\n                if ($obj->fk_third_party>0) {\n                $sThirdParty = new Societe($db);\n                $sThirdParty->fetch($obj->fk_third_party);\n                print $sThirdParty->getNomUrl(1, '');\n                }\n                print \"</td>\";\n                 print \"<td>\";\n                if ($obj->fk_task>0) {\n                $sTask = new Task($db);\n                $sTask->fetch($obj->fk_task);\n                print $sTask->getNomUrl(1, '');\n                }\n                print \"</td>\";\n                                 print \"<td>\";\n                if ($obj->fk_project>0) {\n                $sProject = new Project($db);\n                $sProject->fetch($obj->fk_project);\n                print $sProject->getNomUrl(1);\n                }\n                print \"</td>\";\n//                print \"<td>\".print_generic('third_party', 'rowid', $obj->fk_third_party, 'rowid', 'description').\"</td>\";\n                //print \"<td>\".print_generic('projet_task', 'rowid', $obj->fk_task, 'ref', 'label').\"</td>\";\n                //print \"<td>\".print_generic('projet', 'rowid', $obj->fk_project, 'ref', 'title').\"</td>\";\n                print \"<td>\".$obj->token.\"</td>\";\n                $duration = ($obj->date_time_event_start <> \"\")\n                    ?$db->jdate($obj->date_time_event)-$db->jdate($obj->date_time_event_start):'';\n                print \"<td>\".formatTime($duration, 0).\"</td>\";\n                print '<td><a href = \"AttendanceEventAdmin.php?action=delete&id='.$obj->rowid.'\">'\n                    .img_delete().'</a></td>';\n                print \"</tr>\";\n            }\n            $i++;\n        }\n    } else {\n        $error++;\n        dol_print_error($db);\n    }\n    print '</table>'.\"\\n\";\n    print '</form>'.\"\\n\";\n    // new button\n   // print '<a href = \"attendanceeventCard.php?action=create\" class=\"butAction\"role=\"button\">'.$langs->trans('New');\n    print ' '.$langs->trans('Attendanceevent').\"</a>\\n\";\n// End of page\nllxFooter();\n$db->close();\n", "# dolibarr_project_timesheet changelog\n4.5.5\n- fix: pdf header with small pictures\n- misc: white logo\n\n\n4.5.4\n- fix: save and next\n- fix: update progress only #190\n- fix: calcualte total lines\n\n4.5.3\n- better adaptative header size in PDF\n\n\n4.5.2\n- fix missing subordinates on user reports\n- add \"all\" whenever someone have subordinates\n- add date sorting in the pdf reports\n- trads updates (visa -> signature + DE fixes)\n- adds the buttons on top and bottom of the page \n- fix bad report url\n- fix foreach js syntax (nicolasb827)\n\n\n4.5.1\n- Fix Project data on reports \n\n4.5.0\n- new; first verison of the TS missing reminder\n- new: add submit/save next button on ts pages\n- new: add propal lines in the invoice service assignation screen (behave as lumpsum)\n- new: add lump sum option the invoice service assignation screen\n- new: show \"all users\" report\n- new: enable masking \"import from agenda\"\n- new add customer code in exports\n- new: total lines are dynamic\n- new: box for average/Max timesheet delta with hours per week for the user\n- fix: role authorisation issue on project/task\n- fix issue when selecting \"curent user\" in ts for other option\n- fix: unblock holiday if not approved\n- fix: project name on user report\n\n\n4.4.10 (2021-12-01)\n- fix the watch clock issue (going way to fast)\n\n4.4.10 (2021-10-16)\n- fix sendapproval\n- Fix: User rights for viewing PDF. #165 \n- FIx: SQL syntax error. #164 \n\n4.4.9 (2021-08-28)\n- fix white button\n- fix sunday not showed\n\n\n4.4.8 (2021-08-06)\n- fix: This month link\n- fix: wrong user report for user with subordinates\n\n\n4.4.7 (2021-07-18)\n- new setting to manage public holiday time (separeated from holiday management)\n- fix: show public holiday without country\n- fix: pgsql issue\n\n\n4.4.6 (2021-06-06)\n- new import from agenda\n- new show public holiday\n- new block time entry during public holiday\n- fix total takes holiday into account\n\n\n4.4.5 (2021-05-11)\n- fix approval admin rights\n\n4.4.4 (2021-05-07)\n- fix: approval not working (likely since 4.4.0)\n- misc: hide project report if not the rights\n- fix: perm issue on approval admin\n\n\n4.4.3 (2021-05-03)\n- fix block holiday setting\n- fix missing perms trads\n\n4.4.2 (2021-05-02)\n- fix report user userlist\n- new: prems\n\n4.4.1(2021-05-01)\n- fix: tasknote deleteion not working\n- fix: week note not saved\n- new: allow project all rights to access to all project reports\n- new: allow attendance admin to enter time for everyone\n\n\n4.4.0 (2021-04-30)\n- fix: UI improvements\n- new: block holiday\n\n4.3.9 (2021-02-09)\n- new permission attendance->admin has the same priviledge as Admin \n\n4.3.8\n- new: add dropdown for export format\n- fix: billing role was not allowed to get reports\n\n4.3.7\n- fix activation issue\n- fix: name of the pdf\n\n4.3.6\n- new: billing role\n- new: add time on public project\n- fix: add a single task as favorites\n\n4.3.5\n- fix: user report doesn't show all users\n\n4.3.4\n- new: support cust language in invoice\n- new: support cust price for service\n- fix: setup \"show task in invoice\" correctly displayed  \n\n4.3.3\n- new: add chrono fopr other\n- fix: report pgsql\n- fix report html not correct (task missing)\n\n4.3.2\n- new: pdf user report \n- fix: SQL error on ts page when draft hidden\n\n4.3.1\n- fix: show only active user in unserreport (admin)\n- fix: missing SQL quotes\n- fix: wrong task in reports\n\n4.3.0\n- new: possibility to ungroup reports\n- fix: remove closed project (without end date) task\n- new: improve timesheet box (add ts to submit and layout imnprovement)\n\n4.2.2\n- new: show the time not editable (when there is several task time for ady/task)\n\n4.2.1\n- fix: blank timesheet page\n\n4.2.0\n- fix: send approval reminder\n- fix: favorite edit card update the task when the project is selected\n- fix: update the note and progress from team approval\n- fix: update declared progress from chrono\n- fix: error in team approval (#109)\n- new: link propal to timesheet invoice (#101)\n- new: favorite tab in chrono (#111)\n- new: add user, project and task link in reports (#104)\n- new: use the hourly or daily rate as default in invoice unit price\n\n4.1.2\n- fix count issue on chrono page\n- fix UTF-8 lang file \n\n4.1.1 \n- new: add timesheet for other works with project \"subordinate\"\n\n4.1.0\n- new: timespent admin\n- new: option to allow entering time on closed day (e.g. weekend)\n- new: invoiced time background color (approved color)\n- new: option to allow modification invoiced time\n- new: hidden option now in admin page (hide name, eval, round day )\n- fix: remove warning tasktimesheet not an array\n- fix: remove warning with float hour per day\n- fix: label not display in attendance sheet\n\n4.0.18\n- fix report issue (first group splited in two)\n- new: update task progress declared from timesheet\n\n4.0.17\n- new keeping project when moving to report\n- fix last week/month report short links\n- clean: project invoice as a project tab\n\n4.0.16\n- fix favorite not wworking\n\n4.0.15\n- new filter on task info \n- new: note icon changes if the note is filled\n- new: quick link for report (this week ...)\n- fix: error in 4.0.14 change for project report\n\n4.0.14\n- fix: error in project report from 4.0.11\n4.0.13\n- fix: report take now into account time in the end date\n\n4.0.12\n- fix: correct the reports (first line was always wrong)\n\n4.0.11\n- clean: use task_datehour iso task_date to retrieve time spent\n- new: hide ref become hide title\n- fix company link not working\n- fix warning when reopening an empty approval submission\n- fix #83 version compare issue on php 5\n\n4.0.10\n - fix total not display in timesheet page\n - fix submittion without changes of timesheet\n\n4.0.9\n - fix:remove errro message of 4.0.8\n \n4.0.8 change log from 4.0.7\n - new: block creation of timespent after the end of event\n - fix: add missing trad \n - fix: line where only the note was modified were not sent to the server in 4.0.7\n - fix: previous week link not working on slitted week if the first day of the month was a monday\n - fix: display hours iso seconds\n\n4.0.7 change log from 4.0.3\n - new: xlsx, csv, tsv report export for several projects\n - new: more flexibility in time enter (support .5, 0 ... ctr+v ) \n - new: (EXPERIMENTAL) support multiple taxes in invoice (TIMESHEET_EVAL_ADDLINE must be set to 1)\n - fix: selllist condition compatible with pgsql\n - fix: php warnings displayed\n - fix: only line modified are sent to the servers (support more task lines)\n\n4.0.3 change log from 4.0.0\n - new: chrono status (auto stop)\n - new: max value for chrono\n - new: default value for chrono (when max is reached)\n - new: xlsx, csv, tsv report export \n - new: remove signbox from pdf\n - fix: multi line comment in comment display in pdf\n - fix: pgsql error of wrong column\n - fix: project approval without team approval\n - fix: sellect sellist without space between column names\n - fix: time display issue\n - fix: tabletop display issue on pdf\n\n4.0.0 change log from 3.2\n - new chrono pages per task\n - new time type in pdf can differt frm timesheet page\n - new roles : timesheet user, chrono user and admin chrono\n - clean: pdf export user date instead of UNIX time\n - fix: note editing in approval flow\n - fix: approver saved properly in the bd\n - fix: pgSQL compatibility issue\n - fix: no from-to date showed on invoice\n - fix: main menu icon display in dolibarr 8\n\n\n3.2 change log from 3.1.7\n - new: report project between dates instead of per month\n - new: invoice project between dates instead of per month\n - new: show the cusror pointer when the favourite start is hoovered\n - fix: fix pdf layout issue when there is too many time for an user\n\n3.1.7 change log from 3.1.2\n - fix: date were sometime displayed on two lines\n - fix: avoid max approval to be set at 0 (was genereating issues elsewhere)\n - fix remove project closed from admin view of project report\n - fix: support installation in a subfolder of the custom folder\n - fix: error in case the timesheet favourite didn't have any task related\n - clean: align time formating accros the module\n - better layout for the total in the pdf\n\n3.1.2 change log from 2.2.11\n - new: button to generate users' attendance sheet from project report pages\n - fix: #57 note were not saved when containing a simple quote\n - fix: install in htdoc folder\n - fix: #50 boxapproval\n - fix: format & typo\n - fix: #48 timesheet start 1 day in advance\n - fix: #55 invoice show close & draf project in the dropdown list\n - fix: #49 removing the value in a timesheet will put it a 0\n\n\n2.2.11 change log from 2.2.10\n - fix: background color missing with approval status\n - clean: total calculation improvments\n - clean: add new trads\n - clean: remove display error\n\n2.2.10 change log from 2.2.9\n - new: line total header\n - new: add a total line every 10 task line\n - fix: in day mode, the leading 0 isn't mandatory anymore (e.g. \".1\")\n - clean: use liste_title for totals\n - clean: improve total & overtime behaviour\n\n2.2.9 change log from 2.2.8\n - fix: project invoice not working\n - fix: project report (date/user/task) not working\n - clean: use oddeven instead of pair/impair as list class\n\n2.2.8 change log from 2.2.7\n - new: add a super total: total of every day present on the timesheet screen\n\n2.2.7 change log from 2.2.6\n - fix: error in pgsql while generating the invoice\n - fix: link the created invoice to the project\n - fix: error in the reports pages with mysql\n - fix:ts draft not removed upon timespan change leading to days not accessible\n - clean: Invoice creation page: layout improvement\n\n2.2.6 Change log from 2.2.3\n - new: support PostGreSQL database\n - new/fix: support custom project roles\n - new/fix: support Dolibarr 7.0.0\n - fix: behaviour of notes in the timesheet pages with favourites\n - fix: \"not defied\" showing instead of project name\n - fix: correction of the message when a favourite was added\n - clean: enum are not user anymore\n - clean: removal of dead code\n\n2.2.3 Change log from 2.2.2\n - fix: trad issue\n - fix: sql error in approvals\n\n2.2.2 Change log from 2.2\n - new: deletion of draft timsheet when switching between time span (no impact on time entered)\n - fix: issue with winter time\n\n2.2 Change log from 2.1.3\n - NEW: timesheet entry per month\n - NEW: add time spent for subordinates\n - fix: colation issue with latin/latin_swedish on approval page\n - fix: approval with project only\n - clean: files and classes renaming\n - clean: small date only appear for month mode\n\n\n2.1.3 Change log from 2.1.2\n - fix : start and end date missing in task line\n - fix : task end/start in middle of the week wasn't taken into account\n\n2.1.2 Change log from 2.1.1\n - fix third party not showed when note wasn't activated\n - fix: holiday time wasnot adding-up in the total lines\n\n2.1.1 Change log from 2.0.1\n - fix: Contact email correction\n - fix: js blocked if the module was in the custom folder\n - fix: default date for report is the current date not jan 2020\n\n2.1 Change log from 2.0.1\n- fix: Submit (without pushing save before)save correctly the time for approval\n- fix:javascript error that prevented to color change upon time entry\n- fix: progress not showing up\n- fix: weeks with a 8th day\n- fix: dolibarr 6.0 compatibility\n- change:\"New\" button removed from the admin page,\n- change: end date showed on the admin card page\n\n2.0.1 Change log from 2.0\n - fix: Project approval corrected (for non admin no approval was shown)\n - fix: PHP warning removed\n - fix: Home timesheet box correted (was not showing the # of timesheet to approve)\n - new: send email over TS rejection\n\n2.0 Change log from 1.5.1:\n - new: Week over two month can be splited in 2 so an approval per month is possible.\n - new: note availale for each task (also in the approval flow)\n - new: chained approval for project\n - new: create invoice from the project report\n - new: reports shows time in hours and days\n - new: tab in the setup for better browsing experience (in JS so config is kept when changing tab)\n - new: favoris in a tab (not a new page)\n - new: favoris can be set simply by pushing on a star next to the task name in timesheet screen\n - new: better handling of search boxes\n - new: more translation (ES, DE, IT, FR, US)\n\n\n\nChange log from 1.4.3:\n\n - Timesheet approval by N+1,\n - Reminder (email) for to be approved timesheet possible through dolibarr planned tasks\n - admin wiew for the Approval (change a approval status outside the normal approval flow)\n - Home box with the pending timesheet to be approved\n - Blocking some weekdays (e.g week ends)\n - Holiday showed in the timesheet\n - Holiday time can be included in the timesheet totals\n - Typo correction for French.\n\nChange log from 1.4.1:\n\n - correction of the Spanish language (thanks to vinclar)\n - possible to deactivate the dolibarr Ajax for the dropdown list for the setup page (in case of issue to add whitelist)\n - keep the whitlistmode after submit / go to date / next / previsous week\n\n\nChange log from 1.4:\n\n- bugfix for the tasktime date in the project page\n- link to have the different whitelist behaviour (black list, and none)\n- Spanish language (google trad)\n- typo correction for French\n- support the print mode for timesheet & the report\n- show the project open to everyone on the new whitelist page\n\nChange log from 1.3.7:\n\n- layout improvement: timesheet, setup page, reports\n- whitelist to show only some project/task\n- taslk column customisation\n- new task column: company, parent task\n- new report option: report all, export friendly layout\n- user report available for the N-2, N-3\n\nChange log from 1.3.6:\n\n- compatible avec dolibarr 3.7\n\n\nChange log from 1.3.3:\n\n- Works with PHP<=5.3\n- Possibility to remove the 0:00\n- Color code for already filled tasktime / new tasktime and error\n- Bux fixes in the report\n- Better date dialog\n- N+1 is able to check the user report of his N's\n\n", "<?php\n /* Copyright (C) 2017 delcroip <patrick@pmpd.eu>\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/*\ndefine('$conf->global->TIMESHEET_INVOICE_METHOD', 'user');\ndefine('$conf->global->TIMESHEET_INVOICE_TASKTIME', 'user');\ndefine('$conf->global->TIMESHEET_INVOICE_SERVICE', '1');\ndefine('$conf->global->TIMESHEET_INVOICE_SHOW_TASK', '1');\ndefine('$conf->global->TIMESHEET_INVOICE_SHOW_USER', '1');\n*/\n//load class\ninclude 'core/lib/includeMain.lib.php';\ninclude 'core/lib/generic.lib.php';\ninclude 'core/lib/timesheet.lib.php';\nrequire_once DOL_DOCUMENT_ROOT .'/core/lib/functions.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/project.lib.php';\n//get param\n$staticProject = new Project($db);\n$projectId = GETPOST('projectid', 'int');\n$propalId = GETPOST('propalid', 'int');\n$socid = GETPOST('socid', 'int');\n//$month = GETPOST('month', 'alpha');\n//$year = GETPOST('year', 'int');\n$mode = GETPOST('invoicingMethod', 'alpha');\n$step = GETPOST('step', 'alpha');\n$ts2Invoice = GETPOST('ts2Invoice', 'alpha');\n$tsNotInvoiced = GETPOST('tsNotInvoiced', 'alpha');\n$userid = is_object($user)?$user->id:$user;\n//init handling object\n$form = new Form($db);\n$dateStart = strtotime(GETPOST('dateStart', 'alpha'));\n$dateStartday = GETPOST('dateStartday', 'int');// to not look for the date if action not goTodate\n$dateStartmonth = GETPOST('dateStartmonth', 'int');\n$dateStartyear = GETPOST('dateStartyear', 'int');\n$dateStart = parseDate($dateStartday, $dateStartmonth, $dateStartyear, $dateStart);\n$dateEnd = strtotime(GETPOST('dateEnd', 'alpha'));\n$dateEndday = GETPOST('dateEndday', 'int');// to not look for the date if action not goTodate\n$dateEndmonth = GETPOST('dateEndmonth', 'int');\n$dateEndyear = GETPOST('dateEndyear', 'int');\n$dateEnd = parseDate($dateEndday, $dateEndmonth, $dateEndyear, $dateEnd);\n$invoicabletaskOnly = GETPOST('invoicabletaskOnly', 'int');\nif ($user->rights->facture->creer && hasProjectRight($userid, $projectId)) {\n    if ($projectId>0)$staticProject->fetch($projectId);\n    if ($socid == 0 || !is_numeric($socid))$socid = $staticProject->socid;\n$edit = 1;\n// avoid SQL issue\nif (empty($dateStart) || empty($dateEnd) ||$dateStart == $dateEnd) {\n    $step = 0;\n    $dateStart = strtotime(\"first day of previous month\", time());\n    $dateEnd = strtotime(\"last day of previous month\", time());\n}\n $langs->load(\"main\");\n$langs->load(\"projects\");\n$langs->load('timesheet@timesheet');\n//steps\n    switch($step) {\n        case 2:{\n           $fields = ($mode == 'user')?'fk_user':(($mode == 'taskUser')?'fk_user, fk_task':'fk_task');\n            $sql = 'SELECT  '.$fields.', SUM(tt.task_duration) as duration, ';\n            if ($db->type!='pgsql') {\n                $sql .= \" GROUP_CONCAT(tt.rowid  SEPARATOR ', ') as task_time_list\";\n            } else{\n                $sql .= \" STRING_AGG(to_char(tt.rowid, '9999999999999999'), ', ') as task_time_list\";\n            }\n             $sql .= ' From '.MAIN_DB_PREFIX.'projet_task_time as tt';\n            $sql .= ' JOIN '.MAIN_DB_PREFIX.'projet_task as t ON tt.fk_task = t.rowid';\n            if ($invoicabletaskOnly == 1)$sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'projet_task_extrafields as tske ON tske.fk_object = t.rowid ';\n            $sql .= ' WHERE t.fk_projet='.$projectId;\n                $sql .= \" AND DATE(tt.task_datehour) BETWEEN '\".$db->idate($dateStart);\n                $sql .= \"' AND '\".$db->idate($dateEnd).\"'\";\n             if ($invoicabletaskOnly == 1)$sql .= ' AND tske.invoiceable = \\'1\\'';\n            if ($ts2Invoice!='all') {\n                /*$sql .= ' AND tt.rowid IN(SELECT GROUP_CONCAT(fk_project_s SEPARATOR \", \")';\n                $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_time_approval';\n                $sql .= ' WHERE status = \"APPROVED\" AND MONTH(date_start)='.$month;\n                $sql .= ' AND YEAR(date_start) = \"'.$year.'\")';\n                $sql .= ' AND YEAR(date_start) = \"'.$year.'\")';*/\n                $sql .= ' AND tt.status = '.APPROVED;\n            }\n            if ($tsNotInvoiced == 1) {\n                $sql .= ' AND tt.invoice_id IS NULL';\n            }\n            $sql .= ' GROUP BY '.$fields;\n            dol_syslog('timesheet::timesheetProjectInvoice step2', LOG_DEBUG);\n            $Form = '<form name = \"settings\" action=\"?step=3\" method = \"POST\" >'.\"\\n\\t\";\n            $Form .= '<input type = \"hidden\" name = \"propalid\" value = \"'.$propalId.'\">';\n            $Form .= '<input type = \"hidden\" name = \"projectid\" value = \"'.$projectId.'\">';\n            $Form .= '<input type = \"hidden\" name = \"dateStart\" value = \"'.dol_print_date($dateStart, 'dayxcard').'\">';\n            $Form .= '<input type = \"hidden\" name = \"dateEnd\" value = \"'.dol_print_date($dateEnd, 'dayxcard').'\">';\n            $Form .= '<input type = \"hidden\" name = \"socid\" value = \"'.$socid.'\">';\n            $Form .= '<input type = \"hidden\" name = \"invoicingMethod\" value = \"'.$mode.'\">';\n            $Form .= '<input type = \"hidden\" name = \"ts2Invoice\" value = \"'.$ts2Invoice.'\">';\n            $resql = $db->query($sql);\n            $num = 0;\n            $resArray = array();\n            if ($resql) {\n                $num = $db->num_rows($resql);\n                $i = 0;\n                // Loop on each record found,\n                while($i < $num)\n                {\n                    $error = 0;\n                    $obj = $db->fetch_object($resql);\n                    $duration = floor($obj->duration/3600).\":\".str_pad(floor($obj->duration%3600/60), 2, \"0\", STR_PAD_LEFT);\n                    switch($mode) {\n                        case 'user':\n                             //step 2.2 get the list of user  (all or approved)\n                            $resArray[] = array(\"USER\" => $obj->fk_user, \"TASK\" => 'any', \"DURATION\"=>$duration, 'LIST'=>$obj->task_time_list);\n                            break;\n                        case 'taskUser':\n                             //step 2.3 get the list of taskUser  (all or approved)\n                            $resArray[] = array(\"USER\" => $obj->fk_user, \"TASK\" =>$obj->fk_task, \"DURATION\"=>$duration, 'LIST'=>$obj->task_time_list);\n                            break;\n                        default:\n                        case 'task':\n                             //step 2.1 get the list of task  (all or approved)\n                            $resArray[] = array(\"USER\" => \"any\", \"TASK\" =>$obj->fk_task, \"DURATION\"=>$duration, 'LIST'=>$obj->task_time_list);\n                          break;\n                    }\n                    $i++;\n                }\n                $db->free($resql);\n            } else {\n                dol_print_error($db);\n                return '';\n            }\n             //FIXME asign a service + price to each array elements(or price +auto generate name\n            $Form .= '<table class = \"noborder\" width = \"100%\">'.\"\\n\\t\\t\";\n            $Form .= '<tr class = \"liste_titre\" width = \"100%\" ><th colspan = \"8\">'.$langs->trans('invoicedServiceSelectoin').'</th><th>';\n            $Form .= '<tr class = \"liste_titre\" width = \"100%\" ><th >'.$langs->trans(\"User\").'</th>';\n            $Form .= '<th >'.$langs->trans(\"Task\").'</th><th >'.$langs->trans(\"Service\").':'.$langs->trans(\"Existing\").\"/\".$langs->trans(\"Custom\").'</th>';\n            $Form .= '<th >'.$langs->trans(\"Custom\").':'.$langs->trans(\"Description\").'</th><th >'.$langs->trans(\"Custom\").':'.$langs->trans(\"UnitPriceHT\").'</th>';\n            $Form .= '<th >'.$langs->trans(\"Custom\").':'.$langs->trans(\"VAT\").'</th><th >'.$langs->trans(\"unitDuration\").'</th><th >'.$langs->trans(\"savedDuration\").'</th>';\n            $form = new Form($db);\n            $otherchoices = array('-999'=> $langs->transnoentities('not2invoice'),\n                     '-998' => $langs->transnoentities('never2invoice'));\n            if ($propalId > 0){\n                require_once DOL_DOCUMENT_ROOT.\"/comm/propal/class/propal.class.php\";\n                $propal = new Propal($db);\n                $propal->fetch($propalId);\n                $propal->fetch_lines();\n                foreach($propal->lines as $lid => $line){\n                    if($line->product_type == 1){\n                        if ($line->fk_product) $line->label = getproductlabel($line->fk_product);\n                        $otherchoices[-$lid] = $langs->transnoentities('Proposal').\":\".$line->label;\n                    }\n                }\n            }\n        \n            foreach ($resArray as $res) {\n                $Form .= htmlPrintServiceChoice($res[\"USER\"], $res[\"TASK\"], 'oddeven', $res[\"DURATION\"], $res['LIST'], $mysoc, $socid, $otherchoices);\n            }\n            $Form .= '</table>';\n            $Form .= '<input type = \"submit\"  class = \"butAction\" value = \"'.$langs->trans('Next').\"\\\">\\n</form>\";\n             break;}\n        case 3: // review choice and list of item + quantity(editable)\n            require_once DOL_DOCUMENT_ROOT . '/compta/facture/class/facture.class.php';\n            require_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n            $object = new Facture($db);\n            $db->begin();\n            $error = 0;\n            $dateinvoice = time();\n                    //$date_pointoftax = dol_mktime(12, 0, 0, $_POST['date_pointoftaxmonth'], $_POST['date_pointoftaxday'], $_POST['date_pointoftaxyear']);\n                            // Si facture standard\n            $object->socid = $socid;\n            $object->type = 0;//Facture::TYPE_STANDARD;\n            $object->date = $dateinvoice;\n            $object->fk_project = $projectId;\n            $object->fetch_thirdparty();\n            if ($propalId > 0){\n                $object->origin = 'propal';\n                $object->origin_id = $propalId;\n                $object->linked_objects[$object->origin] = $object->origin_id;\n            }\n            //origin=propal&originid=34&socid=10\n            $id = $object->create($user);\n            $resArray = $_POST['userTask'];\n            $hoursPerDay = $conf->global->TIMESHEET_DAY_DURATION;\n            $task_time_array = array();\n            $task_time_array_never = array();\n                // copy the propal lines\n            $lineCount = 0; \n            // id -> db id\n            $propallines = []; \n            \n            if ( $propalId > 0) { // PROPAL\n                \n                require_once DOL_DOCUMENT_ROOT.\"/comm/propal/class/propal.class.php\";\n                $propal = new Propal($db);\n                $propal->id= $propalId;\n                $propal->fetch_lines();\n                foreach($propal->lines as $lid => $line){\n                    $label = (!empty($line->label) ? $line->label : '');\n\t\t\t\t\t$desc = (!empty($line->desc) ? $line->desc : $line->libelle);\n                    $lineCount ++; \n                    $product_type = ($line->product_type ? $line->product_type : 0);\n                    // Date start\n                    $date_start = false;\n                    if ($line->date_debut_prevue) {\n                        $date_start = $line->date_debut_prevue;\n                    }\n                    if ($line->date_debut_reel) {\n                        $date_start = $line->date_debut_reel;\n                    }\n                    if ($line->date_start) {\n                        $date_start = $line->date_start;\n                    }\n\n                    // Date end\n                    $date_end = false;\n                    if ($line->date_fin_prevue) {\n                        $date_end = $line->date_fin_prevue;\n                    }\n                    if ($line->date_fin_reel) {\n                        $date_end = $line->date_fin_reel;\n                    }\n                    if ($line->date_end) {\n                        $date_end = $line->date_end;\n                    }\n\n                    // Reset fk_parent_line for no child products and special product\n                    if (($line->product_type != 9 && empty($line->fk_parent_line)) || $line->product_type == 9) {\n                        $fk_parent_line = 0;\n                    }\n\n                    // Extrafields\n                    if (method_exists($line, 'fetch_optionals')) {\n                        $line->fetch_optionals();\n                        $array_options = $line->array_options;\n                    }\n\n                    $tva_tx = $line->tva_tx;\n                    if (!empty($line->vat_src_code) && !preg_match('/\\(/', $tva_tx)) {\n                        $tva_tx .= ' ('.$line->vat_src_code.')';\n                    }\n\n                    // View third's localtaxes for NOW and do not use value from origin.\n                    // TODO Is this really what we want ? Yes if source is template invoice but what if proposal or order ?\n                    $localtax1_tx = get_localtax($tva_tx, 1, $object->thirdparty);\n                    $localtax2_tx = get_localtax($tva_tx, 2, $object->thirdparty);\n\n                    $result = 0;\n                    $postdata['prod_entry_mode'] = 'predef';\n                    $postdata['dp_desc'] = $desc;\n                    $postdata['tva_tx'] = $$tva_tx;\n                    $postdata['price_ht'] =$line->total_ht;\n                    $postdata['qty'] = (float) $line->qty;                      \n                    if (!$conf->global->TIMESHEET_EVAL_ADDLINE){\n                        $result = $object->addline(\n                            $desc,\n                            $line->subprice,\n                            $line->qty,\n                            $tva_tx,\n                            $localtax1_tx,\n                            $localtax2_tx,\n                            $line->fk_product,\n                            $line->remise_percent,\n                            $date_start,\n                            $date_end,\n                            0,\n                            $line->info_bits,\n                            $line->fk_remise_except,\n                            'HT',\n                            0,\n                            $product_type,\n                            $line->rang,\n                            $line->special_code,\n                            $object->origin,\n                            $line->rowid,\n                            $fk_parent_line,\n                            $line->fk_fournprice,\n                            $line->pa_ht,\n                            $label,\n                            $array_options,\n                            $line->situation_percent,\n                            $line->fk_prev_id,\n                            $line->fk_unit\n                        );  \n                    }else{\n                        $post_temp = $_POST;\n                        $_POST = $postdata;\n                        ob_start();\n                        eval($invoicecard);\n                        ob_end_clean();\n                        $_POST = $post_temp;\n                        $result = get_lastest_id('facture_fourn_det');\n                    }\n                    if ($result>0)$propallines[$lineCount] = $result;\n                }                                \n            }\n            \n            if ($id > 0  && is_array($resArray)) {\n                $db->commit();\n                $invoicecard = str_replace(\n                                array(\"require '../../main.inc.php';\",\"<?php\",\"\\$db->close();\"),\n                                \"\",\n                                file_get_contents(DOL_DOCUMENT_ROOT.'/compta/facture/card.php'));\n                foreach ($resArray as $uId => $userTaskService) {\n                        //$userTaskService[$user][$task] = array('duration', 'VAT', 'Desc', 'PriceHT', 'Service', 'unit_duration', 'unit_duration_unit');\n                    if (is_array($userTaskService))foreach ($userTaskService as  $tId => $service) {\n                         \n                        $durationTab = explode(':', $service['duration']);\n                        $duration = $durationTab[1]*60 + $durationTab[0]*3600;\n                        //$startday = dol_mktime(12, 0, 0, $month, 1, $year);\n                        //$endday = dol_mktime(12, 0, 0, $month, date('t', $startday), $year);\n                        $details = '';\n                        $result = 0;\n                        $factor = 1;\n                        $unit_duration_unit = $service['unit_duration_unit'];\n                        switch($unit_duration_unit){\n                            case 'h':\n                                $unit_factor = 3600;\n                            break;\n                            case 'i':\n                                $unit_factor = 60;\n                            break;\n                            case 's':\n                                $unit_factor = 1;\n                            break;\n                            case 'w':\n                                $unit_factor = 3600 * $hoursPerDay * 5;\n                            break;\n                            case 'm':\n                                $unit_factor = 3600 * $hoursPerDay * 65 / 3;\n                            break;\n                            case 'y':\n                                $unit_factor = 3600 * $hoursPerDay * 260;\n                            break;\n                            case 'l':\n                                $unit_factor = $duration;\n                            case 'd':\n                            default:\n                                $unit_factor = $hoursPerDay * 3600;\n                        }\n                        if (($tId!='any') && $conf->global->TIMESHEET_INVOICE_SHOW_TASK)$details = \"\\n\".$service['taskLabel'];\n                        if (($uId!='any')&& $conf->global->TIMESHEET_INVOICE_SHOW_USER)$details .= \"\\n\".$service['userName'];\n                        //prepare the CURL params\n                        $postdata = array();\n                        $postdata['action'] = 'addline';\n                        $postdata['id'] = $object->id;\n                        $postdata['date_startday'] = date('d', $dateStart);\n                        $postdata['date_startmonth'] = date('m', $dateStart);\n                        $postdata['date_startyear'] = date('Y', $dateStart);\n                        $postdata['date_endday'] = date('d', $dateEnd);\n                        $postdata['date_endmonth'] = date('m', $dateEnd);\n                        $postdata['date_endyear'] = date('Y', $dateEnd);\n                        $postdata['addline']='Add';\n                        if ($service['Service'] > 0) {\n                            \n                            $localtax1_tx = get_localtax($service['VAT'], 1, $object->thirdparty);\n                            $localtax2_tx = get_localtax($service['VAT'], 2, $object->thirdparty);\n                            $product = new Product($db);\n                            $product->fetch($service['Service']);\n                            if ($object->thirdparty->default_lang != '' && is_array($product->multilangs[$object->thirdparty->default_lang]))\n                            {\n                                $desc = $product->multilangs[$object->thirdparty->default_lang]['description'];\n                                $label = $product->multilangs[$object->thirdparty->default_lang]['label'];\n                            }else{\n                                $desc = $product->description;\n                                $label = $product->label;\n                            }\n                            $factor = intval(substr($product->duration, 0, -1));\n                            if ($factor == 0) $factor = 1;//to avoid divided by $factor0                         \n                            $quantity = ($duration == $factor*$unit_factor) ? 1 :\n                                round($duration/($factor*$unit_factor), $conf->global->TIMESHEET_ROUND);\n                            $postdata['type'] = -1;\n                            $postdata['prod_entry_mode'] = 'predef';\n                            $postdata['idprod'] = $service['Service'];\n                            $postdata['qty'] = (float) $quantity;\n            \n\n\n                            $prices =  $product->getSellPrice( $mysoc,$object->thirdparty);\n                            $price_base_type = $prices['price_base_type'];\n                            $price_ttc = $prices['pu_ttc'];\n                            $tva_tx = $prices['tva_tx'];\n                            $price = $prices['pu_ht'];\n\n\n                            if (!$conf->global->TIMESHEET_EVAL_ADDLINE){\n                                $result = $object->addline($product->description.$details, $price, $quantity, $tva_tx, \n                                    $localtax1_tx, $localtax2_tx, $service['Service'], 0, $dateStart, $dateEnd, 0, 0, '', \n                                    $price_base_type, $price_ttc, $product->type, -1, 0, '', 0, 0, null, 0, $label, 0, 100, '', \n                                    $product->fk_unit);\n                            }else{\n                                $result = $lineCount;\n                            }\n                            $lineCount ++;\n                        } elseif ($service['Service'] > -997) { // propal\n                            if(isset($task_time_array[$propallines[-$service['Service']]])){\n                                $task_time_array[$propallines[-$service['Service']]] .= \",\".$service['taskTimeList'];\n                            }else{\n                                $task_time_array[$propallines[-$service['Service']]] = $service['taskTimeList'];\n                            }\n                        } elseif ($service['Service'] == -997) { // customized service\n                            \n                            $localtax1_tx = get_localtax($service['VAT'], 1, $object->thirdparty);\n                            $localtax2_tx = get_localtax($service['VAT'], 2, $object->thirdparty);\n                            $factor = intval($service['unit_duration']);\n                            $quantity = ($duration == $factor*$unit_factor) ? 1 :\n                                round($duration/($factor*$unit_factor), $conf->global->TIMESHEET_ROUND);                            \n                            $postdata['type'] = 1;\n                            $postdata['prod_entry_mode'] = 'free';\n                            $postdata['dp_desc'] = $service['Desc'];\n                            $postdata['tva_tx'] = $service['VAT'];\n                            $postdata['price_ht'] = $service['PriceHT'];\n                            $postdata['qty'] = (float) $quantity;\n                            if (!$conf->global->TIMESHEET_EVAL_ADDLINE){\n                                $result = $object->addline($service['Desc'].$details, $service['PriceHT'], \n                                    $quantity, $service['VAT'], $localtax1_tx, $localtax2_tx, '', \n                                    0, $dateStart, $dateEnd, 0, 0, '', 'HT', '', 1, -1, 0, '', \n                                    0, 0, null, 0, '', 0, 100, '', '');\n                            }else {\n                                $result = get_lastest_id('facture_fourn_det');\n                            }\n       \n                            $lineCount ++;\n                        }elseif ($service['Service'] == -998){ // never invoice\n                            $task_time_array_never[] = $service['taskTimeList']; \n                        }\n                        //add_invoice_line($postdata);\n                        \n                        \n                        //eval used instead of include because the main.in.php cannot be included twice so it had to be removed from\n                        if ($conf->global->TIMESHEET_EVAL_ADDLINE){\n                            $post_temp = $_POST;\n                            $_POST = $postdata;\n                            ob_start();\n                            eval($invoicecard);\n                            ob_end_clean();\n                            $_POST = $post_temp;\n                        }\n                        // set the taskTimeList to be updated in case of success of the invoice add line\n                        if ($service['taskTimeList'] != '' && ($result>0  )){\n                            $task_time_array[$result] = $service['taskTimeList'];\n                        }\n                    } else $error++;\n                }\n\n\n                // End of object creation, we show it\n                if (1) {\n                    if (version_compare(DOL_VERSION, \"4.9.9\") >= 0) {\n                        foreach ($task_time_array AS $idLine => $task_time_list) {\n                                //dol_syslog(\"ProjectInvoice::setnvoice\".$idLine.' '.$task_time_list, LOG_DEBUG);\n                            Update_task_time_invoice($id, $idLine, $task_time_list);\n                        }\n                        foreach ($task_time_array_never AS $idLine => $task_time_list) {\n                            //dol_syslog(\"ProjectInvoice::setnvoice\".$idLine.' '.$task_time_list, LOG_DEBUG);\n                        Update_task_time_invoice(-1, -1, $task_time_list);\n                    }\n                    }\n                    ob_start();\n                    header('Location: ' . $object->getNomUrl(0, '', 0, 1, ''));\n                    ob_end_flush();\n                    exit();\n                }\n            } else {\n                $db->rollback();\n                //header('Location: ' . $_SERVER[\"PHP_SELF\"] . '?step=0');\n                setEventMessages($object->error, $object->errors, 'errors');\n            }\n\n           \n            break;\n        case 1:\n            $edit = 0;\n        case 0:\n        default:\n            require_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\n            $htmlother = new FormOther($db);\n            $sqlTail = '';\n            //if (!$user->admin) {\n            //    $sqlTailJoin = ' JOIN '.MAIN_DB_PREFIX.'element_contact AS ec ON t.rowid = element_id ';\n            //    $sqlTailJoin .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON ctc.rowid = ec.fk_c_type_contact';\n            //    $sqlTailWhere = ' ((ctc.element in (\\'project_task\\') AND ctc.code LIKE \\'%EXECUTIVE%\\')OR (ctc.element in (\\'project\\') AND ctc.code LIKE \\'%LEADER%\\')) AND ctc.active = \\'1\\'  ';\n            //    $sqlTailWhere .= ' AND fk_socpeople = \\''.$userid.'\\' and t.fk_statut = \\'1\\'';\n            //}\n            $Form = '<form name = \"settings\" action=\"?step=2\" method = \"POST\" >'.\"\\n\\t\";\n            $Form .= '<table class = \"noborder\" width = \"100%\">'.\"\\n\\t\\t\";\n            $Form .= '<tr class = \"liste_titre\" width = \"100%\" ><th colspan = \"2\">'\n                .$langs->trans('generalInvoiceProjectParam').'</th></tr>';\n            $invoicingMethod = $conf->global->TIMESHEET_INVOICE_METHOD;\n            //$Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'.$langs->trans('Project').'</th><th align = \"left\" width = \"80%\" >';\n            //select_generic($table, $fieldValue, $htmlName, $fieldToShow1, $fieldToShow2 = '', $selected = '', $separator = ' - ', $sqlTailWhere = '', $selectparam = '', $addtionnalChoices = array('NULL' => 'NULL'), $sqlTailTable = '', $ajaxUrl = '')\n            //$ajaxNbChar = $conf->global->PROJECT_USE_SEARCH_TO_SELECT;\n            //$Form .= select_generic('projet', 'rowid', 'projectid', 'ref', 'title', $projectId, ' - ', $sqlTailWhere, '', null, , $ajaxNbChar);\n            //$htmlProjectArray = array('name' => 'projectid', 'ajaxNbChar'=>$ajaxNbChar, 'otherparam' => ' onchange = \"reload(this.form)\"');\n            //$sqlProjectArray = array('table' => 'projet', 'keyfield' => 't.rowid', 'fields' => 't.ref, t.title ', 'join'=>$sqlTailJoin, 'where'=>$sqlTailWhere, 'separator' => ' - ');\n            //$Form .= select_sellist($sqlProjectArray, $htmlProjectArray, $projectId);\n            $Form .= '<input type = \"hidden\" name = \"projectid\" value = \"'.$projectId.'\">';\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                .$langs->trans('DateStart').'</th>';\n            $Form .= '<th align = \"left\" width = \"80%\">'\n                .$form->select_date($dateStart, 'dateStart', 0, 0, 0, \"\", 1, 1, 1).\"</th></tr>\";\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                .$langs->trans('DateEnd').'</th>';\n            $Form .= '<th align = \"left\" width = \"80%\">'\n                .$form->select_date($dateEnd, 'dateEnd', 0, 0, 0, \"\", 1, 1, 1).\"</th></tr>\";\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                .$langs->trans('invoicingMethod').'</th><th align = \"left\"><input type = \"radio\" '\n                .'name = \"invoicingMethod\" value = \"task\" ';\n            $Form .= ($invoicingMethod == \"task\"?\"checked\":\"\").'> '.$langs->trans(\"Tasks\").'<br> ';\n            $Form .= '<input type = \"radio\" name = \"invoicingMethod\" value = \"user\" ';\n            $Form .= ($invoicingMethod == \"user\"?\"checked\":\"\").'> '.$langs->trans(\"User\").\"<br> \";\n            $Form .= '<input type = \"radio\" name = \"invoicingMethod\" value = \"taskUser\" ';\n            $Form .= ($invoicingMethod == \"taskUser\"?\"checked\":\"\").'> '.$langs->trans(\"Tasks\").' & '\n                .$langs->trans(\"User\").\"</th></tr>\\n\\t\\t\";\n    //cust list\n            $Form .= '<tr class = \"oddeven\"><th  align = \"left\">'.$langs->trans('Customer')\n                .'</th><th  align = \"left\">'.$form->select_company($socid, 'socid', \n                    '(s.client = 1 OR s.client = 2 OR s.client = 3)', 1).'</th></tr>';\n    //propal\n   \n        if ($conf->global->MAIN_MODULE_PROPALE){\n            //http://localhost:18080/compta/facture/card.php?action=create&origin=propal&originid=34&socid=10\n            $joinPropal = ' JOIN '.MAIN_DB_PREFIX.'c_stcomm as stp ON fk_statut = stp.id and stp.active = 1 ';\n            $sqlPropal = array('table' => 'propal' , 'keyfield' => 't.rowid', \n                'fields' => 't.ref, stp.libelle', 'join' => $joinPropal , \n                'where' => $socid?('t.fk_soc = '.$socid):'1 = 2', 'tail' => '');\n            $htmlPropal = array('name' => 'propalid', 'class' => 'not_mandatory', 'otherparam' => '', \n                'ajaxNbChar' => '', 'separator' => ' - ');\n            $addChoices = null;\n            $Form .= '<tr class = \"oddeven\"><th  align = \"left\">'.$langs->trans('Propal').'</th><th>';\n            $Form .= select_sellist($sqlPropal, $htmlPropal, '', $addChoices ).'</th></tr>';\n        }\n        $Form .= '\n        <script type = \"text/javascript\">\n            $(\"#socid\").on(\"select2:select\", function (e) {\n                var param_array = window.location.href.split(\\'?\\')[1].split(\\'&\\');\n                var index;\n                var id = \"\";\n                for(index = 0;index < param_array.length;++index)\n                {\n                    x = param_array[index].split(\\'=\\');\n                    if (x[0] == \"projectid\") {\n                        id = \"projectid=\"+x[1];\n                    }\n\n                }\n                var socSelect = e.params.data;\n                var soc =  socSelect.id;\n                var socElement = document.getElementById(\"socid\");\n                var socOld = (typeof(socElement.defaultSelected) === \\'undefined\\')?0:socElement.defaultSelected ;\n                var dateStartday = \"&dateStartday=\"+document.getElementById(\"dateStartday\").value;\n                var dateStartmonth = \"&dateStartmonth=\"+document.getElementById(\"dateStartmonth\").value;\n                var dateStartyear = \"&dateStartyear=\"+document.getElementById(\"dateStartyear\").value;\n\n                var dateEndday = \"&dateEndday=\"+document.getElementById(\"dateEndday\").value;\n                var dateEndmonth = \"&dateEndmonth=\"+document.getElementById(\"dateEndmonth\").value;\n                var dateEndyear = \"&dateEndyear=\"+document.getElementById(\"dateEndyear\").value;\n                \n                if ( soc != null && soc != socOld){\n                    self.location = \"'.$PHP_SELF\n                        .'?\" + id  + \"&socid=\" + soc +  dateStartday + dateStartmonth + '\n                        .'dateStartyear + dateEndday + dateEndmonth + dateEndyear;\n                }\n            });\n         </script>';\n    \n     //all ts or only approved\n           $ts2Invoice = $conf->global->TIMESHEET_INVOICE_TASKTIME;\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                .$langs->trans('TimesheetToInvoice').'</th><th align = \"left\">'\n                .'<input type = \"radio\" name = \"ts2Invoice\" value = \"approved\" ';\n            $Form .= ($ts2Invoice == \"approved\"?\"checked\":\"\").'> '\n                .$langs->trans(\"approvedOnly\").' <br>';\n            $Form .= '<input type = \"radio\" name = \"ts2Invoice\" value = \"all\" ';\n            $Form .= ($ts2Invoice == \"all\"?\"checked\":\"\").'> '\n                .$langs->trans(\"All\").\"</th></tr>\";\n    // not alreqdy invoice\n            if (version_compare(DOL_VERSION, \"4.9.9\") >= 0) {\n                    $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                        .$langs->trans('TimesheetNotInvoiced');\n                    $Form .= '</th><th align = \"left\">'\n                        .'<input type = \"checkbox\" name = \"tsNotInvoiced\" value = \"1\" ></th></tr>';\n            } else{\n                $Form .= '<input type = \"hidden\" name = \"tsNotInvoiced\" value = \"0\">';\n            }\n            //$invoicabletaskOnly\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'.$langs->trans('InvoicableOnly');\n            $Form .= '</th><th align = \"left\"><input type = \"checkbox\" name = \"invoicabletaskOnly\" value = \"1\" '\n                .(($invoicabletaskOnly == 1)?'checked':'').' ></th></tr>';\n            $Form .= '</table>';\n            $Form .= '<input type = \"submit\" onclick = \"return checkEmptyFormFields(event,\\'settings\\',\\'';\n            $Form .= addslashes($langs->trans(\"pleaseFillAll\")).'\\')\" class = \"butAction\" value = \"'\n                .$langs->trans('Next').\"\\\">\\n</from>\";\n           // if ($ajaxNbChar >= 0) $Form .= \"\\n<script type = 'text/javascript'>\\n$('input#Project').change(function() {\\nif($('input#search_Project').val().length>2)reload($(this).form)\\n;});\\n</script>\\n\";\n            break;\n    }\n} else {\n    $accessforbidden = accessforbidden(\"you don't have enough rights to see this page\");\n}\n/***************************************************\n* VIEW\n*\n* Put here all code to build page\n****************************************************/\n$morejs = array(\"/timesheet/core/js/jsparameters.php\", \n    \"/timesheet/core/js/timesheet.js?\".$conf->global->TIMESHEET_VERSION);\nllxHeader('', $langs->trans('TimesheetToInvoice'), '', '', '', '', $morejs);\nprint \"<div> <!-- module body-->\";\n$project = new Project($db);\n$project->fetch($projectId);\n$headProject = project_prepare_head($project);\ndol_fiche_head($headProject, 'invoice', $langs->trans(\"Project\"), 0, 'project');\n\n// Load object\nif ($projectId > 0 || !empty($ref))\n{\n\t$ret = $project->fetch($projectId, $ref); // If we create project, ref may be defined into POST but record does not yet exists into database\n\tif ($ret > 0) {\n\t\t$project->fetch_thirdparty();\n\t\tif (!empty($conf->global->PROJECT_ALLOW_COMMENT_ON_PROJECT) && method_exists($project, 'fetchComments') && empty($project->comments)) $project->fetchComments();\n\t\t$id = $project->id;\n\t}\n}\n$ref = GETPOST('ref', 'alpha');\n$linkback = '<a href=\"'.DOL_URL_ROOT.'/projet/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\n$morehtmlref = '<div class=\"refidno\">';\n// Title\n$morehtmlref .= $project->title;\n// Thirdparty\nif ($project->thirdparty->id > 0)\n{\n    $morehtmlref .= '<br>'.$langs->trans('ThirdParty').' : '.$project->thirdparty->getNomUrl(1, 'project');\n}\n$morehtmlref .= '</div>';\n\ndol_banner_tab($project, 'projectid', $linkback, ($user->socid ? 0 : 1), 'ref','ref',$morehtmlref);\nprint '<div class=\"underbanner clearboth\"></div>';\n\ndol_fiche_end();\n\nprint $Form;\n//javascript to reload the page with the poject selected\n/*print '\n<SCRIPT type = \"text/javascript\">\nfunction reload(form)\n{\n    var pjt = document.getElementById(\"projectid\").value;\n    self.location=\"?projectid=\" + pjt ;\n}\n</script>';*/\nllxFooter();\n$db->close();\n/***************************************************\n* FUNCTIONS\n*\n* Put here all code of the functions\n****************************************************/\n/** Function to print the line to chose between a predefined service or an ad-hoc one\n *\n * @global object $form form object\n * @global objec $langs lang object\n * @global object $conf  conf object\n * @param int $user  userid on which the time was spent\n * @param int $task  Taskid on which the time was spent\n * @param string $class     html class\n * @param int $duration     duration of the time spend\n * @param string $tasktimelist list of the tasktimespendid on which the time was spent\n * @param type $seller  Seller id to calculate VAT\n * @param type $buyer   buyer id to calculate VAT\n * @param array(id=> desc) otherchoice\n * @return string   HTML code\n */\nfunction htmlPrintServiceChoice($user, $task, $class, $duration, $tasktimelist, $seller, $buyer, $addchoices)\n{\n    global $form, $langs, $conf, $db;\n    $taskLabel = '';\n    $userName = ($user == 'any')?\n        (' - '):print_generic('user', 'rowid', $user, 'lastname', 'firstname', ' ');\n    if ($task == 'any'){\n        $taskLabel = ' - ';\n        $taskHTML = ' - ';\n    } else {\n        require_once DOL_DOCUMENT_ROOT.'/projet/class/task.class.php';\n        $objtemp = new Task($db);\n        $objtemp->fetch($task);\n        $taskLabel = $objtemp->label ;\n        $taskHTML .= str_replace('classfortooltip', 'classfortooltip colTasks', \n            $objtemp->getNomUrl(0, \"withproject\", \"task\", $conf->global->TIMESHEET_HIDE_REF));\n    }\n\n    $html = '<tr class = \"'.$class.'\"><th align = \"left\" width = \"20%\">'.$userName;\n    $html .= '</th><th align = \"left\" width = \"20%\">'.$taskHTML;\n    $html .= '<input type = \"hidden\"   name = \"userTask['.$user.']['.$task.'][userName]\" value = \"'.$userName.'\">';\n    $html .= '<input type = \"hidden\"   name = \"userTask['.$user.']['.$task.'][taskLabel]\"  value = \"'. $taskLabel.'\">';\n    $html .= '<input type = \"hidden\"   name = \"userTask['.$user.']['.$task.'][taskTimeList]\"  value = \"'. $tasktimelist.'\">';\n    $defaultService = getDefaultService($user, $task);\n    $addchoices[-997] = $langs->transnoentities('Custom').': '.$taskLabel;\n    $ajaxNbChar = $conf->global->PRODUIT_USE_SEARCH_TO_SELECT;\n    $html .= '</th><th >';\n    $html .= select_sellist(array('table' => 'product', \n        'keyfield' => 'rowid', 'fields' => 'ref,label', \n        'where' => ' tosell = 1 AND fk_product_type = 1'),\n        array('name' => 'userTask['.$user.']['.$task.'][Service]',  'separator' => ' - '),\n                $defaultService,  $addchoices);\n    $html .= '</th>';\n    $unitValue = '0.0';\n    if (($user>0)){ // if the is no defaulf service, use the thm if available, if not use the tjm\n        $curUser = new User($db);\n        $curUser->fetch($user);\n        if ($curUser->thm)$unitValue = $curUser->thm;\n        else if ($curUser->tjm)$unitValue = $curUser->tjm;\n    }\n\n    $html .= '<th ><input type = \"text\"  size = \"30\" name = \"userTask['\n        .$user.']['.$task.'][Desc]\" ></th>';\n    $html .= '<th><input type = \"text\"  size = \"6\" name = \"userTask['\n        .$user.']['.$task.'][PriceHT]\" value=\"'.number_format($unitValue,2).'\" ></th>';\n    //$html .= '<th><input type = \"text\" size = \"6\" name = \"userTask['.$user.']['.$task.'][\"VAT\"]\" ></th>';\n    $html .= '<th>'.$form->load_tva('userTask['.$user.']['.$task.'][VAT]', \n        -1, $seller, $buyer, 0, 0, '', false, 1).'</th>';\n    $html .= '<th><input type = \"text\" size = \"2\" maxlength = \"2\" name = \"userTask['\n        .$user.']['.$task.'][unit_duration]\" value = \"1\" >';\n    $html .= '<br><input name = \"userTask['.$user.']['\n        .$task.'][unit_duration_unit]\" type = \"radio\" value = \"h\" '\n        .(($conf->global->TIMESHEET_TIME_TYPE == \"days\")?'':'checked').' />'.$langs->trans('Hour');\n    $html .= '<br><input name = \"userTask['\n        .$user.']['.$task.'][unit_duration_unit]\" type = \"radio\" value = \"d\" '\n        .(($conf->global->TIMESHEET_TIME_TYPE == \"days\")?'checked':'').' />'.$langs->trans('Days');\n    $html .= '<br><input name = \"userTask['\n        .$user.']['.$task.'][unit_duration_unit]\" type = \"radio\" value = \"l\"/>'.$langs->trans('Lumpsum').'</th>';\n    $html .= '<th><input type = \"text\" size = \"2\" onkeypress=\"return regexEvent(this,event,\\'timeChr\\')\"'\n        .' maxlength = \"5\" name = \"userTask['.$user.']['.$task.'][duration]\" value = \"'.$duration.'\" />';\n    $html .= '</th</tr>';\n    return $html;\n}\n/**\n *\n * @global object  $db\n * @global object $conf\n * @param type $userid id of the user\n * @param type $taskid id of the tasl\n * @return int  service id\n */\nfunction getDefaultService($userid, $taskid)\n{\n    global $db, $conf;\n    $res = 0;\n    $sql = ' SELECT fk_service FROM '.MAIN_DB_PREFIX.'projet_task_extrafields WHERE fk_object = \\''.$taskid.'\\'';\n    $sql .= ' UNION ALL';\n    $sql .= ' SELECT fk_service FROM '.MAIN_DB_PREFIX.'user_extrafields WHERE fk_object = \\''.$userid.'\\'';\n    $sql .= ' LIMIT 1';\n     dol_syslog(\"ProjectInvoice::getDefaultService\", LOG_DEBUG);\n    $resql = $db->query($sql);\n    if ($db->num_rows($resql)>0) {\n        $obj = $db->fetch_object($resql);\n        $res = $obj->fk_service;\n    }\n    return($res>0)?$res:$conf->global->TIMESHEET_INVOICE_SERVICE;\n}\n/** to check who has the rights\n *\n * @global object $db database object\n * @global object $user current user connected\n * @param object $userid    user to check\n * @param int $projectid project to check\n * @return boolean  has right\n */\nfunction hasProjectRight($userid, $projectid)\n{\n    global $db, $user;\n    $res = true;\n    if ($projectid && !($user->admin)) {\n        $res = false;\n        $sql = ' SELECT ec.rowid FROM '.MAIN_DB_PREFIX.'element_contact as ec ';\n        $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON ctc.rowid = ec.fk_c_type_contact';\n        $sql .= ' WHERE element_id = \\''.$projectid;\n        $sql .= '\\' AND (ctc.element in (\\'project\\')'\n            .' AND (ctc.code LIKE \\'%LEADER%\\' OR ctc.code LIKE \\'%BILLING%\\'))'\n            .' AND ctc.active = \\'1\\'  ';\n        $sql .= ' AND fk_socpeople = \\''.$userid.'\\' ';\n        dol_syslog(\"ProjectInvoice::hasProjectRight\", LOG_DEBUG);\n        $resql = $db->query($sql);\n        if ($db->num_rows($resql))$res = true;\n    }\n    return $res;\n}\n/** update invoice number\n *\n * @global object $db\n * @param int $idInvoice id of invoice\n * @param int $idLine id of invoice line\n * @param sring $task_time_list id task separated by comma\n * @return boolean\n */\nfunction Update_task_time_invoice($idInvoice, $idLine, $task_time_list)\n{\n    global $db;\n    $res = false;\n    $sql = 'UPDATE '.MAIN_DB_PREFIX.'projet_task_time';\n    $sql .= \" SET invoice_id = '{$idInvoice}', invoice_line_id = '{$idLine}'\";\n    $sql .= \" WHERE rowid in ({$task_time_list})\";\n    dol_syslog(\"ProjectInvoice::setnvoice\", LOG_DEBUG);\n    $resql = $db->query($sql);\n    if ($db->num_rows($resql))$res = true;\n    return $res;\n}\n\n/** get the label of a product\n * @param int $productId $product Id\n * @return sting label\n */\nfunction getproductlabel($productId){\n    global $db;\n    require_once  DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n    $product = new Product($db);\n    $product->fetch($productId);\n    return $product->getNomUrl(0,'',0,-1,0);\n}\n\nfunction get_lastest_id($table, $id){\n    global $db;\n    $sql = 'SELECT TOP 1 rowid as lastid FROM'.MAIN_DB_PREFIX.$table\n        .' WHERE fk_facture_fourn ='.$id\n        .' ORDER BY rowid DESC';\n    $resql = $db->query($sql);\n    $num = 0;\n    $resArray = array();\n    if ($resql) {\n        $num = $db->num_rows($resql);\n        if($num == 1 )\n        {\n            $obj = $db->fetch_object($resql);\n            return $obj->lastid;\n        }\n    }\n    return 0;\n}", "<?php\n/*\n * Copyright (C) 2015 delcroip <patrick@pmpd.eu>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\ninclude 'core/lib/includeMain.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once './core/lib/timesheet.lib.php';\nrequire_once './class/TimesheetReport.class.php';\nrequire_once './core/modules/pdf/pdf_rat.modules.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/project.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\n//require_once DOL_DOCUMENT_ROOT.'/core/modules/export/modules_export.php';\n$htmlother = new FormOther($db);\n//$objmodelexport = new ModeleExports($db);\n$id = GETPOST('id', 'int');\n$action = GETPOST('action', 'alpha');\n//$dateStart = GETPOST('dateStart', 'alpha');\n$exportfriendly = GETPOST('exportfriendly', 'alpha');\n$optioncss = GETPOST('optioncss', 'alpha');\n$short = GETPOST('short', 'int');\n$invoicedCol = GETPOST('invoicedcol', 'int');\n\n$ungroup = GETPOST('ungroup', 'int');\n\n$mode = GETPOST('mode', 'alpha');\n\n$model = GETPOST('model', 'alpha');\nif (empty($mode)){\n    $mode = 'UTD';\n    $ungroup = $conf->global->TIMESHEET_REPORT_UNGROUP;\n    $invoicedCol = $conf->global->TIMESHEET_REPORT_INVOICED_COL;\n}\n$admin = $user->rights->projet->all->lire || $user->rights->projet->all->creer\n    || $user->rights->timesheet->report->admin;\n    if (!$user->rights->timesheet->report->project && !$admin) {\n        $accessforbidden = accessforbidden(\"You don't have the report projet or admin right\");\n    }\n\n$projectSelectedId = GETPOST('projectSelected', 'int');\n$year = GETPOST('year', 'int');\n$month = GETPOST('month', 'alpha');//strtotime(str_replace('/', '-', $_POST['Date']))\n// Load traductions files requiredby by page\n//$langs->load(\"companies\");\n//$firstDay = ($month)?strtotime('01-'.$month.'-'. $year):strtotime('first day of previous month');\n//$lastDay = ($month)?strtotime('last day of this month', $firstDay):strtotime('last day of previous month');\n\n// Load translation files required by the page\n$langs->loadLangs(\n\tarray(\n\t\t'main',\n\t\t'projects',\n\t\t'timesheet@timesheet',\n\t\t'companies',\n\t)\n);\n\n//find the right week\n$dateStart = strtotime(GETPOST('dateStart', 'alpha'));\n$dateStartday = GETPOST('dateStartday', 'int');// to not look for the date if action not goTodate\n$dateStartmonth = GETPOST('dateStartmonth', 'int');\n$dateStartyear = GETPOST('dateStartyear', 'int');\n$dateStart = parseDate($dateStartday, $dateStartmonth, $dateStartyear, $dateStart);\n$dateEnd = strtotime(GETPOST('dateEnd', 'alpha'));\n$dateEndday = GETPOST('dateEndday', 'int');// to not look for the date if action not goTodate\n$dateEndmonth = GETPOST('dateEndmonth', 'int');\n$dateEndyear = GETPOST('dateEndyear', 'int');\n$hidetab = GETPOST('hidetab', 'int');\n$reporttab = GETPOST('reporttab', 'alpha');\n$dateEnd = parseDate($dateEndday, $dateEndmonth, $dateEndyear, $dateEnd);\n$invoicabletaskOnly = GETPOST('invoicabletaskOnly', 'int');\nif (empty($dateStart) || empty($dateEnd) || empty($projectSelectedId)) {\n    $step = 0;\n    $dateStart = strtotime(\"first day of previous month\", time());\n    $dateEnd = strtotime(\"last day of previous month\", time());\n}\n$userid = is_object($user)?$user->id:$user;\n//querry to get the project where the user have priviledge;either project responsible or admin\n$sql = 'SELECT pjt.rowid, pjt.ref, pjt.title, pjt.dateo, pjt.datee FROM '.MAIN_DB_PREFIX.'projet as pjt';\nif (!$admin) {\n    $sql .= ' JOIN '.MAIN_DB_PREFIX.'element_contact AS ec ON pjt.rowid = element_id ';\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON ctc.rowid = ec.fk_c_type_contact';\n    $sql .= ' WHERE (ctc.element in (\\'project\\') AND (ctc.code LIKE \\'%LEADER%\\' OR  ctc.code LIKE \\'%BILLING%\\')) AND ctc.active = \\'1\\'  ';\n    $sql .= ' AND fk_socpeople = \\''.$userid.'\\' and fk_statut = \\'1\\'';\n    $sql .= \" AND pjt.entity IN (\".getEntity('projet').\")\";\n} else{\n    $sql .= ' WHERE fk_statut = \\'1\\' ';\n    $sql .= \" AND pjt.entity IN (\".getEntity('projet').\")\";\n}\ndol_syslog('timesheet::report::projectList ', LOG_DEBUG);\n//launch the sql querry\n$resql = $db->query($sql);\n$numProject = 0;\n$projectList = array();\nif ($resql) {\n    $numProject = $db->num_rows($resql);\n    $i = 0;\n    // Loop on each record found, so each couple (project id, task id)\n    while($i < $numProject)\n    {\n        $error = 0;\n        $obj = $db->fetch_object($resql);\n        $projectList[$obj->rowid]=array('value' => $obj->rowid, \"label\" =>  $obj->ref.' - '.$obj->title);\n        //$projectList[$obj->rowid] = new TimesheetReport($db);\n        //$projectList[$obj->rowid]->initBasic($obj->rowid, '', $obj->ref.' - '.$obj->title, $dateStart, $dateEnd, $mode, $invoicabletaskOnly);\n        $i++;\n    }\n    $db->free($resql);\n} else {\n    dol_print_error($db);\n}\n$projectIdlist = array();\n$reportName = $langs->trans('ReportProject');\nif ($projectSelectedId<>-999){\n    $projectIdlist[]=$projectSelectedId;\n    $reportName = $projectList[$projectSelectedId]['label'];\n} else {\n    $projectIdlist = array_keys($projectList);\n}\n$reportStatic = new TimesheetReport($db);\n$reportStatic->initBasic($projectIdlist, '', $reportName, $dateStart, $dateEnd, $mode, $invoicabletaskOnly,$short,$invoicedCol,$ungroup);\nif ($action == 'getpdf') {\n    $pdf = new pdf_rat($db);\n    //$outputlangs = $langs;\n    if ($pdf->writeFile($reportStatic, $langs)>0) {\n        header(\"Location: \".DOL_URL_ROOT.\"/document.php?modulepart=timesheet&file=reports/\" . dol_sanitizeFileName($reportStatic->name) . \".pdf\");\n        return;\n    }\n    ob_end_flush();\n    exit();\n} elseif ($action == 'getExport'){\n    $max_execution_time_for_export =\n        (empty($conf->global->EXPORT_MAX_EXECUTION_TIME)?\n            300:$conf->global->EXPORT_MAX_EXECUTION_TIME);    // 5mn if not defined\n    $max_time = @ini_get(\"max_execution_time\");\n    if ($max_time && $max_time < $max_execution_time_for_export)\n    {\n        @ini_set(\"max_execution_time\", $max_execution_time_for_export); // This work only if safe mode is off. also web servers has timeout of 300\n    }\n    $name = $reportStatic->buildFile($model, false);\n    if (!empty($name)){\n        header(\"Location: \".DOL_URL_ROOT.\"/document.php?modulepart=export&file=\".$name);\n        return;\n    }\n    ob_end_flush();\n    exit();\n}\n//$_SESSION[\"dateStart\"] = $dateStart ;\nllxHeader('', $langs->trans('projectReport'), '');\n\n// Load project\nif ($projectSelectedId > 0 || !empty($ref))\n{\n\t$project = new Project($db);\n\t$project->fetch($projectSelectedId);\n    if($hidetab != 1){\n\t    $headProject = project_prepare_head($project);\n\t    dol_fiche_head($headProject, 'report', $langs->trans(\"projectReport\"), -1, 'project');\n    }\n\n\t$ret = $project->fetch($projectSelectedId, $ref); // If we create project, ref may be defined into POST but record does not yet exists into database\n\tif ($ret > 0) {\n\t\t$project->fetch_thirdparty();\n\t\tif (!empty($conf->global->PROJECT_ALLOW_COMMENT_ON_PROJECT) && method_exists($project, 'fetchComments') && empty($project->comments)) $project->fetchComments();\n\t\t$id = $project->id;\n\t}\n\n\t$ref = GETPOST('ref', 'alpha');\n\t$title = $langs->trans(\"projectReport\").' - '.$project->ref.' '.$project->name;\n\tif (!empty($conf->global->MAIN_HTML_TITLE) && preg_match('/projectnameonly/', $conf->global->MAIN_HTML_TITLE) && $project->name) $title = $project->ref.' '.$project->name.' - '.$langs->trans(\"projectReport\");\n\t$help_url = \"EN:Module_Projects|FR:Module_Projets|ES:M&oacute;dulo_Proyectos\";\n\n\t$morehtmlref = '<div class=\"refidno\">';\n\t// Title\n\t$morehtmlref .= $project->title;\n\t// Thirdparty\n\tif ($project->thirdparty->id > 0)\n\t{\n\t\t$morehtmlref .= '<br>'.$langs->trans('ThirdParty').' : '.$project->thirdparty->getNomUrl(1, 'project');\n\t}\n\t$morehtmlref .= '</div>';\n\n\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/projet/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\n\tif($hidetab != 1){\n        dol_banner_tab($project, 'projectSelected', $linkback, ($user->socid ? 0 : 1), 'ref','ref',$morehtmlref);\n    }\n\n\tprint '<div class=\"underbanner clearboth\"></div>';\n\n\tdol_fiche_end();\n}\n\n$querryRes = '';\nif ($projectSelectedId   &&!empty($dateStart)) {\n    if ($exportfriendly){\n        $querryRes .= $reportStatic->getHTMLreportExport();\n    }else {\n        $querryRes .= $reportStatic->getHTMLreport($short);\n    }\n}\n\n$head = timesheet_report_prepare_head( 'project', $projectSelectedId, $hidetab );\nprint dol_get_fiche_head( $head, $reporttab, $langs->trans( 'TimeSpent' ), - 1, 'clock' );\n$form_output = '';\n\n$form_output .= '<form action=\"?action=reportproject'.(($optioncss != '')?'&amp;optioncss='.$optioncss:'').'\" method = \"POST\">\n        <table class=\"noborder\"  width=\"100%\">\n        <tr>\n        '.($hidetab == 1?'<td>'.$langs->trans('Project').'</td>':'').'\n        <td>'.$langs->trans('DateStart').'</td>\n        <td>'.$langs->trans('DateEnd').'</td>\n        <td>'.$langs->trans('Mode').'</td>\n        <td>'.$langs->trans('Options').'</td>\n        <td></td>\n        </tr>\n        <tr >';\n\nif($hidetab == 1){\n        $form_output .='<td><select  name = \"projectSelected\">';\n// select project\n    foreach ($projectList as $pjt) {\n        $form_output .= '<option value = \"'.$pjt[\"value\"].'\" '\n            .(($projectSelectedId == $pjt[\"value\"])?\"selected\":'').' >'.$pjt[\"label\"].'</option>'.\"\\n\";\n    }\n    if(count($projectList)>1){\n        $form_output .= '<option value = \"-999\" '\n        .(($projectSelectedId == \"-999\")?\"selected\":'').' >'.$langs->trans('All').'</option>'.\"\\n\";\n    }\n\n    $form_output .= '</select></td>';\n    $form_output .= '<input type = \"hidden\" name = \"hidetab\" value = 1 />';\n}else{\n    $form_output .= '<input type = \"hidden\" name = \"projectSelected\" value = \"'.$projectSelectedId.'\" />';\n\n}\n//}\n// select start date\n$form_output .= '<td>'.$form->select_date($dateStart, 'dateStart', 0, 0, 0, \"\", 1, 1, 1).\"</td>\";\n// select end date\n$form_output .= '<td>'.$form->select_date($dateEnd, 'dateEnd', 0, 0, 0, \"\", 1, 1, 1).\"</td>\";\n//$form_output .= '<td> '.$htmlother->select_month($month, 'month').' - '.$htmlother->selectyear($year, 'year', 0, 10, 3)\n// Select mode\n$form_output .= '<td><input type = \"radio\" name = \"mode\" value = \"UTD\" '.($mode == 'UTD'?'checked':'');\n$form_output .= '> '.$langs->trans('User').' / '.$langs->trans('Task').' / '.$langs->trans('Date').'<br>';\n$form_output .= '<input type = \"radio\" name = \"mode\" value = \"UDT\" '.($mode == 'UDT'?'checked':'');\n$form_output .= '> '.$langs->trans('User').' / '.$langs->trans('Date').' / '.$langs->trans('Task').'<br>';\n$form_output .= '<input type = \"radio\" name = \"mode\" value = \"DUT\" '.($mode == 'DUT'?'checked':'');\n$form_output .= '> '.$langs->trans('Date').' / '.$langs->trans('User').' / '.$langs->trans('Task').'<br>';\n\n $form_output .= '</td>';\n// select short\n$form_output .= ' <td><input type = \"checkbox\" name = \"short\" value = \"1\" ';\n$form_output .= (($short == 1)?'checked>':'>').$langs->trans('short').'</br>' ;\n// Select invoiceable only\n$form_output .= '<input type = \"checkbox\" name = \"invoicabletaskOnly\" value = \"1\" ';\n$form_output .= (($invoicabletaskOnly == 1)?'checked>':'>').$langs->trans('InvoicableOnly').'</br>';\n// Select Export friendly\n$form_output .= '<input type = \"checkbox\" name = \"exportfriendly\" value = \"1\" ';\n$form_output .= (($exportfriendly == 1)?'checked>':'>').$langs->trans('exportfriendly').'</br>';\n// Select show invoice\n$form_output .= '<input type = \"checkbox\" name = \"invoicedcol\" value = \"1\" ';\n$form_output .= (($invoicedCol == 1)?'checked>':'>'). $langs->trans('reportInvoicedCol').'</br>';\n// Select Export friendly\n$form_output .= '<input type = \"checkbox\" name = \"ungroup\" value = \"1\" ';\n$form_output .= (($ungroup == 1)?'checked>':'>').$langs->trans('reportUngroup').'</td>';\n\n $form_output .= '</tr></table>';\n\n //submit\n $model = $conf->global->TIMESHEET_EXPORT_FORMAT;\n $form_output .= '<input class = \"butAction\" type = \"submit\" value = \"'.$langs->trans('getReport').'\">';\nif (!empty($querryRes) && ($user->rights->facture->creer\n    || version_compare(DOL_VERSION, \"3.7\") <= 0))\n        $form_output .= '<a class = \"butAction\" href = \"TimesheetProjectInvoice.php?step=0&dateStart='\n            .dol_print_date($dateStart, 'dayxcard').'&invoicabletaskOnly='\n            .$invoicabletaskOnly.'&dateEnd='.dol_print_date($dateEnd, 'dayxcard')\n            .'&projectid='.$projectSelectedId.'\" >'.$langs->trans('Invoice').'</a>';\n\nif (!empty($querryRes))$form_output .=\n    '<a class = \"butAction\" href=\"?action=getpdf&dateStart='\n    .dol_print_date($dateStart, 'dayxcard').'&dateEnd='\n    .dol_print_date($dateEnd, 'dayxcard').'&projectSelected='\n    .$projectSelectedId.'&mode='.$mode.'&invoicabletaskOnly='.$invoicabletaskOnly\n    .\"&hidetab=\".$hidetab.'&ungroup='.$ungroup.'\" >'.$langs->trans('TimesheetPDF').'</a>';\nif (!empty($querryRes) && $conf->global->MAIN_MODULE_EXPORT)$form_output .=\n    '<a class = \"butAction\" href=\"?action=getExport&dateStart='\n    .dol_print_date($dateStart, 'dayxcard').'&dateEnd='\n    .dol_print_date($dateEnd, 'dayxcard').'&projectSelected='.$projectSelectedId\n    .'&mode='.$mode.'&model='.$model.'&invoicabletaskOnly='.$invoicabletaskOnly\n    .\"&hidetab=\".$hidetab.'&ungroup='.$ungroup.'\" >'.$langs->trans('Export').'</a>';\nif (!empty($querryRes))$form_output .=\n    '<a class = \"butAction\" href=\"?action=reportproject&dateStart='\n    .dol_print_date($dateStart, 'dayxcard').'&dateEnd='\n    .dol_print_date($dateEnd, 'dayxcard').'&projectSelected='.$projectSelectedId\n    .'&mode='.$mode.'&invoicabletaskOnly='.$invoicabletaskOnly\n    .\"&hidetab=\".$hidetab.'&ungroup='.$ungroup.'\" >'.$langs->trans('Refresh').'</a>';\n$form_output .= '</form>';\nif (!($optioncss != '' && !empty($_POST['userSelected']))) echo $form_output;\necho $querryRes;\n/*\n// List of available export formats\nprint '<table class=\"noborder\" width=\"100%\">';\nprint '<tr class=\"liste_titre\">';\nprint '<td class=\"titlefield\">'.$langs->trans(\"AvailableFormats\").'</td>';\nprint '<td>'.$langs->trans(\"LibraryUsed\").'</td>';\nprint '<td align=\"right\">'.$langs->trans(\"LibraryVersion\").'</td>';\nprint '</tr>'.\"\\n\";\n\n$liste = $objmodelexport->liste_modeles($db);\n$listeall = $liste;\nforeach ($listeall as $key => $val)\n{\n    if (preg_match('/__\\(Disabled\\)__/', $listeall[$key]))\n    {\n        $listeall[$key]=preg_replace('/__\\(Disabled\\)__/','('.$langs->transnoentitiesnoconv(\"Disabled\").')', $listeall[$key]);\n        unset($liste[$key]);\n    }\n\n    print '<tr class=\"oddeven\">';\n    print '<td width=\"16\">'.img_picto_common($key, $objmodelexport->getPictoForKey($key)).' ';\n    $text = $objmodelexport->getDriverDescForKey($key);\n    $label = $listeall[$key];\n    print $form->textwithpicto($label, $text).'</td>';\n    print '<td>'.$objmodelexport->getLibLabelForKey($key).'</td>';\n    print '<td align=\"right\">'.$objmodelexport->getLibVersionForKey($key).'</td>';\n    print '</tr>'.\"\\n\";\n}\nprint '</table>';*/\nllxFooter();\n$db->close();\n", "<?php\n/*\n * Copyright (C) 2015 delcroip <patrick@pmpd.eu>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\ninclude 'core/lib/includeMain.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';\nrequire_once 'core/lib/timesheet.lib.php';\nrequire_once 'class/TimesheetReport.class.php';\nrequire_once './core/modules/pdf/pdf_rat.modules.php';\n//require_once DOL_DOCUMENT_ROOT.'/core/modules/export/modules_export.php';\n$form_output = new Form($db);\n$htmlother = new FormOther($db);\n$userid = is_object($user)?$user->id:$user;\n$id = GETPOST('id', 'int');\n$action = GETPOST('action', 'alpha');\n$userIdSelected = GETPOST('userSelected', 'int');\n$exportFriendly = GETPOST('exportFriendly', 'alpha');\nif (empty($userIdSelected))$userIdSelected = $userid;\n$exportfriendly = GETPOST('exportfriendly', 'alpha');\n$optioncss = GETPOST('optioncss', 'alpha');\n$admin = $user->admin || $user->rights->timesheet->report->admin || $user->rights->timesheet->timesheet->admin;\nif (!$user->rights->timesheet->report->user && !$admin) {\n    $accessforbidden = accessforbidden(\"You don't have the report user or admin right\");\n}\n// Load translation files required by the page\n$langs->loadLangs(\n\tarray(\n\t\t'main',\n\t\t'projects',\n//\t\t'companies',\n\t\t'timesheet@timesheet',\n\t)\n);\n\n\n//find the right week\n//$toDate = GETPOST('toDate', 'alpha');\n//$toDateday = (!empty($toDate) && $action == 'goToDate')? GETPOST('toDateday', 'int'):0;// to not look for the date if action not goTodate\n//$toDatemonth = GETPOST('toDatemonth', 'int');\n//$toDateyear = GETPOST('toDateyear', 'int');\n$mode = GETPOST('mode', 'alpha');\n$short = GETPOST('short', 'int');\n$invoicedCol = GETPOST('invoicedcol', 'int');\n$ungroup = GETPOST('ungroup', 'int');\n$model = GETPOST('model', 'alpha');\nif (empty($mode)){\n    $mode = 'PTD';\n    $ungroup = $conf->global->TIMESHEET_REPORT_UNGROUP;\n    $invoicedCol = $conf->global->TIMESHEET_REPORT_INVOICED_COL;\n}\n$short = GETPOST('short', 'int');\n$invoicedCol = GETPOST('invoicedcol', 'int');\n$ungroup = GETPOST('ungroup', 'int');\n$show_all = GETPOST('showAll', 'int');\n\n//$userSelected = $userList[$userIdSelected];\n$year = GETPOST('year', 'int');\n//$month = GETPOST('month', 'int');;//strtotime(str_replace('/', '-', $_POST['Date']));\n//$firstDay = ($month)?strtotime('01-'.$month.'-'. $year):strtotime('first day of previous month');\n//$lastDay = ($month)?strtotime('last day of this month', $firstDay):strtotime('last day of previous month');\n$dateStart = strtotime(GETPOST('dateStart', 'alpha'));\n$dateStartday = GETPOST('dateStartday', 'int');// to not look for the date if action not goTodate\n$dateStartmonth = GETPOST('dateStartmonth', 'int');\n$dateStartyear = GETPOST('dateStartyear', 'int');\n$dateStart = parseDate($dateStartday, $dateStartmonth, $dateStartyear, $dateStart);\n$dateEnd = strtotime(GETPOST('dateEnd', 'alpha'));\n$dateEndday = GETPOST('dateEndday', 'int');// to not look for the date if action not goTodate\n$dateEndmonth = GETPOST('dateEndmonth', 'int');\n$reporttab = GETPOST('reporttab', 'alpha');\n$dateEndyear = GETPOST('dateEndyear', 'int');\n$dateEnd = parseDate($dateEndday, $dateEndmonth, $dateEndyear, $dateEnd);\n$invoicabletaskOnly = GETPOST('invoicabletaskOnly', 'int');\nif (empty($dateStart) || empty($dateEnd) || empty($userIdSelected)) {\n    $step = 0;\n    $dateStart = strtotime(\"first day of previous month\", time());\n    $dateEnd = strtotime(\"last day of previous month\", time());\n}\n\n// if the user can see ts for other the user id is diferent\n$userIdlist = array();\n$userIdlistfull = getSubordinates($db, $userid, 2, array(), $admin ? ADMIN : ALL, $entity = '1', $admin);\n$userIdlistfull[] = $userid;\nif ($show_all)\n{\n    \n    $userIdlist = $userIdlistfull;\n}else if (!empty($userIdSelected)  && $userIdSelected <> $userid) {\n\n    if (in_array($userIdSelected, $userIdlistfull) || $admin ) {\n        $userIdlist[] = $userIdSelected;\n    } else{\n        setEventMessage($langs->transnoentitiesnoconv(\"NotAllowed\"), 'errors');\n        unset($action);\n        $userIdlist[] = $userid;\n    }\n} else{\n    $userIdlist[] = $userid;\n    $userIdSelected = $userid;\n}\n\n$reportStatic = new TimesheetReport($db);\n$reportStatic->initBasic('', $userIdlist, $reportName, $dateStart, $dateEnd,\n    $mode, $invoicabletaskOnly,$short,$invoicedCol,$ungroup);\nif ($action == 'getpdf') {\n    $pdf = new pdf_rat($db);\n    //$outputlangs = $langs;\n    if ($pdf->writeFile($reportStatic, $langs)>0) {\n        header(\"Location: \".DOL_URL_ROOT.\"/document.php?modulepart=timesheet&file=reports/\"\n        .dol_sanitizeFileName($reportStatic->name) . \".pdf\");\n        return;\n    }\n    ob_end_flush();\n    exit();\n} elseif ($action == 'getExport'){\n    $max_execution_time_for_export = (empty($conf->global->EXPORT_MAX_EXECUTION_TIME)?\n        300:$conf->global->EXPORT_MAX_EXECUTION_TIME);    // 5mn if not defined\n    $max_time = @ini_get(\"max_execution_time\");\n    if ($max_time && $max_time < $max_execution_time_for_export)\n    {\n        @ini_set(\"max_execution_time\", $max_execution_time_for_export); // This work only if safe mode is off. also web servers has timeout of 300\n    }\n    $name = $reportStatic->buildFile($model, false);\n    if (!empty($name)){\n        header(\"Location: \".DOL_URL_ROOT.\"/document.php?modulepart=export&file=\".$name);\n        return;\n    }\n    ob_end_flush();\n    exit();\n}\n\n\nllxHeader('', $langs->trans('userReport'), '');\n\n$head = timesheet_report_prepare_head( 'user', $user->id );\nprint dol_get_fiche_head( $head, $reporttab, $langs->trans( 'TimeSpent' ), - 1, 'clock' );\n\n$form_output = '';\n\n$form_output .= '<form action=\"?action=reportUser'.(($optioncss != '')?'&amp;optioncss='.$optioncss:'').'\" method = \"POST\">\n        <table class = \"noborder\"  width = \"100%\">\n        <tr>\n        <td>'.$langs->trans('User').'</td>\n        <td>'.$langs->trans('DateStart').'</td>\n        <td>'.$langs->trans('DateEnd').'</td>\n        <td>'.$langs->trans('Mode').'</td>\n        <td>'.$langs->trans('Options').'</td>\n        </tr>\n        <tr >\n        <td>\n        ';\nif($admin){\n    $form_output .= $form->select_dolusers($userIdSelected, 'userSelected');\n\n} else {\n    $form_output .= $form->select_dolusers($userIdSelected, 'userSelected', 0, null, 0, $userIdlistfull);\n}\nif (count($userIdlistfull)>1) {\n    $form_output .= ' <br><input type = \"checkbox\" name = \"showAll\" value = \"1\" ';\n    $form_output .= ($show_all?'checked >':'>').$langs->trans('All') ;\n}\n\n\n//$mode = 'PTD';\n$querryRes = '';\nif (!empty($userIdSelected)\n        &&!empty($dateEnd) && !empty($dateStart))\n{\n    if ($exportfriendly){\n        $querryRes .= $reportStatic->getHTMLreportExport();\n    }else {\n        $querryRes .= $reportStatic->getHTMLreport($short,\n            \"User report \".dol_print_date($dateStart, 'day').'-'\n                .dol_print_date($dateEnd, 'day'));\n    }\n}\n\n$form_output .= '<td>'.$form->select_date($dateStart, 'dateStart', 0, 0, 0, \"\", 1, 1, 1).\"</td>\";\n// select end date\n$form_output .= '<td>'.$form->select_date($dateEnd, 'dateEnd', 0, 0, 0, \"\", 1, 1, 1).\"</td>\";\n//$form_output .= '<td>'.$htmlother->select_month($month, 'month').' - '.$htmlother->selectyear($year, 'year', 0, 10, 3).' </td>';\n// Select mode\n$form_output .= '<td><input type = \"radio\" name = \"mode\" value = \"PTD\" '.($mode == 'PTD'?'checked':'');\n$form_output .= '> '.$langs->trans('Project').' / '.$langs->trans('Task').' / '.$langs->trans('Date').'<br>';\n$form_output .= '<input type = \"radio\" name = \"mode\" value = \"PDT\" '.($mode == 'PDT'?'checked':'');\n$form_output .= '> '.$langs->trans('Project').' / '.$langs->trans('Date').' / '.$langs->trans('Task').'<br>';\n$form_output .= '<input type = \"radio\" name = \"mode\" value = \"DPT\" '.($mode == 'DPT'?'checked':'');\n$form_output .= '> '.$langs->trans('Date').' / '.$langs->trans('Project').' / '.$langs->trans('Task').'<br>';\n $form_output .= '</td>';\n// select short\n$form_output .= ' <td><input type = \"checkbox\" name = \"short\" value = \"1\" ';\n$form_output .= (($short == 1)?'checked>':'>').$langs->trans('short').'</br>' ;\n// Select invoiceable only\n$form_output .= '<input type = \"checkbox\" name = \"invoicabletaskOnly\" value = \"1\" ';\n$form_output .= (($invoicabletaskOnly == 1)?'checked>':'>').$langs->trans('InvoicableOnly').'</br>';\n// Select Export friendly\n$form_output .= '<input type = \"checkbox\" name = \"exportfriendly\" value = \"1\" ';\n$form_output .= (($exportfriendly == 1)?'checked>':'>').$langs->trans('exportfriendly').'</br>';\n// Select show invoice\n$form_output .= '<input type = \"checkbox\" name = \"invoicedcol\" value = \"1\" ';\n$form_output .= (($invoicedCol == 1)?'checked>':'>'). $langs->trans('reportInvoicedCol').'</br>';\n// Select Export friendly\n$form_output .= '<input type = \"checkbox\" name = \"ungroup\" value = \"1\" ';\n$form_output .= (($ungroup == 1)?'checked>':'>').$langs->trans('reportUngroup').'</td>';\n\n $form_output .= '</tr></table>';\n\n////print '<div class=\"tabsAction\">';\n//print '<div class=\"inline-block divButAction\"><input type=\"submit\" class=\"button butAction\" value=\"' . $langs->trans( 'Save' ) . '\" /></div>';\n//print \"</div>\";\n\n\n$form_output  .= '<div class=\"tabsAction\"><div class=\"center\">';\n$form_output  .= '<input class=\"butAction\" type=\"submit\" value=\"' . $langs->trans( 'getReport' ) . '\">';\n$model = $conf->global->TIMESHEET_EXPORT_FORMAT;\n//if(!empty($querryRes))$form_output .= '<a class = \"butAction\" href=\"?action=getpdf&dateStart='.dol_print_date($dateStart, 'dayxcard').'&dateEnd='.dol_print_date($dateEnd, 'dayxcard').'&projectSelected='.$projectSelectedId.'&mode=DTU&invoicabletaskOnly='.$invoicabletaskOnly.'\" >'.$langs->trans('TimesheetPDF').'</a>';\nif ( ! empty( $querryRes ) && $conf->global->MAIN_MODULE_EXPORT ) {\n\t$form_output .= '<a class = \"butAction\" href=\"?action=getExport&dateStart=' \n        .dol_print_date( $dateStart, 'dayxcard' ) \n        .'&dateEnd=' . dol_print_date( $dateEnd, 'dayxcard' ) \n        .'&userSelected=' . $userIdSelected \n        .'&mode='.$mode.'&model=' . $model \n        .'&invoicabletaskOnly=' . $invoicabletaskOnly \n        .'&ungroup=' . $ungroup \n        .'&showAll=' . $show_all \n        . '\" >' . $langs->trans( 'Export' ) . '</a>';\n}\nif ( ! empty( $querryRes ) ) {\n\t$form_output .= '<a class = \"butAction\" href=\"?action=getpdf&dateStart=' \n    . dol_print_date( $dateStart, 'dayxcard' ) \n    . '&dateEnd=' . dol_print_date( $dateEnd, 'dayxcard' ) \n    . '&userSelected=' . $userIdSelected \n    . '&mode='.$mode.'&model=' . $model \n    . '&invoicabletaskOnly='  . $invoicabletaskOnly \n    . '&ungroup=' . $ungroup \n    . '&showAll=' . $show_all \n    . '\" >' . $langs->trans( 'PDF' ) . '</a>';\n}\n$form_output .= '</div></div></form>';\n\nif ( ! ( $optioncss != '' && ! empty( $userIdSelected ) ) ) {\n\techo $form_output;\n}\n// section to generate\nif ( ! empty( $querryRes ) ) {\n\techo $querryRes;\n}\n\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2016 delcroip <patrick@pmpd.eu>\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// hide left menu\n//$_POST['dol_hide_leftmenu'] = 1;\n// Change this following line to use the correct relative path (../, ../../, etc)\ninclude 'core/lib/includeMain.lib.php';\nrequire_once 'core/lib/timesheet.lib.php';\n\n$role_key = array_search('1', array_slice($apflows, 1));\nif ($apflows[1] == 0 && $role_key!== false) {\n    // redirect to the correct page\n    $role_key++;\n    header(\"location:TimesheetOtherApproval.php?role=\".$roles[$role_key]);//TOBETESTED\n}\nrequire_once 'core/lib/timesheet.lib.php';\nrequire_once 'core/lib/generic.lib.php';\nrequire_once 'class/TimesheetUserTasks.class.php';\n$admin = $user->admin || $user->rights->timesheet->approval->admin;\nif (!$user->rights->timesheet->approval->team && !$admin) {\n    $accessforbidden = accessforbidden(\"you need to have the team or admin approver rights\");\n}\n//$userId = GETPOST('userid');\n$userId = is_object($user)?$user->id:$user;\n$action = GETPOST('action', 'alpha');\n//should return the XMLDoc\n$ajax = GETPOST('ajax', 'int');\n$xml = GETPOST('xml', 'int');\nif (!is_numeric($offset))$offset = 0;\n$print = (GETPOST('optioncss', 'alpha') == 'print')?true:false;\n$current = GETPOST('target', 'int');\nif ($current == ''){\n    $current = 0;\n}\n//$toDate = GETPOST('toDate');\n$token = GETPOST('token', 'alpha');\n//$userid = is_object($user)?$user->id:$user;\n// Load traductions files requiredby by page\n//$langs->load(\"companies\");\n$langs->load(\"main\");\n$langs->load(\"projects\");\n$langs->load('timesheet@timesheet');\n/*******************************************************************\n* ACTIONS\n*\n* Put here all code to do according to value of \"action\" parameter\n********************************************************************/\nif ($action == 'submit') {\n    if (isset($_SESSION['timesheet'][$token])) {\n       // $_SESSION['timesheet'][$token]['tsUser']\n        $tsApproved = 0;\n        $tsRejected = 0;\n        $ret = 0;\n        $errors = 0;\n        $count = 0;\n        $appflowOn = in_array('1', array_slice($apflows, 2));\n        //$task_timesheet->db = $db;\n        if (!empty($_POST['approval'])) {\n            $notes = GETPOST('note', 'array');\n            $notesTask = GETPOST('notesTask', 'array');\n            $progressTask = GETPOST('progressTask', 'array');\n            $approvals = $_POST['approval'];\n\n            foreach ($_SESSION['timesheet'][$token]['tsUser'] as $tsuId => $tsStatus) {\n                \n                $curTaskTimesheet = new TimesheetUserTasks($db);\n                $count++;\n                $curTaskTimesheet->fetch($tsuId);\n                $arrayTTA = $curTaskTimesheet->fetchTaskTimesheet();\n                $curTaskTimesheet->token = $token;\n                $curTaskTimesheet->updateActuals($arrayTTA, $notesTask[$tsuId],$progressTask[$tsuId]);\n                //if ($approvals[$key]!=$tsUser)\n                switch($approvals[$tsuId]) {\n                    case 'Approved':\n                        $ret = $curTaskTimesheet->setStatus($user, (($appflowOn>0)?UNDERAPPROVAL:APPROVED), $tsuId);\n                        if ($ret<0)$errors++;\n                        else $tsApproved++;\n                        break;\n                    case 'Rejected':\n                        $ret = $curTaskTimesheet->setStatus($user, REJECTED, $tsuId);\n                        if ($ret<0)$errors++;\n                        else $tsRejected++;\n                        break;\n                    case 'Submitted':\n                    default:\n                        break;\n                }\n                if ($curTaskTimesheet->note!=$notes[$curTaskTimesheet->appId]) {\n                    $curTaskTimesheet->note = $notes[$curTaskTimesheet->appId];\n                    $curTaskTimesheet->update($user);\n                }\n                TimesheetsetEventMessage($_SESSION['timesheet'][$token]);\n            }\n            if (($tsRejected+$tsApproved)>0) {\n                $current--;\n            }\n            if ($ret >= 0) {\n\n                if ($tsApproved)\n                    setEventMessage($langs->transnoentitiesnoconv(\"NumberOfTimesheetApproved\").$tsApproved);\n                if ($tsRejected)\n                    setEventMessage($langs->transnoentitiesnoconv(\"NumberOfTimesheetRejected\").$tsRejected);\n                if ($errors)\n                    setEventMessage($langs->transnoentitiesnoconv(\"NumberOfErrors\").$errors);\n            } else {\n                if ($errors == 0) {\n                    setEventMessage($langs->transnoentitiesnoconv(\"NothingChanged\"), 'warning');\n                } else {\n                    setEventMessage($langs->transnoentitiesnoconv(\"InternalError\").':'.$ret, 'errors');\n                }\n            }\n        } else {\n                setEventMessage($langs->transnoentitiesnoconv(\"NothingChanged\"), 'warning');// shoudn't happend\n        }\n    } else {\n            setEventMessage($langs->transnoentitiesnoconv(\"InternalError\"), 'errors');\n    }\n}\n\nif (!empty($token)) {\n    unset($_SESSION['timesheet'][$token]);\n}\n$token = getToken();\n$subId = ($admin)?'all':getSubordinates($db, $userId, 2, array($userId), TEAM);\n$selectList = getSelectAps($subId);\n$level = intval($conf->global->TIMESHEET_MAX_APPROVAL);\n$offset = 0;\nif (is_array($selectList)&& count($selectList)) {\n    if ($current >= count($selectList))$current = 0;\n    $offset = 0;\n    for($i = 0;$i<$current;$i++)\n    {\n        $offset += $selectList[$i]['count'];\n    }\n    $level = $selectList[$i]['count'];\n}\n$objectArray = getTStobeApproved($level, $offset, TEAM, $subId);\nif (is_array($objectArray)) {\n    $firstTimesheetUser = reset($objectArray);\n    //$curUser = $firstTimesheetUser->userId;\n    //$nextUser = $firstTimesheetUser->userId;\n}\n$i = 0;\n//\n/***************************************************\n* VIEW\n*\n* Put here all code to build page\n****************************************************/\n/*\nif ($xml) {\n    //renew timestqmp\n    ob_clean();\n   header(\"Content-type: text/xml;charset = utf-8\");\n  //  echo $task_timesheet->GetTimeSheetXML($userId, 5);//fixme\n    ob_end_flush();\nexit();\n}*/\n$TTU = new TimesheetUserTasks($db);\n$head = ($print)?'<style type = \"text/css\" >@page { size: A4 landscape;marks:none;margin: 1cm ;}</style>':'';\n$morejs = array(\"/timesheet/core/js/jsparameters.php\", \"/timesheet/core/js/timesheet.js?\"\n    .$conf->global->TIMESHEET_VERSION);\nllxHeader($head, $langs->trans('Timesheet'), '', '', '', '', $morejs);\n//calculate the week days\nshowTimesheetApTabs(TEAM);\necho '<div id = \"Team\" class = \"tabBar\">';\n//tokentp = time();\nif (is_object($firstTimesheetUser)) {\n    if (!$print) echo getHTMLNavigation($optioncss, $selectList, $current);\n    $Form .= $firstTimesheetUser->getHTMLFormHeader($ajax);\n    foreach ($objectArray as $key => $TTU) {\n\n        if ($i<$level) {\n            $TTU->fetchTaskTimesheet();\n    //$ret += $this->getTaskTimeIds();\n    //FIXME module holiday should be activated ?\n            $TTU->fetchUserHolidays();\n            $Form .= $TTU->userName.\" - \".dol_print_date($TTU->date_start, 'day');\n            $Form .= $TTU->getHTML(false, true);\n            $_SESSION['timesheet'][$token]['tsUser'][$TTU->id] = $TTU->status;\n            if (!$print) {\n                if ($conf->global->TIMESHEET_ADD_DOCS == 1) {\n                    require_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\n                    include_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n                    $object = $TTU;\n                    $modulepart = 'timesheet';\n                    $permission = 1;//$user->rights->timesheet->add;\n                    $ref = dol_sanitizeFileName($object->ref);\n                    $upload_dir = $conf->timesheet->dir_output.'/users/'\n                        .get_exdir($object->id, 2, 0, 0, $object, 'timesheet').$ref;\n                    $filearray = dol_dir_list($upload_dir, 'files', 0, '', '\\.meta$', $sortfield, \n                        (strtolower($sortorder) == 'desc'?SORT_DESC:SORT_ASC), 1);\n                    //$param = 'action = submitfile&id='.$object->id;\n                    $param = '';\n                    $disablemove = 1;\n                    $formfile = new FormFile($db);\n                    ob_start();\n                    $formfile->list_of_documents(\n                            $filearray, $object, $modulepart, $param, \n                            0, '',  0, 0, '', 0, '', '', 0, 0, \n                            $upload_dir, $sortfield, $sortorder, $disablemove);\n                    $Form .= ob_get_contents().'<br>'.\"\\n\";\n                    ob_end_clean();\n                }\n                $Form .= '<label class = \"butAction\"><input type = \"radio\"  name = \"approval['\n                    .$TTU->id.']\" value = \"Approved\" ><span>'\n                    .$langs->trans('approved').'</span></label>'.\"\\n\";\n                $Form .= '<label class = \"butAction\"><input type = \"radio\"  name = \"approval['\n                    .$TTU->id.']\" value = \"Rejected\" ><span>'\n                        .$langs->trans('rejected').'</span></label>'.\"\\n\";\n                $Form .= '<label class = \"butAction\"><input type = \"radio\"  name = \"approval['\n                    .$TTU->id.']\" value = \"Submitted\" checked ><span>'\n                        .$langs->trans('submitted').'</span></label>'.\"\\n\";\n                $Form .= '<br><br><br>'.\"\\n\";\n            }\n            $i++;//use for the offset\n        }\n    }\n   // $offset += $i;\n    if (!$print) {\n        $firstTimesheetUser->token = $token;\n        $Form .= $firstTimesheetUser->getHTMLFooterAp($current);\n    } else {\n        $Form .= '<table width = \"100%\"><tr><td align = \"center\">'\n            .$langs->trans('customerSignature').'</td><td align = \"center\">'\n            .$langs->trans('managerSignature').'</td><td align = \"center\">'\n            .$langs->trans('employeeSignature').'</td></tr></table>';\n    }\n} else{\n    \n    $Form .= '<h1>'.$langs->trans('NothingToValidate').'</h1>';\n    $staticTs = new TimesheetUserTasks($db);\n    $staticTs->token = $token;\n    $Form .= $staticTs->getHTMLFooterAp($current);\n}\n//Javascript\n$timetype = $conf->global->TIMESHEET_TIME_TYPE;\n//$Form .= ' <script type = \"text/javascript\" src = \"timesheet.js\"></script>'.\"\\n\";\n$Form .= '<script type = \"text/javascript\">'.\"\\n\\t\";\n$Form .= 'updateAll('.$conf->global->TIMESHEET_HIDE_ZEROS.');';\n$Form .= \"\\n\\t\".'</script>'.\"\\n\";\n// $Form .= '</div>';//TimesheetPage\nprint $Form;\necho '</div>';\n// End of page\nllxFooter();\n$db->close();\n/* Funciton to fect timesheet to be approuved.\n*  @param    int               $level            number of ts to fetch\n*  @param    int               $offset           number of ts to skip\n*  @param    int               $role             team, project, customer ...\n*  @param    array(int)             $role             if team, array fo subordinate_id, array of task_id for other\n*  @return   array(task_timesheet)                     result\n*/\nfunction getTStobeApproved($level, $offset, $role, $subId)\n{\n    global $db, $conf;\n    if ((!is_array($subId) || !count($subId)) && $subId!='all')return array();\n    $byWeek = $conf->global->TIMESHEET_APPROVAL_BY_WEEK;\n    //if ($role = 'team')\n    $sql = \"SELECT *\";\n    if ($byWeek == 2) {\n        if ($db->type!='pgsql') {\n            $sql .= \", CONCAT(MONTH(date_start), '/', YEAR(date_start), '#', fk_userid) as usermonth\";\n        } else{\n            $sql .= \", CONCAT(date_part('month', date_start), '/',\"\n                .\" date_part('year', date_start), '#', fk_userid) as usermonth\";\n        }\n    }\n    $sql .= \" FROM \".MAIN_DB_PREFIX.\"project_task_timesheet as ts\";\n    $sql .= ' WHERE (ts.status='.SUBMITTED.' OR ts.status='.CHALLENGED.') ';\n    switch($role) {\n        case TEAM:\n            if ($subId!='all') $sql .= ' AND fk_userid in ('.implode(', ', $subId).')';\n //          $sql .= ' AND recipient = \"'.$role.'\"';\n            break;\n    }\n    if ($byWeek == 1) {\n        $sql .= ' ORDER BY date_start DESC, fk_userid DESC';\n    } elseif ($byWeek == 0) {\n        $sql .= ' ORDER BY fk_userid DESC, date_start DESC';\n    } elseif ($byWeek == 2) {\n        if ($db->type!='pgsql') {\n            $sql .= ' ORDER BY YEAR(date_start) DESC, MONTH(date_start) DESC, fk_userid DESC';\n        } else {\n            $sql .= ' ORDER BY date_part(\\'year\\', date_start) DESC, '\n                .'ate_part(\\'month\\', date_start) DESC, fk_userid DESC';\n        }\n    }\n    $sql .= ' LIMIT '.$level;\n    $sql .= ' OFFSET '.$offset;\n    dol_syslog(\"timesheet::getTStobeApproved sql=\".$sql, LOG_DEBUG);\n    $tsList = array();\n    $resql = $db->query($sql);\n    if ($resql) {\n        $num = $db->num_rows($resql);\n        $i = 0;\n        // Loop on each record found, so each couple (project id, task id)\n        while($i < $num)\n        {\n            $error = 0;\n            $obj = $db->fetch_object($resql);\n            $tmpTs = NEW TimesheetUserTasks($db, $obj->fk_userid);\n            $tmpTs->id = $obj->rowid;\n            $tmpTs->userId = $obj->fk_userid;\n            $tmpTs->date_start = $tmpTs->db->jdate($obj->date_start);\n            $tmpTs->ref = $tmpTs->date_start.'_'.$tmpTs->userId;\n            //$tmpTs->date_end = $tmpTs->db->jdate($obj->date_start);\n            $tmpTs->status = $obj->status;\n            $tmpTs->planned_workload = $obj->planned_workload;\n            $tmpTs->note = $obj->note;\n            $tmpTs->date_creation = $tmpTs->db->jdate($obj->date_creation);\n            $tmpTs->date_modification = $tmpTs->db->jdate($obj->date_modification);\n            $tmpTs->user_creation = $obj->fk_user_creation;\n            $tmpTs->user_modification = $obj->fk_user_modification;\n            $tmpTs->whitelistmode = 2;// no impact\n            $tmpTs->date_end = $tmpTs->db->jdate($obj->date_end);\n            //}\n            $i++;\n            $tsList[] = $tmpTs;\n        }\n        $db->free($resql);\n        return $tsList;\n    } else {\n            dol_print_error($db);\n            return -1;\n    }\n}\n/*\n * function to print the timesheet navigation header\n *\n *  @param    string               $optioncss            get print mode\n *  @param     int               $selectList           List of pages\n *  @param     object              $current                current page\n *  @return     string                                         HTML\n */\nfunction getHTMLNavigation($optioncss, $selectList, $current = 0)\n{\n    global $langs, $db;\n    $htmlSelect = '<select name = \"target\">';\n    foreach ($selectList as $key => $element) {\n        $htmlSelect .= ' <option value = \"'.$key.'\" '.(($current == $key)?'selected':'').'>'\n            .$element['label'].'</option>';\n    }\n    $htmlSelect .= '</select>';\n    $form = new Form($db);\n    $Nav = '<table class = \"noborder\" width = \"50%\">'.\"\\n\\t\".'<tr>'.\"\\n\\t\\t\".'<th>'.\"\\n\\t\\t\\t\";\n    if ($current!=0) {\n        $Nav .= '<a href=\"?action=goTo&target='.($current-1).'\"';\n        if ($optioncss != '')$Nav .= '&amp;optioncss='.$optioncss;\n        $Nav .= '\">  &lt;&lt;'.$langs->trans(\"Previous\").' </a>'.\"\\n\\t\\t\";\n    }\n    $Nav .= \"</th>\\n\\t\\t<th>\\n\\t\\t\\t\";\n    $Nav .= '<form name = \"goTo\" action=\"?action=goTo\" method = \"POST\" >'.\"\\n\\t\\t\\t\";\n    $Nav .= $langs->trans(\"GoTo\").': '.$htmlSelect.\"\\n\\t\\t\\t\";;\n    $Nav .= '<input type = \"submit\" value = \"Go\" /></form>'.\"\\n\\t\\t</th>\\n\\t\\t<th>\\n\\t\\t\\t\";\n    if ($current<count($selectList)) {\n        $Nav .= '<a href=\"?action=goTo&target='.($current+1);\n        if ($optioncss != '') $Nav .= '&amp;optioncss='.$optioncss;\n        $Nav .= '\">'.$langs->trans(\"Next\").' &gt;&gt;</a>';\n    }\n    $Nav .= \"\\n\\t\\t</th>\\n\\t</tr>\\n </table>\\n\";\n    return $Nav;\n}\n /*\n * function to get the Approval elible for this user\n *\n *  @param    object            $db             database objet\n *  @param    array(int)/int        $userids        array of manager id\n *  @return  array(int => String)                                array(ID => userName)\n */\nfunction getSelectAps($subId)\n{\n    if ((!is_array($subId) || !count($subId)) && $subId!='all')return array();\n    global $db, $langs, $conf;\n    $sql = '';\n    $sqlWhere .= ' WHERE ts.status  in ('.SUBMITTED.', '.CHALLENGED.')';\n    if ($subId!='all')$sqlWhere .= ' AND ts.fk_userid in ('.implode(', ', $subId).')';\n    if ($conf->global->TIMESHEET_APPROVAL_BY_WEEK == 1) {\n        $sql = 'SELECT COUNT(ts.date_start) as nb, ts.date_start as id, ';\n        $sql .= \" DATE_FORMAT(ts.date_start, '\".$langs->trans('Week').\" %u(%m/%Y)') as label\";\n        $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_timesheet as ts';\n        $sql .= ' JOIN '.MAIN_DB_PREFIX.'user as usr on ts.fk_userid = usr.rowid ';\n        $sql .= $sqlWhere;\n        $sql .= ' group by ts.date_start ORDER BY ts.date_start DESC';\n    } elseif ($conf->global->TIMESHEET_APPROVAL_BY_WEEK == 0) {\n        $sql = 'SELECT COUNT(ts.rowid) as nb, ts.fk_userid as id, ';\n        $sql .= \" MAX(CONCAT(usr.firstname, ' ', usr.lastname)) as label\";\n        $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_timesheet as ts';\n        $sql .= ' JOIN '.MAIN_DB_PREFIX.'user as usr on ts.fk_userid = usr.rowid ';\n        $sql .= $sqlWhere;\n        $sql .= ' group by ts.fk_userid ORDER BY ts.fk_userid DESC';\n    } else{\n        $sql = 'SELECT month, COUNT(rowid) as nb, month as id, ';\n        $sql .= ' month as label';\n        $sql .= ' FROM (SELECT DATE_FORMAT(ts.date_start, \\' %m/%Y\\') as month, ';\n        $sql .= ' ts.rowid as rowid';\n        $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_timesheet as ts';\n        //$sql .= ' JOIN '.MAIN_DB_PREFIX.'user as usr on ts.fk_userid = usr.rowid ';\n        $sql .= $sqlWhere.') AS T';\n        $sql .= ' group by month ORDER BY  RIGHT(month, 4) DESC, month DESC';\n    }\n    dol_syslog('timesheetAp::getSelectAps ', LOG_DEBUG);\n    $list = array();\n    $resql = $db->query($sql);\n    if ($resql) {\n        $i = 0;\n        $j = 0;\n        $num = $db->num_rows($resql);\n        while($i<$num)\n        {\n            $obj = $db->fetch_object($resql);\n            if ($obj) {\n                $j = 1;\n                $nb = $obj->nb;\n                // split the nb in x line to avoid going over the max approval\n                while($nb>$conf->global->TIMESHEET_MAX_APPROVAL)\n                {\n                    $list[] = array(\"id\"=>$obj->id, \"label\"=>$obj->label.' ('\n                        .$j.\"/\".ceil($obj->nb/$conf->global->TIMESHEET_MAX_APPROVAL).')', \n                        \"count\"=>$conf->global->TIMESHEET_MAX_APPROVAL);\n                    $nb -= $conf->global->TIMESHEET_MAX_APPROVAL;\n                    $j++;\n                }\n                // at minimum a row shoud gnerate one option\n                $list[] = array(\"id\"=>$obj->id, \"label\"=>$obj->label.' '\n                    .(($obj->nb>$conf->global->TIMESHEET_MAX_APPROVAL)?'('.$j.'/'\n                    .ceil($obj->nb/$conf->global->TIMESHEET_MAX_APPROVAL).')':''), \"count\"=>$nb);\n            }\n            $i++;\n        }\n    } else {\n        $error++;\n        dol_print_error($db);\n        $list = array();\n    }\n      return $list;\n}\n", "<?php\n/*\n * Copyright (C) 2007-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) Patrick Delcroix <patrick@pmpd.eu>\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *        \\file       dev/skeletons/skeleton_page.php\n *                \\ingroup    timesheet othermodule1 othermodule2\n *                \\brief      This file is an example of a php page\n *                                        Initialy built by build_class_from_table on 2016-03-26 09:52\n */\n//if (! defined('NOREQUIREUSER'))  define('NOREQUIREUSER', '1');\n//if (! defined('NOREQUIREDB'))    define('NOREQUIREDB', '1');\n//if (! defined('NOREQUIRESOC'))   define('NOREQUIRESOC', '1');\n//if (! defined('NOREQUIRETRAN'))  define('NOREQUIRETRAN', '1');\n//if (! defined('NOCSRFCHECK'))    define('NOCSRFCHECK', '1');                        // Do not check anti CSRF attack test\n//if (! defined('NOSTYLECHECK'))   define('NOSTYLECHECK', '1');                        // Do not check style html tag into posted data\n//if (! defined('NOTOKENRENEWAL')) define('NOTOKENRENEWAL', '1');                // Do not check anti POST attack test\n//if (! defined('NOREQUIREMENU'))  define('NOREQUIREMENU', '1');                        // If there is no need to load and show top and left menu\n//if (! defined('NOREQUIREHTML'))  define('NOREQUIREHTML', '1');                        // If we don't need to load the html.form.class.php\n//if (! defined('NOREQUIREAJAX'))  define('NOREQUIREAJAX', '1');\n//if (! defined(\"NOLOGIN\"))        define(\"NOLOGIN\", '1');                                // If this page is public (can be called outside logged session)\n// Change this following line to use the correct relative path (../, ../../, etc)\ninclude 'core/lib/includeMain.lib.php';\nif (!$user->rights->timesheet->approval->admin && !$user->admin) {\n    $accessforbidden = accessforbidden(\"you need to have the approver admin rights\");\n}\nrequire_once 'core/lib/generic.lib.php';\nrequire_once 'class/TimesheetUserTasks.class.php';\nrequire_once 'core/lib/timesheet.lib.php';\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n//document handling\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n//include_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\n// include conditionnally of the dolibarr version\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\n$PHP_SELF = $_SERVER['PHP_SELF'];\n// Load traductions files requiredby by page\n//$langs->load(\"companies\");\n$langs->load(\"timesheet@timesheet\");\n// Get parameter\n$id = GETPOST('id', 'int');\n$ref = GETPOST('ref', 'alpha');\n$action = GETPOST('action', 'alpha');\n$backtopage = GETPOST('backtopage', 'alpha');\n$cancel = GETPOST('cancel', 'alpha');\n$confirm = GETPOST('confirm', 'alpha');\n$token = GETPOST('$token', 'alpha');\n//// Get parameters\n$sortfield = GETPOST('sortfield', 'alpha');\n$sortorder = GETPOST('sortorder', 'alpha')?GETPOST('sortorder', 'alpha'):'ASC';\n$removefilter = isset($_POST[\"removefilter_x\"]) || isset($_POST[\"removefilter\"]);\n//$applyfilter = isset($_POST[\"search_x\"]) ;//|| isset($_POST[\"search\"]);\nif (!$removefilter) {\n    // Both test must be present to be compatible with all browsers {\n    $ls_userId = GETPOST('ls_userId', 'int');\n    if ($ls_userId == -1)$ls_userId = '';\n    $ls_date_start_month = GETPOST('ls_date_start_month', 'int');\n    $ls_date_start_year = GETPOST('ls_date_start_year', 'int');\n    $ls_status = GETPOST('ls_status', 'alpha');\n    if ($ls_status == -1)$ls_status = '';\n    $ls_target = GETPOST('ls_target', 'alpha');\n    if ($ls_target == -1)$ls_target = '';\n    $ls_project_tasktime_list = GETPOST('ls_project_tasktime_list', 'alpha');\n    $ls_user_approval = GETPOST('ls_user_approval', 'int');\n    if ($ls_user_approval == -1)$ls_user_approval = '';\n    $ls_timsheetuser = GETPOST('ls_timesheetuser', 'int');\n    if ($ls_timsheetuser == -1)$ls_timsheetuser = '';\n    $ls_task = GETPOST('ls_task', 'int');\n    if ($ls_task == -1)$ls_task = '';\n    $ls_note = GETPOST('ls_note', 'alpha');\n    if ($ls_note == -1)$ls_note = '';\n}\n$page = GETPOST('page', 'int');\nif ($page <= 0){\n    $page = 0;\n}\n$limit = $conf->liste_limit;\n$offset = $limit * $page;\n$pageprev = $page - 1;\n$pagenext = $page + 1;\n//$upload_dir = $conf->timesheet->dir_output.'/Timesheetuser/'.dol_sanitizeFileName($object->ref);\n // uncomment to avoid resubmision\n//if (isset($_SESSION['timesheet'][$token]))\n//{\n //   $cancel = true;\n //  setEventMessages('Internal error, POST not exptected', null, 'errors');\n//}\n// Right Management\n /*\nif ($user->societe_id > 0 ||\n       (!$user->rights->timesheet->add && ($action == 'add' || $action = 'create')) ||\n       (!$user->rights->timesheet->view && ($action == 'list' || $action = 'view')) ||\n       (!$user->rights->timesheet->delete && ($action == 'confirm_delete')) ||\n       (!$user->rights->timesheet->edit && ($action == 'edit' || $action = 'update')))\n{\n        accessforbidden();\n}\n*/\n// create object and set id or ref if provided as parameter\n$object = new TimesheetUserTasks($db);\nif ($id>0) {\n    $object->id = $id;\n    $object->fetch($id);\n    $ref = dol_sanitizeFileName($object->ref);\n    $upload_dir = $conf->timesheet->dir_output.'/tasks/'\n        .get_exdir($object->id, 2, 0, 0, $object, 'timesheet').$ref;\n    if (empty($action))$action = 'viewdoc';//  the doc handling part send back only the ID without actions\n}\nif (!empty($ref)) {\n    $object->ref = $ref;\n}\n/*******************************************************************\n* ACTIONS\n*\n* Put here all code to do according to value of \"action\" parameter\n********************************************************************/\n// Action to add record\n$error = 0;\nif ($cancel) {\n    reloadpage($backtopage, $id, $ref);\n} elseif (($action == 'add') || ($action == 'update' && ($id>0 || !empty($ref)))) {\n    //block resubmit\n    if (empty($token) || (!isset($_SESSION['timesheet'][$token]))) {\n        setEventMessage('WrongTimeStamp_requestNotExpected', 'errors');\n        $action = ($action == 'add')?'create':'view';\n    }\n    //retrive the data\n    $object->userId = GETPOST('Userid', 'int');\n    $object->date_start = dol_mktime(0, 0, 0, GETPOST('startDatedatemonth', 'int'), \n        GETPOST('startDatedateday', 'int'), GETPOST('startDatedateyear', 'int'));\n    $object->date_end = dol_mktime(0, 0, 0, GETPOST('dateendmonth', 'int'), \n        GETPOST('dateendday', 'int'), GETPOST('dateendyear', 'int'));\n    $object->status = GETPOST('Status', 'alpha');\n    $object->note = GETPOST('Note', 'alpha');\n// test here if the post data is valide\n /*\n if ($object->prop1 == 0 || $object->prop2 == 0) {\n     if ($id>0 || $ref!='')\n        $action = 'create';\n     else\n        $action = 'edit';\n }\n  */\n} elseif ($id == 0 && $ref == '' && $action!='create') {\n    $action = 'list';\n}\nswitch($action) {\n    case 'update':\n        $result = $object->update($user);\n        if ($result > 0) {\n            // Creation OK\n            unset($_SESSION['timesheet'][$token]);\n            setEventMessage('RecordUpdated', 'mesgs');\n            // reloadpage($backtopage, $object->id, $ref);\n            $action = 'view';\n        } else {\n            // Creation KO\n            if (! empty($object->errors)) setEventMessages(null, $object->errors, 'errors');\n            else setEventMessage('RecordNotUpdated', 'errors');\n            //reloadpage($backtopage, $object->id, $ref);\n                $action = 'view';\n        }\n        //fallthrough\n    case 'delete':\n        if (isset($_GET['urlfile'])) $action = 'deletefile';\n        //fallthrough\n    case 'view':\n    case 'viewinfo':\n    case 'viewdoc':\n    case 'edit':\n        // fetch the object data if possible\n        if ($id > 0 || !empty($ref)) {\n            //$result = $object->fetch($id, $ref);\n            if ($result > 0)$result = $object->fetchTaskTimesheet();\n            if ($result > 0)$result = $object->fetchUserHolidays();\n            if ($result < 0) {\n                dol_print_error($db);\n            } else { // fill the id & ref\n                if (isset($object->id))$id = $object->id;\n                if (isset($object->rowid))$id = $object->rowid;\n                if (isset($object->ref))$ref = $object->ref;\n            }\n        } else {\n            setEventMessage($langs->trans('noIdPresent').' id:'.$id, 'errors');\n            $action = 'list';\n        }\n        break;\n    case 'add':\n        $result = $object->create($user);\n        if ($result > 0) {\n            // Creation OK\n            // remove the $token\n           unset($_SESSION['timesheet'][$token]);\n           setEventMessage('RecordSucessfullyCreated', 'mesgs');\n           reloadpage($backtopage, $result, $ref);\n        } else {\n            // Creation KO\n            if (! empty($object->errors)) setEventMessages(null, $object->errors, 'errors');\n            else  setEventMessage('RecordNotSucessfullyCreated', 'errors');\n            $action = 'create';\n        }\n        break;\n     case 'confirm_delete':\n        $result = ($confirm == 'yes')?$object->delete($user):0;\n        if ($result > 0) {\n            // Delete OK\n            setEventMessage($langs->trans('RecordDeleted'), 'mesgs');\n            $action = 'list';\n        } else {\n            // Delete NOK\n            if (! empty($object->errors)) setEventMessages(null, $object->errors, 'errors');\n            else setEventMessage('RecordNotDeleted', 'errors');\n            $action = 'list';\n        }\n         break;\n    case 'list':\n    case 'create':\n    default:\n        if (!empty($_FILES)) $action = 'viewdoc';\n        break;\n}\n        //document handling\nif ($conf->global->TIMESHEET_ADD_DOCS && $id>0) {\n    $object->fetch($id);\n    $ref = dol_sanitizeFileName($object->ref);\n    $upload_dir = $conf->timesheet->dir_output.'/tasks/'\n        .get_exdir($object->id, 2, 0, 0, $object, 'timesheet').$ref;\n    if (version_compare(DOL_VERSION, \"4.0\") >= 0) {\n       include_once DOL_DOCUMENT_ROOT . '/core/actions_linkedfiles.inc.php';\n    } else{\n       include_once DOL_DOCUMENT_ROOT . '/core/tpl/document_actions_pre_headers.tpl.php';\n    }\n}\n//Removing the $token array so the order can't be submitted two times\nif (isset($_SESSION['timesheet'][$token])) {\n    unset($_SESSION['timesheet'][$token]);\n}\nif (($action == 'create') || ($action == 'edit' && ($id>0 || !empty($ref)))) {\n    $token = getToken();\n    $_SESSION['timesheet'][$token] = array();\n    $_SESSION['timesheet'][$token]['action'] = $action;\n}\n/***************************************************\n* VIEW\n*\n* Put here all code to build page\n****************************************************/\n$morejs = array(\"/timesheet/core/js/jsparameters.php\", \"/timesheet/core/js/timesheet.js?\"\n    .$conf->global->TIMESHEET_VERSION);\nllxHeader('', $langs->trans('TimesheetUser'), '', '', '', '', $morejs);\nprint \"<div> <!-- module body-->\";\n$form = new Form($db);\n$formother = new FormOther($db);\n// Put here content of your page\n// Example : Adding jquery code\n/*print '<script type = \"text/javascript\" language = \"javascript\">\njQuery(document).ready(function()\n{\n        function init_myfunc()\n        {\n                jQuery(\"#myid\").removeAttr(\\'disabled\\');\n                jQuery(\"#myid\").attr(\\'disabled\\', \\'disabled\\');\n        }\n        init_myfunc();\n        jQuery(\"#mybutton\").click(function()\n{\n                init_needroot();\n        });\n});\n</script>';*/\n$edit = $new = 0;\nswitch($action) {\n    case 'create':\n        $new = 1;\n    case 'edit':\n        $edit = 1;\n    case 'delete';\n        if ($action == 'delete' && ($id>0 || $ref!=\"\")) {\n         $ret = $form->form_confirm($PHP_SELF.'?action=confirm_delete&id='\n            .$id, $langs->trans('DeleteTimesheetuser'), \n            $langs->trans('ConfirmDelete'), 'confirm_delete', '', 0, 1);\n        if ($ret == 'html') print '<br />';\n         //to have the object to be deleted in the background\\\n        }\n    case 'view':\n    {\n        // tabs\n        if ($edit == 0 && $new == 0) { //show tabs\n            $head = Timesheetuser_prepare_head($object);\n            dol_fiche_head($head, 'card', $langs->trans('Timesheetuser'), 0, 'timesheet@timesheet');\n        } else{\n            print_fiche_titre($langs->trans('Timesheetuser'));\n        }\n        print '<br>';\n        if ($edit == 1) {\n            if ($new == 1) {\n                print '<form method = \"POST\" action = \"'.$PHP_SELF.'?action=add\">';\n            } else{\n                print '<form method = \"POST\" action = \"'.$PHP_SELF.'?action=update&id='.$id.'\">';\n            }\n            print '<input type = \"hidden\" name = \"$token\" value = \"'.$token.'\">';\n            print '<input type = \"hidden\" name = \"backtopage\" value = \"'.$backtopage.'\">';\n        } else {// show the nav bar\n            $basedurltab = explode(\"?\", $PHP_SELF);\n            $basedurl = $basedurltab[0].'?action=list';\n            $linkback = '<a href = \"'.$basedurl.(! empty($socid)?'?socid='.$socid:'').'\">'\n                .$langs->trans(\"BackToList\").'</a>';\n            if (!isset($object->ref))//save ref if any\n                $object->ref = $object->id;\n            print $form->showrefnav($object, 'action = view&id', $linkback, 1, 'rowid', 'ref', '');\n            //reloqd the ref\n        }\n        print '<table class = \"border centpercent\">'.\"\\n\";\n                print \"<tr>\\n\";\n// show the field userId\n                print '<td class = \"fieldrequired\">'.$langs->trans('User').' </td><td>';\n                if ($edit == 1) {\n                print $form->select_dolusers($object->userId, 'Userid', 1, '', 0);\n                } else{\n                print print_generic('user', 'rowid', $object->userId, 'lastname', 'firstname', ' ');\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n                print \"<tr>\\n\";\n// show the field date_start\n                print '<td class = \"fieldrequired\">'.$langs->trans('DateStart').' </td><td>';\n                if ($edit == 1) {\n                if ($new == 1) {\n                        print $form->select_date(-1, 'startDatedate');\n                } else{\n                        print $form->select_date($object->date_start, 'startDatedate');\n                }\n                } else{\n                        print dol_print_date($object->date_start, 'day');\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n                print \"<tr>\\n\";\n// show the field date_end\n                print '<td class = \"fieldrequired\">'.$langs->trans('DateEnd').' </td><td>';\n                if ($edit == 1) {\n                if ($new == 1) {\n                        print $form->select_date(-1, 'dateend');\n                } else{\n                        print $form->select_date($object->date_end, 'dateend');\n                }\n                } else{\n                        print dol_print_date($object->date_end, 'day');\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n                print \"<tr>\\n\";\n// show the field status\n                print '<td>'.$langs->trans('Status').' </td><td>';\n                if ($edit == 1) {\n                print  $form->selectarray('Status', $statusA, $object->status);\n                } else{\n                print $statusA[$object->status];\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n                print \"<tr>\\n\";\n// show the field note\n                print '<td>'.$langs->trans('Note').' </td><td>';\n                if ($edit == 1) {\n            print '<textarea class = \"flat\"  name = \"Note\" cols = \"40\" rows = \"5\" >'\n                .$object->note.'</textarea>';\n                } else{\n                        print $object->note;\n                //print print_generic('project_tasktime_list', 'rowid', $object->project_tasktime_list, 'rowid', 'description');\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n//                print \"<tr>\\n\";\n        print '</table>'.\"\\n\";\n        print '<br>';\n        if ($object->status != DRAFT && $edit!=1) {\n            $object->fetchByWeek();\n            $object->fetchTaskTimesheet();\n            //$ret += $this->getTaskTimeIds();\n            //FIXME module holiday should be activated ?\n            $object->fetchUserHolidays();\n            print $object->userName.\" - \".dol_print_date($object->date_start, 'day');\n            print $object->getHTMLHeader();\n            print $object->getHTMLHolidayLines(false);\n            print $object->getHTMLPublicHolidayLines(false);\n            print $object->getHTMLTotal();\n            print $object->getHTMLtaskLines(false);\n            print $object->getHTMLTotal();\n            print \"</table>\";\n            print  '<script type = \"text/javascript\">'.\"\\n\\t\";\n            print 'updateAll('.$conf->global->TIMESHEET_HIDE_ZEROS.');';\n            print  \"\\n\\t\".'</script>'.\"\\n\";\n        }\n        print '<div class = \"center\">';\n        if ($edit == 1) {\n            if ($new == 1) {\n                print '<input type = \"submit\" class = \"butAction\" name = \"add\" value = \"'\n                    .$langs->trans('Add').'\">';\n            } else{\n                print '<input type = \"submit\" name = \"update\" value = \"'\n                    .$langs->trans('Update').'\" class = \"butAction\">';\n            }\n            print ' &nbsp;<input type = \"submit\" class = \"butActionDelete\" name = \"cancel\" value = \"'\n                .$langs->trans('Cancel').'\"></div>';\n            print '</form>';\n        } else{\n            $parameters = array();\n            $reshook = $hookmanager->executeHooks('addMoreActionsButtons', \n                $parameters, $object, $action);// Note that $action and $object may have been modified by hook\n            if ($reshook < 0) setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n            if (empty($reshook)) {\n                print '<div class = \"tabsAction\">';\n                // Boutons d'actions\n                //if ($user->rights->Timesheetuser->edit)\n                //{\n                    print '<a href = \"'.$PHP_SELF.'?id='.$id\n                        .'&action=edit\" class = \"butAction\">'.$langs->trans('Update').'</a>';\n                //}\n                //if ($user->rights->Timesheetuser->delete)\n                //{\n                    print '<a class = \"butActionDelete\" href = \"'.$PHP_SELF.'?id='\n                        .$id.'&action=delete\">'.$langs->trans('Delete').'</a>';\n                //}\n                //else\n                //{\n                //    print '<a class = \"butActionRefused\" href = \"#\" title = \"'.dol_escape_htmltag($langs->trans(\"NotAllowed\")).'\">'.$langs->trans('Delete').'</a>';\n                //}\n                print '</div>';\n            }\n        }\n        break;\n    }\n        case 'viewinfo':\n        print_fiche_titre($langs->trans('Timesheetuser'));\n        $head = Timesheetuser_prepare_head($object);\n        dol_fiche_head($head, 'info', $langs->trans(\"Timesheetuser\"), 0, 'timesheet@timesheet');\n        print '<table width = \"100%\"><tr><td>';\n        dol_print_object_info($object);\n        print '</td></tr></table>';\n        print '</div>';\n        break;\n    case 'deletefile':\n        $action = 'delete';\n    case 'viewdoc':\n        print_fiche_titre($langs->trans('Timesheetuser'));\n        if (! $sortfield) $sortfield = 'name';\n        $object->fetch_thirdparty();\n        $head = Timesheetuser_prepare_head($object);\n        dol_fiche_head($head, 'documents', $langs->trans(\"Timesheetuser\"), 0, 'timesheet@timesheet');\n        $filearray = dol_dir_list($upload_dir, 'files', 0, '', '\\.meta$', $sortfield, \n            (strtolower($sortorder) == 'desc'?SORT_DESC:SORT_ASC), 1);\n        $totalsize = 0;\n        foreach ($filearray as $key => $file) {\n                $totalsize += $file['size'];\n        }\n        print '<table class = \"border\" width = \"100%\">';\n        $linkback = '<a href = \"'.$PHP_SELF.(! empty($socid)?'?socid='.$socid:'').'\">'\n            .$langs->trans(\"BackToList\").'</a>';\n        // Ref\n        print '<tr><td width = \"30%\">'.$langs->trans(\"Ref\").'</td><td>';\n        print $form->showrefnav($object, 'action = view&id', $linkback, 1, 'rowid', 'ref', '');\n        print '</td></tr>';\n        // Societe\n        //print \"<tr><td>\".$langs->trans(\"Company\").\"</td><td>\".$object->client->getNomUrl(1).\"</td></tr>\";\n        print '<tr><td>'.$langs->trans(\"NbOfAttachedFiles\").'</td><td colspan = \"3\">'.count($filearray).'</td></tr>';\n        print '<tr><td>'.$langs->trans(\"TotalSizeOfAttachedFiles\").'</td><td colspan = \"3\">'.$totalsize.' '\n            .$langs->trans(\"bytes\").'</td></tr>';\n        print '</table>';\n        print '</div>';\n        $modulepart = 'timesheet';\n        $permission = 1;//$user->rights->timesheet->add;\n        $param = '&id='.$object->id;\n        include_once DOL_DOCUMENT_ROOT . '/core/tpl/document_actions_post_headers.tpl.php';\n        break;\n    case 'delete':\n        if (($id>0 || $ref!='')) {\n         $ret = $form->form_confirm($PHP_SELF.'?action=confirm_delete&id='.$id, $langs->trans('DeleteTimesheetuser'), $langs->trans('ConfirmDelete'), 'confirm_delete', '', 0, 1);\n         if ($ret == 'html') print '<br />';\n         //to have the object to be deleted in the background\n        }\n    case 'list':\n    default:\n        {\n    $sql = 'SELECT';\n    $sql .= ' t.rowid, ';\n    $sql .= ' t.fk_userid, ';\n    $sql .= ' t.date_start, ';\n    $sql .= ' t.date_end, ';\n    $sql .= ' t.status';\n    $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_timesheet as t';\n    $sqlwhere = '';\n    if (isset($object->entity))\n        $sqlwhere .= ' AND t.entity = '.$conf->entity;\n    if ($filter && $filter != -1) {\n        // GETPOST('filtre') may be a string {\n        $filtrearr = explode(', ', $filter);\n        foreach ($filtrearr as $fil) {\n                $filt = explode(':', $fil);\n                $sqlwhere .= ' AND ' . $filt[0] . ' = ' . $filt[1];\n        }\n    }\n    //pass the search criteria\n    if ($ls_userId) $sqlwhere .= natural_search(array('t.fk_userid'), $ls_userId, 2);\n    if ($ls_date_start_month)$sqlwhere .= ' AND MONTH(t.date_start) = \\''.$ls_date_start_month.'\\'';\n    if ($ls_date_start_year)$sqlwhere .= ' AND YEAR(t.date_start) = \\''.$ls_date_start_year.'\\'';\n    if ($ls_status) $sqlwhere .= natural_search(array('t.status'), $ls_status);\n    if ($ls_target) $sqlwhere .= natural_search(array('t.target'), $ls_target);\n    if ($ls_project_tasktime_list) $sqlwhere .= natural_search('t.fk_project_tasktime_list', $ls_project_tasktime_list);\n    if ($ls_user_approval) $sqlwhere .= natural_search(array('t.fk_user_approval'), $ls_user_approval);\n    //list limit\n    if (!empty($sqlwhere)){\n        $sql .= ' WHERE '.substr($sqlwhere, 5);\n    }\n    // Count total nb of records\n    $nbtotalofrecords = 0;\n    if (empty($conf->global->MAIN_DISABLE_FULL_SCANLIST)) {\n            $sqlcount = 'SELECT COUNT(*) as count FROM '.MAIN_DB_PREFIX.'project_task_timesheet as t';\n            if (!empty($sqlwhere))\n                $sqlcount .= ' WHERE '.substr($sqlwhere, 5);\n            $result = $db->query($sqlcount);\n            $nbtotalofrecords = ($result)?$objcount = $db->fetch_object($result)->count:0;\n    }\n    $sql .= $db->order($sortfield, $sortorder);\n    if (!empty($limit)) {\n            $sql .= $db->plimit($limit+1, $offset);\n    }\n    //execute SQL\n    dol_syslog($script_file, LOG_DEBUG);\n    $resql = $db->query($sql);\n    if ($resql) {\n        if (!empty($ls_userId))        $param .= '&ls_userId='.urlencode($ls_userId);\n            if (!empty($ls_date_start_month))        $param .= '&ls_date_start_month='.urlencode($ls_date_start_month);\n            if (!empty($ls_date_start_year))        $param .= '&ls_date_start_year='.urlencode($ls_date_start_year);\n            if (!empty($ls_status))        $param .= '&ls_status='.urlencode($ls_status);\n            if (!empty($ls_target))        $param .= '&ls_target='.urlencode($ls_target);\n            if (!empty($ls_project_tasktime_list))        $param .= '&ls_project_tasktime_list='.urlencode($ls_project_tasktime_list);\n            if (!empty($ls_user_approval))        $param .= '&ls_user_approval='.urlencode($ls_user_approval);\n            if ($filter && $filter != -1) $param .= '&filtre='.urlencode($filter);\n            $num = $db->num_rows($resql);\n            //print_barre_liste function defined in /core/lib/function.lib.php, possible to add a picto\n            print_barre_liste($langs->trans(\"Timesheetuser\"), $page, $PHP_SELF, $param, $sortfield, $sortorder, '', $num, $nbtotalofrecords);\n            print '<form method = \"POST\" action = \"'.$_SERVER[\"PHP_SELF\"].'\">';\n            print '<table class = \"liste\" style = \"border-collapse:separate;\" width = \"100%\">'.\"\\n\";\n            //TITLE\n            print '<tr class = \"liste_titre\">';\n            print_liste_field_titre('User', $PHP_SELF, 't.fk_userid', '', $param, '', $sortfield, $sortorder);\n            print \"\\n\";\n            print_liste_field_titre('DateStart', $PHP_SELF, 't.date_start', '', $param, '', $sortfield, $sortorder);\n            print \"\\n\";\n            //print_liste_field_titre('dateend', $PHP_SELF, 't.date_end', '', $param, '', $sortfield, $sortorder);\n            //print \"\\n\";\n            print_liste_field_titre('Status', $PHP_SELF, 't.status', '', $param, '', $sortfield, $sortorder);\n            print \"\\n\";\n            //print \"\\n\";\n            print '<td class = \"liste_titre\" colspan = \"1\" >';\n            print '</tr>';\n            //SEARCH FIELDS\n            print '<tr class = \"liste_titre\">';\n            //Search field foruserId\n            print '<td class = \"liste_titre\" colspan = \"1\" >';\n    //select_generic($table, $fieldValue, $htmlName, $fieldToShow1, $fieldToShow2 = '', $selected = '', $separator = ' - ', $sqlTailWhere = '', $selectparam = '', $addtionnalChoices = array('NULL' => 'NULL'), $sqlTailTable = '', $ajaxUrl = '')\n\n            //print select_generic('user', 'rowid', 'ls_userId', 'lastname', 'firstname', $ls_userId, ' - ', '', '', null, '', $ajaxNbChar);\n            print $form->select_users($ls_userId, 'ls_userId');\n            print '</td>';\n            //Search field fordate_start\n            print '<td class = \"liste_titre\" colspan = \"1\" >';\n            print '<input class = \"flat\" type = \"text\" size = \"1\" maxlength = \"2\" name = \"date_start_month\" value = \"'.$ls_date_start_month.'\">';\n            $syear = $ls_date_start_year;\n            $formother->select_year($syear?$syear:-1, 'ls_date_start_year', 1, 20, 5);\n            print '</td>';\n            //Search field forstatus\n            print '<td class = \"liste_titre\" colspan = \"1\" >';\n            print $form->selectarray('ls_status', $statusA, $ls_status);\n            print '</td>';\n            //Search field fortarget\n            //        print '<td class = \"liste_titre\" colspan = \"1\" >';\n            //                print select_enum('project_task_time_approval', 'target', 'ls_target', $ls_target);\n            //        print '</td>';\n            //Search field forproject_tasktime_list\n            //        print '<td class = \"liste_titre\" colspan = \"1\" >';\n            //                print '<input class = \"flat\" size = \"16\" type = \"text\" name = \"ls_project_tasktime_list\" value = \"'.$ls_project_tasktimeList.'\"/>';\n            //        print '</td>';\n            //Search field foruser_approval\n            //print '<td class = \"liste_titre\" colspan = \"1\" >';\n            //print select_generic('user', 'rowid', 'ls_user_approval', 'lastname', 'firstname', $ls_user_approval);\n            //print '</td>';\n            print '<td width = \"15px\">';\n            print '<input type = \"image\" class = \"liste_titre\" name = \"search\" src = \"'\n                .img_picto($langs->trans(\"Search\"), 'search.png', '', '', 1).'\" value = \"'\n                .dol_escape_htmltag($langs->trans(\"Search\")).'\" title = \"'\n                .dol_escape_htmltag($langs->trans(\"Search\")).'\">';\n            print '<input type = \"image\" class = \"liste_titre\" name = \"removefilter\" src = \"'\n                .img_picto($langs->trans(\"Search\"), 'searchclear.png', '', '', 1).'\" value = \"'\n                .dol_escape_htmltag($langs->trans(\"RemoveFilter\")).'\" title = \"'\n                .dol_escape_htmltag($langs->trans(\"RemoveFilter\")).'\">';\n            print '</td>';\n            print '</tr>'.\"\\n\";\n            $i = 0;\n            $basedurltab = explode(\"?\", $PHP_SELF);\n            $basedurl = $basedurltab[0].'?action=view&id=';\n            while($i < $num && $i<$limit)\n            {\n                    $obj = $db->fetch_object($resql);\n                    if ($obj) {\n                            // You can use here results\n                            print \"<tr class = \\\"dblist oddeven\\\"  onclick = \\\"location.href='\";\n                            print $basedurl.$obj->rowid.\"'\\\" >\";\n                            print \"<td>\".print_generic('user', 'rowid', $obj->fk_userid, 'lastname', 'firstname', ' ').\"</td>\";\n                            print \"<td>\".dol_print_date($obj->date_start, 'day').\"</td>\";\n                            print \"<td>\".$langs->trans(strtolower($statusA[$obj->status])).\"</td>\";\n                            print '<td><a href = \"'.$PHP_SELF.'?action=delete&id='.$obj->rowid.'\">'.img_delete().'</a></td>';\n                            print \"</tr>\";\n                    }\n                    $i++;\n            }\n    } else {\n        $error++;\n        dol_print_error($db);\n    }\n    print '</table>'.\"\\n\";\n    print '</from>'.\"\\n\";\n    // new button\n    //print '<a href=\"?action=create\" class = \"button\" role = \"button\">'.$langs->trans('New');\n    //print ' '.$langs->trans('Timesheetuser').\"</a>\\n\";\n}\n    break;\n}\ndol_fiche_end();\n/** function to reload page\n *\n * @param string $backtopage    url source\n * @param int $id               id of the object\n * @return null\n */\nfunction reloadpage($backtopage, $id)\n{\n    if (!empty($backtopage)) {\n        header(\"Location: \".$backtopage);\n    //    header(\"Location: \".$_SERVER[\"PHP_SELF\"].'?action=view&ref='.$ref);\n    } elseif ($id>0) {\n        header(\"Location: \".$_SERVER[\"PHP_SELF\"].'?action=view&id='.$id);\n    } else{\n        header(\"Location: \".$_SERVER[\"PHP_SELF\"].'?action=list');\n    }\n    ob_end_flush();\n    exit();\n}\n/** function to prepare hear\n *\n * @global object $langs    lang object\n * @global object $conf     conf object\n * @global object $user     current user\n * @param object  $object   current object browsed\n * @return string\n */\nfunction Timesheetuser_prepare_head($object)\n{\n    global $langs, $conf, $user;\n    $h = 0;\n    $head = array();\n    $head[$h][0] = $_SERVER[\"PHP_SELF\"].'?action=view&id='.$object->id;\n    $head[$h][1] = $langs->trans(\"Card\");\n    $head[$h][2] = 'card';\n    $h++;\n    // Show more tabs from modules\n    // Entries must be declared in modules descriptor with line\n    // $this->tabs = array('entity:+tabname:Title:@timesheet:/timesheet/mypage.php?id=__ID__');to add new tab\n    // $this->tabs = array('entity:-tabname);                                                                                                to remove a tab\n    complete_head_from_modules($conf, $langs, $object, $head, $h, 'timesheet');\n    complete_head_from_modules($conf, $langs, $object, $head, $h, 'timesheet', 'remove');\n    $head[$h][0] = $_SERVER[\"PHP_SELF\"].'?action=viewdoc&id='.$object->id;\n    $head[$h][1] = $langs->trans(\"Documents\");\n    $head[$h][2] = 'documents';\n    $h++;\n    $head[$h][0] = $_SERVER[\"PHP_SELF\"].'?action=viewinfo&id='.$object->id;\n    $head[$h][1] = $langs->trans(\"Info\");\n    $head[$h][2] = 'info';\n    $h++;\n    return $head;\n}\n// End of page\nllxFooter();\n$db->close();\n", "<?php\n/*\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *  \\file       htdocs/admin/project.php\n *  \\ingroup    project\n *  \\brief      Page to setup project module\n */\ninclude '../core/lib/includeMain.lib.php';\ninclude '../core/lib/generic.lib.php';\n\nrequire_once DOL_DOCUMENT_ROOT . '/core/lib/admin.lib.php';\nrequire_once DOL_DOCUMENT_ROOT . '/core/lib/project.lib.php';\nrequire_once DOL_DOCUMENT_ROOT . '/projet/class/project.class.php';\nrequire_once DOL_DOCUMENT_ROOT . '/projet/class/task.class.php';\n\n$langs->load(\"admin\");\n$langs->load(\"errors\");\n$langs->load(\"other\");\n$langs->load(\"timesheet@timesheet\");\nif (!$user->admin) {\n    $accessforbidden = accessforbidden(\"you need to be admin\");\n}\n$action = getpost('action', 'alpha');\n$attendance = $conf->global->TIMESHEET_ATTENDANCE;\n\n$timetype = $conf->global->TIMESHEET_TIME_TYPE;\n$hoursperday = $conf->global->TIMESHEET_DAY_DURATION;\n$timeSpan = $conf->global->TIMESHEET_TIME_SPAN;\n//hide/show\n$hidedraft = $conf->global->TIMESHEET_HIDE_DRAFT;\n$hidezeros = $conf->global->TIMESHEET_HIDE_ZEROS;\n$headers = $conf->global->TIMESHEET_HEADERS;\n$hideref = $conf->global->TIMESHEET_HIDE_REF;\n$showTimespentNote = $conf->global->TIMESHEET_SHOW_TIMESPENT_NOTE;\n\n$adddocs = $conf->global->TIMESHEET_ADD_DOCS;\n\n\n$addForOther = $conf->global->TIMESHEET_ADD_FOR_OTHER;\n$whiteListMode = $conf->global->TIMESHEET_WHITELIST_MODE;\n$whiteList = $conf->global->TIMESHEET_WHITELIST;\n\n$draftColor = $conf->global->TIMESHEET_COL_DRAFT;\n$valueColor = $conf->global->TIMESHEET_COL_VALUE;\n$frozenColor = $conf->global->TIMESHEET_COL_FROZEN;\n$submittedColor = $conf->global->TIMESHEET_COL_SUBMITTED;\n$approvedColor = $conf->global->TIMESHEET_COL_APPROVED;\n$cancelledColor = $conf->global->TIMESHEET_COL_CANCELLED;\n$rejectedColor = $conf->global->TIMESHEET_COL_REJECTED;\n$maxhoursperday = $conf->global->TIMESHEET_DAY_MAX_DURATION;\n$addholidaytime = $conf->global->TIMESHEET_ADD_HOLIDAY_TIME;\n$blockholiday = $conf->global->TIMESHEET_BLOCK_HOLIDAY;\n$addpublicholidaytime = $conf->global->TIMESHEET_ADD_PUBLICHOLIDAY_TIME;\n$blockpublicholiday = $conf->global->TIMESHEET_BLOCK_PUBLICHOLIDAY;\n$overtimecheckweeks = $conf->global->TIMESHEET_OVERTIME_CHECK_WEEKS;\n$opendays = str_split($conf->global->TIMESHEET_OPEN_DAYS);\n\n//approval\n$approvalbyweek = $conf->global->TIMESHEET_APPROVAL_BY_WEEK;\n$maxApproval = $conf->global->TIMESHEET_MAX_APPROVAL;\n$apflows = str_split($conf->global->TIMESHEET_APPROVAL_FLOWS);\nif (count($apflows) != 6) {\n    $apflows = array('_', '0', '0', '0', '0', '0');\n}\n\n//Invoice part\n$invoicemethod = $conf->global->TIMESHEET_INVOICE_METHOD;\n$invoicetasktime = $conf->global->TIMESHEET_INVOICE_TASKTIME;\n$invoicetimetype = $conf->global->TIMESHEET_INVOICE_TIMETYPE;\n$invoiceservice = $conf->global->TIMESHEET_INVOICE_SERVICE;\n$invoiceshowtask = $conf->global->TIMESHEET_INVOICE_SHOW_TASK;\n$invoiceshowuser = $conf->global->TIMESHEET_INVOICE_SHOW_USER;\n\n//event\n$maxhoursperevent = $conf->global->TIMESHEET_EVENT_MAX_DURATION;\n$minsecondsperevent = $conf->global->TIMESHEET_EVENT_MIN_DURATION;\n$defaulthoursperevent = $conf->global->TIMESHEET_EVENT_DEFAULT_DURATION;\n$blockTimespent = $conf->global->TIMESHEET_EVENT_NOT_CREATE_TIMESPENT;\n//pdf\n$pdfhidesignbox = intval($conf->global->TIMESHEET_PDF_HIDE_SIGNBOX);\n$noteOnPDF = $conf->global->TIMESHEET_PDF_NOTEISOTASK;\n$pdfHideName = intval($conf->global->TIMESHEET_PDF_HIDE_NAME);\n//advanced\n$exportFormat = $conf->global->TIMESHEET_EXPORT_FORMAT;\n$evalAddLine = $conf->global->TIMESHEET_EVAL_ADDLINE;\n$tsRound = intval($conf->global->TIMESHEET_ROUND);\n$importagenda = intval($conf->global->TIMESHEET_IMPORT_AGENDA);\n$dropdownAjax = $conf->global->MAIN_DISABLE_AJAX_COMBOX;\n$searchbox = intval($conf->global->TIMESHEET_SEARCHBOX);\n$unblockInvoiced = $conf->global->TIMESHEET_UNBLOCK_INVOICED;\n$unblockClosed = $conf->global->TIMESHEET_UNBLOCK_CLOSED;\n$reportInvoicedCol= $conf->global->TIMESHEET_REPORT_INVOICED_COL;\n$reportUngroup = $conf->global->TIMESHEET_REPORT_UNGROUP;\n$allowPublic = $conf->global->TIMESHEET_ALLOW_PUBLIC;\n\n\nif (count($opendays)!=8) {\n    $opendays = array('_', '0', '0', '0', '0', '0', '0', '0');\n}\n\n$error = 0;\n/** make sure that there is a 0 iso null\n *\n * @param mixed $var var can be an int of empty string\n * @param type $int defautl value is var is null\n * @return int\n */\nfunction null2int($var, $int = 0)\n{\n    return($var == '' || !is_numeric($var))?$int:$var;\n}\n\nswitch($action) {\n    case \"save\":\n        //general option\n        $hoursperday = getpost('hoursperday', 'int');\n        if ($hoursperday == 0) {\n            //error handling if hour per day is empty\n            $hoursperday = $conf->global->TIMESHEET_DAY_DURATION;\n            setEventMessage($langs->transnoentitiesnoconv(\"HourPerDayNotNull\"), 'errors');\n            break;\n        }\n        dolibarr_set_const($db, \"TIMESHEET_DAY_DURATION\", $hoursperday, 'chaine', 0, '', $conf->entity);\n        $timetype = getpost('timeType', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_TIME_TYPE\", $timetype, 'chaine', 0, '', $conf->entity);\n        $timeSpan = getpost('timeSpan', 'alpha');\n        if ($timeSpan!=$conf->global->TIMESHEET_TIME_SPAN) {\n            // delete the unsubmitted timesheet so the new time span will be applied\n            $sql = 'DELETE FROM '.MAIN_DB_PREFIX.'project_task_timesheet';\n            $sql .= ' WHERE status IN (1, 5)';//'DRAFT', 'REJECTED'\n            dol_syslog('timesheetsetu:deletedraft', LOG_DEBUG);\n            $resql = $db->query($sql);\n        }\n        dolibarr_set_const($db, \"TIMESHEET_TIME_SPAN\", $timeSpan, 'chaine', 0, '', $conf->entity);\n        $attendance = getpost('attendance', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ATTENDANCE\", $attendance, 'int', 0, '', $conf->entity);\n        $maxhoursperevent = getpost('maxhoursperevent', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_EVENT_MAX_DURATION\", $maxhoursperevent, 'int', 0, '', $conf->entity);\n        $minsecondsperevent = getpost('minSecondsPerEvent', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_EVENT_MIN_DURATION\", $minsecondsperevent, 'int', 0, '', $conf->entity);\n        $defaulthoursperevent = getpost('defaulthoursperevent', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_EVENT_DEFAULT_DURATION\", $defaulthoursperevent, 'int', 0, '', $conf->entity);\n        $maxhoursperday = getpost('maxhoursperday', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_DAY_MAX_DURATION\", $maxhoursperday, 'int', 0, '', $conf->entity);\n        $hidedraft = getpost('hidedraft', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_HIDE_DRAFT\", $hidedraft, 'int', 0, '', $conf->entity);\n        $hidezeros = getpost('hidezeros', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_HIDE_ZEROS\", $hidezeros, 'int', 0, '', $conf->entity);\n        $maxApproval = getpost('maxapproval', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_MAX_APPROVAL\", $maxApproval, 'int', 0, '', $conf->entity);\n        $approvalbyweek = getpost('approvalbyweek', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_APPROVAL_BY_WEEK\", $approvalbyweek, 'int', 0, '', $conf->entity);\n        $hideref = getpost('hideref', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_HIDE_REF\", $hideref, 'int', 0, '', $conf->entity);\n        $whiteListMode = getpost('blackWhiteListMode', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_WHITELIST_MODE\", $whiteList?$whiteListMode:2, 'int', 0, '', $conf->entity);\n        $whiteList = getpost('blackWhiteList', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_WHITELIST\", $whiteList, 'int', 0, '', $conf->entity);\n        $dropdownAjax = getpost('dropdownAjax', 'int');\n        dolibarr_set_const($db, \"MAIN_DISABLE_AJAX_COMBOX\", $dropdownAjax, 'int', 0, '', $conf->entity);\n        $addForOther = getpost('addForOther', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ADD_FOR_OTHER\", $addForOther, 'int', 0, '', $conf->entity);\n        //headers handling\n        $showProject = getpost('showProject', 'int');\n        $showTaskParent = getpost('showTaskParent', 'int');\n        $showTasks = getpost('showTasks', 'int');\n        $showDateStart = getpost('showDateStart', 'int');\n        $showDateEnd = getpost('showDateEnd', 'int');\n        $showProgress = getpost('showProgress', 'int');\n        $showCompany = getpost('showCompany', 'int');\n        $showNote = getpost('showNote', 'int');\n        $showTotal = getpost('showTotal', 'int');\n        $showProgressDeclared = getpost('showProgressDeclared', 'int');\n        $headers = $showNote?'Note':'';\n        $headers .= $showCompany?(empty($headers)?'':'||').'Company':'';\n        $headers .= $showProject?(empty($headers)?'':'||').'Project':'';\n        $headers .= $showTaskParent?(empty($headers)?'':'||').'TaskParent':'';\n        $headers .= $showTasks?(empty($headers)?'':'||').'Tasks':'';\n        $headers .= $showDateStart?(empty($headers)?'':'||').'DateStart':'';\n        $headers .= $showDateEnd?(empty($headers)?'':'||').'DateEnd':'';\n        $headers .= $showProgress?(empty($headers)?'':'||').'Progress':'';\n        $headers .= $showProgressDeclared?(empty($headers)?'':'||').'ProgressDeclared':'';\n        $headers .= $showTotal?(empty($headers)?'':'||').'Total':'';\n        dolibarr_set_const($db, \"TIMESHEET_HEADERS\", $headers, 'chaine', 0, '', $conf->entity);\n        //color handling\n        $draftColor = getpost('draftColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_DRAFT\", $draftColor, 'chaine', 0, '', $conf->entity);\n        $valueColor = getpost('valueColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_VALUE\", $valueColor, 'chaine', 0, '', $conf->entity);\n        $frozenColor = getpost('frozenColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_FROZEN\", $frozenColor, 'chaine', 0, '', $conf->entity);\n        $submittedColor = getpost('submittedColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_SUBMITTED\", $submittedColor, 'chaine', 0, '', $conf->entity);\n        $approvedColor = getpost('approvedColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_APPROVED\", $approvedColor, 'chaine', 0, '', $conf->entity);\n        $rejectedColor = getpost('rejectedColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_REJECTED\", $rejectedColor, 'chaine', 0, '', $conf->entity);\n        $cancelledColor = getpost('cancelledColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_CANCELLED\", $cancelledColor, 'chaine', 0, '', $conf->entity);\n        //holiday\n        $addholidaytime = getpost('addholidaytime', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_ADD_HOLIDAY_TIME\", $addholidaytime, 'chaine', 0, '', $conf->entity);\n        // block holday\n        $blockholiday = getpost('blockholiday', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_BLOCK_HOLIDAY\", $blockholiday, 'chaine', 0, '', $conf->entity);\n        //public holiday\n        $addpublicholidaytime = getpost('addpublicholidaytime', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_ADD_PUBLICHOLIDAY_TIME\", $addpublicholidaytime, 'chaine', 0, '', $conf->entity);\n        // block public holday\n        $blockpublicholiday = getpost('blockpublicholiday', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_BLOCK_PUBLICHOLIDAY\", $blockpublicholiday, 'chaine', 0, '', $conf->entity);\n\n        // number of week to check for overtime box\n        $overtimecheckweeks = getpost('overtimecheckweeks', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_OVERTIME_CHECK_WEEKS\", $overtimecheckweeks, 'chaine', 0, '', $conf->entity);\n        //docs\n        $adddocs = getpost('adddocs', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ADD_DOCS\", $adddocs, 'chaine', 0, '', $conf->entity);\n        // open days\n        $opendays = array('_', '0', '0', '0', '0', '0', '0', '0');\n        foreach (getpost('opendays', 'array') as $key => $day) {\n            $opendays[$key] = $day;\n        }\n        dolibarr_set_const($db, \"TIMESHEET_OPEN_DAYS\", implode('', $opendays), 'chaine', 0, '', $conf->entity);\n        //approval flows\n        $apflows = array('_', '0', '0', '0', '0', '0');\n        foreach (getpost('apflows', 'array') as $key => $flow) {\n            $apflows[$key] = $flow;\n        }\n        //INVOICE\n        dolibarr_set_const($db, \"TIMESHEET_APPROVAL_FLOWS\", implode('', $apflows), 'chaine', 0, '', $conf->entity)  ;\n        $invoicemethod = getpost('invoiceMethod', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_METHOD\", $invoicemethod, 'chaine', 0, '', $conf->entity);\n        $invoicetasktime = getpost('invoiceTaskTime', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_TASKTIME\", $invoicetasktime, 'chaine', 0, '', $conf->entity);\n        $invoicetimetype = getpost('invoiceTimeType', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_TIMETYPE\", $invoicetimetype, 'chaine', 0, '', $conf->entity);\n        $invoiceservice = getpost('invoiceservice', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_SERVICE\", $invoiceservice, 'int', 0, '', $conf->entity);\n        $invoiceshowtask = getpost('invoiceShowTask', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_SHOW_TASK\", $invoiceshowtask, 'int', 0, '', $conf->entity);\n        $invoiceshowuser = getpost('invoiceShowUser', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_SHOW_USER\", $invoiceshowuser, 'int', 0, '', $conf->entity);\n        $showTimespentNote = getpost('showTimespentNote', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_SHOW_TIMESPENT_NOTE\", $showTimespentNote, 'int', 0, '', $conf->entity);\n        $noteOnPDF = getpost('noteOnPDF', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_PDF_NOTEISOTASK\", $noteOnPDF, 'chaine', 0, '', $conf->entity);\n        $pdfhidesignbox = getpost('pdfHideSignbox', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_PDF_HIDE_SIGNBOX\", $pdfhidesignbox, 'chaine', 0, '', $conf->entity);\n        $pdfHideName = getpost('pdfHideName', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_PDF_HIDE_NAME\", $pdfHideName, 'chaine', 0, '', $conf->entity);\n        // serach box\n        $searchbox = getpost('searchBox', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_SEARCHBOX\", $searchbox, 'int', 0, '', $conf->entity);\n        setEventMessage($langs->transnoentitiesnoconv(\"ConfigurationSaved\"));\n        $blockTimespent = getpost('blockTimespent', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_EVENT_NOT_CREATE_TIMESPENT\", $blockTimespent, 'chaine', 0, '', $conf->entity);\n        $evalAddLine = getpost('evalAddLine', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_EVAL_ADDLINE\", $evalAddLine, 'int', 0, '', $conf->entity);\n        $exportFormat = getpost('exportFormat', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_EXPORT_FORMAT\", $exportFormat, 'int', 0, '', $conf->entity);\n        $maxApproval = getpost('maxapproval', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_MAX_APPROVAL\", $maxApproval, 'int', 0, '', $conf->entity);\n        $unblockInvoiced = getpost('unblockInvoiced', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_UNBLOCK_INVOICED\", $unblockInvoiced, 'int', 0, '', $conf->entity);\n        $unblockClosed = getpost('unblockClosed', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_UNBLOCK_CLOSED\", $unblockClosed, 'int', 0, '', $conf->entity);\n        $reportInvoicedCol = getpost('reportInvoicedCol', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_REPORT_INVOICED_COL\", $reportInvoicedCol, 'int', 0, '', $conf->entity);\n        $reportUngroup = getpost('reportUngroup', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_REPORT_UNGROUP\", $reportUngroup, 'int', 0, '', $conf->entity);\n        $allowPublic = getpost('allowPublic', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ALLOW_PUBLIC\", $allowPublic, 'int', 0, '', $conf->entity);\n        $tsRound = getpost('tsRound', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ROUND\", $tsRound, 'int', 0, '', $conf->entity);\n        $importagenda = getpost('importagenda', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_IMPORT_AGENDA\", $importagenda, 'int', 0, '', $conf->entity);\n\n        break;\n    default:\n        break;\n}\n$headersT = explode('||', $headers);\nforeach ($headersT as $header) {\n    switch($header) {\n        case 'Project':\n            $showProject = 1;\n            break;\n        case 'TaskParent':\n            $showTaskParent = 1;\n            break;\n        case 'Tasks':\n            $showTasks = 1;\n            break;\n        case 'DateStart':\n            $showDateStart = 1;\n            break;\n        case 'DateEnd':\n            $showDateEnd = 1;\n            break;\n        case 'Progress':\n            $showProgress = 1;\n            break;\n        case 'Company':\n            $showCompany = 1;\n            break;\n        case 'Note':\n            $showNote = 1;\n            break;\n        case 'Total':\n            $showTotal = 1;\n            break;\n        case 'ProgressDeclared':\n            $showProgressDeclared = 1;\n            break;\n        default:\n            break;\n    }\n}\n\n/*\n *  VIEW\n *  */\n//permet d'afficher la structure dolibarr\n$morejs = array(\"/timesheet/core/js/timesheet.js?v2.0\", \"/timesheet/core/js/jscolor.js\");\nllxHeader(\"\", $langs->trans(\"timesheetSetup\"), '', '', '', '', $morejs, '', 0, 0);\nif ($action = \"save\")echo \"<script>window.history.pushState('', '', '\".explode('?', \n    $_SERVER['REQUEST_URI'], 2)[0].\"');</script>\";\n$linkback = '<a href = \"'.DOL_URL_ROOT.'/admin/modules.php\">'.$langs->trans(\"BackToModuleList\").'</a>';\nprint load_fiche_titre($langs->trans(\"timesheetSetup\"), $linkback, 'title_setup');\n\n/*\n * TABS\n */\necho '<div class=\"tabs\" data-role = \"controlgroup\" data-type = \"horizontal\"  >';\n\techo '<div id=\"defaultOpen\"  class=\"inline-block tabsElem\" onclick = \"openTab(event,\\'general\\')\"><a href=\"javascript:void(0);\"  class=\"tabunactive tab inline-block\" data-role = \"button\">'.$langs->trans('General').'</a></div>';\n\techo '<div class=\"inline-block tabsElem\" onclick=\"openTab(event,\\'advanced\\')\"><a href=\"javascript:void(0);\" class=\"tabunactive tab inline-block\" data-role = \"button\">'.$langs->trans('Advanced').'</a></div>';\n\techo '<div class=\"inline-block tabsElem\" onclick=\"openTab(event,\\'invoice\\')\"><a href=\"javascript:void(0);\" class=\"tabunactive tab inline-block\" data-role = \"button\">'.$langs->trans('Invoice').'</a></div>';\n\techo '<div class=\"inline-block tabsElem\" onclick=\"openTab(event,\\'other\\')\"><a href=\"javascript:void(0);\" class=\"tabunactive tab inline-block\" data-role = \"button\">'.$langs->trans('Other').'</a></div>';\necho '</div>';\n\n/*\n * TAB General\n */\necho '<div id=\"general\" class=\"tabBar\">';\nprint '<span class=\"opacitymedium\">'.$langs->trans(\"GeneralTabDesc\").'</span>';\nprint load_fiche_titre( $langs->trans( \"GeneralOption\" ), '', '' );\n\necho '<form name=\"settings\" action=\"?action=save\" method=\"POST\">';\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// activate attendance\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Attendance\");\necho '</td><td align=\"left\">'.$langs->trans(\"AttendanceDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"attendance\" value=\"1\" ';\necho (($attendance == '1')?'checked':'').\"></td></tr>\";\n\n// type time\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"timeType\").'</td><td align=\"left\">'.$langs->trans(\"timeTypeDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"timeType\" value=\"hours\" ';\necho ($timetype == \"hours\"?\"checked\":\"\").'> '.$langs->trans(\"Hours\").'<br>';\necho '<input type = \"radio\" name = \"timeType\" value=\"days\" ';\necho ($timetype == \"days\"?\"checked\":\"\").'> '.$langs->trans(\"Days\").\"</td></tr>\";\n//hours perdays\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"hoursperdays\");\necho '</td><td align=\"left\">'.$langs->trans(\"hoursPerDaysDesc\").'</td>';\necho '<td align=\"left\"><input type = \"text\" name = \"hoursperday\" value=\"'.$hoursperday;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n//max hours perdays\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"maxhoursperdays\");//FIXTRAD\necho '</td><td align=\"left\">'.$langs->trans(\"maxhoursPerDaysDesc\").'</td>';// FIXTRAD\necho '<td align=\"left\"><input type = \"text\" name = \"maxhoursperday\" value=\"'.$maxhoursperday;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n// time span\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"timeSpan\").'</td><td align=\"left\">'.$langs->trans(\"timeSpanDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"timeSpan\" value=\"week\" ';\necho ($timeSpan == \"week\"?\"checked\":\"\").'> '.$langs->trans(\"Week\").'<br>';\necho '<input type = \"radio\" name = \"timeSpan\" value=\"splitedWeek\" ';\necho ($timeSpan == \"splitedWeek\"?\"checked\":\"\").'> '.$langs->trans(\"splitedWeek\").'<br>';\necho '<input type = \"radio\" name = \"timeSpan\" value=\"month\" ';\necho ($timeSpan == \"month\"?\"checked\":\"\").'> '.$langs->trans(\"Month\").\"</td></tr>\";\n// add holiday time\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"addholidaytime\");\necho '</td><td align=\"left\">'.$langs->trans(\"addholidaytimeDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"addholidaytime\" value=\"1\" ';\necho (($addholidaytime == '1')?'checked':'').\"></td></tr>\";\n// block holiday \necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blockholiday\");\necho '</td><td align=\"left\">'.$langs->trans(\"blockholidayDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"blockholiday\" value=\"1\" ';\necho (($blockholiday == '1')?'checked':'').\"></td></tr>\";\n// add public holiday time\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"addpublicholidaytime\");\necho '</td><td align=\"left\">'.$langs->trans(\"addpublicholidaytimeDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"addpublicholidaytime\" value=\"1\" ';\necho (($addpublicholidaytime == '1')?'checked':'').\"></td></tr>\";\n// block public holiday \necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blockpublicholiday\");\necho '</td><td align=\"left\">'.$langs->trans(\"blockpublicholidayDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"blockpublicholiday\" value=\"1\" ';\necho (($blockpublicholiday == '1')?'checked':'').\"></td></tr>\";\n// overtime week to check \necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"overtimeCheckWeeks\");//FIXTRAD\necho '</td><td align=\"left\">'.$langs->trans(\"overtimeCheckWeeksDesc\").'</td>';// FIXTRAD\necho '<td align=\"left\"><input type = \"text\" name = \"overtimecheckweeks\" value=\"'.$overtimecheckweeks;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n\n// add docs\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"adddocs\");\necho '</td><td align=\"left\">'.$langs->trans(\"adddocsDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"adddocs\" value=\"1\" ';\necho (($adddocs == '1')?'checked':'').\"></td></tr>\";\n//Add for other\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"addForOther\");\necho '</td><td align=\"left\">'.$langs->trans(\"addForOtherDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"addForOther\" value=\"1\" ';\necho (($addForOther == '1')?'checked':'').\"></td></tr>\";\necho \"</table><br>\";\n\nprint load_fiche_titre( $langs->trans(\"DiplayOptions\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// hide draft\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"hidedraft\");\necho '</td><td align=\"left\">'.$langs->trans(\"hideDraftDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"hidedraft\" value=\"1\" ';\necho (($hidedraft == '1')?'checked':'').\"></td></tr>\";\n// hide ref\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"hideref\");\necho '</td><td align=\"left\">'.$langs->trans(\"hideRefDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"hideref\" value=\"1\" ';\necho (($hideref == '1')?'checked':'').\"></td></tr>\";\n// hide zeros\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"hidezeros\");\necho '</td><td align=\"left\">'.$langs->trans(\"hideZerosDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"hidezeros\" value=\"1\" ';\necho (($hidezeros == '1')?'checked':'').\"></td></tr>\";\n// show timespentNote\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"ShowTimespentNote\");\necho '</td><td align=\"left\">'.$langs->trans(\"ShowTimespentNoteDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showTimespentNote\" value=\"1\" ';\necho (($showTimespentNote == '1')?'checked':'').\"></td></tr>\";\necho \"</table><br>\";\n\nprint load_fiche_titre( $langs->trans(\"OpenDays\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th>'.$langs->trans(\"Monday\").'</th><th>';\necho $langs->trans(\"Tuesday\").'</th><th>'.$langs->trans(\"Wednesday\").'</th><th>';\necho $langs->trans(\"Thursday\").'</th><th>'.$langs->trans(\"Friday\").'</th><th>';\necho $langs->trans(\"Saturday\").'</th><th>'.$langs->trans(\"Sunday\").'</th>';\necho '<input type = \"hidden\" name = \"opendays[0]\" value=\"_\">';\necho \"</tr><tr>\";\nfor ($i = 1; $i<8; $i++) {\n    echo  '<td width = \"14%\" style = \"text-align:left\"><input type = \"checkbox\" name = \"opendays['.$i.']\" value=\"1\" ';\n    echo (($opendays[$i] == '1')?'checked':'').\"></td>\";\n}\necho \"</tr></table><br>\";\n\nprint load_fiche_titre( $langs->trans(\"ColumnToShow\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// Project\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Project\");\necho '</td><td align=\"left\">'.$langs->trans(\"ProjectColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showProject\" value=\"1\" ';\necho (($showProject == '1')?'checked':'').\"></td></tr>\";\n// task parent\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"TaskParent\");\necho '</td><td align=\"left\">'.$langs->trans(\"TaskParentColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showTaskParent\" value=\"1\" ';\necho (($showTaskParent == '1')?'checked':'').\"></td></tr>\";\n// task\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Tasks\");\necho '</td><td align=\"left\">'.$langs->trans(\"TasksColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showTasks\" value=\"1\" ';\necho (($showTasks == '1')?'checked':'').\"></td></tr>\";\n// date de debut\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"DateStart\");\necho '</td><td align=\"left\">'.$langs->trans(\"DateStartColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showDateStart\" value=\"1\" ';\necho (($showDateStart == '1')?'checked':'').\"></td></tr>\";\n// date de fin\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"DateEnd\");\necho '</td><td align=\"left\">'.$langs->trans(\"DateEndColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showDateEnd\" value=\"1\" ';\necho (($showDateEnd == '1')?'checked':'').\"></td></tr>\";\n// Progres\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Progress\");\necho '</td><td align=\"left\">'.$langs->trans(\"ProgressColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showProgress\" value=\"1\" ';\necho (($showProgress == '1')?'checked':'').\"></td></tr>\";\n// ProgresD\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"ProgressDeclared\");\necho '</td><td align=\"left\">'.$langs->trans(\"ProgressDeclaredColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showProgressDeclared\" value=\"1\" ';\necho (($showProgressDeclared == '1')?'checked':'').\"></td></tr>\";\n// Company\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Company\");\necho '</td><td align=\"left\">'.$langs->trans(\"CompanyColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showCompany\" value=\"1\" ';\necho (($showCompany == '1')?'checked':'').\"></td></tr>\";\n//note\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Note\");\necho '</td><td align=\"left\">'.$langs->trans(\"NoteDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showNote\" value=\"1\" ';\necho (($showNote == '1')?'checked':'').\"></td></tr>\";\n//Total\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Total\");\necho '</td><td align=\"left\">'.$langs->trans(\"TotalDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showTotal\" value=\"1\" ';\necho (($showTotal == '1')?'checked':'').\"></td></tr>\";\n/*\n// custom FIXME\necho  '<tr class=\"oddeven\"><th align=\"left\">'.$langs->trans(\"CustomCol\");\necho '</th><th align=\"left\">'.$langs->trans(\"CustomColDesc\").'</th>';\necho  '<th align=\"left\"><input type = \"checkbox\" name = \"showCustomCol\" value=\"1\" ';\necho (($showCustomCol == '1')?'checked':'').\"</th></tr>\";\n*/\necho '</table>';\necho \"</div>\";\n\n/*\n * TAB ADVANCED\n */\necho '<div id=\"advanced\" class=\"tabBar\">';\nprint '<span class=\"opacitymedium\">'.$langs->trans(\"AdvancedTabDesc\").'</span>';\n\nprint load_fiche_titre( $langs->trans(\"Approval\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\n// approval by week\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"approvalbyweek\");\necho '</td><td align=\"left\">'.$langs->trans(\"approvalbyweekDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"approvalbyweek\" value=\"0\" ';\necho ($approvalbyweek == '0'?\"checked\":\"\").'> '.$langs->trans(\"User\").'<br>';\necho '<input type = \"radio\" name = \"approvalbyweek\" value=\"1\" ';\necho ($approvalbyweek == '1'?\"checked\":\"\").'> '.$langs->trans(\"Week\").'<br>';\necho '<input type = \"radio\" name = \"approvalbyweek\" value=\"2\" ';\necho ($approvalbyweek == '2'?\"checked\":\"\").'> '.$langs->trans(\"Month\").\"</td></tr>\";\n// max approval\necho '<tr class=\"oddeven\" ><td align=\"left\">'.$langs->trans(\"maxapproval\");//FIXTRAD\necho '</td><td align=\"left\">'.$langs->trans(\"maxapprovalDesc\").'</td>';// FIXTRAD\necho '<td  align=\"left\"><input type = \"text\" name = \"maxapproval\" value=\"'.$maxApproval;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\necho '</table>';\n\n// approval flows\nprint load_fiche_titre( $langs->trans(\"ApplovalFlow\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\");\necho '<input type = \"hidden\" name = \"apflows[0]\" value=\"_\"></th>';\necho \"</tr>\";\n//team\necho '<tr><td>'.$langs->trans(\"Team\").'</td><td>'.$langs->trans(\"TeamApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[1]\" value=\"1\"';\necho (($apflows[1] == '1')?'checked':'').'></td><tr>';\n//Project\necho '<tr><td>'.$langs->trans(\"Project\").'</td><td>'.$langs->trans(\"ProjectApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[2]\" value=\"1\"';\necho (($apflows[2] == '1')?'checked':'').'></td><tr>';\n/*//Customer\necho '<tr style = \"display:none\"><td>'.$langs->trans(\"Customer\").'</td><td>'.$langs->trans(\"CustomerApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[3]\" value=\"1\"';\necho (($apflows[3] == '1')?'checked':'').'></td><tr>';\n//Supplier\necho '<tr style = \"display:none\"><td>'.$langs->trans(\"Supplier\").'</td><td>'.$langs->trans(\"SupplierApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[4]\" value=\"1\"';\necho (($apflows[4] == '1')?'checked':'').'></td><tr>';\n//Other\necho '<tr style = \"display:none\"><td>'.$langs->trans(\"Other\").'</td><td>'.$langs->trans(\"OtherApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[5]\" value=\"1\"';\necho (($apflows[5] == '1')?'checked':'').'></td><tr>';\n*/\necho \"</tr></table><br>\";\nprint load_fiche_titre( $langs->trans(\"Attendance\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n//min hours per event\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"minSecondsPerEvent\");\necho '</td><td align=\"left\">'.$langs->trans(\"minSecondsPerEventDesc\").'</td>';\necho '<td align=\"left\"><input type = \"text\" name = \"minSecondsPerEvent\" value=\"'.$minsecondsperevent;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n//max hours per event\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"maxHoursPerEvent\");\necho '</td><td align=\"left\">'.$langs->trans(\"maxHoursPerEventDesc\").'</td>';\necho '<td align=\"left\"><input type = \"text\" name = \"maxhoursperevent\" value=\"'.$maxhoursperevent;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n//default hours per event\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"defaultHoursPerEvent\");\necho '</td><td align=\"left\">'.$langs->trans(\"defaultHoursPerEventDesc\").'</td>';\necho '<td align=\"left\"><input type = \"text\" name = \"defaulthoursperevent\" value=\"'.$defaulthoursperevent;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n// block creation of timespent\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blockTimespent\");\necho '</td><td align=\"left\">'.$langs->trans(\"blockTimespentDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"blockTimespent\" value=\"1\" ';\necho (($blockTimespent == '1')?'checked':'').\"></td></tr>\";\necho \"</table><br>\";\n\n//Color\nprint load_fiche_titre( $langs->trans(\"Color\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// color draft\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"draft\");\necho '</td><td align=\"left\">'.$langs->trans(\"draftColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"draftColor\" class=\"jscolor\" value=\"';\necho $draftColor.\"\\\"></td></tr>\";\n// color value\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"value\");\necho '</td><td align=\"left\">'.$langs->trans(\"valueColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"valueColor\" class=\"jscolor\" value=\"';\necho $valueColor.\"\\\"></td></tr>\";\n// color frozen\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"frozen\");\necho '</td><td align=\"left\">'.$langs->trans(\"frozenColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"frozenColor\" class=\"jscolor\" value=\"';\necho $frozenColor.\"\\\"></td></tr>\";\n// color submitted\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"submitted\");\necho '</td><td align=\"left\">'.$langs->trans(\"submittedColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"submittedColor\" class=\"jscolor\" value=\"';\necho $submittedColor.\"\\\"></td></tr>\";\n// color approved\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"approved\");\necho '</td><td align=\"left\">'.$langs->trans(\"approvedColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"approvedColor\" class=\"jscolor\" value=\"';\necho $approvedColor.\"\\\"></td></tr>\";\n// color cancelled\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"cancelled\");\necho '</td><td align=\"left\">'.$langs->trans(\"cancelledColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"cancelledColor\" class=\"jscolor\" value=\"';\necho $cancelledColor.\"\\\"></td></tr>\";\n// color rejected\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"rejected\");\necho '</td><td align=\"left\">'.$langs->trans(\"rejectedColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"rejectedColor\" class=\"jscolor\" value=\"';\necho $rejectedColor.\"\\\"></td></tr>\";\necho '</table><br>';\n\n//whitelist mode\nprint load_fiche_titre( $langs->trans(\"blackWhiteList\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// whitelist on/off\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blackWhiteList\");\necho '</td><td align=\"left\">'.$langs->trans(\"blackWhiteListDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"blackWhiteList\" value=\"1\" ';\necho (($whiteList == '1')?'checked':'').\"></td></tr>\";\n// Project\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blackWhiteListMode\").'</td>';\necho '<td align=\"left\">'.$langs->trans(\"blackWhiteListModeDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"blackWhiteListMode\" value=\"0\" ';\necho ($whiteListMode == \"0\"?\"checked\":\"\").'> '.$langs->trans(\"modeWhiteList\").'<br>';\necho '<input type = \"radio\" name = \"blackWhiteListMode\" value=\"1\" ';\necho ($whiteListMode == \"1\"?\"checked\":\"\").'> '.$langs->trans(\"modeBlackList\").\"<br>\";\necho '<input type = \"radio\" name = \"blackWhiteListMode\" value=\"2\" ';\necho ($whiteListMode == \"2\"?\"checked\":\"\").'> '.$langs->trans(\"modeNone\").\"</td></tr>\";\necho '</table><br>';\necho '<br>';\n\n//advanced behaviour\nprint load_fiche_titre( $langs->trans(\"AdvancedBehaviour\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// searchbox\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"searchbox\");\necho '</td><td align=\"left\">'.$langs->trans(\"searchboxDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"searchBox\" value=\"1\" ';\necho (($searchbox == '1')?'checked':'').\"></td></tr>\";\n// ROUND\necho '<tr class=\"oddeven\" ><td align=\"left\">'.$langs->trans(\"tsRound\");\necho '</td><td align=\"left\">'.$langs->trans(\"tsRoundDesc\").'</td>';\necho '<td  align=\"left\"><input type = \"text\" name = \"tsRound\" value=\"'.$tsRound;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n// IMPORT AGENDA\necho '<tr class=\"oddeven\" ><td align=\"left\">'.$langs->trans(\"ImportAgenda\");\necho '</td><td align=\"left\">'.$langs->trans(\"ImportAgendaDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"importagenda\" value=\"1\" ';\necho (($importagenda == '1')?'checked':'').\"></td></tr>\";\n// eval ADDLINE\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"evalAddLine\");\necho '</td><td align=\"left\">'.$langs->trans(\"evalAddLineDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"evalAddLine\" value=\"1\" ';\necho (($evalAddLine == '1')?'checked':'').\"></td></tr>\";\n// export format\n$formats = array();\nforeach (glob(DOL_DOCUMENT_ROOT . \"/core/modules/export/export_*.modules.php\") as $file) {\n    preg_match_all(\"/export_(?<format>.+)\\.modules\\.php/\", $file, $matches);\n    $formats[] = $matches['format'][0];\n}\necho '<tr class=\"oddeven\" ><td align=\"left\">'.$langs->trans(\"exportFormat\");\necho '</td><td align=\"left\">'.$langs->trans(\"exportFormatDesc\").'</td>';\necho '<td  align=\"left\"><select name = \"exportFormat\">';\nforeach($formats as $format){\necho \"<option value=\\\"$format\\\" \".($exportFormat==$format?'selected':'').\">$format</option>\";\n}\necho \"</select></td></tr>\";\n// allow add time on public project\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"allowPublic\");\necho '</td><td align=\"left\">'.$langs->trans(\"allowPublicDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"allowPublic\" value=\"1\" ';\necho (($allowPublic == '1')?'checked':'').\"></td></tr>\";\n\n// unblock invoiced\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"unblockInvoiced\");\necho '</td><td align=\"left\">'.$langs->trans(\"unblockInvoicedDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"unblockInvoiced\" value=\"1\" ';\necho (($unblockInvoiced == '1')?'checked':'').\"></td></tr>\";\n// unblock closed day\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"unblockClosed\");\necho '</td><td align=\"left\">'.$langs->trans(\"unblockClosedDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"unblockClosed\" value=\"1\" ';\necho (($unblockClosed == '1')?'checked':'').\"></td></tr>\";\n// show invoiced col in reports\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"reportInvoicedCol\");\necho '</td><td align=\"left\">'.$langs->trans(\"reportInvoicedColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"reportInvoicedCol\" value=\"1\" ';\necho (($reportInvoicedCol == '1')?'checked':'').\"></td></tr>\";\n// ungroup lvl3 reports\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"reportUngroup\");\necho '</td><td align=\"left\">'.$langs->trans(\"reportUngroupDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"reportUngroup\" value=\"1\" ';\necho (($reportUngroup == '1')?'checked':'').\"></td></tr>\";\n\n\n\necho '</table>';\n\necho '</div>';\n/*\n * INVOICE\n */\necho '<div id=\"invoice\" class=\"tabBar\">';\nprint '<span class=\"opacitymedium\">'.$langs->trans(\"InvoiceTabDesc\").'</span>';\n\nprint load_fiche_titre( $langs->trans(\"Invoice\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n//lines invoice method\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceMethod\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceMethodDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"radio\" name = \"invoiceMethod\" value=\"task\" ';\necho (($invoicemethod == 'task')?'checked':'').\">\".$langs->trans(\"Task\").'<br>';\necho '<input type = \"radio\" name = \"invoiceMethod\" value=\"user\" ';\necho (($invoicemethod == 'user')?'checked':'').\">\".$langs->trans(\"User\").'<br>';\necho '<input type = \"radio\" name = \"invoiceMethod\" value=\"taskUser\" ';\necho (($invoicemethod == 'taskUser')?'checked':'').\">\".$langs->trans(\"Tasks\").' & '.$langs->trans(\"User\").'<br>';\necho \"</td></tr>\";\n// type time\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceTimeType\").'</td><td align=\"left\">'.$langs->trans(\"invoiceTimeTypeDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"invoiceTimeType\" value=\"hours\" ';\necho ($invoicetimetype == \"hours\"?\"checked\":\"\").'> '.$langs->trans(\"Hours\").'<br>';\necho '<input type = \"radio\" name = \"invoiceTimeType\" value=\"days\" ';\necho ($invoicetimetype == \"days\"?\"checked\":\"\").'> '.$langs->trans(\"Days\").\"</td></tr>\";\n//line invoice Service\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceService\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceServiceDesc\").'</td>';\necho  '<td align=\"left\">';\n$addchoices = array('-999'=> $langs->transnoentitiesnoconv('not2invoice'), -997=> $langs->transnoentitiesnoconv('Custom'));\n$ajaxNbChar = $conf->global->PRODUIT_USE_SEARCH_TO_SELECT;\n$htmlProductArray = array('name' => 'invoiceservice', 'ajaxNbChar'=>$ajaxNbChar);\n$sqlProductArray = array('table' => 'product', 'keyfield' => 'rowid', 'fields' => 'ref, label', 'where' => 'tosell = 1 AND fk_product_type = 1', 'separator' => ' - ');\nprint select_sellist($sqlProductArray, $htmlProductArray, $invoiceservice, $addchoices);\necho \"</td></tr>\";\n//line tasktime ==\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceTaskTime\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceTaskTimeDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"radio\" name = \"invoiceTaskTime\" value=\"all\" ';\necho (($invoicetasktime == 'all')?'checked':'').\">\".$langs->trans(\"All\").'<br>';\necho '<input type = \"radio\" name = \"invoiceTaskTime\" value=\"approved\" ';\necho (($invoicetasktime == 'approved')?'checked':'').\">\".$langs->trans(\"Approved\").'<br>';\necho \"</td></tr>\";\n//line show user\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceShowUser\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceShowUserDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"invoiceShowUser\" value=\"1\" ';\necho (($invoiceshowuser == '1')?'checked':'').\"></td></tr>\";\n//line show task\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceShowTask\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceShowTaskDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"invoiceShowTask\" value=\"1\" ';\necho (($invoiceshowtask == '1')?'checked':'').\"></td></tr>\";\n//hide signbox\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"pdfHideSignbox\");\necho '</td><td align=\"left\">'.$langs->trans(\"pdfHideSignboxDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"pdfHideSignbox\" value=\"1\" ';\necho (($pdfhidesignbox == '1')?'checked':'').\"></td></tr>\";\n//hide name\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"pdfHideName\");\necho '</td><td align=\"left\">'.$langs->trans(\"pdfHideNameDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"pdfHideName\" value=\"1\" ';\necho (($pdfHideName == '1')?'checked':'').\"></td></tr>\";\n\n\n// Show note on PDF\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"NoteOnPDF\").'</td><td align=\"left\">'.$langs->trans(\"NoteOnPDFDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"noteOnPDF\" value=\"0\" ';\necho ($noteOnPDF == \"0\"?\"checked\":\"\").'> '.$langs->trans(\"Task\").'<br> <input type = \"radio\" name = \"noteOnPDF\" value=\"1\" ';\necho ($noteOnPDF == \"1\"?\"checked\":\"\").'> '.$langs->trans(\"Note\").'<br>  <input type = \"radio\" name = \"noteOnPDF\" value=\"2\"';\necho ($noteOnPDF == \"2\"?\"checked\":\"\").'> '.$langs->trans(\"Task\").\"&\".$langs->trans(\"Note\").\"</td></tr>\";\necho '</table><br>';\necho '</div>'; // END TAB 'invoice'\n\n/*\n * TAB: Other\n */\necho '<div id=\"other\" class=\"tabBar\">';\n\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"OtherTabDesc\").'</span>';\n\n\tprint load_fiche_titre( $langs->trans(\"Dolibarr\"), '', '' );\n\techo '<table class=\"noborder\" width = \"100%\">';\n\t\techo '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\n\t\techo $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n\t\techo  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"dropdownAjax\");\n\t\techo '</td><td align=\"left\">'.$langs->trans(\"dropdownAjaxDesc\").'</td>';\n\t\techo  '<td align=\"left\"><input type = \"checkbox\" name = \"dropdownAjax\" value=\"1\" ';\n\t\techo (($dropdownAjax == '1')?'checked':'').\"></td></tr>\";\n\techo '</table>';\n\n\t// doc\n\tprint load_fiche_titre( $langs->trans(\"Manual\"), '', '' );\n\techo '<ul>';\n\techo '<li><a href=\"../doc/Module_timesheet.pdf\">  PDF </a></li>';\n\techo '<li><a href=\"../doc/Module_timesheet.docx\">  DOCX </a></li>';\n    echo '<li><a href=\"../doc/html/index.html\">  HTML </a></li>';\n\techo '</ul>';\n\n\tprint load_fiche_titre( $langs->trans(\"Feedback\"), '', '' );\n\techo $langs->trans('feebackDesc').' : <a href = \"mailto:patrick@pmpd.eu?subject=TimesheetFeedback\"> Patrick Delcroix</a>';\n\n\tprint load_fiche_titre( $langs->trans(\"Reminder\"), '', '' );\n\tprint '<div>'.$langs->trans('reminderEmailProcess').'</div>';\n    print load_fiche_titre( $langs->trans(\"Traduction\"), '', '' );\n    print '<a href=\"https://app.lokalise.com/public/761399855cb829e995d448.06757516\">Localize Project</a>';\n\necho '</div>'; // END TAB 'other'\n\nprint '<div class=\"tabsAction\">';\n\tprint '<div class=\"inline-block divButAction\"><input type=\"submit\" class=\"button butAction\" value=\"' . $langs->trans( 'Save' ) . '\" /></div>';\nprint \"</div>\";\n\necho '</form>';\necho '<script>document.getElementById(\"defaultOpen\").click()</script>';\n\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2007-2012 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2014           Juanjo Menent                <jmenent@2byte.es>\n * Copyright (C) 2018           Patrick DELCROIX     <pmpdelcroix@gmail.com>\n * Copyright (C) ---Put here your own copyright and developer email---\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *  \\file       dev/attendanceevents/attendanceevent.class.php\n *  \\ingroup    timesheet othermodule1 othermodule2\n *  \\brief      This file is an example for a CRUD class file(Create/Read/Update/Delete)\n *                                Initialy built by build_class_from_table on 2018-11-05 20:22\n */\n// Put here all includes required by your class file\nrequire_once DOL_DOCUMENT_ROOT.\"/core/class/commonobject.class.php\";\n//require_once DOL_DOCUMENT_ROOT.'/societe/class/societe.class.php';\n//require_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\nrequire_once 'class/TimesheetTask.class.php';\nrequire_once 'core/lib/timesheet.lib.php';\nrequire_once 'class/TimesheetFavourite.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/projet/class/task.class.php';\n$attendanceeventStatusPictoArray = array(-2=> 'status7', 3=> 'statut3', 1=>'statut3', 2=>'statut3', 4=>'statut7');\n$attendanceeventStatusArray = array(-2=> $langs->trans('AutoCheckin'), 1=>$langs->trans('Heartbeat'), 2=>$langs->trans('Checkin'), 3=>$langs->trans('Checkout'), 4=>$langs->trans('AutoCheckout'));\n/**\n *        Put here description of your class\n */\nclass Attendanceevent extends CommonObject\n{\n    /**\n     * @var string ID to identify managed object\n     */                                //!< To return several error codes(or messages)\n    public $element = 'attendanceevent';                        //!< Id that identify managed objects\n    /**\n     * @var string Name of table without prefix where object is stored\n     */\n    public $table_element = 'attendance_event';                //!< Name of table without prefix where object is stored\n    public $id;\n    // BEGIN OF automatic var creation(from db)\n        public $date_time_event = '';\n        public $event_location_ref;\n        public $event_type;\n        public $note;\n        public $date_modification = '';\n        public $userid;\n        public $user_modification;\n        public $third_party;\n        public $task;\n        public $project;\n        public $token;\n        public $status;\n        // working var\n        public $taskLabel;\n        public $projectLabel;\n        public $third_partyLabel;\n       // private $tasks;// aarray of tasktimesheet\n    // END OF automatic var creation\npublic $date_time_event_start;\n    /**\n     *  Constructor\n     *\n     *  @param        DoliDb                $db      Database handler\n     *  @param        object          $userid    userid\n     */\n    public function __construct($db, $userid)\n    {\n        $this->db = $db;\n        $this->userid = $userid;\n        return 1;\n    }\n    /**\n     *  Create object into database\n     *\n     *  @param        User        $user        User that creates\n     *  @param  int                $notrigger   0 = launch triggers after, 1 = disable triggers\n     *  @return int                         <0 if KO, Id of created object if OK\n     */\n    public function create($user, $notrigger = 0)\n    {\n        global $conf, $langs;\n                $error = 0;\n                // Clean parameters\n        $this->cleanParam();\n                // Check parameters\n                // Put here code to add control on parameters values\n        // Insert request\n        $sql = \"INSERT INTO \".MAIN_DB_PREFIX.$this->table_element.\"(\";\n        $sql .= 'date_time_event, ';\n        $sql .= 'event_location_ref, ';\n        $sql .= 'event_type, ';\n        $sql .= 'note, ';\n        $sql .= 'fk_userid, ';\n        $sql .= 'fk_third_party, ';\n        $sql .= 'fk_task, ';\n        $sql .= 'fk_project, ';\n        $sql .= 'token, ';\n        $sql .= 'status, ';\n        $sql .= 'date_modification, fk_user_modification';\n        $sql .= \") VALUES(\";\n        $sql .= ' '.(empty($this->date_time_event) || dol_strlen($this->date_time_event) == 0?'NULL':\"'\".$this->db->idate($this->date_time_event).\"'\").', ';\n        $sql .= ' '.(empty($this->event_location_ref)?'NULL':\"'\".$this->db->escape($this->event_location_ref).\"'\").', ';\n        $sql .= ' '.(empty($this->event_type)?'NULL':\"'\".$this->event_type.\"'\").', ';\n        $sql .= ' '.(empty($this->note)?'NULL':\"'\".$this->db->escape($this->note).\"'\").', ';\n        $sql .= ' '.(empty($this->userid)?'NULL':\"'\".$this->userid.\"'\").', ';\n        $sql .= ' '.(empty($this->third_party)?'NULL':\"'\".$this->third_party.\"'\").', ';\n        $sql .= ' '.(empty($this->task)?'NULL':\"'\".$this->task.\"'\").', ';\n        $sql .= ' '.(empty($this->project)?'NULL':\"'\".$this->project.\"'\").', ';\n        $sql .= ' '.(empty($this->token)?'NULL':\"'\".$this->token.\"'\").', ';\n        $sql .= ' '.(empty($this->status)?'NULL':\"'\".$this->status.\"'\").'';\n        $sql .= ', NOW(), \\''.$user->id.'\\'';\n        $sql .= \")\";\n        $this->db->begin();\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if (! $resql) { $error++;$this->errors[] = \"Error \".$this->db->lasterror();}\n        if (! $error) {\n            $this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.$this->table_element);\n            if (! $notrigger) {\n            // Uncomment this and change MYOBJECT to your own tag if you\n            // want this action calls a trigger.\n            //// Call triggers\n            //$result = $this->call_trigger('MYOBJECT_CREATE', $user);\n            //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n            //// End call triggers\n            }\n        }\n        // Commit or rollback\n        if ($error) {\n            foreach ($this->errors as $errmsg) {\n                dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                $this->error .= ($this->error?', '.$errmsg:$errmsg);\n            }\n            $this->db->rollback();\n            return -1*$error;\n        } else {\n            $this->db->commit();\n            return $this->id;\n        }\n    }\n    /**\n     *  Load object in memory from the database\n     *\n     *  @param        int                $id        Id object\n     *  @param        object          $user        user to find the latest event wich is not closed\n     *  @param        string          $startToken        token used to find the start event\n     *  @return int           <0 if KO, >0 if OK\n     */\n    public function fetch($id, $user = null, $startToken = '')\n    {\n        global $langs;\n        $sql = \"SELECT\";\n        $sql .= \" t.rowid, \";\n        $sql .= ' t.date_time_event, ';\n        $sql .= ' t.event_location_ref, ';\n        $sql .= ' t.event_type, ';\n        $sql .= ' t.note, ';\n        $sql .= ' t.date_modification, ';\n        $sql .= ' t.fk_userid, ';\n        $sql .= ' t.fk_user_modification, ';\n        $sql .= ' t.fk_third_party, ';\n        $sql .= ' t.fk_task, ';\n        $sql .= ' t.fk_project, ';\n        $sql .= ' t.token, ';\n        $sql .= ' t.status, ';\n        $sql .= '  st.date_time_event  as date_time_event_start ';\n        $sql .= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as t\";\n        $sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.$this->table_element\n            .\" as st ON t.token = st.token AND ABS(st.event_type = 2)\";\n        $sql .= \" WHERE \";\n        if (!empty($id))$sql .= \"t.rowid = '\".$id;\n        elseif (!empty($user))$sql .= \" t.fk_userid = '\".$user->id;\n        elseif (!empty($startToken))  $sql .= \"  t.token = '\".$startToken;\n        else{\n            $sql .= \" t.fk_userid = '\".$this->userid;\n        }\n        $sql .= \"' ORDER BY date_time_event DESC\" ;\n        $this->db->plimit(1, 0);\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if ($resql && $this->db->num_rows($resql)) {\n            $obj = $this->db->fetch_object($resql);\n            // load the object only if  not an stop event while using the user\n            $this->id = $obj->rowid;\n            $this->date_time_event = $this->db->jdate($obj->date_time_event);\n            $this->event_location_ref = $obj->event_location_ref;\n            $this->event_type = $obj->event_type;\n            $this->note = $obj->note;\n            $this->date_modification = $this->db->jdate($obj->date_modification);\n            $this->userid = $obj->fk_userid;\n            $this->user_modification = $obj->fk_user_modification;\n            $this->third_party = $obj->fk_third_party;\n            $this->task = $obj->fk_task;\n            $this->project = $obj->fk_project;\n            $this->token = $obj->token;\n            $this->status = $obj->status;\n            $this->date_time_event_start = $this->db->jdate($obj->date_time_event_start);\n            $this->db->free($resql);\n            $this->getInfo();\n            return 1;\n        } else {\n            $this->error = \"Error \".$this->db->lasterror();\n            return -1;\n        }\n    }\n    /**\n     *  Update object into database\n     *\n     *  @param        User        $user        User that modifies\n     *  @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return int                         <0 if KO, >0 if OK\n     */\n    public function update($user, $notrigger = 0)\n    {\n        $error = 0;\n        // Clean parameters\n        $this->cleanParam(true);\n        // Check parameters\n        // Put here code to add a control on parameters values\n        // Update request\n        $sql = \"UPDATE \".MAIN_DB_PREFIX.$this->table_element.\" SET\";\n        $sql .= $this->setSQLfields($user);\n        $sql .= \" WHERE rowid=\".$this->id;\n        $this->db->begin();\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if (! $resql) { $error++;$this->errors[] = \"Error \".$this->db->lasterror();}\n            if (! $error) {\n                if (! $notrigger) {\n            // Uncomment this and change MYOBJECT to your own tag if you\n            // want this action calls a trigger.\n            //// Call triggers\n            //$result = $this->call_trigger('MYOBJECT_MODIFY', $user);\n            //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n            //// End call triggers\n                }\n            }\n        // Commit or rollback\n            if ($error) {\n                foreach ($this->errors as $errmsg) {\n                    dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                    $this->error .= ($this->error?', '.$errmsg:$errmsg);\n                }\n                $this->db->rollback();\n                return -1*$error;\n            } else {\n                $this->db->commit();\n                return 1;\n            }\n    }\n     /**\n     *        Return clickable name(with picto eventually)\n     *\n     *        @param                string                        $htmlcontent                text to show\n     *        @param                int                        $id                     Object ID\n     *        @param                string                        $ref                    Object ref\n     *        @param                int                        $withpicto                0 = _No picto, 1 = Includes the picto in the linkn, 2 = Picto only\n     *        @return                string                                                String with URL\n     */\n    public function getNomUrl($withpicto = 0, $id = 0, $ref = '' )\n    {\n        global $conf, $langs;\n        if (! empty($conf->dol_no_mouse_hover)) $notooltip = 1;// Force disable tooltips\n        $result = '';\n        if (empty($ref) && $id == 0) {\n            if (isset($this->id)) {\n                $id = $this->id;\n            } elseif (isset($this->rowid)) {\n                $id = $this->rowid;\n            }if (isset($this->ref)) {\n                $ref = $this->ref;\n            }\n        }\n        $linkclose = '';\n        $label = '';\n        //field to show beside the icon\n        $label .= $this->getLabel('text');\n\n        //info card more info could be display\n        $card = '<u>' . $langs->trans(\"AttendanceEvent\") . '</u>';\n        $card .= '<br>';\n        if ($ref){\n            $card .= $langs->trans(\"Ref\").': '.$ref;\n        }else if ($id){\n            $card .= $langs->trans(\"#\").': '.$id;\n        }\n        if (empty($notooltip))\n        {\n            if (! empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n            {\n                $label = $langs->trans(\"AttendanceEvent\");\n                $linkclose .= ' alt = \"'.dol_escape_htmltag($label, 1).'\"';\n            }\n            $linkclose .= ' title = \"'.dol_escape_htmltag($card, 1).'\"';\n            $linkclose .= ' class = \"classfortooltip'.($morecss?' '.$morecss:'').'\"';\n        } else $linkclose = ($morecss?' class = \"'.$morecss.'\"':'');\n        if ($id) {\n            $lien = '<a href = \"'.dol_buildpath('/timesheet/AttendanceEventCard.php', 1)\n                .'id='.$id.'&action=view\"'.$linkclose.'>';\n        } elseif (!empty($ref)) {\n            $lien = '<a href = \"'.dol_buildpath('/timesheet/AttendanceEventCard.php', 1)\n                .'?ref='.$ref.'&action=view\"'.$linkclose.'>';\n        } else{\n            $lien = \"\";\n        }\n        $lienfin = empty($lien)?'':'</a>';\n        $picto = 'generic';\n    \tif ($withpicto == 1){ \n            $result .= $lien.img_object(''.$picto).$label.$lienfin;\n        }else if ($withpicto == 2) {\n            $result .= ($lien.img_object($label, $picto).$lienfin);\n        }else{  \n            $result .= $lien.$label.$lienfin;\n        }\n        return $result;\n    }\n    /**\n     *  Retourne select libelle du status(actif, inactif)\n     *\n     *  @param        object                $form          form object that should be created\n     *  @param        string                $htmlname      HTML name\n     *  @return        string                               html code to select status\n     */\n    public function selectLibStatut($form, $htmlname = 'Status')\n    {\n        global $attendanceeventStatusPictoArray, $attendanceeventStatusArray;\n        return $form->selectarray($htmlname, $attendanceeventStatusArray, $this->status);\n    }\n    /**\n    *  Retourne le libelle du status(actif, inactif)\n    *\n    *  @param        int                $mode          0 = libelle long, 1 = libelle court, 2 = Picto + Libelle court, 3 = Picto, 4 = Picto + Libelle long, 5 = Libelle court + Picto\n    *  @return        string                               Label of status\n    */\n   public function getLibStatut($mode = 0)\n   {\n           return $this->libStatut($this->status, $mode);\n   }\n    /**\n     *  Return the status\n     *\n     *  @param        int                $status         Id status\n     *  @param  int                $mode           0 = long label, 1 = short label, 2 = Picto + short label, 3 = Picto, 4 = Picto + long label, 5 = Short label + Picto, 6 = Long label + Picto\n     *  @return string                                Label of status\n     */\n    public static function libStatut($status, $mode = 0)\n    {\n        global $langs, $attendanceeventStatusPictoArray, $attendanceeventStatusArray;\n        if ($mode == 0) {\n            $prefix = '';\n            return $langs->trans($attendanceeventStatusArray[$status]);\n        }\n        if ($mode == 1) {\n            return $langs->trans($attendanceeventStatusArray[$status]);\n        }\n        if ($mode == 2) {\n            return img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status])\n                .' '.$langs->trans($attendanceeventStatusArray[$status]);\n        }\n        if ($mode == 3) {\n            return img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status]);\n        }\n        if ($mode == 4) {\n            return img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status])\n                .' '.$langs->trans($attendanceeventStatusArray[$status]);\n        }\n        if ($mode == 5) {\n            return $langs->trans($attendanceeventStatusArray[$status]).' '\n                .img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status]);\n        }\n        if ($mode == 6) {\n            return $langs->trans($attendanceeventStatusArray[$status]).' '\n                .img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status]);\n        }\n    }\n    /**\n     *  Delete object in database\n     *\n    *        @param  User        $user        User that deletes\n    *   @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return        int                                         <0 if KO, >0 if OK\n     */\n    public function delete($user, $notrigger = 0)\n    {\n        //global $conf, $langs;\n        if (empty($user)) return -1;\n        $error = 0;\n        $this->db->begin();\n        if (! $error) {\n            if (! $notrigger) {\n        // Uncomment this and change MYOBJECT to your own tag if you\n        // want this action calls a trigger.\n        //// Call triggers\n        //$result = $this->call_trigger('MYOBJECT_DELETE', $user);\n        //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n        //// End call triggers\n            }\n        }\n        if (! $error) {\n        $sql = \"DELETE FROM \".MAIN_DB_PREFIX.$this->table_element;\n        $sql .= \" WHERE rowid=\".$this->id;\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n            if (! $resql) \n            { \n                $error++;$this->errors[] = \"Error \".$this->db->lasterror();\n            } elseif ($this->db->affected_rows($resql) == 0) \n            {\n                $error++;$this->errors[] = \"Item no found in database\";\n            }\n        }\n// Commit or rollback\n        if ($error) {\n            foreach ($this->errors as $errmsg) {\n                dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                $this->error .= ($this->error?', '.$errmsg:$errmsg);\n            }\n            $this->db->rollback();\n            return -1*$error;\n        } else {\n            $this->db->commit();\n            return 1;\n        }\n    }\n    /**\n     *        Load an object from its id and create a new one in database\n     *\n     *        @param        int                $fromid     Id of object to clone\n     *        @return        int                                        New id of clone\n     */\n    public function createFromClone($fromid)\n    {\n        global $user, $langs;\n        $error = 0;\n        $object = new Attendanceevent($this->db, $this->userid);\n        $this->db->begin();\n        // Load source object\n        $object->fetch($fromid);\n        $object->id = 0;\n        $object->statut = 0;\n        // Clear fields\n        // ...\n        // Create clone\n        $result = $object->create($user);\n        // Other options\n        if ($result < 0) {\n            $this->error = $object->error;\n            $error++;\n        }\n        if (! $error) {\n        }\n        // End\n        if (! $error) {\n            $this->db->commit();\n            return $object->id;\n        } else {\n            $this->db->rollback();\n            return -1;\n        }\n    }\n    /**\n     *        Initialise object with example values\n     *        Id must be 0 if object instance is a specimen\n     *\n     *        @return        void\n     */\n    public function initAsSpecimen()\n    {\n        $this->id = 0;\n        $this->date_time_event = '';\n        $this->date_time_event_start = '';\n        $this->event_location_ref = '';\n        $this->event_type = 0;\n        $this->note = '';\n        $this->date_modification = '';\n        $this->userid = '';\n        $this->user_modification = '';\n        $this->third_party = '';\n        $this->task = '';\n        $this->project = '';\n        $this->third_partyLabel = '';\n        $this->taskLabel = '';\n        $this->projectLabel = '';\n        $this->token = '';\n        $this->status = '';\n    }\n    /**\n     *        will clean the parameters\n     *\n     *\n     *        @return        void\n     */\n    public function cleanParam()\n    {\n        if (!empty($this->date_time_event))\n            $this->date_time_event = trim($this->date_time_event);\n        if (!empty($this->event_location_ref))\n            $this->event_location_ref = trim($this->event_location_ref);\n        if (!empty($this->event_type))\n            $this->event_type = trim($this->event_type);\n        if (!empty($this->note))\n            $this->note = trim($this->note);\n        if (!empty($this->date_modification))\n            $this->date_modification = trim($this->date_modification);\n        if (!empty($this->userid))\n            $this->userid = trim($this->userid);\n        if (!empty($this->user_modification))\n            $this->user_modification = trim($this->user_modification);\n        if (!empty($this->third_party))\n            $this->third_party = trim($this->third_party);\n        if (!empty($this->task))\n            $this->task = trim($this->task);\n        if (!empty($this->project))\n            $this->project = trim($this->project);\n        if (!empty($this->token))\n            $this->token = trim($this->token);\n        if (!empty($this->status))\n            $this->status = trim($this->status);\n    }\n     /**\n     *        will create the sql part to update the parameters\n     *\n     *  @param USER $user user that will update\n     *        @return        void\n     */\n    public function setSQLfields($user)\n    {\n        $sql = '';\n        $sql .= ' date_time_event='\n            .(dol_strlen($this->date_time_event)!=0 ? \"'\"\n            .$this->db->idate($this->date_time_event).\"'\":'null').', ';\n        $sql .= ' event_location_ref='\n            .(empty($this->event_location_ref)!=0 ? 'null':\"'\"\n            .$this->db->escape($this->event_location_ref).\"'\").', ';\n        $sql .= ' event_type='.(empty($this->event_type)!=0 ? 'null':\"'\".$this->event_type.\"'\").', ';\n        $sql .= ' note='.(empty($this->note)!=0 ? 'null':\"'\".$this->db->escape($this->note).\"'\").', ';\n        $sql .= ' date_modification = NOW(), ';\n        $sql .= ' fk_userid='.(empty($this->userid)!=0 ? 'null':\"'\".$this->userid.\"'\").', ';\n        $sql .= ' fk_user_modification = \"'.$user->id.'\", ';\n        $sql .= ' fk_third_party='.(empty($this->third_party)!=0 ? 'null':\"'\".$this->third_party.\"'\").', ';\n        $sql .= ' fk_task='.(empty($this->task)!=0 ? 'null':\"'\".$this->task.\"'\").', ';\n        $sql .= ' fk_project='.(empty($this->project)!=0 ? 'null':\"'\".$this->project.\"'\").', ';\n        $sql .= ' token='.(empty($this->token)!=0 ? 'null':\"'\".$this->token.\"'\").', ';\n        $sql .= ' status='.(empty($this->status)!=0 ? 'null':\"'\".$this->status.\"'\").'';\n        return $sql;\n    }\n    /**\n     *  Will start a new attendance and return the result in json\n     *\n     *  @param  USER                $user                 user object\n     *  @param  string                $json           json recieve along the start request(to stop the current task)\n     *  @param  int                $customer         customer id on which the attendance is register\n     *  @param  int                $project         project id on which the attendance is register\n     *  @param  int                $task            task id on which the attendance is register\n     *  @return        json                                 return the json of the object started\n     */\n    public function ajaxStart($user, $json = '', $customer = '', $project = '', $task = '')\n    {\n        if (empty($task) && empty($project) && empty($customer)) \n            return '{\"errorType\":\"startError\", \"error\":\"no event to start\"}';\n        $location_ref = '';\n        //load old if any\n        if (!empty($json)) {\n            $this->unserialize($json, 1);\n            //save the location ref\n            $location_ref = $this->event_location_ref;\n            //close the most recent one if any\n            $this->ajaxStop($user, $json, true);\n            //$this->status = \n        }\n//erase the data\n        $status = $this->status;\n        $tmpUserid = $this->userid;\n        $this->initAsSpecimen();\n        $this->userid = $tmpUserid;\n        //$this->userid = $user->id;\n        //load the data of the new\n        if (!empty($task)) {\n            $this->task = trim($task);\n            $this->getInfo();\n        }\n        if (!empty($project)) $this->project = trim($project);\n        if (!empty($customer)) $this->third_party = trim($customer);\n        $this->token = getToken();\n        $this->event_type = EVENT_START;\n        $this->date_time_event = mktime()+1;\n        $this->date_time_event_start = $this->date_time_event;\n        $this->event_location_ref = $location_ref;\n        $this->create($user);\n        //$this->getInfo();\n        $this->status = $status;\n        return $this->serialize(2);\n    }\n    /**\n     *  Will stop the  attendance and return the result in json\n     *\n     *  @param USER $user user that will update\n     *  @param  string                $json         json of the request\n     *  @param bool $auto       auto stop, or triggered by user\n     *  @return        int                        <0 if KO, >0 if OK\n     */\n    public function ajaxStop($user, $json = '', $auto = false)\n    {\n        global $conf, $langs;\n        $location_ref = '';\n        $note = '';\n        $tokenJson = '';\n        $retJson = '';\n        $arrayRes = array();\n        if (!empty($json)) {\n            $this->unserialize($json, 1);\n            $this->status = \"\";\n            $location_ref = $this->event_location_ref;\n            $note = $this->note;\n            $tokenJson = $this->token;\n            $this->fetch('', '', $tokenJson);\n        } else {\n             $this->fetch('');\n        }\n        $ret = 0;\n        $tokenDb = $this->token;\n        if (empty($tokenDb)) {  // 00 01 no db record found by token or user\n            $this->initAsSpecimen();\n            if (!$auto){\n                $arrayRes[\"NoActiveEvent\"]++ ;\n                $this->status = TimesheetsetEventMessage($arrayRes, true);\n            }\n            // AUTO START ?\n        } elseif ($this->event_type >= EVENT_STOP) { // found but already stopped\n            $this->initAsSpecimen();\n            $arrayRes[\"EventNotActive\"]++;\n            $this->status = TimesheetsetEventMessage($arrayRes, true);\n        } else{// 11 && 10 found and active\n            if (!empty($tokenJson)) { //11\n                $this->event_location_ref = $location_ref;\n                $this->note = $note;\n            }\n            $this->event_type = EVENT_STOP;\n            $this->date_time_event = mktime();\n            $duration = $this->date_time_event-$this->date_time_event_start;\n            //if the max time is breach\n            if (($conf->global->TIMESHEET_EVENT_MAX_DURATION>0 &&\n                $duration>$conf->global->TIMESHEET_EVENT_MAX_DURATION*3600))\n                {\n                // put the max time per default\n                    $this->date_time_event = \n                        $conf->global->TIMESHEET_EVENT_DEFAULT_DURATION*3600\n                        +$this->date_time_event_start;\n                    if (empty($tokenJson) && $auto) { // if it's auto close but without json sent\n                        $this->event_type = EVENT_AUTO_STOP;\n                    }\n            }else { //there is a start time and it's in the acceptable limit\n                if ($duration < $conf->global->TIMESHEET_EVENT_MIN_DURATION){\n                    $this->date_time_event = $this->date_time_event_start \n                        + $conf->global->TIMESHEET_EVENT_MIN_DURATION;\n                }\n                $this->event_type = EVENT_STOP;\n            }\n            $ret = $this->create($user);\n            if ($ret>0 && $conf->global->TIMESHEET_EVENT_NOT_CREATE_TIMESPENT == 0) {\n                $this->createTimeSpend($user, $tokenDb);\n            } else{\n                $this->initAsSpecimen();\n                $arrayRes = array();\n                $this->status = $arrayRes[\"DbError\"]++ ;\n                $this->status = TimesheetsetEventMessage($arrayRes, true);\n            }\n        }\n        return $this->serialize(2);;\n    }\n\n    /**\n     *  Will register an hearbear for an attendance and return the result in json\n     *\n     *  @param USER $user user that will update\n     *  @param  string                $json         json of the request\n     *  @return        int                                         <0 if KO, >0 if OK\n     */\n    public function ajaxHeartbeat($user, $json)\n    {\n        global $conf, $langs;\n        $location_ref = '';\n        $note = '';\n        $tokenJson = '';\n        $arrayRes = array();\n        $retJson = '';\n        if (!empty($json)) {\n            $this->unserialize($json, 1);\n            $location_ref = $this->event_location_ref;\n            $note = $this->note;\n            $tokenJson = $this->token;\n        }\n        $this->fetch('');\n        $tokenDb = $this->token;\n        if ((empty($tokenJson) && empty($tokenDb))||\n                (!empty($tokenDb) && $this->event_type >= EVENT_STOP))\n        {\n            //00\n            $this->initAsSpecimen();\n            if ($this->userid)$arrayRes[\"NoActiveEvent\"]++ ;\n            $this->status = TimesheetsetEventMessage($arrayRes, true);\n        } elseif (empty($tokenDb) && !empty($tokenJson)) { // json recieved with token //01\n            $arrayRes[\"EventNotActive\"]++;\n            $this->status = TimesheetsetEventMessage($arrayRes, true);\n        } elseif (!empty($tokenDb)) {\n            // 11 && 10\n            if (!empty($tokenJson)) {\n                //11\n                $this->event_location_ref = $location_ref;\n                $this->note = $note;\n            } else{\n                // info not already loaded 10\n                $this->getInfo();\n            }\n            // update the required fields\n            $this->date_time_event = mktime();\n            if ($this->event_type!=EVENT_HEARTBEAT) {\n                // create an heartbeat only if there is none\n                $this->event_type = EVENT_HEARTBEAT;\n                $this->create($user);\n            } else {\n                $this->update($user);\n            }\n        }\n        return $this->serialize(2);\n    }\n /** create timespend on the user\n  * @param USER $user user objuect\n  * @param string $token   token\n  * @return null\n  */\n/**\n*        Return HTML to get other user\n*\n*        @param                string                        $idsList                list of user id\n*        @param                int                        $selected               id that shoudl be selected\n*        @param                int                        $admin                 is the user an admin\n*        @return                string                                                String with URL\n*/\npublic function getHTMLGetOtherUserTs($idsList, $selected, $admin)\n{\n    global $langs;\n    $form = new Form($this->db);\n    $HTML = '<form id = \"timesheetForm\" name = \"OtherUser\" action=\"?action=getOtherTs\" method = \"POST\">';\n    if (!$admin) {\n        $HTML .= $form->select_dolusers($selected, 'userid', 0, null, 0, $idsList);\n    } else{\n         $HTML .= $form->select_dolusers($selected, 'userid');\n    }\n    $HTML .= '<input type = \"submit\" value = \"'.$langs->trans('Submit').'\"/></form> ';\n\n    return $HTML;\n}\n\npublic function createTimeSpend($user, $token = '')\n{\n    //if (empty($token))$token = $this->token;\n    if (!empty($token)) {\n        $this->fetch('', '', $token);\n        if ($this->event_type == EVENT_STOP && $this->task>0) {\n            $start = strtotime(\"midnight\", (int) $this->date_time_event);\n            $end = strtotime(\"tomorrow\", (int) $this->date_time_event)-1;\n            $duration = $this->date_time_event -$this->date_time_event_start;\n            $tta = new TimesheetTask($this->db, $this->task);\n            $tta->getActuals($start, $end, $this->userid);\n            $arrayRes = $tta->saveTaskTime($user, $duration, $this->note, 0, true);\n            $this->status = TimesheetsetEventMessage($arrayRes, true);\n            if (is_array($arrayRes) && array_sum($arrayRes)-$arrayRes['updateError']>0) \n                $tta->updateTimeUsed();\n            //TimesheetsetEventMessage($arrayRes);\n        }\n    }\n}\n\n    /** Function generate the HTML code to use the clock\n     *\n     * @param string[] $headers header to display\n     * @param    string              $token           CSRF token\n     * @param int $userid   user id\n     * @return string   HTML code\n     */\n    public function printHTMLTaskList($headers, $userid = '')\n    {\n        $tasksList = $this->fetchTasks($userid);\n        $html = '';\n        if (is_array($tasksList))foreach ($tasksList as $task) {\n            $html .= $task->getAttendanceLine($headers, ($task->id == $this->task));\n        }\n        return $html;\n    }\n    /** Function generate the HTML code to use the clock\n    *  @return     html code                                       result\n    */\n    public function printHTMLClock()\n    {\n        global $langs;\n        print '<div>';\n        print '<div style = \"width:50px%;height:60px;float:left;vertical-align:middle\" >';\n        print '<img height = \"64px\" id = \"mainPlayStop\" src = \"img/'\n            .(($this->id == 0)?'play-arrow':'stop-square');\n        print '.png\" onClick = startStop(event,'.$this->userid\n            .',null) style = \"cursor:pointer;vertical-align:middle\">  ';\n        print '</div>';\n        print '<div style = \"width:40%;height:60px;float:left\" >';\n        print '<textarea name = \"eventNote\" id = \"eventNote\" style = \"width:80%;height:100%\"></textarea>';\n        print '</div>';\n        print '<div style = \"width:40%;float:left\">';\n        print '<span id = \"stopwatch\"></span>';\n        print '<div>'.$langs->trans('Customer').': <span id = \"customer\">&nbsp;</span></div>';\n        print '<div>'.$langs->trans('Project').': <span  id = \"project\">&nbsp;</span></div>';\n        print '<div>'.$langs->trans('Task').': <span  id = \"task\">&nbsp;</span></div>';\n        print '</div>';\n        print '</div>';\n    }\n /**\n * function to genegate the timesheet tab\n *\n *  @param    int               $userid                   user id to fetch the timesheets\n *  @param    dataetime               $date                   user id to fetch the timesheets\n *  @return     array(string)                                             array of timesheet(serialized)\n */\n public function fetchTasks($userid = '', $date = '')\n {\n    global $conf;\n\n    if (empty($date))$date = time();\n    $staticWhiteList = new TimesheetFavourite($this->db);\n    $whiteList = $staticWhiteList->fetchUserList($userid, $date, $date + SECINDAY);\n    if ($userid == '') {\n        $userid = $this->userid;\n    }\n    $this->userid = $userid;\n    $datestart = strtotime('today midnight', $date);\n    $datestop = strtotime(' tomorrow midnight', $date) -1;\n     $tasksList = array();\n    $sql = 'SELECT DISTINCT element_id as taskid, prj.fk_soc, prj.ref, tsk.ref';\n    $sql .= \" FROM \".MAIN_DB_PREFIX.\"element_contact as ec\";\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX\n        .'c_type_contact as ctc ON(ctc.rowid = ec.fk_c_type_contact  AND ctc.active = \\'1\\') ';\n    $sql .= ' JOIN '.MAIN_DB_PREFIX.'projet_task as tsk ON tsk.rowid = ec.element_id ';\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'projet as prj ON prj.rowid = tsk.fk_projet ';\n    $sql .= \" WHERE ((ec.fk_socpeople = '\".$userid.\"' AND ctc.element = 'project_task') \";\n    // SHOW TASK ON PUBLIC PROEJCT\n    if ($conf->global->TIMESHEET_ALLOW_PUBLIC == '1') {\n        $sql .= '  OR  prj.public =  \\'1\\')';\n    }else{\n        $sql .= ' )';\n    }\n    if ($conf->global->TIMESHEET_HIDE_DRAFT == '1') {\n        $sql .= ' AND prj.fk_statut =  \\'1\\'';\n    }else{\n        $sql .= ' AND prj.fk_statut in (\\'0\\', \\'1\\')';\n    }\n    $sql .= ' AND (prj.datee >= \\''.$this->db->idate($datestart).'\\' OR prj.datee IS NULL)';\n    $sql .= ' AND (prj.dateo <= \\''.$this->db->idate($datestop).'\\' OR prj.dateo IS NULL)';\n    $sql .= ' AND (tsk.datee >= \\''.$this->db->idate($datestart).'\\' OR tsk.datee IS NULL)';\n    $sql .= ' AND (tsk.dateo <= \\''.$this->db->idate($datestop).'\\' OR tsk.dateo IS NULL)';\n    $sql .= '  ORDER BY prj.fk_soc, prj.ref, tsk.ref ';\n    dol_syslog(__METHOD__, LOG_DEBUG);\n    $resql = $this->db->query($sql);\n    if ($resql) {\n        $this->taskTimesheet = array();\n        $num = $this->db->num_rows($resql);\n        $i = 0;\n        // Loop on each record found, so each couple (project id, task id)\n        while($i < $num)\n        {\n            $error = 0;\n            $obj = $this->db->fetch_object($resql);\n            $tasksList[$i] = new TimesheetTask($this->db);\n            $tasksList[$i]->id = $obj->taskid;\n            $tasksList[$i]->userId = $this->userid;\n            $tasksList[$i]->getTaskInfo();\n            $tasksList[$i]->listed = $whiteList[$obj->taskid];\n            $i++;\n        }\n        $this->db->free($resql);\n        $i = 0;\n        return $tasksList;\n    } else {\n        dol_print_error($this->db);\n        return -1;\n    }\n }\n/**\n* function to save attendance event as a string\n* @param    int     $mode   0=>serialize, 1=> json_encode, 2 => json_encode PRETTY PRINT\n* @return   string       serialized object\n*/\npublic function serialize($mode = 0)\n{\n    $ret = '';\n    $array = array();\n    $array['id'] = $this->id;\n    $array['date_time_event'] = $this->date_time_event;\n    $array['date_time_event_start'] = $this->date_time_event_start;\n    $array['event_location_ref'] = $this->event_location_ref;\n    $array['event_type'] = $this->event_type;\n    $array['note'] = $this->note;\n    $array['date_modification'] = $this->date_modification;\n    $array['userid'] = $this->userid;\n    $array['user_modification'] = $this->user_modification;\n    $array['third_party'] = $this->third_party;\n    $array['task'] = $this->task;\n    $array['project'] = $this->project;\n    $array['third_partyLabel'] = $this->third_partyLabel;\n    $array['taskLabel'] = $this->taskLabel;\n    $array['projectLabel'] = $this->projectLabel;\n    $array['token'] = $this->token;\n    $array['status'] = $this->status;\n    $array['processedTime'] = mktime();\n    // working var\n    //$array[''] = $this->tasks;// aarray of tasktimesheet\n    switch($mode) {\n        default:\n        case 0:\n            $ret = serialize($array);\n            break;\n        case 1:\n            $ret = json_encode($array);\n            break;\n        case 2:\n            $ret = json_encode($array, JSON_PRETTY_PRINT);\n            break;\n    }\n      return $ret;\n}\n     /** function to load a skeleton as a string\n     * @param   string    $str   serialized object\n     * @param    int     $mode   0=>serialize, 1=> json_encode, 2 => json_encode PRETTY PRINT\n     * @return  int              OK\n     */\n    public function unserialize($str, $mode = 0)\n    {\n        $ret = '';\n        if (empty($str))return -1;\n        $array = array();\n        switch($mode) {\n            default:\n            case 0:\n                $array = unserialize($str);\n                break;\n            case 1:\n            case 2:\n                $array = json_decode($str, JSON_OBJECT_AS_ARRAY);\n                break;\n /*           case 3:\n                $array = $str;\n                break;*/\n        }\n        // automatic unserialisation based on match between property name and key value\n        foreach ($array as $key => $value) {\n            if (property_exists($this, $key)) {\n                $this->{$key} = $value;\n            }\n        }\n    }\n    /*fucntion to get the labels\n     *\n     */\n    public function getInfo()\n    {\n        if (!empty($this->task)) {\n            $staticTask = new TimesheetTask($this->db);\n            $staticTask->id = ($this->task);\n            $staticTask->userId = ($this->userid);\n            //$staticTask->fetch($this->task);\n            $staticTask->getTaskInfo();\n            $this->project = $staticTask->fk_project;\n            $this->taskLabel = $staticTask->description;\n            $this->projectLabel = $staticTask->ProjectTitle;\n            $this->third_party = $staticTask->companyId;\n            $this->third_partyLabel = $staticTask->companyName;\n        } else {\n            if (!empty($this->project) && empty($this->projectLabel)) {\n                $this->projectLabel = print_sellist(array('table'=>\"projet\", \n                    'keyfield'=> 'rowid', 'fields'=>'title'), $this->project);\n            }\n            if (!empty($this->third_party) && empty($this->third_partyLabel)) {\n                $this->third_partyLabel = print_sellist(array('table'=>\"societe\", \n                    'keyfield'=> 'rowid', 'fields'=>'nom'), $this->third_party);\n            }\n        }\n    }\n            /**\n     *  Function to generate a sellist\n     *  @param string $htmlname name of the sellist input\n     *  @param int $selected rowid to be preselected\n     *  @return string HTML select list\n     */\n    \n    Public function sellist($htmlname = '', $selected = ''){    \n        $sql = array('table' => $this->table_element , 'keyfield' => 't.rowid', \n            'fields' => $this->getLabel('sql'), 'join' =>  $this->getLabel('join'), \n            'where' => '', 'tail' => '');\n        $html = array('name' => (($htmlname == '')?'AttendanceEvent':$htmlname), \n            'class' => '', 'otherparam' => '', 'ajaxNbChar' => '', 'separator' => '-');\n        $addChoices = null;\n\t\treturn select_sellist($sql, $html, $selected, $addChoices );\n    }\n\n    /**      function to define display of the object\n     * @param string $type type of return text or sql\n     * @return string Label\n     */\n    public function getLabel($type = 'text'){\n        $ret = '';\n        switch ($type){\n            case 'sql':\n                $ret = \"t.fk_userid, t.date_time_event\";\n            break;\n            case 'join':\n                $ret = \"\";\n            break;                \n            case 'text':\n            default:\n                $ret = $this->userid.': '.$this->date_time_event;\n            break;\n\n        } \n        return $ret;\n    }\n\n}\n", "<?php\n/*\n * Copyright (C) 2014 delcroip <patrick@pmpd.eu>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n/*Class to handle a line of timesheet*/\n//require_once('mysql.class.php');\nrequire_once DOL_DOCUMENT_ROOT.\"/core/class/commonobject.class.php\";\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';\nrequire_once 'TimesheetHoliday.class.php';\nrequire_once 'TimesheetPublicHoliday.class.php';\nrequire_once 'TimesheetTask.class.php';\nrequire_once 'TimesheetFavourite.class.php';\nif (file_exists('core/lib/generic.lib.php')) {\n    require_once 'core/lib/generic.lib.php';\n}else{\n    //called outside the module\n    Define(\"NULL\", 0);\n    Define(\"DRAFT\", 1);\n    Define(\"SUBMITTED\", 2);\n    Define(\"APPROVED\", 3);\n    Define(\"CANCELLED\", 4);\n    Define(\"REJECTED\", 5);\n    Define(\"CHALLENGED\", 6);\n    Define(\"INVOICED\", 7);\n    Define(\"UNDERAPPROVAL\", 8);\n    Define(\"PLANNED\", 9);\n    Define(\"STATUSMAX\", 10);\n    //APPFLOW\n    //const LINKED_ITEM = [\n    Define(\"USER\", 0);\n    Define(\"TEAM\", 1);\n    Define(\"PROJECT\", 2);\n    Define(\"CUSTOMER\", 3);\n    Define(\"SUPPLIER\", 4);\n    Define(\"OTHER\", 5);\n    Define(\"ALL\", 6);\n    Define(\"ROLEMAX\", 7);\n}\n\nclass TimesheetUserTasks extends CommonObject\n{\n    //common\n    public $db;                                                        //!< To store db handler\n    public $error;                                                        //!< To return error code(or message)\n    public $errors = array();                                //!< To return several error codes(or messages)\n    public $element = 'timesheetuser';                        //!< Id that identify managed objects\n    public $table_element = 'project_task_timesheet';                //!< Name of table without prefix where object is stored\n// from db\n    public $id;\n    public $userId;\n    public $date_start = '';\n    public $date_end;\n    public $status;\n    public $note;\n//basic DB logging\n    public $date_creation = '';\n    public $date_modification = '';\n    public $user_creation;\n    public $user_modification;\n//working variable\n    public $duration;\n    public $ref;\n    public $user;\n    public $holidays;\n    public $publicHolidays;\n    public $taskTimesheet;\n    public $headers;\n    public $weekDays;\n    public $token;\n    public $whitelistmode;\n    public $userName;\n    /**\n     *   Constructor\n     *\n     * @param        DoliDB                $db      Database handler\n     * @param   int             $userId if of the user\n     * @return null\n     */\n    public function __construct($db, $userId = 0)\n    {\n        global $user, $conf;\n        $this->db = $db;\n        $this->user = $user;\n        $this->userId = ($userId == 0)?(is_object($user)?$user->id:$user):$userId;\n        $this->headers = explode('||', $conf->global->TIMESHEET_HEADERS);\n        $this->getUserName();\n    }\n /******************************************************************************\n *\n * DB methods\n *\n ******************************************************************************/\n    /**\n     *  cREATE object into database\n     *\n     *  @param        User        $user        User that modifies\n     *  @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return int                         <0 if KO, >0 if OK\n     */\n    public function create($user, $notrigger = 0)\n    {\n        global $conf, $langs;\n        $error = 0;\n        // Clean parameters\n        if (isset($this->userId)) $this->userId = trim($this->userId);\n        if (isset($this->date_start)) $this->date_start = trim($this->date_start);\n        if (isset($this->date_end)) $this->date_end = trim($this->date_end);\n        if (isset($this->status)) $this->status = trim($this->status);\n        if (isset($this->date_creation)) $this->date_creation = trim($this->date_creation);\n        if (isset($this->date_modification)) $this->date_modification = trim($this->date_modification);\n        if (isset($this->user_modification)) $this->user_modification = trim($this->user_modification);\n        if (isset($this->note)) $this->note = trim($this->note);\n        $userId = (is_object($user)?$user->id:$user);\n        // Check parameters\n        // Put here code to add control on parameters values\n        // Insert request\n        $sql = \"INSERT INTO \".MAIN_DB_PREFIX.$this->table_element.\"(\";\n\n        $sql .= 'fk_userid, ';\n        $sql .= 'date_start, ';\n        $sql .= 'date_end, ';\n        $sql .= 'status, ';\n        $sql .= 'date_creation, ';\n        $sql .= 'date_modification, ';\n        $sql .= 'fk_user_modification, ';\n        $sql .= 'note';\n\n        $sql .= \") VALUES(\";\n        $sql .= ' '.(! isset($this->userId)?'NULL':'\\''.$this->userId.'\\'').', ';\n        $sql .= ' '.(! isset($this->date_start) || dol_strlen($this->date_start) == 0?'NULL':'\\''.$this->db->idate($this->date_start).'\\'').', ';\n        $sql .= ' '.(! isset($this->date_end) || dol_strlen($this->date_end) == 0?'NULL':'\\''.$this->db->idate($this->date_end).'\\'').', ';\n        $sql .= ' '.(! isset($this->status)?DRAFT:$this->status).', ';\n        $sql .= ' NOW(), ';\n        $sql .= ' NOW(), ';\n        $sql .= ' \\''.$userId.'\\', ';\n        $sql .= ' '.(! isset($this->note)?'NULL':'\\''.$this->db->escape(dol_html_entity_decode($this->note, ENT_QUOTES)).'\\'');\n        $sql .= \")\";\n        $this->db->begin();\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if (! $resql) {\n            $error++;$this->errors[] = \"Error \".$this->db->lasterror();\n        }\n        if (! $error) {\n            $this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.$this->table_element);\n                        if (! $notrigger) {\n                    // Uncomment this and change MYOBJECT to your own tag if you\n                    // want this action calls a trigger.\n                    //// Call triggers\n                    //$result = $this->call_trigger('MYOBJECT_CREATE', $user);\n                    //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n                    //// End call triggers\n                        }\n        }\n        // Commit or rollback\n        if ($error) {\n            foreach ($this->errors as $errmsg) {\n                dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                $this->error .= ($this->error?', '.$errmsg:$errmsg);\n            }\n            $this->db->rollback();\n            return -1*$error;\n        } else {\n            $this->db->commit();\n            return $this->id;\n        }\n    }\n    /**\n     *  Load object in memory from the database\n     *\n     *  @param        int                $id        Id object\n     *  @param        string        $ref        Ref\n     *  @return int           <0 if KO, >0 if OK\n     */\n    public function fetch($id, $ref = '')\n    {\n        global $langs;\n        $sql = \"SELECT\";\n        $sql .= \" t.rowid, \";\n        $sql .= ' t.fk_userid, ';\n        $sql .= ' t.date_start, ';\n        $sql .= ' t.date_end, ';\n        $sql .= ' t.status, ';\n        $sql .= ' t.date_creation, ';\n        $sql .= ' t.date_modification, ';\n        $sql .= ' t.fk_user_modification, ';\n        $sql .= ' t.note';\n        $sql .= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as t\";\n        if ($ref) $sql .= \" WHERE t.ref = '\".$ref.\"'\";\n        else $sql .= \" WHERE t.rowid = \".$id;\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if ($resql) {\n            if ($this->db->num_rows($resql)) {\n                $obj = $this->db->fetch_object($resql);\n                $this->id = $obj->rowid;\n                $this->userId = $obj->fk_userid;\n                $this->date_start = $this->db->jdate($obj->date_start);\n                $this->date_end = $this->db->jdate($obj->date_end);\n                $this->status = $obj->status;\n                $this->date_creation = $this->db->jdate($obj->date_creation);\n                $this->date_modification = $this->db->jdate($obj->date_modification);\n                $this->user_modification = $obj->fk_user_modification;\n                $this->note = $obj->note;\n            }\n            $this->db->free($resql);\n            $this->ref = $this->date_start.'_'.$this->userId;\n            return 1;\n        } else {\n            $this->error = \"Error \".$this->db->lasterror();\n            return -1;\n        }\n    }\n    /**\n     *  Load object in memory from the database\n     *\n     *  @return int           <0 if KO, >0 if OK\n     */\n    public function fetchByWeek()\n    {\n        global $langs;\n        $sql = \"SELECT\";\n        $sql .= \" t.rowid, \";\n        $sql .= ' t.fk_userid, ';\n        $sql .= ' t.date_start, ';\n        $sql .= ' t.date_end, ';\n        $sql .= ' t.status, ';\n        $sql .= ' t.date_creation, ';\n        $sql .= ' t.date_modification, ';\n        $sql .= ' t.fk_user_modification, ';\n        $sql .= ' t.note';\n        $sql .= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as t\";\n        $sql .= \" WHERE t.date_start = '\".$this->db->idate($this->date_start).\"'\";\n        $sql .= \" AND t.fk_userid = '\".$this->userId.\"'\";\n\n\n        //$sql .= \" AND t.rowid = \".$id;\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if ($resql) {\n            if ($this->db->num_rows($resql)) {\n                $obj = $this->db->fetch_object($resql);\n                $this->id = $obj->rowid;\n                $this->userId = $obj->fk_userid;\n                $this->date_start = $this->db->jdate($obj->date_start);\n                $this->date_end = $this->db->jdate($obj->date_end);\n                $this->status = $obj->status;\n                $this->date_creation = $this->db->jdate($obj->date_creation);\n                $this->date_modification = $this->db->jdate($obj->date_modification);\n                $this->user_modification = $obj->fk_user_modification;\n                $this->note = $obj->note;\n            } else{\n                unset($this->status) ;\n                unset($this->date_modification);\n                unset($this->user_modification);\n                unset($this->note);\n                unset($this->date_creation);\n                //$this->date_end = getEndWeek($this->date_start);\n                $this->create($this->user);\n                $this->fetch($this->id);\n            }\n            $this->db->free($resql);\n            return 1;\n        } else {\n            $this->error = \"Error \".$this->db->lasterror();\n            return -1;\n        }\n    }\n    /**\n     *  Update object into database\n     *\n     *  @param        User        $user        User that modifies\n     *  @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return int                         <0 if KO, >0 if OK\n     */\n    public function update($user, $notrigger = 0)\n    {\n        global $conf, $langs;\n                $error = 0;\n                // Clean parameters\n                if (isset($this->userId)) $this->userId = trim($this->userId);\n                if (isset($this->date_start)) $this->date_start = trim($this->date_start);\n                if (isset($this->date_end)) $this->date_end = trim($this->date_end);\n                if (isset($this->status)) $this->status = trim($this->status);\n                if (isset($this->date_creation)) $this->date_creation = trim($this->date_creation);\n                if (isset($this->date_modification)) $this->date_modification = trim($this->date_modification);\n                if (isset($this->user_modification)) $this->user_modification = trim($this->user_modification);\n                if (isset($this->note)) $this->note = trim($this->note);\n                $userId = (is_object($user)?$user->id:$user);\n                // Check parameters\n                // Put here code to add a control on parameters values\n        // Update request\n        $sql = \"UPDATE \".MAIN_DB_PREFIX.$this->table_element.\" SET\";\n                $sql .= ' fk_userid='.(empty($this->userId) ? 'null':'\\''.$this->userId.'\\'').', ';\n                $sql .= ' date_start='.(dol_strlen($this->date_start)!=0 ? '\\''.$this->db->idate($this->date_start).'\\'':'null').', ';\n                $sql .= ' date_end='.(dol_strlen($this->date_end)!=0 ? '\\''.$this->db->idate($this->date_end).'\\'':'null').', ';\n                $sql .= ' status='.(empty($this->status)? DRAFT:$this->status).', ';\n                $sql .= ' date_modification = NOW(), ';\n                $sql .= ' fk_user_modification = \\''.$userId.'\\', ';\n                $sql .= ' note = \\''.$this->db->escape(dol_html_entity_decode($this->note, ENT_QUOTES)).'\\'';\n        $sql .= \" WHERE rowid=\".$this->id;\n                $this->db->begin();\n                dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if (! $resql) {\n            $error++;$this->errors[] = \"Error \".$this->db->lasterror();\n        }\n        if (! $error) {\n            if (! $notrigger) {\n        // Uncomment this and change MYOBJECT to your own tag if you\n        // want this action calls a trigger.\n        //// Call triggers\n        //$result = $this->call_trigger('MYOBJECT_MODIFY', $user);\n        //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n        //// End call triggers\n            }\n        }\n// Commit or rollback\n        if ($error) {\n                foreach ($this->errors as $errmsg) {\n            dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n            $this->error .= ($this->error?', '.$errmsg:$errmsg);\n                }\n                $this->db->rollback();\n                return -1*$error;\n        } else {\n                $this->db->commit();\n                return 1;\n        }\n    }\n    /**\n     *  Delete object in database\n     *\n     *  @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return        int                                         <0 if KO, >0 if OK\n     */\n    public function delete($notrigger = 0)\n    {\n            global $conf, $langs;\n            $error = 0;\n            $this->db->begin();\n            if (! $error) {\n                if (! $notrigger) {\n                        // Uncomment this and change MYOBJECT to your own tag if you\n                // want this action calls a trigger.\n            //// Call triggers\n            //$result = $this->call_trigger('MYOBJECT_DELETE', $user);\n            //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n            //// End call triggers\n                }\n            }\n            if (! $error) {\n                $sql = \"DELETE FROM \".MAIN_DB_PREFIX.$this->table_element;\n                $sql .= \" WHERE rowid=\".$this->id;\n                dol_syslog(__METHOD__, LOG_DEBUG);\n                $resql = $this->db->query($sql);\n                if (! $resql) {\n                    $error++;$this->errors[] = \"Error \".$this->db->lasterror();\n                }\n            }\n    // Commit or rollback\n            if ($error) {\n                foreach ($this->errors as $errmsg) {\n                    dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                    $this->error .= ($this->error?', '.$errmsg:$errmsg);\n                }\n                $this->db->rollback();\n                return -1*$error;\n            } else {\n                $this->db->commit();\n                return 1;\n            }\n    }\n    /**\n     *        Load an object from its id and create a new one in database\n     *\n     *        @param        int                $fromid     Id of object to clone\n     *        @return        int                                        New id of clone\n     */\n    public function createFromClone($fromid)\n    {\n        global $user, $langs;\n        $error = 0;\n        $object = new Timesheetuser($this->db);\n        $this->db->begin();\n        // Load source object\n        $object->fetch($fromid);\n        $object->id = 0;\n        $object->statut = 0;\n        // Clear fields\n        // ...\n        // Create clone\n        $result = $object->create();\n        // Other options\n        if ($result < 0) {\n                $this->error = $object->error;\n                $error++;\n        }\n        if (! $error) {\n        }\n        // End\n        if (! $error) {\n                $this->db->commit();\n                return $object->id;\n        } else {\n                $this->db->rollback();\n                return -1;\n        }\n    }\n/******************************************************************************\n *\n * Other methods\n *\n ******************************************************************************/\n    /* Funciton to fect the holiday of a single user for a single week.\n    *  @param    string               $startDate            start date in php format\n    *  @return     string                                       result\n    */\n    public function fetchAll($startdate, $whitelistmode = false)\n    {\n        global $conf;\n        $this->whitelistmode = (is_numeric($whitelistmode)&& !empty($whitelistmode))?$whitelistmode:$conf->global->TIMESHEET_WHITELIST_MODE;\n        $this->date_start = getStartDate($startdate);\n        $this->ref = $this->date_start.'_'.$this->userId;\n        $this->date_end = getEndDate($this->date_start);\n        $this->token = getToken();\n        $this->fetchByWeek();\n        $this->fetchTaskTimesheet();\n        //$ret += $this->getTaskTimeIds();\n        //FIXME module holiday should be activated ?\n        $this->fetchUserHolidays();\n        $this->fetchUserPublicHolidays();\n        $this->saveInSession();\n    }\n    /* Funciton to fect the holiday of a single user for a single week.\n    *  @return     string                                       result\n    */\n    public function fetchUserHolidays()\n    {\n       $this->holidays = new TimesheetHoliday($this->db);\n       $ret = $this->holidays->fetchUserWeek($this->userId, $this->date_start, $this->date_end);\n       return $ret;\n    }\n\n        /* Funciton to fect the public holiday of a single user for a single week.\n    *  @return     string                                       result\n    */\n    public function fetchUserPublicHolidays()\n    {\n       $this->publicHolidays = new TimesheetPublicHolidays($this->db);\n       $ret = $this->publicHolidays->fetchUserWeek($this->userId, $this->date_start, $this->date_end);\n       return $ret;\n    }\n\n    /** function to load from session [//FIXME: to be removed not REST appraoch]\n     *\n     * @param string $token ref to load\n     * @param int $id   object id\n     * @return null\n     */\n   public function loadFromSession($token, $id)\n   {\n       $this->fetch($id);\n       $this->token = $token;\n       $this->userId = $_SESSION['timesheet'][$token][$id]['userId'];\n       $this->date_start = $_SESSION['timesheet'][$token][$id]['dateStart'];\n       $this->date_end = $_SESSION['timesheet'][$token][$id]['dateEnd'];\n       $this->ref = $_SESSION['timesheet'][$token][$id]['ref'];\n       $this->note = $_SESSION['timesheet'][$token][$id]['note'];\n       $this->holidays = unserialize($_SESSION['timesheet'][$token][$id]['holiday']);\n       $this->publicHolidays = unserialize($_SESSION['timesheet'][$token][$id]['publicHolidays']);\n       $this->taskTimesheet = unserialize($_SESSION['timesheet'][$token][$id]['taskTimesheet']);;\n   }\n/*\n * function to load the parma from the session\n * @return void\n */\npublic function saveInSession()\n{\n    $_SESSION['timesheet'][$this->token][$this->id]['userId'] = $this->userId;\n    $_SESSION['timesheet'][$this->token][$this->id]['ref'] = $this->ref;\n    $_SESSION['timesheet'][$this->token][$this->id]['dateStart'] = $this->date_start;\n    $_SESSION['timesheet'][$this->token][$this->id]['dateEnd'] = $this->date_end;\n    $_SESSION['timesheet'][$this->token][$this->id]['note'] = $this->note;\n    $_SESSION['timesheet'][$this->token][$this->id]['holiday'] = serialize($this->holidays);\n    $_SESSION['timesheet'][$this->token][$this->id]['publicHolidays'] = serialize($this->publicHolidays);\n    $_SESSION['timesheet'][$this->token][$this->id]['taskTimesheet'] = serialize($this->taskTimesheet);\n}\n/*\n * function to genegate the timesheet tab\n *\n *  @param    int               $userid                   user id to fetch the timesheets\n *  @return     array(string)                             array of timesheet(serialized)\n */\npublic function fetchTaskTimesheet($userid = '')\n{\n    global $conf, $user;\n    $res = array();\n    if ($userid == '') {\n        $userid = $this->userId;\n    }\n\n    $whiteList = array();\n    \n    $datestart = $this->date_start;\n    $datestop = $this->date_end;\n    $staticWhiteList = new TimesheetFavourite($this->db);\n    $whiteList = $staticWhiteList->fetchUserList($userid, $datestart, $datestop);\n     // Save the param in the SeSSION\n    $tasksList = array();\n    $sqlwhiteList = '';\n    $sql = 'SELECT DISTINCT element_id as taskid, prj.fk_soc, tsk.fk_projet, tsk.progress, ';\n    $sql .= 'tsk.fk_task_parent, tsk.rowid, app.rowid as appid, prj.ref as prjRef, tsk.ref as tskRef';\n    $sql .= $sqlwhiteList;\n    $sql .= \" FROM \".MAIN_DB_PREFIX.\"element_contact as ec\";\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON(ctc.rowid = ec.fk_c_type_contact  AND ctc.active = \\'1\\') ';\n    $sql .= ' JOIN '.MAIN_DB_PREFIX.'projet_task as tsk ON tsk.rowid = ec.element_id ';\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'projet as prj ON prj.rowid = tsk.fk_projet ';\n    //approval\n    if ($this->status == DRAFT || $this->status == REJECTED) {\n        $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'project_task_time_approval as app ';\n    } else{ // take only the ones with a task_time linked\n        $sql .= 'JOIN '.MAIN_DB_PREFIX.'project_task_time_approval as app ';\n    }\n    $sql .= ' ON tsk.rowid = app.fk_projet_task AND app.fk_userid = fk_socpeople';\n    $sql .= ' AND app.date_start = \\''.$this->db->idate($datestart).'\\'';\n    $sql .= ' AND app.date_end = \\''.$this->db->idate($datestop).'\\'';\n    //end approval\n    $sql .= \" WHERE ((ec.fk_socpeople = '\".$userid.\"' AND ctc.element = 'project_task') \";\n    // SHOW TASK ON PUBLIC PROEJCT\n    if ($conf->global->TIMESHEET_ALLOW_PUBLIC == '1') {\n        $sql .= '  OR  prj.public =  \\'1\\')';\n    }else{\n        $sql .= ' )';\n    }\n    if ($conf->global->TIMESHEET_HIDE_DRAFT == '1') {\n        $sql .= ' AND prj.fk_statut =  \\'1\\'';\n    }else{\n        $sql .= ' AND prj.fk_statut in (\\'0\\',\\'1\\')';\n    }\n    $sql .= ' AND (prj.datee >= \\''.$this->db->idate($datestart).'\\' OR prj.datee IS NULL)';\n    $sql .= ' AND (prj.dateo <= \\''.$this->db->idate($datestop).'\\' OR prj.dateo IS NULL)';\n    $sql .= ' AND (tsk.datee >= \\''.$this->db->idate($datestart).'\\' OR tsk.datee IS NULL)';\n    $sql .= ' AND (tsk.dateo <= \\''.$this->db->idate($datestop).'\\' OR tsk.dateo IS NULL)';\n    // show task only of people on the same project (not used for team leader)\n    if ( !$user->admin && $userid != $user->id && !in_array($userid, $user->getAllChildIds())){\n        $sql .= \" AND ((tsk.rowid in (SELECT element_id FROM \".MAIN_DB_PREFIX.\"element_contact as ec LEFT JOIN \".MAIN_DB_PREFIX.\"c_type_contact as ctc ON(ctc.rowid = ec.fk_c_type_contact AND ctc.active = '1')\";\n        $sql .= \" WHERE ec.fk_socpeople = '\".$user->id.\"' AND ctc.element = 'project_task' AND element_id = tsk.rowid ))\";\n        $sql .= \" OR (prj.rowid in (SELECT element_id FROM \".MAIN_DB_PREFIX.\"element_contact as ec LEFT JOIN \".MAIN_DB_PREFIX.\"c_type_contact as ctc ON(ctc.rowid = ec.fk_c_type_contact AND ctc.active = '1')\";\n        $sql .= \" WHERE ec.fk_socpeople = '\".$user->id.\"' AND ctc.element = 'project'  AND element_id = prj.rowid )))\";\n    }\n    $sql .= '  ORDER BY prj.fk_soc, prjRef, tskRef ';\n    dol_syslog(__METHOD__, LOG_DEBUG);\n    $resql = $this->db->query($sql);\n    if ($resql) {\n        $this->taskTimesheet = array();\n            $num = $this->db->num_rows($resql);\n            $i = 0;\n            // Loop on each record found, so each couple (project id, task id)\n            while($i < $num)\n            {\n                    $error = 0;\n                    $obj = $this->db->fetch_object($resql);\n                    $tasksList[$i] = NEW TimesheetTask($this->db, $obj->taskid);\n                    //$tasksList[$i]->id = $obj->taskid;\n                    if ($obj->appid) {\n                        $tasksList[$i]->fetch($obj->appid);\n                    }\n                    $tasksList[$i]->userId = $this->userId;\n                    $tasksList[$i]->date_start_approval = $this->date_start;\n                    $tasksList[$i]->date_end_approval = $this->date_end;\n                    $tasksList[$i]->task_timesheet = $this->id;\n                    $tasksList[$i]->progress = $obj->progress;\n                    $tasksList[$i]->listed = $whiteList[$obj->taskid];\n                    $i++;\n                    $ret[$obj->taskid] = $obj->appid;\n            }\n            $this->db->free($resql);\n             $i = 0;\n            if (isset($this->taskTimesheet))unset($this->taskTimesheet);\n            foreach ($tasksList as $row) {\n                dol_syslog(__METHOD__.'::task='.$row->id, LOG_DEBUG);\n                $row->getTaskInfo();// get task info include in fetch\n                $row->getActuals($datestart, $datestop, $userid);\n                $this->taskTimesheet[$row->id] = $row->serialize();\n            }\n            return $ret;\n    } else {\n            dol_print_error($this->db);\n            return -1;\n    }\n}\n /*\n * function to post the all actual submitted\n *\n *  @param    array(int)               $tabPost               array sent by POST with all info about the task\n *  @param    array(int)               $notes                  array sent by POST with the task notes\n *  @param    array(int)               $progress               array sent by POST with the task dstated progress\n *  @return     int                                                        number of tasktime creatd/changed\n */\npublic function updateActuals($tabPost, $notes = array(), $progress = array())\n{\n    \n     //FIXME, tta should be creted\n    if ($this->status == APPROVED)return -1;\n\n    dol_syslog(__METHOD__, LOG_DEBUG);\n    $ret = 0;\n   // $tmpRet = 0;\n    //$_SESSION['timesheet'][$this->token]['timeSpendCreated'] = 0;\n    //$_SESSION['timesheet'][$this->token]['timeSpendDeleted'] = 0;\n    //$_SESSION['timesheet'][$this->token]['timeSpendModified'] = 0;\n    // $_SESSION['timesheet'][$token]['NoteUpdated'] = 0\n        /*\n         * For each task store in matching the session token\n         */\n        if (is_array($this->taskTimesheet)){ \n            foreach ($this->taskTimesheet as $key => $row) { \n                $tasktime = new TimesheetTask($this->db);\n                $tasktime->unserialize($row);\n                if (isset($tabPost[$tasktime->id])){  \n                    \n                    $ret += $tasktime->postTaskTimeActual($tabPost[$tasktime->id], \n                        $this->userId, $this->user, $this->token,  \n                        $notes[$tasktime->id], $progress[$tasktime->id]);\n                }\n                $this->taskTimesheet[$key] = $tasktime->serialize();\n            }\n        }\n        /*\n    if (!empty($idList)) {\n        //$this->project_tasktime_list = $idList;\n        $this->update($this->user);\n    }\n    */\n    return $ret;\n}\n/*\n * function to get the name from a list of ID\n *\n  *  @param    object            $db             database objet\n *  @param    array(int)/int        $userids        array of manager id\n  *  @return  array(int => String)                                array(ID => userName)\n */\npublic function getUserName()\n{\n    $sql = \"SELECT usr.rowid, CONCAT(usr.firstname, ' ', usr.lastname) as username FROM \".MAIN_DB_PREFIX.'user AS usr WHERE';\n    $sql .= ' usr.rowid = '.$this->userId;\n    dol_syslog(__METHOD__, LOG_DEBUG);\n    $resql = $this->db->query($sql);\n    if ($resql) {\n        $i = 0;\n        $num = $this->db->num_rows($resql);\n        if ($num) {\n            $obj = $this->db->fetch_object($resql);\n            if ($obj) {\n                $this->userName = $obj->username;\n            } else{\n                return -1;\n            }\n            $i++;\n        }\n    } else {\n       return -1;\n    }\n      //$select .= \"\\n\";\n    return 0;\n}\n  /*\n * update the status based on the underlying Task_time_approval\n *\n *  @param    object/int                $user           timesheet object, (task)\n *  @param    string               $status              to overrule the logic if the status enter has an higher priority\n *  @return     string                         status updated of KO(-1)\n */\npublic function updateStatus($user, $status = 0)\n{\n    if ($this->id <= 0)return -1;\n    if ($status!='') {\n        if ($status<0 || $status> STATUSMAX)return -1;// status not valid\n        $updatedStatus = $status;\n    } elseif (!empty($this->status)) {\n         $updatedStatus = $this->status;\n    } else{ // no status\n        $updatedStatus = 2;\n    }\n    if (!is_array($this->taskTimesheet) || count($this->taskTimesheet)<1)$this->fetchTaskTimesheet();\n    if ($status == $this->status) { // to avoid eternal loop\n        return 1;\n    }\n    $Priority = array(\n    DRAFT => 0,\n    SUBMITTED => 1,\n    APPROVED => 2,\n    CANCELLED => 4,\n    REJECTED => 5,\n    CHALLENGED => 6,\n    INVOICED => 7,\n    UNDERAPPROVAL => 3,\n    PLANNED => 9);\n    //look for the status to apply to the TS  from the TTA\n    if (count($this->taskTimesheet ))foreach ($this->taskTimesheet as $row) {\n        $tta = new TimesheetTask($this->db);\n        $tta->unserialize($row);\n        if ($tta->appId>0) { // tta already created\n            $tta->fetch($tta->appId);\n            $statusPriorityCur = $tta->status;\n            $updatedStatus = ($Priority[$updatedStatus]>$Priority[$statusPriorityCur])?$updatedStatus:$statusPriorityCur;\n        }// no else as the tta should be created upon submission of the TS not status update\n    }\n    $this->status = $updatedStatus;\n    $this->update($user);\n     return $this->status;\n}\n /*\n * change the status of an approval\n *\n *  @param      object/int        $user         user object or user id doing the modif\n *  @param      int               $id           id of the timesheetuser\n *  @return     int                         <0 if KO, Id of created object if OK\n */\nPublic function setStatus($user, $status, $id = 0)\n{\n    //role ?\n    $error = 0;\n    //if the satus is not an ENUM status\n    if ($status<0 || $status>STATUSMAX) {\n        dol_syslog(__METHOD__.\": this status '{$status}' is not part or the enum list\", LOG_ERR);\n        return false;\n    }\n    $Approved = (in_array($status, array(APPROVED, UNDERAPPROVAL)));\n    $Rejected = (in_array($status, array(REJECTED, CHALLENGED)));\n    $Submitted = ($status == SUBMITTED)?true:false;\n    $draft = ($status == DRAFT)?true:false;\n    // Check parameters\n    if ($id!=0)$this->fetch($id);\n    $this->status = $status;\n    // Update request\n    $error = ($this->id <= 0)?$this->create($user):$this->update($user);\n    if ($error>0) {\n        if ($status == REJECTED)$this->sendRejectedReminders($user);\n        if (is_array($this->taskTimesheet) && count($this->taskTimesheet)<1) {\n        $this->fetch($id);\n        }\n        $this->status = DRAFT;// SET THE STATUS TO DRAFT TO GET ALL\n        $this->fetchTaskTimesheet();\n        $this->status = $status;\n        $this->status = $status;\n        if (is_array($this->taskTimesheet) && count($this->taskTimesheet)>0)foreach ($this->taskTimesheet as $ts) {\n            $tasktime = new TimesheetTask($this->db);\n            $tasktime->unserialize($ts);\n            //$tasktime->appId = $this->id;\n            if ($Approved)$ret = $tasktime->approved($user, TEAM, false);\n            elseif ($Rejected)$ret = $tasktime->challenged($user, TEAM, false);\n            elseif ($Submitted)$ret = $tasktime->submitted($user);\n            elseif ($draft)$ret = $tasktime->setStatus($user, DRAFT);\n        }\n          //if ($ret>0)$this->db->commit();\n        return 1;\n    }\n}\n/******************************************************************************\n *\n * HTML  methods\n *\n ******************************************************************************/\n/* function to genegate the tHTML view of the TS\n *  @param    bool           $ajax     ajax of html behaviour\n *  @return     string                                                   html code\n */\npublic function getHTML( $ajax = false, $Approval = false)\n{\n    global $langs;\n    $Form = $this->getHTMLHeader(true);\n    // show the filter\n    $Form .= $this->getHTMLHolidayLines($ajax);\n    $Form .= $this->getHTMLPublicHolidayLines($ajax);\n    //if (!$Approval)$Form .= $this->getHTMLTotal();\n    //$Form .= '<tbody style = \"overflow:auto;\">';\n    $Form .= $this->getHTMLtaskLines( $ajax);\n    //$Form .= '</tbody>';// overflow div\n    //$Form .= $this->getHTMLTotal();\n    $Form .= '</table>';\n    $Form .= $this->getHTMLNote($ajax);\n    if (!$Approval) {\n        $Form .= $this->getHTMLFooter($ajax);\n    }\n    $Form .= '<br>'.\"\\n\";\n    return $Form;\n}\n/* function to genegate the timesheet table header\n *   @param    bool    $search    dd search\n *   @return     string                                                   html code\n */\npublic function getHTMLHeader($search = false)\n{\n    global $langs, $conf;\n    $weeklength = getDayInterval($this->date_start, $this->date_end);\n    $maxColSpan = $weeklength+count($this->headers);\n    $format = ($langs->trans(\"FormatDateShort\")!=\"FormatDateShort\"?$langs->trans(\"FormatDateShort\"):$conf->format_date_short);\n    $html = '<input type = \"hidden\" name = \"startDate\" value = \"'.$this->date_start.'\" />';\n    $html .= '<input type = \"hidden\" name = \"tsUserId\" value = \"'.$this->id.'\" />';\n    $html .= \"\\n<table id = \\\"timesheetTable_{$this->id}\\\" class = \\\"noborder\\\" width = \\\"100%\\\">\\n\";\n    if ($search) {\n        $html .= '<tr  id = \"searchline\">';\n        $html .= '<td><a>'.$langs->trans(\"Search\").'</a></td>';\n        $html .= '<td span = \"0\"><input type = \"texte\" name = \"taskSearch\" onkeyup = \"searchTask(this)\"></td></tr>';\n    }\n    ///Whitelist tab\n    if ($conf->global->TIMESHEET_TIME_SPAN == \"month\") {\n        $format = \"%d\";\n        $html .= '<tr class = \"liste_titre\" id = \"\">'.\"\\n\";\n        $html .= '<td colspan = \"'.$maxColSpan.'\" align = \"center\"><a >'.$langs->trans(date('F', $this->date_start)).' '.date('Y', $this->date_start).'</a></td>';\n        $html .= '</tr>';\n    }\n    $html .= '<tr class = \"liste_titre\" id = \"\">'.\"\\n\";\n    \n    foreach ($this->headers as $key => $value) {\n        $html .= \"\\t<th \";\n        if (count($this->headers) == 1) {\n                $html .= 'colspan = \"2\" ';\n        }\n        $html .= \"> <a onclick=\\\"sortTable('timesheetTable_{$this->id}', 'col{$value}', 'asc');\\\">\".$langs->trans($value).\"</a></th>\\n\";\n    }\n    $opendays = str_split($conf->global->TIMESHEET_OPEN_DAYS);\n    for ($i = 0;$i<$weeklength;$i++)\n    {\n        $curDay = $this->date_start+ SECINDAY*$i+SECINDAY/4;\n        $htmlDay = ($conf->global->TIMESHEET_TIME_SPAN == \"month\")?substr($langs->trans(date('l', $curDay)), 0, 3):$langs->trans(date('l', $curDay));\n        $html .= \"\\t\".'<th class = \"daysClass days_'.$this->id.'\" id = \"'.$this->id.'_'.$i.'\" width = \"35px\" style = \"text-align:center;\" >'.$htmlDay.'<br>'.dol_print_date($curDay, $format).\"</th>\\n\";\n    }\n    return $html;\n}\n/* function to genegate the timesheet table header\n *\n  *  @param    bool           $ajax     ajax of html behaviour\n  *  @return     string                                                   html code\n */\npublic function getHTMLFormHeader($ajax = false)\n{\n     global $langs, $conf;\n    $html = '<form id = \"timesheetForm\" name = \"timesheet\" onSubmit=\"removeUnchanged();\" action=\"?action=submit&wlm='.$this->whitelistmode.'&userid='.$this->userId.'\" method = \"POST\"';\n    if ($ajax)$html .= ' onsubmit = \" return submitTimesheet(0);\"';\n    $html .= '>';\n    if($conf->agenda->enabled && $conf->global->TIMESHEET_IMPORT_AGENDA){\n        $html .= '<a class = \"butAction\" href=\"?action=importCalandar&startDate='.$this->date_start.'\">'.$langs->trans('ImportCalandar').'</a>';\n    }\n    return $html;\n}\n  /* function to genegate ttotal line\n  *\n  *  @return     string\n */\npublic function getHTMLTotal()\n{\n    $html = \"<tr class = 'liste_titre'>\\n\";\n    $html .= '<th colspan = \"'.(count($this->headers)-1).'\" align = \"right\" > TOTAL </th>';\n    $length = getDayInterval($this->date_start, $this->date_end);\n    $html .= \"<th><div class = \\\"TotalUser_{$this->id}\\\">&nbsp;</div></th>\\n\";\n    for ($i = 0;$i<$length;$i++)\n    {\n       $html .= \"<th><div class = \\\"TotalColumn_{$this->id} TotalColumn_{$this->id}_{$i}\\\">&nbsp;</div></th>\\n\";\n    }\n    $html .= \"</tr>\\n\";\n    return $html;\n}\n  /* function to genegate the timesheet table header\n *\n *  @param     int               $ajax         enable ajax handling\n *  @return     string                                               html code\n */\npublic function getHTMLFooter($ajax = false)\n{\n    global $langs;\n    //form button\n    $html = '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$this->token.\"\\\"/>\\n\";\n    $html .= $this->getHTMLActions();\n    $html .= \"</form>\\n\";\n    if ($ajax) {\n        $html .= '<script type = \"text/javascript\">'.\"\\n\\t\";\n        $html .= 'window.onload = function()\n            {loadXMLTimesheet(\"'.$this->date_start.'\", '.$this->userId.');}';\n        $html .= \"\\n\\t\".'</script>'.\"\\n\";\n    }\n     return $html;\n}\n\n/**\n * \n * \n */\n\npublic function getHTMLActions(){\n    global $langs, $apflows;\n    $html = '<div class = \"tabsAction\">';\n    $isOpenSatus = in_array($this->status, array(DRAFT, CANCELLED, REJECTED));\n    if ($isOpenSatus) {\n        $html .= '<input type = \"submit\"   class = \"butAction\" name = \"save\" value = \"'.$langs->trans('Save').\"\\\" />\\n\";\n        //$html .= '<input type = \"submit\" class = \"butAction\" name = \"submit\" onClick = \"return submitTs();\" value = \"'.$langs->trans('Submit').\"\\\" />\\n\";\n        if (in_array('1', array_slice($apflows, 1))) {\n            $html .= '<input type = \"submit\"  class = \"butAction\" name = \"submit\"  value = \"'.$langs->trans('Submit').\"\\\" />\\n\";\n            $html .= '<input type = \"submit\"  class = \"butAction\" name = \"submit_next\"  value = \"'.$langs->trans('SubmitNext').\"\\\" />\\n\";\n        }else{\n            $html .= '<input type = \"submit\"  class = \"butAction\" name = \"save_next\"  value = \"'.$langs->trans('SaveNext').\"\\\" />\\n\";\n        }\n        $html .= '<a class = \"butActionDelete\" href=\"?action=list&startDate='.$this->date_start.'\">'.$langs->trans('Cancel').'</a>';\n    } elseif ($this->status == SUBMITTED)$html .= '<input type = \"submit\" class = \"butAction\" name = \"recall\" \" value = \"'.$langs->trans('Recall').\"\\\" />\\n\";\n    $html .= '</div>';\n    return $html;\n }\n   /* function to genegate the timesheet table header\n *\n *  @param    int           $current           number associated with the TS AP\n\n  *  @return     string                                                   html code\n */\npublic function getHTMLFooterAp($current)\n{\n     global $langs;\n    //form button\n    $html = '<input type = \"hidden\" id=\"csrf-token\"  name = \"token\" value = \"'.$this->token.\"\\\"/>\\n\";\n    $html .= '<input type = \"hidden\" name = \"target\" value = \"'.($current+1).\"\\\"/>\\n\";\n    $html .= '<div class = \"tabsAction\">';\n    $html .= '<input type = \"submit\" class = \"butAction\" name = \"Send\" value = \"'.$langs->trans('Next').\"\\\" />\\n\";\n    //$html .= '<input type = \"submit\" class = \"butAction\" name = \"submit\" onClick = \"return submitTs();\" value = \"'.$langs->trans('Submit').\"\\\" />\\n\";\n    $html .= '</div>';\n    $html .= \"</form>\\n\";\n     return $html;\n}\n      /*\n * function to genegate the timesheet list\n\n *  @return     string                                                   html code\n */\npublic function getHTMLtaskLines( $ajax = false)\n{\n    $i = 1;\n    $Lines = '';\n    $nbline = 0;\n    $personalHoliday = null;\n    $publicHoliday = null;\n    if (is_array($this->holidays->holidaylist) && $this->holidays->holidayPresent){\n        $personalHoliday = $this->holidays->holidaylist;\n    }\n    if (is_array($this->publicHolidays->holidaylist) && $this->publicHolidays->holidayPresent){\n        $publicHoliday = $this->publicHolidays->holidaylist;\n    }\n    //$holiday =  $publicHoliday + $personalHoliday;\n    $holiday = array();\n    if(is_array($personalHoliday) && is_array($publicHoliday)){\n        for($i = 0; $i < max(count($personalHoliday),count($publicHoliday)); $i++){\n            $holiday[$i] = array_merge($publicHoliday[$i],$personalHoliday[$i]);\n        }\n    }else if(is_array($personalHoliday)){\n        $holiday = $personalHoliday;\n    }else if(is_array($publicHoliday)){\n        $holiday = $publicHoliday;\n    }\n  \n    \n    if (!$ajax & is_array($this->taskTimesheet)) {\n        $nbline = count($this->taskTimesheet);\n        foreach ($this->taskTimesheet as $timesheet) {\n            $row = new TimesheetTask($this->db);\n            $row->unserialize($timesheet);\n            \n            //$row->db = $this->db;\n            if (in_array($this->status, array(REJECTED, DRAFT, PLANNED, CANCELLED))) {\n                $blockOveride = -1;\n            } elseif (in_array($this->status, array(UNDERAPPROVAL, INVOICED, APPROVED, CHALLENGED, SUBMITTED))) {\n                $blockOveride = 1;\n            } else{\n                $blockOveride = 0;\n            }\n            $Lines .= $row->getTimesheetLine($this->headers, $this->id, $blockOveride, $holiday);\n            //if ($i%10 == 0 &&  $nbline-$i >5) $Lines .= $this->getHTMLTotal();\n            $i++;\n        }\n    }\n    return $Lines;\n}\n   /* function to genegate the timesheet note\n *\n  *  @return     string                                                   html code\n */\npublic function getHTMLNote()\n{\n     global $langs;\n     $isOpenSatus = (in_array($this->status, array(REJECTED, DRAFT, PLANNED, CANCELLED)));\n     $html = '<div class = \"noborder\"><div  width = \"100%\">'.$langs->trans('Note').'</div><div width = \"100%\">';\n    if ($isOpenSatus) {\n        $html .= '<textarea class = \"flat\"  cols = \"75\" name = \"noteTaskApproval['.$this->id.']\" rows = \"3\" >'.$this->note.'</textarea>';\n        $html .= '</div>';\n    } elseif (!empty($this->note)) {\n        $html .= $this->note;\n        $html .= '></div>';\n    } else{\n        $html = \"\";\n    }\n    return $html;\n}\n        /*\n * function to genegate the timesheet list\n *  @return     string                                                   html code\n */\npublic function getHTMLHolidayLines($ajax = false)\n{\n    $i = 0;\n    $Lines = '';\n    if (!$ajax) {\n        if (is_object($this->holidays)){\n            $Lines .= $this->holidays->getHTMLFormLine($this->headers, $this->id, $this->userId);\n        }else{\n            dol_syslog(__METHOD__.\": missing Holiday object\", LOG_ERR);\n\n        }\n    }\n    return $Lines;\n}\n        /*\n * function to genegate the timesheet list\n *  @return     string                                                   html code\n */\npublic function getHTMLPublicHolidayLines($ajax = false)\n{\n    $i = 0;\n    $Lines = '';\n    if (!$ajax) {\n        if (is_object($this->publicHolidays)){\n            $Lines .= $this->publicHolidays->getHTMLFormLine($this->headers, $this->id, $this->userId);\n        }else{\n            dol_syslog(__METHOD__.\": missing Holiday object\", LOG_ERR);\n\n        }\n    }\n    return $Lines;\n}\n /*\n * function to print the timesheet navigation header\n *\n *  @param    string               $optioncss           printmode\n *  @param     int               $ajax                support the ajax mode(not supported yet)\n *  @param     object              $form                form object\n *  @return     string                                       HTML\n */\npublic function getHTMLNavigation($optioncss, $ajax = false)\n{\n    global $langs, $conf;\n    $form = new Form($this->db);\n    $tail = '';\n    //$tail = '&wlm='.$this->whitelistmode;\n    if (isset($conf->global->TIMESHEET_ADD_FOR_OTHER) \n        && $conf->global->TIMESHEET_ADD_FOR_OTHER == 1){\n        $tail = '&userid='.$this->userId;\n    }\n    $Nav = '<table class = \"noborder\" width = \"50%\">'.\"\\n\\t\".'<tr>'.\"\\n\\t\\t\".'<th>'.\"\\n\\t\\t\\t\";\n    if ($ajax) {\n//     $Nav .= '<a id = \"navPrev\" onClick = \"loadXMLTimesheet(\\''.getStartDate($this->date_start, -1).'\\', 0);';\n    } else{\n        $Nav .= '<a href=\"?dateStart='.getStartDate($this->date_start, -1).$tail;\n    }\n    if ($optioncss != '')$Nav .= '&amp;optioncss='.$optioncss;\n    $Nav .= '\">  &lt;&lt;'.$langs->trans(\"Previous\").' </a>'.\"\\n\\t\\t</th>\\n\\t\\t<th>\\n\\t\\t\\t\";\n//  if ($ajax)\n//  {\n    //    $Nav .= '<form name = \"goToDate\" onsubmit = \"return toDateHandler();\" action=\"?action=goToDate&wlm='.$this->whitelistmode.'\" method = \"POST\">'.\"\\n\\t\\t\\t\";\n    //} else{\n        $Nav .= '<form name = \"goToDate\" action=\"?action=goToDate'.$tail.'\" method = \"POST\" >'.\"\\n\\t\\t\\t\";\n    //}\n    $Nav .= $langs->trans(\"GoTo\").': '.$form->select_date(-1, 'toDate', 0, 0, 0, \"\", 1, 1, 1).\"\\n\\t\\t\\t\";;\n    $Nav .= '<input type = \"submit\" value = \"Go\" /></form>'.\"\\n\\t\\t</th>\\n\\t\\t<th>\\n\\t\\t\\t\";\n    //if ($ajax)\n//    {\n    //    $Nav .= '<a id = \"navNext\" onClick = \"loadXMLTimesheet(\\''.getStartDate($this->date_start, 1).'\\', 0);';\n    //} else{\n        $Nav .= '<a href=\"?dateStart='.getStartDate($this->date_start, 1).$tail;\n    //}\n    if ($optioncss != '') $Nav .= '&amp;optioncss='.$optioncss;\n    $Nav .= '\">'.$langs->trans(\"Next\").' &gt;&gt;</a>'.\"\\n\\t\\t</th>\\n\\t</tr>\\n </table>\\n\";\n    return $Nav;\n}\n     /**\n     *        Return clickable name(with picto eventually)\n     *\n     *        @param                string                        $htmlcontent                text to show\n     *        @param                int                        $id                     Object ID\n     *        @param                string                        $ref                    Object ref\n     *        @param                int                        $withpicto                0 = _No picto, 1 = Includes the picto in the linkn, 2 = Picto only\n     *        @return                string                                                String with URL\n     */\n    public function getNomUrl($htmlcontent, $id = 0, $ref = '', $withpicto = 0)\n    {\n        global $langs;\n        $result = '';\n        if (empty($ref) && $id == 0) {\n            if (isset($this->id)) {\n                $id = $this->id;\n            } elseif (isset($this->rowid)) {\n                $id = $this->rowid;\n            }if (isset($this->ref)) {\n                $ref = $this->ref;\n            }\n        }\n        if ($id) {\n            $lien = '<a href = \"'.DOL_URL_ROOT.'/timesheet/timesheetuser.php?id='.$id.'&action=view\">';\n        } elseif (!empty($ref)) {\n            $lien = '<a href = \"'.DOL_URL_ROOT.'/timesheet/timesheetuser.php?ref='.$ref.'&action=view\">';\n        } else{\n            $lien = \"\";\n        }\n        $lienfin = empty($lien)?'':'</a>';\n        $picto = 'timesheet@timesheet';\n        if ($ref) {\n            $label = $langs->trans(\"Show\").': '.$ref;\n        } elseif ($id) {\n            $label = $langs->trans(\"Show\").': '.$id;\n        }\n        if ($withpicto == 1) {\n            $result .= ($lien.img_object($label, $picto).$htmlcontent.$lienfin);\n        } elseif ($withpicto == 2) {\n            $result .= $lien.img_object($label, $picto).$lienfin;\n        } else{\n            $result .= $lien.$htmlcontent.$lienfin;\n        }\n        return $result;\n    }\n    /**\n    *        Return HTML to get other user\n    *\n    *        @param                string                        $idsList                list of user id\n    *        @param                int                        $selected               id that shoudl be selected\n    *        @param                int                        $admin                 is the user an admin\n    *        @return                string                                                String with URL\n    */\n    public function getHTMLGetOtherUserTs($idsList, $selected, $admin)\n    {\n        global $langs;\n        $form = new Form($this->db);\n        $HTML = '<form id = \"timesheetForm\" name = \"OtherUser\" action=\"?action=getOtherTs&wlm='.$this->whitelistmode.'\" method = \"POST\">';\n        if (!$admin) {\n            $HTML .= $form->select_dolusers($selected, 'userid', 0, null, 0, $idsList);\n        } else{\n            $HTML .= $form->select_dolusers($selected, 'userid');\n        }\n        $HTML .= '<input type = \"submit\" value = \"'.$langs->trans('Submit').'\"/></form> ';\n        return $HTML;\n    }\n    /**\n     *        Initialise object with example values\n     *        Id must be 0 if object instance is a specimen\n     *\n     *  @param bool $test to init test speciemen\n     *        @return        void\n     */\n    public function initAsSpecimen($test = false)\n    {\n        $this->id = 0;\n\n        $this->userId = '';\n        $this->date_start = '';\n        $this->date_end = '';\n        //$this->status = '';\n        //$this->sender = '';\n        //$this->recipient = '';\n        //$this->estimates = '';\n        //$this->tracking = '';\n        //$this->tracking_ids = '';\n        $this->date_creation = '';\n        //$this->date_modification = '';\n        $this->user_creation = '';\n        //$this->user_modification = '';\n        $this->task = '';\n        $this->note = '';\n        if ($test) {\n            $this->userId = 1;\n            $this->date_start = srttotime('this monday', dol_mktime());\n            $this->date_end = srttotime('next monday', dol_mktime())-1;\n            $this->task = 1;\n            $this->note = 'this is a test usertasktime';\n        }\n    }\n\n/******************************************************************************\n *\n * AJAX methods\n *\n ******************************************************************************/\n/*\n * function to get the timesheet in XML format(not up to date)\n *\n *  @return     string                                         XML result containing the timesheet info\n */\n        /*\npublic function GetTimeSheetXML()\n{\n    global $langs, $conf;\n    $xml .= \"<timesheet dateStart = \\\"{$this->date_start}\\\" token = \\\"{$this->token}\\\" timetype = \\\"\".$conf->global->TIMESHEET_TIME_TYPE.\"\\\"\";\n    $xml .= ' nextWeek = \"'.date('Y\\WW', strtotime($this->date_start.\"+3 days +1 week\")).'\" prevWeek = \"'.date('Y\\WW', strtotime($this->date_start.\"+3 days -1 week\")).'\">';\n    //error handling\n    $xml .= getEventMessagesXML();\n    //header\n    $i = 0;\n    $xmlheaders = '';\n    foreach ($this->headers as $header) {\n        if ($header == 'Project') {\n            $link = ' link = \"'.DOL_URL_ROOT.'/projet/card.php?id=\"';\n        } elseif ($header == 'Tasks' || $header == 'TaskParent') {\n            $link = ' link = \"'.DOL_URL_ROOT.'/projet/tasks/task.php?withproject=1&amp;id=\"';\n        } elseif ($header == 'Company') {\n            $link = ' link = \"'.DOL_URL_ROOT.'/societe/soc.php?socid=\"';\n        } else{\n            $link = '';\n        }\n        $xmlheaders .= \"<header col = \\\"{$i}\\\" name = \\\"{$header}\\\" {$link}>{$langs->transnoentitiesnoconv($header)}</header>\";\n        $i++;\n    }\n    $xml .= \"<headers>{$xmlheaders}</headers>\";\n        //days\n    $xmldays = '';\n    for ($i = 0;$i<7;$i++)\n    {\n       $curDay = strtotime($this->date_start.' +'.$i.' day');\n       //$weekDays[$i] = date('d-m-Y', $curDay);\n       $curDayTrad = $langs->trans(date('l', $curDay)).'  '.dol_mktime($curDay);\n       $xmldays .= \"<day col = \\\"{$i}\\\">{$curDayTrad}</day>\";\n    }\n    $xml .= \"<days>{$xmldays}</days>\";\n        $tab = $this->fetchTaskTimesheet();\n        $i = 0;\n        $xml .= \"<userTs userid = \\\"{$this->userId}\\\"  count = \\\"\".count($this->taskTimesheet).\"\\\" userName = \\\"{$this->userName}\\\" >\";\n        foreach ($this->taskTimesheet as $timesheet) {\n            $row = new TimesheetTask($this->db);\n             $row->unserialize($timesheet);\n            $xml .= $row->getXML($this->date_start);//FIXME\n            $i++;\n        }\n        $xml .= \"</userTs>\";\n    //}\n    $xml .= \"</timesheet>\";\n    return $xml;\n}        */\n    /**\n     *  Function that will send email to\n     *\n     * @return bool success / failure\n     */\n    public function sendApprovalReminders()\n    {\n        global $langs;\n        $ret = true;\n        $sql = 'SELECT';\n        $sql .= ' t.date_start, t.date_end, ';\n        $sql .= ' u.email as w_email, utm.email as tm_email,';\n        $sql .= ' u.fk_user as approverid';\n        $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_time_approval as t';\n        $sql .= ' JOIN '.MAIN_DB_PREFIX.'user as u on t.fk_userid = u.rowid ';\n        $sql .= ' JOIN '.MAIN_DB_PREFIX.'user as utm on u.fk_user = utm.rowid ';\n        $sql .= ' WHERE (t.status='.SUBMITTED.' OR t.status='.UNDERAPPROVAL.' OR t.status='.CHALLENGED.') ';\n        $sql .= '  AND t.recipient='.TEAM.' ORDER BY u.fk_user';\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $emails = array();\n        $resql = $this->db->query($sql);\n        if ($resql) {\n            $num = $this->db->num_rows($resql);\n            for ($i = 0;$i<$num;$i++) {\n                $obj = $this->db->fetch_object($resql);\n                $emails[$obj->tm_email][$obj->w_email][] = array(\n                    \"date_start\" => $obj->date_start,\n                    \"date_end\" => $obj->date_end\n                );\n            }\n        } else {\n            dol_print_error($db);\n            $list = array();\n            $ret = false;\n        }\n        if ($ret != false) {\n            foreach ($emails as $tm_email => $user_approuvals) {\n                foreach ($user_approuvals as $w_email => $dates) {\n                    $message = str_replace(\n                        \"__NB_TS__\", count($dates), \n                        str_replace('\\n', \"\\n\", $langs->trans('YouHaveApprovalPendingMsg'))\n                    );\n                    foreach ($dates as $date) {\n                        $message .= \"\\n * \".$date[\"date_start\"].\" - \".$date[\"date_end\"];\n                    }\n                    $sendto = $tm_email;\n                    $replyto = $w_email;\n                    $addr_cc = null; //$addr_cc = $obj->w_email;\n                    $subject = $langs->transnoentities(\"YouHaveApprovalPending\");\n                    if (!empty($sendto) && $sendto!=\"NULL\") {\n                        include_once DOL_DOCUMENT_ROOT .'/core/class/CMailFile.class.php';\n                        $mailfile = new CMailFile(\n                            $subject,\n                            $sendto,\n                            $replyto,\n                            $message,\n                            $filename_list = array(),\n                            $mimetype_list = array(),\n                            $mimefilename_list = array(),\n                            $addr_cc, $addr_bcc = null,\n                            $deliveryreceipt = 0,\n                            $msgishtml = 1\n                        );\n                        $ret = $ret && $mailfile->sendfile();\n                    }\n                }\n            }\n        }\n        return $ret;\n    }\n\n\n    /**\n     * Function that will send email upon timesheet not sent\n     * @return bool success / failure\n     */\n    public function sendTimesheetReminders()\n    {\n    //check date: was yesterday a period end day ?\n    $date_start = getStartDate(time(), -1);\n    $date_end = getEndDate($date_start);\n        $ret = true;\n        $sql = \"SELECT SUM(pt.task_duration)/3600 as duration,  u.weeklyhours\n            u.email, u.weeklyhours\n            FROM \".MAIN_DB_PREFIX.\"element_contact  as ec ON t.rowid = ec.element_id\n           LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON ctc.rowid = fk_c_type_contact\n            LEFT JOIN llx_projet_task_time pt ON  pt.fk_user = fk_socpeople\n            LEFT JOIN llx_user u ON u.rowid = fk_socpeople\n            WHERE  (ctc.element in (\\'project\\') \n            and pt.task_date BETWEEN $date_start AND $date_end\n            GROUP BY u.rowid \"; \n\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $emails = array();\n        $resql = $this->db->query($sql);\n        if ($resql) {\n            $num = $this->db->num_rows($resql);\n            for ($i = 0;$i<$num;$i++) {\n                $obj = $this->db->fetch_object($resql);\n                // FIXME: addapt weekhour to openday / without holidays (union)\n                if ($obj->weeklyhours > $obj->duration) {\n                $emails[$obj->email][] = array(\n                    \"weeklyhour\" => $obj->date_start,\n                    \"duration\" => $obj->date_end\n                );\n            }\n            }\n        } else {\n            dol_print_error($db);\n            $list = array();\n            $ret = false;\n        }\n        if ($ret != false) {\n            foreach ($emails as $email => $data) {\n            //get the list of user that have the ts right\n                $$url .= '/timesheet/Timesheet.php?dateStart='.$date_start;\n                $message = $langs->trans(\n                    'YouHaveMissingTimesheetMsg', \n                    date(' d', $date_start), \n                    $url\n                );\n                $sendto = $email;\n        \n                $subject = $langs->transnoentities(\"YouHaveMissingTimesheet\");\n                if (!empty($sendto) && $sendto!=\"NULL\") {\n                    include_once DOL_DOCUMENT_ROOT .'/core/class/CMailFile.class.php';\n                    $mailfile = new CMailFile(\n                        $subject,\n                        $sendto,\n                        null,\n                        $message,\n                        $filename_list = array(),\n                        $mimetype_list = array(),\n                        $mimefilename_list = array(),\n                        $addr_cc, $addr_bcc = 0,\n                        $deliveryreceipt = 0,\n                        $msgishtml = 1\n                    );\n                    $mailfile->sendfile();\n                }\n            }\n\n        }\n\n\n    }\n\n\n    /**\n     * Function that will send email upon timesheet rejection\n     * @param    Doliuser   $user       objet\n     * @return        void\n     */\n    public function sendRejectedReminders($user)\n    {\n        global $langs, $db, $dolibarr_main_url_root, $dolibarr_main_url_root_alt;\n        $tsUser = new User($db);\n        $tsUser->fetch($this->userId);\n        $url = $dolibarr_main_url_root;\n        if (strpos($dolibarr_main_url_root_alt, $_SERVER['PHP_SELF'])>0) {\n            $url .= $dolibarr_main_url_root_alt;\n        }\n        $url .= '/timesheet/Timesheet.php?dateStart='.$this->date_start;\n        $message = $langs->trans(\n            'YouHaveTimesheetRejectedMsg', \n            date(' d', $this->date_start), \n            $url\n        );\n        $sendto = $tsUser->email;\n        $replyto = $user->email;\n        $subject = $langs->transnoentities(\"YouHaveTimesheetRejected\");\n        if (!empty($sendto) && $sendto!=\"NULL\") {\n            include_once DOL_DOCUMENT_ROOT .'/core/class/CMailFile.class.php';\n            $mailfile = new CMailFile(\n                $subject,\n                $sendto,\n                $replyto,\n                $message,\n                $filename_list = array(),\n                $mimetype_list = array(),\n                $mimefilename_list = array(),\n                $addr_cc, $addr_bcc = 0,\n                $deliveryreceipt = 0,\n                $msgishtml = 1\n            );\n            $mailfile->sendfile();\n        }\n    }\n\n        \n    /**\n     * Function to import the calandar item into the timesheets\n     * @param int $userid user to import calcandar\n     * @param date $dateStart datestart to use for the import\n     * @param date $dateEnd dateEnd to use for the import \n     */\n    function importCalandar($userid = '', $dateStart = '', $dateEnd = ''){\n        global $conf, $user;\n        if(!is_numeric($userid)){\n            if (is_numeric($this->userId)){\n                $userid = $this->userId;\n            }else{\n                return -1;\n            }\n        }\n        if(!is_a($dateStart,'DateTime') && !is_a($dateStart,'Date' && !is_numeric($dateStart))){\n            $dateStart = $this->date_start;\n        }        \n        if(!is_a($dateEnd,'DateTime')  && !is_a($dateEnd,'Date') && !is_numeric($dateEnd) ){\n            $dateEnd = $this->date_end;\n        }\n        // get the calandar event that have a task assigned and assigned to userid + busy\n        $sql = 'SELECT a.id, a.code, a.label, a.fk_element as taskid, a.datep as datestart,';\n        $sql .= 'a.fulldayevent, a.datep2 as dateend ';\n        $sql .= \" FROM \".MAIN_DB_PREFIX.\"actioncomm as a \";\n        // add the user\n        $sql .= \" JOIN \".MAIN_DB_PREFIX.\"actioncomm_resources as r\";\n        // fectch the current time spent\n        $sql .= \" ON r.element_type = 'user' AND r.fk_actioncomm = a.id\";\n        $sql .= \" WHERE a.transparency  = 1 AND a.elementtype  = 'task' AND r.fk_element= \".$userid;\n        $sql .= \" AND a.datep BETWEEN '\".$this->db->idate($dateStart).\"' AND '\".$this->db->idate($dateEnd).\"'\" ;\n        $sql .= \" ORDER BY fulldayevent ASC, a.fk_element DESC\";\n        // execute query\n        $resql = $this->db->query($sql);\n        //number of day in the period\n\n        $nbDay = ceil(($dateEnd - $dateStart) / 86400);\n\n        // day array for all day events\n        $days = array();\n        // local list of tasktime\n        $dayDuration = array();\n        $tasktime = array();\n        // execute the fuction only if there is querry results    \n        if ($resql && $this->db->num_rows($resql) > 0) {\n            //load already saved tasktime\n            foreach($this->taskTimesheet as $taskid => $taskline){\n                $tasktime[$taskid] = new TimesheetTask($this->db, $taskid);\n                $tasktime[$taskid]->unserialize($taskline);\n            }\n            // go through all querry result    \n            while ($obj = $this->db->fetch_object($resql)) {\n                //create a tasktime object if not yet present on local liss\n                if(!array_key_exists($obj->taskid, $tasktime)){\n                    $tasktime[$obj->taskid] = new TimesheetTask($this->db, $obj->taskid);\n                    $tasktime[$obj->taskid]->userId = $userid;\n                    $tasktime[$obj->taskid]->date_start_approval = $dateStart;\n                    $tasktime[$obj->taskid]->date_end_approval = $dateEnd;\n                    // search if there is a tasktime for this event \n                }\n                $action_date_end = $this->db->jdate($obj->dateend);\n                $action_date_start = $this->db->jdate($obj->datestart);\n                // for each day\n                for($daykey = 0; $daykey < $nbDay; $daykey++){\n                    // init the dayduration for later\n                    $dayDuration[$daykey] = 0;\n                    $duration = 0;  \n                    //is the event in day y       \n                    if( $action_date_end > ($dateStart + $daykey * SECINDAY +1 ) \n                        &&  $action_date_start <= ($dateStart + ($daykey+1) * SECINDAY )) {\n                        if($obj->fulldayevent == 0){\n                            //foreach task that are not \"all day\" define duration as \n                            // duration = cal_duration>MAx? STD:cal_duration\n                            $duration = $action_date_end - $action_date_start;\n                            $duration = ( $duration > ($conf->global->TIMESHEET_DAY_MAX_DURATION * 3600))?\n                            $conf->global->TIMESHEET_DAY_DURATION * 3600\n                            :$duration;\n                            // write in database the new TS\n                            $daynote = $obj->code.\" - \".$obj->label.\": \".formatTime($duration, -1); \n                            // check and update only ifthe meeting is note already in noted\n                            if(!is_array($tasktime[$obj->taskid]->tasklist) \n                                || !array_key_exists($daykey, $tasktime[$obj->taskid]->tasklist)\n                                || (strpos($tasktime[$obj->taskid]->tasklist[$daykey]['note'], $daynote) === false))  {\n                                    $tasktime[$obj->taskid]->saveTaskTime($user, \n                                    $duration,  $daynote, $daykey, true);\n                            }\n    \n                        }else{\n                            $days[$daykey][$obj->taskid] = array('id' => $obj->taskid, \n                                'title' => ($obj->code.' - '.$obj->label), \n                            'duration' => 0);\n                        }                            \n                    } \n                }\n            }\n            // generate the total per day\n            if(is_array($tasktime))foreach($tasktime as $taskline){\n                if(is_array($taskline->tasklist))foreach ($taskline->tasklist as $daykey => $item) {\n                    $dayDuration[$daykey] += $item['duration'];\n                    if(is_array($item['other']) && count($item['other'])>0){\n                        $dayDuration[$daykey] += array_sum(array_column($item['other'], 'duration'));\n                    }\n                }\n            }\n            // Create timespent for the all day event\n            foreach($days as $daykey => $day ){\n                $nbFullDayCurDay = count($day);\n                $duration = ($conf->global->TIMESHEET_DAY_DURATION * 3600\n                    - $dayDuration[$daykey]) / $nbFullDayCurDay ; \n                //for eachfull day event\n                foreach($day as $taskid => $tasktimeDetails){\n                    $daynote = $tasktimeDetails['title'].\": \".formatTime($duration, -1); \n                    // check and update only ifthe meeting is note already in noted\n                    if(!is_array($tasktime[$obj->taskid]->tasklist) \n                        || !array_key_exists($daykey, $tasktime[$obj->taskid]->tasklist)\n                        || (strpos($tasktime[$obj->taskid]->tasklist[$daykey]['note'], $daynote) === false))  {\n                        $tasktime[$taskid]->saveTaskTime($user, $duration, \n                                    $daynote, $daykey, true);\n                    }\n                }\n            }\n            // save the updated taskline in the object\n            unset($this->taskTimesheet);\n            $this->taskTimesheet = array();\n            foreach($tasktime as $taskid => $taskline){\n                $this->taskTimesheet[$taskid]= $taskline->serialize();\n            }\n        }\n\n\n\n\n    }\n}\n", "<?php\n/* Copyright (C) 2003      Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2012 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2012 Regis Houssin        <regis.houssin@capnetworks.com>\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *        \\defgroup   timesheet     Module timesheet\n *  \\brief      Example of a module descriptor.\n *                                Such a file must be copied into htdocs/timesheet/core/modules directory.\n *  \\file       htdocs/timesheet/core/modules/modTimesheet.class.php\n *  \\ingroup    timesheet\n *  \\brief      Description and activation file for module timesheet\n */\ninclude_once DOL_DOCUMENT_ROOT .'/core/modules/DolibarrModules.class.php';\n/**\n *  Description and activation class for module timesheet\n */\nclass modTimesheet extends DolibarrModules\n{\n        /**\n         *   Constructor. Define names, constants, directories, boxes, permissions\n         *\n         *   @param      DoliDB                $db      Database handler\n         */\n        public function __construct($db)\n        {\n        global $langs, $conf;\n        $this->db = $db;\n                // Id for module(must be unique).\n                // Use here a free id(See in Home -> System information -> Dolibarr for list of used modules id).\n                $this->numero = 861002;\n                // Key text used to identify module(for permissions, menus, etc...)\n                $this->rights_class = 'timesheet';\n                // Family can be 'crm', 'financial', 'hr', 'projects', 'products', 'ecm', 'technic', 'other'\n                // It is used to group modules in module setup page\n                $this->family = \"projects\";\n                // Module label(no space allowed), used if translation string 'ModuleXXXName' not found(where XXX is value of numeric property 'numero' of module)\n                $this->name = preg_replace('/^mod/i', '', get_class($this));\n                // Module description, used if translation string 'ModuleXXXDesc' not found(where XXX is value of numeric property 'numero' of module)\n                $this->description = \"TimesheetView\";\n\t\t        $this->editor_name = 'Patrick Delcroix';\n\t\t        $this->editor_url = 'https://github.com/delcroip';\n                // Possible values for version are: 'development', 'experimental', 'dolibarr' or version\n                $this->version = '4.5.4';\n                // Key used in llx_cons table to save module status enabled/disabled(where timesheet is value of property name of module in uppercase)\n                $this->const_name = 'MAIN_MODULE_'.strtoupper($this->name);\n                // Where to store the module in setup page(0=common, 1=interface, 2=others, 3=very specific)\n                $this->special = 0;\n                // Name of image file used for this module.\n                // If file is in theme/yourtheme/img directory under name object_pictovalue.png, use this->picto='pictovalue'\n                // If file is in module/img directory under name object_pictovalue.png, use this->picto='pictovalue@module'\n                $this->picto='timesheet@timesheet';\n                // Defined all module parts(triggers, login, substitutions, menus, css, etc...)\n                // for default path (eg: /timesheet/core/xxxxx) (0=disable, 1=enable)\n                // for specific path of parts(eg: /timesheet/core/modules/barcode)\n                // for specific css file(eg: /timesheet/css/timesheet.css.php)\n                $this->module_parts = array('triggers' => 0,\n                                            'css' => array('/timesheet/core/css/timesheet.css'));\n                ////$this->module_parts = array(\n                //                         'triggers' => 0,        // Set this to 1 if module has its own trigger directory(core/triggers)\n                //                                                        'login' => 0,        // Set this to 1 if module has its own login method directory(core/login)\n                //                                                        'substitutions' => 0,        // Set this to 1 if module has its own substitution function file(core/substitutions)\n                //                                                        'menus' => 0,        // Set this to 1 if module has its own menus handler directory(core/menus)\n                //                                                        'theme' => 0,        // Set this to 1 if module has its own theme directory(theme)\n                //                         'tpl' => 0,        // Set this to 1 if module overwrite template dir(core/tpl)\n                //                                                        'barcode' => 0,        // Set this to 1 if module has its own barcode directory(core/modules/barcode)\n                //                                                        'models' => 0,        // Set this to 1 if module has its own models directory(core/modules/xxx)\n                //                                                        'css' => array('/timesheet/css/timesheet.css.php'),        // Set this to relative path of css file if module has its own css file\n                //                                                        'js' => array('/timesheet/js/timesheet.js'), // Set this to relative path of js file if module must load a js on all pages\n                //                                                        'hooks' => array('hookcontext1', 'hookcontext2')        // Set here all hooks context managed by module\n                //                                                        'dir' => array('output' => 'othermodulename'), // To force the default directories names\n                //                                                        'workflow' => array('WORKFLOW_MODULE1_YOURACTIONTYPE_MODULE2' => array('enabled' => '! empty($conf->module1->enabled) && ! empty($conf->module2->enabled)', 'picto' => 'yourpicto@timesheet')) // Set here all workflow context managed by module\n                //                      );\n                //$this->module_parts = array();\n                //$this->module_parts = array('css' => array('/timesheet/css/timesheet.css'));\n                // Data directories to create when module is enabled.\n                // Example: this->dirs = array(\"/timesheet/temp\");\n                $this->dirs = array(\"/timesheet\", \"/timesheet/reports\", \"/timesheet/users\", \"/timesheet/tasks\");\n                // Config pages. Put here list of php page, stored into timesheet/admin directory, to use to setup module.\n                $this->config_page_url = array(\"timesheetsetup.php@timesheet\");\n                // Dependencies\n                $this->hidden = false;                        // A condition to hide module\n                $this->depends = array('modProjet');                // List of modules id that must be enabled if this module is enabled\n                $this->requiredby = array();        // List of modules id to disable if this one is disabled\n                $this->conflictwith = array();        // List of modules id this module is in conflict with\n                $this->phpmin = array(5, 0);                                        // Minimum version of PHP required by module\n                $this->need_dolibarr_version = array(3, 5);        // Minimum version of Dolibarr required by module\n                $this->langfiles = array(\"timesheet@timesheet\");\n                // Constants\n                // List of particular constants to add when module is enabled(key, 'chaine', value, desc, visible, 'current' or 'allentities', deleteonunactive)\n                // Example: $this->const=array(0 => array('timesheet_MYNEWCONST1', 'chaine', 'myvalue', 'This is a constant to add', 1),\n                //                             1 => array('timesheet_MYNEWCONST2', 'chaine', 'myvalue', 'This is another constant to add', 0, 'current', 1)\n                //);\n                $r = 0;\n                $this->const = array();\n                $this->const[$r] = array(\"TIMESHEET_VERSION\", \"chaine\", $this->version, \"save the timesheet verison\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ATTENDANCE\", \"int\", 1, \"layout mode of the timesheets\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ATTENDANCE_SYSTEM\", \"int\", 1, \"Activation of attentance system\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_TIME_TYPE\", \"chaine\", \"hours\", \"layout mode of the timesheets\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_DAY_DURATION\", \"int\", 8, \"number of hour per day(used for the layout per day)\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_TIME_SPAN\", \"chaine\", \"splitedWeek\", \"timespan of the timesheets\");// hours or days\n                $r++;\n                 $this->const[$r] = array(\"TIMESHEET_HIDE_DRAFT\", \"int\", 0, \"option to mask to task belonging to draft project\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_HIDE_ZEROS\", \"int\", 0, \"option to hide the 00:00\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_HEADERS\", \"chaine\", \"Tasks\", \"list of headers to show inthe timesheets\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_HIDE_REF\", \"int\", 0, \"option to hide the title in the timesheets\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_SHOW_TIMESPENT_NOTE\", \"int\", 1, \"show the note next to the time entry\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ADD_DOCS\", \"int\", 0, \"Allow to join files to timesheets\");\n                $r++;\n               $this->const[$r] = array(\"TIMESHEET_ADD_FOR_OTHER\", \"int\", 0, \"enable to time spent entry for subordinates\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_WHITELIST_MODE\", \"int\", 0, \"Option to change the behaviour of the whitelist:-whiteliste, 1-blackliste, 2-no impact \");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_WHITELIST\", \"int\", 1, \"Activate the whitelist:\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_DRAFT\", \"chaine\", \"FFFFFF\", \"color of draft\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_VALUE\", \"chaine\", \"F0FFF0\", \"color of day with entry\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_FROZEN\", \"chaine\", \"909090\", \"color of closed/frozen\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_SUBMITTED\", \"chaine\", \"00FFFF\", \"color of submitted\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_APPROVED\", \"chaine\", \"00FF00\", \"color of approved\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_CANCELLED\", \"chaine\", \"FFFF00\", \"color of cancelled\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_REJECTED\", \"chaine\", \"FF0000\", \"color of rejected\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_DAY_MAX_DURATION\", \"int\", 12, \"max working hours per days\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ADD_HOLIDAY_TIME\", \"int\", 1, \"count the holiday in total or not\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_BLOCK_HOLIDAY\", \"int\", 1, \"block time entry on holiday\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ADD_PUBLICHOLIDAY_TIME\", \"int\", 1, \"count the public holiday in total or not\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_BLOCK_PUBLICHOLIDAY\", \"int\", 1, \"block time entry on public holiday\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_OPEN_DAYS\", \"chaine\", \"_1111100\", \"normal day for time booking\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_APPROVAL_BY_WEEK\", \"int\", 0, \"Approval by week instead of by user\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_MAX_APPROVAL\", \"int\", 5, \"Max TS per Approval page\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_APPROVAL_FLOWS\", \"chaine\", \"_00000\", \"Approval flows \");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_METHOD\", \"int\", 0, \"Approval by week instead of by user\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_TASKTIME\", \"chaine\", \"all\", \"set the default task to include in the invoice item\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_TIMETYPE\", \"chaine\", \"days\", \"set the default task to include in the invoice item\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_SERVICE\", \"int\", 0, \"set a default service for the invoice item\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_SHOW_TASK\", \"int\", 1, \"Show task on the invoice item \");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_SHOW_USER\", \"int\", 1, \"Show user on the invoice item \");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVENT_MAX_DURATION\", \"int\", 8, \"max event duration\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVENT_DEFAULT_DURATION\", \"int\", 2, \"default event duration\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVENT_MIN_DURATION\", \"int\", \"0\", \"minimum time per chrono\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVENT_NOT_CREATE_TIMESPENT\", \"int\", \"0\", \"hide the sign box on pdf\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_PDF_HIDE_SIGNBOX\", \"int\", \"0\", \"hide the sign box on pdf\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_PDF_NOTEISOTASK\", \"int\", 0, \"save the timesheet verison\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_PDF_HIDE_NAME\", \"int\", \"0\", \"hide name in PDF\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EXPORT_FORMAT\", \"chaine\", \"tsv\", \"export format xls ... \");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVAL_ADDLINE\", \"int\", \"0\", \"process add line vian an eval function running the invoice card page\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ROUND\", \"int\", \"3\", \"round timespend display in day\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_SEARCHBOX\", \"int\", \"0\", \"enable search box in favourite\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_UNBLOCK_INVOICED\", \"int\", \"0\", \"unblock editing invoiced time\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_UNBLOCK_CLOSED\", \"int\", \"0\", \"unblock editing  closed day\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"MAIN_DISABLE_AJAX_COMBOX\", \"int\", \"0\", \"disable combo box\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"MAIN_DISABLE_AJAX_COMBOX\", \"int\", \"0\", \"disable combo box\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_OVERTIME_CHECK_WEEKS\", \"int\", \"30\", \"Number of week used for the overwork box\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_TIMESHEET_IMPORT_AGENDA\", \"int\", \"0\", \"Enable the import agenda button\");// hours or days\n                $r++;\n                \n                 //$this->const[2] = array(\"CONST3\", \"chaine\", \"valeur3\", \"Libelle3\");\n                // Array to add new pages in new tabs\n                // Example: $this->tabs = array('objecttype:+tabname1:Title1:mylangfile@timesheet:$user->rights->timesheet->read:/timesheet/mynewtab1.php?id=__ID__',        // To add a new tab identified by code tabname1\n        //                              'objecttype:+tabname2:Title2:mylangfile@timesheet:$user->rights->othermodule->read:/timesheet/mynewtab2.php?id=__ID__',        // To add another new tab identified by code tabname2\n        //                              'objecttype:-tabname':NU:conditiontoremove);// To remove an existing tab identified by code tabname\n                // where objecttype can be\n                // 'thirdparty'       to add a tab in third party view\n                // 'intervention'     to add a tab in intervention view\n                // 'order_supplier'   to add a tab in supplier order view\n                // 'invoice_supplier' to add a tab in supplier invoice view\n                // 'invoice'          to add a tab in customer invoice view\n                // 'order'            to add a tab in customer order view\n                // 'product'          to add a tab in product view\n                // 'stock'            to add a tab in stock view\n                // 'propal'           to add a tab in propal view\n                // 'member'           to add a tab in fundation member view\n                // 'contract'         to add a tab in contract view\n                // 'user'             to add a tab in user view\n                // 'group'            to add a tab in group view\n                // 'contact'          to add a tab in contact view\n                // 'payment'                  to add a tab in payment view\n                // 'payment_supplier' to add a tab in supplier payment view\n                // 'categories_x'          to add a tab in category view(replace 'x' by type of category(0=product, 1=supplier, 2=customer, 3=member)\n                // 'opensurveypoll'          to add a tab in opensurvey poll view\n        $this->tabs = array();\n\t\t// Example:\n\t\t// $this->tabs[] = array('data' => 'objecttype:+tabname1:Title1:mylangfile@project_cost:$user->rights->project_cost->read:/project_cost/mynewtab1.php?id=__ID__');  \t\t\t\t\t// To add a new tab identified by code tabname1\n        $this->tabs[] = array('data' => 'project:+invoice:projectInvoice:timesheet@timesheet:$user->rights->facture->creer:/timesheet/TimesheetProjectInvoice.php?projectid=__ID__');  \t\t\t\t\t// To add a new tab identified by code tabname1\n        $this->tabs[] = array('data' => 'project:+report:projectReport:timesheet@timesheet:$user->rights->timesheet->report->projet||$user->rights->timesheet->report->admin:/timesheet/TimesheetReportProject.php?projectSelected=__ID__');  \t\t\t\t\t// To add a new tab identified by code tabname1\n        // Dictionaries\n        if (! isset($conf->timesheet->enabled)) {\n            $conf->timesheet=new stdClass();\n            $conf->timesheet->enabled=0;\n        }\n                $this->dictionaries=array();\n        /* Example:\n        if (! isset($conf->timesheet->enabled)) $conf->timesheet->enabled=0;        // This is to avoid warnings\n        $this->dictionaries=array(\n            'langs' => 'mylangfile@timesheet',\n            'tabname' => array(MAIN_DB_PREFIX.\"table1\", MAIN_DB_PREFIX.\"table2\", MAIN_DB_PREFIX.\"table3\"),                // List of tables we want to see into dictonnary editor\n            'tablib' => array(\"Table1\", \"Table2\", \"Table3\"),                                                                                                        // Label of tables\n            'tabsql' => array('SELECT f.rowid as rowid, f.code, f.label, f.active FROM '.MAIN_DB_PREFIX.'table1 as f', 'SELECT f.rowid as rowid, f.code, f.label, f.active FROM '.MAIN_DB_PREFIX.'table2 as f', 'SELECT f.rowid as rowid, f.code, f.label, f.active FROM '.MAIN_DB_PREFIX.'table3 as f'),        // Request to select fields\n            'tabsqlsort' => array(\"label ASC\", \"label ASC\", \"label ASC\"),                                                                                                                                                                        // Sort order\n            'tabfield' => array(\"code, label\", \"code, label\", \"code, label\"),                                                                                                                                                                        // List of fields(result of select to show dictionary)\n            'tabfieldvalue' => array(\"code, label\", \"code, label\", \"code, label\"),                                                                                                                                                                // List of fields(list of fields to edit a record)\n            'tabfieldinsert' => array(\"code, label\", \"code, label\", \"code, label\"),                                                                                                                                                        // List of fields(list of fields for insert)\n            'tabrowid' => array(\"rowid\", \"rowid\", \"rowid\"),                                                                                                                                                                                                        // Name of columns with primary key(try to always name it 'rowid')\n            'tabcond' => array($conf->timesheet->enabled, $conf->timesheet->enabled, $conf->timesheet->enabled)                                                                                                // Condition to show each dictionary\n      );\n        */\n        // Boxes\n                // Add here list of php file(s) stored in core/boxes that contains class to show a box.\n        $this->boxes = array(\n                0 => array(\n                        'file' => 'box_approval.php@timesheet',\n                        'note' => 'timesheetApproval',\n                        'enabledbydefaulton' => 'Home'),\n                1 => array(\n                        'file' => 'box_time.php@timesheet',\n                        'note' => 'timesheet',\n                        'enabledbydefaulton' => 'Home')\n        ); // List of boxes\n                // Example:\n                //$this->boxes=array(array(0 => array('file' => 'myboxa.php', 'note' => '', 'enabledbydefaulton' => 'Home'), 1 => array('file' => 'myboxb.php', 'note' => ''), 2 => array('file' => 'myboxc.php', 'note' => '')););\n                // Permissions\n                $this->rights = array();                // Permission array used by this module\n                $r = 0;\n                $this->rights[$r][0] = 86100200;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'TimesheetUser';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'timesheet';\n                $this->rights[$r][5] = 'user';                                  // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                //$this->rights[$r][5] = 'team';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r ++;\n                $this->rights[$r][0] = 86100201;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'TimesheetAdmin';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'timesheet';\n                $this->rights[$r][5] = 'admin';                                  // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                //$this->rights[$r][5] = 'team';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n\t\t\t\t$r++;                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n\t\t\t\t$this->rights[$r][0] = 86100203;                                // Permission id(must not be already used)\n\t\t\t\t$this->rights[$r][1] = 'ExportRead';        // Permission label\n\t\t\t\t$this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n\t\t\t\t$this->rights[$r][4] = 'read';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n\t\t\t\t//$this->rights[$r][5] = 'admin';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n\t\t\t\t$r++;\n        \t\t//$r = 0;\n                $this->rights[$r][0] = 86100211;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ApprovalTeam';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'approval';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'team';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;\n                $this->rights[$r][0] = 86100212;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ApprovalAdmin';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'approval';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'admin';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;\n                $this->rights[$r][0] = 86100213;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ApprovalOther';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'approval';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'other';\n                $r++;                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n                                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n                $this->rights[$r][0] = 86100240;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ReportUser';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'report';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'user';\n                $r++;\n                $this->rights[$r][0] = 86100241;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ReportProject';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'report';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'project';\n                $r++;                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n                $this->rights[$r][0] = 86100242;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ReportAdmin';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'report';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'admin';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n                $this->rights[$r][0] = 86100250;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'AttendanceUser';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'attendance';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'user';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;\n                $this->rights[$r][0] = 86100251;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'AttendanceAdmin';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'attendance';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'admin';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;\n// Example:\n                // $this->rights[$r][0] = 2000;                                // Permission id(must not be already used)\n                // $this->rights[$r][1] = 'Permision label';        // Permission label\n                // $this->rights[$r][3] = 1;                                        // Permission by default for new user(0/1)\n                // $this->rights[$r][4] = 'level1';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                // $this->rights[$r][5] = 'level2';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                // $r++;\n                // Main menu entries\n                $this->menu = array();                        // List of menus to add\n                $r = 0;\n                // Add here entries to declare new menus\n                //\n                // Example to declare a new Top Menu entry and its Left menu entry:\n                $this->menu[$r]=array('fk_menu' => 0, // Put 0 if this is a top menu\n                        'type' => 'top',                                        // This is a Top menu entry\n                        'titre' => 'Timesheet',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'timesheet',\n                        'url' => '/timesheet/Timesheet.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 100,\n                        'enabled' => '$conf->timesheet->enabled && !($user->rights->timesheet->attendance->user && $conf->global->TIMESHEET_ATTENDANCE==1)',        // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled.\n                        'perms' => '$user->rights->timesheet->timesheet->user || $user->rights->timesheet->timesheet->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);                                                // 0=Menu for internal users, 1=external users, 2=both\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 0,                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'top',                                // This is a Left menu entry\n                        'titre' => 'Attendance',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'attendance',\n                        'url' => '/timesheet/AttendanceClock.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 100,\n                        'enabled' => '$conf->timesheet->enabled && $user->rights->timesheet->attendance->user && $conf->global->TIMESHEET_ATTENDANCE==1',\n                        'perms' => '$user->rights->timesheet->attendance->user || $user->rights->timesheet->attendance->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet', // Put 0 if this is a top menu\n                        'type' => 'left',                                        // This is a Top menu entry\n                        'titre' => 'Timesheet',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'timesheet',\n                        'url' => '/timesheet/Timesheet.php?#',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 100,\n                        'enabled' => '$conf->timesheet->enabled',        // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled.\n                        'perms' => '$user->rights->timesheet->timesheet->user || $user->rights->timesheet->timesheet->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);                                                // 0=Menu for internal users, 1=external users, 2=both\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'Attendance',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'attendance',\n                        'url' => '/timesheet/AttendanceClock.php?#',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 200,\n                        'enabled' => '$conf->global->TIMESHEET_ATTENDANCE==1',\n                        'perms' => '$user->rights->timesheet->attendance->user || $user->rights->timesheet->attendance->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet,fk_leftmenu=attendance',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'AttendanceAdmin',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'Attendance',\n                        'url' => '/timesheet/AttendanceEventAdmin.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 210,\n                        'enabled' => '$conf->global->TIMESHEET_ATTENDANCE',\n                        'perms' => '$user->rights->timesheet->attendance->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet,fk_leftmenu=timesheet',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'userReport',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'Timesheet',\n                        'url' => '/timesheet/TimesheetReportUser.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 130,\n                        'enabled' => '$conf->timesheet->enabled', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->report->admin || $user->rights->timesheet->report->user',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet,fk_leftmenu=timesheet',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'Timesheetwhitelist',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'Timesheet',\n                        'url' => '/timesheet/TimesheetFavouriteAdmin.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 110,\n                        'enabled' => '$conf->global->TIMESHEET_WHITELIST == 1', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->attendance->user || $user->rights->timesheet->attendance->admin || $user->rights->timesheet->timesheet->user || $user->rights->timesheet->timesheet->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                  $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=project,fk_leftmenu=projects',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'projectReport',\n                        'mainmenu' => 'project',\n                        'leftmenu' => 'projectReport',\n                        'url' => '/timesheet/TimesheetReportProject.php?hidetab=1',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 120,\n                        'enabled' => '$conf->timesheet->enabled', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->report->admin || $user->rights->timesheet->report->project',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n               /*   $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=project,fk_leftmenu=projects',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'projectInvoice',\n                        'mainmenu' => 'project',\n                        'leftmenu' => 'projectInvoice',\n                        'url' => '/timesheet/TimesheetProjectInvoice.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 121,\n                        'enabled' => '$conf->timesheet->enabled', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->facture->creer',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);*/\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'Timesheetapproval',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'timesheetapproval',\n                        'url' => '/timesheet/TimesheetTeamApproval.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 300,\n                        'enabled' => '$conf->global->TIMESHEET_APPROVAL_FLOWS != \"_00000\"', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->approval->team || $user->rights->timesheet->approval->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet,fk_leftmenu=timesheetapproval',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'Adminapproval',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'timesheetapproval',\n                        'url' => '/timesheet/TimesheetUserTasksAdmin.php?action=list&sortfield=t.date_start&sortorder=desc',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 310,\n                        'enabled' => '$conf->global->TIMESHEET_APPROVAL_FLOWS != \"_00000\"', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->approval->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n\n// impoort\n/*                $r++;\n                $this->import_code[$r]=$this->rights_class.'_'.$r;\n                $this->import_label[$r]=\"ImportDataset_Kimai\";        // Translation key\n                $this->import_icon[$r]='project';\n                $this->import_entities_array[$r]=array('pt.fk_user' => 'user');                // We define here only fields that use another icon that the one defined into import_icon\n                $this->import_tables_array[$r]=array('ptt' => MAIN_DB_PREFIX.'project_task_time');\n                $this->import_fields_array[$r]=array('ptt.fk_task' => \"ThirdPartyName*\", 'ptt.fk_user' => \"User*\");\n                $this->import_convertvalue_array[$r]=array(\n                                'ptt.fk_task' => array('rule' => 'fetchidfromref', 'classfile' => '/timesheet/class/timesheet.class.php', 'class' => 'Timesheet', 'method' => 'fetch', 'element' => 'ThirdParty'),\n                                'sr.fk_user' => array('rule' => 'fetchidfromref', 'classfile' => '/user/class/user.class.php', 'class' => 'User', 'method' => 'fetch', 'element' => 'User')\n              );\n                $this->import_examplevalues_array[$r]=array('sr.fk_soc' => \"MyBigCompany\", 'sr.fk_user' => \"login\");*/\n                // Exports\n                //$r = 1;\n                // Example:\n                // $this->export_code[$r]=$this->rights_class.'_'.$r;\n                // $this->export_label[$r]='CustomersInvoicesAndInvoiceLines';        // Translation key(used only if key ExportDataset_xxx_z not found)\n        }\n        /**\n         *                Function called when module is enabled.\n         *                The init function add constants, boxes, permissions and menus(defined in constructor) into Dolibarr database.\n         *                It also creates data directories\n         *\n         *      @param      string        $options    Options when enabling module('', 'noboxes')\n         *      @return     int              1 if OK, 0 if KO\n         */\n        public function init($options = '')\n        {\n            global $db, $conf;\n            $result = $this->_load_tables('/timesheet/sql/');\n            $sql = array();\n            $sql[0] = 'DELETE FROM '.MAIN_DB_PREFIX.'project_task_timesheet';\n            $sql[0].= ' WHERE status IN (1, 5)';//'DRAFT', 'REJECTED'\n            if ($db->type=='pgsql') {\n                $sql[1] =\"INSERT INTO \".MAIN_DB_PREFIX.\"document_model(nom, type, entity) VALUES('rat', 'timesheetReport', \".$conf->entity.\") ON CONFLICT(nom, type, entity) DO NOTHING;\";\n                $sql[2] =\"INSERT INTO \".MAIN_DB_PREFIX.\"c_type_contact(rowid, element, source, code, libelle, active ) values (8210160, 'project',  'internal', 'PROJECTBILLING', 'Responsable Facturation Projet', 1) ON CONFLICT(element, source, code) DO NOTHING;\";\n            }else {\n                $sql[1] =\"INSERT IGNORE INTO \".MAIN_DB_PREFIX.\"document_model(nom, type, entity) VALUES('rat', 'timesheetReport', \".$conf->entity.\");\";\n                $sql[2] =\"INSERT IGNORE INTO \".MAIN_DB_PREFIX.\"c_type_contact(rowid, element, source, code, libelle, active ) values (8210160, 'project',  'internal', 'PROJECTBILLING', 'Responsable Facturation Projet', 1);\";\n            }\n            dolibarr_set_const($db, \"TIMESHEET_VERSION\", $this->version, 'chaine', 0, '', $conf->entity);\n            include_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\n            $extrafields = new ExtraFields($this->db);\n            // add the \"Default server\" select list to the user\n            $extrafields->addExtraField('fk_service', \"DefaultService\", 'sellist', 1, '', 'user', 0, 0, '', array('options' => array(\"product:ref|label:rowid::tosell='1' AND fk_product_type='1'\" => 'N')), 1, 1, 3, 0, '', 0, 'timesheet@ptimesheet', '$conf->timesheet->enabled');\n            // add the \"Default server\" select list to the task\n            $extrafields->addExtraField('fk_service', \"DefaultService\", 'sellist', 1, '', 'projet_task', 0, 0, '', array('options' => array(\"product:ref|label:rowid::tosell='1' AND fk_product_type='1'\" => 'N')), 1, 1, 3, 0, '', 0, 'timesheet@ptimesheet', '$conf->timesheet->enabled');\n            // allow ext id of 32 char\n           // $extrafields->addExtraField('external_id', \"ExternalId\", 'varchar', 100, 32, 'user', 1, 0, '', '', 1, '$user->rights->timesheet->AttendanceAdmin', 3, 'specify the id of the external system', '', 0, 'timesheet@ptimesheet', '$conf->global->ATTENDANCE_EXT_SYSTEM');\n            // add the \"invoicable\" bool to the task\n            $extrafields->addExtraField('invoiceable', \"Invoiceable\", 'boolean', 1, '', 'projet_task', 0, 0, '', '', 1, 1, 1, 0, '', 0, 'timesheet@timesheet', '$conf->timesheet->enabled');\n            return $this->_init($sql, $options);\n        }\n        /**\n         *                Function called when module is disabled.\n         *      Remove from database constants, boxes and permissions from Dolibarr database.\n         *                Data directories are not deleted\n         *\n     *      @param      string        $options    Options when enabling module('', 'noboxes')\n         *      @return     int              1 if OK, 0 if KO\n         */\n        public function remove($options = '')\n        {\n\n                $sql = array();\n                return $this->_remove($sql, $options);\n        }\n}\n"], "fixing_code": ["<?php\n/*\n * Copyright (C) 2007-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2018 delcroip <patrick@pmpd.eu>\n * Copyright (C) ---Put here your own copyright and developer email---\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *        \\file       dev/attendanceevents/attendanceevent_page.php\n *                \\ingroup    timesheet othermodule1 othermodule2\n *                \\brief      This file is an example of a php page\n *                                        Initialy built by build_class_from_table on 2018-11-05 20:22\n */\n/// Change this following line to use the correct relative path (../, ../../, etc)\ninclude './core/lib/includeMain.lib.php';\n// Change this following line to use the correct relative path from htdocs\n//include_once(DOL_DOCUMENT_ROOT.'/core/class/formcompany.class.php');\n//require_once 'lib/timesheet.lib.php';\nrequire_once 'class/AttendanceEvent.class.php';\nrequire_once 'core/lib/generic.lib.php';\n//require_once 'core/lib/attendanceevent.lib.php';\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n//document handling\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n//include_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formprojet.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\n$admin = $user->rights->timesheet->attendance->admin || $user->admin;\nif (!$admin) {\n    $accessforbidden = accessforbidden(\"You don't have the attendance admin right\");\n}\n//require_once DOL_DOCUMENT_ROOT.'/projet/class/projet.class.php';\n$PHP_SELF = $_SERVER['PHP_SELF'];\n// Load traductions files requiredby by page\n//$langs->load(\"companies\");\n//$langs->load(\"attendance@timesheet\");\n// Get parameter\n$id = GETPOST('id', 'int');\n$ref = GETPOST('ref', 'alpha');\n$action = GETPOST('action', 'alpha');\n$backtopage = GETPOST('backtopage');\n$cancel = GETPOST('cancel');\n$confirm = GETPOST('confirm');\n$token = GETPOST('token', 'alpha');\n//// Get parameters\n$sortfield = GETPOST('sortfield', 'alpha');\n$sortorder = GETPOST('sortorder', 'alpha')?GETPOST('sortorder', 'alpha'):'ASC';\n$removefilter = isset($_POST[\"removefilter_x\"]) || isset($_POST[\"removefilter\"]);\n//$applyfilter = isset($_POST[\"search_x\"]) ;//|| isset($_POST[\"search\"]);\nif (!$removefilter) {\n// Both test must be present to be compatible with all browsers {\n    $ls_date_time_event_month = GETPOST('ls_date_time_event_month', 'int');\n    $ls_date_time_event_year = GETPOST('ls_date_time_event_year', 'int');\n    $ls_event_location_ref = GETPOST('ls_event_location_ref', 'alpha');\n    $ls_event_type = GETPOST('ls_event_type', 'int');\n    $ls_note = GETPOST('ls_note', 'alpha');\n    $ls_userid = GETPOST('ls_userid', 'int');\n    if ($ls_userid == -1)$ls_userid = '';\n    $ls_third_party = GETPOST('ls_third_party', 'int');\n    $ls_task = GETPOST('ls_task', 'int');\n    $ls_project = GETPOST('ls_project', 'int');\n    $ls_token = GETPOST('ls_token', 'int');\n\n}\n$page = GETPOST('page', 'int');\nif ($page <= 0){\n    $page = 0;\n}\n$limit = GETPOST('limit', 'int')?GETPOST('limit', 'int'):$conf->liste_limit;\n$offset = $limit * $page;\n$pageprev = $page - 1;\n$pagenext = $page + 1;\n // uncomment to avoid resubmision\n//if (isset($_SESSION['attendanceevent_class'][$token]))\n//{\n //   $cancel = true;\n //  setEventMessages('Internal error, POST not exptected', null, 'errors');\n//}\n// Right Management\n /*\nif ($user->societe_id > 0 ||\n       (!$user->rights->timesheet->add && ($action == 'add' || $action = 'create')) ||\n       (!$user->rights->timesheet->view && ($action == 'list' || $action = 'view')) ||\n       (!$user->rights->timesheet->delete && ($action == 'confirm_delete')) ||\n       (!$user->rights->timesheet->edit && ($action == 'edit' || $action = 'update')))\n{\n        accessforbidden();\n}\n*/\n// create object and set id or ref if provided as parameter\n$object = new Attendanceevent($db, $user);\nif ($id>0) {\n    $object->id = $id;\n    $object->fetch($id);\n    $ref = dol_sanitizeFileName($object->ref);\n}\n$form = new Form($db);\n/*******************************************************************\n* ACTIONS\n*\n* Put here all code to do according to value of \"action\" parameter\n********************************************************************/\n// Action to remove record\nswitch($action) {\n    case 'confirm_delete':\n        $result = ($confirm == 'yes')?$object->delete($user):0;\n        if ($result > 0) {\n            // Delete OK\n            setEventMessage($langs->trans('RecordDeleted'), 'mesgs');\n        } else {\n            // Delete NOK\n            if (! empty($object->errors)){\n                setEventMessages(null, $object->errors, 'errors');\n            } else setEventMessage('RecordNotDeleted', 'errors');\n        }\n        break;\n    case 'add':\n        if (empty($token) || (!isset($_SESSION['Attendanceevent'][$token]))) {\n            setEventMessage('WrongTimeStamp_requestNotExpected', 'errors');\n            $action = 'list';\n        }\n    //retrive the data\n        $time = explode(':', GETPOST('DatetimeeventHour'));\n        $object->date_time_event = dol_mktime($time[0], $time[1], 0, \n            GETPOST('Datetimeeventmonth'), \n            GETPOST('Datetimeeventday'), GETPOST('Datetimeeventyear'));\n        $object->event_location_ref = GETPOST('Eventlocationref');\n        $object->event_type = GETPOST('Eventtype');\n        $object->note = GETPOST('Note');\n        $object->userid = GETPOST('Userid');\n        $object->third_party = GETPOST('Thirdparty');\n        $object->task = GETPOST('Task');\n        $object->project = GETPOST('Project');\n        $object->token = GETPOST('Token');\n        $result = $object->create($user);\n        if ($result > 0) {\n                // Creation OK\n            // remove the token\n               if ($ajax == 1) {\n                   $object->serialize(2); //return JSON\n                    ob_end_flush();\n                    exit();// don't remove the token. don't continue with the\n               }\n                   unset($_SESSION['Attendanceevent'][$token]);\n               setEventMessage('RecordSucessfullyCreated', 'mesgs');\n               //AttendanceeventReloadPage($backtopage, $result, '');\n        } else {\n                // Creation KO\n                if (! empty($object->errors)) setEventMessages(null, $object->errors, 'errors');\n                else  setEventMessage('RecordNotSucessfullyCreated', 'errors');\n                $action = 'create';\n        }\n    break;\n}\n    //Removing the token array so the order can't be submitted two times\nif (isset($_SESSION['Attendanceevent'][$token])) {\n    unset($_SESSION['Attendanceevent'][$token]);\n}\n    $token = getToken();\n    $_SESSION['Attendanceevent'][$token] = array();\n    $_SESSION['Attendanceevent'][$token]['action'] = $action;\n/***************************************************\n* VIEW\n*\n* Put here all code to build page\n****************************************************/\n$morejs = array(\"/timesheet/core/js/jsparameters.php\", \"/timesheet/core/js/timesheet.js?\"\n    .$conf->global->TIMESHEET_VERSION);\nllxHeader('', $langs->trans('AttendanceAdmin'), '', '', '', '', $morejs);\nprint \"<div> <!-- module body-->\";\n$form = new Form($db);\n$formother = new FormOther($db);\n$formproject = new FormProjets($db);\n$fuser = new User($db);\n        if ($action == 'delete' && ($id>0)) {\n         print $form->form_confirm(dol_buildpath('/timesheet/AttendanceEventAdmin.php', 1)\n            .'?action=confirm_delete&id='.$id, $langs->trans('DeleteAttendanceevent'), \n                $langs->trans('ConfirmDelete'), 'confirm_delete', '', 0, 1);\n         //if ($ret == 'html') print '<br />';\n         //to have the object to be deleted in the background\\\n        }\n// Put here content of your page\n// Example : Adding jquery code\n/*print '<script type = \"text/javascript\" language = \"javascript\">\njQuery(document).ready(function()\n{\n        function init_myfunc()\n        {\n                jQuery(\"#myid\").removeAttr(\\'disabled\\');\n                jQuery(\"#myid\").attr(\\'disabled\\', \\'disabled\\');\n        }\n        init_myfunc();\n        jQuery(\"#mybutton\").click(function()\n{\n                init_needroot();\n        });\n});\n</script>';*/\n    $sql = 'SELECT';\n    $sql .= ' t.rowid, ';\n    $sql .= ' t.date_time_event, ';\n    $sql .= ' t.event_location_ref, ';\n    $sql .= ' t.event_type, ';\n    $sql .= ' t.note, ';\n    $sql .= ' t.fk_userid, ';\n    $sql .= ' t.fk_third_party, ';\n    $sql .= ' t.fk_task, ';\n    $sql .= ' t.fk_project, ';\n    $sql .= ' t.token, ';\n    $sql .= '  st.date_time_event  as date_time_event_start ';\n    $sql .= ' FROM '.MAIN_DB_PREFIX.'attendance_event as t';\n    $sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"attendance_event as st ON t.token = st.token AND ABS(st.event_type)=2\";\n\n    $sqlwhere = '';\n    if (isset($object->entity))\n        $sqlwhere .= ' AND t.entity = '.$conf->entity;\n    if ($filter && $filter != -1) {\n        // GETPOST('filtre') may be a string {\n            $filtrearr = explode(', ', $filter);\n            foreach ($filtrearr as $fil) {\n                    $filt = explode(':', $fil);\n                    $sqlwhere .= ' AND ' . $filt[0] . ' = ' . $filt[1];\n            }\n    }\n    //pass the search criteria\n        if ($ls_date_time_event_month)\n            $sqlwhere .= ' AND MONTH(t.date_time_event) = \"'.$ls_date_time_event_month.\"'\";\n        if ($ls_date_time_event_year)\n            $sqlwhere .= ' AND YEAR(t.date_time_event) = \"'.$ls_date_time_event_year.\"'\";\n        if ($ls_event_location_ref) \n            $sqlwhere .= natural_search('t.event_location_ref', $ls_event_location_ref);\n        if ($ls_event_type) \n            $sqlwhere .= natural_search(array('t.event_type'), $ls_event_type);\n        if ($ls_note) \n            $sqlwhere .= natural_search('t.note', $ls_note);\n        if ($ls_userid) \n            $sqlwhere .= natural_search(array('t.fk_userid'), $ls_userid);\n        if ($ls_third_party) \n            $sqlwhere .= natural_search(array('t.fk_third_party'), $ls_third_party);\n        if ($ls_task) \n            $sqlwhere .= natural_search(array('t.fk_task'), $ls_task);\n        if ($ls_project) \n            $sqlwhere .= natural_search(array('t.fk_project'), $ls_project);\n        if ($ls_token) \n            $sqlwhere .= natural_search(array('t.token'), $ls_token);\n\n    //list limit\n    if (!empty($sqlwhere))\n        $sql .= ' WHERE '.substr($sqlwhere, 5);\n// Count total nb of records\n$nbtotalofrecords = 0;\nif (empty($conf->global->MAIN_DISABLE_FULL_SCANLIST)) {\n        $sqlcount = 'SELECT COUNT(*) as count FROM '.MAIN_DB_PREFIX.'attendance_event as t';\n        if (!empty($sqlwhere))\n            $sqlcount .= ' WHERE '.substr($sqlwhere, 5);\n        $result = $db->query($sqlcount);\n        $nbtotalofrecords = ($result)?$objcount = $db->fetch_object($result)->count:0;\n}\n    if (!empty($sortfield)) {\n        $sql .= $db->order($sortfield, $sortorder);\n    } else{\n       $sql .= ' ORDER BY t.date_time_event DESC';\n    }\n    if (!empty($limit)) {\n            $sql .= $db->plimit($limit+1, $offset);\n    }\n    //execute SQL\n    dol_syslog($script_file, LOG_DEBUG);\n    $resql = $db->query($sql);\n    if ($resql) {\n        $param = '';\n        if (! empty($contextpage) && $contextpage != $_SERVER[\"PHP_SELF\"]) \n            $param .= '&contextpage='.urlencode($contextpage);\n        if ($limit > 0 && $limit != $conf->liste_limit) \n            $param .= '&limit='.urlencode($limit);\n        if (!empty($ls_date_time_event_month))        \n            $param .= '&ls_date_time_event_month='.urlencode($ls_date_time_event_month);\n        if (!empty($ls_date_time_event_year))        \n            $param .= '&ls_date_time_event_year='.urlencode($ls_date_time_event_year);\n        if (!empty($ls_event_location_ref))        \n            $param .= '&ls_event_location_ref='.urlencode($ls_event_location_ref);\n        if (!empty($ls_event_type))        \n            $param .= '&ls_event_type='.urlencode($ls_event_type);\n        if (!empty($ls_note))        \n            $param .= '&ls_note='.urlencode($ls_note);\n        if (!empty($ls_userid))        \n            $param .= '&ls_userid='.urlencode($ls_userid);\n        if (!empty($ls_third_party))        \n            $param .= '&ls_third_party='.urlencode($ls_third_party);\n        if (!empty($ls_task))        \n            $param .= '&ls_task='.urlencode($ls_task);\n        if (!empty($ls_project))        \n            $param .= '&ls_project='.urlencode($ls_project);\n        if (!empty($ls_token))        \n            $param .= '&ls_token='.urlencode($ls_token);\n        if ($filter && $filter != -1) \n            $param .= '&filtre='.urlencode($filter);\n        $num = $db->num_rows($resql);\n        //print_barre_liste function defined in /core/lib/function.lib.php, possible to add a picto\n        print_barre_liste($langs->trans(\"Attendance\"), $page, $PHP_SELF, $param, $sortfield, $sortorder, '', $num, $nbtotalofrecords);\n        // QUICK FOR TO ADD A LINE\n        print '<form method = \"POST\" action=\"?action=add\">';\n        print '<table class = \"liste\" width = \"100%\">'.\"\\n\";\n        //TITLE ADD\n        print '<tr class = \"liste_titre\">';\n         print_liste_field_titre('Date', $PHP_SELF, 't.date_time_event', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Eventlocationref', $PHP_SELF, 't.event_location_ref', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Eventtype', $PHP_SELF, 't.event_type', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Note', $PHP_SELF, 't.note', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('User', $PHP_SELF, 't.fk_userid', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('ThirdParty', $PHP_SELF, 't.fk_third_party', '', $param, '', $sortfield, $sortorder);// fix translation\n        print \"\\n\";\n        print_liste_field_titre('Task', $PHP_SELF, 't.fk_task', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Project', $PHP_SELF, 't.fk_project', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Token', $PHP_SELF, 't.token', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print '</tr>';\n        //add\n        print '<tr><td>';\n        print '<input type=\"hidden\" id=\"csrf-token\" name=\"token\" value=\"'.$token.'\">';\n        print $form->select_date(time(), 'Datetimeevent');\n        print '<input type = \"text\" maxlength = \"5\" onkeypress = \"return regexEvent(this,event,\\'timeChar\\')\"'\n            .' name = \"DatetimeeventHour\" value = \"'.date('H:m').'\"/>';\n        print '</td><td>';\n        print '<input type = \"text\" value = \"'.$object->event_location_ref.'\" name = \"Eventlocationref\">';\n        print '</td><td>';\n        print $form->selectarray('Eventtype', $attendanceeventStatusArray, 2);\n        print '</td><td>';\n        print '<input type = \"text\" value = \"'.$object->note.'\" name = \"Note\">';\n        print '</td><td>';\n        if (empty($object->userid))$object->userid = $user->id;\n        print $form->select_dolusers($object->userid, 'Userid', 1, '', 0);\n        print '</td><td>';\n        $selected = $object->third_party;\n        $htmlname = 'Thirdparty';\n        print $form->select_company($selected, $htmlname, '', 1);\n        print '</td><td>';\n        $selected = $object->task;\n        $htmlname = 'Task';\n        $formproject->selectTasks(-1, $selected, $htmlname);\n        print '</td><td>';\n        $selected = $object->project;\n        $htmlname = 'Project';\n        $formproject->select_projects(-1, $selected, $htmlname);\n        print '</td><td>';\n        print '</td><td>';\n        print '<input type = \"submit\" value = \"'.$langs->trans('add').'\" \">';\n        print '</td></tr></table></form>';\n        print '<form method = \"POST\" action = \"\">';\n        print '<table class = \"liste\" width = \"100%\">'.\"\\n\";\n                //TITLE\n        print '<tr class = \"liste_titre\">';\n         print_liste_field_titre('Date', $PHP_SELF, 't.date_time_event', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Eventlocationref', $PHP_SELF, 't.event_location_ref', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Eventtype', $PHP_SELF, 't.event_type', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Note', $PHP_SELF, 't.note', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('User', $PHP_SELF, 't.fk_userid', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Thirdparty', $PHP_SELF, 't.fk_third_party', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Task', $PHP_SELF, 't.fk_task', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Project', $PHP_SELF, 't.fk_project', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Tocken', $PHP_SELF, 't.token', '', $param, '', $sortfield, $sortorder);\n        print \"\\n\";\n        print_liste_field_titre('Duration', '', '', '', '', '', '', '');\n        print \"<th></th>\\n\";\n        print '</tr>';\n        //SEARCH FIELDS\n        print '<tr class = \"liste_titre\">';\n        //Search field fordate_time_event\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        print '<input class = \"flat\" type = \"text\" size = \"1\" maxlength = \"2\" name = \"date_time_event_month\" value = \"'\n            .$ls_date_time_event_month.'\">';\n        $syear = $ls_date_time_event_year;\n        $formother->select_year($syear?$syear:-1, 'ls_date_time_event_year', 1, 20, 5);\n        print '</td>';\n//Search field forevent_location_ref\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        print '<input class = \"flat\" size = \"16\" type = \"text\" name = \"ls_event_location_ref\" value = \"'.$ls_event_location_ref.'\">';\n        print '</td>';\n//Search field forevent_type\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        print '<input class = \"flat\" size = \"16\" type = \"text\" name = \"ls_event_type\" value = \"'.$ls_event_type.'\">';\n        print '</td>';\n//Search field fornote\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        print '<input class = \"flat\" size = \"16\" type = \"text\" name = \"ls_note\" value = \"'.$ls_note.'\">';\n        print '</td>';\n//Search field foruserid\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n                print $form->select_dolusers('userid', $ls_userid);\n        print '</td>';\n//Search field forthird_party\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        $selected = $ls_third_party;\n        $htmlname = 'ls_third_party';\n        print $form->select_company($selected, $htmlname, '', 1);       \n        print '</td>';\n//Search field fortask\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        $selected = $ls_task;\n        $htmlname = 'ls_task';\n        $formproject->selectTasks(-1, $selected, $htmlname);\n        print '</td>';\n//Search field forproject\n        print '<td class = \"liste_titre\" colspan = \"1\" >';\n        $selected = $ls_project;\n        $htmlname = 'ls_project';\n        $formproject->select_projects(-1, $selected, $htmlname);\n        print '</td>';\n//Search field fortoken\n        print '<td></td>';\n        //print '<td class = \"liste_titre\" colspan = \"1\" >';\n        //print '<input type = \"text\" name = \"ls_token\">';\n        //print '</td>';\n\n\n         print '<td class = \"liste_titre\" colspan = \"1\" />';\n        print '<td width = \"15px\">';\n        print '<input type = \"image\" class = \"liste_titre\" name = \"search\" src = \"'\n            .img_picto($langs->trans(\"Search\"), 'search.png', '', '', 1).'\" value = \"'\n            .dol_escape_htmltag($langs->trans(\"Search\")).'\" title = \"'\n            .dol_escape_htmltag($langs->trans(\"Search\")).'\">';\n        print '<input type = \"image\" class = \"liste_titre\" name = \"removefilter\" src = \"'\n            .img_picto($langs->trans(\"Search\"), 'searchclear.png', '', '', 1).'\" value = \"'\n            .dol_escape_htmltag($langs->trans(\"RemoveFilter\")).'\" title = \"'\n            .dol_escape_htmltag($langs->trans(\"RemoveFilter\")).'\">';\n        print '</td>';\n        print '</tr>'.\"\\n\";\n        $i = 0;\n       // $basedurl = dirname($PHP_SELF).'/attendanceeventCard.php?action=view&id=';\n        while($i < $num && $i<$limit)\n        {\n            $obj = $db->fetch_object($resql);\n            if ($obj) {\n                // You can use here results\n                print \"<tr class = \\\"oddeven\\\"  >\";\n                print \"<td>\".dol_print_date($db->jdate($obj->date_time_event), 'dayhour').\"</td>\";\n                print \"<td>\".$obj->event_location_ref.\"</td>\";\n                print \"<td>\".Attendanceevent::LibStatut($obj->event_type).\"</td>\";\n                print \"<td>\".$obj->note.\"</td>\";\n                print \"<td>\";\n                if ($obj->fk_userid>0) {\n                $sUser = new User($db);\n                $sUser->fetch($obj->fk_userid);\n                print  $sUser->getNomUrl(1);\n                }\n                print \"</td>\";\n//                print \"<td>\".  print_sellist('third_party', 'rowid', $obj->fk_third_party, 'rowid', 'description').\"</td>\";\n                print \"<td>\";\n                if ($obj->fk_third_party>0) {\n                $sThirdParty = new Societe($db);\n                $sThirdParty->fetch($obj->fk_third_party);\n                print $sThirdParty->getNomUrl(1, '');\n                }\n                print \"</td>\";\n                 print \"<td>\";\n                if ($obj->fk_task>0) {\n                $sTask = new Task($db);\n                $sTask->fetch($obj->fk_task);\n                print $sTask->getNomUrl(1, '');\n                }\n                print \"</td>\";\n                                 print \"<td>\";\n                if ($obj->fk_project>0) {\n                $sProject = new Project($db);\n                $sProject->fetch($obj->fk_project);\n                print $sProject->getNomUrl(1);\n                }\n                print \"</td>\";\n//                print \"<td>\".print_generic('third_party', 'rowid', $obj->fk_third_party, 'rowid', 'description').\"</td>\";\n                //print \"<td>\".print_generic('projet_task', 'rowid', $obj->fk_task, 'ref', 'label').\"</td>\";\n                //print \"<td>\".print_generic('projet', 'rowid', $obj->fk_project, 'ref', 'title').\"</td>\";\n                print \"<td>\".$obj->token.\"</td>\";\n                $duration = ($obj->date_time_event_start <> \"\")\n                    ?$db->jdate($obj->date_time_event)-$db->jdate($obj->date_time_event_start):'';\n                print \"<td>\".formatTime($duration, 0).\"</td>\";\n                print '<td><a href = \"AttendanceEventAdmin.php?action=delete&id='.$obj->rowid.'\">'\n                    .img_delete().'</a></td>';\n                print \"</tr>\";\n            }\n            $i++;\n        }\n    } else {\n        $error++;\n        dol_print_error($db);\n    }\n    print '</table>'.\"\\n\";\n    print '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n\n    print '</form>'.\"\\n\";\n    // new button\n   // print '<a href = \"attendanceeventCard.php?action=create\" class=\"butAction\"role=\"button\">'.$langs->trans('New');\n    print ' '.$langs->trans('Attendanceevent').\"</a>\\n\";\n// End of page\nllxFooter();\n$db->close();\n", "# dolibarr_project_timesheet changelog\n4.5.6\n- fix csrf issue in other pages\n- fix box issue\n\n4.5.5\n- fix: pdf header with small pictures\n- misc: white logo\n\n\n4.5.4\n- fix: save and next\n- fix: update progress only #190\n- fix: calcualte total lines\n\n4.5.3\n- better adaptative header size in PDF\n\n\n4.5.2\n- fix missing subordinates on user reports\n- add \"all\" whenever someone have subordinates\n- add date sorting in the pdf reports\n- trads updates (visa -> signature + DE fixes)\n- adds the buttons on top and bottom of the page \n- fix bad report url\n- fix foreach js syntax (nicolasb827)\n\n\n4.5.1\n- Fix Project data on reports \n\n4.5.0\n- new; first verison of the TS missing reminder\n- new: add submit/save next button on ts pages\n- new: add propal lines in the invoice service assignation screen (behave as lumpsum)\n- new: add lump sum option the invoice service assignation screen\n- new: show \"all users\" report\n- new: enable masking \"import from agenda\"\n- new add customer code in exports\n- new: total lines are dynamic\n- new: box for average/Max timesheet delta with hours per week for the user\n- fix: role authorisation issue on project/task\n- fix issue when selecting \"curent user\" in ts for other option\n- fix: unblock holiday if not approved\n- fix: project name on user report\n\n\n4.4.10 (2021-12-01)\n- fix the watch clock issue (going way to fast)\n\n4.4.10 (2021-10-16)\n- fix sendapproval\n- Fix: User rights for viewing PDF. #165 \n- FIx: SQL syntax error. #164 \n\n4.4.9 (2021-08-28)\n- fix white button\n- fix sunday not showed\n\n\n4.4.8 (2021-08-06)\n- fix: This month link\n- fix: wrong user report for user with subordinates\n\n\n4.4.7 (2021-07-18)\n- new setting to manage public holiday time (separeated from holiday management)\n- fix: show public holiday without country\n- fix: pgsql issue\n\n\n4.4.6 (2021-06-06)\n- new import from agenda\n- new show public holiday\n- new block time entry during public holiday\n- fix total takes holiday into account\n\n\n4.4.5 (2021-05-11)\n- fix approval admin rights\n\n4.4.4 (2021-05-07)\n- fix: approval not working (likely since 4.4.0)\n- misc: hide project report if not the rights\n- fix: perm issue on approval admin\n\n\n4.4.3 (2021-05-03)\n- fix block holiday setting\n- fix missing perms trads\n\n4.4.2 (2021-05-02)\n- fix report user userlist\n- new: prems\n\n4.4.1(2021-05-01)\n- fix: tasknote deleteion not working\n- fix: week note not saved\n- new: allow project all rights to access to all project reports\n- new: allow attendance admin to enter time for everyone\n\n\n4.4.0 (2021-04-30)\n- fix: UI improvements\n- new: block holiday\n\n4.3.9 (2021-02-09)\n- new permission attendance->admin has the same priviledge as Admin \n\n4.3.8\n- new: add dropdown for export format\n- fix: billing role was not allowed to get reports\n\n4.3.7\n- fix activation issue\n- fix: name of the pdf\n\n4.3.6\n- new: billing role\n- new: add time on public project\n- fix: add a single task as favorites\n\n4.3.5\n- fix: user report doesn't show all users\n\n4.3.4\n- new: support cust language in invoice\n- new: support cust price for service\n- fix: setup \"show task in invoice\" correctly displayed  \n\n4.3.3\n- new: add chrono fopr other\n- fix: report pgsql\n- fix report html not correct (task missing)\n\n4.3.2\n- new: pdf user report \n- fix: SQL error on ts page when draft hidden\n\n4.3.1\n- fix: show only active user in unserreport (admin)\n- fix: missing SQL quotes\n- fix: wrong task in reports\n\n4.3.0\n- new: possibility to ungroup reports\n- fix: remove closed project (without end date) task\n- new: improve timesheet box (add ts to submit and layout imnprovement)\n\n4.2.2\n- new: show the time not editable (when there is several task time for ady/task)\n\n4.2.1\n- fix: blank timesheet page\n\n4.2.0\n- fix: send approval reminder\n- fix: favorite edit card update the task when the project is selected\n- fix: update the note and progress from team approval\n- fix: update declared progress from chrono\n- fix: error in team approval (#109)\n- new: link propal to timesheet invoice (#101)\n- new: favorite tab in chrono (#111)\n- new: add user, project and task link in reports (#104)\n- new: use the hourly or daily rate as default in invoice unit price\n\n4.1.2\n- fix count issue on chrono page\n- fix UTF-8 lang file \n\n4.1.1 \n- new: add timesheet for other works with project \"subordinate\"\n\n4.1.0\n- new: timespent admin\n- new: option to allow entering time on closed day (e.g. weekend)\n- new: invoiced time background color (approved color)\n- new: option to allow modification invoiced time\n- new: hidden option now in admin page (hide name, eval, round day )\n- fix: remove warning tasktimesheet not an array\n- fix: remove warning with float hour per day\n- fix: label not display in attendance sheet\n\n4.0.18\n- fix report issue (first group splited in two)\n- new: update task progress declared from timesheet\n\n4.0.17\n- new keeping project when moving to report\n- fix last week/month report short links\n- clean: project invoice as a project tab\n\n4.0.16\n- fix favorite not wworking\n\n4.0.15\n- new filter on task info \n- new: note icon changes if the note is filled\n- new: quick link for report (this week ...)\n- fix: error in 4.0.14 change for project report\n\n4.0.14\n- fix: error in project report from 4.0.11\n4.0.13\n- fix: report take now into account time in the end date\n\n4.0.12\n- fix: correct the reports (first line was always wrong)\n\n4.0.11\n- clean: use task_datehour iso task_date to retrieve time spent\n- new: hide ref become hide title\n- fix company link not working\n- fix warning when reopening an empty approval submission\n- fix #83 version compare issue on php 5\n\n4.0.10\n - fix total not display in timesheet page\n - fix submittion without changes of timesheet\n\n4.0.9\n - fix:remove errro message of 4.0.8\n \n4.0.8 change log from 4.0.7\n - new: block creation of timespent after the end of event\n - fix: add missing trad \n - fix: line where only the note was modified were not sent to the server in 4.0.7\n - fix: previous week link not working on slitted week if the first day of the month was a monday\n - fix: display hours iso seconds\n\n4.0.7 change log from 4.0.3\n - new: xlsx, csv, tsv report export for several projects\n - new: more flexibility in time enter (support .5, 0 ... ctr+v ) \n - new: (EXPERIMENTAL) support multiple taxes in invoice (TIMESHEET_EVAL_ADDLINE must be set to 1)\n - fix: selllist condition compatible with pgsql\n - fix: php warnings displayed\n - fix: only line modified are sent to the servers (support more task lines)\n\n4.0.3 change log from 4.0.0\n - new: chrono status (auto stop)\n - new: max value for chrono\n - new: default value for chrono (when max is reached)\n - new: xlsx, csv, tsv report export \n - new: remove signbox from pdf\n - fix: multi line comment in comment display in pdf\n - fix: pgsql error of wrong column\n - fix: project approval without team approval\n - fix: sellect sellist without space between column names\n - fix: time display issue\n - fix: tabletop display issue on pdf\n\n4.0.0 change log from 3.2\n - new chrono pages per task\n - new time type in pdf can differt frm timesheet page\n - new roles : timesheet user, chrono user and admin chrono\n - clean: pdf export user date instead of UNIX time\n - fix: note editing in approval flow\n - fix: approver saved properly in the bd\n - fix: pgSQL compatibility issue\n - fix: no from-to date showed on invoice\n - fix: main menu icon display in dolibarr 8\n\n\n3.2 change log from 3.1.7\n - new: report project between dates instead of per month\n - new: invoice project between dates instead of per month\n - new: show the cusror pointer when the favourite start is hoovered\n - fix: fix pdf layout issue when there is too many time for an user\n\n3.1.7 change log from 3.1.2\n - fix: date were sometime displayed on two lines\n - fix: avoid max approval to be set at 0 (was genereating issues elsewhere)\n - fix remove project closed from admin view of project report\n - fix: support installation in a subfolder of the custom folder\n - fix: error in case the timesheet favourite didn't have any task related\n - clean: align time formating accros the module\n - better layout for the total in the pdf\n\n3.1.2 change log from 2.2.11\n - new: button to generate users' attendance sheet from project report pages\n - fix: #57 note were not saved when containing a simple quote\n - fix: install in htdoc folder\n - fix: #50 boxapproval\n - fix: format & typo\n - fix: #48 timesheet start 1 day in advance\n - fix: #55 invoice show close & draf project in the dropdown list\n - fix: #49 removing the value in a timesheet will put it a 0\n\n\n2.2.11 change log from 2.2.10\n - fix: background color missing with approval status\n - clean: total calculation improvments\n - clean: add new trads\n - clean: remove display error\n\n2.2.10 change log from 2.2.9\n - new: line total header\n - new: add a total line every 10 task line\n - fix: in day mode, the leading 0 isn't mandatory anymore (e.g. \".1\")\n - clean: use liste_title for totals\n - clean: improve total & overtime behaviour\n\n2.2.9 change log from 2.2.8\n - fix: project invoice not working\n - fix: project report (date/user/task) not working\n - clean: use oddeven instead of pair/impair as list class\n\n2.2.8 change log from 2.2.7\n - new: add a super total: total of every day present on the timesheet screen\n\n2.2.7 change log from 2.2.6\n - fix: error in pgsql while generating the invoice\n - fix: link the created invoice to the project\n - fix: error in the reports pages with mysql\n - fix:ts draft not removed upon timespan change leading to days not accessible\n - clean: Invoice creation page: layout improvement\n\n2.2.6 Change log from 2.2.3\n - new: support PostGreSQL database\n - new/fix: support custom project roles\n - new/fix: support Dolibarr 7.0.0\n - fix: behaviour of notes in the timesheet pages with favourites\n - fix: \"not defied\" showing instead of project name\n - fix: correction of the message when a favourite was added\n - clean: enum are not user anymore\n - clean: removal of dead code\n\n2.2.3 Change log from 2.2.2\n - fix: trad issue\n - fix: sql error in approvals\n\n2.2.2 Change log from 2.2\n - new: deletion of draft timsheet when switching between time span (no impact on time entered)\n - fix: issue with winter time\n\n2.2 Change log from 2.1.3\n - NEW: timesheet entry per month\n - NEW: add time spent for subordinates\n - fix: colation issue with latin/latin_swedish on approval page\n - fix: approval with project only\n - clean: files and classes renaming\n - clean: small date only appear for month mode\n\n\n2.1.3 Change log from 2.1.2\n - fix : start and end date missing in task line\n - fix : task end/start in middle of the week wasn't taken into account\n\n2.1.2 Change log from 2.1.1\n - fix third party not showed when note wasn't activated\n - fix: holiday time wasnot adding-up in the total lines\n\n2.1.1 Change log from 2.0.1\n - fix: Contact email correction\n - fix: js blocked if the module was in the custom folder\n - fix: default date for report is the current date not jan 2020\n\n2.1 Change log from 2.0.1\n- fix: Submit (without pushing save before)save correctly the time for approval\n- fix:javascript error that prevented to color change upon time entry\n- fix: progress not showing up\n- fix: weeks with a 8th day\n- fix: dolibarr 6.0 compatibility\n- change:\"New\" button removed from the admin page,\n- change: end date showed on the admin card page\n\n2.0.1 Change log from 2.0\n - fix: Project approval corrected (for non admin no approval was shown)\n - fix: PHP warning removed\n - fix: Home timesheet box correted (was not showing the # of timesheet to approve)\n - new: send email over TS rejection\n\n2.0 Change log from 1.5.1:\n - new: Week over two month can be splited in 2 so an approval per month is possible.\n - new: note availale for each task (also in the approval flow)\n - new: chained approval for project\n - new: create invoice from the project report\n - new: reports shows time in hours and days\n - new: tab in the setup for better browsing experience (in JS so config is kept when changing tab)\n - new: favoris in a tab (not a new page)\n - new: favoris can be set simply by pushing on a star next to the task name in timesheet screen\n - new: better handling of search boxes\n - new: more translation (ES, DE, IT, FR, US)\n\n\n\nChange log from 1.4.3:\n\n - Timesheet approval by N+1,\n - Reminder (email) for to be approved timesheet possible through dolibarr planned tasks\n - admin wiew for the Approval (change a approval status outside the normal approval flow)\n - Home box with the pending timesheet to be approved\n - Blocking some weekdays (e.g week ends)\n - Holiday showed in the timesheet\n - Holiday time can be included in the timesheet totals\n - Typo correction for French.\n\nChange log from 1.4.1:\n\n - correction of the Spanish language (thanks to vinclar)\n - possible to deactivate the dolibarr Ajax for the dropdown list for the setup page (in case of issue to add whitelist)\n - keep the whitlistmode after submit / go to date / next / previsous week\n\n\nChange log from 1.4:\n\n- bugfix for the tasktime date in the project page\n- link to have the different whitelist behaviour (black list, and none)\n- Spanish language (google trad)\n- typo correction for French\n- support the print mode for timesheet & the report\n- show the project open to everyone on the new whitelist page\n\nChange log from 1.3.7:\n\n- layout improvement: timesheet, setup page, reports\n- whitelist to show only some project/task\n- taslk column customisation\n- new task column: company, parent task\n- new report option: report all, export friendly layout\n- user report available for the N-2, N-3\n\nChange log from 1.3.6:\n\n- compatible avec dolibarr 3.7\n\n\nChange log from 1.3.3:\n\n- Works with PHP<=5.3\n- Possibility to remove the 0:00\n- Color code for already filled tasktime / new tasktime and error\n- Bux fixes in the report\n- Better date dialog\n- N+1 is able to check the user report of his N's\n\n", "<?php\n /* Copyright (C) 2017 delcroip <patrick@pmpd.eu>\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/*\ndefine('$conf->global->TIMESHEET_INVOICE_METHOD', 'user');\ndefine('$conf->global->TIMESHEET_INVOICE_TASKTIME', 'user');\ndefine('$conf->global->TIMESHEET_INVOICE_SERVICE', '1');\ndefine('$conf->global->TIMESHEET_INVOICE_SHOW_TASK', '1');\ndefine('$conf->global->TIMESHEET_INVOICE_SHOW_USER', '1');\n*/\n//load class\ninclude 'core/lib/includeMain.lib.php';\ninclude 'core/lib/generic.lib.php';\ninclude 'core/lib/timesheet.lib.php';\n$token = getToken();\nrequire_once DOL_DOCUMENT_ROOT .'/core/lib/functions.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/project.lib.php';\n//get param\n$staticProject = new Project($db);\n$projectId = GETPOST('projectid', 'int');\n$propalId = GETPOST('propalid', 'int');\n$socid = GETPOST('socid', 'int');\n//$month = GETPOST('month', 'alpha');\n//$year = GETPOST('year', 'int');\n$mode = GETPOST('invoicingMethod', 'alpha');\n$step = GETPOST('step', 'alpha');\n$ts2Invoice = GETPOST('ts2Invoice', 'alpha');\n$tsNotInvoiced = GETPOST('tsNotInvoiced', 'alpha');\n$userid = is_object($user)?$user->id:$user;\n//init handling object\n$form = new Form($db);\n$dateStart = strtotime(GETPOST('dateStart', 'alpha'));\n$dateStartday = GETPOST('dateStartday', 'int');// to not look for the date if action not goTodate\n$dateStartmonth = GETPOST('dateStartmonth', 'int');\n$dateStartyear = GETPOST('dateStartyear', 'int');\n$dateStart = parseDate($dateStartday, $dateStartmonth, $dateStartyear, $dateStart);\n$dateEnd = strtotime(GETPOST('dateEnd', 'alpha'));\n$dateEndday = GETPOST('dateEndday', 'int');// to not look for the date if action not goTodate\n$dateEndmonth = GETPOST('dateEndmonth', 'int');\n$dateEndyear = GETPOST('dateEndyear', 'int');\n$dateEnd = parseDate($dateEndday, $dateEndmonth, $dateEndyear, $dateEnd);\n$invoicabletaskOnly = GETPOST('invoicabletaskOnly', 'int');\nif ($user->rights->facture->creer && hasProjectRight($userid, $projectId)) {\n    if ($projectId>0)$staticProject->fetch($projectId);\n    if ($socid == 0 || !is_numeric($socid))$socid = $staticProject->socid;\n$edit = 1;\n// avoid SQL issue\nif (empty($dateStart) || empty($dateEnd) ||$dateStart == $dateEnd) {\n    $step = 0;\n    $dateStart = strtotime(\"first day of previous month\", time());\n    $dateEnd = strtotime(\"last day of previous month\", time());\n}\n $langs->load(\"main\");\n$langs->load(\"projects\");\n$langs->load('timesheet@timesheet');\n//steps\n    switch($step) {\n        case 2:{\n           $fields = ($mode == 'user')?'fk_user':(($mode == 'taskUser')?'fk_user, fk_task':'fk_task');\n            $sql = 'SELECT  '.$fields.', SUM(tt.task_duration) as duration, ';\n            if ($db->type!='pgsql') {\n                $sql .= \" GROUP_CONCAT(tt.rowid  SEPARATOR ', ') as task_time_list\";\n            } else{\n                $sql .= \" STRING_AGG(to_char(tt.rowid, '9999999999999999'), ', ') as task_time_list\";\n            }\n             $sql .= ' From '.MAIN_DB_PREFIX.'projet_task_time as tt';\n            $sql .= ' JOIN '.MAIN_DB_PREFIX.'projet_task as t ON tt.fk_task = t.rowid';\n            if ($invoicabletaskOnly == 1)$sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'projet_task_extrafields as tske ON tske.fk_object = t.rowid ';\n            $sql .= ' WHERE t.fk_projet='.$projectId;\n                $sql .= \" AND DATE(tt.task_datehour) BETWEEN '\".$db->idate($dateStart);\n                $sql .= \"' AND '\".$db->idate($dateEnd).\"'\";\n             if ($invoicabletaskOnly == 1)$sql .= ' AND tske.invoiceable = \\'1\\'';\n            if ($ts2Invoice!='all') {\n                /*$sql .= ' AND tt.rowid IN(SELECT GROUP_CONCAT(fk_project_s SEPARATOR \", \")';\n                $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_time_approval';\n                $sql .= ' WHERE status = \"APPROVED\" AND MONTH(date_start)='.$month;\n                $sql .= ' AND YEAR(date_start) = \"'.$year.'\")';\n                $sql .= ' AND YEAR(date_start) = \"'.$year.'\")';*/\n                $sql .= ' AND tt.status = '.APPROVED;\n            }\n            if ($tsNotInvoiced == 1) {\n                $sql .= ' AND tt.invoice_id IS NULL';\n            }\n            $sql .= ' GROUP BY '.$fields;\n            dol_syslog('timesheet::timesheetProjectInvoice step2', LOG_DEBUG);\n            $Form = '<form name = \"settings\" action=\"?step=3\" method = \"POST\" >'.\"\\n\\t\";\n            $Form .= '<input type = \"hidden\" name = \"propalid\" value = \"'.$propalId.'\">';\n            $Form .= '<input type = \"hidden\" name = \"projectid\" value = \"'.$projectId.'\">';\n            $Form .= '<input type = \"hidden\" name = \"dateStart\" value = \"'.dol_print_date($dateStart, 'dayxcard').'\">';\n            $Form .= '<input type = \"hidden\" name = \"dateEnd\" value = \"'.dol_print_date($dateEnd, 'dayxcard').'\">';\n            $Form .= '<input type = \"hidden\" name = \"socid\" value = \"'.$socid.'\">';\n            $Form .= '<input type = \"hidden\" name = \"invoicingMethod\" value = \"'.$mode.'\">';\n            $Form .= '<input type = \"hidden\" name = \"ts2Invoice\" value = \"'.$ts2Invoice.'\">';\n            $Form .= '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n\n            $resql = $db->query($sql);\n            $num = 0;\n            $resArray = array();\n            if ($resql) {\n                $num = $db->num_rows($resql);\n                $i = 0;\n                // Loop on each record found,\n                while($i < $num)\n                {\n                    $error = 0;\n                    $obj = $db->fetch_object($resql);\n                    $duration = floor($obj->duration/3600).\":\".str_pad(floor($obj->duration%3600/60), 2, \"0\", STR_PAD_LEFT);\n                    switch($mode) {\n                        case 'user':\n                             //step 2.2 get the list of user  (all or approved)\n                            $resArray[] = array(\"USER\" => $obj->fk_user, \"TASK\" => 'any', \"DURATION\"=>$duration, 'LIST'=>$obj->task_time_list);\n                            break;\n                        case 'taskUser':\n                             //step 2.3 get the list of taskUser  (all or approved)\n                            $resArray[] = array(\"USER\" => $obj->fk_user, \"TASK\" =>$obj->fk_task, \"DURATION\"=>$duration, 'LIST'=>$obj->task_time_list);\n                            break;\n                        default:\n                        case 'task':\n                             //step 2.1 get the list of task  (all or approved)\n                            $resArray[] = array(\"USER\" => \"any\", \"TASK\" =>$obj->fk_task, \"DURATION\"=>$duration, 'LIST'=>$obj->task_time_list);\n                          break;\n                    }\n                    $i++;\n                }\n                $db->free($resql);\n            } else {\n                dol_print_error($db);\n                return '';\n            }\n             //FIXME asign a service + price to each array elements(or price +auto generate name\n            $Form .= '<table class = \"noborder\" width = \"100%\">'.\"\\n\\t\\t\";\n            $Form .= '<tr class = \"liste_titre\" width = \"100%\" ><th colspan = \"8\">'.$langs->trans('invoicedServiceSelectoin').'</th><th>';\n            $Form .= '<tr class = \"liste_titre\" width = \"100%\" ><th >'.$langs->trans(\"User\").'</th>';\n            $Form .= '<th >'.$langs->trans(\"Task\").'</th><th >'.$langs->trans(\"Service\").':'.$langs->trans(\"Existing\").\"/\".$langs->trans(\"Custom\").'</th>';\n            $Form .= '<th >'.$langs->trans(\"Custom\").':'.$langs->trans(\"Description\").'</th><th >'.$langs->trans(\"Custom\").':'.$langs->trans(\"UnitPriceHT\").'</th>';\n            $Form .= '<th >'.$langs->trans(\"Custom\").':'.$langs->trans(\"VAT\").'</th><th >'.$langs->trans(\"unitDuration\").'</th><th >'.$langs->trans(\"savedDuration\").'</th>';\n            $form = new Form($db);\n            $otherchoices = array('-999'=> $langs->transnoentities('not2invoice'),\n                     '-998' => $langs->transnoentities('never2invoice'));\n            if ($propalId > 0){\n                require_once DOL_DOCUMENT_ROOT.\"/comm/propal/class/propal.class.php\";\n                $propal = new Propal($db);\n                $propal->fetch($propalId);\n                $propal->fetch_lines();\n                foreach($propal->lines as $lid => $line){\n                    if($line->product_type == 1){\n                        if ($line->fk_product) $line->label = getproductlabel($line->fk_product);\n                        $otherchoices[-$lid] = $langs->transnoentities('Proposal').\":\".$line->label;\n                    }\n                }\n            }\n        \n            foreach ($resArray as $res) {\n                $Form .= htmlPrintServiceChoice($res[\"USER\"], $res[\"TASK\"], 'oddeven', $res[\"DURATION\"], $res['LIST'], $mysoc, $socid, $otherchoices);\n            }\n            $Form .= '</table>';\n            $Form .= '<input type = \"submit\"  class = \"butAction\" value = \"'.$langs->trans('Next').\"\\\">\\n</form>\";\n             break;}\n        case 3: // review choice and list of item + quantity(editable)\n            require_once DOL_DOCUMENT_ROOT . '/compta/facture/class/facture.class.php';\n            require_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n            $object = new Facture($db);\n            $db->begin();\n            $error = 0;\n            $dateinvoice = time();\n                    //$date_pointoftax = dol_mktime(12, 0, 0, $_POST['date_pointoftaxmonth'], $_POST['date_pointoftaxday'], $_POST['date_pointoftaxyear']);\n                            // Si facture standard\n            $object->socid = $socid;\n            $object->type = 0;//Facture::TYPE_STANDARD;\n            $object->date = $dateinvoice;\n            $object->fk_project = $projectId;\n            $object->fetch_thirdparty();\n            if ($propalId > 0){\n                $object->origin = 'propal';\n                $object->origin_id = $propalId;\n                $object->linked_objects[$object->origin] = $object->origin_id;\n            }\n            //origin=propal&originid=34&socid=10\n            $id = $object->create($user);\n            $resArray = $_POST['userTask'];\n            $hoursPerDay = $conf->global->TIMESHEET_DAY_DURATION;\n            $task_time_array = array();\n            $task_time_array_never = array();\n                // copy the propal lines\n            $lineCount = 0; \n            // id -> db id\n            $propallines = []; \n            \n            if ( $propalId > 0) { // PROPAL\n                \n                require_once DOL_DOCUMENT_ROOT.\"/comm/propal/class/propal.class.php\";\n                $propal = new Propal($db);\n                $propal->id= $propalId;\n                $propal->fetch_lines();\n                foreach($propal->lines as $lid => $line){\n                    $label = (!empty($line->label) ? $line->label : '');\n\t\t\t\t\t$desc = (!empty($line->desc) ? $line->desc : $line->libelle);\n                    $lineCount ++; \n                    $product_type = ($line->product_type ? $line->product_type : 0);\n                    // Date start\n                    $date_start = false;\n                    if ($line->date_debut_prevue) {\n                        $date_start = $line->date_debut_prevue;\n                    }\n                    if ($line->date_debut_reel) {\n                        $date_start = $line->date_debut_reel;\n                    }\n                    if ($line->date_start) {\n                        $date_start = $line->date_start;\n                    }\n\n                    // Date end\n                    $date_end = false;\n                    if ($line->date_fin_prevue) {\n                        $date_end = $line->date_fin_prevue;\n                    }\n                    if ($line->date_fin_reel) {\n                        $date_end = $line->date_fin_reel;\n                    }\n                    if ($line->date_end) {\n                        $date_end = $line->date_end;\n                    }\n\n                    // Reset fk_parent_line for no child products and special product\n                    if (($line->product_type != 9 && empty($line->fk_parent_line)) || $line->product_type == 9) {\n                        $fk_parent_line = 0;\n                    }\n\n                    // Extrafields\n                    if (method_exists($line, 'fetch_optionals')) {\n                        $line->fetch_optionals();\n                        $array_options = $line->array_options;\n                    }\n\n                    $tva_tx = $line->tva_tx;\n                    if (!empty($line->vat_src_code) && !preg_match('/\\(/', $tva_tx)) {\n                        $tva_tx .= ' ('.$line->vat_src_code.')';\n                    }\n\n                    // View third's localtaxes for NOW and do not use value from origin.\n                    // TODO Is this really what we want ? Yes if source is template invoice but what if proposal or order ?\n                    $localtax1_tx = get_localtax($tva_tx, 1, $object->thirdparty);\n                    $localtax2_tx = get_localtax($tva_tx, 2, $object->thirdparty);\n\n                    $result = 0;\n                    $postdata['prod_entry_mode'] = 'predef';\n                    $postdata['dp_desc'] = $desc;\n                    $postdata['tva_tx'] = $$tva_tx;\n                    $postdata['price_ht'] =$line->total_ht;\n                    $postdata['qty'] = (float) $line->qty;                      \n                    if (!$conf->global->TIMESHEET_EVAL_ADDLINE){\n                        $result = $object->addline(\n                            $desc,\n                            $line->subprice,\n                            $line->qty,\n                            $tva_tx,\n                            $localtax1_tx,\n                            $localtax2_tx,\n                            $line->fk_product,\n                            $line->remise_percent,\n                            $date_start,\n                            $date_end,\n                            0,\n                            $line->info_bits,\n                            $line->fk_remise_except,\n                            'HT',\n                            0,\n                            $product_type,\n                            $line->rang,\n                            $line->special_code,\n                            $object->origin,\n                            $line->rowid,\n                            $fk_parent_line,\n                            $line->fk_fournprice,\n                            $line->pa_ht,\n                            $label,\n                            $array_options,\n                            $line->situation_percent,\n                            $line->fk_prev_id,\n                            $line->fk_unit\n                        );  \n                    }else{\n                        $post_temp = $_POST;\n                        $_POST = $postdata;\n                        ob_start();\n                        eval($invoicecard);\n                        ob_end_clean();\n                        $_POST = $post_temp;\n                        $result = get_lastest_id('facture_fourn_det');\n                    }\n                    if ($result>0)$propallines[$lineCount] = $result;\n                }                                \n            }\n            \n            if ($id > 0  && is_array($resArray)) {\n                $db->commit();\n                $invoicecard = str_replace(\n                                array(\"require '../../main.inc.php';\",\"<?php\",\"\\$db->close();\"),\n                                \"\",\n                                file_get_contents(DOL_DOCUMENT_ROOT.'/compta/facture/card.php'));\n                foreach ($resArray as $uId => $userTaskService) {\n                        //$userTaskService[$user][$task] = array('duration', 'VAT', 'Desc', 'PriceHT', 'Service', 'unit_duration', 'unit_duration_unit');\n                    if (is_array($userTaskService))foreach ($userTaskService as  $tId => $service) {\n                         \n                        $durationTab = explode(':', $service['duration']);\n                        $duration = $durationTab[1]*60 + $durationTab[0]*3600;\n                        //$startday = dol_mktime(12, 0, 0, $month, 1, $year);\n                        //$endday = dol_mktime(12, 0, 0, $month, date('t', $startday), $year);\n                        $details = '';\n                        $result = 0;\n                        $factor = 1;\n                        $unit_duration_unit = $service['unit_duration_unit'];\n                        switch($unit_duration_unit){\n                            case 'h':\n                                $unit_factor = 3600;\n                            break;\n                            case 'i':\n                                $unit_factor = 60;\n                            break;\n                            case 's':\n                                $unit_factor = 1;\n                            break;\n                            case 'w':\n                                $unit_factor = 3600 * $hoursPerDay * 5;\n                            break;\n                            case 'm':\n                                $unit_factor = 3600 * $hoursPerDay * 65 / 3;\n                            break;\n                            case 'y':\n                                $unit_factor = 3600 * $hoursPerDay * 260;\n                            break;\n                            case 'l':\n                                $unit_factor = $duration;\n                            case 'd':\n                            default:\n                                $unit_factor = $hoursPerDay * 3600;\n                        }\n                        if (($tId!='any') && $conf->global->TIMESHEET_INVOICE_SHOW_TASK)$details = \"\\n\".$service['taskLabel'];\n                        if (($uId!='any')&& $conf->global->TIMESHEET_INVOICE_SHOW_USER)$details .= \"\\n\".$service['userName'];\n                        //prepare the CURL params\n                        $postdata = array();\n                        $postdata['action'] = 'addline';\n                        $postdata['id'] = $object->id;\n                        $postdata['date_startday'] = date('d', $dateStart);\n                        $postdata['date_startmonth'] = date('m', $dateStart);\n                        $postdata['date_startyear'] = date('Y', $dateStart);\n                        $postdata['date_endday'] = date('d', $dateEnd);\n                        $postdata['date_endmonth'] = date('m', $dateEnd);\n                        $postdata['date_endyear'] = date('Y', $dateEnd);\n                        $postdata['addline']='Add';\n                        if ($service['Service'] > 0) {\n                            \n                            $localtax1_tx = get_localtax($service['VAT'], 1, $object->thirdparty);\n                            $localtax2_tx = get_localtax($service['VAT'], 2, $object->thirdparty);\n                            $product = new Product($db);\n                            $product->fetch($service['Service']);\n                            if ($object->thirdparty->default_lang != '' && is_array($product->multilangs[$object->thirdparty->default_lang]))\n                            {\n                                $desc = $product->multilangs[$object->thirdparty->default_lang]['description'];\n                                $label = $product->multilangs[$object->thirdparty->default_lang]['label'];\n                            }else{\n                                $desc = $product->description;\n                                $label = $product->label;\n                            }\n                            $factor = intval(substr($product->duration, 0, -1));\n                            if ($factor == 0) $factor = 1;//to avoid divided by $factor0                         \n                            $quantity = ($duration == $factor*$unit_factor) ? 1 :\n                                round($duration/($factor*$unit_factor), $conf->global->TIMESHEET_ROUND);\n                            $postdata['type'] = -1;\n                            $postdata['prod_entry_mode'] = 'predef';\n                            $postdata['idprod'] = $service['Service'];\n                            $postdata['qty'] = (float) $quantity;\n            \n\n\n                            $prices =  $product->getSellPrice( $mysoc,$object->thirdparty);\n                            $price_base_type = $prices['price_base_type'];\n                            $price_ttc = $prices['pu_ttc'];\n                            $tva_tx = $prices['tva_tx'];\n                            $price = $prices['pu_ht'];\n\n\n                            if (!$conf->global->TIMESHEET_EVAL_ADDLINE){\n                                $result = $object->addline($product->description.$details, $price, $quantity, $tva_tx, \n                                    $localtax1_tx, $localtax2_tx, $service['Service'], 0, $dateStart, $dateEnd, 0, 0, '', \n                                    $price_base_type, $price_ttc, $product->type, -1, 0, '', 0, 0, null, 0, $label, 0, 100, '', \n                                    $product->fk_unit);\n                            }else{\n                                $result = $lineCount;\n                            }\n                            $lineCount ++;\n                        } elseif ($service['Service'] > -997) { // propal\n                            if(isset($task_time_array[$propallines[-$service['Service']]])){\n                                $task_time_array[$propallines[-$service['Service']]] .= \",\".$service['taskTimeList'];\n                            }else{\n                                $task_time_array[$propallines[-$service['Service']]] = $service['taskTimeList'];\n                            }\n                        } elseif ($service['Service'] == -997) { // customized service\n                            \n                            $localtax1_tx = get_localtax($service['VAT'], 1, $object->thirdparty);\n                            $localtax2_tx = get_localtax($service['VAT'], 2, $object->thirdparty);\n                            $factor = intval($service['unit_duration']);\n                            $quantity = ($duration == $factor*$unit_factor) ? 1 :\n                                round($duration/($factor*$unit_factor), $conf->global->TIMESHEET_ROUND);                            \n                            $postdata['type'] = 1;\n                            $postdata['prod_entry_mode'] = 'free';\n                            $postdata['dp_desc'] = $service['Desc'];\n                            $postdata['tva_tx'] = $service['VAT'];\n                            $postdata['price_ht'] = $service['PriceHT'];\n                            $postdata['qty'] = (float) $quantity;\n                            if (!$conf->global->TIMESHEET_EVAL_ADDLINE){\n                                $result = $object->addline($service['Desc'].$details, $service['PriceHT'], \n                                    $quantity, $service['VAT'], $localtax1_tx, $localtax2_tx, '', \n                                    0, $dateStart, $dateEnd, 0, 0, '', 'HT', '', 1, -1, 0, '', \n                                    0, 0, null, 0, '', 0, 100, '', '');\n                            }else {\n                                $result = get_lastest_id('facture_fourn_det');\n                            }\n       \n                            $lineCount ++;\n                        }elseif ($service['Service'] == -998){ // never invoice\n                            $task_time_array_never[] = $service['taskTimeList']; \n                        }\n                        //add_invoice_line($postdata);\n                        \n                        \n                        //eval used instead of include because the main.in.php cannot be included twice so it had to be removed from\n                        if ($conf->global->TIMESHEET_EVAL_ADDLINE){\n                            $post_temp = $_POST;\n                            $_POST = $postdata;\n                            ob_start();\n                            eval($invoicecard);\n                            ob_end_clean();\n                            $_POST = $post_temp;\n                        }\n                        // set the taskTimeList to be updated in case of success of the invoice add line\n                        if ($service['taskTimeList'] != '' && ($result>0  )){\n                            $task_time_array[$result] = $service['taskTimeList'];\n                        }\n                    } else $error++;\n                }\n\n\n                // End of object creation, we show it\n                if (1) {\n                    if (version_compare(DOL_VERSION, \"4.9.9\") >= 0) {\n                        foreach ($task_time_array AS $idLine => $task_time_list) {\n                                //dol_syslog(\"ProjectInvoice::setnvoice\".$idLine.' '.$task_time_list, LOG_DEBUG);\n                            Update_task_time_invoice($id, $idLine, $task_time_list);\n                        }\n                        foreach ($task_time_array_never AS $idLine => $task_time_list) {\n                            //dol_syslog(\"ProjectInvoice::setnvoice\".$idLine.' '.$task_time_list, LOG_DEBUG);\n                        Update_task_time_invoice(-1, -1, $task_time_list);\n                    }\n                    }\n                    ob_start();\n                    header('Location: ' . $object->getNomUrl(0, '', 0, 1, ''));\n                    ob_end_flush();\n                    exit();\n                }\n            } else {\n                $db->rollback();\n                //header('Location: ' . $_SERVER[\"PHP_SELF\"] . '?step=0');\n                setEventMessages($object->error, $object->errors, 'errors');\n            }\n\n           \n            break;\n        case 1:\n            $edit = 0;\n        case 0:\n        default:\n            require_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\n            $htmlother = new FormOther($db);\n            $sqlTail = '';\n            //if (!$user->admin) {\n            //    $sqlTailJoin = ' JOIN '.MAIN_DB_PREFIX.'element_contact AS ec ON t.rowid = element_id ';\n            //    $sqlTailJoin .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON ctc.rowid = ec.fk_c_type_contact';\n            //    $sqlTailWhere = ' ((ctc.element in (\\'project_task\\') AND ctc.code LIKE \\'%EXECUTIVE%\\')OR (ctc.element in (\\'project\\') AND ctc.code LIKE \\'%LEADER%\\')) AND ctc.active = \\'1\\'  ';\n            //    $sqlTailWhere .= ' AND fk_socpeople = \\''.$userid.'\\' and t.fk_statut = \\'1\\'';\n            //}\n            $Form = '<form name = \"settings\" action=\"?step=2\" method = \"POST\" >'.\"\\n\\t\";\n            $Form .= '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n            $Form .= '<table class = \"noborder\" width = \"100%\">'.\"\\n\\t\\t\";\n            $Form .= '<tr class = \"liste_titre\" width = \"100%\" ><th colspan = \"2\">'\n                .$langs->trans('generalInvoiceProjectParam').'</th></tr>';\n            $invoicingMethod = $conf->global->TIMESHEET_INVOICE_METHOD;\n            //$Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'.$langs->trans('Project').'</th><th align = \"left\" width = \"80%\" >';\n            //select_generic($table, $fieldValue, $htmlName, $fieldToShow1, $fieldToShow2 = '', $selected = '', $separator = ' - ', $sqlTailWhere = '', $selectparam = '', $addtionnalChoices = array('NULL' => 'NULL'), $sqlTailTable = '', $ajaxUrl = '')\n            //$ajaxNbChar = $conf->global->PROJECT_USE_SEARCH_TO_SELECT;\n            //$Form .= select_generic('projet', 'rowid', 'projectid', 'ref', 'title', $projectId, ' - ', $sqlTailWhere, '', null, , $ajaxNbChar);\n            //$htmlProjectArray = array('name' => 'projectid', 'ajaxNbChar'=>$ajaxNbChar, 'otherparam' => ' onchange = \"reload(this.form)\"');\n            //$sqlProjectArray = array('table' => 'projet', 'keyfield' => 't.rowid', 'fields' => 't.ref, t.title ', 'join'=>$sqlTailJoin, 'where'=>$sqlTailWhere, 'separator' => ' - ');\n            //$Form .= select_sellist($sqlProjectArray, $htmlProjectArray, $projectId);\n            $Form .= '<input type = \"hidden\" name = \"projectid\" value = \"'.$projectId.'\">';\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                .$langs->trans('DateStart').'</th>';\n            $Form .= '<th align = \"left\" width = \"80%\">'\n                .$form->select_date($dateStart, 'dateStart', 0, 0, 0, \"\", 1, 1, 1).\"</th></tr>\";\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                .$langs->trans('DateEnd').'</th>';\n            $Form .= '<th align = \"left\" width = \"80%\">'\n                .$form->select_date($dateEnd, 'dateEnd', 0, 0, 0, \"\", 1, 1, 1).\"</th></tr>\";\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                .$langs->trans('invoicingMethod').'</th><th align = \"left\"><input type = \"radio\" '\n                .'name = \"invoicingMethod\" value = \"task\" ';\n            $Form .= ($invoicingMethod == \"task\"?\"checked\":\"\").'> '.$langs->trans(\"Tasks\").'<br> ';\n            $Form .= '<input type = \"radio\" name = \"invoicingMethod\" value = \"user\" ';\n            $Form .= ($invoicingMethod == \"user\"?\"checked\":\"\").'> '.$langs->trans(\"User\").\"<br> \";\n            $Form .= '<input type = \"radio\" name = \"invoicingMethod\" value = \"taskUser\" ';\n            $Form .= ($invoicingMethod == \"taskUser\"?\"checked\":\"\").'> '.$langs->trans(\"Tasks\").' & '\n                .$langs->trans(\"User\").\"</th></tr>\\n\\t\\t\";\n    //cust list\n            $Form .= '<tr class = \"oddeven\"><th  align = \"left\">'.$langs->trans('Customer')\n                .'</th><th  align = \"left\">'.$form->select_company($socid, 'socid', \n                    '(s.client = 1 OR s.client = 2 OR s.client = 3)', 1).'</th></tr>';\n    //propal\n   \n        if ($conf->global->MAIN_MODULE_PROPALE){\n            //http://localhost:18080/compta/facture/card.php?action=create&origin=propal&originid=34&socid=10\n            $joinPropal = ' JOIN '.MAIN_DB_PREFIX.'c_stcomm as stp ON fk_statut = stp.id and stp.active = 1 ';\n            $sqlPropal = array('table' => 'propal' , 'keyfield' => 't.rowid', \n                'fields' => 't.ref, stp.libelle', 'join' => $joinPropal , \n                'where' => $socid?('t.fk_soc = '.$socid):'1 = 2', 'tail' => '');\n            $htmlPropal = array('name' => 'propalid', 'class' => 'not_mandatory', 'otherparam' => '', \n                'ajaxNbChar' => '', 'separator' => ' - ');\n            $addChoices = null;\n            $Form .= '<tr class = \"oddeven\"><th  align = \"left\">'.$langs->trans('Propal').'</th><th>';\n            $Form .= select_sellist($sqlPropal, $htmlPropal, '', $addChoices ).'</th></tr>';\n        }\n        $Form .= '\n        <script type = \"text/javascript\">\n            $(\"#socid\").on(\"select2:select\", function (e) {\n                var param_array = window.location.href.split(\\'?\\')[1].split(\\'&\\');\n                var index;\n                var id = \"\";\n                for(index = 0;index < param_array.length;++index)\n                {\n                    x = param_array[index].split(\\'=\\');\n                    if (x[0] == \"projectid\") {\n                        id = \"projectid=\"+x[1];\n                    }\n\n                }\n                var socSelect = e.params.data;\n                var soc =  socSelect.id;\n                var socElement = document.getElementById(\"socid\");\n                var socOld = (typeof(socElement.defaultSelected) === \\'undefined\\')?0:socElement.defaultSelected ;\n                var dateStartday = \"&dateStartday=\"+document.getElementById(\"dateStartday\").value;\n                var dateStartmonth = \"&dateStartmonth=\"+document.getElementById(\"dateStartmonth\").value;\n                var dateStartyear = \"&dateStartyear=\"+document.getElementById(\"dateStartyear\").value;\n\n                var dateEndday = \"&dateEndday=\"+document.getElementById(\"dateEndday\").value;\n                var dateEndmonth = \"&dateEndmonth=\"+document.getElementById(\"dateEndmonth\").value;\n                var dateEndyear = \"&dateEndyear=\"+document.getElementById(\"dateEndyear\").value;\n                \n                if ( soc != null && soc != socOld){\n                    self.location = \"'.$PHP_SELF\n                        .'?\" + id  + \"&socid=\" + soc +  dateStartday + dateStartmonth + '\n                        .'dateStartyear + dateEndday + dateEndmonth + dateEndyear;\n                }\n            });\n         </script>';\n    \n     //all ts or only approved\n           $ts2Invoice = $conf->global->TIMESHEET_INVOICE_TASKTIME;\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                .$langs->trans('TimesheetToInvoice').'</th><th align = \"left\">'\n                .'<input type = \"radio\" name = \"ts2Invoice\" value = \"approved\" ';\n            $Form .= ($ts2Invoice == \"approved\"?\"checked\":\"\").'> '\n                .$langs->trans(\"approvedOnly\").' <br>';\n            $Form .= '<input type = \"radio\" name = \"ts2Invoice\" value = \"all\" ';\n            $Form .= ($ts2Invoice == \"all\"?\"checked\":\"\").'> '\n                .$langs->trans(\"All\").\"</th></tr>\";\n    // not alreqdy invoice\n            if (version_compare(DOL_VERSION, \"4.9.9\") >= 0) {\n                    $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'\n                        .$langs->trans('TimesheetNotInvoiced');\n                    $Form .= '</th><th align = \"left\">'\n                        .'<input type = \"checkbox\" name = \"tsNotInvoiced\" value = \"1\" ></th></tr>';\n            } else{\n                $Form .= '<input type = \"hidden\" name = \"tsNotInvoiced\" value = \"0\">';\n            }\n            //$invoicabletaskOnly\n            $Form .= '<tr class = \"oddeven\"><th align = \"left\" width = \"80%\">'.$langs->trans('InvoicableOnly');\n            $Form .= '</th><th align = \"left\"><input type = \"checkbox\" name = \"invoicabletaskOnly\" value = \"1\" '\n                .(($invoicabletaskOnly == 1)?'checked':'').' ></th></tr>';\n            $Form .= '</table>';\n            $Form .= '<input type = \"submit\" onclick = \"return checkEmptyFormFields(event,\\'settings\\',\\'';\n            $Form .= addslashes($langs->trans(\"pleaseFillAll\")).'\\')\" class = \"butAction\" value = \"'\n                .$langs->trans('Next').\"\\\">\\n</from>\";\n           // if ($ajaxNbChar >= 0) $Form .= \"\\n<script type = 'text/javascript'>\\n$('input#Project').change(function() {\\nif($('input#search_Project').val().length>2)reload($(this).form)\\n;});\\n</script>\\n\";\n            break;\n    }\n} else {\n    $accessforbidden = accessforbidden(\"you don't have enough rights to see this page\");\n}\n/***************************************************\n* VIEW\n*\n* Put here all code to build page\n****************************************************/\n$morejs = array(\"/timesheet/core/js/jsparameters.php\", \n    \"/timesheet/core/js/timesheet.js?\".$conf->global->TIMESHEET_VERSION);\nllxHeader('', $langs->trans('TimesheetToInvoice'), '', '', '', '', $morejs);\nprint \"<div> <!-- module body-->\";\n$project = new Project($db);\n$project->fetch($projectId);\n$headProject = project_prepare_head($project);\ndol_fiche_head($headProject, 'invoice', $langs->trans(\"Project\"), 0, 'project');\n\n// Load object\nif ($projectId > 0 || !empty($ref))\n{\n\t$ret = $project->fetch($projectId, $ref); // If we create project, ref may be defined into POST but record does not yet exists into database\n\tif ($ret > 0) {\n\t\t$project->fetch_thirdparty();\n\t\tif (!empty($conf->global->PROJECT_ALLOW_COMMENT_ON_PROJECT) && method_exists($project, 'fetchComments') && empty($project->comments)) $project->fetchComments();\n\t\t$id = $project->id;\n\t}\n}\n$ref = GETPOST('ref', 'alpha');\n$linkback = '<a href=\"'.DOL_URL_ROOT.'/projet/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\n$morehtmlref = '<div class=\"refidno\">';\n// Title\n$morehtmlref .= $project->title;\n// Thirdparty\nif ($project->thirdparty->id > 0)\n{\n    $morehtmlref .= '<br>'.$langs->trans('ThirdParty').' : '.$project->thirdparty->getNomUrl(1, 'project');\n}\n$morehtmlref .= '</div>';\n\ndol_banner_tab($project, 'projectid', $linkback, ($user->socid ? 0 : 1), 'ref','ref',$morehtmlref);\nprint '<div class=\"underbanner clearboth\"></div>';\n\ndol_fiche_end();\n\nprint $Form;\n//javascript to reload the page with the poject selected\n/*print '\n<SCRIPT type = \"text/javascript\">\nfunction reload(form)\n{\n    var pjt = document.getElementById(\"projectid\").value;\n    self.location=\"?projectid=\" + pjt ;\n}\n</script>';*/\nllxFooter();\n$db->close();\n/***************************************************\n* FUNCTIONS\n*\n* Put here all code of the functions\n****************************************************/\n/** Function to print the line to chose between a predefined service or an ad-hoc one\n *\n * @global object $form form object\n * @global objec $langs lang object\n * @global object $conf  conf object\n * @param int $user  userid on which the time was spent\n * @param int $task  Taskid on which the time was spent\n * @param string $class     html class\n * @param int $duration     duration of the time spend\n * @param string $tasktimelist list of the tasktimespendid on which the time was spent\n * @param type $seller  Seller id to calculate VAT\n * @param type $buyer   buyer id to calculate VAT\n * @param array(id=> desc) otherchoice\n * @return string   HTML code\n */\nfunction htmlPrintServiceChoice($user, $task, $class, $duration, $tasktimelist, $seller, $buyer, $addchoices)\n{\n    global $form, $langs, $conf, $db;\n    $taskLabel = '';\n    $userName = ($user == 'any')?\n        (' - '):print_generic('user', 'rowid', $user, 'lastname', 'firstname', ' ');\n    if ($task == 'any'){\n        $taskLabel = ' - ';\n        $taskHTML = ' - ';\n    } else {\n        require_once DOL_DOCUMENT_ROOT.'/projet/class/task.class.php';\n        $objtemp = new Task($db);\n        $objtemp->fetch($task);\n        $taskLabel = $objtemp->label ;\n        $taskHTML .= str_replace('classfortooltip', 'classfortooltip colTasks', \n            $objtemp->getNomUrl(0, \"withproject\", \"task\", $conf->global->TIMESHEET_HIDE_REF));\n    }\n\n    $html = '<tr class = \"'.$class.'\"><th align = \"left\" width = \"20%\">'.$userName;\n    $html .= '</th><th align = \"left\" width = \"20%\">'.$taskHTML;\n    $html .= '<input type = \"hidden\"   name = \"userTask['.$user.']['.$task.'][userName]\" value = \"'.$userName.'\">';\n    $html .= '<input type = \"hidden\"   name = \"userTask['.$user.']['.$task.'][taskLabel]\"  value = \"'. $taskLabel.'\">';\n    $html .= '<input type = \"hidden\"   name = \"userTask['.$user.']['.$task.'][taskTimeList]\"  value = \"'. $tasktimelist.'\">';\n    $defaultService = getDefaultService($user, $task);\n    $addchoices[-997] = $langs->transnoentities('Custom').': '.$taskLabel;\n    $ajaxNbChar = $conf->global->PRODUIT_USE_SEARCH_TO_SELECT;\n    $html .= '</th><th >';\n    $html .= select_sellist(array('table' => 'product', \n        'keyfield' => 'rowid', 'fields' => 'ref,label', \n        'where' => ' tosell = 1 AND fk_product_type = 1'),\n        array('name' => 'userTask['.$user.']['.$task.'][Service]',  'separator' => ' - '),\n                $defaultService,  $addchoices);\n    $html .= '</th>';\n    $unitValue = '0.0';\n    if (($user>0)){ // if the is no defaulf service, use the thm if available, if not use the tjm\n        $curUser = new User($db);\n        $curUser->fetch($user);\n        if ($curUser->thm)$unitValue = $curUser->thm;\n        else if ($curUser->tjm)$unitValue = $curUser->tjm;\n    }\n\n    $html .= '<th ><input type = \"text\"  size = \"30\" name = \"userTask['\n        .$user.']['.$task.'][Desc]\" ></th>';\n    $html .= '<th><input type = \"text\"  size = \"6\" name = \"userTask['\n        .$user.']['.$task.'][PriceHT]\" value=\"'.number_format($unitValue,2).'\" ></th>';\n    //$html .= '<th><input type = \"text\" size = \"6\" name = \"userTask['.$user.']['.$task.'][\"VAT\"]\" ></th>';\n    $html .= '<th>'.$form->load_tva('userTask['.$user.']['.$task.'][VAT]', \n        -1, $seller, $buyer, 0, 0, '', false, 1).'</th>';\n    $html .= '<th><input type = \"text\" size = \"2\" maxlength = \"2\" name = \"userTask['\n        .$user.']['.$task.'][unit_duration]\" value = \"1\" >';\n    $html .= '<br><input name = \"userTask['.$user.']['\n        .$task.'][unit_duration_unit]\" type = \"radio\" value = \"h\" '\n        .(($conf->global->TIMESHEET_TIME_TYPE == \"days\")?'':'checked').' />'.$langs->trans('Hour');\n    $html .= '<br><input name = \"userTask['\n        .$user.']['.$task.'][unit_duration_unit]\" type = \"radio\" value = \"d\" '\n        .(($conf->global->TIMESHEET_TIME_TYPE == \"days\")?'checked':'').' />'.$langs->trans('Days');\n    $html .= '<br><input name = \"userTask['\n        .$user.']['.$task.'][unit_duration_unit]\" type = \"radio\" value = \"l\"/>'.$langs->trans('Lumpsum').'</th>';\n    $html .= '<th><input type = \"text\" size = \"2\" onkeypress=\"return regexEvent(this,event,\\'timeChr\\')\"'\n        .' maxlength = \"5\" name = \"userTask['.$user.']['.$task.'][duration]\" value = \"'.$duration.'\" />';\n    $html .= '</th</tr>';\n    return $html;\n}\n/**\n *\n * @global object  $db\n * @global object $conf\n * @param type $userid id of the user\n * @param type $taskid id of the tasl\n * @return int  service id\n */\nfunction getDefaultService($userid, $taskid)\n{\n    global $db, $conf;\n    $res = 0;\n    $sql = ' SELECT fk_service FROM '.MAIN_DB_PREFIX.'projet_task_extrafields WHERE fk_object = \\''.$taskid.'\\'';\n    $sql .= ' UNION ALL';\n    $sql .= ' SELECT fk_service FROM '.MAIN_DB_PREFIX.'user_extrafields WHERE fk_object = \\''.$userid.'\\'';\n    $sql .= ' LIMIT 1';\n     dol_syslog(\"ProjectInvoice::getDefaultService\", LOG_DEBUG);\n    $resql = $db->query($sql);\n    if ($db->num_rows($resql)>0) {\n        $obj = $db->fetch_object($resql);\n        $res = $obj->fk_service;\n    }\n    return($res>0)?$res:$conf->global->TIMESHEET_INVOICE_SERVICE;\n}\n/** to check who has the rights\n *\n * @global object $db database object\n * @global object $user current user connected\n * @param object $userid    user to check\n * @param int $projectid project to check\n * @return boolean  has right\n */\nfunction hasProjectRight($userid, $projectid)\n{\n    global $db, $user;\n    $res = true;\n    if ($projectid && !($user->admin)) {\n        $res = false;\n        $sql = ' SELECT ec.rowid FROM '.MAIN_DB_PREFIX.'element_contact as ec ';\n        $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON ctc.rowid = ec.fk_c_type_contact';\n        $sql .= ' WHERE element_id = \\''.$projectid;\n        $sql .= '\\' AND (ctc.element in (\\'project\\')'\n            .' AND (ctc.code LIKE \\'%LEADER%\\' OR ctc.code LIKE \\'%BILLING%\\'))'\n            .' AND ctc.active = \\'1\\'  ';\n        $sql .= ' AND fk_socpeople = \\''.$userid.'\\' ';\n        dol_syslog(\"ProjectInvoice::hasProjectRight\", LOG_DEBUG);\n        $resql = $db->query($sql);\n        if ($db->num_rows($resql))$res = true;\n    }\n    return $res;\n}\n/** update invoice number\n *\n * @global object $db\n * @param int $idInvoice id of invoice\n * @param int $idLine id of invoice line\n * @param sring $task_time_list id task separated by comma\n * @return boolean\n */\nfunction Update_task_time_invoice($idInvoice, $idLine, $task_time_list)\n{\n    global $db;\n    $res = false;\n    $sql = 'UPDATE '.MAIN_DB_PREFIX.'projet_task_time';\n    $sql .= \" SET invoice_id = '{$idInvoice}', invoice_line_id = '{$idLine}'\";\n    $sql .= \" WHERE rowid in ({$task_time_list})\";\n    dol_syslog(\"ProjectInvoice::setnvoice\", LOG_DEBUG);\n    $resql = $db->query($sql);\n    if ($db->num_rows($resql))$res = true;\n    return $res;\n}\n\n/** get the label of a product\n * @param int $productId $product Id\n * @return sting label\n */\nfunction getproductlabel($productId){\n    global $db;\n    require_once  DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n    $product = new Product($db);\n    $product->fetch($productId);\n    return $product->getNomUrl(0,'',0,-1,0);\n}\n\nfunction get_lastest_id($table, $id){\n    global $db;\n    $sql = 'SELECT TOP 1 rowid as lastid FROM'.MAIN_DB_PREFIX.$table\n        .' WHERE fk_facture_fourn ='.$id\n        .' ORDER BY rowid DESC';\n    $resql = $db->query($sql);\n    $num = 0;\n    $resArray = array();\n    if ($resql) {\n        $num = $db->num_rows($resql);\n        if($num == 1 )\n        {\n            $obj = $db->fetch_object($resql);\n            return $obj->lastid;\n        }\n    }\n    return 0;\n}", "<?php\n/*\n * Copyright (C) 2015 delcroip <patrick@pmpd.eu>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\ninclude 'core/lib/includeMain.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once './core/lib/timesheet.lib.php';\nrequire_once './class/TimesheetReport.class.php';\nrequire_once './core/modules/pdf/pdf_rat.modules.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/project.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\n//require_once DOL_DOCUMENT_ROOT.'/core/modules/export/modules_export.php';\n$htmlother = new FormOther($db);\n//$objmodelexport = new ModeleExports($db);\n$id = GETPOST('id', 'int');\n$action = GETPOST('action', 'alpha');\n//$dateStart = GETPOST('dateStart', 'alpha');\n$exportfriendly = GETPOST('exportfriendly', 'alpha');\n$optioncss = GETPOST('optioncss', 'alpha');\n$short = GETPOST('short', 'int');\n$invoicedCol = GETPOST('invoicedcol', 'int');\n\n$ungroup = GETPOST('ungroup', 'int');\n\n$mode = GETPOST('mode', 'alpha');\n\n$model = GETPOST('model', 'alpha');\nif (empty($mode)){\n    $mode = 'UTD';\n    $ungroup = $conf->global->TIMESHEET_REPORT_UNGROUP;\n    $invoicedCol = $conf->global->TIMESHEET_REPORT_INVOICED_COL;\n}\n$admin = $user->rights->projet->all->lire || $user->rights->projet->all->creer\n    || $user->rights->timesheet->report->admin;\n    if (!$user->rights->timesheet->report->project && !$admin) {\n        $accessforbidden = accessforbidden(\"You don't have the report projet or admin right\");\n    }\n\n$projectSelectedId = GETPOST('projectSelected', 'int');\n$year = GETPOST('year', 'int');\n$month = GETPOST('month', 'alpha');//strtotime(str_replace('/', '-', $_POST['Date']))\n// Load traductions files requiredby by page\n//$langs->load(\"companies\");\n//$firstDay = ($month)?strtotime('01-'.$month.'-'. $year):strtotime('first day of previous month');\n//$lastDay = ($month)?strtotime('last day of this month', $firstDay):strtotime('last day of previous month');\n\n// Load translation files required by the page\n$langs->loadLangs(\n\tarray(\n\t\t'main',\n\t\t'projects',\n\t\t'timesheet@timesheet',\n\t\t'companies',\n\t)\n);\n\n//find the right week\n$dateStart = strtotime(GETPOST('dateStart', 'alpha'));\n$dateStartday = GETPOST('dateStartday', 'int');// to not look for the date if action not goTodate\n$dateStartmonth = GETPOST('dateStartmonth', 'int');\n$dateStartyear = GETPOST('dateStartyear', 'int');\n$dateStart = parseDate($dateStartday, $dateStartmonth, $dateStartyear, $dateStart);\n$dateEnd = strtotime(GETPOST('dateEnd', 'alpha'));\n$dateEndday = GETPOST('dateEndday', 'int');// to not look for the date if action not goTodate\n$dateEndmonth = GETPOST('dateEndmonth', 'int');\n$dateEndyear = GETPOST('dateEndyear', 'int');\n$hidetab = GETPOST('hidetab', 'int');\n$reporttab = GETPOST('reporttab', 'alpha');\n$dateEnd = parseDate($dateEndday, $dateEndmonth, $dateEndyear, $dateEnd);\n$invoicabletaskOnly = GETPOST('invoicabletaskOnly', 'int');\nif (empty($dateStart) || empty($dateEnd) || empty($projectSelectedId)) {\n    $step = 0;\n    $dateStart = strtotime(\"first day of previous month\", time());\n    $dateEnd = strtotime(\"last day of previous month\", time());\n}\n$userid = is_object($user)?$user->id:$user;\n//querry to get the project where the user have priviledge;either project responsible or admin\n$sql = 'SELECT pjt.rowid, pjt.ref, pjt.title, pjt.dateo, pjt.datee FROM '.MAIN_DB_PREFIX.'projet as pjt';\nif (!$admin) {\n    $sql .= ' JOIN '.MAIN_DB_PREFIX.'element_contact AS ec ON pjt.rowid = element_id ';\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON ctc.rowid = ec.fk_c_type_contact';\n    $sql .= ' WHERE (ctc.element in (\\'project\\') AND (ctc.code LIKE \\'%LEADER%\\' OR  ctc.code LIKE \\'%BILLING%\\')) AND ctc.active = \\'1\\'  ';\n    $sql .= ' AND fk_socpeople = \\''.$userid.'\\' and fk_statut = \\'1\\'';\n    $sql .= \" AND pjt.entity IN (\".getEntity('projet').\")\";\n} else{\n    $sql .= ' WHERE fk_statut = \\'1\\' ';\n    $sql .= \" AND pjt.entity IN (\".getEntity('projet').\")\";\n}\ndol_syslog('timesheet::report::projectList ', LOG_DEBUG);\n//launch the sql querry\n$resql = $db->query($sql);\n$numProject = 0;\n$projectList = array();\nif ($resql) {\n    $numProject = $db->num_rows($resql);\n    $i = 0;\n    // Loop on each record found, so each couple (project id, task id)\n    while($i < $numProject)\n    {\n        $error = 0;\n        $obj = $db->fetch_object($resql);\n        $projectList[$obj->rowid]=array('value' => $obj->rowid, \"label\" =>  $obj->ref.' - '.$obj->title);\n        //$projectList[$obj->rowid] = new TimesheetReport($db);\n        //$projectList[$obj->rowid]->initBasic($obj->rowid, '', $obj->ref.' - '.$obj->title, $dateStart, $dateEnd, $mode, $invoicabletaskOnly);\n        $i++;\n    }\n    $db->free($resql);\n} else {\n    dol_print_error($db);\n}\n$projectIdlist = array();\n$reportName = $langs->trans('ReportProject');\nif ($projectSelectedId<>-999){\n    $projectIdlist[]=$projectSelectedId;\n    $reportName = $projectList[$projectSelectedId]['label'];\n} else {\n    $projectIdlist = array_keys($projectList);\n}\n$reportStatic = new TimesheetReport($db);\n$reportStatic->initBasic($projectIdlist, '', $reportName, $dateStart, $dateEnd, $mode, $invoicabletaskOnly,$short,$invoicedCol,$ungroup);\nif ($action == 'getpdf') {\n    $pdf = new pdf_rat($db);\n    //$outputlangs = $langs;\n    if ($pdf->writeFile($reportStatic, $langs)>0) {\n        header(\"Location: \".DOL_URL_ROOT.\"/document.php?modulepart=timesheet&file=reports/\" . dol_sanitizeFileName($reportStatic->name) . \".pdf\");\n        return;\n    }\n    ob_end_flush();\n    exit();\n} elseif ($action == 'getExport'){\n    $max_execution_time_for_export =\n        (empty($conf->global->EXPORT_MAX_EXECUTION_TIME)?\n            300:$conf->global->EXPORT_MAX_EXECUTION_TIME);    // 5mn if not defined\n    $max_time = @ini_get(\"max_execution_time\");\n    if ($max_time && $max_time < $max_execution_time_for_export)\n    {\n        @ini_set(\"max_execution_time\", $max_execution_time_for_export); // This work only if safe mode is off. also web servers has timeout of 300\n    }\n    $name = $reportStatic->buildFile($model, false);\n    if (!empty($name)){\n        header(\"Location: \".DOL_URL_ROOT.\"/document.php?modulepart=export&file=\".$name);\n        return;\n    }\n    ob_end_flush();\n    exit();\n}\n//$_SESSION[\"dateStart\"] = $dateStart ;\nllxHeader('', $langs->trans('projectReport'), '');\n\n// Load project\nif ($projectSelectedId > 0 || !empty($ref))\n{\n\t$project = new Project($db);\n\t$project->fetch($projectSelectedId);\n    if($hidetab != 1){\n\t    $headProject = project_prepare_head($project);\n\t    dol_fiche_head($headProject, 'report', $langs->trans(\"projectReport\"), -1, 'project');\n    }\n\n\t$ret = $project->fetch($projectSelectedId, $ref); // If we create project, ref may be defined into POST but record does not yet exists into database\n\tif ($ret > 0) {\n\t\t$project->fetch_thirdparty();\n\t\tif (!empty($conf->global->PROJECT_ALLOW_COMMENT_ON_PROJECT) && method_exists($project, 'fetchComments') && empty($project->comments)) $project->fetchComments();\n\t\t$id = $project->id;\n\t}\n\n\t$ref = GETPOST('ref', 'alpha');\n\t$title = $langs->trans(\"projectReport\").' - '.$project->ref.' '.$project->name;\n\tif (!empty($conf->global->MAIN_HTML_TITLE) && preg_match('/projectnameonly/', $conf->global->MAIN_HTML_TITLE) && $project->name) $title = $project->ref.' '.$project->name.' - '.$langs->trans(\"projectReport\");\n\t$help_url = \"EN:Module_Projects|FR:Module_Projets|ES:M&oacute;dulo_Proyectos\";\n\n\t$morehtmlref = '<div class=\"refidno\">';\n\t// Title\n\t$morehtmlref .= $project->title;\n\t// Thirdparty\n\tif ($project->thirdparty->id > 0)\n\t{\n\t\t$morehtmlref .= '<br>'.$langs->trans('ThirdParty').' : '.$project->thirdparty->getNomUrl(1, 'project');\n\t}\n\t$morehtmlref .= '</div>';\n\n\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/projet/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\n\tif($hidetab != 1){\n        dol_banner_tab($project, 'projectSelected', $linkback, ($user->socid ? 0 : 1), 'ref','ref',$morehtmlref);\n    }\n\n\tprint '<div class=\"underbanner clearboth\"></div>';\n\n\tdol_fiche_end();\n}\n\n$querryRes = '';\nif ($projectSelectedId   &&!empty($dateStart)) {\n    if ($exportfriendly){\n        $querryRes .= $reportStatic->getHTMLreportExport();\n    }else {\n        $querryRes .= $reportStatic->getHTMLreport($short);\n    }\n}\n\n$head = timesheet_report_prepare_head( 'project', $projectSelectedId, $hidetab );\nprint dol_get_fiche_head( $head, $reporttab, $langs->trans( 'TimeSpent' ), - 1, 'clock' );\n$form_output = '';\n\n$form_output .= '<form action=\"?action=reportproject'.(($optioncss != '')?'&amp;optioncss='.$optioncss:'').'\" method = \"POST\">\n        <table class=\"noborder\"  width=\"100%\">\n        <tr>\n        '.($hidetab == 1?'<td>'.$langs->trans('Project').'</td>':'').'\n        <td>'.$langs->trans('DateStart').'</td>\n        <td>'.$langs->trans('DateEnd').'</td>\n        <td>'.$langs->trans('Mode').'</td>\n        <td>'.$langs->trans('Options').'</td>\n        <td></td>\n        </tr>\n        <tr >';\n$token = getToken();\n$form_output .= '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n\n\nif($hidetab == 1){\n        $form_output .='<td><select  name = \"projectSelected\">';\n// select project\n    foreach ($projectList as $pjt) {\n        $form_output .= '<option value = \"'.$pjt[\"value\"].'\" '\n            .(($projectSelectedId == $pjt[\"value\"])?\"selected\":'').' >'.$pjt[\"label\"].'</option>'.\"\\n\";\n    }\n    if(count($projectList)>1){\n        $form_output .= '<option value = \"-999\" '\n        .(($projectSelectedId == \"-999\")?\"selected\":'').' >'.$langs->trans('All').'</option>'.\"\\n\";\n    }\n\n    $form_output .= '</select></td>';\n    $form_output .= '<input type = \"hidden\" name = \"hidetab\" value = 1 />';\n}else{\n    $form_output .= '<input type = \"hidden\" name = \"projectSelected\" value = \"'.$projectSelectedId.'\" />';\n\n}\n//}\n// select start date\n$form_output .= '<td>'.$form->select_date($dateStart, 'dateStart', 0, 0, 0, \"\", 1, 1, 1).\"</td>\";\n// select end date\n$form_output .= '<td>'.$form->select_date($dateEnd, 'dateEnd', 0, 0, 0, \"\", 1, 1, 1).\"</td>\";\n//$form_output .= '<td> '.$htmlother->select_month($month, 'month').' - '.$htmlother->selectyear($year, 'year', 0, 10, 3)\n// Select mode\n$form_output .= '<td><input type = \"radio\" name = \"mode\" value = \"UTD\" '.($mode == 'UTD'?'checked':'');\n$form_output .= '> '.$langs->trans('User').' / '.$langs->trans('Task').' / '.$langs->trans('Date').'<br>';\n$form_output .= '<input type = \"radio\" name = \"mode\" value = \"UDT\" '.($mode == 'UDT'?'checked':'');\n$form_output .= '> '.$langs->trans('User').' / '.$langs->trans('Date').' / '.$langs->trans('Task').'<br>';\n$form_output .= '<input type = \"radio\" name = \"mode\" value = \"DUT\" '.($mode == 'DUT'?'checked':'');\n$form_output .= '> '.$langs->trans('Date').' / '.$langs->trans('User').' / '.$langs->trans('Task').'<br>';\n\n $form_output .= '</td>';\n// select short\n$form_output .= ' <td><input type = \"checkbox\" name = \"short\" value = \"1\" ';\n$form_output .= (($short == 1)?'checked>':'>').$langs->trans('short').'</br>' ;\n// Select invoiceable only\n$form_output .= '<input type = \"checkbox\" name = \"invoicabletaskOnly\" value = \"1\" ';\n$form_output .= (($invoicabletaskOnly == 1)?'checked>':'>').$langs->trans('InvoicableOnly').'</br>';\n// Select Export friendly\n$form_output .= '<input type = \"checkbox\" name = \"exportfriendly\" value = \"1\" ';\n$form_output .= (($exportfriendly == 1)?'checked>':'>').$langs->trans('exportfriendly').'</br>';\n// Select show invoice\n$form_output .= '<input type = \"checkbox\" name = \"invoicedcol\" value = \"1\" ';\n$form_output .= (($invoicedCol == 1)?'checked>':'>'). $langs->trans('reportInvoicedCol').'</br>';\n// Select Export friendly\n$form_output .= '<input type = \"checkbox\" name = \"ungroup\" value = \"1\" ';\n$form_output .= (($ungroup == 1)?'checked>':'>').$langs->trans('reportUngroup').'</td>';\n\n $form_output .= '</tr></table>';\n\n //submit\n $model = $conf->global->TIMESHEET_EXPORT_FORMAT;\n $form_output .= '<input class = \"butAction\" type = \"submit\" value = \"'.$langs->trans('getReport').'\">';\nif (!empty($querryRes) && ($user->rights->facture->creer\n    || version_compare(DOL_VERSION, \"3.7\") <= 0))\n        $form_output .= '<a class = \"butAction\" href = \"TimesheetProjectInvoice.php?step=0&dateStart='\n            .dol_print_date($dateStart, 'dayxcard').'&invoicabletaskOnly='\n            .$invoicabletaskOnly.'&dateEnd='.dol_print_date($dateEnd, 'dayxcard')\n            .'&projectid='.$projectSelectedId.'\" >'.$langs->trans('Invoice').'</a>';\n\nif (!empty($querryRes))$form_output .=\n    '<a class = \"butAction\" href=\"?action=getpdf&dateStart='\n    .dol_print_date($dateStart, 'dayxcard').'&dateEnd='\n    .dol_print_date($dateEnd, 'dayxcard').'&projectSelected='\n    .$projectSelectedId.'&mode='.$mode.'&invoicabletaskOnly='.$invoicabletaskOnly\n    .\"&hidetab=\".$hidetab.'&ungroup='.$ungroup.'&token='.$token.'\" >'.$langs->trans('TimesheetPDF').'</a>';\nif (!empty($querryRes) && $conf->global->MAIN_MODULE_EXPORT)$form_output .=\n    '<a class = \"butAction\" href=\"?action=getExport&dateStart='\n    .dol_print_date($dateStart, 'dayxcard').'&dateEnd='\n    .dol_print_date($dateEnd, 'dayxcard').'&projectSelected='.$projectSelectedId\n    .'&mode='.$mode.'&model='.$model.'&invoicabletaskOnly='.$invoicabletaskOnly\n    .\"&hidetab=\".$hidetab.'&ungroup='.$ungroup.'&token='.$token.'\" >'.$langs->trans('Export').'</a>';\nif (!empty($querryRes))$form_output .=\n    '<a class = \"butAction\" href=\"?action=reportproject&dateStart='\n    .dol_print_date($dateStart, 'dayxcard').'&dateEnd='\n    .dol_print_date($dateEnd, 'dayxcard').'&projectSelected='.$projectSelectedId\n    .'&mode='.$mode.'&invoicabletaskOnly='.$invoicabletaskOnly\n    .\"&hidetab=\".$hidetab.'&ungroup='.$ungroup.'&token='.$token.'\" >'.$langs->trans('Refresh').'</a>';\n$form_output .= '</form>';\nif (!($optioncss != '' && !empty($_POST['userSelected']))) echo $form_output;\necho $querryRes;\n/*\n// List of available export formats\nprint '<table class=\"noborder\" width=\"100%\">';\nprint '<tr class=\"liste_titre\">';\nprint '<td class=\"titlefield\">'.$langs->trans(\"AvailableFormats\").'</td>';\nprint '<td>'.$langs->trans(\"LibraryUsed\").'</td>';\nprint '<td align=\"right\">'.$langs->trans(\"LibraryVersion\").'</td>';\nprint '</tr>'.\"\\n\";\n\n$liste = $objmodelexport->liste_modeles($db);\n$listeall = $liste;\nforeach ($listeall as $key => $val)\n{\n    if (preg_match('/__\\(Disabled\\)__/', $listeall[$key]))\n    {\n        $listeall[$key]=preg_replace('/__\\(Disabled\\)__/','('.$langs->transnoentitiesnoconv(\"Disabled\").')', $listeall[$key]);\n        unset($liste[$key]);\n    }\n\n    print '<tr class=\"oddeven\">';\n    print '<td width=\"16\">'.img_picto_common($key, $objmodelexport->getPictoForKey($key)).' ';\n    $text = $objmodelexport->getDriverDescForKey($key);\n    $label = $listeall[$key];\n    print $form->textwithpicto($label, $text).'</td>';\n    print '<td>'.$objmodelexport->getLibLabelForKey($key).'</td>';\n    print '<td align=\"right\">'.$objmodelexport->getLibVersionForKey($key).'</td>';\n    print '</tr>'.\"\\n\";\n}\nprint '</table>';*/\nllxFooter();\n$db->close();\n", "<?php\n/*\n * Copyright (C) 2015 delcroip <patrick@pmpd.eu>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\ninclude 'core/lib/includeMain.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';\nrequire_once 'core/lib/timesheet.lib.php';\nrequire_once 'class/TimesheetReport.class.php';\nrequire_once './core/modules/pdf/pdf_rat.modules.php';\n//require_once DOL_DOCUMENT_ROOT.'/core/modules/export/modules_export.php';\n$form_output = new Form($db);\n$htmlother = new FormOther($db);\n$userid = is_object($user)?$user->id:$user;\n$id = GETPOST('id', 'int');\n$action = GETPOST('action', 'alpha');\n$userIdSelected = GETPOST('userSelected', 'int');\n$exportFriendly = GETPOST('exportFriendly', 'alpha');\nif (empty($userIdSelected))$userIdSelected = $userid;\n$exportfriendly = GETPOST('exportfriendly', 'alpha');\n$optioncss = GETPOST('optioncss', 'alpha');\n$admin = $user->admin || $user->rights->timesheet->report->admin || $user->rights->timesheet->timesheet->admin;\nif (!$user->rights->timesheet->report->user && !$admin) {\n    $accessforbidden = accessforbidden(\"You don't have the report user or admin right\");\n}\n// Load translation files required by the page\n$langs->loadLangs(\n\tarray(\n\t\t'main',\n\t\t'projects',\n//\t\t'companies',\n\t\t'timesheet@timesheet',\n\t)\n);\n\n\n//find the right week\n//$toDate = GETPOST('toDate', 'alpha');\n//$toDateday = (!empty($toDate) && $action == 'goToDate')? GETPOST('toDateday', 'int'):0;// to not look for the date if action not goTodate\n//$toDatemonth = GETPOST('toDatemonth', 'int');\n//$toDateyear = GETPOST('toDateyear', 'int');\n$mode = GETPOST('mode', 'alpha');\n$short = GETPOST('short', 'int');\n$invoicedCol = GETPOST('invoicedcol', 'int');\n$ungroup = GETPOST('ungroup', 'int');\n$model = GETPOST('model', 'alpha');\nif (empty($mode)){\n    $mode = 'PTD';\n    $ungroup = $conf->global->TIMESHEET_REPORT_UNGROUP;\n    $invoicedCol = $conf->global->TIMESHEET_REPORT_INVOICED_COL;\n}\n$short = GETPOST('short', 'int');\n$invoicedCol = GETPOST('invoicedcol', 'int');\n$ungroup = GETPOST('ungroup', 'int');\n$show_all = GETPOST('showAll', 'int');\n\n//$userSelected = $userList[$userIdSelected];\n$year = GETPOST('year', 'int');\n//$month = GETPOST('month', 'int');;//strtotime(str_replace('/', '-', $_POST['Date']));\n//$firstDay = ($month)?strtotime('01-'.$month.'-'. $year):strtotime('first day of previous month');\n//$lastDay = ($month)?strtotime('last day of this month', $firstDay):strtotime('last day of previous month');\n$dateStart = strtotime(GETPOST('dateStart', 'alpha'));\n$dateStartday = GETPOST('dateStartday', 'int');// to not look for the date if action not goTodate\n$dateStartmonth = GETPOST('dateStartmonth', 'int');\n$dateStartyear = GETPOST('dateStartyear', 'int');\n$dateStart = parseDate($dateStartday, $dateStartmonth, $dateStartyear, $dateStart);\n$dateEnd = strtotime(GETPOST('dateEnd', 'alpha'));\n$dateEndday = GETPOST('dateEndday', 'int');// to not look for the date if action not goTodate\n$dateEndmonth = GETPOST('dateEndmonth', 'int');\n$reporttab = GETPOST('reporttab', 'alpha');\n$dateEndyear = GETPOST('dateEndyear', 'int');\n$dateEnd = parseDate($dateEndday, $dateEndmonth, $dateEndyear, $dateEnd);\n$invoicabletaskOnly = GETPOST('invoicabletaskOnly', 'int');\nif (empty($dateStart) || empty($dateEnd) || empty($userIdSelected)) {\n    $step = 0;\n    $dateStart = strtotime(\"first day of previous month\", time());\n    $dateEnd = strtotime(\"last day of previous month\", time());\n}\n\n// if the user can see ts for other the user id is diferent\n$userIdlist = array();\n$userIdlistfull = getSubordinates($db, $userid, 2, array(), $admin ? ADMIN : ALL, $entity = '1', $admin);\n$userIdlistfull[] = $userid;\nif ($show_all)\n{\n    \n    $userIdlist = $userIdlistfull;\n}else if (!empty($userIdSelected)  && $userIdSelected <> $userid) {\n\n    if (in_array($userIdSelected, $userIdlistfull) || $admin ) {\n        $userIdlist[] = $userIdSelected;\n    } else{\n        setEventMessage($langs->transnoentitiesnoconv(\"NotAllowed\"), 'errors');\n        unset($action);\n        $userIdlist[] = $userid;\n    }\n} else{\n    $userIdlist[] = $userid;\n    $userIdSelected = $userid;\n}\n\n$reportStatic = new TimesheetReport($db);\n$reportStatic->initBasic('', $userIdlist, $reportName, $dateStart, $dateEnd,\n    $mode, $invoicabletaskOnly,$short,$invoicedCol,$ungroup);\nif ($action == 'getpdf') {\n    $pdf = new pdf_rat($db);\n    //$outputlangs = $langs;\n    if ($pdf->writeFile($reportStatic, $langs)>0) {\n        header(\"Location: \".DOL_URL_ROOT.\"/document.php?modulepart=timesheet&file=reports/\"\n        .dol_sanitizeFileName($reportStatic->name) . \".pdf\");\n        return;\n    }\n    ob_end_flush();\n    exit();\n} elseif ($action == 'getExport'){\n    $max_execution_time_for_export = (empty($conf->global->EXPORT_MAX_EXECUTION_TIME)?\n        300:$conf->global->EXPORT_MAX_EXECUTION_TIME);    // 5mn if not defined\n    $max_time = @ini_get(\"max_execution_time\");\n    if ($max_time && $max_time < $max_execution_time_for_export)\n    {\n        @ini_set(\"max_execution_time\", $max_execution_time_for_export); // This work only if safe mode is off. also web servers has timeout of 300\n    }\n    $name = $reportStatic->buildFile($model, false);\n    if (!empty($name)){\n        header(\"Location: \".DOL_URL_ROOT.\"/document.php?modulepart=export&file=\".$name);\n        return;\n    }\n    ob_end_flush();\n    exit();\n}\n\n\nllxHeader('', $langs->trans('userReport'), '');\n\n$head = timesheet_report_prepare_head( 'user', $user->id );\nprint dol_get_fiche_head( $head, $reporttab, $langs->trans( 'TimeSpent' ), - 1, 'clock' );\n\n$form_output = '';\n\n$form_output .= '<form action=\"?action=reportUser'.(($optioncss != '')?'&amp;optioncss='.$optioncss:'').'\" method = \"POST\">\n        <table class = \"noborder\"  width = \"100%\">\n        <tr>\n        <td>'.$langs->trans('User').'</td>\n        <td>'.$langs->trans('DateStart').'</td>\n        <td>'.$langs->trans('DateEnd').'</td>\n        <td>'.$langs->trans('Mode').'</td>\n        <td>'.$langs->trans('Options').'</td>\n        </tr>\n        <tr >\n        <td>\n        ';\n$token = getToken();\n$form_output .= '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n\nif($admin){\n    $form_output .= $form->select_dolusers($userIdSelected, 'userSelected');\n\n} else {\n    $form_output .= $form->select_dolusers($userIdSelected, 'userSelected', 0, null, 0, $userIdlistfull);\n}\nif (count($userIdlistfull)>1) {\n    $form_output .= ' <br><input type = \"checkbox\" name = \"showAll\" value = \"1\" ';\n    $form_output .= ($show_all?'checked >':'>').$langs->trans('All') ;\n}\n\n\n//$mode = 'PTD';\n$querryRes = '';\nif (!empty($userIdSelected)\n        &&!empty($dateEnd) && !empty($dateStart))\n{\n    if ($exportfriendly){\n        $querryRes .= $reportStatic->getHTMLreportExport();\n    }else {\n        $querryRes .= $reportStatic->getHTMLreport($short,\n            \"User report \".dol_print_date($dateStart, 'day').'-'\n                .dol_print_date($dateEnd, 'day'));\n    }\n}\n\n$form_output .= '<td>'.$form->select_date($dateStart, 'dateStart', 0, 0, 0, \"\", 1, 1, 1).\"</td>\";\n// select end date\n$form_output .= '<td>'.$form->select_date($dateEnd, 'dateEnd', 0, 0, 0, \"\", 1, 1, 1).\"</td>\";\n//$form_output .= '<td>'.$htmlother->select_month($month, 'month').' - '.$htmlother->selectyear($year, 'year', 0, 10, 3).' </td>';\n// Select mode\n$form_output .= '<td><input type = \"radio\" name = \"mode\" value = \"PTD\" '.($mode == 'PTD'?'checked':'');\n$form_output .= '> '.$langs->trans('Project').' / '.$langs->trans('Task').' / '.$langs->trans('Date').'<br>';\n$form_output .= '<input type = \"radio\" name = \"mode\" value = \"PDT\" '.($mode == 'PDT'?'checked':'');\n$form_output .= '> '.$langs->trans('Project').' / '.$langs->trans('Date').' / '.$langs->trans('Task').'<br>';\n$form_output .= '<input type = \"radio\" name = \"mode\" value = \"DPT\" '.($mode == 'DPT'?'checked':'');\n$form_output .= '> '.$langs->trans('Date').' / '.$langs->trans('Project').' / '.$langs->trans('Task').'<br>';\n $form_output .= '</td>';\n// select short\n$form_output .= ' <td><input type = \"checkbox\" name = \"short\" value = \"1\" ';\n$form_output .= (($short == 1)?'checked>':'>').$langs->trans('short').'</br>' ;\n// Select invoiceable only\n$form_output .= '<input type = \"checkbox\" name = \"invoicabletaskOnly\" value = \"1\" ';\n$form_output .= (($invoicabletaskOnly == 1)?'checked>':'>').$langs->trans('InvoicableOnly').'</br>';\n// Select Export friendly\n$form_output .= '<input type = \"checkbox\" name = \"exportfriendly\" value = \"1\" ';\n$form_output .= (($exportfriendly == 1)?'checked>':'>').$langs->trans('exportfriendly').'</br>';\n// Select show invoice\n$form_output .= '<input type = \"checkbox\" name = \"invoicedcol\" value = \"1\" ';\n$form_output .= (($invoicedCol == 1)?'checked>':'>'). $langs->trans('reportInvoicedCol').'</br>';\n// Select Export friendly\n$form_output .= '<input type = \"checkbox\" name = \"ungroup\" value = \"1\" ';\n$form_output .= (($ungroup == 1)?'checked>':'>').$langs->trans('reportUngroup').'</td>';\n\n $form_output .= '</tr></table>';\n\n////print '<div class=\"tabsAction\">';\n//print '<div class=\"inline-block divButAction\"><input type=\"submit\" class=\"button butAction\" value=\"' . $langs->trans( 'Save' ) . '\" /></div>';\n//print \"</div>\";\n\n\n$form_output  .= '<div class=\"tabsAction\"><div class=\"center\">';\n$form_output  .= '<input class=\"butAction\" type=\"submit\" value=\"' . $langs->trans( 'getReport' ) . '\">';\n$model = $conf->global->TIMESHEET_EXPORT_FORMAT;\n//if(!empty($querryRes))$form_output .= '<a class = \"butAction\" href=\"?action=getpdf&dateStart='.dol_print_date($dateStart, 'dayxcard').'&dateEnd='.dol_print_date($dateEnd, 'dayxcard').'&projectSelected='.$projectSelectedId.'&mode=DTU&invoicabletaskOnly='.$invoicabletaskOnly.'\" >'.$langs->trans('TimesheetPDF').'</a>';\nif ( ! empty( $querryRes ) && $conf->global->MAIN_MODULE_EXPORT ) {\n\t$form_output .= '<a class = \"butAction\" href=\"?action=getExport&dateStart=' \n        .dol_print_date( $dateStart, 'dayxcard' ) \n        .'&dateEnd=' . dol_print_date( $dateEnd, 'dayxcard' ) \n        .'&userSelected=' . $userIdSelected \n        .'&mode='.$mode.'&model=' . $model \n        .'&invoicabletaskOnly=' . $invoicabletaskOnly \n        .'&ungroup=' . $ungroup \n        .'&showAll=' . $show_all \n        . '&token='.$token.'\" >' . $langs->trans( 'Export' ) . '</a>';\n}\nif ( ! empty( $querryRes ) ) {\n\t$form_output .= '<a class = \"butAction\" href=\"?action=getpdf&dateStart=' \n    . dol_print_date( $dateStart, 'dayxcard' ) \n    . '&dateEnd=' . dol_print_date( $dateEnd, 'dayxcard' ) \n    . '&userSelected=' . $userIdSelected \n    . '&mode='.$mode.'&model=' . $model \n    . '&invoicabletaskOnly='  . $invoicabletaskOnly \n    . '&ungroup=' . $ungroup \n    . '&showAll=' . $show_all \n    . '&token='.$token.'\" >' . $langs->trans( 'PDF' ) . '</a>';\n}\n$form_output .= '</div></div></form>';\n\nif ( ! ( $optioncss != '' && ! empty( $userIdSelected ) ) ) {\n\techo $form_output;\n}\n// section to generate\nif ( ! empty( $querryRes ) ) {\n\techo $querryRes;\n}\n\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2016 delcroip <patrick@pmpd.eu>\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// hide left menu\n//$_POST['dol_hide_leftmenu'] = 1;\n// Change this following line to use the correct relative path (../, ../../, etc)\ninclude 'core/lib/includeMain.lib.php';\nrequire_once 'core/lib/timesheet.lib.php';\n\n$role_key = array_search('1', array_slice($apflows, 1));\nif ($apflows[1] == 0 && $role_key!== false) {\n    // redirect to the correct page\n    $role_key++;\n    header(\"location:TimesheetOtherApproval.php?role=\".$roles[$role_key]);//TOBETESTED\n}\nrequire_once 'core/lib/timesheet.lib.php';\nrequire_once 'core/lib/generic.lib.php';\nrequire_once 'class/TimesheetUserTasks.class.php';\n$admin = $user->admin || $user->rights->timesheet->approval->admin;\nif (!$user->rights->timesheet->approval->team && !$admin) {\n    $accessforbidden = accessforbidden(\"you need to have the team or admin approver rights\");\n}\n//$userId = GETPOST('userid');\n$userId = is_object($user)?$user->id:$user;\n$action = GETPOST('action', 'alpha');\n//should return the XMLDoc\n$ajax = GETPOST('ajax', 'int');\n$xml = GETPOST('xml', 'int');\nif (!is_numeric($offset))$offset = 0;\n$print = (GETPOST('optioncss', 'alpha') == 'print')?true:false;\n$current = GETPOST('target', 'int');\nif ($current == ''){\n    $current = 0;\n}\n//$toDate = GETPOST('toDate');\n$token = GETPOST('token', 'alpha');\n//$userid = is_object($user)?$user->id:$user;\n// Load traductions files requiredby by page\n//$langs->load(\"companies\");\n$langs->load(\"main\");\n$langs->load(\"projects\");\n$langs->load('timesheet@timesheet');\n/*******************************************************************\n* ACTIONS\n*\n* Put here all code to do according to value of \"action\" parameter\n********************************************************************/\nif ($action == 'submit') {\n    if (isset($_SESSION['timesheet'][$token])) {\n       // $_SESSION['timesheet'][$token]['tsUser']\n        $tsApproved = 0;\n        $tsRejected = 0;\n        $ret = 0;\n        $errors = 0;\n        $count = 0;\n        $appflowOn = in_array('1', array_slice($apflows, 2));\n        //$task_timesheet->db = $db;\n        if (!empty($_POST['approval'])) {\n            $notes = GETPOST('note', 'array');\n            $notesTask = GETPOST('notesTask', 'array');\n            $progressTask = GETPOST('progressTask', 'array');\n            $approvals = $_POST['approval'];\n\n            foreach ($_SESSION['timesheet'][$token]['tsUser'] as $tsuId => $tsStatus) {\n                \n                $curTaskTimesheet = new TimesheetUserTasks($db);\n                $count++;\n                $curTaskTimesheet->fetch($tsuId);\n                $arrayTTA = $curTaskTimesheet->fetchTaskTimesheet();\n                $curTaskTimesheet->token = $token;\n                $curTaskTimesheet->updateActuals($arrayTTA, $notesTask[$tsuId],$progressTask[$tsuId]);\n                //if ($approvals[$key]!=$tsUser)\n                switch($approvals[$tsuId]) {\n                    case 'Approved':\n                        $ret = $curTaskTimesheet->setStatus($user, (($appflowOn>0)?UNDERAPPROVAL:APPROVED), $tsuId);\n                        if ($ret<0)$errors++;\n                        else $tsApproved++;\n                        break;\n                    case 'Rejected':\n                        $ret = $curTaskTimesheet->setStatus($user, REJECTED, $tsuId);\n                        if ($ret<0)$errors++;\n                        else $tsRejected++;\n                        break;\n                    case 'Submitted':\n                    default:\n                        break;\n                }\n                if ($curTaskTimesheet->note!=$notes[$curTaskTimesheet->appId]) {\n                    $curTaskTimesheet->note = $notes[$curTaskTimesheet->appId];\n                    $curTaskTimesheet->update($user);\n                }\n                TimesheetsetEventMessage($_SESSION['timesheet'][$token]);\n            }\n            if (($tsRejected+$tsApproved)>0) {\n                $current--;\n            }\n            if ($ret >= 0) {\n\n                if ($tsApproved)\n                    setEventMessage($langs->transnoentitiesnoconv(\"NumberOfTimesheetApproved\").$tsApproved);\n                if ($tsRejected)\n                    setEventMessage($langs->transnoentitiesnoconv(\"NumberOfTimesheetRejected\").$tsRejected);\n                if ($errors)\n                    setEventMessage($langs->transnoentitiesnoconv(\"NumberOfErrors\").$errors);\n            } else {\n                if ($errors == 0) {\n                    setEventMessage($langs->transnoentitiesnoconv(\"NothingChanged\"), 'warning');\n                } else {\n                    setEventMessage($langs->transnoentitiesnoconv(\"InternalError\").':'.$ret, 'errors');\n                }\n            }\n        } else {\n                setEventMessage($langs->transnoentitiesnoconv(\"NothingChanged\"), 'warning');// shoudn't happend\n        }\n    } else {\n            setEventMessage($langs->transnoentitiesnoconv(\"InternalError\"), 'errors');\n    }\n}\n\nif (!empty($token)) {\n    unset($_SESSION['timesheet'][$token]);\n}\n$token = getToken();\n$subId = ($admin)?'all':getSubordinates($db, $userId, 2, array($userId), TEAM);\n$selectList = getSelectAps($subId);\n$level = intval($conf->global->TIMESHEET_MAX_APPROVAL);\n$offset = 0;\nif (is_array($selectList)&& count($selectList)) {\n    if ($current >= count($selectList))$current = 0;\n    $offset = 0;\n    for($i = 0;$i<$current;$i++)\n    {\n        $offset += $selectList[$i]['count'];\n    }\n    $level = $selectList[$i]['count'];\n}\n$objectArray = getTStobeApproved($level, $offset, TEAM, $subId);\nif (is_array($objectArray)) {\n    $firstTimesheetUser = reset($objectArray);\n    //$curUser = $firstTimesheetUser->userId;\n    //$nextUser = $firstTimesheetUser->userId;\n}\n$i = 0;\n//\n/***************************************************\n* VIEW\n*\n* Put here all code to build page\n****************************************************/\n/*\nif ($xml) {\n    //renew timestqmp\n    ob_clean();\n   header(\"Content-type: text/xml;charset = utf-8\");\n  //  echo $task_timesheet->GetTimeSheetXML($userId, 5);//fixme\n    ob_end_flush();\nexit();\n}*/\n$TTU = new TimesheetUserTasks($db);\n$head = ($print)?'<style type = \"text/css\" >@page { size: A4 landscape;marks:none;margin: 1cm ;}</style>':'';\n$morejs = array(\"/timesheet/core/js/jsparameters.php\", \"/timesheet/core/js/timesheet.js?\"\n    .$conf->global->TIMESHEET_VERSION);\nllxHeader($head, $langs->trans('Timesheet'), '', '', '', '', $morejs);\n//calculate the week days\nshowTimesheetApTabs(TEAM);\necho '<div id = \"Team\" class = \"tabBar\">';\n//tokentp = time();\nif (is_object($firstTimesheetUser)) {\n    if (!$print) echo getHTMLNavigation($optioncss, $selectList, $current);\n    $Form .= $firstTimesheetUser->getHTMLFormHeader($ajax);\n    foreach ($objectArray as $key => $TTU) {\n\n        if ($i<$level) {\n            $TTU->fetchTaskTimesheet();\n    //$ret += $this->getTaskTimeIds();\n    //FIXME module holiday should be activated ?\n            $TTU->fetchUserHolidays();\n            $Form .= $TTU->userName.\" - \".dol_print_date($TTU->date_start, 'day');\n            $Form .= $TTU->getHTML(false, true);\n            $_SESSION['timesheet'][$token]['tsUser'][$TTU->id] = $TTU->status;\n            if (!$print) {\n                if ($conf->global->TIMESHEET_ADD_DOCS == 1) {\n                    require_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\n                    include_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n                    $object = $TTU;\n                    $modulepart = 'timesheet';\n                    $permission = 1;//$user->rights->timesheet->add;\n                    $ref = dol_sanitizeFileName($object->ref);\n                    $upload_dir = $conf->timesheet->dir_output.'/users/'\n                        .get_exdir($object->id, 2, 0, 0, $object, 'timesheet').$ref;\n                    $filearray = dol_dir_list($upload_dir, 'files', 0, '', '\\.meta$', $sortfield, \n                        (strtolower($sortorder) == 'desc'?SORT_DESC:SORT_ASC), 1);\n                    //$param = 'action = submitfile&id='.$object->id;\n                    $param = '';\n                    $disablemove = 1;\n                    $formfile = new FormFile($db);\n                    ob_start();\n                    $formfile->list_of_documents(\n                            $filearray, $object, $modulepart, $param, \n                            0, '',  0, 0, '', 0, '', '', 0, 0, \n                            $upload_dir, $sortfield, $sortorder, $disablemove);\n                    $Form .= ob_get_contents().'<br>'.\"\\n\";\n                    ob_end_clean();\n                }\n                $Form .= '<label class = \"butAction\"><input type = \"radio\"  name = \"approval['\n                    .$TTU->id.']\" value = \"Approved\" ><span>'\n                    .$langs->trans('approved').'</span></label>'.\"\\n\";\n                $Form .= '<label class = \"butAction\"><input type = \"radio\"  name = \"approval['\n                    .$TTU->id.']\" value = \"Rejected\" ><span>'\n                        .$langs->trans('rejected').'</span></label>'.\"\\n\";\n                $Form .= '<label class = \"butAction\"><input type = \"radio\"  name = \"approval['\n                    .$TTU->id.']\" value = \"Submitted\" checked ><span>'\n                        .$langs->trans('submitted').'</span></label>'.\"\\n\";\n                $Form .= '<br><br><br>'.\"\\n\";\n            }\n            $i++;//use for the offset\n        }\n    }\n   // $offset += $i;\n    if (!$print) {\n        $firstTimesheetUser->token = $token;\n        $Form .= $firstTimesheetUser->getHTMLFooterAp($current);\n    } else {\n        $Form .= '<table width = \"100%\"><tr><td align = \"center\">'\n            .$langs->trans('customerSignature').'</td><td align = \"center\">'\n            .$langs->trans('managerSignature').'</td><td align = \"center\">'\n            .$langs->trans('employeeSignature').'</td></tr></table>';\n    }\n} else{\n    \n    $Form .= '<h1>'.$langs->trans('NothingToValidate').'</h1>';\n    $staticTs = new TimesheetUserTasks($db);\n    $staticTs->token = $token;\n    $Form .= $staticTs->getHTMLFooterAp($current);\n}\n//Javascript\n$timetype = $conf->global->TIMESHEET_TIME_TYPE;\n//$Form .= ' <script type = \"text/javascript\" src = \"timesheet.js\"></script>'.\"\\n\";\n$Form .= '<script type = \"text/javascript\">'.\"\\n\\t\";\n$Form .= 'updateAll('.$conf->global->TIMESHEET_HIDE_ZEROS.');';\n$Form .= \"\\n\\t\".'</script>'.\"\\n\";\n// $Form .= '</div>';//TimesheetPage\nprint $Form;\necho '</div>';\n// End of page\nllxFooter();\n$db->close();\n/* Funciton to fect timesheet to be approuved.\n*  @param    int               $level            number of ts to fetch\n*  @param    int               $offset           number of ts to skip\n*  @param    int               $role             team, project, customer ...\n*  @param    array(int)             $role             if team, array fo subordinate_id, array of task_id for other\n*  @return   array(task_timesheet)                     result\n*/\nfunction getTStobeApproved($level, $offset, $role, $subId)\n{\n    global $db, $conf;\n    if ((!is_array($subId) || !count($subId)) && $subId!='all')return array();\n    $byWeek = $conf->global->TIMESHEET_APPROVAL_BY_WEEK;\n    //if ($role = 'team')\n    $sql = \"SELECT *\";\n    if ($byWeek == 2) {\n        if ($db->type!='pgsql') {\n            $sql .= \", CONCAT(MONTH(date_start), '/', YEAR(date_start), '#', fk_userid) as usermonth\";\n        } else{\n            $sql .= \", CONCAT(date_part('month', date_start), '/',\"\n                .\" date_part('year', date_start), '#', fk_userid) as usermonth\";\n        }\n    }\n    $sql .= \" FROM \".MAIN_DB_PREFIX.\"project_task_timesheet as ts\";\n    $sql .= ' WHERE (ts.status='.SUBMITTED.' OR ts.status='.CHALLENGED.') ';\n    switch($role) {\n        case TEAM:\n            if ($subId!='all') $sql .= ' AND fk_userid in ('.implode(', ', $subId).')';\n //          $sql .= ' AND recipient = \"'.$role.'\"';\n            break;\n    }\n    if ($byWeek == 1) {\n        $sql .= ' ORDER BY date_start DESC, fk_userid DESC';\n    } elseif ($byWeek == 0) {\n        $sql .= ' ORDER BY fk_userid DESC, date_start DESC';\n    } elseif ($byWeek == 2) {\n        if ($db->type!='pgsql') {\n            $sql .= ' ORDER BY YEAR(date_start) DESC, MONTH(date_start) DESC, fk_userid DESC';\n        } else {\n            $sql .= ' ORDER BY date_part(\\'year\\', date_start) DESC, '\n                .'ate_part(\\'month\\', date_start) DESC, fk_userid DESC';\n        }\n    }\n    $sql .= ' LIMIT '.$level;\n    $sql .= ' OFFSET '.$offset;\n    dol_syslog(\"timesheet::getTStobeApproved sql=\".$sql, LOG_DEBUG);\n    $tsList = array();\n    $resql = $db->query($sql);\n    if ($resql) {\n        $num = $db->num_rows($resql);\n        $i = 0;\n        // Loop on each record found, so each couple (project id, task id)\n        while($i < $num)\n        {\n            $error = 0;\n            $obj = $db->fetch_object($resql);\n            $tmpTs = NEW TimesheetUserTasks($db, $obj->fk_userid);\n            $tmpTs->id = $obj->rowid;\n            $tmpTs->userId = $obj->fk_userid;\n            $tmpTs->date_start = $tmpTs->db->jdate($obj->date_start);\n            $tmpTs->ref = $tmpTs->date_start.'_'.$tmpTs->userId;\n            //$tmpTs->date_end = $tmpTs->db->jdate($obj->date_start);\n            $tmpTs->status = $obj->status;\n            $tmpTs->planned_workload = $obj->planned_workload;\n            $tmpTs->note = $obj->note;\n            $tmpTs->date_creation = $tmpTs->db->jdate($obj->date_creation);\n            $tmpTs->date_modification = $tmpTs->db->jdate($obj->date_modification);\n            $tmpTs->user_creation = $obj->fk_user_creation;\n            $tmpTs->user_modification = $obj->fk_user_modification;\n            $tmpTs->whitelistmode = 2;// no impact\n            $tmpTs->date_end = $tmpTs->db->jdate($obj->date_end);\n            //}\n            $i++;\n            $tsList[] = $tmpTs;\n        }\n        $db->free($resql);\n        return $tsList;\n    } else {\n            dol_print_error($db);\n            return -1;\n    }\n}\n/*\n * function to print the timesheet navigation header\n *\n *  @param    string               $optioncss            get print mode\n *  @param     int               $selectList           List of pages\n *  @param     object              $current                current page\n *  @return     string                                         HTML\n */\nfunction getHTMLNavigation($optioncss, $selectList, $current = 0)\n{\n    global $langs, $db;\n    $htmlSelect = '<select name = \"target\">';\n    foreach ($selectList as $key => $element) {\n        $htmlSelect .= ' <option value = \"'.$key.'\" '.(($current == $key)?'selected':'').'>'\n            .$element['label'].'</option>';\n    }\n    $htmlSelect .= '</select>';\n    $form = new Form($db);\n    $Nav = '<table class = \"noborder\" width = \"50%\">'.\"\\n\\t\".'<tr>'.\"\\n\\t\\t\".'<th>'.\"\\n\\t\\t\\t\";\n    if ($current!=0) {\n        $Nav .= '<a href=\"?action=goTo&target='.($current-1).'\"';\n        if ($optioncss != '')$Nav .= '&amp;optioncss='.$optioncss;\n        $Nav .= '\">  &lt;&lt;'.$langs->trans(\"Previous\").' </a>'.\"\\n\\t\\t\";\n    }\n    $Nav .= \"</th>\\n\\t\\t<th>\\n\\t\\t\\t\";\n    $Nav .= '<form name = \"goTo\" action=\"?action=goTo\" method = \"POST\" >'.\"\\n\\t\\t\\t\";\n    $Nav .= '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n\n    $Nav .= $langs->trans(\"GoTo\").': '.$htmlSelect.\"\\n\\t\\t\\t\";;\n    $Nav .= '<input type = \"submit\" value = \"Go\" /></form>'.\"\\n\\t\\t</th>\\n\\t\\t<th>\\n\\t\\t\\t\";\n    if ($current<count($selectList)) {\n        $Nav .= '<a href=\"?action=goTo&target='.($current+1);\n        if ($optioncss != '') $Nav .= '&amp;optioncss='.$optioncss;\n        $Nav .= '\">'.$langs->trans(\"Next\").' &gt;&gt;</a>';\n    }\n    $Nav .= \"\\n\\t\\t</th>\\n\\t</tr>\\n </table>\\n\";\n    return $Nav;\n}\n /*\n * function to get the Approval elible for this user\n *\n *  @param    object            $db             database objet\n *  @param    array(int)/int        $userids        array of manager id\n *  @return  array(int => String)                                array(ID => userName)\n */\nfunction getSelectAps($subId)\n{\n    if ((!is_array($subId) || !count($subId)) && $subId!='all')return array();\n    global $db, $langs, $conf;\n    $sql = '';\n    $sqlWhere .= ' WHERE ts.status  in ('.SUBMITTED.', '.CHALLENGED.')';\n    if ($subId!='all')$sqlWhere .= ' AND ts.fk_userid in ('.implode(', ', $subId).')';\n    if ($conf->global->TIMESHEET_APPROVAL_BY_WEEK == 1) {\n        $sql = 'SELECT COUNT(ts.date_start) as nb, ts.date_start as id, ';\n        $sql .= \" DATE_FORMAT(ts.date_start, '\".$langs->trans('Week').\" %u(%m/%Y)') as label\";\n        $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_timesheet as ts';\n        $sql .= ' JOIN '.MAIN_DB_PREFIX.'user as usr on ts.fk_userid = usr.rowid ';\n        $sql .= $sqlWhere;\n        $sql .= ' group by ts.date_start ORDER BY ts.date_start DESC';\n    } elseif ($conf->global->TIMESHEET_APPROVAL_BY_WEEK == 0) {\n        $sql = 'SELECT COUNT(ts.rowid) as nb, ts.fk_userid as id, ';\n        $sql .= \" MAX(CONCAT(usr.firstname, ' ', usr.lastname)) as label\";\n        $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_timesheet as ts';\n        $sql .= ' JOIN '.MAIN_DB_PREFIX.'user as usr on ts.fk_userid = usr.rowid ';\n        $sql .= $sqlWhere;\n        $sql .= ' group by ts.fk_userid ORDER BY ts.fk_userid DESC';\n    } else{\n        $sql = 'SELECT month, COUNT(rowid) as nb, month as id, ';\n        $sql .= ' month as label';\n        $sql .= ' FROM (SELECT DATE_FORMAT(ts.date_start, \\' %m/%Y\\') as month, ';\n        $sql .= ' ts.rowid as rowid';\n        $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_timesheet as ts';\n        //$sql .= ' JOIN '.MAIN_DB_PREFIX.'user as usr on ts.fk_userid = usr.rowid ';\n        $sql .= $sqlWhere.') AS T';\n        $sql .= ' group by month ORDER BY  RIGHT(month, 4) DESC, month DESC';\n    }\n    dol_syslog('timesheetAp::getSelectAps ', LOG_DEBUG);\n    $list = array();\n    $resql = $db->query($sql);\n    if ($resql) {\n        $i = 0;\n        $j = 0;\n        $num = $db->num_rows($resql);\n        while($i<$num)\n        {\n            $obj = $db->fetch_object($resql);\n            if ($obj) {\n                $j = 1;\n                $nb = $obj->nb;\n                // split the nb in x line to avoid going over the max approval\n                while($nb>$conf->global->TIMESHEET_MAX_APPROVAL)\n                {\n                    $list[] = array(\"id\"=>$obj->id, \"label\"=>$obj->label.' ('\n                        .$j.\"/\".ceil($obj->nb/$conf->global->TIMESHEET_MAX_APPROVAL).')', \n                        \"count\"=>$conf->global->TIMESHEET_MAX_APPROVAL);\n                    $nb -= $conf->global->TIMESHEET_MAX_APPROVAL;\n                    $j++;\n                }\n                // at minimum a row shoud gnerate one option\n                $list[] = array(\"id\"=>$obj->id, \"label\"=>$obj->label.' '\n                    .(($obj->nb>$conf->global->TIMESHEET_MAX_APPROVAL)?'('.$j.'/'\n                    .ceil($obj->nb/$conf->global->TIMESHEET_MAX_APPROVAL).')':''), \"count\"=>$nb);\n            }\n            $i++;\n        }\n    } else {\n        $error++;\n        dol_print_error($db);\n        $list = array();\n    }\n      return $list;\n}\n", "<?php\n/*\n * Copyright (C) 2007-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) Patrick Delcroix <patrick@pmpd.eu>\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *        \\file       dev/skeletons/skeleton_page.php\n *                \\ingroup    timesheet othermodule1 othermodule2\n *                \\brief      This file is an example of a php page\n *                                        Initialy built by build_class_from_table on 2016-03-26 09:52\n */\n//if (! defined('NOREQUIREUSER'))  define('NOREQUIREUSER', '1');\n//if (! defined('NOREQUIREDB'))    define('NOREQUIREDB', '1');\n//if (! defined('NOREQUIRESOC'))   define('NOREQUIRESOC', '1');\n//if (! defined('NOREQUIRETRAN'))  define('NOREQUIRETRAN', '1');\n//if (! defined('NOCSRFCHECK'))    define('NOCSRFCHECK', '1');                        // Do not check anti CSRF attack test\n//if (! defined('NOSTYLECHECK'))   define('NOSTYLECHECK', '1');                        // Do not check style html tag into posted data\n//if (! defined('NOTOKENRENEWAL')) define('NOTOKENRENEWAL', '1');                // Do not check anti POST attack test\n//if (! defined('NOREQUIREMENU'))  define('NOREQUIREMENU', '1');                        // If there is no need to load and show top and left menu\n//if (! defined('NOREQUIREHTML'))  define('NOREQUIREHTML', '1');                        // If we don't need to load the html.form.class.php\n//if (! defined('NOREQUIREAJAX'))  define('NOREQUIREAJAX', '1');\n//if (! defined(\"NOLOGIN\"))        define(\"NOLOGIN\", '1');                                // If this page is public (can be called outside logged session)\n// Change this following line to use the correct relative path (../, ../../, etc)\ninclude 'core/lib/includeMain.lib.php';\nif (!$user->rights->timesheet->approval->admin && !$user->admin) {\n    $accessforbidden = accessforbidden(\"you need to have the approver admin rights\");\n}\nrequire_once 'core/lib/generic.lib.php';\nrequire_once 'class/TimesheetUserTasks.class.php';\nrequire_once 'core/lib/timesheet.lib.php';\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n//document handling\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n//include_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\n// include conditionnally of the dolibarr version\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\n$PHP_SELF = $_SERVER['PHP_SELF'];\n// Load traductions files requiredby by page\n//$langs->load(\"companies\");\n$langs->load(\"timesheet@timesheet\");\n// Get parameter\n$id = GETPOST('id', 'int');\n$ref = GETPOST('ref', 'alpha');\n$action = GETPOST('action', 'alpha');\n$backtopage = GETPOST('backtopage', 'alpha');\n$cancel = GETPOST('cancel', 'alpha');\n$confirm = GETPOST('confirm', 'alpha');\n$token = GETPOST('$token', 'alpha');\n//// Get parameters\n$sortfield = GETPOST('sortfield', 'alpha');\n$sortorder = GETPOST('sortorder', 'alpha')?GETPOST('sortorder', 'alpha'):'ASC';\n$removefilter = isset($_POST[\"removefilter_x\"]) || isset($_POST[\"removefilter\"]);\n//$applyfilter = isset($_POST[\"search_x\"]) ;//|| isset($_POST[\"search\"]);\nif (!$removefilter) {\n    // Both test must be present to be compatible with all browsers {\n    $ls_userId = GETPOST('ls_userId', 'int');\n    if ($ls_userId == -1)$ls_userId = '';\n    $ls_date_start_month = GETPOST('ls_date_start_month', 'int');\n    $ls_date_start_year = GETPOST('ls_date_start_year', 'int');\n    $ls_status = GETPOST('ls_status', 'alpha');\n    if ($ls_status == -1)$ls_status = '';\n    $ls_target = GETPOST('ls_target', 'alpha');\n    if ($ls_target == -1)$ls_target = '';\n    $ls_project_tasktime_list = GETPOST('ls_project_tasktime_list', 'alpha');\n    $ls_user_approval = GETPOST('ls_user_approval', 'int');\n    if ($ls_user_approval == -1)$ls_user_approval = '';\n    $ls_timsheetuser = GETPOST('ls_timesheetuser', 'int');\n    if ($ls_timsheetuser == -1)$ls_timsheetuser = '';\n    $ls_task = GETPOST('ls_task', 'int');\n    if ($ls_task == -1)$ls_task = '';\n    $ls_note = GETPOST('ls_note', 'alpha');\n    if ($ls_note == -1)$ls_note = '';\n}\n$page = GETPOST('page', 'int');\nif ($page <= 0){\n    $page = 0;\n}\n$limit = $conf->liste_limit;\n$offset = $limit * $page;\n$pageprev = $page - 1;\n$pagenext = $page + 1;\n//$upload_dir = $conf->timesheet->dir_output.'/Timesheetuser/'.dol_sanitizeFileName($object->ref);\n // uncomment to avoid resubmision\n//if (isset($_SESSION['timesheet'][$token]))\n//{\n //   $cancel = true;\n //  setEventMessages('Internal error, POST not exptected', null, 'errors');\n//}\n// Right Management\n /*\nif ($user->societe_id > 0 ||\n       (!$user->rights->timesheet->add && ($action == 'add' || $action = 'create')) ||\n       (!$user->rights->timesheet->view && ($action == 'list' || $action = 'view')) ||\n       (!$user->rights->timesheet->delete && ($action == 'confirm_delete')) ||\n       (!$user->rights->timesheet->edit && ($action == 'edit' || $action = 'update')))\n{\n        accessforbidden();\n}\n*/\n// create object and set id or ref if provided as parameter\n$object = new TimesheetUserTasks($db);\nif ($id>0) {\n    $object->id = $id;\n    $object->fetch($id);\n    $ref = dol_sanitizeFileName($object->ref);\n    $upload_dir = $conf->timesheet->dir_output.'/tasks/'\n        .get_exdir($object->id, 2, 0, 0, $object, 'timesheet').$ref;\n    if (empty($action))$action = 'viewdoc';//  the doc handling part send back only the ID without actions\n}\nif (!empty($ref)) {\n    $object->ref = $ref;\n}\n/*******************************************************************\n* ACTIONS\n*\n* Put here all code to do according to value of \"action\" parameter\n********************************************************************/\n// Action to add record\n$error = 0;\nif ($cancel) {\n    reloadpage($backtopage, $id, $ref);\n} elseif (($action == 'add') || ($action == 'update' && ($id>0 || !empty($ref)))) {\n    //block resubmit\n    if (empty($token) || (!isset($_SESSION['timesheet'][$token]))) {\n        setEventMessage('WrongTimeStamp_requestNotExpected', 'errors');\n        $action = ($action == 'add')?'create':'view';\n    }\n    //retrive the data\n    $object->userId = GETPOST('Userid', 'int');\n    $object->date_start = dol_mktime(0, 0, 0, GETPOST('startDatedatemonth', 'int'), \n        GETPOST('startDatedateday', 'int'), GETPOST('startDatedateyear', 'int'));\n    $object->date_end = dol_mktime(0, 0, 0, GETPOST('dateendmonth', 'int'), \n        GETPOST('dateendday', 'int'), GETPOST('dateendyear', 'int'));\n    $object->status = GETPOST('Status', 'alpha');\n    $object->note = GETPOST('Note', 'alpha');\n// test here if the post data is valide\n /*\n if ($object->prop1 == 0 || $object->prop2 == 0) {\n     if ($id>0 || $ref!='')\n        $action = 'create';\n     else\n        $action = 'edit';\n }\n  */\n} elseif ($id == 0 && $ref == '' && $action!='create') {\n    $action = 'list';\n}\nswitch($action) {\n    case 'update':\n        $result = $object->update($user);\n        if ($result > 0) {\n            // Creation OK\n            unset($_SESSION['timesheet'][$token]);\n            setEventMessage('RecordUpdated', 'mesgs');\n            // reloadpage($backtopage, $object->id, $ref);\n            $action = 'view';\n        } else {\n            // Creation KO\n            if (! empty($object->errors)) setEventMessages(null, $object->errors, 'errors');\n            else setEventMessage('RecordNotUpdated', 'errors');\n            //reloadpage($backtopage, $object->id, $ref);\n                $action = 'view';\n        }\n        //fallthrough\n    case 'delete':\n        if (isset($_GET['urlfile'])) $action = 'deletefile';\n        //fallthrough\n    case 'view':\n    case 'viewinfo':\n    case 'viewdoc':\n    case 'edit':\n        // fetch the object data if possible\n        if ($id > 0 || !empty($ref)) {\n            //$result = $object->fetch($id, $ref);\n            if ($result > 0)$result = $object->fetchTaskTimesheet();\n            if ($result > 0)$result = $object->fetchUserHolidays();\n            if ($result < 0) {\n                dol_print_error($db);\n            } else { // fill the id & ref\n                if (isset($object->id))$id = $object->id;\n                if (isset($object->rowid))$id = $object->rowid;\n                if (isset($object->ref))$ref = $object->ref;\n            }\n        } else {\n            setEventMessage($langs->trans('noIdPresent').' id:'.$id, 'errors');\n            $action = 'list';\n        }\n        break;\n    case 'add':\n        $result = $object->create($user);\n        if ($result > 0) {\n            // Creation OK\n            // remove the $token\n           unset($_SESSION['timesheet'][$token]);\n           setEventMessage('RecordSucessfullyCreated', 'mesgs');\n           reloadpage($backtopage, $result, $ref);\n        } else {\n            // Creation KO\n            if (! empty($object->errors)) setEventMessages(null, $object->errors, 'errors');\n            else  setEventMessage('RecordNotSucessfullyCreated', 'errors');\n            $action = 'create';\n        }\n        break;\n     case 'confirm_delete':\n        $result = ($confirm == 'yes')?$object->delete($user):0;\n        if ($result > 0) {\n            // Delete OK\n            setEventMessage($langs->trans('RecordDeleted'), 'mesgs');\n            $action = 'list';\n        } else {\n            // Delete NOK\n            if (! empty($object->errors)) setEventMessages(null, $object->errors, 'errors');\n            else setEventMessage('RecordNotDeleted', 'errors');\n            $action = 'list';\n        }\n         break;\n    case 'list':\n    case 'create':\n    default:\n        if (!empty($_FILES)) $action = 'viewdoc';\n        break;\n}\n        //document handling\nif ($conf->global->TIMESHEET_ADD_DOCS && $id>0) {\n    $object->fetch($id);\n    $ref = dol_sanitizeFileName($object->ref);\n    $upload_dir = $conf->timesheet->dir_output.'/tasks/'\n        .get_exdir($object->id, 2, 0, 0, $object, 'timesheet').$ref;\n    if (version_compare(DOL_VERSION, \"4.0\") >= 0) {\n       include_once DOL_DOCUMENT_ROOT . '/core/actions_linkedfiles.inc.php';\n    } else{\n       include_once DOL_DOCUMENT_ROOT . '/core/tpl/document_actions_pre_headers.tpl.php';\n    }\n}\n//Removing the $token array so the order can't be submitted two times\nif (isset($_SESSION['timesheet'][$token])) {\n    unset($_SESSION['timesheet'][$token]);\n}\nif (($action == 'create') || ($action == 'edit' && ($id>0 || !empty($ref)))) {\n    $token = getToken();\n    $_SESSION['timesheet'][$token] = array();\n    $_SESSION['timesheet'][$token]['action'] = $action;\n}\n/***************************************************\n* VIEW\n*\n* Put here all code to build page\n****************************************************/\n$morejs = array(\"/timesheet/core/js/jsparameters.php\", \"/timesheet/core/js/timesheet.js?\"\n    .$conf->global->TIMESHEET_VERSION);\nllxHeader('', $langs->trans('TimesheetUser'), '', '', '', '', $morejs);\nprint \"<div> <!-- module body-->\";\n$form = new Form($db);\n$formother = new FormOther($db);\n// Put here content of your page\n// Example : Adding jquery code\n/*print '<script type = \"text/javascript\" language = \"javascript\">\njQuery(document).ready(function()\n{\n        function init_myfunc()\n        {\n                jQuery(\"#myid\").removeAttr(\\'disabled\\');\n                jQuery(\"#myid\").attr(\\'disabled\\', \\'disabled\\');\n        }\n        init_myfunc();\n        jQuery(\"#mybutton\").click(function()\n{\n                init_needroot();\n        });\n});\n</script>';*/\n$edit = $new = 0;\nswitch($action) {\n    case 'create':\n        $new = 1;\n    case 'edit':\n        $edit = 1;\n    case 'delete';\n        if ($action == 'delete' && ($id>0 || $ref!=\"\")) {\n         $ret = $form->form_confirm($PHP_SELF.'?action=confirm_delete&id='\n            .$id, $langs->trans('DeleteTimesheetuser'), \n            $langs->trans('ConfirmDelete'), 'confirm_delete', '', 0, 1);\n        if ($ret == 'html') print '<br />';\n         //to have the object to be deleted in the background\\\n        }\n    case 'view':\n    {\n        // tabs\n        if ($edit == 0 && $new == 0) { //show tabs\n            $head = Timesheetuser_prepare_head($object);\n            dol_fiche_head($head, 'card', $langs->trans('Timesheetuser'), 0, 'timesheet@timesheet');\n        } else{\n            print_fiche_titre($langs->trans('Timesheetuser'));\n        }\n        print '<br>';\n        if ($edit == 1) {\n            if ($new == 1) {\n                print '<form method = \"POST\" action = \"'.$PHP_SELF.'?action=add\">';\n            } else{\n                print '<form method = \"POST\" action = \"'.$PHP_SELF.'?action=update&id='.$id.'\">';\n            }\n            print '<input type = \"hidden\" name = \"$token\" value = \"'.$token.'\">';\n            print '<input type = \"hidden\" name = \"backtopage\" value = \"'.$backtopage.'\">';\n        } else {// show the nav bar\n            $basedurltab = explode(\"?\", $PHP_SELF);\n            $basedurl = $basedurltab[0].'?action=list';\n            $linkback = '<a href = \"'.$basedurl.(! empty($socid)?'?socid='.$socid:'').'\">'\n                .$langs->trans(\"BackToList\").'</a>';\n            if (!isset($object->ref))//save ref if any\n                $object->ref = $object->id;\n            print $form->showrefnav($object, 'action = view&id', $linkback, 1, 'rowid', 'ref', '');\n            //reloqd the ref\n        }\n        print '<table class = \"border centpercent\">'.\"\\n\";\n                print \"<tr>\\n\";\n// show the field userId\n                print '<td class = \"fieldrequired\">'.$langs->trans('User').' </td><td>';\n                if ($edit == 1) {\n                print $form->select_dolusers($object->userId, 'Userid', 1, '', 0);\n                } else{\n                print print_generic('user', 'rowid', $object->userId, 'lastname', 'firstname', ' ');\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n                print \"<tr>\\n\";\n// show the field date_start\n                print '<td class = \"fieldrequired\">'.$langs->trans('DateStart').' </td><td>';\n                if ($edit == 1) {\n                if ($new == 1) {\n                        print $form->select_date(-1, 'startDatedate');\n                } else{\n                        print $form->select_date($object->date_start, 'startDatedate');\n                }\n                } else{\n                        print dol_print_date($object->date_start, 'day');\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n                print \"<tr>\\n\";\n// show the field date_end\n                print '<td class = \"fieldrequired\">'.$langs->trans('DateEnd').' </td><td>';\n                if ($edit == 1) {\n                if ($new == 1) {\n                        print $form->select_date(-1, 'dateend');\n                } else{\n                        print $form->select_date($object->date_end, 'dateend');\n                }\n                } else{\n                        print dol_print_date($object->date_end, 'day');\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n                print \"<tr>\\n\";\n// show the field status\n                print '<td>'.$langs->trans('Status').' </td><td>';\n                if ($edit == 1) {\n                print  $form->selectarray('Status', $statusA, $object->status);\n                } else{\n                print $statusA[$object->status];\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n                print \"<tr>\\n\";\n// show the field note\n                print '<td>'.$langs->trans('Note').' </td><td>';\n                if ($edit == 1) {\n            print '<textarea class = \"flat\"  name = \"Note\" cols = \"40\" rows = \"5\" >'\n                .$object->note.'</textarea>';\n                } else{\n                        print $object->note;\n                //print print_generic('project_tasktime_list', 'rowid', $object->project_tasktime_list, 'rowid', 'description');\n                }\n                print \"</td>\";\n                print \"\\n</tr>\\n\";\n//                print \"<tr>\\n\";\n        print '</table>'.\"\\n\";\n        print '<br>';\n        if ($object->status != DRAFT && $edit!=1) {\n            $object->fetchByWeek();\n            $object->fetchTaskTimesheet();\n            //$ret += $this->getTaskTimeIds();\n            //FIXME module holiday should be activated ?\n            $object->fetchUserHolidays();\n            print $object->userName.\" - \".dol_print_date($object->date_start, 'day');\n            print $object->getHTMLHeader();\n            print $object->getHTMLHolidayLines(false);\n            print $object->getHTMLPublicHolidayLines(false);\n            print $object->getHTMLTotal();\n            print $object->getHTMLtaskLines(false);\n            print $object->getHTMLTotal();\n            print \"</table>\";\n            print  '<script type = \"text/javascript\">'.\"\\n\\t\";\n            print 'updateAll('.$conf->global->TIMESHEET_HIDE_ZEROS.');';\n            print  \"\\n\\t\".'</script>'.\"\\n\";\n        }\n        print '<div class = \"center\">';\n        if ($edit == 1) {\n            if ($new == 1) {\n                print '<input type = \"submit\" class = \"butAction\" name = \"add\" value = \"'\n                    .$langs->trans('Add').'\">';\n            } else{\n                print '<input type = \"submit\" name = \"update\" value = \"'\n                    .$langs->trans('Update').'\" class = \"butAction\">';\n            }\n            print ' &nbsp;<input type = \"submit\" class = \"butActionDelete\" name = \"cancel\" value = \"'\n                .$langs->trans('Cancel').'\"></div>';\n            print '</form>';\n        } else{\n            $parameters = array();\n            $reshook = $hookmanager->executeHooks('addMoreActionsButtons', \n                $parameters, $object, $action);// Note that $action and $object may have been modified by hook\n            if ($reshook < 0) setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n            if (empty($reshook)) {\n                print '<div class = \"tabsAction\">';\n                // Boutons d'actions\n                //if ($user->rights->Timesheetuser->edit)\n                //{\n                    print '<a href = \"'.$PHP_SELF.'?id='.$id\n                        .'&action=edit\" class = \"butAction\">'.$langs->trans('Update').'</a>';\n                //}\n                //if ($user->rights->Timesheetuser->delete)\n                //{\n                    print '<a class = \"butActionDelete\" href = \"'.$PHP_SELF.'?id='\n                        .$id.'&action=delete\">'.$langs->trans('Delete').'</a>';\n                //}\n                //else\n                //{\n                //    print '<a class = \"butActionRefused\" href = \"#\" title = \"'.dol_escape_htmltag($langs->trans(\"NotAllowed\")).'\">'.$langs->trans('Delete').'</a>';\n                //}\n                print '</div>';\n            }\n        }\n        break;\n    }\n        case 'viewinfo':\n        print_fiche_titre($langs->trans('Timesheetuser'));\n        $head = Timesheetuser_prepare_head($object);\n        dol_fiche_head($head, 'info', $langs->trans(\"Timesheetuser\"), 0, 'timesheet@timesheet');\n        print '<table width = \"100%\"><tr><td>';\n        dol_print_object_info($object);\n        print '</td></tr></table>';\n        print '</div>';\n        break;\n    case 'deletefile':\n        $action = 'delete';\n    case 'viewdoc':\n        print_fiche_titre($langs->trans('Timesheetuser'));\n        if (! $sortfield) $sortfield = 'name';\n        $object->fetch_thirdparty();\n        $head = Timesheetuser_prepare_head($object);\n        dol_fiche_head($head, 'documents', $langs->trans(\"Timesheetuser\"), 0, 'timesheet@timesheet');\n        $filearray = dol_dir_list($upload_dir, 'files', 0, '', '\\.meta$', $sortfield, \n            (strtolower($sortorder) == 'desc'?SORT_DESC:SORT_ASC), 1);\n        $totalsize = 0;\n        foreach ($filearray as $key => $file) {\n                $totalsize += $file['size'];\n        }\n        print '<table class = \"border\" width = \"100%\">';\n        $linkback = '<a href = \"'.$PHP_SELF.(! empty($socid)?'?socid='.$socid:'').'\">'\n            .$langs->trans(\"BackToList\").'</a>';\n        // Ref\n        print '<tr><td width = \"30%\">'.$langs->trans(\"Ref\").'</td><td>';\n        print $form->showrefnav($object, 'action = view&id', $linkback, 1, 'rowid', 'ref', '');\n        print '</td></tr>';\n        // Societe\n        //print \"<tr><td>\".$langs->trans(\"Company\").\"</td><td>\".$object->client->getNomUrl(1).\"</td></tr>\";\n        print '<tr><td>'.$langs->trans(\"NbOfAttachedFiles\").'</td><td colspan = \"3\">'.count($filearray).'</td></tr>';\n        print '<tr><td>'.$langs->trans(\"TotalSizeOfAttachedFiles\").'</td><td colspan = \"3\">'.$totalsize.' '\n            .$langs->trans(\"bytes\").'</td></tr>';\n        print '</table>';\n        print '</div>';\n        $modulepart = 'timesheet';\n        $permission = 1;//$user->rights->timesheet->add;\n        $param = '&id='.$object->id;\n        include_once DOL_DOCUMENT_ROOT . '/core/tpl/document_actions_post_headers.tpl.php';\n        break;\n    case 'delete':\n        if (($id>0 || $ref!='')) {\n         $ret = $form->form_confirm($PHP_SELF.'?action=confirm_delete&id='.$id, $langs->trans('DeleteTimesheetuser'), $langs->trans('ConfirmDelete'), 'confirm_delete', '', 0, 1);\n         if ($ret == 'html') print '<br />';\n         //to have the object to be deleted in the background\n        }\n    case 'list':\n    default:\n        {\n    $sql = 'SELECT';\n    $sql .= ' t.rowid, ';\n    $sql .= ' t.fk_userid, ';\n    $sql .= ' t.date_start, ';\n    $sql .= ' t.date_end, ';\n    $sql .= ' t.status';\n    $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_timesheet as t';\n    $sqlwhere = '';\n    if (isset($object->entity))\n        $sqlwhere .= ' AND t.entity = '.$conf->entity;\n    if ($filter && $filter != -1) {\n        // GETPOST('filtre') may be a string {\n        $filtrearr = explode(', ', $filter);\n        foreach ($filtrearr as $fil) {\n                $filt = explode(':', $fil);\n                $sqlwhere .= ' AND ' . $filt[0] . ' = ' . $filt[1];\n        }\n    }\n    //pass the search criteria\n    if ($ls_userId) $sqlwhere .= natural_search(array('t.fk_userid'), $ls_userId, 2);\n    if ($ls_date_start_month)$sqlwhere .= ' AND MONTH(t.date_start) = \\''.$ls_date_start_month.'\\'';\n    if ($ls_date_start_year)$sqlwhere .= ' AND YEAR(t.date_start) = \\''.$ls_date_start_year.'\\'';\n    if ($ls_status) $sqlwhere .= natural_search(array('t.status'), $ls_status);\n    if ($ls_target) $sqlwhere .= natural_search(array('t.target'), $ls_target);\n    if ($ls_project_tasktime_list) $sqlwhere .= natural_search('t.fk_project_tasktime_list', $ls_project_tasktime_list);\n    if ($ls_user_approval) $sqlwhere .= natural_search(array('t.fk_user_approval'), $ls_user_approval);\n    //list limit\n    if (!empty($sqlwhere)){\n        $sql .= ' WHERE '.substr($sqlwhere, 5);\n    }\n    // Count total nb of records\n    $nbtotalofrecords = 0;\n    if (empty($conf->global->MAIN_DISABLE_FULL_SCANLIST)) {\n            $sqlcount = 'SELECT COUNT(*) as count FROM '.MAIN_DB_PREFIX.'project_task_timesheet as t';\n            if (!empty($sqlwhere))\n                $sqlcount .= ' WHERE '.substr($sqlwhere, 5);\n            $result = $db->query($sqlcount);\n            $nbtotalofrecords = ($result)?$objcount = $db->fetch_object($result)->count:0;\n    }\n    $sql .= $db->order($sortfield, $sortorder);\n    if (!empty($limit)) {\n            $sql .= $db->plimit($limit+1, $offset);\n    }\n    //execute SQL\n    dol_syslog($script_file, LOG_DEBUG);\n    $resql = $db->query($sql);\n    if ($resql) {\n        if (!empty($ls_userId))        $param .= '&ls_userId='.urlencode($ls_userId);\n            if (!empty($ls_date_start_month))        $param .= '&ls_date_start_month='.urlencode($ls_date_start_month);\n            if (!empty($ls_date_start_year))        $param .= '&ls_date_start_year='.urlencode($ls_date_start_year);\n            if (!empty($ls_status))        $param .= '&ls_status='.urlencode($ls_status);\n            if (!empty($ls_target))        $param .= '&ls_target='.urlencode($ls_target);\n            if (!empty($ls_project_tasktime_list))        $param .= '&ls_project_tasktime_list='.urlencode($ls_project_tasktime_list);\n            if (!empty($ls_user_approval))        $param .= '&ls_user_approval='.urlencode($ls_user_approval);\n            if ($filter && $filter != -1) $param .= '&filtre='.urlencode($filter);\n            $num = $db->num_rows($resql);\n            //print_barre_liste function defined in /core/lib/function.lib.php, possible to add a picto\n            print_barre_liste($langs->trans(\"Timesheetuser\"), $page, $PHP_SELF, $param, $sortfield, $sortorder, '', $num, $nbtotalofrecords);\n            print '<form method = \"POST\" action = \"'.$_SERVER[\"PHP_SELF\"].'\">';\n            print '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n            print '<table class = \"liste\" style = \"border-collapse:separate;\" width = \"100%\">'.\"\\n\";\n            //TITLE\n            print '<tr class = \"liste_titre\">';\n            print_liste_field_titre('User', $PHP_SELF, 't.fk_userid', '', $param, '', $sortfield, $sortorder);\n            print \"\\n\";\n            print_liste_field_titre('DateStart', $PHP_SELF, 't.date_start', '', $param, '', $sortfield, $sortorder);\n            print \"\\n\";\n            //print_liste_field_titre('dateend', $PHP_SELF, 't.date_end', '', $param, '', $sortfield, $sortorder);\n            //print \"\\n\";\n            print_liste_field_titre('Status', $PHP_SELF, 't.status', '', $param, '', $sortfield, $sortorder);\n            print \"\\n\";\n            //print \"\\n\";\n            print '<td class = \"liste_titre\" colspan = \"1\" >';\n            print '</tr>';\n            //SEARCH FIELDS\n            print '<tr class = \"liste_titre\">';\n            //Search field foruserId\n            print '<td class = \"liste_titre\" colspan = \"1\" >';\n    //select_generic($table, $fieldValue, $htmlName, $fieldToShow1, $fieldToShow2 = '', $selected = '', $separator = ' - ', $sqlTailWhere = '', $selectparam = '', $addtionnalChoices = array('NULL' => 'NULL'), $sqlTailTable = '', $ajaxUrl = '')\n\n            //print select_generic('user', 'rowid', 'ls_userId', 'lastname', 'firstname', $ls_userId, ' - ', '', '', null, '', $ajaxNbChar);\n            print $form->select_users($ls_userId, 'ls_userId');\n            print '</td>';\n            //Search field fordate_start\n            print '<td class = \"liste_titre\" colspan = \"1\" >';\n            print '<input class = \"flat\" type = \"text\" size = \"1\" maxlength = \"2\" name = \"date_start_month\" value = \"'.$ls_date_start_month.'\">';\n            $syear = $ls_date_start_year;\n            $formother->select_year($syear?$syear:-1, 'ls_date_start_year', 1, 20, 5);\n            print '</td>';\n            //Search field forstatus\n            print '<td class = \"liste_titre\" colspan = \"1\" >';\n            print $form->selectarray('ls_status', $statusA, $ls_status);\n            print '</td>';\n            //Search field fortarget\n            //        print '<td class = \"liste_titre\" colspan = \"1\" >';\n            //                print select_enum('project_task_time_approval', 'target', 'ls_target', $ls_target);\n            //        print '</td>';\n            //Search field forproject_tasktime_list\n            //        print '<td class = \"liste_titre\" colspan = \"1\" >';\n            //                print '<input class = \"flat\" size = \"16\" type = \"text\" name = \"ls_project_tasktime_list\" value = \"'.$ls_project_tasktimeList.'\"/>';\n            //        print '</td>';\n            //Search field foruser_approval\n            //print '<td class = \"liste_titre\" colspan = \"1\" >';\n            //print select_generic('user', 'rowid', 'ls_user_approval', 'lastname', 'firstname', $ls_user_approval);\n            //print '</td>';\n            print '<td width = \"15px\">';\n            print '<input type = \"image\" class = \"liste_titre\" name = \"search\" src = \"'\n                .img_picto($langs->trans(\"Search\"), 'search.png', '', '', 1).'\" value = \"'\n                .dol_escape_htmltag($langs->trans(\"Search\")).'\" title = \"'\n                .dol_escape_htmltag($langs->trans(\"Search\")).'\">';\n            print '<input type = \"image\" class = \"liste_titre\" name = \"removefilter\" src = \"'\n                .img_picto($langs->trans(\"Search\"), 'searchclear.png', '', '', 1).'\" value = \"'\n                .dol_escape_htmltag($langs->trans(\"RemoveFilter\")).'\" title = \"'\n                .dol_escape_htmltag($langs->trans(\"RemoveFilter\")).'\">';\n            print '</td>';\n            print '</tr>'.\"\\n\";\n            $i = 0;\n            $basedurltab = explode(\"?\", $PHP_SELF);\n            $basedurl = $basedurltab[0].'?action=view&id=';\n            while($i < $num && $i<$limit)\n            {\n                    $obj = $db->fetch_object($resql);\n                    if ($obj) {\n                            // You can use here results\n                            print \"<tr class = \\\"dblist oddeven\\\"  onclick = \\\"location.href='\";\n                            print $basedurl.$obj->rowid.\"'\\\" >\";\n                            print \"<td>\".print_generic('user', 'rowid', $obj->fk_userid, 'lastname', 'firstname', ' ').\"</td>\";\n                            print \"<td>\".dol_print_date($obj->date_start, 'day').\"</td>\";\n                            print \"<td>\".$langs->trans(strtolower($statusA[$obj->status])).\"</td>\";\n                            print '<td><a href = \"'.$PHP_SELF.'?action=delete&id='.$obj->rowid.'\">'.img_delete().'</a></td>';\n                            print \"</tr>\";\n                    }\n                    $i++;\n            }\n    } else {\n        $error++;\n        dol_print_error($db);\n    }\n    print '</table>'.\"\\n\";\n    print '</from>'.\"\\n\";\n    // new button\n    //print '<a href=\"?action=create\" class = \"button\" role = \"button\">'.$langs->trans('New');\n    //print ' '.$langs->trans('Timesheetuser').\"</a>\\n\";\n}\n    break;\n}\ndol_fiche_end();\n/** function to reload page\n *\n * @param string $backtopage    url source\n * @param int $id               id of the object\n * @return null\n */\nfunction reloadpage($backtopage, $id)\n{\n    if (!empty($backtopage)) {\n        header(\"Location: \".$backtopage);\n    //    header(\"Location: \".$_SERVER[\"PHP_SELF\"].'?action=view&ref='.$ref);\n    } elseif ($id>0) {\n        header(\"Location: \".$_SERVER[\"PHP_SELF\"].'?action=view&id='.$id);\n    } else{\n        header(\"Location: \".$_SERVER[\"PHP_SELF\"].'?action=list');\n    }\n    ob_end_flush();\n    exit();\n}\n/** function to prepare hear\n *\n * @global object $langs    lang object\n * @global object $conf     conf object\n * @global object $user     current user\n * @param object  $object   current object browsed\n * @return string\n */\nfunction Timesheetuser_prepare_head($object)\n{\n    global $langs, $conf, $user;\n    $h = 0;\n    $head = array();\n    $head[$h][0] = $_SERVER[\"PHP_SELF\"].'?action=view&id='.$object->id;\n    $head[$h][1] = $langs->trans(\"Card\");\n    $head[$h][2] = 'card';\n    $h++;\n    // Show more tabs from modules\n    // Entries must be declared in modules descriptor with line\n    // $this->tabs = array('entity:+tabname:Title:@timesheet:/timesheet/mypage.php?id=__ID__');to add new tab\n    // $this->tabs = array('entity:-tabname);                                                                                                to remove a tab\n    complete_head_from_modules($conf, $langs, $object, $head, $h, 'timesheet');\n    complete_head_from_modules($conf, $langs, $object, $head, $h, 'timesheet', 'remove');\n    $head[$h][0] = $_SERVER[\"PHP_SELF\"].'?action=viewdoc&id='.$object->id;\n    $head[$h][1] = $langs->trans(\"Documents\");\n    $head[$h][2] = 'documents';\n    $h++;\n    $head[$h][0] = $_SERVER[\"PHP_SELF\"].'?action=viewinfo&id='.$object->id;\n    $head[$h][1] = $langs->trans(\"Info\");\n    $head[$h][2] = 'info';\n    $h++;\n    return $head;\n}\n// End of page\nllxFooter();\n$db->close();\n", "<?php\n/*\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *  \\file       htdocs/admin/project.php\n *  \\ingroup    project\n *  \\brief      Page to setup project module\n */\ninclude '../core/lib/includeMain.lib.php';\ninclude '../core/lib/generic.lib.php';\n\nrequire_once DOL_DOCUMENT_ROOT . '/core/lib/admin.lib.php';\nrequire_once DOL_DOCUMENT_ROOT . '/core/lib/project.lib.php';\nrequire_once DOL_DOCUMENT_ROOT . '/projet/class/project.class.php';\nrequire_once DOL_DOCUMENT_ROOT . '/projet/class/task.class.php';\n\n$langs->load(\"admin\");\n$langs->load(\"errors\");\n$langs->load(\"other\");\n$langs->load(\"timesheet@timesheet\");\nif (!$user->admin) {\n    $accessforbidden = accessforbidden(\"you need to be admin\");\n}\n$action = getpost('action', 'alpha');\n$attendance = $conf->global->TIMESHEET_ATTENDANCE;\n\n$timetype = $conf->global->TIMESHEET_TIME_TYPE;\n$hoursperday = $conf->global->TIMESHEET_DAY_DURATION;\n$timeSpan = $conf->global->TIMESHEET_TIME_SPAN;\n//hide/show\n$hidedraft = $conf->global->TIMESHEET_HIDE_DRAFT;\n$hidezeros = $conf->global->TIMESHEET_HIDE_ZEROS;\n$headers = $conf->global->TIMESHEET_HEADERS;\n$hideref = $conf->global->TIMESHEET_HIDE_REF;\n$showTimespentNote = $conf->global->TIMESHEET_SHOW_TIMESPENT_NOTE;\n\n$adddocs = $conf->global->TIMESHEET_ADD_DOCS;\n\n\n$addForOther = $conf->global->TIMESHEET_ADD_FOR_OTHER;\n$whiteListMode = $conf->global->TIMESHEET_WHITELIST_MODE;\n$whiteList = $conf->global->TIMESHEET_WHITELIST;\n\n$draftColor = $conf->global->TIMESHEET_COL_DRAFT;\n$valueColor = $conf->global->TIMESHEET_COL_VALUE;\n$frozenColor = $conf->global->TIMESHEET_COL_FROZEN;\n$submittedColor = $conf->global->TIMESHEET_COL_SUBMITTED;\n$approvedColor = $conf->global->TIMESHEET_COL_APPROVED;\n$cancelledColor = $conf->global->TIMESHEET_COL_CANCELLED;\n$rejectedColor = $conf->global->TIMESHEET_COL_REJECTED;\n$maxhoursperday = $conf->global->TIMESHEET_DAY_MAX_DURATION;\n$addholidaytime = $conf->global->TIMESHEET_ADD_HOLIDAY_TIME;\n$blockholiday = $conf->global->TIMESHEET_BLOCK_HOLIDAY;\n$addpublicholidaytime = $conf->global->TIMESHEET_ADD_PUBLICHOLIDAY_TIME;\n$blockpublicholiday = $conf->global->TIMESHEET_BLOCK_PUBLICHOLIDAY;\n$overtimecheckweeks = $conf->global->TIMESHEET_OVERTIME_CHECK_WEEKS;\n$opendays = str_split($conf->global->TIMESHEET_OPEN_DAYS);\n\n//approval\n$approvalbyweek = $conf->global->TIMESHEET_APPROVAL_BY_WEEK;\n$maxApproval = $conf->global->TIMESHEET_MAX_APPROVAL;\n$apflows = str_split($conf->global->TIMESHEET_APPROVAL_FLOWS);\nif (count($apflows) != 6) {\n    $apflows = array('_', '0', '0', '0', '0', '0');\n}\n\n//Invoice part\n$invoicemethod = $conf->global->TIMESHEET_INVOICE_METHOD;\n$invoicetasktime = $conf->global->TIMESHEET_INVOICE_TASKTIME;\n$invoicetimetype = $conf->global->TIMESHEET_INVOICE_TIMETYPE;\n$invoiceservice = $conf->global->TIMESHEET_INVOICE_SERVICE;\n$invoiceshowtask = $conf->global->TIMESHEET_INVOICE_SHOW_TASK;\n$invoiceshowuser = $conf->global->TIMESHEET_INVOICE_SHOW_USER;\n\n//event\n$maxhoursperevent = $conf->global->TIMESHEET_EVENT_MAX_DURATION;\n$minsecondsperevent = $conf->global->TIMESHEET_EVENT_MIN_DURATION;\n$defaulthoursperevent = $conf->global->TIMESHEET_EVENT_DEFAULT_DURATION;\n$blockTimespent = $conf->global->TIMESHEET_EVENT_NOT_CREATE_TIMESPENT;\n//pdf\n$pdfhidesignbox = intval($conf->global->TIMESHEET_PDF_HIDE_SIGNBOX);\n$noteOnPDF = $conf->global->TIMESHEET_PDF_NOTEISOTASK;\n$pdfHideName = intval($conf->global->TIMESHEET_PDF_HIDE_NAME);\n//advanced\n$exportFormat = $conf->global->TIMESHEET_EXPORT_FORMAT;\n$evalAddLine = $conf->global->TIMESHEET_EVAL_ADDLINE;\n$tsRound = intval($conf->global->TIMESHEET_ROUND);\n$importagenda = intval($conf->global->TIMESHEET_IMPORT_AGENDA);\n$dropdownAjax = $conf->global->MAIN_DISABLE_AJAX_COMBOX;\n$searchbox = intval($conf->global->TIMESHEET_SEARCHBOX);\n$unblockInvoiced = $conf->global->TIMESHEET_UNBLOCK_INVOICED;\n$unblockClosed = $conf->global->TIMESHEET_UNBLOCK_CLOSED;\n$reportInvoicedCol= $conf->global->TIMESHEET_REPORT_INVOICED_COL;\n$reportUngroup = $conf->global->TIMESHEET_REPORT_UNGROUP;\n$allowPublic = $conf->global->TIMESHEET_ALLOW_PUBLIC;\n\n\nif (count($opendays)!=8) {\n    $opendays = array('_', '0', '0', '0', '0', '0', '0', '0');\n}\n\n$error = 0;\n/** make sure that there is a 0 iso null\n *\n * @param mixed $var var can be an int of empty string\n * @param type $int defautl value is var is null\n * @return int\n */\nfunction null2int($var, $int = 0)\n{\n    return($var == '' || !is_numeric($var))?$int:$var;\n}\n\nswitch($action) {\n    case \"save\":\n        //general option\n        $hoursperday = getpost('hoursperday', 'int');\n        if ($hoursperday == 0) {\n            //error handling if hour per day is empty\n            $hoursperday = $conf->global->TIMESHEET_DAY_DURATION;\n            setEventMessage($langs->transnoentitiesnoconv(\"HourPerDayNotNull\"), 'errors');\n            break;\n        }\n        dolibarr_set_const($db, \"TIMESHEET_DAY_DURATION\", $hoursperday, 'chaine', 0, '', $conf->entity);\n        $timetype = getpost('timeType', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_TIME_TYPE\", $timetype, 'chaine', 0, '', $conf->entity);\n        $timeSpan = getpost('timeSpan', 'alpha');\n        if ($timeSpan!=$conf->global->TIMESHEET_TIME_SPAN) {\n            // delete the unsubmitted timesheet so the new time span will be applied\n            $sql = 'DELETE FROM '.MAIN_DB_PREFIX.'project_task_timesheet';\n            $sql .= ' WHERE status IN (1, 5)';//'DRAFT', 'REJECTED'\n            dol_syslog('timesheetsetu:deletedraft', LOG_DEBUG);\n            $resql = $db->query($sql);\n        }\n        dolibarr_set_const($db, \"TIMESHEET_TIME_SPAN\", $timeSpan, 'chaine', 0, '', $conf->entity);\n        $attendance = getpost('attendance', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ATTENDANCE\", $attendance, 'int', 0, '', $conf->entity);\n        $maxhoursperevent = getpost('maxhoursperevent', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_EVENT_MAX_DURATION\", $maxhoursperevent, 'int', 0, '', $conf->entity);\n        $minsecondsperevent = getpost('minSecondsPerEvent', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_EVENT_MIN_DURATION\", $minsecondsperevent, 'int', 0, '', $conf->entity);\n        $defaulthoursperevent = getpost('defaulthoursperevent', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_EVENT_DEFAULT_DURATION\", $defaulthoursperevent, 'int', 0, '', $conf->entity);\n        $maxhoursperday = getpost('maxhoursperday', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_DAY_MAX_DURATION\", $maxhoursperday, 'int', 0, '', $conf->entity);\n        $hidedraft = getpost('hidedraft', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_HIDE_DRAFT\", $hidedraft, 'int', 0, '', $conf->entity);\n        $hidezeros = getpost('hidezeros', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_HIDE_ZEROS\", $hidezeros, 'int', 0, '', $conf->entity);\n        $maxApproval = getpost('maxapproval', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_MAX_APPROVAL\", $maxApproval, 'int', 0, '', $conf->entity);\n        $approvalbyweek = getpost('approvalbyweek', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_APPROVAL_BY_WEEK\", $approvalbyweek, 'int', 0, '', $conf->entity);\n        $hideref = getpost('hideref', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_HIDE_REF\", $hideref, 'int', 0, '', $conf->entity);\n        $whiteListMode = getpost('blackWhiteListMode', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_WHITELIST_MODE\", $whiteList?$whiteListMode:2, 'int', 0, '', $conf->entity);\n        $whiteList = getpost('blackWhiteList', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_WHITELIST\", $whiteList, 'int', 0, '', $conf->entity);\n        $dropdownAjax = getpost('dropdownAjax', 'int');\n        dolibarr_set_const($db, \"MAIN_DISABLE_AJAX_COMBOX\", $dropdownAjax, 'int', 0, '', $conf->entity);\n        $addForOther = getpost('addForOther', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ADD_FOR_OTHER\", $addForOther, 'int', 0, '', $conf->entity);\n        //headers handling\n        $showProject = getpost('showProject', 'int');\n        $showTaskParent = getpost('showTaskParent', 'int');\n        $showTasks = getpost('showTasks', 'int');\n        $showDateStart = getpost('showDateStart', 'int');\n        $showDateEnd = getpost('showDateEnd', 'int');\n        $showProgress = getpost('showProgress', 'int');\n        $showCompany = getpost('showCompany', 'int');\n        $showNote = getpost('showNote', 'int');\n        $showTotal = getpost('showTotal', 'int');\n        $showProgressDeclared = getpost('showProgressDeclared', 'int');\n        $headers = $showNote?'Note':'';\n        $headers .= $showCompany?(empty($headers)?'':'||').'Company':'';\n        $headers .= $showProject?(empty($headers)?'':'||').'Project':'';\n        $headers .= $showTaskParent?(empty($headers)?'':'||').'TaskParent':'';\n        $headers .= $showTasks?(empty($headers)?'':'||').'Tasks':'';\n        $headers .= $showDateStart?(empty($headers)?'':'||').'DateStart':'';\n        $headers .= $showDateEnd?(empty($headers)?'':'||').'DateEnd':'';\n        $headers .= $showProgress?(empty($headers)?'':'||').'Progress':'';\n        $headers .= $showProgressDeclared?(empty($headers)?'':'||').'ProgressDeclared':'';\n        $headers .= $showTotal?(empty($headers)?'':'||').'Total':'';\n        dolibarr_set_const($db, \"TIMESHEET_HEADERS\", $headers, 'chaine', 0, '', $conf->entity);\n        //color handling\n        $draftColor = getpost('draftColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_DRAFT\", $draftColor, 'chaine', 0, '', $conf->entity);\n        $valueColor = getpost('valueColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_VALUE\", $valueColor, 'chaine', 0, '', $conf->entity);\n        $frozenColor = getpost('frozenColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_FROZEN\", $frozenColor, 'chaine', 0, '', $conf->entity);\n        $submittedColor = getpost('submittedColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_SUBMITTED\", $submittedColor, 'chaine', 0, '', $conf->entity);\n        $approvedColor = getpost('approvedColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_APPROVED\", $approvedColor, 'chaine', 0, '', $conf->entity);\n        $rejectedColor = getpost('rejectedColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_REJECTED\", $rejectedColor, 'chaine', 0, '', $conf->entity);\n        $cancelledColor = getpost('cancelledColor', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_COL_CANCELLED\", $cancelledColor, 'chaine', 0, '', $conf->entity);\n        //holiday\n        $addholidaytime = getpost('addholidaytime', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_ADD_HOLIDAY_TIME\", $addholidaytime, 'chaine', 0, '', $conf->entity);\n        // block holday\n        $blockholiday = getpost('blockholiday', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_BLOCK_HOLIDAY\", $blockholiday, 'chaine', 0, '', $conf->entity);\n        //public holiday\n        $addpublicholidaytime = getpost('addpublicholidaytime', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_ADD_PUBLICHOLIDAY_TIME\", $addpublicholidaytime, 'chaine', 0, '', $conf->entity);\n        // block public holday\n        $blockpublicholiday = getpost('blockpublicholiday', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_BLOCK_PUBLICHOLIDAY\", $blockpublicholiday, 'chaine', 0, '', $conf->entity);\n\n        // number of week to check for overtime box\n        $overtimecheckweeks = getpost('overtimecheckweeks', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_OVERTIME_CHECK_WEEKS\", $overtimecheckweeks, 'chaine', 0, '', $conf->entity);\n        //docs\n        $adddocs = getpost('adddocs', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ADD_DOCS\", $adddocs, 'chaine', 0, '', $conf->entity);\n        // open days\n        $opendays = array('_', '0', '0', '0', '0', '0', '0', '0');\n        foreach (getpost('opendays', 'array') as $key => $day) {\n            $opendays[$key] = $day;\n        }\n        dolibarr_set_const($db, \"TIMESHEET_OPEN_DAYS\", implode('', $opendays), 'chaine', 0, '', $conf->entity);\n        //approval flows\n        $apflows = array('_', '0', '0', '0', '0', '0');\n        foreach (getpost('apflows', 'array') as $key => $flow) {\n            $apflows[$key] = $flow;\n        }\n        //INVOICE\n        dolibarr_set_const($db, \"TIMESHEET_APPROVAL_FLOWS\", implode('', $apflows), 'chaine', 0, '', $conf->entity)  ;\n        $invoicemethod = getpost('invoiceMethod', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_METHOD\", $invoicemethod, 'chaine', 0, '', $conf->entity);\n        $invoicetasktime = getpost('invoiceTaskTime', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_TASKTIME\", $invoicetasktime, 'chaine', 0, '', $conf->entity);\n        $invoicetimetype = getpost('invoiceTimeType', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_TIMETYPE\", $invoicetimetype, 'chaine', 0, '', $conf->entity);\n        $invoiceservice = getpost('invoiceservice', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_SERVICE\", $invoiceservice, 'int', 0, '', $conf->entity);\n        $invoiceshowtask = getpost('invoiceShowTask', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_SHOW_TASK\", $invoiceshowtask, 'int', 0, '', $conf->entity);\n        $invoiceshowuser = getpost('invoiceShowUser', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_INVOICE_SHOW_USER\", $invoiceshowuser, 'int', 0, '', $conf->entity);\n        $showTimespentNote = getpost('showTimespentNote', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_SHOW_TIMESPENT_NOTE\", $showTimespentNote, 'int', 0, '', $conf->entity);\n        $noteOnPDF = getpost('noteOnPDF', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_PDF_NOTEISOTASK\", $noteOnPDF, 'chaine', 0, '', $conf->entity);\n        $pdfhidesignbox = getpost('pdfHideSignbox', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_PDF_HIDE_SIGNBOX\", $pdfhidesignbox, 'chaine', 0, '', $conf->entity);\n        $pdfHideName = getpost('pdfHideName', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_PDF_HIDE_NAME\", $pdfHideName, 'chaine', 0, '', $conf->entity);\n        // serach box\n        $searchbox = getpost('searchBox', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_SEARCHBOX\", $searchbox, 'int', 0, '', $conf->entity);\n        setEventMessage($langs->transnoentitiesnoconv(\"ConfigurationSaved\"));\n        $blockTimespent = getpost('blockTimespent', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_EVENT_NOT_CREATE_TIMESPENT\", $blockTimespent, 'chaine', 0, '', $conf->entity);\n        $evalAddLine = getpost('evalAddLine', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_EVAL_ADDLINE\", $evalAddLine, 'int', 0, '', $conf->entity);\n        $exportFormat = getpost('exportFormat', 'alpha');\n        dolibarr_set_const($db, \"TIMESHEET_EXPORT_FORMAT\", $exportFormat, 'int', 0, '', $conf->entity);\n        $maxApproval = getpost('maxapproval', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_MAX_APPROVAL\", $maxApproval, 'int', 0, '', $conf->entity);\n        $unblockInvoiced = getpost('unblockInvoiced', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_UNBLOCK_INVOICED\", $unblockInvoiced, 'int', 0, '', $conf->entity);\n        $unblockClosed = getpost('unblockClosed', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_UNBLOCK_CLOSED\", $unblockClosed, 'int', 0, '', $conf->entity);\n        $reportInvoicedCol = getpost('reportInvoicedCol', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_REPORT_INVOICED_COL\", $reportInvoicedCol, 'int', 0, '', $conf->entity);\n        $reportUngroup = getpost('reportUngroup', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_REPORT_UNGROUP\", $reportUngroup, 'int', 0, '', $conf->entity);\n        $allowPublic = getpost('allowPublic', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ALLOW_PUBLIC\", $allowPublic, 'int', 0, '', $conf->entity);\n        $tsRound = getpost('tsRound', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_ROUND\", $tsRound, 'int', 0, '', $conf->entity);\n        $importagenda = getpost('importagenda', 'int');\n        dolibarr_set_const($db, \"TIMESHEET_IMPORT_AGENDA\", $importagenda, 'int', 0, '', $conf->entity);\n\n        break;\n    default:\n        break;\n}\n$headersT = explode('||', $headers);\nforeach ($headersT as $header) {\n    switch($header) {\n        case 'Project':\n            $showProject = 1;\n            break;\n        case 'TaskParent':\n            $showTaskParent = 1;\n            break;\n        case 'Tasks':\n            $showTasks = 1;\n            break;\n        case 'DateStart':\n            $showDateStart = 1;\n            break;\n        case 'DateEnd':\n            $showDateEnd = 1;\n            break;\n        case 'Progress':\n            $showProgress = 1;\n            break;\n        case 'Company':\n            $showCompany = 1;\n            break;\n        case 'Note':\n            $showNote = 1;\n            break;\n        case 'Total':\n            $showTotal = 1;\n            break;\n        case 'ProgressDeclared':\n            $showProgressDeclared = 1;\n            break;\n        default:\n            break;\n    }\n}\n\n/*\n *  VIEW\n *  */\n//permet d'afficher la structure dolibarr\n$morejs = array(\"/timesheet/core/js/timesheet.js?v2.0\", \"/timesheet/core/js/jscolor.js\");\nllxHeader(\"\", $langs->trans(\"timesheetSetup\"), '', '', '', '', $morejs, '', 0, 0);\nif ($action = \"save\")echo \"<script>window.history.pushState('', '', '\".explode('?', \n    $_SERVER['REQUEST_URI'], 2)[0].\"');</script>\";\n$linkback = '<a href = \"'.DOL_URL_ROOT.'/admin/modules.php\">'.$langs->trans(\"BackToModuleList\").'</a>';\nprint load_fiche_titre($langs->trans(\"timesheetSetup\"), $linkback, 'title_setup');\n\n/*\n * TABS\n */\necho '<div class=\"tabs\" data-role = \"controlgroup\" data-type = \"horizontal\"  >';\n\techo '<div id=\"defaultOpen\"  class=\"inline-block tabsElem\" onclick = \"openTab(event,\\'general\\')\"><a href=\"javascript:void(0);\"  class=\"tabunactive tab inline-block\" data-role = \"button\">'.$langs->trans('General').'</a></div>';\n\techo '<div class=\"inline-block tabsElem\" onclick=\"openTab(event,\\'advanced\\')\"><a href=\"javascript:void(0);\" class=\"tabunactive tab inline-block\" data-role = \"button\">'.$langs->trans('Advanced').'</a></div>';\n\techo '<div class=\"inline-block tabsElem\" onclick=\"openTab(event,\\'invoice\\')\"><a href=\"javascript:void(0);\" class=\"tabunactive tab inline-block\" data-role = \"button\">'.$langs->trans('Invoice').'</a></div>';\n\techo '<div class=\"inline-block tabsElem\" onclick=\"openTab(event,\\'other\\')\"><a href=\"javascript:void(0);\" class=\"tabunactive tab inline-block\" data-role = \"button\">'.$langs->trans('Other').'</a></div>';\necho '</div>';\n\n/*\n * TAB General\n */\necho '<div id=\"general\" class=\"tabBar\">';\nprint '<span class=\"opacitymedium\">'.$langs->trans(\"GeneralTabDesc\").'</span>';\nprint load_fiche_titre( $langs->trans( \"GeneralOption\" ), '', '' );\n\necho '<form name=\"settings\" action=\"?action=save\" method=\"POST\">';\n$token = getToken();\necho '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// activate attendance\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Attendance\");\necho '</td><td align=\"left\">'.$langs->trans(\"AttendanceDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"attendance\" value=\"1\" ';\necho (($attendance == '1')?'checked':'').\"></td></tr>\";\n\n// type time\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"timeType\").'</td><td align=\"left\">'.$langs->trans(\"timeTypeDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"timeType\" value=\"hours\" ';\necho ($timetype == \"hours\"?\"checked\":\"\").'> '.$langs->trans(\"Hours\").'<br>';\necho '<input type = \"radio\" name = \"timeType\" value=\"days\" ';\necho ($timetype == \"days\"?\"checked\":\"\").'> '.$langs->trans(\"Days\").\"</td></tr>\";\n//hours perdays\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"hoursperdays\");\necho '</td><td align=\"left\">'.$langs->trans(\"hoursPerDaysDesc\").'</td>';\necho '<td align=\"left\"><input type = \"text\" name = \"hoursperday\" value=\"'.$hoursperday;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n//max hours perdays\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"maxhoursperdays\");//FIXTRAD\necho '</td><td align=\"left\">'.$langs->trans(\"maxhoursPerDaysDesc\").'</td>';// FIXTRAD\necho '<td align=\"left\"><input type = \"text\" name = \"maxhoursperday\" value=\"'.$maxhoursperday;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n// time span\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"timeSpan\").'</td><td align=\"left\">'.$langs->trans(\"timeSpanDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"timeSpan\" value=\"week\" ';\necho ($timeSpan == \"week\"?\"checked\":\"\").'> '.$langs->trans(\"Week\").'<br>';\necho '<input type = \"radio\" name = \"timeSpan\" value=\"splitedWeek\" ';\necho ($timeSpan == \"splitedWeek\"?\"checked\":\"\").'> '.$langs->trans(\"splitedWeek\").'<br>';\necho '<input type = \"radio\" name = \"timeSpan\" value=\"month\" ';\necho ($timeSpan == \"month\"?\"checked\":\"\").'> '.$langs->trans(\"Month\").\"</td></tr>\";\n// add holiday time\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"addholidaytime\");\necho '</td><td align=\"left\">'.$langs->trans(\"addholidaytimeDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"addholidaytime\" value=\"1\" ';\necho (($addholidaytime == '1')?'checked':'').\"></td></tr>\";\n// block holiday \necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blockholiday\");\necho '</td><td align=\"left\">'.$langs->trans(\"blockholidayDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"blockholiday\" value=\"1\" ';\necho (($blockholiday == '1')?'checked':'').\"></td></tr>\";\n// add public holiday time\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"addpublicholidaytime\");\necho '</td><td align=\"left\">'.$langs->trans(\"addpublicholidaytimeDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"addpublicholidaytime\" value=\"1\" ';\necho (($addpublicholidaytime == '1')?'checked':'').\"></td></tr>\";\n// block public holiday \necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blockpublicholiday\");\necho '</td><td align=\"left\">'.$langs->trans(\"blockpublicholidayDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"blockpublicholiday\" value=\"1\" ';\necho (($blockpublicholiday == '1')?'checked':'').\"></td></tr>\";\n// overtime week to check \necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"overtimeCheckWeeks\");//FIXTRAD\necho '</td><td align=\"left\">'.$langs->trans(\"overtimeCheckWeeksDesc\").'</td>';// FIXTRAD\necho '<td align=\"left\"><input type = \"text\" name = \"overtimecheckweeks\" value=\"'.$overtimecheckweeks;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n\n// add docs\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"adddocs\");\necho '</td><td align=\"left\">'.$langs->trans(\"adddocsDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"adddocs\" value=\"1\" ';\necho (($adddocs == '1')?'checked':'').\"></td></tr>\";\n//Add for other\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"addForOther\");\necho '</td><td align=\"left\">'.$langs->trans(\"addForOtherDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"addForOther\" value=\"1\" ';\necho (($addForOther == '1')?'checked':'').\"></td></tr>\";\necho \"</table><br>\";\n\nprint load_fiche_titre( $langs->trans(\"DiplayOptions\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// hide draft\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"hidedraft\");\necho '</td><td align=\"left\">'.$langs->trans(\"hideDraftDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"hidedraft\" value=\"1\" ';\necho (($hidedraft == '1')?'checked':'').\"></td></tr>\";\n// hide ref\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"hideref\");\necho '</td><td align=\"left\">'.$langs->trans(\"hideRefDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"hideref\" value=\"1\" ';\necho (($hideref == '1')?'checked':'').\"></td></tr>\";\n// hide zeros\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"hidezeros\");\necho '</td><td align=\"left\">'.$langs->trans(\"hideZerosDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"hidezeros\" value=\"1\" ';\necho (($hidezeros == '1')?'checked':'').\"></td></tr>\";\n// show timespentNote\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"ShowTimespentNote\");\necho '</td><td align=\"left\">'.$langs->trans(\"ShowTimespentNoteDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showTimespentNote\" value=\"1\" ';\necho (($showTimespentNote == '1')?'checked':'').\"></td></tr>\";\necho \"</table><br>\";\n\nprint load_fiche_titre( $langs->trans(\"OpenDays\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th>'.$langs->trans(\"Monday\").'</th><th>';\necho $langs->trans(\"Tuesday\").'</th><th>'.$langs->trans(\"Wednesday\").'</th><th>';\necho $langs->trans(\"Thursday\").'</th><th>'.$langs->trans(\"Friday\").'</th><th>';\necho $langs->trans(\"Saturday\").'</th><th>'.$langs->trans(\"Sunday\").'</th>';\necho '<input type = \"hidden\" name = \"opendays[0]\" value=\"_\">';\necho \"</tr><tr>\";\nfor ($i = 1; $i<8; $i++) {\n    echo  '<td width = \"14%\" style = \"text-align:left\"><input type = \"checkbox\" name = \"opendays['.$i.']\" value=\"1\" ';\n    echo (($opendays[$i] == '1')?'checked':'').\"></td>\";\n}\necho \"</tr></table><br>\";\n\nprint load_fiche_titre( $langs->trans(\"ColumnToShow\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// Project\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Project\");\necho '</td><td align=\"left\">'.$langs->trans(\"ProjectColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showProject\" value=\"1\" ';\necho (($showProject == '1')?'checked':'').\"></td></tr>\";\n// task parent\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"TaskParent\");\necho '</td><td align=\"left\">'.$langs->trans(\"TaskParentColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showTaskParent\" value=\"1\" ';\necho (($showTaskParent == '1')?'checked':'').\"></td></tr>\";\n// task\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Tasks\");\necho '</td><td align=\"left\">'.$langs->trans(\"TasksColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showTasks\" value=\"1\" ';\necho (($showTasks == '1')?'checked':'').\"></td></tr>\";\n// date de debut\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"DateStart\");\necho '</td><td align=\"left\">'.$langs->trans(\"DateStartColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showDateStart\" value=\"1\" ';\necho (($showDateStart == '1')?'checked':'').\"></td></tr>\";\n// date de fin\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"DateEnd\");\necho '</td><td align=\"left\">'.$langs->trans(\"DateEndColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showDateEnd\" value=\"1\" ';\necho (($showDateEnd == '1')?'checked':'').\"></td></tr>\";\n// Progres\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Progress\");\necho '</td><td align=\"left\">'.$langs->trans(\"ProgressColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showProgress\" value=\"1\" ';\necho (($showProgress == '1')?'checked':'').\"></td></tr>\";\n// ProgresD\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"ProgressDeclared\");\necho '</td><td align=\"left\">'.$langs->trans(\"ProgressDeclaredColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showProgressDeclared\" value=\"1\" ';\necho (($showProgressDeclared == '1')?'checked':'').\"></td></tr>\";\n// Company\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Company\");\necho '</td><td align=\"left\">'.$langs->trans(\"CompanyColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showCompany\" value=\"1\" ';\necho (($showCompany == '1')?'checked':'').\"></td></tr>\";\n//note\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Note\");\necho '</td><td align=\"left\">'.$langs->trans(\"NoteDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showNote\" value=\"1\" ';\necho (($showNote == '1')?'checked':'').\"></td></tr>\";\n//Total\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"Total\");\necho '</td><td align=\"left\">'.$langs->trans(\"TotalDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"showTotal\" value=\"1\" ';\necho (($showTotal == '1')?'checked':'').\"></td></tr>\";\n/*\n// custom FIXME\necho  '<tr class=\"oddeven\"><th align=\"left\">'.$langs->trans(\"CustomCol\");\necho '</th><th align=\"left\">'.$langs->trans(\"CustomColDesc\").'</th>';\necho  '<th align=\"left\"><input type = \"checkbox\" name = \"showCustomCol\" value=\"1\" ';\necho (($showCustomCol == '1')?'checked':'').\"</th></tr>\";\n*/\necho '</table>';\necho \"</div>\";\n\n/*\n * TAB ADVANCED\n */\necho '<div id=\"advanced\" class=\"tabBar\">';\nprint '<span class=\"opacitymedium\">'.$langs->trans(\"AdvancedTabDesc\").'</span>';\n\nprint load_fiche_titre( $langs->trans(\"Approval\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\n// approval by week\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"approvalbyweek\");\necho '</td><td align=\"left\">'.$langs->trans(\"approvalbyweekDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"approvalbyweek\" value=\"0\" ';\necho ($approvalbyweek == '0'?\"checked\":\"\").'> '.$langs->trans(\"User\").'<br>';\necho '<input type = \"radio\" name = \"approvalbyweek\" value=\"1\" ';\necho ($approvalbyweek == '1'?\"checked\":\"\").'> '.$langs->trans(\"Week\").'<br>';\necho '<input type = \"radio\" name = \"approvalbyweek\" value=\"2\" ';\necho ($approvalbyweek == '2'?\"checked\":\"\").'> '.$langs->trans(\"Month\").\"</td></tr>\";\n// max approval\necho '<tr class=\"oddeven\" ><td align=\"left\">'.$langs->trans(\"maxapproval\");//FIXTRAD\necho '</td><td align=\"left\">'.$langs->trans(\"maxapprovalDesc\").'</td>';// FIXTRAD\necho '<td  align=\"left\"><input type = \"text\" name = \"maxapproval\" value=\"'.$maxApproval;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\necho '</table>';\n\n// approval flows\nprint load_fiche_titre( $langs->trans(\"ApplovalFlow\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\");\necho '<input type = \"hidden\" name = \"apflows[0]\" value=\"_\"></th>';\necho \"</tr>\";\n//team\necho '<tr><td>'.$langs->trans(\"Team\").'</td><td>'.$langs->trans(\"TeamApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[1]\" value=\"1\"';\necho (($apflows[1] == '1')?'checked':'').'></td><tr>';\n//Project\necho '<tr><td>'.$langs->trans(\"Project\").'</td><td>'.$langs->trans(\"ProjectApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[2]\" value=\"1\"';\necho (($apflows[2] == '1')?'checked':'').'></td><tr>';\n/*//Customer\necho '<tr style = \"display:none\"><td>'.$langs->trans(\"Customer\").'</td><td>'.$langs->trans(\"CustomerApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[3]\" value=\"1\"';\necho (($apflows[3] == '1')?'checked':'').'></td><tr>';\n//Supplier\necho '<tr style = \"display:none\"><td>'.$langs->trans(\"Supplier\").'</td><td>'.$langs->trans(\"SupplierApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[4]\" value=\"1\"';\necho (($apflows[4] == '1')?'checked':'').'></td><tr>';\n//Other\necho '<tr style = \"display:none\"><td>'.$langs->trans(\"Other\").'</td><td>'.$langs->trans(\"OtherApprovalDesc\").'</td><td><input type = \"checkbox\" name = \"apflows[5]\" value=\"1\"';\necho (($apflows[5] == '1')?'checked':'').'></td><tr>';\n*/\necho \"</tr></table><br>\";\nprint load_fiche_titre( $langs->trans(\"Attendance\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n//min hours per event\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"minSecondsPerEvent\");\necho '</td><td align=\"left\">'.$langs->trans(\"minSecondsPerEventDesc\").'</td>';\necho '<td align=\"left\"><input type = \"text\" name = \"minSecondsPerEvent\" value=\"'.$minsecondsperevent;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n//max hours per event\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"maxHoursPerEvent\");\necho '</td><td align=\"left\">'.$langs->trans(\"maxHoursPerEventDesc\").'</td>';\necho '<td align=\"left\"><input type = \"text\" name = \"maxhoursperevent\" value=\"'.$maxhoursperevent;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n//default hours per event\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"defaultHoursPerEvent\");\necho '</td><td align=\"left\">'.$langs->trans(\"defaultHoursPerEventDesc\").'</td>';\necho '<td align=\"left\"><input type = \"text\" name = \"defaulthoursperevent\" value=\"'.$defaulthoursperevent;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n// block creation of timespent\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blockTimespent\");\necho '</td><td align=\"left\">'.$langs->trans(\"blockTimespentDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"blockTimespent\" value=\"1\" ';\necho (($blockTimespent == '1')?'checked':'').\"></td></tr>\";\necho \"</table><br>\";\n\n//Color\nprint load_fiche_titre( $langs->trans(\"Color\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// color draft\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"draft\");\necho '</td><td align=\"left\">'.$langs->trans(\"draftColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"draftColor\" class=\"jscolor\" value=\"';\necho $draftColor.\"\\\"></td></tr>\";\n// color value\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"value\");\necho '</td><td align=\"left\">'.$langs->trans(\"valueColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"valueColor\" class=\"jscolor\" value=\"';\necho $valueColor.\"\\\"></td></tr>\";\n// color frozen\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"frozen\");\necho '</td><td align=\"left\">'.$langs->trans(\"frozenColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"frozenColor\" class=\"jscolor\" value=\"';\necho $frozenColor.\"\\\"></td></tr>\";\n// color submitted\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"submitted\");\necho '</td><td align=\"left\">'.$langs->trans(\"submittedColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"submittedColor\" class=\"jscolor\" value=\"';\necho $submittedColor.\"\\\"></td></tr>\";\n// color approved\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"approved\");\necho '</td><td align=\"left\">'.$langs->trans(\"approvedColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"approvedColor\" class=\"jscolor\" value=\"';\necho $approvedColor.\"\\\"></td></tr>\";\n// color cancelled\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"cancelled\");\necho '</td><td align=\"left\">'.$langs->trans(\"cancelledColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"cancelledColor\" class=\"jscolor\" value=\"';\necho $cancelledColor.\"\\\"></td></tr>\";\n// color rejected\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"rejected\");\necho '</td><td align=\"left\">'.$langs->trans(\"rejectedColorDesc\").'</td>';\necho  '<td align=\"left\"><input name = \"rejectedColor\" class=\"jscolor\" value=\"';\necho $rejectedColor.\"\\\"></td></tr>\";\necho '</table><br>';\n\n//whitelist mode\nprint load_fiche_titre( $langs->trans(\"blackWhiteList\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// whitelist on/off\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blackWhiteList\");\necho '</td><td align=\"left\">'.$langs->trans(\"blackWhiteListDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"blackWhiteList\" value=\"1\" ';\necho (($whiteList == '1')?'checked':'').\"></td></tr>\";\n// Project\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"blackWhiteListMode\").'</td>';\necho '<td align=\"left\">'.$langs->trans(\"blackWhiteListModeDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"blackWhiteListMode\" value=\"0\" ';\necho ($whiteListMode == \"0\"?\"checked\":\"\").'> '.$langs->trans(\"modeWhiteList\").'<br>';\necho '<input type = \"radio\" name = \"blackWhiteListMode\" value=\"1\" ';\necho ($whiteListMode == \"1\"?\"checked\":\"\").'> '.$langs->trans(\"modeBlackList\").\"<br>\";\necho '<input type = \"radio\" name = \"blackWhiteListMode\" value=\"2\" ';\necho ($whiteListMode == \"2\"?\"checked\":\"\").'> '.$langs->trans(\"modeNone\").\"</td></tr>\";\necho '</table><br>';\necho '<br>';\n\n//advanced behaviour\nprint load_fiche_titre( $langs->trans(\"AdvancedBehaviour\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n// searchbox\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"searchbox\");\necho '</td><td align=\"left\">'.$langs->trans(\"searchboxDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"searchBox\" value=\"1\" ';\necho (($searchbox == '1')?'checked':'').\"></td></tr>\";\n// ROUND\necho '<tr class=\"oddeven\" ><td align=\"left\">'.$langs->trans(\"tsRound\");\necho '</td><td align=\"left\">'.$langs->trans(\"tsRoundDesc\").'</td>';\necho '<td  align=\"left\"><input type = \"text\" name = \"tsRound\" value=\"'.$tsRound;\necho \"\\\" size = \\\"4\\\" ></td></tr>\";\n// IMPORT AGENDA\necho '<tr class=\"oddeven\" ><td align=\"left\">'.$langs->trans(\"ImportAgenda\");\necho '</td><td align=\"left\">'.$langs->trans(\"ImportAgendaDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"importagenda\" value=\"1\" ';\necho (($importagenda == '1')?'checked':'').\"></td></tr>\";\n// eval ADDLINE\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"evalAddLine\");\necho '</td><td align=\"left\">'.$langs->trans(\"evalAddLineDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"evalAddLine\" value=\"1\" ';\necho (($evalAddLine == '1')?'checked':'').\"></td></tr>\";\n// export format\n$formats = array();\nforeach (glob(DOL_DOCUMENT_ROOT . \"/core/modules/export/export_*.modules.php\") as $file) {\n    preg_match_all(\"/export_(?<format>.+)\\.modules\\.php/\", $file, $matches);\n    $formats[] = $matches['format'][0];\n}\necho '<tr class=\"oddeven\" ><td align=\"left\">'.$langs->trans(\"exportFormat\");\necho '</td><td align=\"left\">'.$langs->trans(\"exportFormatDesc\").'</td>';\necho '<td  align=\"left\"><select name = \"exportFormat\">';\nforeach($formats as $format){\necho \"<option value=\\\"$format\\\" \".($exportFormat==$format?'selected':'').\">$format</option>\";\n}\necho \"</select></td></tr>\";\n// allow add time on public project\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"allowPublic\");\necho '</td><td align=\"left\">'.$langs->trans(\"allowPublicDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"allowPublic\" value=\"1\" ';\necho (($allowPublic == '1')?'checked':'').\"></td></tr>\";\n\n// unblock invoiced\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"unblockInvoiced\");\necho '</td><td align=\"left\">'.$langs->trans(\"unblockInvoicedDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"unblockInvoiced\" value=\"1\" ';\necho (($unblockInvoiced == '1')?'checked':'').\"></td></tr>\";\n// unblock closed day\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"unblockClosed\");\necho '</td><td align=\"left\">'.$langs->trans(\"unblockClosedDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"unblockClosed\" value=\"1\" ';\necho (($unblockClosed == '1')?'checked':'').\"></td></tr>\";\n// show invoiced col in reports\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"reportInvoicedCol\");\necho '</td><td align=\"left\">'.$langs->trans(\"reportInvoicedColDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"reportInvoicedCol\" value=\"1\" ';\necho (($reportInvoicedCol == '1')?'checked':'').\"></td></tr>\";\n// ungroup lvl3 reports\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"reportUngroup\");\necho '</td><td align=\"left\">'.$langs->trans(\"reportUngroupDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"reportUngroup\" value=\"1\" ';\necho (($reportUngroup == '1')?'checked':'').\"></td></tr>\";\n\n\n\necho '</table>';\n\necho '</div>';\n/*\n * INVOICE\n */\necho '<div id=\"invoice\" class=\"tabBar\">';\nprint '<span class=\"opacitymedium\">'.$langs->trans(\"InvoiceTabDesc\").'</span>';\n\nprint load_fiche_titre( $langs->trans(\"Invoice\"), '', '' );\necho '<table class=\"noborder\" width = \"100%\">';\necho '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\necho $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n//lines invoice method\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceMethod\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceMethodDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"radio\" name = \"invoiceMethod\" value=\"task\" ';\necho (($invoicemethod == 'task')?'checked':'').\">\".$langs->trans(\"Task\").'<br>';\necho '<input type = \"radio\" name = \"invoiceMethod\" value=\"user\" ';\necho (($invoicemethod == 'user')?'checked':'').\">\".$langs->trans(\"User\").'<br>';\necho '<input type = \"radio\" name = \"invoiceMethod\" value=\"taskUser\" ';\necho (($invoicemethod == 'taskUser')?'checked':'').\">\".$langs->trans(\"Tasks\").' & '.$langs->trans(\"User\").'<br>';\necho \"</td></tr>\";\n// type time\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceTimeType\").'</td><td align=\"left\">'.$langs->trans(\"invoiceTimeTypeDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"invoiceTimeType\" value=\"hours\" ';\necho ($invoicetimetype == \"hours\"?\"checked\":\"\").'> '.$langs->trans(\"Hours\").'<br>';\necho '<input type = \"radio\" name = \"invoiceTimeType\" value=\"days\" ';\necho ($invoicetimetype == \"days\"?\"checked\":\"\").'> '.$langs->trans(\"Days\").\"</td></tr>\";\n//line invoice Service\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceService\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceServiceDesc\").'</td>';\necho  '<td align=\"left\">';\n$addchoices = array('-999'=> $langs->transnoentitiesnoconv('not2invoice'), -997=> $langs->transnoentitiesnoconv('Custom'));\n$ajaxNbChar = $conf->global->PRODUIT_USE_SEARCH_TO_SELECT;\n$htmlProductArray = array('name' => 'invoiceservice', 'ajaxNbChar'=>$ajaxNbChar);\n$sqlProductArray = array('table' => 'product', 'keyfield' => 'rowid', 'fields' => 'ref, label', 'where' => 'tosell = 1 AND fk_product_type = 1', 'separator' => ' - ');\nprint select_sellist($sqlProductArray, $htmlProductArray, $invoiceservice, $addchoices);\necho \"</td></tr>\";\n//line tasktime ==\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceTaskTime\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceTaskTimeDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"radio\" name = \"invoiceTaskTime\" value=\"all\" ';\necho (($invoicetasktime == 'all')?'checked':'').\">\".$langs->trans(\"All\").'<br>';\necho '<input type = \"radio\" name = \"invoiceTaskTime\" value=\"approved\" ';\necho (($invoicetasktime == 'approved')?'checked':'').\">\".$langs->trans(\"Approved\").'<br>';\necho \"</td></tr>\";\n//line show user\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceShowUser\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceShowUserDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"invoiceShowUser\" value=\"1\" ';\necho (($invoiceshowuser == '1')?'checked':'').\"></td></tr>\";\n//line show task\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"invoiceShowTask\");\necho '</td><td align=\"left\">'.$langs->trans(\"invoiceShowTaskDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"invoiceShowTask\" value=\"1\" ';\necho (($invoiceshowtask == '1')?'checked':'').\"></td></tr>\";\n//hide signbox\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"pdfHideSignbox\");\necho '</td><td align=\"left\">'.$langs->trans(\"pdfHideSignboxDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"pdfHideSignbox\" value=\"1\" ';\necho (($pdfhidesignbox == '1')?'checked':'').\"></td></tr>\";\n//hide name\necho  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"pdfHideName\");\necho '</td><td align=\"left\">'.$langs->trans(\"pdfHideNameDesc\").'</td>';\necho  '<td align=\"left\"><input type = \"checkbox\" name = \"pdfHideName\" value=\"1\" ';\necho (($pdfHideName == '1')?'checked':'').\"></td></tr>\";\n\n\n// Show note on PDF\necho '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"NoteOnPDF\").'</td><td align=\"left\">'.$langs->trans(\"NoteOnPDFDesc\").'</td>';\necho '<td align=\"left\"><input type = \"radio\" name = \"noteOnPDF\" value=\"0\" ';\necho ($noteOnPDF == \"0\"?\"checked\":\"\").'> '.$langs->trans(\"Task\").'<br> <input type = \"radio\" name = \"noteOnPDF\" value=\"1\" ';\necho ($noteOnPDF == \"1\"?\"checked\":\"\").'> '.$langs->trans(\"Note\").'<br>  <input type = \"radio\" name = \"noteOnPDF\" value=\"2\"';\necho ($noteOnPDF == \"2\"?\"checked\":\"\").'> '.$langs->trans(\"Task\").\"&\".$langs->trans(\"Note\").\"</td></tr>\";\necho '</table><br>';\necho '</div>'; // END TAB 'invoice'\n\n/*\n * TAB: Other\n */\necho '<div id=\"other\" class=\"tabBar\">';\n\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"OtherTabDesc\").'</span>';\n\n\tprint load_fiche_titre( $langs->trans(\"Dolibarr\"), '', '' );\n\techo '<table class=\"noborder\" width = \"100%\">';\n\t\techo '<tr class=\"liste_titre\" width = \"100%\" ><th width = \"200px\">'.$langs->trans(\"Name\").'</th><th>';\n\t\techo $langs->trans(\"Description\").'</th><th>'.$langs->trans(\"Value\").\"</th></tr>\";\n\t\techo  '<tr class=\"oddeven\"><td align=\"left\">'.$langs->trans(\"dropdownAjax\");\n\t\techo '</td><td align=\"left\">'.$langs->trans(\"dropdownAjaxDesc\").'</td>';\n\t\techo  '<td align=\"left\"><input type = \"checkbox\" name = \"dropdownAjax\" value=\"1\" ';\n\t\techo (($dropdownAjax == '1')?'checked':'').\"></td></tr>\";\n\techo '</table>';\n\n\t// doc\n\tprint load_fiche_titre( $langs->trans(\"Manual\"), '', '' );\n\techo '<ul>';\n\techo '<li><a href=\"../doc/Module_timesheet.pdf\">  PDF </a></li>';\n\techo '<li><a href=\"../doc/Module_timesheet.docx\">  DOCX </a></li>';\n    echo '<li><a href=\"../doc/html/index.html\">  HTML </a></li>';\n\techo '</ul>';\n\n\tprint load_fiche_titre( $langs->trans(\"Feedback\"), '', '' );\n\techo $langs->trans('feebackDesc').' : <a href = \"mailto:patrick@pmpd.eu?subject=TimesheetFeedback\"> Patrick Delcroix</a>';\n\n\tprint load_fiche_titre( $langs->trans(\"Reminder\"), '', '' );\n\tprint '<div>'.$langs->trans('reminderEmailProcess').'</div>';\n    print load_fiche_titre( $langs->trans(\"Traduction\"), '', '' );\n    print '<a href=\"https://app.lokalise.com/public/761399855cb829e995d448.06757516\">Localize Project</a>';\n\necho '</div>'; // END TAB 'other'\n\nprint '<div class=\"tabsAction\">';\n\tprint '<div class=\"inline-block divButAction\"><input type=\"submit\" class=\"button butAction\" value=\"' . $langs->trans( 'Save' ) . '\" /></div>';\nprint \"</div>\";\n\necho '</form>';\necho '<script>document.getElementById(\"defaultOpen\").click()</script>';\n\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2007-2012 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2014           Juanjo Menent                <jmenent@2byte.es>\n * Copyright (C) 2018           Patrick DELCROIX     <pmpdelcroix@gmail.com>\n * Copyright (C) ---Put here your own copyright and developer email---\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *  \\file       dev/attendanceevents/attendanceevent.class.php\n *  \\ingroup    timesheet othermodule1 othermodule2\n *  \\brief      This file is an example for a CRUD class file(Create/Read/Update/Delete)\n *                                Initialy built by build_class_from_table on 2018-11-05 20:22\n */\n// Put here all includes required by your class file\nrequire_once DOL_DOCUMENT_ROOT.\"/core/class/commonobject.class.php\";\n//require_once DOL_DOCUMENT_ROOT.'/societe/class/societe.class.php';\n//require_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\nrequire_once 'class/TimesheetTask.class.php';\nrequire_once 'core/lib/timesheet.lib.php';\nrequire_once 'class/TimesheetFavourite.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/projet/class/task.class.php';\n$attendanceeventStatusPictoArray = array(-2=> 'status7', 3=> 'statut3', 1=>'statut3', 2=>'statut3', 4=>'statut7');\n$attendanceeventStatusArray = array(-2=> $langs->trans('AutoCheckin'), 1=>$langs->trans('Heartbeat'), 2=>$langs->trans('Checkin'), 3=>$langs->trans('Checkout'), 4=>$langs->trans('AutoCheckout'));\n/**\n *        Put here description of your class\n */\nclass Attendanceevent extends CommonObject\n{\n    /**\n     * @var string ID to identify managed object\n     */                                //!< To return several error codes(or messages)\n    public $element = 'attendanceevent';                        //!< Id that identify managed objects\n    /**\n     * @var string Name of table without prefix where object is stored\n     */\n    public $table_element = 'attendance_event';                //!< Name of table without prefix where object is stored\n    public $id;\n    // BEGIN OF automatic var creation(from db)\n        public $date_time_event = '';\n        public $event_location_ref;\n        public $event_type;\n        public $note;\n        public $date_modification = '';\n        public $userid;\n        public $user_modification;\n        public $third_party;\n        public $task;\n        public $project;\n        public $token;\n        public $status;\n        // working var\n        public $taskLabel;\n        public $projectLabel;\n        public $third_partyLabel;\n       // private $tasks;// aarray of tasktimesheet\n    // END OF automatic var creation\npublic $date_time_event_start;\n    /**\n     *  Constructor\n     *\n     *  @param        DoliDb                $db      Database handler\n     *  @param        object          $userid    userid\n     */\n    public function __construct($db, $userid)\n    {\n        $this->db = $db;\n        $this->userid = $userid;\n        return 1;\n    }\n    /**\n     *  Create object into database\n     *\n     *  @param        User        $user        User that creates\n     *  @param  int                $notrigger   0 = launch triggers after, 1 = disable triggers\n     *  @return int                         <0 if KO, Id of created object if OK\n     */\n    public function create($user, $notrigger = 0)\n    {\n        global $conf, $langs;\n                $error = 0;\n                // Clean parameters\n        $this->cleanParam();\n                // Check parameters\n                // Put here code to add control on parameters values\n        // Insert request\n        $sql = \"INSERT INTO \".MAIN_DB_PREFIX.$this->table_element.\"(\";\n        $sql .= 'date_time_event, ';\n        $sql .= 'event_location_ref, ';\n        $sql .= 'event_type, ';\n        $sql .= 'note, ';\n        $sql .= 'fk_userid, ';\n        $sql .= 'fk_third_party, ';\n        $sql .= 'fk_task, ';\n        $sql .= 'fk_project, ';\n        $sql .= 'token, ';\n        $sql .= 'status, ';\n        $sql .= 'date_modification, fk_user_modification';\n        $sql .= \") VALUES(\";\n        $sql .= ' '.(empty($this->date_time_event) || dol_strlen($this->date_time_event) == 0?'NULL':\"'\".$this->db->idate($this->date_time_event).\"'\").', ';\n        $sql .= ' '.(empty($this->event_location_ref)?'NULL':\"'\".$this->db->escape($this->event_location_ref).\"'\").', ';\n        $sql .= ' '.(empty($this->event_type)?'NULL':\"'\".$this->event_type.\"'\").', ';\n        $sql .= ' '.(empty($this->note)?'NULL':\"'\".$this->db->escape($this->note).\"'\").', ';\n        $sql .= ' '.(empty($this->userid)?'NULL':\"'\".$this->userid.\"'\").', ';\n        $sql .= ' '.(empty($this->third_party)?'NULL':\"'\".$this->third_party.\"'\").', ';\n        $sql .= ' '.(empty($this->task)?'NULL':\"'\".$this->task.\"'\").', ';\n        $sql .= ' '.(empty($this->project)?'NULL':\"'\".$this->project.\"'\").', ';\n        $sql .= ' '.(empty($this->token)?'NULL':\"'\".$this->token.\"'\").', ';\n        $sql .= ' '.(empty($this->status)?'NULL':\"'\".$this->status.\"'\").'';\n        $sql .= ', NOW(), \\''.$user->id.'\\'';\n        $sql .= \")\";\n        $this->db->begin();\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if (! $resql) { $error++;$this->errors[] = \"Error \".$this->db->lasterror();}\n        if (! $error) {\n            $this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.$this->table_element);\n            if (! $notrigger) {\n            // Uncomment this and change MYOBJECT to your own tag if you\n            // want this action calls a trigger.\n            //// Call triggers\n            //$result = $this->call_trigger('MYOBJECT_CREATE', $user);\n            //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n            //// End call triggers\n            }\n        }\n        // Commit or rollback\n        if ($error) {\n            foreach ($this->errors as $errmsg) {\n                dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                $this->error .= ($this->error?', '.$errmsg:$errmsg);\n            }\n            $this->db->rollback();\n            return -1*$error;\n        } else {\n            $this->db->commit();\n            return $this->id;\n        }\n    }\n    /**\n     *  Load object in memory from the database\n     *\n     *  @param        int                $id        Id object\n     *  @param        object          $user        user to find the latest event wich is not closed\n     *  @param        string          $startToken        token used to find the start event\n     *  @return int           <0 if KO, >0 if OK\n     */\n    public function fetch($id, $user = null, $startToken = '')\n    {\n        global $langs;\n        $sql = \"SELECT\";\n        $sql .= \" t.rowid, \";\n        $sql .= ' t.date_time_event, ';\n        $sql .= ' t.event_location_ref, ';\n        $sql .= ' t.event_type, ';\n        $sql .= ' t.note, ';\n        $sql .= ' t.date_modification, ';\n        $sql .= ' t.fk_userid, ';\n        $sql .= ' t.fk_user_modification, ';\n        $sql .= ' t.fk_third_party, ';\n        $sql .= ' t.fk_task, ';\n        $sql .= ' t.fk_project, ';\n        $sql .= ' t.token, ';\n        $sql .= ' t.status, ';\n        $sql .= '  st.date_time_event  as date_time_event_start ';\n        $sql .= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as t\";\n        $sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.$this->table_element\n            .\" as st ON t.token = st.token AND ABS(st.event_type = 2)\";\n        $sql .= \" WHERE \";\n        if (!empty($id))$sql .= \"t.rowid = '\".$id;\n        elseif (!empty($user))$sql .= \" t.fk_userid = '\".$user->id;\n        elseif (!empty($startToken))  $sql .= \"  t.token = '\".$startToken;\n        else{\n            $sql .= \" t.fk_userid = '\".$this->userid;\n        }\n        $sql .= \"' ORDER BY date_time_event DESC\" ;\n        $this->db->plimit(1, 0);\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if ($resql && $this->db->num_rows($resql)) {\n            $obj = $this->db->fetch_object($resql);\n            // load the object only if  not an stop event while using the user\n            $this->id = $obj->rowid;\n            $this->date_time_event = $this->db->jdate($obj->date_time_event);\n            $this->event_location_ref = $obj->event_location_ref;\n            $this->event_type = $obj->event_type;\n            $this->note = $obj->note;\n            $this->date_modification = $this->db->jdate($obj->date_modification);\n            $this->userid = $obj->fk_userid;\n            $this->user_modification = $obj->fk_user_modification;\n            $this->third_party = $obj->fk_third_party;\n            $this->task = $obj->fk_task;\n            $this->project = $obj->fk_project;\n            $this->token = $obj->token;\n            $this->status = $obj->status;\n            $this->date_time_event_start = $this->db->jdate($obj->date_time_event_start);\n            $this->db->free($resql);\n            $this->getInfo();\n            return 1;\n        } else {\n            $this->error = \"Error \".$this->db->lasterror();\n            return -1;\n        }\n    }\n    /**\n     *  Update object into database\n     *\n     *  @param        User        $user        User that modifies\n     *  @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return int                         <0 if KO, >0 if OK\n     */\n    public function update($user, $notrigger = 0)\n    {\n        $error = 0;\n        // Clean parameters\n        $this->cleanParam(true);\n        // Check parameters\n        // Put here code to add a control on parameters values\n        // Update request\n        $sql = \"UPDATE \".MAIN_DB_PREFIX.$this->table_element.\" SET\";\n        $sql .= $this->setSQLfields($user);\n        $sql .= \" WHERE rowid=\".$this->id;\n        $this->db->begin();\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if (! $resql) { $error++;$this->errors[] = \"Error \".$this->db->lasterror();}\n            if (! $error) {\n                if (! $notrigger) {\n            // Uncomment this and change MYOBJECT to your own tag if you\n            // want this action calls a trigger.\n            //// Call triggers\n            //$result = $this->call_trigger('MYOBJECT_MODIFY', $user);\n            //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n            //// End call triggers\n                }\n            }\n        // Commit or rollback\n            if ($error) {\n                foreach ($this->errors as $errmsg) {\n                    dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                    $this->error .= ($this->error?', '.$errmsg:$errmsg);\n                }\n                $this->db->rollback();\n                return -1*$error;\n            } else {\n                $this->db->commit();\n                return 1;\n            }\n    }\n     /**\n     *        Return clickable name(with picto eventually)\n     *\n     *        @param                string                        $htmlcontent                text to show\n     *        @param                int                        $id                     Object ID\n     *        @param                string                        $ref                    Object ref\n     *        @param                int                        $withpicto                0 = _No picto, 1 = Includes the picto in the linkn, 2 = Picto only\n     *        @return                string                                                String with URL\n     */\n    public function getNomUrl($withpicto = 0, $id = 0, $ref = '' )\n    {\n        global $conf, $langs;\n        if (! empty($conf->dol_no_mouse_hover)) $notooltip = 1;// Force disable tooltips\n        $result = '';\n        if (empty($ref) && $id == 0) {\n            if (isset($this->id)) {\n                $id = $this->id;\n            } elseif (isset($this->rowid)) {\n                $id = $this->rowid;\n            }if (isset($this->ref)) {\n                $ref = $this->ref;\n            }\n        }\n        $linkclose = '';\n        $label = '';\n        //field to show beside the icon\n        $label .= $this->getLabel('text');\n\n        //info card more info could be display\n        $card = '<u>' . $langs->trans(\"AttendanceEvent\") . '</u>';\n        $card .= '<br>';\n        if ($ref){\n            $card .= $langs->trans(\"Ref\").': '.$ref;\n        }else if ($id){\n            $card .= $langs->trans(\"#\").': '.$id;\n        }\n        if (empty($notooltip))\n        {\n            if (! empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n            {\n                $label = $langs->trans(\"AttendanceEvent\");\n                $linkclose .= ' alt = \"'.dol_escape_htmltag($label, 1).'\"';\n            }\n            $linkclose .= ' title = \"'.dol_escape_htmltag($card, 1).'\"';\n            $linkclose .= ' class = \"classfortooltip'.($morecss?' '.$morecss:'').'\"';\n        } else $linkclose = ($morecss?' class = \"'.$morecss.'\"':'');\n        if ($id) {\n            $lien = '<a href = \"'.dol_buildpath('/timesheet/AttendanceEventCard.php', 1)\n                .'id='.$id.'&action=view\"'.$linkclose.'>';\n        } elseif (!empty($ref)) {\n            $lien = '<a href = \"'.dol_buildpath('/timesheet/AttendanceEventCard.php', 1)\n                .'?ref='.$ref.'&action=view\"'.$linkclose.'>';\n        } else{\n            $lien = \"\";\n        }\n        $lienfin = empty($lien)?'':'</a>';\n        $picto = 'generic';\n    \tif ($withpicto == 1){ \n            $result .= $lien.img_object(''.$picto).$label.$lienfin;\n        }else if ($withpicto == 2) {\n            $result .= ($lien.img_object($label, $picto).$lienfin);\n        }else{  \n            $result .= $lien.$label.$lienfin;\n        }\n        return $result;\n    }\n    /**\n     *  Retourne select libelle du status(actif, inactif)\n     *\n     *  @param        object                $form          form object that should be created\n     *  @param        string                $htmlname      HTML name\n     *  @return        string                               html code to select status\n     */\n    public function selectLibStatut($form, $htmlname = 'Status')\n    {\n        global $attendanceeventStatusPictoArray, $attendanceeventStatusArray;\n        return $form->selectarray($htmlname, $attendanceeventStatusArray, $this->status);\n    }\n    /**\n    *  Retourne le libelle du status(actif, inactif)\n    *\n    *  @param        int                $mode          0 = libelle long, 1 = libelle court, 2 = Picto + Libelle court, 3 = Picto, 4 = Picto + Libelle long, 5 = Libelle court + Picto\n    *  @return        string                               Label of status\n    */\n   public function getLibStatut($mode = 0)\n   {\n           return $this->libStatut($this->status, $mode);\n   }\n    /**\n     *  Return the status\n     *\n     *  @param        int                $status         Id status\n     *  @param  int                $mode           0 = long label, 1 = short label, 2 = Picto + short label, 3 = Picto, 4 = Picto + long label, 5 = Short label + Picto, 6 = Long label + Picto\n     *  @return string                                Label of status\n     */\n    public static function libStatut($status, $mode = 0)\n    {\n        global $langs, $attendanceeventStatusPictoArray, $attendanceeventStatusArray;\n        if ($mode == 0) {\n            $prefix = '';\n            return $langs->trans($attendanceeventStatusArray[$status]);\n        }\n        if ($mode == 1) {\n            return $langs->trans($attendanceeventStatusArray[$status]);\n        }\n        if ($mode == 2) {\n            return img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status])\n                .' '.$langs->trans($attendanceeventStatusArray[$status]);\n        }\n        if ($mode == 3) {\n            return img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status]);\n        }\n        if ($mode == 4) {\n            return img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status])\n                .' '.$langs->trans($attendanceeventStatusArray[$status]);\n        }\n        if ($mode == 5) {\n            return $langs->trans($attendanceeventStatusArray[$status]).' '\n                .img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status]);\n        }\n        if ($mode == 6) {\n            return $langs->trans($attendanceeventStatusArray[$status]).' '\n                .img_picto($attendanceeventStatusArray[$status], $attendanceeventStatusPictoArray[$status]);\n        }\n    }\n    /**\n     *  Delete object in database\n     *\n    *        @param  User        $user        User that deletes\n    *   @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return        int                                         <0 if KO, >0 if OK\n     */\n    public function delete($user, $notrigger = 0)\n    {\n        //global $conf, $langs;\n        if (empty($user)) return -1;\n        $error = 0;\n        $this->db->begin();\n        if (! $error) {\n            if (! $notrigger) {\n        // Uncomment this and change MYOBJECT to your own tag if you\n        // want this action calls a trigger.\n        //// Call triggers\n        //$result = $this->call_trigger('MYOBJECT_DELETE', $user);\n        //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n        //// End call triggers\n            }\n        }\n        if (! $error) {\n        $sql = \"DELETE FROM \".MAIN_DB_PREFIX.$this->table_element;\n        $sql .= \" WHERE rowid=\".$this->id;\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n            if (! $resql) \n            { \n                $error++;$this->errors[] = \"Error \".$this->db->lasterror();\n            } elseif ($this->db->affected_rows($resql) == 0) \n            {\n                $error++;$this->errors[] = \"Item no found in database\";\n            }\n        }\n// Commit or rollback\n        if ($error) {\n            foreach ($this->errors as $errmsg) {\n                dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                $this->error .= ($this->error?', '.$errmsg:$errmsg);\n            }\n            $this->db->rollback();\n            return -1*$error;\n        } else {\n            $this->db->commit();\n            return 1;\n        }\n    }\n    /**\n     *        Load an object from its id and create a new one in database\n     *\n     *        @param        int                $fromid     Id of object to clone\n     *        @return        int                                        New id of clone\n     */\n    public function createFromClone($fromid)\n    {\n        global $user, $langs;\n        $error = 0;\n        $object = new Attendanceevent($this->db, $this->userid);\n        $this->db->begin();\n        // Load source object\n        $object->fetch($fromid);\n        $object->id = 0;\n        $object->statut = 0;\n        // Clear fields\n        // ...\n        // Create clone\n        $result = $object->create($user);\n        // Other options\n        if ($result < 0) {\n            $this->error = $object->error;\n            $error++;\n        }\n        if (! $error) {\n        }\n        // End\n        if (! $error) {\n            $this->db->commit();\n            return $object->id;\n        } else {\n            $this->db->rollback();\n            return -1;\n        }\n    }\n    /**\n     *        Initialise object with example values\n     *        Id must be 0 if object instance is a specimen\n     *\n     *        @return        void\n     */\n    public function initAsSpecimen()\n    {\n        $this->id = 0;\n        $this->date_time_event = '';\n        $this->date_time_event_start = '';\n        $this->event_location_ref = '';\n        $this->event_type = 0;\n        $this->note = '';\n        $this->date_modification = '';\n        $this->userid = '';\n        $this->user_modification = '';\n        $this->third_party = '';\n        $this->task = '';\n        $this->project = '';\n        $this->third_partyLabel = '';\n        $this->taskLabel = '';\n        $this->projectLabel = '';\n        $this->token = '';\n        $this->status = '';\n    }\n    /**\n     *        will clean the parameters\n     *\n     *\n     *        @return        void\n     */\n    public function cleanParam()\n    {\n        if (!empty($this->date_time_event))\n            $this->date_time_event = trim($this->date_time_event);\n        if (!empty($this->event_location_ref))\n            $this->event_location_ref = trim($this->event_location_ref);\n        if (!empty($this->event_type))\n            $this->event_type = trim($this->event_type);\n        if (!empty($this->note))\n            $this->note = trim($this->note);\n        if (!empty($this->date_modification))\n            $this->date_modification = trim($this->date_modification);\n        if (!empty($this->userid))\n            $this->userid = trim($this->userid);\n        if (!empty($this->user_modification))\n            $this->user_modification = trim($this->user_modification);\n        if (!empty($this->third_party))\n            $this->third_party = trim($this->third_party);\n        if (!empty($this->task))\n            $this->task = trim($this->task);\n        if (!empty($this->project))\n            $this->project = trim($this->project);\n        if (!empty($this->token))\n            $this->token = trim($this->token);\n        if (!empty($this->status))\n            $this->status = trim($this->status);\n    }\n     /**\n     *        will create the sql part to update the parameters\n     *\n     *  @param USER $user user that will update\n     *        @return        void\n     */\n    public function setSQLfields($user)\n    {\n        $sql = '';\n        $sql .= ' date_time_event='\n            .(dol_strlen($this->date_time_event)!=0 ? \"'\"\n            .$this->db->idate($this->date_time_event).\"'\":'null').', ';\n        $sql .= ' event_location_ref='\n            .(empty($this->event_location_ref)!=0 ? 'null':\"'\"\n            .$this->db->escape($this->event_location_ref).\"'\").', ';\n        $sql .= ' event_type='.(empty($this->event_type)!=0 ? 'null':\"'\".$this->event_type.\"'\").', ';\n        $sql .= ' note='.(empty($this->note)!=0 ? 'null':\"'\".$this->db->escape($this->note).\"'\").', ';\n        $sql .= ' date_modification = NOW(), ';\n        $sql .= ' fk_userid='.(empty($this->userid)!=0 ? 'null':\"'\".$this->userid.\"'\").', ';\n        $sql .= ' fk_user_modification = \"'.$user->id.'\", ';\n        $sql .= ' fk_third_party='.(empty($this->third_party)!=0 ? 'null':\"'\".$this->third_party.\"'\").', ';\n        $sql .= ' fk_task='.(empty($this->task)!=0 ? 'null':\"'\".$this->task.\"'\").', ';\n        $sql .= ' fk_project='.(empty($this->project)!=0 ? 'null':\"'\".$this->project.\"'\").', ';\n        $sql .= ' token='.(empty($this->token)!=0 ? 'null':\"'\".$this->token.\"'\").', ';\n        $sql .= ' status='.(empty($this->status)!=0 ? 'null':\"'\".$this->status.\"'\").'';\n        return $sql;\n    }\n    /**\n     *  Will start a new attendance and return the result in json\n     *\n     *  @param  USER                $user                 user object\n     *  @param  string                $json           json recieve along the start request(to stop the current task)\n     *  @param  int                $customer         customer id on which the attendance is register\n     *  @param  int                $project         project id on which the attendance is register\n     *  @param  int                $task            task id on which the attendance is register\n     *  @return        json                                 return the json of the object started\n     */\n    public function ajaxStart($user, $json = '', $customer = '', $project = '', $task = '')\n    {\n        if (empty($task) && empty($project) && empty($customer)) \n            return '{\"errorType\":\"startError\", \"error\":\"no event to start\"}';\n        $location_ref = '';\n        //load old if any\n        if (!empty($json)) {\n            $this->unserialize($json, 1);\n            //save the location ref\n            $location_ref = $this->event_location_ref;\n            //close the most recent one if any\n            $this->ajaxStop($user, $json, true);\n            //$this->status = \n        }\n//erase the data\n        $status = $this->status;\n        $tmpUserid = $this->userid;\n        $this->initAsSpecimen();\n        $this->userid = $tmpUserid;\n        //$this->userid = $user->id;\n        //load the data of the new\n        if (!empty($task)) {\n            $this->task = trim($task);\n            $this->getInfo();\n        }\n        if (!empty($project)) $this->project = trim($project);\n        if (!empty($customer)) $this->third_party = trim($customer);\n        $this->token = getToken();\n        $this->event_type = EVENT_START;\n        $this->date_time_event = mktime()+1;\n        $this->date_time_event_start = $this->date_time_event;\n        $this->event_location_ref = $location_ref;\n        $this->create($user);\n        //$this->getInfo();\n        $this->status = $status;\n        return $this->serialize(2);\n    }\n    /**\n     *  Will stop the  attendance and return the result in json\n     *\n     *  @param USER $user user that will update\n     *  @param  string                $json         json of the request\n     *  @param bool $auto       auto stop, or triggered by user\n     *  @return        int                        <0 if KO, >0 if OK\n     */\n    public function ajaxStop($user, $json = '', $auto = false)\n    {\n        global $conf, $langs;\n        $location_ref = '';\n        $note = '';\n        $tokenJson = '';\n        $retJson = '';\n        $arrayRes = array();\n        if (!empty($json)) {\n            $this->unserialize($json, 1);\n            $this->status = \"\";\n            $location_ref = $this->event_location_ref;\n            $note = $this->note;\n            $tokenJson = $this->token;\n            $this->fetch('', '', $tokenJson);\n        } else {\n             $this->fetch('');\n        }\n        $ret = 0;\n        $tokenDb = $this->token;\n        if (empty($tokenDb)) {  // 00 01 no db record found by token or user\n            $this->initAsSpecimen();\n            if (!$auto){\n                $arrayRes[\"NoActiveEvent\"]++ ;\n                $this->status = TimesheetsetEventMessage($arrayRes, true);\n            }\n            // AUTO START ?\n        } elseif ($this->event_type >= EVENT_STOP) { // found but already stopped\n            $this->initAsSpecimen();\n            $arrayRes[\"EventNotActive\"]++;\n            $this->status = TimesheetsetEventMessage($arrayRes, true);\n        } else{// 11 && 10 found and active\n            if (!empty($tokenJson)) { //11\n                $this->event_location_ref = $location_ref;\n                $this->note = $note;\n            }\n            $this->event_type = EVENT_STOP;\n            $this->date_time_event = mktime();\n            $duration = $this->date_time_event-$this->date_time_event_start;\n            //if the max time is breach\n            if (($conf->global->TIMESHEET_EVENT_MAX_DURATION>0 &&\n                $duration>$conf->global->TIMESHEET_EVENT_MAX_DURATION*3600))\n                {\n                // put the max time per default\n                    $this->date_time_event = \n                        $conf->global->TIMESHEET_EVENT_DEFAULT_DURATION*3600\n                        +$this->date_time_event_start;\n                    if (empty($tokenJson) && $auto) { // if it's auto close but without json sent\n                        $this->event_type = EVENT_AUTO_STOP;\n                    }\n            }else { //there is a start time and it's in the acceptable limit\n                if ($duration < $conf->global->TIMESHEET_EVENT_MIN_DURATION){\n                    $this->date_time_event = $this->date_time_event_start \n                        + $conf->global->TIMESHEET_EVENT_MIN_DURATION;\n                }\n                $this->event_type = EVENT_STOP;\n            }\n            $ret = $this->create($user);\n            if ($ret>0 && $conf->global->TIMESHEET_EVENT_NOT_CREATE_TIMESPENT == 0) {\n                $this->createTimeSpend($user, $tokenDb);\n            } else{\n                $this->initAsSpecimen();\n                $arrayRes = array();\n                $this->status = $arrayRes[\"DbError\"]++ ;\n                $this->status = TimesheetsetEventMessage($arrayRes, true);\n            }\n        }\n        return $this->serialize(2);;\n    }\n\n    /**\n     *  Will register an hearbear for an attendance and return the result in json\n     *\n     *  @param USER $user user that will update\n     *  @param  string                $json         json of the request\n     *  @return        int                                         <0 if KO, >0 if OK\n     */\n    public function ajaxHeartbeat($user, $json)\n    {\n        global $conf, $langs;\n        $location_ref = '';\n        $note = '';\n        $tokenJson = '';\n        $arrayRes = array();\n        $retJson = '';\n        if (!empty($json)) {\n            $this->unserialize($json, 1);\n            $location_ref = $this->event_location_ref;\n            $note = $this->note;\n            $tokenJson = $this->token;\n        }\n        $this->fetch('');\n        $tokenDb = $this->token;\n        if ((empty($tokenJson) && empty($tokenDb))||\n                (!empty($tokenDb) && $this->event_type >= EVENT_STOP))\n        {\n            //00\n            $this->initAsSpecimen();\n            if ($this->userid)$arrayRes[\"NoActiveEvent\"]++ ;\n            $this->status = TimesheetsetEventMessage($arrayRes, true);\n        } elseif (empty($tokenDb) && !empty($tokenJson)) { // json recieved with token //01\n            $arrayRes[\"EventNotActive\"]++;\n            $this->status = TimesheetsetEventMessage($arrayRes, true);\n        } elseif (!empty($tokenDb)) {\n            // 11 && 10\n            if (!empty($tokenJson)) {\n                //11\n                $this->event_location_ref = $location_ref;\n                $this->note = $note;\n            } else{\n                // info not already loaded 10\n                $this->getInfo();\n            }\n            // update the required fields\n            $this->date_time_event = mktime();\n            if ($this->event_type!=EVENT_HEARTBEAT) {\n                // create an heartbeat only if there is none\n                $this->event_type = EVENT_HEARTBEAT;\n                $this->create($user);\n            } else {\n                $this->update($user);\n            }\n        }\n        return $this->serialize(2);\n    }\n /** create timespend on the user\n  * @param USER $user user objuect\n  * @param string $token   token\n  * @return null\n  */\n/**\n*        Return HTML to get other user\n*\n*        @param                string                        $idsList                list of user id\n*        @param                int                        $selected               id that shoudl be selected\n*        @param                int                        $admin                 is the user an admin\n*        @return                string                                                String with URL\n*/\npublic function getHTMLGetOtherUserTs($idsList, $selected, $admin)\n{\n    global $langs;\n    $form = new Form($this->db);\n    $HTML = '<form id = \"timesheetForm\" name = \"OtherUser\" action=\"?action=getOtherTs\" method = \"POST\">';\n    if (!$admin) {\n        $HTML .= $form->select_dolusers($selected, 'userid', 0, null, 0, $idsList);\n    } else{\n         $HTML .= $form->select_dolusers($selected, 'userid');\n    }\n    $HTML .= '<input type = \"submit\" value = \"'.$langs->trans('Submit').'\"/></form> ';\n    //FIXME should take token as input\n    $token = getToken();\n    $HTML .= '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n\n    return $HTML;\n}\n\npublic function createTimeSpend($user, $token = '')\n{\n    //if (empty($token))$token = $this->token;\n    if (!empty($token)) {\n        $this->fetch('', '', $token);\n        if ($this->event_type == EVENT_STOP && $this->task>0) {\n            $start = strtotime(\"midnight\", (int) $this->date_time_event);\n            $end = strtotime(\"tomorrow\", (int) $this->date_time_event)-1;\n            $duration = $this->date_time_event -$this->date_time_event_start;\n            $tta = new TimesheetTask($this->db, $this->task);\n            $tta->getActuals($start, $end, $this->userid);\n            $arrayRes = $tta->saveTaskTime($user, $duration, $this->note, 0, true);\n            $this->status = TimesheetsetEventMessage($arrayRes, true);\n            if (is_array($arrayRes) && array_sum($arrayRes)-$arrayRes['updateError']>0) \n                $tta->updateTimeUsed();\n            //TimesheetsetEventMessage($arrayRes);\n        }\n    }\n}\n\n    /** Function generate the HTML code to use the clock\n     *\n     * @param string[] $headers header to display\n     * @param    string              $token           CSRF token\n     * @param int $userid   user id\n     * @return string   HTML code\n     */\n    public function printHTMLTaskList($headers, $userid = '')\n    {\n        $tasksList = $this->fetchTasks($userid);\n        $html = '';\n        if (is_array($tasksList))foreach ($tasksList as $task) {\n            $html .= $task->getAttendanceLine($headers, ($task->id == $this->task));\n        }\n        return $html;\n    }\n    /** Function generate the HTML code to use the clock\n    *  @return     html code                                       result\n    */\n    public function printHTMLClock()\n    {\n        global $langs;\n        print '<div>';\n        print '<div style = \"width:50px%;height:60px;float:left;vertical-align:middle\" >';\n        print '<img height = \"64px\" id = \"mainPlayStop\" src = \"img/'\n            .(($this->id == 0)?'play-arrow':'stop-square');\n        print '.png\" onClick = startStop(event,'.$this->userid\n            .',null) style = \"cursor:pointer;vertical-align:middle\">  ';\n        print '</div>';\n        print '<div style = \"width:40%;height:60px;float:left\" >';\n        print '<textarea name = \"eventNote\" id = \"eventNote\" style = \"width:80%;height:100%\"></textarea>';\n        print '</div>';\n        print '<div style = \"width:40%;float:left\">';\n        print '<span id = \"stopwatch\"></span>';\n        print '<div>'.$langs->trans('Customer').': <span id = \"customer\">&nbsp;</span></div>';\n        print '<div>'.$langs->trans('Project').': <span  id = \"project\">&nbsp;</span></div>';\n        print '<div>'.$langs->trans('Task').': <span  id = \"task\">&nbsp;</span></div>';\n        print '</div>';\n        print '</div>';\n    }\n /**\n * function to genegate the timesheet tab\n *\n *  @param    int               $userid                   user id to fetch the timesheets\n *  @param    dataetime               $date                   user id to fetch the timesheets\n *  @return     array(string)                                             array of timesheet(serialized)\n */\n public function fetchTasks($userid = '', $date = '')\n {\n    global $conf;\n\n    if (empty($date))$date = time();\n    $staticWhiteList = new TimesheetFavourite($this->db);\n    $whiteList = $staticWhiteList->fetchUserList($userid, $date, $date + SECINDAY);\n    if ($userid == '') {\n        $userid = $this->userid;\n    }\n    $this->userid = $userid;\n    $datestart = strtotime('today midnight', $date);\n    $datestop = strtotime(' tomorrow midnight', $date) -1;\n     $tasksList = array();\n    $sql = 'SELECT DISTINCT element_id as taskid, prj.fk_soc, prj.ref, tsk.ref';\n    $sql .= \" FROM \".MAIN_DB_PREFIX.\"element_contact as ec\";\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX\n        .'c_type_contact as ctc ON(ctc.rowid = ec.fk_c_type_contact  AND ctc.active = \\'1\\') ';\n    $sql .= ' JOIN '.MAIN_DB_PREFIX.'projet_task as tsk ON tsk.rowid = ec.element_id ';\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'projet as prj ON prj.rowid = tsk.fk_projet ';\n    $sql .= \" WHERE ((ec.fk_socpeople = '\".$userid.\"' AND ctc.element = 'project_task') \";\n    // SHOW TASK ON PUBLIC PROEJCT\n    if ($conf->global->TIMESHEET_ALLOW_PUBLIC == '1') {\n        $sql .= '  OR  prj.public =  \\'1\\')';\n    }else{\n        $sql .= ' )';\n    }\n    if ($conf->global->TIMESHEET_HIDE_DRAFT == '1') {\n        $sql .= ' AND prj.fk_statut =  \\'1\\'';\n    }else{\n        $sql .= ' AND prj.fk_statut in (\\'0\\', \\'1\\')';\n    }\n    $sql .= ' AND (prj.datee >= \\''.$this->db->idate($datestart).'\\' OR prj.datee IS NULL)';\n    $sql .= ' AND (prj.dateo <= \\''.$this->db->idate($datestop).'\\' OR prj.dateo IS NULL)';\n    $sql .= ' AND (tsk.datee >= \\''.$this->db->idate($datestart).'\\' OR tsk.datee IS NULL)';\n    $sql .= ' AND (tsk.dateo <= \\''.$this->db->idate($datestop).'\\' OR tsk.dateo IS NULL)';\n    $sql .= '  ORDER BY prj.fk_soc, prj.ref, tsk.ref ';\n    dol_syslog(__METHOD__, LOG_DEBUG);\n    $resql = $this->db->query($sql);\n    if ($resql) {\n        $this->taskTimesheet = array();\n        $num = $this->db->num_rows($resql);\n        $i = 0;\n        // Loop on each record found, so each couple (project id, task id)\n        while($i < $num)\n        {\n            $error = 0;\n            $obj = $this->db->fetch_object($resql);\n            $tasksList[$i] = new TimesheetTask($this->db);\n            $tasksList[$i]->id = $obj->taskid;\n            $tasksList[$i]->userId = $this->userid;\n            $tasksList[$i]->getTaskInfo();\n            $tasksList[$i]->listed = $whiteList[$obj->taskid];\n            $i++;\n        }\n        $this->db->free($resql);\n        $i = 0;\n        return $tasksList;\n    } else {\n        dol_print_error($this->db);\n        return -1;\n    }\n }\n/**\n* function to save attendance event as a string\n* @param    int     $mode   0=>serialize, 1=> json_encode, 2 => json_encode PRETTY PRINT\n* @return   string       serialized object\n*/\npublic function serialize($mode = 0)\n{\n    $ret = '';\n    $array = array();\n    $array['id'] = $this->id;\n    $array['date_time_event'] = $this->date_time_event;\n    $array['date_time_event_start'] = $this->date_time_event_start;\n    $array['event_location_ref'] = $this->event_location_ref;\n    $array['event_type'] = $this->event_type;\n    $array['note'] = $this->note;\n    $array['date_modification'] = $this->date_modification;\n    $array['userid'] = $this->userid;\n    $array['user_modification'] = $this->user_modification;\n    $array['third_party'] = $this->third_party;\n    $array['task'] = $this->task;\n    $array['project'] = $this->project;\n    $array['third_partyLabel'] = $this->third_partyLabel;\n    $array['taskLabel'] = $this->taskLabel;\n    $array['projectLabel'] = $this->projectLabel;\n    $array['token'] = $this->token;\n    $array['status'] = $this->status;\n    $array['processedTime'] = mktime();\n    // working var\n    //$array[''] = $this->tasks;// aarray of tasktimesheet\n    switch($mode) {\n        default:\n        case 0:\n            $ret = serialize($array);\n            break;\n        case 1:\n            $ret = json_encode($array);\n            break;\n        case 2:\n            $ret = json_encode($array, JSON_PRETTY_PRINT);\n            break;\n    }\n      return $ret;\n}\n     /** function to load a skeleton as a string\n     * @param   string    $str   serialized object\n     * @param    int     $mode   0=>serialize, 1=> json_encode, 2 => json_encode PRETTY PRINT\n     * @return  int              OK\n     */\n    public function unserialize($str, $mode = 0)\n    {\n        $ret = '';\n        if (empty($str))return -1;\n        $array = array();\n        switch($mode) {\n            default:\n            case 0:\n                $array = unserialize($str);\n                break;\n            case 1:\n            case 2:\n                $array = json_decode($str, JSON_OBJECT_AS_ARRAY);\n                break;\n /*           case 3:\n                $array = $str;\n                break;*/\n        }\n        // automatic unserialisation based on match between property name and key value\n        foreach ($array as $key => $value) {\n            if (property_exists($this, $key)) {\n                $this->{$key} = $value;\n            }\n        }\n    }\n    /*fucntion to get the labels\n     *\n     */\n    public function getInfo()\n    {\n        if (!empty($this->task)) {\n            $staticTask = new TimesheetTask($this->db);\n            $staticTask->id = ($this->task);\n            $staticTask->userId = ($this->userid);\n            //$staticTask->fetch($this->task);\n            $staticTask->getTaskInfo();\n            $this->project = $staticTask->fk_project;\n            $this->taskLabel = $staticTask->description;\n            $this->projectLabel = $staticTask->ProjectTitle;\n            $this->third_party = $staticTask->companyId;\n            $this->third_partyLabel = $staticTask->companyName;\n        } else {\n            if (!empty($this->project) && empty($this->projectLabel)) {\n                $this->projectLabel = print_sellist(array('table'=>\"projet\", \n                    'keyfield'=> 'rowid', 'fields'=>'title'), $this->project);\n            }\n            if (!empty($this->third_party) && empty($this->third_partyLabel)) {\n                $this->third_partyLabel = print_sellist(array('table'=>\"societe\", \n                    'keyfield'=> 'rowid', 'fields'=>'nom'), $this->third_party);\n            }\n        }\n    }\n            /**\n     *  Function to generate a sellist\n     *  @param string $htmlname name of the sellist input\n     *  @param int $selected rowid to be preselected\n     *  @return string HTML select list\n     */\n    \n    Public function sellist($htmlname = '', $selected = ''){    \n        $sql = array('table' => $this->table_element , 'keyfield' => 't.rowid', \n            'fields' => $this->getLabel('sql'), 'join' =>  $this->getLabel('join'), \n            'where' => '', 'tail' => '');\n        $html = array('name' => (($htmlname == '')?'AttendanceEvent':$htmlname), \n            'class' => '', 'otherparam' => '', 'ajaxNbChar' => '', 'separator' => '-');\n        $addChoices = null;\n\t\treturn select_sellist($sql, $html, $selected, $addChoices );\n    }\n\n    /**      function to define display of the object\n     * @param string $type type of return text or sql\n     * @return string Label\n     */\n    public function getLabel($type = 'text'){\n        $ret = '';\n        switch ($type){\n            case 'sql':\n                $ret = \"t.fk_userid, t.date_time_event\";\n            break;\n            case 'join':\n                $ret = \"\";\n            break;                \n            case 'text':\n            default:\n                $ret = $this->userid.': '.$this->date_time_event;\n            break;\n\n        } \n        return $ret;\n    }\n\n}\n", "<?php\n/*\n * Copyright (C) 2014 delcroip <patrick@pmpd.eu>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n/*Class to handle a line of timesheet*/\n//require_once('mysql.class.php');\nrequire_once DOL_DOCUMENT_ROOT.\"/core/class/commonobject.class.php\";\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';\nrequire_once 'TimesheetHoliday.class.php';\nrequire_once 'TimesheetPublicHoliday.class.php';\nrequire_once 'TimesheetTask.class.php';\nrequire_once 'TimesheetFavourite.class.php';\nif (file_exists('core/lib/generic.lib.php')) {\n    require_once 'core/lib/generic.lib.php';\n}else{\n    //called outside the module\n    Define(\"NULL\", 0);\n    Define(\"DRAFT\", 1);\n    Define(\"SUBMITTED\", 2);\n    Define(\"APPROVED\", 3);\n    Define(\"CANCELLED\", 4);\n    Define(\"REJECTED\", 5);\n    Define(\"CHALLENGED\", 6);\n    Define(\"INVOICED\", 7);\n    Define(\"UNDERAPPROVAL\", 8);\n    Define(\"PLANNED\", 9);\n    Define(\"STATUSMAX\", 10);\n    //APPFLOW\n    //const LINKED_ITEM = [\n    Define(\"USER\", 0);\n    Define(\"TEAM\", 1);\n    Define(\"PROJECT\", 2);\n    Define(\"CUSTOMER\", 3);\n    Define(\"SUPPLIER\", 4);\n    Define(\"OTHER\", 5);\n    Define(\"ALL\", 6);\n    Define(\"ROLEMAX\", 7);\n}\n\nclass TimesheetUserTasks extends CommonObject\n{\n    //common\n    public $db;                                                        //!< To store db handler\n    public $error;                                                        //!< To return error code(or message)\n    public $errors = array();                                //!< To return several error codes(or messages)\n    public $element = 'timesheetuser';                        //!< Id that identify managed objects\n    public $table_element = 'project_task_timesheet';                //!< Name of table without prefix where object is stored\n// from db\n    public $id;\n    public $userId;\n    public $date_start = '';\n    public $date_end;\n    public $status;\n    public $note;\n//basic DB logging\n    public $date_creation = '';\n    public $date_modification = '';\n    public $user_creation;\n    public $user_modification;\n//working variable\n    public $duration;\n    public $ref;\n    public $user;\n    public $holidays;\n    public $publicHolidays;\n    public $taskTimesheet;\n    public $headers;\n    public $weekDays;\n    public $token;\n    public $whitelistmode;\n    public $userName;\n    /**\n     *   Constructor\n     *\n     * @param        DoliDB                $db      Database handler\n     * @param   int             $userId if of the user\n     * @return null\n     */\n    public function __construct($db, $userId = 0)\n    {\n        global $user, $conf;\n        $this->db = $db;\n        $this->user = $user;\n        $this->userId = ($userId == 0)?(is_object($user)?$user->id:$user):$userId;\n        $this->headers = explode('||', $conf->global->TIMESHEET_HEADERS);\n        $this->getUserName();\n    }\n /******************************************************************************\n *\n * DB methods\n *\n ******************************************************************************/\n    /**\n     *  cREATE object into database\n     *\n     *  @param        User        $user        User that modifies\n     *  @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return int                         <0 if KO, >0 if OK\n     */\n    public function create($user, $notrigger = 0)\n    {\n        global $conf, $langs;\n        $error = 0;\n        // Clean parameters\n        if (isset($this->userId)) $this->userId = trim($this->userId);\n        if (isset($this->date_start)) $this->date_start = trim($this->date_start);\n        if (isset($this->date_end)) $this->date_end = trim($this->date_end);\n        if (isset($this->status)) $this->status = trim($this->status);\n        if (isset($this->date_creation)) $this->date_creation = trim($this->date_creation);\n        if (isset($this->date_modification)) $this->date_modification = trim($this->date_modification);\n        if (isset($this->user_modification)) $this->user_modification = trim($this->user_modification);\n        if (isset($this->note)) $this->note = trim($this->note);\n        $userId = (is_object($user)?$user->id:$user);\n        // Check parameters\n        // Put here code to add control on parameters values\n        // Insert request\n        $sql = \"INSERT INTO \".MAIN_DB_PREFIX.$this->table_element.\"(\";\n\n        $sql .= 'fk_userid, ';\n        $sql .= 'date_start, ';\n        $sql .= 'date_end, ';\n        $sql .= 'status, ';\n        $sql .= 'date_creation, ';\n        $sql .= 'date_modification, ';\n        $sql .= 'fk_user_modification, ';\n        $sql .= 'note';\n\n        $sql .= \") VALUES(\";\n        $sql .= ' '.(! isset($this->userId)?'NULL':'\\''.$this->userId.'\\'').', ';\n        $sql .= ' '.(! isset($this->date_start) || dol_strlen($this->date_start) == 0?'NULL':'\\''.$this->db->idate($this->date_start).'\\'').', ';\n        $sql .= ' '.(! isset($this->date_end) || dol_strlen($this->date_end) == 0?'NULL':'\\''.$this->db->idate($this->date_end).'\\'').', ';\n        $sql .= ' '.(! isset($this->status)?DRAFT:$this->status).', ';\n        $sql .= ' NOW(), ';\n        $sql .= ' NOW(), ';\n        $sql .= ' \\''.$userId.'\\', ';\n        $sql .= ' '.(! isset($this->note)?'NULL':'\\''.$this->db->escape(dol_html_entity_decode($this->note, ENT_QUOTES)).'\\'');\n        $sql .= \")\";\n        $this->db->begin();\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if (! $resql) {\n            $error++;$this->errors[] = \"Error \".$this->db->lasterror();\n        }\n        if (! $error) {\n            $this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.$this->table_element);\n                        if (! $notrigger) {\n                    // Uncomment this and change MYOBJECT to your own tag if you\n                    // want this action calls a trigger.\n                    //// Call triggers\n                    //$result = $this->call_trigger('MYOBJECT_CREATE', $user);\n                    //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n                    //// End call triggers\n                        }\n        }\n        // Commit or rollback\n        if ($error) {\n            foreach ($this->errors as $errmsg) {\n                dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                $this->error .= ($this->error?', '.$errmsg:$errmsg);\n            }\n            $this->db->rollback();\n            return -1*$error;\n        } else {\n            $this->db->commit();\n            return $this->id;\n        }\n    }\n    /**\n     *  Load object in memory from the database\n     *\n     *  @param        int                $id        Id object\n     *  @param        string        $ref        Ref\n     *  @return int           <0 if KO, >0 if OK\n     */\n    public function fetch($id, $ref = '')\n    {\n        global $langs;\n        $sql = \"SELECT\";\n        $sql .= \" t.rowid, \";\n        $sql .= ' t.fk_userid, ';\n        $sql .= ' t.date_start, ';\n        $sql .= ' t.date_end, ';\n        $sql .= ' t.status, ';\n        $sql .= ' t.date_creation, ';\n        $sql .= ' t.date_modification, ';\n        $sql .= ' t.fk_user_modification, ';\n        $sql .= ' t.note';\n        $sql .= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as t\";\n        if ($ref) $sql .= \" WHERE t.ref = '\".$ref.\"'\";\n        else $sql .= \" WHERE t.rowid = \".$id;\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if ($resql) {\n            if ($this->db->num_rows($resql)) {\n                $obj = $this->db->fetch_object($resql);\n                $this->id = $obj->rowid;\n                $this->userId = $obj->fk_userid;\n                $this->date_start = $this->db->jdate($obj->date_start);\n                $this->date_end = $this->db->jdate($obj->date_end);\n                $this->status = $obj->status;\n                $this->date_creation = $this->db->jdate($obj->date_creation);\n                $this->date_modification = $this->db->jdate($obj->date_modification);\n                $this->user_modification = $obj->fk_user_modification;\n                $this->note = $obj->note;\n            }\n            $this->db->free($resql);\n            $this->ref = $this->date_start.'_'.$this->userId;\n            return 1;\n        } else {\n            $this->error = \"Error \".$this->db->lasterror();\n            return -1;\n        }\n    }\n    /**\n     *  Load object in memory from the database\n     *\n     *  @return int           <0 if KO, >0 if OK\n     */\n    public function fetchByWeek()\n    {\n        global $langs;\n        $sql = \"SELECT\";\n        $sql .= \" t.rowid, \";\n        $sql .= ' t.fk_userid, ';\n        $sql .= ' t.date_start, ';\n        $sql .= ' t.date_end, ';\n        $sql .= ' t.status, ';\n        $sql .= ' t.date_creation, ';\n        $sql .= ' t.date_modification, ';\n        $sql .= ' t.fk_user_modification, ';\n        $sql .= ' t.note';\n        $sql .= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as t\";\n        $sql .= \" WHERE t.date_start = '\".$this->db->idate($this->date_start).\"'\";\n        $sql .= \" AND t.fk_userid = '\".$this->userId.\"'\";\n\n\n        //$sql .= \" AND t.rowid = \".$id;\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if ($resql) {\n            if ($this->db->num_rows($resql)) {\n                $obj = $this->db->fetch_object($resql);\n                $this->id = $obj->rowid;\n                $this->userId = $obj->fk_userid;\n                $this->date_start = $this->db->jdate($obj->date_start);\n                $this->date_end = $this->db->jdate($obj->date_end);\n                $this->status = $obj->status;\n                $this->date_creation = $this->db->jdate($obj->date_creation);\n                $this->date_modification = $this->db->jdate($obj->date_modification);\n                $this->user_modification = $obj->fk_user_modification;\n                $this->note = $obj->note;\n            } else{\n                unset($this->status) ;\n                unset($this->date_modification);\n                unset($this->user_modification);\n                unset($this->note);\n                unset($this->date_creation);\n                //$this->date_end = getEndWeek($this->date_start);\n                $this->create($this->user);\n                $this->fetch($this->id);\n            }\n            $this->db->free($resql);\n            return 1;\n        } else {\n            $this->error = \"Error \".$this->db->lasterror();\n            return -1;\n        }\n    }\n    /**\n     *  Update object into database\n     *\n     *  @param        User        $user        User that modifies\n     *  @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return int                         <0 if KO, >0 if OK\n     */\n    public function update($user, $notrigger = 0)\n    {\n        global $conf, $langs;\n                $error = 0;\n                // Clean parameters\n                if (isset($this->userId)) $this->userId = trim($this->userId);\n                if (isset($this->date_start)) $this->date_start = trim($this->date_start);\n                if (isset($this->date_end)) $this->date_end = trim($this->date_end);\n                if (isset($this->status)) $this->status = trim($this->status);\n                if (isset($this->date_creation)) $this->date_creation = trim($this->date_creation);\n                if (isset($this->date_modification)) $this->date_modification = trim($this->date_modification);\n                if (isset($this->user_modification)) $this->user_modification = trim($this->user_modification);\n                if (isset($this->note)) $this->note = trim($this->note);\n                $userId = (is_object($user)?$user->id:$user);\n                // Check parameters\n                // Put here code to add a control on parameters values\n        // Update request\n        $sql = \"UPDATE \".MAIN_DB_PREFIX.$this->table_element.\" SET\";\n                $sql .= ' fk_userid='.(empty($this->userId) ? 'null':'\\''.$this->userId.'\\'').', ';\n                $sql .= ' date_start='.(dol_strlen($this->date_start)!=0 ? '\\''.$this->db->idate($this->date_start).'\\'':'null').', ';\n                $sql .= ' date_end='.(dol_strlen($this->date_end)!=0 ? '\\''.$this->db->idate($this->date_end).'\\'':'null').', ';\n                $sql .= ' status='.(empty($this->status)? DRAFT:$this->status).', ';\n                $sql .= ' date_modification = NOW(), ';\n                $sql .= ' fk_user_modification = \\''.$userId.'\\', ';\n                $sql .= ' note = \\''.$this->db->escape(dol_html_entity_decode($this->note, ENT_QUOTES)).'\\'';\n        $sql .= \" WHERE rowid=\".$this->id;\n                $this->db->begin();\n                dol_syslog(__METHOD__, LOG_DEBUG);\n        $resql = $this->db->query($sql);\n        if (! $resql) {\n            $error++;$this->errors[] = \"Error \".$this->db->lasterror();\n        }\n        if (! $error) {\n            if (! $notrigger) {\n        // Uncomment this and change MYOBJECT to your own tag if you\n        // want this action calls a trigger.\n        //// Call triggers\n        //$result = $this->call_trigger('MYOBJECT_MODIFY', $user);\n        //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n        //// End call triggers\n            }\n        }\n// Commit or rollback\n        if ($error) {\n                foreach ($this->errors as $errmsg) {\n            dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n            $this->error .= ($this->error?', '.$errmsg:$errmsg);\n                }\n                $this->db->rollback();\n                return -1*$error;\n        } else {\n                $this->db->commit();\n                return 1;\n        }\n    }\n    /**\n     *  Delete object in database\n     *\n     *  @param  int                $notrigger         0 = launch triggers after, 1 = disable triggers\n     *  @return        int                                         <0 if KO, >0 if OK\n     */\n    public function delete($notrigger = 0)\n    {\n            global $conf, $langs;\n            $error = 0;\n            $this->db->begin();\n            if (! $error) {\n                if (! $notrigger) {\n                        // Uncomment this and change MYOBJECT to your own tag if you\n                // want this action calls a trigger.\n            //// Call triggers\n            //$result = $this->call_trigger('MYOBJECT_DELETE', $user);\n            //if ($result < 0){ $error++;//Do also what you must do to rollback action if trigger fail}\n            //// End call triggers\n                }\n            }\n            if (! $error) {\n                $sql = \"DELETE FROM \".MAIN_DB_PREFIX.$this->table_element;\n                $sql .= \" WHERE rowid=\".$this->id;\n                dol_syslog(__METHOD__, LOG_DEBUG);\n                $resql = $this->db->query($sql);\n                if (! $resql) {\n                    $error++;$this->errors[] = \"Error \".$this->db->lasterror();\n                }\n            }\n    // Commit or rollback\n            if ($error) {\n                foreach ($this->errors as $errmsg) {\n                    dol_syslog(__METHOD__.\" \".$errmsg, LOG_ERR);\n                    $this->error .= ($this->error?', '.$errmsg:$errmsg);\n                }\n                $this->db->rollback();\n                return -1*$error;\n            } else {\n                $this->db->commit();\n                return 1;\n            }\n    }\n    /**\n     *        Load an object from its id and create a new one in database\n     *\n     *        @param        int                $fromid     Id of object to clone\n     *        @return        int                                        New id of clone\n     */\n    public function createFromClone($fromid)\n    {\n        global $user, $langs;\n        $error = 0;\n        $object = new Timesheetuser($this->db);\n        $this->db->begin();\n        // Load source object\n        $object->fetch($fromid);\n        $object->id = 0;\n        $object->statut = 0;\n        // Clear fields\n        // ...\n        // Create clone\n        $result = $object->create();\n        // Other options\n        if ($result < 0) {\n                $this->error = $object->error;\n                $error++;\n        }\n        if (! $error) {\n        }\n        // End\n        if (! $error) {\n                $this->db->commit();\n                return $object->id;\n        } else {\n                $this->db->rollback();\n                return -1;\n        }\n    }\n/******************************************************************************\n *\n * Other methods\n *\n ******************************************************************************/\n    /* Funciton to fect the holiday of a single user for a single week.\n    *  @param    string               $startDate            start date in php format\n    *  @return     string                                       result\n    */\n    public function fetchAll($startdate, $whitelistmode = false)\n    {\n        global $conf;\n        $this->whitelistmode = (is_numeric($whitelistmode)&& !empty($whitelistmode))?$whitelistmode:$conf->global->TIMESHEET_WHITELIST_MODE;\n        $this->date_start = getStartDate($startdate);\n        $this->ref = $this->date_start.'_'.$this->userId;\n        $this->date_end = getEndDate($this->date_start);\n        $this->token = getToken();\n        $this->fetchByWeek();\n        $this->fetchTaskTimesheet();\n        //$ret += $this->getTaskTimeIds();\n        //FIXME module holiday should be activated ?\n        $this->fetchUserHolidays();\n        $this->fetchUserPublicHolidays();\n        $this->saveInSession();\n    }\n    /* Funciton to fect the holiday of a single user for a single week.\n    *  @return     string                                       result\n    */\n    public function fetchUserHolidays()\n    {\n       $this->holidays = new TimesheetHoliday($this->db);\n       $ret = $this->holidays->fetchUserWeek($this->userId, $this->date_start, $this->date_end);\n       return $ret;\n    }\n\n        /* Funciton to fect the public holiday of a single user for a single week.\n    *  @return     string                                       result\n    */\n    public function fetchUserPublicHolidays()\n    {\n       $this->publicHolidays = new TimesheetPublicHolidays($this->db);\n       $ret = $this->publicHolidays->fetchUserWeek($this->userId, $this->date_start, $this->date_end);\n       return $ret;\n    }\n\n    /** function to load from session [//FIXME: to be removed not REST appraoch]\n     *\n     * @param string $token ref to load\n     * @param int $id   object id\n     * @return null\n     */\n   public function loadFromSession($token, $id)\n   {\n       $this->fetch($id);\n       $this->token = $token;\n       $this->userId = $_SESSION['timesheet'][$token][$id]['userId'];\n       $this->date_start = $_SESSION['timesheet'][$token][$id]['dateStart'];\n       $this->date_end = $_SESSION['timesheet'][$token][$id]['dateEnd'];\n       $this->ref = $_SESSION['timesheet'][$token][$id]['ref'];\n       $this->note = $_SESSION['timesheet'][$token][$id]['note'];\n       $this->holidays = unserialize($_SESSION['timesheet'][$token][$id]['holiday']);\n       $this->publicHolidays = unserialize($_SESSION['timesheet'][$token][$id]['publicHolidays']);\n       $this->taskTimesheet = unserialize($_SESSION['timesheet'][$token][$id]['taskTimesheet']);;\n   }\n/*\n * function to load the parma from the session\n * @return void\n */\npublic function saveInSession()\n{\n    $_SESSION['timesheet'][$this->token][$this->id]['userId'] = $this->userId;\n    $_SESSION['timesheet'][$this->token][$this->id]['ref'] = $this->ref;\n    $_SESSION['timesheet'][$this->token][$this->id]['dateStart'] = $this->date_start;\n    $_SESSION['timesheet'][$this->token][$this->id]['dateEnd'] = $this->date_end;\n    $_SESSION['timesheet'][$this->token][$this->id]['note'] = $this->note;\n    $_SESSION['timesheet'][$this->token][$this->id]['holiday'] = serialize($this->holidays);\n    $_SESSION['timesheet'][$this->token][$this->id]['publicHolidays'] = serialize($this->publicHolidays);\n    $_SESSION['timesheet'][$this->token][$this->id]['taskTimesheet'] = serialize($this->taskTimesheet);\n}\n/*\n * function to genegate the timesheet tab\n *\n *  @param    int               $userid                   user id to fetch the timesheets\n *  @return     array(string)                             array of timesheet(serialized)\n */\npublic function fetchTaskTimesheet($userid = '')\n{\n    global $conf, $user;\n    $res = array();\n    if ($userid == '') {\n        $userid = $this->userId;\n    }\n\n    $whiteList = array();\n    \n    $datestart = $this->date_start;\n    $datestop = $this->date_end;\n    $staticWhiteList = new TimesheetFavourite($this->db);\n    $whiteList = $staticWhiteList->fetchUserList($userid, $datestart, $datestop);\n     // Save the param in the SeSSION\n    $tasksList = array();\n    $sqlwhiteList = '';\n    $sql = 'SELECT DISTINCT element_id as taskid, prj.fk_soc, tsk.fk_projet, tsk.progress, ';\n    $sql .= 'tsk.fk_task_parent, tsk.rowid, app.rowid as appid, prj.ref as prjRef, tsk.ref as tskRef';\n    $sql .= $sqlwhiteList;\n    $sql .= \" FROM \".MAIN_DB_PREFIX.\"element_contact as ec\";\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON(ctc.rowid = ec.fk_c_type_contact  AND ctc.active = \\'1\\') ';\n    $sql .= ' JOIN '.MAIN_DB_PREFIX.'projet_task as tsk ON tsk.rowid = ec.element_id ';\n    $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'projet as prj ON prj.rowid = tsk.fk_projet ';\n    //approval\n    if ($this->status == DRAFT || $this->status == REJECTED) {\n        $sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'project_task_time_approval as app ';\n    } else{ // take only the ones with a task_time linked\n        $sql .= 'JOIN '.MAIN_DB_PREFIX.'project_task_time_approval as app ';\n    }\n    $sql .= ' ON tsk.rowid = app.fk_projet_task AND app.fk_userid = fk_socpeople';\n    $sql .= ' AND app.date_start = \\''.$this->db->idate($datestart).'\\'';\n    $sql .= ' AND app.date_end = \\''.$this->db->idate($datestop).'\\'';\n    //end approval\n    $sql .= \" WHERE ((ec.fk_socpeople = '\".$userid.\"' AND ctc.element = 'project_task') \";\n    // SHOW TASK ON PUBLIC PROEJCT\n    if ($conf->global->TIMESHEET_ALLOW_PUBLIC == '1') {\n        $sql .= '  OR  prj.public =  \\'1\\')';\n    }else{\n        $sql .= ' )';\n    }\n    if ($conf->global->TIMESHEET_HIDE_DRAFT == '1') {\n        $sql .= ' AND prj.fk_statut =  \\'1\\'';\n    }else{\n        $sql .= ' AND prj.fk_statut in (\\'0\\',\\'1\\')';\n    }\n    $sql .= ' AND (prj.datee >= \\''.$this->db->idate($datestart).'\\' OR prj.datee IS NULL)';\n    $sql .= ' AND (prj.dateo <= \\''.$this->db->idate($datestop).'\\' OR prj.dateo IS NULL)';\n    $sql .= ' AND (tsk.datee >= \\''.$this->db->idate($datestart).'\\' OR tsk.datee IS NULL)';\n    $sql .= ' AND (tsk.dateo <= \\''.$this->db->idate($datestop).'\\' OR tsk.dateo IS NULL)';\n    // show task only of people on the same project (not used for team leader)\n    if ( !$user->admin && $userid != $user->id && !in_array($userid, $user->getAllChildIds())){\n        $sql .= \" AND ((tsk.rowid in (SELECT element_id FROM \".MAIN_DB_PREFIX.\"element_contact as ec LEFT JOIN \".MAIN_DB_PREFIX.\"c_type_contact as ctc ON(ctc.rowid = ec.fk_c_type_contact AND ctc.active = '1')\";\n        $sql .= \" WHERE ec.fk_socpeople = '\".$user->id.\"' AND ctc.element = 'project_task' AND element_id = tsk.rowid ))\";\n        $sql .= \" OR (prj.rowid in (SELECT element_id FROM \".MAIN_DB_PREFIX.\"element_contact as ec LEFT JOIN \".MAIN_DB_PREFIX.\"c_type_contact as ctc ON(ctc.rowid = ec.fk_c_type_contact AND ctc.active = '1')\";\n        $sql .= \" WHERE ec.fk_socpeople = '\".$user->id.\"' AND ctc.element = 'project'  AND element_id = prj.rowid )))\";\n    }\n    $sql .= '  ORDER BY prj.fk_soc, prjRef, tskRef ';\n    dol_syslog(__METHOD__, LOG_DEBUG);\n    $resql = $this->db->query($sql);\n    if ($resql) {\n        $this->taskTimesheet = array();\n            $num = $this->db->num_rows($resql);\n            $i = 0;\n            // Loop on each record found, so each couple (project id, task id)\n            while($i < $num)\n            {\n                    $error = 0;\n                    $obj = $this->db->fetch_object($resql);\n                    $tasksList[$i] = NEW TimesheetTask($this->db, $obj->taskid);\n                    //$tasksList[$i]->id = $obj->taskid;\n                    if ($obj->appid) {\n                        $tasksList[$i]->fetch($obj->appid);\n                    }\n                    $tasksList[$i]->userId = $this->userId;\n                    $tasksList[$i]->date_start_approval = $this->date_start;\n                    $tasksList[$i]->date_end_approval = $this->date_end;\n                    $tasksList[$i]->task_timesheet = $this->id;\n                    $tasksList[$i]->progress = $obj->progress;\n                    $tasksList[$i]->listed = $whiteList[$obj->taskid];\n                    $i++;\n                    $ret[$obj->taskid] = $obj->appid;\n            }\n            $this->db->free($resql);\n             $i = 0;\n            if (isset($this->taskTimesheet))unset($this->taskTimesheet);\n            foreach ($tasksList as $row) {\n                dol_syslog(__METHOD__.'::task='.$row->id, LOG_DEBUG);\n                $row->getTaskInfo();// get task info include in fetch\n                $row->getActuals($datestart, $datestop, $userid);\n                $this->taskTimesheet[$row->id] = $row->serialize();\n            }\n            return $ret;\n    } else {\n            dol_print_error($this->db);\n            return -1;\n    }\n}\n /*\n * function to post the all actual submitted\n *\n *  @param    array(int)               $tabPost               array sent by POST with all info about the task\n *  @param    array(int)               $notes                  array sent by POST with the task notes\n *  @param    array(int)               $progress               array sent by POST with the task dstated progress\n *  @return     int                                                        number of tasktime creatd/changed\n */\npublic function updateActuals($tabPost, $notes = array(), $progress = array())\n{\n    \n     //FIXME, tta should be creted\n    if ($this->status == APPROVED)return -1;\n\n    dol_syslog(__METHOD__, LOG_DEBUG);\n    $ret = 0;\n   // $tmpRet = 0;\n    //$_SESSION['timesheet'][$this->token]['timeSpendCreated'] = 0;\n    //$_SESSION['timesheet'][$this->token]['timeSpendDeleted'] = 0;\n    //$_SESSION['timesheet'][$this->token]['timeSpendModified'] = 0;\n    // $_SESSION['timesheet'][$token]['NoteUpdated'] = 0\n        /*\n         * For each task store in matching the session token\n         */\n        if (is_array($this->taskTimesheet)){ \n            foreach ($this->taskTimesheet as $key => $row) { \n                $tasktime = new TimesheetTask($this->db);\n                $tasktime->unserialize($row);\n                if (isset($tabPost[$tasktime->id])){  \n                    \n                    $ret += $tasktime->postTaskTimeActual($tabPost[$tasktime->id], \n                        $this->userId, $this->user, $this->token,  \n                        $notes[$tasktime->id], $progress[$tasktime->id]);\n                }\n                $this->taskTimesheet[$key] = $tasktime->serialize();\n            }\n        }\n        /*\n    if (!empty($idList)) {\n        //$this->project_tasktime_list = $idList;\n        $this->update($this->user);\n    }\n    */\n    return $ret;\n}\n/*\n * function to get the name from a list of ID\n *\n  *  @param    object            $db             database objet\n *  @param    array(int)/int        $userids        array of manager id\n  *  @return  array(int => String)                                array(ID => userName)\n */\npublic function getUserName()\n{\n    $sql = \"SELECT usr.rowid, CONCAT(usr.firstname, ' ', usr.lastname) as username FROM \".MAIN_DB_PREFIX.'user AS usr WHERE';\n    $sql .= ' usr.rowid = '.$this->userId;\n    dol_syslog(__METHOD__, LOG_DEBUG);\n    $resql = $this->db->query($sql);\n    if ($resql) {\n        $i = 0;\n        $num = $this->db->num_rows($resql);\n        if ($num) {\n            $obj = $this->db->fetch_object($resql);\n            if ($obj) {\n                $this->userName = $obj->username;\n            } else{\n                return -1;\n            }\n            $i++;\n        }\n    } else {\n       return -1;\n    }\n      //$select .= \"\\n\";\n    return 0;\n}\n  /*\n * update the status based on the underlying Task_time_approval\n *\n *  @param    object/int                $user           timesheet object, (task)\n *  @param    string               $status              to overrule the logic if the status enter has an higher priority\n *  @return     string                         status updated of KO(-1)\n */\npublic function updateStatus($user, $status = 0)\n{\n    if ($this->id <= 0)return -1;\n    if ($status!='') {\n        if ($status<0 || $status> STATUSMAX)return -1;// status not valid\n        $updatedStatus = $status;\n    } elseif (!empty($this->status)) {\n         $updatedStatus = $this->status;\n    } else{ // no status\n        $updatedStatus = 2;\n    }\n    if (!is_array($this->taskTimesheet) || count($this->taskTimesheet)<1)$this->fetchTaskTimesheet();\n    if ($status == $this->status) { // to avoid eternal loop\n        return 1;\n    }\n    $Priority = array(\n    DRAFT => 0,\n    SUBMITTED => 1,\n    APPROVED => 2,\n    CANCELLED => 4,\n    REJECTED => 5,\n    CHALLENGED => 6,\n    INVOICED => 7,\n    UNDERAPPROVAL => 3,\n    PLANNED => 9);\n    //look for the status to apply to the TS  from the TTA\n    if (count($this->taskTimesheet ))foreach ($this->taskTimesheet as $row) {\n        $tta = new TimesheetTask($this->db);\n        $tta->unserialize($row);\n        if ($tta->appId>0) { // tta already created\n            $tta->fetch($tta->appId);\n            $statusPriorityCur = $tta->status;\n            $updatedStatus = ($Priority[$updatedStatus]>$Priority[$statusPriorityCur])?$updatedStatus:$statusPriorityCur;\n        }// no else as the tta should be created upon submission of the TS not status update\n    }\n    $this->status = $updatedStatus;\n    $this->update($user);\n     return $this->status;\n}\n /*\n * change the status of an approval\n *\n *  @param      object/int        $user         user object or user id doing the modif\n *  @param      int               $id           id of the timesheetuser\n *  @return     int                         <0 if KO, Id of created object if OK\n */\nPublic function setStatus($user, $status, $id = 0)\n{\n    //role ?\n    $error = 0;\n    //if the satus is not an ENUM status\n    if ($status<0 || $status>STATUSMAX) {\n        dol_syslog(__METHOD__.\": this status '{$status}' is not part or the enum list\", LOG_ERR);\n        return false;\n    }\n    $Approved = (in_array($status, array(APPROVED, UNDERAPPROVAL)));\n    $Rejected = (in_array($status, array(REJECTED, CHALLENGED)));\n    $Submitted = ($status == SUBMITTED)?true:false;\n    $draft = ($status == DRAFT)?true:false;\n    // Check parameters\n    if ($id!=0)$this->fetch($id);\n    $this->status = $status;\n    // Update request\n    $error = ($this->id <= 0)?$this->create($user):$this->update($user);\n    if ($error>0) {\n        if ($status == REJECTED)$this->sendRejectedReminders($user);\n        if (is_array($this->taskTimesheet) && count($this->taskTimesheet)<1) {\n        $this->fetch($id);\n        }\n        $this->status = DRAFT;// SET THE STATUS TO DRAFT TO GET ALL\n        $this->fetchTaskTimesheet();\n        $this->status = $status;\n        $this->status = $status;\n        if (is_array($this->taskTimesheet) && count($this->taskTimesheet)>0)foreach ($this->taskTimesheet as $ts) {\n            $tasktime = new TimesheetTask($this->db);\n            $tasktime->unserialize($ts);\n            //$tasktime->appId = $this->id;\n            if ($Approved)$ret = $tasktime->approved($user, TEAM, false);\n            elseif ($Rejected)$ret = $tasktime->challenged($user, TEAM, false);\n            elseif ($Submitted)$ret = $tasktime->submitted($user);\n            elseif ($draft)$ret = $tasktime->setStatus($user, DRAFT);\n        }\n          //if ($ret>0)$this->db->commit();\n        return 1;\n    }\n}\n/******************************************************************************\n *\n * HTML  methods\n *\n ******************************************************************************/\n/* function to genegate the tHTML view of the TS\n *  @param    bool           $ajax     ajax of html behaviour\n *  @return     string                                                   html code\n */\npublic function getHTML( $ajax = false, $Approval = false)\n{\n    global $langs;\n    $Form = $this->getHTMLHeader(true);\n    // show the filter\n    $Form .= $this->getHTMLHolidayLines($ajax);\n    $Form .= $this->getHTMLPublicHolidayLines($ajax);\n    //if (!$Approval)$Form .= $this->getHTMLTotal();\n    //$Form .= '<tbody style = \"overflow:auto;\">';\n    $Form .= $this->getHTMLtaskLines( $ajax);\n    //$Form .= '</tbody>';// overflow div\n    //$Form .= $this->getHTMLTotal();\n    $Form .= '</table>';\n    $Form .= $this->getHTMLNote($ajax);\n    if (!$Approval) {\n        $Form .= $this->getHTMLFooter($ajax);\n    }\n    $Form .= '<br>'.\"\\n\";\n    return $Form;\n}\n/* function to genegate the timesheet table header\n *   @param    bool    $search    dd search\n *   @return     string                                                   html code\n */\npublic function getHTMLHeader($search = false)\n{\n    global $langs, $conf;\n    $weeklength = getDayInterval($this->date_start, $this->date_end);\n    $maxColSpan = $weeklength+count($this->headers);\n    $format = ($langs->trans(\"FormatDateShort\")!=\"FormatDateShort\"?$langs->trans(\"FormatDateShort\"):$conf->format_date_short);\n    $html = '<input type = \"hidden\" name = \"startDate\" value = \"'.$this->date_start.'\" />';\n    $html .= '<input type = \"hidden\" name = \"tsUserId\" value = \"'.$this->id.'\" />';\n    $html .= \"\\n<table id = \\\"timesheetTable_{$this->id}\\\" class = \\\"noborder\\\" width = \\\"100%\\\">\\n\";\n    if ($search) {\n        $html .= '<tr  id = \"searchline\">';\n        $html .= '<td><a>'.$langs->trans(\"Search\").'</a></td>';\n        $html .= '<td span = \"0\"><input type = \"texte\" name = \"taskSearch\" onkeyup = \"searchTask(this)\"></td></tr>';\n    }\n    ///Whitelist tab\n    if ($conf->global->TIMESHEET_TIME_SPAN == \"month\") {\n        $format = \"%d\";\n        $html .= '<tr class = \"liste_titre\" id = \"\">'.\"\\n\";\n        $html .= '<td colspan = \"'.$maxColSpan.'\" align = \"center\"><a >'.$langs->trans(date('F', $this->date_start)).' '.date('Y', $this->date_start).'</a></td>';\n        $html .= '</tr>';\n    }\n    $html .= '<tr class = \"liste_titre\" id = \"\">'.\"\\n\";\n    \n    foreach ($this->headers as $key => $value) {\n        $html .= \"\\t<th \";\n        if (count($this->headers) == 1) {\n                $html .= 'colspan = \"2\" ';\n        }\n        $html .= \"> <a onclick=\\\"sortTable('timesheetTable_{$this->id}', 'col{$value}', 'asc');\\\">\".$langs->trans($value).\"</a></th>\\n\";\n    }\n    $opendays = str_split($conf->global->TIMESHEET_OPEN_DAYS);\n    for ($i = 0;$i<$weeklength;$i++)\n    {\n        $curDay = $this->date_start+ SECINDAY*$i+SECINDAY/4;\n        $htmlDay = ($conf->global->TIMESHEET_TIME_SPAN == \"month\")?substr($langs->trans(date('l', $curDay)), 0, 3):$langs->trans(date('l', $curDay));\n        $html .= \"\\t\".'<th class = \"daysClass days_'.$this->id.'\" id = \"'.$this->id.'_'.$i.'\" width = \"35px\" style = \"text-align:center;\" >'.$htmlDay.'<br>'.dol_print_date($curDay, $format).\"</th>\\n\";\n    }\n    return $html;\n}\n/* function to genegate the timesheet table header\n *\n  *  @param    bool           $ajax     ajax of html behaviour\n  *  @return     string                                                   html code\n */\npublic function getHTMLFormHeader($ajax = false)\n{\n     global $langs, $conf;\n    $html = '<form id = \"timesheetForm\" name = \"timesheet\" onSubmit=\"removeUnchanged();\" action=\"?action=submit&wlm='.$this->whitelistmode.'&userid='.$this->userId.'\" method = \"POST\"';\n    if ($ajax)$html .= ' onsubmit = \" return submitTimesheet(0);\"';\n    $html .= '>';\n    if($conf->agenda->enabled && $conf->global->TIMESHEET_IMPORT_AGENDA){\n        $html .= '<a class = \"butAction\" href=\"?action=importCalandar&startDate='.$this->date_start.'\">'.$langs->trans('ImportCalandar').'</a>';\n    }\n    return $html;\n}\n  /* function to genegate ttotal line\n  *\n  *  @return     string\n */\npublic function getHTMLTotal()\n{\n    $html = \"<tr class = 'liste_titre'>\\n\";\n    $html .= '<th colspan = \"'.(count($this->headers)-1).'\" align = \"right\" > TOTAL </th>';\n    $length = getDayInterval($this->date_start, $this->date_end);\n    $html .= \"<th><div class = \\\"TotalUser_{$this->id}\\\">&nbsp;</div></th>\\n\";\n    for ($i = 0;$i<$length;$i++)\n    {\n       $html .= \"<th><div class = \\\"TotalColumn_{$this->id} TotalColumn_{$this->id}_{$i}\\\">&nbsp;</div></th>\\n\";\n    }\n    $html .= \"</tr>\\n\";\n    return $html;\n}\n  /* function to genegate the timesheet table header\n *\n *  @param     int               $ajax         enable ajax handling\n *  @return     string                                               html code\n */\npublic function getHTMLFooter($ajax = false)\n{\n    global $langs;\n    //form button\n    $html = '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$this->token.\"\\\"/>\\n\";\n    $html .= $this->getHTMLActions();\n    $html .= \"</form>\\n\";\n    if ($ajax) {\n        $html .= '<script type = \"text/javascript\">'.\"\\n\\t\";\n        $html .= 'window.onload = function()\n            {loadXMLTimesheet(\"'.$this->date_start.'\", '.$this->userId.');}';\n        $html .= \"\\n\\t\".'</script>'.\"\\n\";\n    }\n     return $html;\n}\n\n/**\n * \n * \n */\n\npublic function getHTMLActions(){\n    global $langs, $apflows;\n    $html = '<div class = \"tabsAction\">';\n    $isOpenSatus = in_array($this->status, array(DRAFT, CANCELLED, REJECTED));\n    if ($isOpenSatus) {\n        $html .= '<input type = \"submit\"   class = \"butAction\" name = \"save\" value = \"'.$langs->trans('Save').\"\\\" />\\n\";\n        //$html .= '<input type = \"submit\" class = \"butAction\" name = \"submit\" onClick = \"return submitTs();\" value = \"'.$langs->trans('Submit').\"\\\" />\\n\";\n        if (in_array('1', array_slice($apflows, 1))) {\n            $html .= '<input type = \"submit\"  class = \"butAction\" name = \"submit\"  value = \"'.$langs->trans('Submit').\"\\\" />\\n\";\n            $html .= '<input type = \"submit\"  class = \"butAction\" name = \"submit_next\"  value = \"'.$langs->trans('SubmitNext').\"\\\" />\\n\";\n        }else{\n            $html .= '<input type = \"submit\"  class = \"butAction\" name = \"save_next\"  value = \"'.$langs->trans('SaveNext').\"\\\" />\\n\";\n        }\n        $html .= '<a class = \"butActionDelete\" href=\"?action=list&startDate='.$this->date_start.'\">'.$langs->trans('Cancel').'</a>';\n    } elseif ($this->status == SUBMITTED)$html .= '<input type = \"submit\" class = \"butAction\" name = \"recall\" \" value = \"'.$langs->trans('Recall').\"\\\" />\\n\";\n    $html .= '</div>';\n    return $html;\n }\n   /* function to genegate the timesheet table header\n *\n *  @param    int           $current           number associated with the TS AP\n\n  *  @return     string                                                   html code\n */\npublic function getHTMLFooterAp($current)\n{\n     global $langs;\n    //form button\n    $html = '<input type = \"hidden\" id=\"csrf-token\"  name = \"token\" value = \"'.$this->token.\"\\\"/>\\n\";\n    $html .= '<input type = \"hidden\" name = \"target\" value = \"'.($current+1).\"\\\"/>\\n\";\n    $html .= '<div class = \"tabsAction\">';\n    $html .= '<input type = \"submit\" class = \"butAction\" name = \"Send\" value = \"'.$langs->trans('Next').\"\\\" />\\n\";\n    //$html .= '<input type = \"submit\" class = \"butAction\" name = \"submit\" onClick = \"return submitTs();\" value = \"'.$langs->trans('Submit').\"\\\" />\\n\";\n    $html .= '</div>';\n    $html .= \"</form>\\n\";\n     return $html;\n}\n      /*\n * function to genegate the timesheet list\n\n *  @return     string                                                   html code\n */\npublic function getHTMLtaskLines( $ajax = false)\n{\n    $i = 1;\n    $Lines = '';\n    $nbline = 0;\n    $personalHoliday = null;\n    $publicHoliday = null;\n    if (is_array($this->holidays->holidaylist) && $this->holidays->holidayPresent){\n        $personalHoliday = $this->holidays->holidaylist;\n    }\n    if (is_array($this->publicHolidays->holidaylist) && $this->publicHolidays->holidayPresent){\n        $publicHoliday = $this->publicHolidays->holidaylist;\n    }\n    //$holiday =  $publicHoliday + $personalHoliday;\n    $holiday = array();\n    if(is_array($personalHoliday) && is_array($publicHoliday)){\n        for($i = 0; $i < max(count($personalHoliday),count($publicHoliday)); $i++){\n            $holiday[$i] = array_merge($publicHoliday[$i],$personalHoliday[$i]);\n        }\n    }else if(is_array($personalHoliday)){\n        $holiday = $personalHoliday;\n    }else if(is_array($publicHoliday)){\n        $holiday = $publicHoliday;\n    }\n  \n    \n    if (!$ajax & is_array($this->taskTimesheet)) {\n        $nbline = count($this->taskTimesheet);\n        foreach ($this->taskTimesheet as $timesheet) {\n            $row = new TimesheetTask($this->db);\n            $row->unserialize($timesheet);\n            \n            //$row->db = $this->db;\n            if (in_array($this->status, array(REJECTED, DRAFT, PLANNED, CANCELLED))) {\n                $blockOveride = -1;\n            } elseif (in_array($this->status, array(UNDERAPPROVAL, INVOICED, APPROVED, CHALLENGED, SUBMITTED))) {\n                $blockOveride = 1;\n            } else{\n                $blockOveride = 0;\n            }\n            $Lines .= $row->getTimesheetLine($this->headers, $this->id, $blockOveride, $holiday);\n            //if ($i%10 == 0 &&  $nbline-$i >5) $Lines .= $this->getHTMLTotal();\n            $i++;\n        }\n    }\n    return $Lines;\n}\n   /* function to genegate the timesheet note\n *\n  *  @return     string                                                   html code\n */\npublic function getHTMLNote()\n{\n     global $langs;\n     $isOpenSatus = (in_array($this->status, array(REJECTED, DRAFT, PLANNED, CANCELLED)));\n     $html = '<div class = \"noborder\"><div  width = \"100%\">'.$langs->trans('Note').'</div><div width = \"100%\">';\n    if ($isOpenSatus) {\n        $html .= '<textarea class = \"flat\"  cols = \"75\" name = \"noteTaskApproval['.$this->id.']\" rows = \"3\" >'.$this->note.'</textarea>';\n        $html .= '</div>';\n    } elseif (!empty($this->note)) {\n        $html .= $this->note;\n        $html .= '></div>';\n    } else{\n        $html = \"\";\n    }\n    return $html;\n}\n        /*\n * function to genegate the timesheet list\n *  @return     string                                                   html code\n */\npublic function getHTMLHolidayLines($ajax = false)\n{\n    $i = 0;\n    $Lines = '';\n    if (!$ajax) {\n        if (is_object($this->holidays)){\n            $Lines .= $this->holidays->getHTMLFormLine($this->headers, $this->id, $this->userId);\n        }else{\n            dol_syslog(__METHOD__.\": missing Holiday object\", LOG_ERR);\n\n        }\n    }\n    return $Lines;\n}\n        /*\n * function to genegate the timesheet list\n *  @return     string                                                   html code\n */\npublic function getHTMLPublicHolidayLines($ajax = false)\n{\n    $i = 0;\n    $Lines = '';\n    if (!$ajax) {\n        if (is_object($this->publicHolidays)){\n            $Lines .= $this->publicHolidays->getHTMLFormLine($this->headers, $this->id, $this->userId);\n        }else{\n            dol_syslog(__METHOD__.\": missing Holiday object\", LOG_ERR);\n\n        }\n    }\n    return $Lines;\n}\n /*\n * function to print the timesheet navigation header\n *\n *  @param    string               $optioncss           printmode\n *  @param     int               $ajax                support the ajax mode(not supported yet)\n *  @param     object              $form                form object\n *  @return     string                                       HTML\n */\npublic function getHTMLNavigation($optioncss, $ajax = false)\n{\n    global $langs, $conf;\n    $form = new Form($this->db);\n    $tail = '';\n    if (isset($conf->global->TIMESHEET_ADD_FOR_OTHER) \n        && $conf->global->TIMESHEET_ADD_FOR_OTHER == 1){\n        $tail = '&userid='.$this->userId;\n    }\n    $Nav = '<table class = \"noborder\" width = \"50%\">'.\"\\n\\t\".'<tr>'.\"\\n\\t\\t\".'<th>'.\"\\n\\t\\t\\t\";\n    if ($ajax) {\n    } else{\n        $Nav .= '<a href=\"?dateStart='.getStartDate($this->date_start, -1).$tail;\n    }\n    if ($optioncss != '')$Nav .= '&amp;optioncss='.$optioncss;\n    $Nav .= '\">  &lt;&lt;'.$langs->trans(\"Previous\").' </a>'.\"\\n\\t\\t</th>\\n\\t\\t<th>\\n\\t\\t\\t\";\n    $Nav .= '<form name = \"goToDate\" action=\"?action=goToDate'.$tail.'\" method = \"POST\" >'.\"\\n\\t\\t\\t\";\n    //FIXME should take token as input\n    $token = getToken();\n    $Nav .= '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n\n    $Nav .= $langs->trans(\"GoTo\").': '.$form->select_date(-1, 'toDate', 0, 0, 0, \"\", 1, 1, 1).\"\\n\\t\\t\\t\";;\n    $Nav .= '<input type = \"submit\" value = \"Go\" /></form>'.\"\\n\\t\\t</th>\\n\\t\\t<th>\\n\\t\\t\\t\";\n    $Nav .= '<a href=\"?dateStart='.getStartDate($this->date_start, 1).$tail;\n    if ($optioncss != '') $Nav .= '&amp;optioncss='.$optioncss;\n    $Nav .= '\">'.$langs->trans(\"Next\").' &gt;&gt;</a>'.\"\\n\\t\\t</th>\\n\\t</tr>\\n </table>\\n\";\n    return $Nav;\n}\n     /**\n     *        Return clickable name(with picto eventually)\n     *\n     *        @param                string                        $htmlcontent                text to show\n     *        @param                int                        $id                     Object ID\n     *        @param                string                        $ref                    Object ref\n     *        @param                int                        $withpicto                0 = _No picto, 1 = Includes the picto in the linkn, 2 = Picto only\n     *        @return                string                                                String with URL\n     */\n    public function getNomUrl($htmlcontent, $id = 0, $ref = '', $withpicto = 0)\n    {\n        global $langs;\n        $result = '';\n        if (empty($ref) && $id == 0) {\n            if (isset($this->id)) {\n                $id = $this->id;\n            } elseif (isset($this->rowid)) {\n                $id = $this->rowid;\n            }if (isset($this->ref)) {\n                $ref = $this->ref;\n            }\n        }\n        if ($id) {\n            $lien = '<a href = \"'.DOL_URL_ROOT.'/timesheet/timesheetuser.php?id='.$id.'&action=view\">';\n        } elseif (!empty($ref)) {\n            $lien = '<a href = \"'.DOL_URL_ROOT.'/timesheet/timesheetuser.php?ref='.$ref.'&action=view\">';\n        } else{\n            $lien = \"\";\n        }\n        $lienfin = empty($lien)?'':'</a>';\n        $picto = 'timesheet@timesheet';\n        if ($ref) {\n            $label = $langs->trans(\"Show\").': '.$ref;\n        } elseif ($id) {\n            $label = $langs->trans(\"Show\").': '.$id;\n        }\n        if ($withpicto == 1) {\n            $result .= ($lien.img_object($label, $picto).$htmlcontent.$lienfin);\n        } elseif ($withpicto == 2) {\n            $result .= $lien.img_object($label, $picto).$lienfin;\n        } else{\n            $result .= $lien.$htmlcontent.$lienfin;\n        }\n        return $result;\n    }\n    /**\n    *        Return HTML to get other user\n    *\n    *        @param                string                        $idsList                list of user id\n    *        @param                int                        $selected               id that shoudl be selected\n    *        @param                int                        $admin                 is the user an admin\n    *        @return                string                                                String with URL\n    */\n    public function getHTMLGetOtherUserTs($idsList, $selected, $admin)\n    {\n        global $langs;\n        $form = new Form($this->db);\n        $HTML = '<form id = \"timesheetForm\" name = \"OtherUser\" action=\"?action=getOtherTs&wlm='.$this->whitelistmode.'\" method = \"POST\">';\n        if (!$admin) {\n            $HTML .= $form->select_dolusers($selected, 'userid', 0, null, 0, $idsList);\n        } else{\n            $HTML .= $form->select_dolusers($selected, 'userid');\n        }\n        //FIXME should take token as input\n        $token = getToken();\n        $HTML .= '<input type = \"hidden\" id=\"csrf-token\" name = \"token\" value = \"'.$token.'\"/>';\n\n        $HTML .= '<input type = \"submit\" value = \"'.$langs->trans('Submit').'\"/></form> ';\n        \n        return $HTML;\n    }\n    /**\n     *        Initialise object with example values\n     *        Id must be 0 if object instance is a specimen\n     *\n     *  @param bool $test to init test speciemen\n     *        @return        void\n     */\n    public function initAsSpecimen($test = false)\n    {\n        $this->id = 0;\n\n        $this->userId = '';\n        $this->date_start = '';\n        $this->date_end = '';\n        //$this->status = '';\n        //$this->sender = '';\n        //$this->recipient = '';\n        //$this->estimates = '';\n        //$this->tracking = '';\n        //$this->tracking_ids = '';\n        $this->date_creation = '';\n        //$this->date_modification = '';\n        $this->user_creation = '';\n        //$this->user_modification = '';\n        $this->task = '';\n        $this->note = '';\n        if ($test) {\n            $this->userId = 1;\n            $this->date_start = srttotime('this monday', dol_mktime());\n            $this->date_end = srttotime('next monday', dol_mktime())-1;\n            $this->task = 1;\n            $this->note = 'this is a test usertasktime';\n        }\n    }\n\n/******************************************************************************\n *\n * AJAX methods\n *\n ******************************************************************************/\n/*\n * function to get the timesheet in XML format(not up to date)\n *\n *  @return     string                                         XML result containing the timesheet info\n */\n        /*\npublic function GetTimeSheetXML()\n{\n    global $langs, $conf;\n    $xml .= \"<timesheet dateStart = \\\"{$this->date_start}\\\" token = \\\"{$this->token}\\\" timetype = \\\"\".$conf->global->TIMESHEET_TIME_TYPE.\"\\\"\";\n    $xml .= ' nextWeek = \"'.date('Y\\WW', strtotime($this->date_start.\"+3 days +1 week\")).'\" prevWeek = \"'.date('Y\\WW', strtotime($this->date_start.\"+3 days -1 week\")).'\">';\n    //error handling\n    $xml .= getEventMessagesXML();\n    //header\n    $i = 0;\n    $xmlheaders = '';\n    foreach ($this->headers as $header) {\n        if ($header == 'Project') {\n            $link = ' link = \"'.DOL_URL_ROOT.'/projet/card.php?id=\"';\n        } elseif ($header == 'Tasks' || $header == 'TaskParent') {\n            $link = ' link = \"'.DOL_URL_ROOT.'/projet/tasks/task.php?withproject=1&amp;id=\"';\n        } elseif ($header == 'Company') {\n            $link = ' link = \"'.DOL_URL_ROOT.'/societe/soc.php?socid=\"';\n        } else{\n            $link = '';\n        }\n        $xmlheaders .= \"<header col = \\\"{$i}\\\" name = \\\"{$header}\\\" {$link}>{$langs->transnoentitiesnoconv($header)}</header>\";\n        $i++;\n    }\n    $xml .= \"<headers>{$xmlheaders}</headers>\";\n        //days\n    $xmldays = '';\n    for ($i = 0;$i<7;$i++)\n    {\n       $curDay = strtotime($this->date_start.' +'.$i.' day');\n       //$weekDays[$i] = date('d-m-Y', $curDay);\n       $curDayTrad = $langs->trans(date('l', $curDay)).'  '.dol_mktime($curDay);\n       $xmldays .= \"<day col = \\\"{$i}\\\">{$curDayTrad}</day>\";\n    }\n    $xml .= \"<days>{$xmldays}</days>\";\n        $tab = $this->fetchTaskTimesheet();\n        $i = 0;\n        $xml .= \"<userTs userid = \\\"{$this->userId}\\\"  count = \\\"\".count($this->taskTimesheet).\"\\\" userName = \\\"{$this->userName}\\\" >\";\n        foreach ($this->taskTimesheet as $timesheet) {\n            $row = new TimesheetTask($this->db);\n             $row->unserialize($timesheet);\n            $xml .= $row->getXML($this->date_start);//FIXME\n            $i++;\n        }\n        $xml .= \"</userTs>\";\n    //}\n    $xml .= \"</timesheet>\";\n    return $xml;\n}        */\n    /**\n     *  Function that will send email to\n     *\n     * @return bool success / failure\n     */\n    public function sendApprovalReminders()\n    {\n        global $langs;\n        $ret = true;\n        $sql = 'SELECT';\n        $sql .= ' t.date_start, t.date_end, ';\n        $sql .= ' u.email as w_email, utm.email as tm_email,';\n        $sql .= ' u.fk_user as approverid';\n        $sql .= ' FROM '.MAIN_DB_PREFIX.'project_task_time_approval as t';\n        $sql .= ' JOIN '.MAIN_DB_PREFIX.'user as u on t.fk_userid = u.rowid ';\n        $sql .= ' JOIN '.MAIN_DB_PREFIX.'user as utm on u.fk_user = utm.rowid ';\n        $sql .= ' WHERE (t.status='.SUBMITTED.' OR t.status='.UNDERAPPROVAL.' OR t.status='.CHALLENGED.') ';\n        $sql .= '  AND t.recipient='.TEAM.' ORDER BY u.fk_user';\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $emails = array();\n        $resql = $this->db->query($sql);\n        if ($resql) {\n            $num = $this->db->num_rows($resql);\n            for ($i = 0;$i<$num;$i++) {\n                $obj = $this->db->fetch_object($resql);\n                $emails[$obj->tm_email][$obj->w_email][] = array(\n                    \"date_start\" => $obj->date_start,\n                    \"date_end\" => $obj->date_end\n                );\n            }\n        } else {\n            dol_print_error($db);\n            $list = array();\n            $ret = false;\n        }\n        if ($ret != false) {\n            foreach ($emails as $tm_email => $user_approuvals) {\n                foreach ($user_approuvals as $w_email => $dates) {\n                    $message = str_replace(\n                        \"__NB_TS__\", count($dates), \n                        str_replace('\\n', \"\\n\", $langs->trans('YouHaveApprovalPendingMsg'))\n                    );\n                    foreach ($dates as $date) {\n                        $message .= \"\\n * \".$date[\"date_start\"].\" - \".$date[\"date_end\"];\n                    }\n                    $sendto = $tm_email;\n                    $replyto = $w_email;\n                    $addr_cc = null; //$addr_cc = $obj->w_email;\n                    $subject = $langs->transnoentities(\"YouHaveApprovalPending\");\n                    if (!empty($sendto) && $sendto!=\"NULL\") {\n                        include_once DOL_DOCUMENT_ROOT .'/core/class/CMailFile.class.php';\n                        $mailfile = new CMailFile(\n                            $subject,\n                            $sendto,\n                            $replyto,\n                            $message,\n                            $filename_list = array(),\n                            $mimetype_list = array(),\n                            $mimefilename_list = array(),\n                            $addr_cc, $addr_bcc = null,\n                            $deliveryreceipt = 0,\n                            $msgishtml = 1\n                        );\n                        $ret = $ret && $mailfile->sendfile();\n                    }\n                }\n            }\n        }\n        return $ret;\n    }\n\n\n    /**\n     * Function that will send email upon timesheet not sent\n     * @return bool success / failure\n     */\n    public function sendTimesheetReminders()\n    {\n    //check date: was yesterday a period end day ?\n    $date_start = getStartDate(time(), -1);\n    $date_end = getEndDate($date_start);\n        $ret = true;\n        $sql = \"SELECT SUM(pt.task_duration)/3600 as duration,  u.weeklyhours\n            u.email, u.weeklyhours\n            FROM \".MAIN_DB_PREFIX.\"element_contact  as ec ON t.rowid = ec.element_id\n           LEFT JOIN '.MAIN_DB_PREFIX.'c_type_contact as ctc ON ctc.rowid = fk_c_type_contact\n            LEFT JOIN llx_projet_task_time pt ON  pt.fk_user = fk_socpeople\n            LEFT JOIN llx_user u ON u.rowid = fk_socpeople\n            WHERE  (ctc.element in (\\'project\\') \n            and pt.task_date BETWEEN $date_start AND $date_end\n            GROUP BY u.rowid \"; \n\n        dol_syslog(__METHOD__, LOG_DEBUG);\n        $emails = array();\n        $resql = $this->db->query($sql);\n        if ($resql) {\n            $num = $this->db->num_rows($resql);\n            for ($i = 0;$i<$num;$i++) {\n                $obj = $this->db->fetch_object($resql);\n                // FIXME: addapt weekhour to openday / without holidays (union)\n                if ($obj->weeklyhours > $obj->duration) {\n                $emails[$obj->email][] = array(\n                    \"weeklyhour\" => $obj->date_start,\n                    \"duration\" => $obj->date_end\n                );\n            }\n            }\n        } else {\n            dol_print_error($db);\n            $list = array();\n            $ret = false;\n        }\n        if ($ret != false) {\n            foreach ($emails as $email => $data) {\n            //get the list of user that have the ts right\n                $$url .= '/timesheet/Timesheet.php?dateStart='.$date_start;\n                $message = $langs->trans(\n                    'YouHaveMissingTimesheetMsg', \n                    date(' d', $date_start), \n                    $url\n                );\n                $sendto = $email;\n        \n                $subject = $langs->transnoentities(\"YouHaveMissingTimesheet\");\n                if (!empty($sendto) && $sendto!=\"NULL\") {\n                    include_once DOL_DOCUMENT_ROOT .'/core/class/CMailFile.class.php';\n                    $mailfile = new CMailFile(\n                        $subject,\n                        $sendto,\n                        null,\n                        $message,\n                        $filename_list = array(),\n                        $mimetype_list = array(),\n                        $mimefilename_list = array(),\n                        $addr_cc, $addr_bcc = 0,\n                        $deliveryreceipt = 0,\n                        $msgishtml = 1\n                    );\n                    $mailfile->sendfile();\n                }\n            }\n\n        }\n\n\n    }\n\n\n    /**\n     * Function that will send email upon timesheet rejection\n     * @param    Doliuser   $user       objet\n     * @return        void\n     */\n    public function sendRejectedReminders($user)\n    {\n        global $langs, $db, $dolibarr_main_url_root, $dolibarr_main_url_root_alt;\n        $tsUser = new User($db);\n        $tsUser->fetch($this->userId);\n        $url = $dolibarr_main_url_root;\n        if (strpos($dolibarr_main_url_root_alt, $_SERVER['PHP_SELF'])>0) {\n            $url .= $dolibarr_main_url_root_alt;\n        }\n        $url .= '/timesheet/Timesheet.php?dateStart='.$this->date_start;\n        $message = $langs->trans(\n            'YouHaveTimesheetRejectedMsg', \n            date(' d', $this->date_start), \n            $url\n        );\n        $sendto = $tsUser->email;\n        $replyto = $user->email;\n        $subject = $langs->transnoentities(\"YouHaveTimesheetRejected\");\n        if (!empty($sendto) && $sendto!=\"NULL\") {\n            include_once DOL_DOCUMENT_ROOT .'/core/class/CMailFile.class.php';\n            $mailfile = new CMailFile(\n                $subject,\n                $sendto,\n                $replyto,\n                $message,\n                $filename_list = array(),\n                $mimetype_list = array(),\n                $mimefilename_list = array(),\n                $addr_cc, $addr_bcc = 0,\n                $deliveryreceipt = 0,\n                $msgishtml = 1\n            );\n            $mailfile->sendfile();\n        }\n    }\n\n        \n    /**\n     * Function to import the calandar item into the timesheets\n     * @param int $userid user to import calcandar\n     * @param date $dateStart datestart to use for the import\n     * @param date $dateEnd dateEnd to use for the import \n     */\n    function importCalandar($userid = '', $dateStart = '', $dateEnd = ''){\n        global $conf, $user;\n        if(!is_numeric($userid)){\n            if (is_numeric($this->userId)){\n                $userid = $this->userId;\n            }else{\n                return -1;\n            }\n        }\n        if(!is_a($dateStart,'DateTime') && !is_a($dateStart,'Date' && !is_numeric($dateStart))){\n            $dateStart = $this->date_start;\n        }        \n        if(!is_a($dateEnd,'DateTime')  && !is_a($dateEnd,'Date') && !is_numeric($dateEnd) ){\n            $dateEnd = $this->date_end;\n        }\n        // get the calandar event that have a task assigned and assigned to userid + busy\n        $sql = 'SELECT a.id, a.code, a.label, a.fk_element as taskid, a.datep as datestart,';\n        $sql .= 'a.fulldayevent, a.datep2 as dateend ';\n        $sql .= \" FROM \".MAIN_DB_PREFIX.\"actioncomm as a \";\n        // add the user\n        $sql .= \" JOIN \".MAIN_DB_PREFIX.\"actioncomm_resources as r\";\n        // fectch the current time spent\n        $sql .= \" ON r.element_type = 'user' AND r.fk_actioncomm = a.id\";\n        $sql .= \" WHERE a.transparency  = 1 AND a.elementtype  = 'task' AND r.fk_element= \".$userid;\n        $sql .= \" AND a.datep BETWEEN '\".$this->db->idate($dateStart).\"' AND '\".$this->db->idate($dateEnd).\"'\" ;\n        $sql .= \" ORDER BY fulldayevent ASC, a.fk_element DESC\";\n        // execute query\n        $resql = $this->db->query($sql);\n        //number of day in the period\n\n        $nbDay = ceil(($dateEnd - $dateStart) / 86400);\n\n        // day array for all day events\n        $days = array();\n        // local list of tasktime\n        $dayDuration = array();\n        $tasktime = array();\n        // execute the fuction only if there is querry results    \n        if ($resql && $this->db->num_rows($resql) > 0) {\n            //load already saved tasktime\n            foreach($this->taskTimesheet as $taskid => $taskline){\n                $tasktime[$taskid] = new TimesheetTask($this->db, $taskid);\n                $tasktime[$taskid]->unserialize($taskline);\n            }\n            // go through all querry result    \n            while ($obj = $this->db->fetch_object($resql)) {\n                //create a tasktime object if not yet present on local liss\n                if(!array_key_exists($obj->taskid, $tasktime)){\n                    $tasktime[$obj->taskid] = new TimesheetTask($this->db, $obj->taskid);\n                    $tasktime[$obj->taskid]->userId = $userid;\n                    $tasktime[$obj->taskid]->date_start_approval = $dateStart;\n                    $tasktime[$obj->taskid]->date_end_approval = $dateEnd;\n                    // search if there is a tasktime for this event \n                }\n                $action_date_end = $this->db->jdate($obj->dateend);\n                $action_date_start = $this->db->jdate($obj->datestart);\n                // for each day\n                for($daykey = 0; $daykey < $nbDay; $daykey++){\n                    // init the dayduration for later\n                    $dayDuration[$daykey] = 0;\n                    $duration = 0;  \n                    //is the event in day y       \n                    if( $action_date_end > ($dateStart + $daykey * SECINDAY +1 ) \n                        &&  $action_date_start <= ($dateStart + ($daykey+1) * SECINDAY )) {\n                        if($obj->fulldayevent == 0){\n                            //foreach task that are not \"all day\" define duration as \n                            // duration = cal_duration>MAx? STD:cal_duration\n                            $duration = $action_date_end - $action_date_start;\n                            $duration = ( $duration > ($conf->global->TIMESHEET_DAY_MAX_DURATION * 3600))?\n                            $conf->global->TIMESHEET_DAY_DURATION * 3600\n                            :$duration;\n                            // write in database the new TS\n                            $daynote = $obj->code.\" - \".$obj->label.\": \".formatTime($duration, -1); \n                            // check and update only ifthe meeting is note already in noted\n                            if(!is_array($tasktime[$obj->taskid]->tasklist) \n                                || !array_key_exists($daykey, $tasktime[$obj->taskid]->tasklist)\n                                || (strpos($tasktime[$obj->taskid]->tasklist[$daykey]['note'], $daynote) === false))  {\n                                    $tasktime[$obj->taskid]->saveTaskTime($user, \n                                    $duration,  $daynote, $daykey, true);\n                            }\n    \n                        }else{\n                            $days[$daykey][$obj->taskid] = array('id' => $obj->taskid, \n                                'title' => ($obj->code.' - '.$obj->label), \n                            'duration' => 0);\n                        }                            \n                    } \n                }\n            }\n            // generate the total per day\n            if(is_array($tasktime))foreach($tasktime as $taskline){\n                if(is_array($taskline->tasklist))foreach ($taskline->tasklist as $daykey => $item) {\n                    $dayDuration[$daykey] += $item['duration'];\n                    if(is_array($item['other']) && count($item['other'])>0){\n                        $dayDuration[$daykey] += array_sum(array_column($item['other'], 'duration'));\n                    }\n                }\n            }\n            // Create timespent for the all day event\n            foreach($days as $daykey => $day ){\n                $nbFullDayCurDay = count($day);\n                $duration = ($conf->global->TIMESHEET_DAY_DURATION * 3600\n                    - $dayDuration[$daykey]) / $nbFullDayCurDay ; \n                //for eachfull day event\n                foreach($day as $taskid => $tasktimeDetails){\n                    $daynote = $tasktimeDetails['title'].\": \".formatTime($duration, -1); \n                    // check and update only ifthe meeting is note already in noted\n                    if(!is_array($tasktime[$obj->taskid]->tasklist) \n                        || !array_key_exists($daykey, $tasktime[$obj->taskid]->tasklist)\n                        || (strpos($tasktime[$obj->taskid]->tasklist[$daykey]['note'], $daynote) === false))  {\n                        $tasktime[$taskid]->saveTaskTime($user, $duration, \n                                    $daynote, $daykey, true);\n                    }\n                }\n            }\n            // save the updated taskline in the object\n            unset($this->taskTimesheet);\n            $this->taskTimesheet = array();\n            foreach($tasktime as $taskid => $taskline){\n                $this->taskTimesheet[$taskid]= $taskline->serialize();\n            }\n        }\n\n\n\n\n    }\n}\n", "<?php\n/* Copyright (C) 2003      Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2012 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2012 Regis Houssin        <regis.houssin@capnetworks.com>\n *\n * This program is free software;you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation;either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY;without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *        \\defgroup   timesheet     Module timesheet\n *  \\brief      Example of a module descriptor.\n *                                Such a file must be copied into htdocs/timesheet/core/modules directory.\n *  \\file       htdocs/timesheet/core/modules/modTimesheet.class.php\n *  \\ingroup    timesheet\n *  \\brief      Description and activation file for module timesheet\n */\ninclude_once DOL_DOCUMENT_ROOT .'/core/modules/DolibarrModules.class.php';\n/**\n *  Description and activation class for module timesheet\n */\nclass modTimesheet extends DolibarrModules\n{\n        /**\n         *   Constructor. Define names, constants, directories, boxes, permissions\n         *\n         *   @param      DoliDB                $db      Database handler\n         */\n        public function __construct($db)\n        {\n        global $langs, $conf;\n        $this->db = $db;\n                // Id for module(must be unique).\n                // Use here a free id(See in Home -> System information -> Dolibarr for list of used modules id).\n                $this->numero = 861002;\n                // Key text used to identify module(for permissions, menus, etc...)\n                $this->rights_class = 'timesheet';\n                // Family can be 'crm', 'financial', 'hr', 'projects', 'products', 'ecm', 'technic', 'other'\n                // It is used to group modules in module setup page\n                $this->family = \"projects\";\n                // Module label(no space allowed), used if translation string 'ModuleXXXName' not found(where XXX is value of numeric property 'numero' of module)\n                $this->name = preg_replace('/^mod/i', '', get_class($this));\n                // Module description, used if translation string 'ModuleXXXDesc' not found(where XXX is value of numeric property 'numero' of module)\n                $this->description = \"TimesheetView\";\n\t\t        $this->editor_name = 'Patrick Delcroix';\n\t\t        $this->editor_url = 'https://github.com/delcroip';\n                // Possible values for version are: 'development', 'experimental', 'dolibarr' or version\n                $this->version = '4.5.6';\n                // Key used in llx_cons table to save module status enabled/disabled(where timesheet is value of property name of module in uppercase)\n                $this->const_name = 'MAIN_MODULE_'.strtoupper($this->name);\n                // Where to store the module in setup page(0=common, 1=interface, 2=others, 3=very specific)\n                $this->special = 0;\n                // Name of image file used for this module.\n                // If file is in theme/yourtheme/img directory under name object_pictovalue.png, use this->picto='pictovalue'\n                // If file is in module/img directory under name object_pictovalue.png, use this->picto='pictovalue@module'\n                $this->picto='timesheet@timesheet';\n                // Defined all module parts(triggers, login, substitutions, menus, css, etc...)\n                // for default path (eg: /timesheet/core/xxxxx) (0=disable, 1=enable)\n                // for specific path of parts(eg: /timesheet/core/modules/barcode)\n                // for specific css file(eg: /timesheet/css/timesheet.css.php)\n                $this->module_parts = array('triggers' => 0,\n                                            'css' => array('/timesheet/core/css/timesheet.css'));\n                ////$this->module_parts = array(\n                //                         'triggers' => 0,        // Set this to 1 if module has its own trigger directory(core/triggers)\n                //                                                        'login' => 0,        // Set this to 1 if module has its own login method directory(core/login)\n                //                                                        'substitutions' => 0,        // Set this to 1 if module has its own substitution function file(core/substitutions)\n                //                                                        'menus' => 0,        // Set this to 1 if module has its own menus handler directory(core/menus)\n                //                                                        'theme' => 0,        // Set this to 1 if module has its own theme directory(theme)\n                //                         'tpl' => 0,        // Set this to 1 if module overwrite template dir(core/tpl)\n                //                                                        'barcode' => 0,        // Set this to 1 if module has its own barcode directory(core/modules/barcode)\n                //                                                        'models' => 0,        // Set this to 1 if module has its own models directory(core/modules/xxx)\n                //                                                        'css' => array('/timesheet/css/timesheet.css.php'),        // Set this to relative path of css file if module has its own css file\n                //                                                        'js' => array('/timesheet/js/timesheet.js'), // Set this to relative path of js file if module must load a js on all pages\n                //                                                        'hooks' => array('hookcontext1', 'hookcontext2')        // Set here all hooks context managed by module\n                //                                                        'dir' => array('output' => 'othermodulename'), // To force the default directories names\n                //                                                        'workflow' => array('WORKFLOW_MODULE1_YOURACTIONTYPE_MODULE2' => array('enabled' => '! empty($conf->module1->enabled) && ! empty($conf->module2->enabled)', 'picto' => 'yourpicto@timesheet')) // Set here all workflow context managed by module\n                //                      );\n                //$this->module_parts = array();\n                //$this->module_parts = array('css' => array('/timesheet/css/timesheet.css'));\n                // Data directories to create when module is enabled.\n                // Example: this->dirs = array(\"/timesheet/temp\");\n                $this->dirs = array(\"/timesheet\", \"/timesheet/reports\", \"/timesheet/users\", \"/timesheet/tasks\");\n                // Config pages. Put here list of php page, stored into timesheet/admin directory, to use to setup module.\n                $this->config_page_url = array(\"timesheetsetup.php@timesheet\");\n                // Dependencies\n                $this->hidden = false;                        // A condition to hide module\n                $this->depends = array('modProjet');                // List of modules id that must be enabled if this module is enabled\n                $this->requiredby = array();        // List of modules id to disable if this one is disabled\n                $this->conflictwith = array();        // List of modules id this module is in conflict with\n                $this->phpmin = array(5, 0);                                        // Minimum version of PHP required by module\n                $this->need_dolibarr_version = array(3, 5);        // Minimum version of Dolibarr required by module\n                $this->langfiles = array(\"timesheet@timesheet\");\n                // Constants\n                // List of particular constants to add when module is enabled(key, 'chaine', value, desc, visible, 'current' or 'allentities', deleteonunactive)\n                // Example: $this->const=array(0 => array('timesheet_MYNEWCONST1', 'chaine', 'myvalue', 'This is a constant to add', 1),\n                //                             1 => array('timesheet_MYNEWCONST2', 'chaine', 'myvalue', 'This is another constant to add', 0, 'current', 1)\n                //);\n                $r = 0;\n                $this->const = array();\n                $this->const[$r] = array(\"TIMESHEET_VERSION\", \"chaine\", $this->version, \"save the timesheet verison\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ATTENDANCE\", \"int\", 1, \"layout mode of the timesheets\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ATTENDANCE_SYSTEM\", \"int\", 1, \"Activation of attentance system\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_TIME_TYPE\", \"chaine\", \"hours\", \"layout mode of the timesheets\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_DAY_DURATION\", \"int\", 8, \"number of hour per day(used for the layout per day)\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_TIME_SPAN\", \"chaine\", \"splitedWeek\", \"timespan of the timesheets\");// hours or days\n                $r++;\n                 $this->const[$r] = array(\"TIMESHEET_HIDE_DRAFT\", \"int\", 0, \"option to mask to task belonging to draft project\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_HIDE_ZEROS\", \"int\", 0, \"option to hide the 00:00\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_HEADERS\", \"chaine\", \"Tasks\", \"list of headers to show inthe timesheets\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_HIDE_REF\", \"int\", 0, \"option to hide the title in the timesheets\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_SHOW_TIMESPENT_NOTE\", \"int\", 1, \"show the note next to the time entry\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ADD_DOCS\", \"int\", 0, \"Allow to join files to timesheets\");\n                $r++;\n               $this->const[$r] = array(\"TIMESHEET_ADD_FOR_OTHER\", \"int\", 0, \"enable to time spent entry for subordinates\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_WHITELIST_MODE\", \"int\", 0, \"Option to change the behaviour of the whitelist:-whiteliste, 1-blackliste, 2-no impact \");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_WHITELIST\", \"int\", 1, \"Activate the whitelist:\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_DRAFT\", \"chaine\", \"FFFFFF\", \"color of draft\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_VALUE\", \"chaine\", \"F0FFF0\", \"color of day with entry\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_FROZEN\", \"chaine\", \"909090\", \"color of closed/frozen\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_SUBMITTED\", \"chaine\", \"00FFFF\", \"color of submitted\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_APPROVED\", \"chaine\", \"00FF00\", \"color of approved\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_CANCELLED\", \"chaine\", \"FFFF00\", \"color of cancelled\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_COL_REJECTED\", \"chaine\", \"FF0000\", \"color of rejected\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_DAY_MAX_DURATION\", \"int\", 12, \"max working hours per days\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ADD_HOLIDAY_TIME\", \"int\", 1, \"count the holiday in total or not\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_BLOCK_HOLIDAY\", \"int\", 1, \"block time entry on holiday\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ADD_PUBLICHOLIDAY_TIME\", \"int\", 1, \"count the public holiday in total or not\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_BLOCK_PUBLICHOLIDAY\", \"int\", 1, \"block time entry on public holiday\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_OPEN_DAYS\", \"chaine\", \"_1111100\", \"normal day for time booking\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_APPROVAL_BY_WEEK\", \"int\", 0, \"Approval by week instead of by user\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_MAX_APPROVAL\", \"int\", 5, \"Max TS per Approval page\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_APPROVAL_FLOWS\", \"chaine\", \"_00000\", \"Approval flows \");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_METHOD\", \"int\", 0, \"Approval by week instead of by user\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_TASKTIME\", \"chaine\", \"all\", \"set the default task to include in the invoice item\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_TIMETYPE\", \"chaine\", \"days\", \"set the default task to include in the invoice item\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_SERVICE\", \"int\", 0, \"set a default service for the invoice item\");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_SHOW_TASK\", \"int\", 1, \"Show task on the invoice item \");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_INVOICE_SHOW_USER\", \"int\", 1, \"Show user on the invoice item \");\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVENT_MAX_DURATION\", \"int\", 8, \"max event duration\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVENT_DEFAULT_DURATION\", \"int\", 2, \"default event duration\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVENT_MIN_DURATION\", \"int\", \"0\", \"minimum time per chrono\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVENT_NOT_CREATE_TIMESPENT\", \"int\", \"0\", \"hide the sign box on pdf\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_PDF_HIDE_SIGNBOX\", \"int\", \"0\", \"hide the sign box on pdf\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_PDF_NOTEISOTASK\", \"int\", 0, \"save the timesheet verison\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_PDF_HIDE_NAME\", \"int\", \"0\", \"hide name in PDF\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EXPORT_FORMAT\", \"chaine\", \"tsv\", \"export format xls ... \");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_EVAL_ADDLINE\", \"int\", \"0\", \"process add line vian an eval function running the invoice card page\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_ROUND\", \"int\", \"3\", \"round timespend display in day\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_SEARCHBOX\", \"int\", \"0\", \"enable search box in favourite\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_UNBLOCK_INVOICED\", \"int\", \"0\", \"unblock editing invoiced time\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_UNBLOCK_CLOSED\", \"int\", \"0\", \"unblock editing  closed day\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"MAIN_DISABLE_AJAX_COMBOX\", \"int\", \"0\", \"disable combo box\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"MAIN_DISABLE_AJAX_COMBOX\", \"int\", \"0\", \"disable combo box\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_OVERTIME_CHECK_WEEKS\", \"int\", \"30\", \"Number of week used for the overwork box\");// hours or days\n                $r++;\n                $this->const[$r] = array(\"TIMESHEET_TIMESHEET_IMPORT_AGENDA\", \"int\", \"0\", \"Enable the import agenda button\");// hours or days\n                $r++;\n                \n                 //$this->const[2] = array(\"CONST3\", \"chaine\", \"valeur3\", \"Libelle3\");\n                // Array to add new pages in new tabs\n                // Example: $this->tabs = array('objecttype:+tabname1:Title1:mylangfile@timesheet:$user->rights->timesheet->read:/timesheet/mynewtab1.php?id=__ID__',        // To add a new tab identified by code tabname1\n        //                              'objecttype:+tabname2:Title2:mylangfile@timesheet:$user->rights->othermodule->read:/timesheet/mynewtab2.php?id=__ID__',        // To add another new tab identified by code tabname2\n        //                              'objecttype:-tabname':NU:conditiontoremove);// To remove an existing tab identified by code tabname\n                // where objecttype can be\n                // 'thirdparty'       to add a tab in third party view\n                // 'intervention'     to add a tab in intervention view\n                // 'order_supplier'   to add a tab in supplier order view\n                // 'invoice_supplier' to add a tab in supplier invoice view\n                // 'invoice'          to add a tab in customer invoice view\n                // 'order'            to add a tab in customer order view\n                // 'product'          to add a tab in product view\n                // 'stock'            to add a tab in stock view\n                // 'propal'           to add a tab in propal view\n                // 'member'           to add a tab in fundation member view\n                // 'contract'         to add a tab in contract view\n                // 'user'             to add a tab in user view\n                // 'group'            to add a tab in group view\n                // 'contact'          to add a tab in contact view\n                // 'payment'                  to add a tab in payment view\n                // 'payment_supplier' to add a tab in supplier payment view\n                // 'categories_x'          to add a tab in category view(replace 'x' by type of category(0=product, 1=supplier, 2=customer, 3=member)\n                // 'opensurveypoll'          to add a tab in opensurvey poll view\n        $this->tabs = array();\n\t\t// Example:\n\t\t// $this->tabs[] = array('data' => 'objecttype:+tabname1:Title1:mylangfile@project_cost:$user->rights->project_cost->read:/project_cost/mynewtab1.php?id=__ID__');  \t\t\t\t\t// To add a new tab identified by code tabname1\n        $this->tabs[] = array('data' => 'project:+invoice:projectInvoice:timesheet@timesheet:$user->rights->facture->creer:/timesheet/TimesheetProjectInvoice.php?projectid=__ID__');  \t\t\t\t\t// To add a new tab identified by code tabname1\n        $this->tabs[] = array('data' => 'project:+report:projectReport:timesheet@timesheet:$user->rights->timesheet->report->projet||$user->rights->timesheet->report->admin:/timesheet/TimesheetReportProject.php?projectSelected=__ID__');  \t\t\t\t\t// To add a new tab identified by code tabname1\n        // Dictionaries\n        if (! isset($conf->timesheet->enabled)) {\n            $conf->timesheet=new stdClass();\n            $conf->timesheet->enabled=0;\n        }\n                $this->dictionaries=array();\n        /* Example:\n        if (! isset($conf->timesheet->enabled)) $conf->timesheet->enabled=0;        // This is to avoid warnings\n        $this->dictionaries=array(\n            'langs' => 'mylangfile@timesheet',\n            'tabname' => array(MAIN_DB_PREFIX.\"table1\", MAIN_DB_PREFIX.\"table2\", MAIN_DB_PREFIX.\"table3\"),                // List of tables we want to see into dictonnary editor\n            'tablib' => array(\"Table1\", \"Table2\", \"Table3\"),                                                                                                        // Label of tables\n            'tabsql' => array('SELECT f.rowid as rowid, f.code, f.label, f.active FROM '.MAIN_DB_PREFIX.'table1 as f', 'SELECT f.rowid as rowid, f.code, f.label, f.active FROM '.MAIN_DB_PREFIX.'table2 as f', 'SELECT f.rowid as rowid, f.code, f.label, f.active FROM '.MAIN_DB_PREFIX.'table3 as f'),        // Request to select fields\n            'tabsqlsort' => array(\"label ASC\", \"label ASC\", \"label ASC\"),                                                                                                                                                                        // Sort order\n            'tabfield' => array(\"code, label\", \"code, label\", \"code, label\"),                                                                                                                                                                        // List of fields(result of select to show dictionary)\n            'tabfieldvalue' => array(\"code, label\", \"code, label\", \"code, label\"),                                                                                                                                                                // List of fields(list of fields to edit a record)\n            'tabfieldinsert' => array(\"code, label\", \"code, label\", \"code, label\"),                                                                                                                                                        // List of fields(list of fields for insert)\n            'tabrowid' => array(\"rowid\", \"rowid\", \"rowid\"),                                                                                                                                                                                                        // Name of columns with primary key(try to always name it 'rowid')\n            'tabcond' => array($conf->timesheet->enabled, $conf->timesheet->enabled, $conf->timesheet->enabled)                                                                                                // Condition to show each dictionary\n      );\n        */\n        // Boxes\n                // Add here list of php file(s) stored in core/boxes that contains class to show a box.\n        $this->boxes = array(\n                0 => array(\n                        'file' => 'box_approval.php@timesheet',\n                        'note' => 'timesheetApproval',\n                        'enabledbydefaulton' => 'Home'),\n                1 => array(\n                        'file' => 'box_time.php@timesheet',\n                        'note' => 'timesheet',\n                        'enabledbydefaulton' => 'Home')\n        ); // List of boxes\n                // Example:\n                //$this->boxes=array(array(0 => array('file' => 'myboxa.php', 'note' => '', 'enabledbydefaulton' => 'Home'), 1 => array('file' => 'myboxb.php', 'note' => ''), 2 => array('file' => 'myboxc.php', 'note' => '')););\n                // Permissions\n                $this->rights = array();                // Permission array used by this module\n                $r = 0;\n                $this->rights[$r][0] = 86100200;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'TimesheetUser';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'timesheet';\n                $this->rights[$r][5] = 'user';                                  // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                //$this->rights[$r][5] = 'team';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r ++;\n                $this->rights[$r][0] = 86100201;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'TimesheetAdmin';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'timesheet';\n                $this->rights[$r][5] = 'admin';                                  // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                //$this->rights[$r][5] = 'team';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n\t\t\t\t$r++;                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n\t\t\t\t$this->rights[$r][0] = 86100203;                                // Permission id(must not be already used)\n\t\t\t\t$this->rights[$r][1] = 'ExportRead';        // Permission label\n\t\t\t\t$this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n\t\t\t\t$this->rights[$r][4] = 'read';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n\t\t\t\t//$this->rights[$r][5] = 'admin';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n\t\t\t\t$r++;\n        \t\t//$r = 0;\n                $this->rights[$r][0] = 86100211;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ApprovalTeam';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'approval';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'team';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;\n                $this->rights[$r][0] = 86100212;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ApprovalAdmin';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'approval';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'admin';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;\n                $this->rights[$r][0] = 86100213;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ApprovalOther';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'approval';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'other';\n                $r++;                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n                                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n                $this->rights[$r][0] = 86100240;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ReportUser';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'report';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'user';\n                $r++;\n                $this->rights[$r][0] = 86100241;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ReportProject';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'report';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'project';\n                $r++;                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n                $this->rights[$r][0] = 86100242;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'ReportAdmin';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'report';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'admin';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;                // Add here list of permission defined by an id, a label, a boolean and two constant strings.\n                $this->rights[$r][0] = 86100250;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'AttendanceUser';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'attendance';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'user';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;\n                $this->rights[$r][0] = 86100251;                                // Permission id(must not be already used)\n                $this->rights[$r][1] = 'AttendanceAdmin';        // Permission label\n                $this->rights[$r][3] = 0;                                        // Permission by default for new user(0/1)\n                $this->rights[$r][4] = 'attendance';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $this->rights[$r][5] = 'admin';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                $r++;\n// Example:\n                // $this->rights[$r][0] = 2000;                                // Permission id(must not be already used)\n                // $this->rights[$r][1] = 'Permision label';        // Permission label\n                // $this->rights[$r][3] = 1;                                        // Permission by default for new user(0/1)\n                // $this->rights[$r][4] = 'level1';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                // $this->rights[$r][5] = 'level2';                                // In php code, permission will be checked by test if ($user->rights->permkey->level1->level2)\n                // $r++;\n                // Main menu entries\n                $this->menu = array();                        // List of menus to add\n                $r = 0;\n                // Add here entries to declare new menus\n                //\n                // Example to declare a new Top Menu entry and its Left menu entry:\n                $this->menu[$r]=array('fk_menu' => 0, // Put 0 if this is a top menu\n                        'type' => 'top',                                        // This is a Top menu entry\n                        'titre' => 'Timesheet',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'timesheet',\n                        'url' => '/timesheet/Timesheet.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 100,\n                        'enabled' => '$conf->timesheet->enabled && !($user->rights->timesheet->attendance->user && $conf->global->TIMESHEET_ATTENDANCE==1)',        // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled.\n                        'perms' => '$user->rights->timesheet->timesheet->user || $user->rights->timesheet->timesheet->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);                                                // 0=Menu for internal users, 1=external users, 2=both\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 0,                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'top',                                // This is a Left menu entry\n                        'titre' => 'Attendance',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'attendance',\n                        'url' => '/timesheet/AttendanceClock.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 100,\n                        'enabled' => '$conf->timesheet->enabled && $user->rights->timesheet->attendance->user && $conf->global->TIMESHEET_ATTENDANCE==1',\n                        'perms' => '$user->rights->timesheet->attendance->user || $user->rights->timesheet->attendance->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet', // Put 0 if this is a top menu\n                        'type' => 'left',                                        // This is a Top menu entry\n                        'titre' => 'Timesheet',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'timesheet',\n                        'url' => '/timesheet/Timesheet.php?#',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 100,\n                        'enabled' => '$conf->timesheet->enabled',        // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled.\n                        'perms' => '$user->rights->timesheet->timesheet->user || $user->rights->timesheet->timesheet->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);                                                // 0=Menu for internal users, 1=external users, 2=both\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'Attendance',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'attendance',\n                        'url' => '/timesheet/AttendanceClock.php?#',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 200,\n                        'enabled' => '$conf->global->TIMESHEET_ATTENDANCE==1',\n                        'perms' => '$user->rights->timesheet->attendance->user || $user->rights->timesheet->attendance->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet,fk_leftmenu=attendance',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'AttendanceAdmin',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'Attendance',\n                        'url' => '/timesheet/AttendanceEventAdmin.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 210,\n                        'enabled' => '$conf->global->TIMESHEET_ATTENDANCE',\n                        'perms' => '$user->rights->timesheet->attendance->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet,fk_leftmenu=timesheet',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'userReport',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'Timesheet',\n                        'url' => '/timesheet/TimesheetReportUser.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 130,\n                        'enabled' => '$conf->timesheet->enabled', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->report->admin || $user->rights->timesheet->report->user',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet,fk_leftmenu=timesheet',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'Timesheetwhitelist',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'Timesheet',\n                        'url' => '/timesheet/TimesheetFavouriteAdmin.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 110,\n                        'enabled' => '$conf->global->TIMESHEET_WHITELIST == 1', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->attendance->user || $user->rights->timesheet->attendance->admin || $user->rights->timesheet->timesheet->user || $user->rights->timesheet->timesheet->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                  $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=project,fk_leftmenu=projects',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'projectReport',\n                        'mainmenu' => 'project',\n                        'leftmenu' => 'projectReport',\n                        'url' => '/timesheet/TimesheetReportProject.php?hidetab=1',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 120,\n                        'enabled' => '$conf->timesheet->enabled', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->report->admin || $user->rights->timesheet->report->project',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n               /*   $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=project,fk_leftmenu=projects',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'projectInvoice',\n                        'mainmenu' => 'project',\n                        'leftmenu' => 'projectInvoice',\n                        'url' => '/timesheet/TimesheetProjectInvoice.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 121,\n                        'enabled' => '$conf->timesheet->enabled', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->facture->creer',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);*/\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'Timesheetapproval',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'timesheetapproval',\n                        'url' => '/timesheet/TimesheetTeamApproval.php',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 300,\n                        'enabled' => '$conf->global->TIMESHEET_APPROVAL_FLOWS != \"_00000\"', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->approval->team || $user->rights->timesheet->approval->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n                $this->menu[$r]=array('fk_menu' => 'fk_mainmenu=timesheet,fk_leftmenu=timesheetapproval',                    // Use 'fk_mainmenu=xxx' or 'fk_mainmenu=xxx, fk_leftmenu=yyy' where xxx is mainmenucode and yyy is a leftmenucode\n                        'type' => 'left',                                        // This is a Left menu entry\n                        'titre' => 'Adminapproval',\n                        'mainmenu' => 'timesheet',\n                        'leftmenu' => 'timesheetapproval',\n                        'url' => '/timesheet/TimesheetUserTasksAdmin.php?action=list&sortfield=t.date_start&sortorder=desc',\n                        'langs' => 'timesheet@timesheet',                // Lang file to use(without .lang) by module. File must be in langs/code_CODE/ directory.\n                        'position' => 310,\n                        'enabled' => '$conf->global->TIMESHEET_APPROVAL_FLOWS != \"_00000\"', // Define condition to show or hide menu entry. Use '$conf->timesheet->enabled' if entry must be visible if module is enabled. Use '$leftmenu == \\'system\\'' to show if leftmenu system is selected.\n                        'perms' => '$user->rights->timesheet->approval->admin',                                        // Use 'perms' => '$user->rights->timesheet->level1->level2' if you want your menu with a permission rules\n                        'target' => '',\n                        'user' => 2);\n                $r++;\n\n// impoort\n/*                $r++;\n                $this->import_code[$r]=$this->rights_class.'_'.$r;\n                $this->import_label[$r]=\"ImportDataset_Kimai\";        // Translation key\n                $this->import_icon[$r]='project';\n                $this->import_entities_array[$r]=array('pt.fk_user' => 'user');                // We define here only fields that use another icon that the one defined into import_icon\n                $this->import_tables_array[$r]=array('ptt' => MAIN_DB_PREFIX.'project_task_time');\n                $this->import_fields_array[$r]=array('ptt.fk_task' => \"ThirdPartyName*\", 'ptt.fk_user' => \"User*\");\n                $this->import_convertvalue_array[$r]=array(\n                                'ptt.fk_task' => array('rule' => 'fetchidfromref', 'classfile' => '/timesheet/class/timesheet.class.php', 'class' => 'Timesheet', 'method' => 'fetch', 'element' => 'ThirdParty'),\n                                'sr.fk_user' => array('rule' => 'fetchidfromref', 'classfile' => '/user/class/user.class.php', 'class' => 'User', 'method' => 'fetch', 'element' => 'User')\n              );\n                $this->import_examplevalues_array[$r]=array('sr.fk_soc' => \"MyBigCompany\", 'sr.fk_user' => \"login\");*/\n                // Exports\n                //$r = 1;\n                // Example:\n                // $this->export_code[$r]=$this->rights_class.'_'.$r;\n                // $this->export_label[$r]='CustomersInvoicesAndInvoiceLines';        // Translation key(used only if key ExportDataset_xxx_z not found)\n        }\n        /**\n         *                Function called when module is enabled.\n         *                The init function add constants, boxes, permissions and menus(defined in constructor) into Dolibarr database.\n         *                It also creates data directories\n         *\n         *      @param      string        $options    Options when enabling module('', 'noboxes')\n         *      @return     int              1 if OK, 0 if KO\n         */\n        public function init($options = '')\n        {\n            global $db, $conf;\n            $result = $this->_load_tables('/timesheet/sql/');\n            $sql = array();\n            $sql[0] = 'DELETE FROM '.MAIN_DB_PREFIX.'project_task_timesheet';\n            $sql[0].= ' WHERE status IN (1, 5)';//'DRAFT', 'REJECTED'\n            if ($db->type=='pgsql') {\n                $sql[1] =\"INSERT INTO \".MAIN_DB_PREFIX.\"document_model(nom, type, entity) VALUES('rat', 'timesheetReport', \".$conf->entity.\") ON CONFLICT(nom, type, entity) DO NOTHING;\";\n                $sql[2] =\"INSERT INTO \".MAIN_DB_PREFIX.\"c_type_contact(rowid, element, source, code, libelle, active ) values (8210160, 'project',  'internal', 'PROJECTBILLING', 'Responsable Facturation Projet', 1) ON CONFLICT(element, source, code) DO NOTHING;\";\n            }else {\n                $sql[1] =\"INSERT IGNORE INTO \".MAIN_DB_PREFIX.\"document_model(nom, type, entity) VALUES('rat', 'timesheetReport', \".$conf->entity.\");\";\n                $sql[2] =\"INSERT IGNORE INTO \".MAIN_DB_PREFIX.\"c_type_contact(rowid, element, source, code, libelle, active ) values (8210160, 'project',  'internal', 'PROJECTBILLING', 'Responsable Facturation Projet', 1);\";\n            }\n            dolibarr_set_const($db, \"TIMESHEET_VERSION\", $this->version, 'chaine', 0, '', $conf->entity);\n            include_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\n            $extrafields = new ExtraFields($this->db);\n            // add the \"Default server\" select list to the user\n            $extrafields->addExtraField('fk_service', \"DefaultService\", 'sellist', 1, '', 'user', 0, 0, '', array('options' => array(\"product:ref|label:rowid::tosell='1' AND fk_product_type='1'\" => 'N')), 1, 1, 3, 0, '', 0, 'timesheet@ptimesheet', '$conf->timesheet->enabled');\n            // add the \"Default server\" select list to the task\n            $extrafields->addExtraField('fk_service', \"DefaultService\", 'sellist', 1, '', 'projet_task', 0, 0, '', array('options' => array(\"product:ref|label:rowid::tosell='1' AND fk_product_type='1'\" => 'N')), 1, 1, 3, 0, '', 0, 'timesheet@ptimesheet', '$conf->timesheet->enabled');\n            // allow ext id of 32 char\n           // $extrafields->addExtraField('external_id', \"ExternalId\", 'varchar', 100, 32, 'user', 1, 0, '', '', 1, '$user->rights->timesheet->AttendanceAdmin', 3, 'specify the id of the external system', '', 0, 'timesheet@ptimesheet', '$conf->global->ATTENDANCE_EXT_SYSTEM');\n            // add the \"invoicable\" bool to the task\n            $extrafields->addExtraField('invoiceable', \"Invoiceable\", 'boolean', 1, '', 'projet_task', 0, 0, '', '', 1, 1, 1, 0, '', 0, 'timesheet@timesheet', '$conf->timesheet->enabled');\n            return $this->_init($sql, $options);\n        }\n        /**\n         *                Function called when module is disabled.\n         *      Remove from database constants, boxes and permissions from Dolibarr database.\n         *                Data directories are not deleted\n         *\n     *      @param      string        $options    Options when enabling module('', 'noboxes')\n         *      @return     int              1 if OK, 0 if KO\n         */\n        public function remove($options = '')\n        {\n\n                $sql = array();\n                return $this->_remove($sql, $options);\n        }\n}\n"], "filenames": ["htdocs/timesheet/AttendanceEventAdmin.php", "htdocs/timesheet/ChangeLog.md", "htdocs/timesheet/TimesheetProjectInvoice.php", "htdocs/timesheet/TimesheetReportProject.php", "htdocs/timesheet/TimesheetReportUser.php", "htdocs/timesheet/TimesheetTeamApproval.php", "htdocs/timesheet/TimesheetUserTasksAdmin.php", "htdocs/timesheet/admin/timesheetsetup.php", "htdocs/timesheet/class/AttendanceEvent.class.php", "htdocs/timesheet/class/TimesheetUserTasks.class.php", "htdocs/timesheet/core/modules/modtimesheet.class.php"], "buggy_code_start_loc": [517, 1, 27, 230, 165, 367, 558, 362, 760, 1064, 57], "buggy_code_end_loc": [517, 1, 494, 311, 252, 367, 558, 362, 760, 1158, 58], "fixing_code_start_loc": [518, 2, 28, 231, 166, 368, 559, 363, 761, 1063, 57], "fixing_code_end_loc": [520, 6, 499, 314, 255, 370, 560, 365, 764, 1156, 58], "type": "CWE-352", "message": "A vulnerability was found in dolibarr_project_timesheet up to 4.5.5. It has been declared as problematic. This vulnerability affects unknown code of the component Form Handler. The manipulation leads to cross-site request forgery. The attack can be initiated remotely. Upgrading to version 4.5.6.a is able to address this issue. The name of the patch is 082282e9dab43963e6c8f03cfaddd7921de377f4. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216880.", "other": {"cve": {"id": "CVE-2022-4766", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-27T13:15:11.377", "lastModified": "2023-01-06T06:07:27.503", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in dolibarr_project_timesheet up to 4.5.5. It has been declared as problematic. This vulnerability affects unknown code of the component Form Handler. The manipulation leads to cross-site request forgery. The attack can be initiated remotely. Upgrading to version 4.5.6.a is able to address this issue. The name of the patch is 082282e9dab43963e6c8f03cfaddd7921de377f4. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216880."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr_project_timesheet_project:dolibarr_project_timesheet:*:*:*:*:*:dolibarr:*:*", "versionEndExcluding": "4.5.6", "matchCriteriaId": "A7545952-4DA7-4FE1-BC41-3EF054107083"}]}]}], "references": [{"url": "https://github.com/delcroip/dolibarr_project_timesheet/commit/082282e9dab43963e6c8f03cfaddd7921de377f4", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/delcroip/dolibarr_project_timesheet/pull/200", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/delcroip/dolibarr_project_timesheet/releases/tag/4.5.6.a", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.216880", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216880", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/delcroip/dolibarr_project_timesheet/commit/082282e9dab43963e6c8f03cfaddd7921de377f4"}}