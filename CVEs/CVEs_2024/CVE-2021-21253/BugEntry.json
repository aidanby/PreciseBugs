{"buggy_code": ["package com.bijay.onlinevotingsystem.controller;\n\nimport java.io.IOException;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport com.bijay.onlinevotingsystem.dao.AdminDao;\nimport com.bijay.onlinevotingsystem.dao.AdminDaoImpl;\n\n@WebServlet(\"/aLoginController\")\npublic class AdminLoginController extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tAdminDao adminDao = new AdminDaoImpl();\n\tSHA256 sha = new SHA256();\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpSession session = request.getSession();\n\t\tsession.invalidate();\n\n\t\tRequestDispatcher rd = request.getRequestDispatcher(\"adminlogin.jsp\");\n\t\trequest.setAttribute(\"loggedOutMsg\", \"Log Out Successful\");\n\t\trd.include(request, response);\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\t// to get values from the login page\n\t\tString userName = request.getParameter(\"aname\");\n\t\tString password = sha.getSHA(request.getParameter(\"pass\"));\n\t\t// String password = request.getParameter(\"pass\");\n\t\tString rememberMe = request.getParameter(\"remember-me\");\n\n\t\t// validation\n\n\t\tif (adminDao.loginValidate(userName, password)) {\n\n\t\t\tif (rememberMe != null) {\n\t\t\t\tCookie cookie1 = new Cookie(\"uname\", userName);\n\t\t\t\tCookie cookie2 = new Cookie(\"pass\", password);\n\n\t\t\t\tcookie1.setMaxAge(24 * 60 * 60);\n\t\t\t\tcookie2.setMaxAge(24 * 60 * 60);\n\n\t\t\t\tresponse.addCookie(cookie1);\n\t\t\t\tresponse.addCookie(cookie2);\n\t\t\t}\n\n\t\t\t// to display the name of logged-in person in home page\n\t\t\tHttpSession session = request.getSession();\n\t\t\tsession.setAttribute(\"username\", userName);\n\n\t\t\t/*\n\t\t\t * RequestDispatcher rd =\n\t\t\t * request.getRequestDispatcher(\"AdminController?actions=admin_list\");\n\t\t\t * rd.forward(request, response);\n\t\t\t */\n\n\t\t\tresponse.sendRedirect(\"AdminController?actions=admin_list\");\n\t\t} else {\n\t\t\tRequestDispatcher rd = request.getRequestDispatcher(\"adminlogin.jsp\");\n\t\t\trequest.setAttribute(\"loginFailMsg\", \"Invalid Username or Password !!\");\n\t\t\trd.include(request, response);\n\t\t}\n\t}\n}", "package com.bijay.onlinevotingsystem.controller;\n\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class SHA256 {\n\n\tpublic String getSHA(String password) {\n\n\t\ttry {\n\t\t\t// Static getInstance method is called with hashing SHA\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n\n\t\t\t// digest() method called\n\t\t\t// to calculate message digest of an input\n\t\t\t// and return array of byte\n\t\t\tbyte[] messageDigest = md.digest(password.getBytes());\n\n\t\t\t// Convert byte array into signum representation\n\t\t\tBigInteger no = new BigInteger(1, messageDigest);\n\n\t\t\t// Convert message digest into hex value\n\t\t\tString hashPass = no.toString(16);\n\n\t\t\twhile (hashPass.length() < 32) {\n\t\t\t\thashPass = \"0\" + hashPass;\n\t\t\t}\n\t\t\treturn hashPass;\n\n\t\t\t// For specifying wrong message digest algorithms\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}\n}\n", "package com.bijay.onlinevotingsystem.controller;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Random;\n\nimport javax.mail.MessagingException;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport com.bijay.onlinevotingsystem.dao.VoterDao;\nimport com.bijay.onlinevotingsystem.dao.VoterDaoImpl;\n\n@WebServlet(\"/vLoginController\")\npublic class VoterLoginController extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tVoterDao voterDao = new VoterDaoImpl();\n\tSHA256 sha = new SHA256();\n\n\tprivate String host;\n\tprivate String port;\n\tprivate String user;\n\tprivate String pass;\n\tpublic String recipient;\n\n\tpublic int otp;\n\t\n\tpublic int giveOtp() {\n\t\treturn this.otp;\n\t}\n\n\tpublic void init() {\n\t\t// reads SMTP server setting from web.xml file\n\t\tServletContext context = getServletContext();\n\t\thost = context.getInitParameter(\"host\");\n\t\tport = context.getInitParameter(\"port\");\n\t\tuser = context.getInitParameter(\"user\");\n\t\tpass = context.getInitParameter(\"pass\");\n\t}\n\n\tpublic VoterLoginController() {\n\t\tsuper();\n\t}\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t/*\n\t\t * one servlet le another servlet ma request garda doGet() ma aauxa. so for\n\t\t * logout, session use garera login page ma dispatch garxau.\n\t\t */\n\n\t\tHttpSession session = request.getSession();\n\t\tsession.invalidate();\n\n\t\tRequestDispatcher rd = request.getRequestDispatcher(\"voterlogin.jsp\");\n\t\trequest.setAttribute(\"loggedOutMsg\", \"Log Out Successful !!\");\n\t\trd.include(request, response);\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\t// to get values from the login page\n\t\t// HttpSession session=request.getSession();\n\t\tPrintWriter out = response.getWriter();\n\t\tint min = 100000;\n\t\tint max = 999999;\n\t\totp = 5432;\n\t\tRandom r = new Random();\n\t\totp = r.nextInt(max - min) + min;\n\n\t\tString userName = request.getParameter(\"uname\");\n\t\tString password = sha.getSHA(request.getParameter(\"pass\"));\n\t\tString vemail = request.getParameter(\"vmail\");\n\n\t\tString recipient = vemail;\n\t\tString subject = \"otp verification\";\n\t\tString content = \"your otp is: \" + otp;\n\t\t// System.out.print(recipient);\n\t\tString resultMessage = \"\";\n\n\t\t// validation\n\t\tif (voterDao.loginValidate(userName, password, vemail)) {\n\n\t\t\t// to display the name of logged-in person in home page\n\n\t\t\tHttpSession session = request.getSession();\n\t\t\tsession.setAttribute(\"username\", userName);\n\n\t\t\ttry {\n\t\t\t\tEmailSend.sendEmail(host, port, user, pass, recipient, subject, content);\n\t\t\t} catch (MessagingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tresultMessage = \"There were an error: \" + e.getMessage();\n\t\t\t} finally {\n\t\t\t\tRequestDispatcher rd = request.getRequestDispatcher(\"OTP.jsp\");\n\t\t\t\trd.include(request, response);\n\t\t\t\tout.println(\"<script type=\\\"text/javascript\\\">\");\n\t\t\t\tout.println(\"alert('\" + resultMessage + \"');\");\n\t\t\t\tout.println(\"</script>\");\n\t\t\t}\n\n\t\t} else {\n\t\t\tRequestDispatcher rd = request.getRequestDispatcher(\"voterlogin.jsp\");\n\t\t\trequest.setAttribute(\"loginFailMsg\", \"Invalid Input ! Enter again !!\");\n\t\t\t// request.setAttribute(\"forgotPassMsg\", \"Forgot password??\");\n\t\t\trd.include(request, response);\n\t\t\t/*\n\t\t\t * String forgetpass = request.getParameter(\"forgotPass\"); //\n\t\t\t * System.out.println(forgetpass); if (forgetpass == null) { rd =\n\t\t\t * request.getRequestDispatcher(\"resetPassword.jsp\"); rd.forward(request,\n\t\t\t * response);\n\t\t\t */\n\t\t}\n\t}\n}", "package com.bijay.onlinevotingsystem.dao;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.bijay.onlinevotingsystem.dto.Admin;\nimport com.bijay.onlinevotingsystem.util.DbUtil;\n\npublic class AdminDaoImpl implements AdminDao {\n\n\tPreparedStatement ps = null;\n\n\t@Override\n\tpublic void saveAdminInfo(Admin admin) {\n\t\tString sql = \"insert into admin_table(admin_name, password) values(?,?)\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, admin.getAdminName());\n\t\t\tps.setString(2, admin.getPassword());\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic List<Admin> getAllAdminInfo() {\n\t\tList<Admin> adminList = new ArrayList<>();\n\t\tString sql = \"select * from admin_table\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\twhile (rs.next()) {\n\t\t\t\tAdmin admin = new Admin();\n\t\t\t\tadmin.setId(rs.getInt(\"id\"));\n\t\t\t\tadmin.setAdminName(rs.getString(\"admin_name\"));\n\t\t\t\tadmin.setPassword(rs.getString(\"password\"));\n\t\t\t\tadminList.add(admin);\n\t\t\t}\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn adminList;\n\t}\n\n\t@Override\n\tpublic void deleteAdminInfo(int id) {\n\n\t\tString sql = \"delete from admin_table where id=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setInt(1, id);\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic Admin getAdminInfoById(int id) {\n\n\t\tAdmin admin = new Admin();\n\t\tString sql = \"select * from admin_table where id=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setInt(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tadmin.setId(rs.getInt(\"id\"));\n\t\t\t\tadmin.setAdminName(rs.getString(\"admin_name\"));\n\t\t\t\tadmin.setPassword(rs.getString(\"password\"));\n\n\t\t\t}\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn admin;\n\t}\n\n\t@Override\n\tpublic void updateAdminInfo(Admin admin) {\n\n\t\tString sql = \"update admin_table set admin_name=?, password=? where id=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, admin.getAdminName());\n\t\t\tps.setString(2, admin.getPassword());\n\t\t\tps.setInt(3, admin.getId());\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean loginValidate(String userName, String password) {\n\n\t\tString sql = \"select * from admin_table where admin_name=? and password=?\";\n\t\ttry {\n\t\t\tps=DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, userName);\n\t\t\tps.setString(2,password);\n\t\t\tResultSet rs =ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (SQLException | ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n}", "package com.bijay.onlinevotingsystem.dao;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.sql.Date;\n\nimport com.bijay.onlinevotingsystem.dto.Voter;\nimport com.bijay.onlinevotingsystem.util.DbUtil;\n\npublic class VoterDaoImpl implements VoterDao {\n\n\tPreparedStatement ps = null;\n\n\t@Override\n\tpublic void saveVoterInfo(Voter voter) {\n\t\tString sql = \"insert into voter_table(voter_name, password, gender, state_no, district, email, dob, imageurl) values(?,?,?,?,?,?,?,?)\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, voter.getVoterName());\n\t\t\tps.setString(2, voter.getPassword());\n\t\t\tps.setString(3, voter.getGender());\n\t\t\tps.setInt(4, voter.getStateNo());\n\t\t\tps.setString(5, voter.getDistrictName());\n\t\t\tps.setString(6, voter.getEmail());\n\t\t\tps.setDate(7, new Date(voter.getDob().getTime()));\n\t\t\tps.setString(8, voter.getImgUrl());\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic List<Voter> getAllVoterInfo() {\n\t\tList<Voter> voterList = new ArrayList<>();\n\t\tString sql = \"select * from voter_table\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\twhile (rs.next()) {\n\t\t\t\tVoter voter = new Voter();\n\t\t\t\tvoter.setId(rs.getInt(\"id\"));\n\t\t\t\tvoter.setVoterName(rs.getString(\"voter_name\"));\n\t\t\t\tvoter.setPassword(rs.getString(\"password\"));\n\t\t\t\tvoter.setStateNo(rs.getInt(\"state_no\"));\n\t\t\t\tvoter.setDistrictName(rs.getString(\"district\"));\n\t\t\t\tvoter.setGender(rs.getString(\"gender\"));\n\t\t\t\tvoter.setImgUrl(rs.getString(\"imageurl\"));\n\t\t\t\tvoter.setEmail(rs.getString(\"email\"));\n\t\t\t\tvoter.setDob(rs.getDate(\"dob\"));\n\t\t\t\tvoterList.add(voter);\n\t\t\t}\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn voterList;\n\t}\n\n\t@Override\n\tpublic void updateVoterInfo(Voter voter) {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n\t@Override\n\tpublic void deleteVoterInfo(int id) {\n\n\t\tString sql = \"delete from voter_table where id=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setInt(1, id);\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean loginValidate(String userName, String password, String email) {\n\t\tString sql = \"select * from voter_table where voter_name=? and password=? and email=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, userName);\n\t\t\tps.setString(2, password);\n\t\t\tps.setString(3, email);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n}"], "fixing_code": ["package com.bijay.onlinevotingsystem.controller;\n\nimport java.io.IOException;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport com.bijay.onlinevotingsystem.dao.AdminDao;\nimport com.bijay.onlinevotingsystem.dao.AdminDaoImpl;\n\n@WebServlet(\"/aLoginController\")\npublic class AdminLoginController extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tAdminDao adminDao = new AdminDaoImpl();\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpSession session = request.getSession();\n\t\tsession.invalidate();\n\n\t\tRequestDispatcher rd = request.getRequestDispatcher(\"adminlogin.jsp\");\n\t\trequest.setAttribute(\"loggedOutMsg\", \"Log Out Successful\");\n\t\trd.include(request, response);\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\t// to get values from the login page\n\t\tString userName = request.getParameter(\"aname\");\n\t\tString password = request.getParameter(\"pass\");\n\t\t// String password = request.getParameter(\"pass\");\n\t\tString rememberMe = request.getParameter(\"remember-me\");\n\n\t\t// validation\n\n\t\tif (adminDao.loginValidate(userName, password)) {\n\n\t\t\tif (rememberMe != null) {\n\t\t\t\tCookie cookie1 = new Cookie(\"uname\", userName);\n\t\t\t\tCookie cookie2 = new Cookie(\"pass\", password);\n\n\t\t\t\tcookie1.setMaxAge(24 * 60 * 60);\n\t\t\t\tcookie2.setMaxAge(24 * 60 * 60);\n\n\t\t\t\tresponse.addCookie(cookie1);\n\t\t\t\tresponse.addCookie(cookie2);\n\t\t\t}\n\n\t\t\t// to display the name of logged-in person in home page\n\t\t\tHttpSession session = request.getSession();\n\t\t\tsession.setAttribute(\"username\", userName);\n\n\t\t\t/*\n\t\t\t * RequestDispatcher rd =\n\t\t\t * request.getRequestDispatcher(\"AdminController?actions=admin_list\");\n\t\t\t * rd.forward(request, response);\n\t\t\t */\n\n\t\t\tresponse.sendRedirect(\"AdminController?actions=admin_list\");\n\t\t} else {\n\t\t\tRequestDispatcher rd = request.getRequestDispatcher(\"adminlogin.jsp\");\n\t\t\trequest.setAttribute(\"loginFailMsg\", \"Invalid Username or Password !!\");\n\t\t\trd.include(request, response);\n\t\t}\n\t}\n}\n", "package com.bijay.onlinevotingsystem.controller;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.util.Base64;\n\npublic class SHA256 {\n\tprivate static final String SSHA_PREFIX = \"{SSHA}\";\n\tprivate static final int SSHA_256_LENGTH = 32; // SHA-256 is 32 bytes long\n\tprivate static final int SALT_LENGTH = 16; // Use a 16 byte salt\n\n\tpublic String getSHA(String password) {\n\t\ttry {\n\t\t\tbyte[] salt = getSalt();\n\t\t\tString cipher = getCipher(password, salt);\n\t\t\t\n\t\t\treturn cipher;\n\n\t\t\t// For specifying wrong message digest algorithms\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic static boolean validatePassword(String password, String cipherText) {\n\t\tboolean isValid = false;\n\t\ttry {\n\t\t\tString cipher = cipherText.substring(SSHA_PREFIX.length());\n\t\t\n\t\t\tbyte[] cipherBytes = Base64.getDecoder().decode(cipher.getBytes());\n\t\t\tbyte[] salt = new byte[SALT_LENGTH];\n\t\t\tSystem.arraycopy(cipherBytes, SSHA_256_LENGTH, salt, 0, SALT_LENGTH);\n\n\t\t\tString result = getCipher(password, salt);\n\t\t\t//Compare the newly hashed password taking the same salt with the input hash\n\t\t\tisValid = result.equals(cipherText);\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn isValid;\n\t}\n\t\n\tprivate static byte[] getSalt() throws NoSuchAlgorithmException {\n\t\tSecureRandom random = new SecureRandom();\n\t\tbyte[] salt = new byte[SALT_LENGTH];\n\t\trandom.nextBytes(salt);\n\t\treturn salt;\n\t}\n\n\tprivate static String getCipher(String password, byte[] salt) throws NoSuchAlgorithmException {\n\t\t// Static getInstance method is called with hashing SHA\n\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n\t\tmd.update(salt);\n\t\n\t\tbyte[] passBytes = password.getBytes();\n\t\tbyte[] allBytes = new byte[passBytes.length + SALT_LENGTH];\n\t\tSystem.arraycopy(passBytes, 0, allBytes, 0, passBytes.length);\n\t\tSystem.arraycopy(salt, 0, allBytes, passBytes.length, SALT_LENGTH);\n\t\n\t\t\t\n\t\tbyte[] cipherBytes = new byte[SSHA_256_LENGTH + SALT_LENGTH];\n\t\t\t\n\t\t// digest() method called\n\t\t// to calculate message digest of an input\n\t\t// and return array of byte\n\t\tbyte[] messageDigest = md.digest(allBytes);\n\t\n\t\tSystem.arraycopy(messageDigest, 0, cipherBytes, 0, SSHA_256_LENGTH);\n\t\tSystem.arraycopy(salt, 0, cipherBytes, SSHA_256_LENGTH, SALT_LENGTH);\n\t\t\n\t\tString result = SSHA_PREFIX + Base64.getEncoder().encodeToString(cipherBytes);\n\t\treturn result;\n\t}\n}\n", "package com.bijay.onlinevotingsystem.controller;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Random;\n\nimport javax.mail.MessagingException;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport com.bijay.onlinevotingsystem.dao.VoterDao;\nimport com.bijay.onlinevotingsystem.dao.VoterDaoImpl;\n\n@WebServlet(\"/vLoginController\")\npublic class VoterLoginController extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tVoterDao voterDao = new VoterDaoImpl();\n\n\tprivate String host;\n\tprivate String port;\n\tprivate String user;\n\tprivate String pass;\n\tpublic String recipient;\n\n\tpublic int otp;\n\t\n\tpublic int giveOtp() {\n\t\treturn this.otp;\n\t}\n\n\tpublic void init() {\n\t\t// reads SMTP server setting from web.xml file\n\t\tServletContext context = getServletContext();\n\t\thost = context.getInitParameter(\"host\");\n\t\tport = context.getInitParameter(\"port\");\n\t\tuser = context.getInitParameter(\"user\");\n\t\tpass = context.getInitParameter(\"pass\");\n\t}\n\n\tpublic VoterLoginController() {\n\t\tsuper();\n\t}\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t/*\n\t\t * one servlet le another servlet ma request garda doGet() ma aauxa. so for\n\t\t * logout, session use garera login page ma dispatch garxau.\n\t\t */\n\n\t\tHttpSession session = request.getSession();\n\t\tsession.invalidate();\n\n\t\tRequestDispatcher rd = request.getRequestDispatcher(\"voterlogin.jsp\");\n\t\trequest.setAttribute(\"loggedOutMsg\", \"Log Out Successful !!\");\n\t\trd.include(request, response);\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\t// to get values from the login page\n\t\t// HttpSession session=request.getSession();\n\t\tPrintWriter out = response.getWriter();\n\t\tint min = 100000;\n\t\tint max = 999999;\n\t\totp = 5432;\n\t\tRandom r = new Random();\n\t\totp = r.nextInt(max - min) + min;\n\n\t\tString userName = request.getParameter(\"uname\");\n\t\tString password = request.getParameter(\"pass\");\n\t\tString vemail = request.getParameter(\"vmail\");\n\n\t\tString recipient = vemail;\n\t\tString subject = \"otp verification\";\n\t\tString content = \"your otp is: \" + otp;\n\t\t// System.out.print(recipient);\n\t\tString resultMessage = \"\";\n\n\t\t// validation\n\t\tif (voterDao.loginValidate(userName, password, vemail)) {\n\n\t\t\t// to display the name of logged-in person in home page\n\n\t\t\tHttpSession session = request.getSession();\n\t\t\tsession.setAttribute(\"username\", userName);\n\n\t\t\ttry {\n\t\t\t\tEmailSend.sendEmail(host, port, user, pass, recipient, subject, content);\n\t\t\t} catch (MessagingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tresultMessage = \"There were an error: \" + e.getMessage();\n\t\t\t} finally {\n\t\t\t\tRequestDispatcher rd = request.getRequestDispatcher(\"OTP.jsp\");\n\t\t\t\trd.include(request, response);\n\t\t\t\tout.println(\"<script type=\\\"text/javascript\\\">\");\n\t\t\t\tout.println(\"alert('\" + resultMessage + \"');\");\n\t\t\t\tout.println(\"</script>\");\n\t\t\t}\n\n\t\t} else {\n\t\t\tRequestDispatcher rd = request.getRequestDispatcher(\"voterlogin.jsp\");\n\t\t\trequest.setAttribute(\"loginFailMsg\", \"Invalid Input ! Enter again !!\");\n\t\t\t// request.setAttribute(\"forgotPassMsg\", \"Forgot password??\");\n\t\t\trd.include(request, response);\n\t\t\t/*\n\t\t\t * String forgetpass = request.getParameter(\"forgotPass\"); //\n\t\t\t * System.out.println(forgetpass); if (forgetpass == null) { rd =\n\t\t\t * request.getRequestDispatcher(\"resetPassword.jsp\"); rd.forward(request,\n\t\t\t * response);\n\t\t\t */\n\t\t}\n\t}\n}\n", "package com.bijay.onlinevotingsystem.dao;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.crypto.Cipher;\n\nimport com.bijay.onlinevotingsystem.controller.SHA256;\nimport com.bijay.onlinevotingsystem.dto.Admin;\nimport com.bijay.onlinevotingsystem.util.DbUtil;\n\npublic class AdminDaoImpl implements AdminDao {\n\n\tPreparedStatement ps = null;\n\n\t@Override\n\tpublic void saveAdminInfo(Admin admin) {\n\t\tString sql = \"insert into admin_table(admin_name, password) values(?,?)\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, admin.getAdminName());\n\t\t\tps.setString(2, admin.getPassword());\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic List<Admin> getAllAdminInfo() {\n\t\tList<Admin> adminList = new ArrayList<>();\n\t\tString sql = \"select * from admin_table\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\twhile (rs.next()) {\n\t\t\t\tAdmin admin = new Admin();\n\t\t\t\tadmin.setId(rs.getInt(\"id\"));\n\t\t\t\tadmin.setAdminName(rs.getString(\"admin_name\"));\n\t\t\t\tadmin.setPassword(rs.getString(\"password\"));\n\t\t\t\tadminList.add(admin);\n\t\t\t}\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn adminList;\n\t}\n\n\t@Override\n\tpublic void deleteAdminInfo(int id) {\n\n\t\tString sql = \"delete from admin_table where id=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setInt(1, id);\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic Admin getAdminInfoById(int id) {\n\n\t\tAdmin admin = new Admin();\n\t\tString sql = \"select * from admin_table where id=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setInt(1, id);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tadmin.setId(rs.getInt(\"id\"));\n\t\t\t\tadmin.setAdminName(rs.getString(\"admin_name\"));\n\t\t\t\tadmin.setPassword(rs.getString(\"password\"));\n\n\t\t\t}\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn admin;\n\t}\n\n\t@Override\n\tpublic void updateAdminInfo(Admin admin) {\n\n\t\tString sql = \"update admin_table set admin_name=?, password=? where id=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, admin.getAdminName());\n\t\t\tps.setString(2, admin.getPassword());\n\t\t\tps.setInt(3, admin.getId());\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean loginValidate(String userName, String password) {\n\n\t\tString sql = \"select * from admin_table where admin_name=?\";\n\t\ttry {\n\t\t\tps=DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, userName);\n\t\t\tResultSet rs =ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tString cipherText = rs.getString(\"password\");\n\t\t\t\treturn SHA256.validatePassword(password, cipherText);\n\t\t\t}\n\t\t} catch (SQLException | ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n}", "package com.bijay.onlinevotingsystem.dao;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.sql.Date;\n\nimport com.bijay.onlinevotingsystem.controller.SHA256;\nimport com.bijay.onlinevotingsystem.dto.Voter;\nimport com.bijay.onlinevotingsystem.util.DbUtil;\n\npublic class VoterDaoImpl implements VoterDao {\n\n\tPreparedStatement ps = null;\n\n\t@Override\n\tpublic void saveVoterInfo(Voter voter) {\n\t\tString sql = \"insert into voter_table(voter_name, password, gender, state_no, district, email, dob, imageurl) values(?,?,?,?,?,?,?,?)\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, voter.getVoterName());\n\t\t\tps.setString(2, voter.getPassword());\n\t\t\tps.setString(3, voter.getGender());\n\t\t\tps.setInt(4, voter.getStateNo());\n\t\t\tps.setString(5, voter.getDistrictName());\n\t\t\tps.setString(6, voter.getEmail());\n\t\t\tps.setDate(7, new Date(voter.getDob().getTime()));\n\t\t\tps.setString(8, voter.getImgUrl());\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic List<Voter> getAllVoterInfo() {\n\t\tList<Voter> voterList = new ArrayList<>();\n\t\tString sql = \"select * from voter_table\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\twhile (rs.next()) {\n\t\t\t\tVoter voter = new Voter();\n\t\t\t\tvoter.setId(rs.getInt(\"id\"));\n\t\t\t\tvoter.setVoterName(rs.getString(\"voter_name\"));\n\t\t\t\tvoter.setPassword(rs.getString(\"password\"));\n\t\t\t\tvoter.setStateNo(rs.getInt(\"state_no\"));\n\t\t\t\tvoter.setDistrictName(rs.getString(\"district\"));\n\t\t\t\tvoter.setGender(rs.getString(\"gender\"));\n\t\t\t\tvoter.setImgUrl(rs.getString(\"imageurl\"));\n\t\t\t\tvoter.setEmail(rs.getString(\"email\"));\n\t\t\t\tvoter.setDob(rs.getDate(\"dob\"));\n\t\t\t\tvoterList.add(voter);\n\t\t\t}\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn voterList;\n\t}\n\n\t@Override\n\tpublic void updateVoterInfo(Voter voter) {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n\t@Override\n\tpublic void deleteVoterInfo(int id) {\n\n\t\tString sql = \"delete from voter_table where id=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setInt(1, id);\n\t\t\tps.executeUpdate();\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean loginValidate(String userName, String password, String email) {\n\t\tString sql = \"select * from voter_table where voter_name=? and email=?\";\n\t\ttry {\n\t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n\t\t\tps.setString(1, userName);\n\t\t\tps.setString(2, email);\n\t\t\tResultSet rs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tString cipherText = rs.getString(\"password\");\n\t\t\t\treturn SHA256.validatePassword(password, cipherText);\n\t\t\t}\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n}"], "filenames": ["src/com/bijay/onlinevotingsystem/controller/AdminLoginController.java", "src/com/bijay/onlinevotingsystem/controller/SHA256.java", "src/com/bijay/onlinevotingsystem/controller/VoterLoginController.java", "src/com/bijay/onlinevotingsystem/dao/AdminDaoImpl.java", "src/com/bijay/onlinevotingsystem/dao/VoterDaoImpl.java"], "buggy_code_start_loc": [21, 3, 24, 8, 9], "buggy_code_end_loc": [76, 36, 123, 109, 92], "fixing_code_start_loc": [20, 2, 23, 9, 10], "fixing_code_end_loc": [75, 76, 122, 112, 93], "type": "CWE-916", "message": "OnlineVotingSystem is an open source project hosted on GitHub. OnlineVotingSystem before version 1.1.2 hashes user passwords without a salt, which is vulnerable to dictionary attacks. Therefore there is a threat of security breach in the voting system. Without a salt, it is much easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables to crack passwords. This problem is fixed and published in version 1.1.2. A long randomly generated salt is added to the password hash function to better protect passwords stored in the voting system.", "other": {"cve": {"id": "CVE-2021-21253", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-21T15:15:14.580", "lastModified": "2022-10-24T20:58:09.827", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OnlineVotingSystem is an open source project hosted on GitHub. OnlineVotingSystem before version 1.1.2 hashes user passwords without a salt, which is vulnerable to dictionary attacks. Therefore there is a threat of security breach in the voting system. Without a salt, it is much easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables to crack passwords. This problem is fixed and published in version 1.1.2. A long randomly generated salt is added to the password hash function to better protect passwords stored in the voting system."}, {"lang": "es", "value": "OnlineVotingSystem es un proyecto de c\u00f3digo abierto alojado en GitHub. OnlineVotingSystem anterior a versi\u00f3n 1.1.2, aplica un hash a las contrase\u00f1as de los usuarios sin sal, lo que es vulnerable a ataques de diccionario. Por lo tanto, se presenta una amenaza de violaci\u00f3n de seguridad en el sistema de votaci\u00f3n. Sin una sal, es mucho m\u00e1s f\u00e1cil para los atacantes calcular previamente el valor hash usando t\u00e9cnicas de ataque de diccionario como tablas rainbow para descifrar contrase\u00f1as. Este problema est\u00e1 corregido y publicado en la versi\u00f3n 1.1.2. Se agrega una sal generada aleatoriamente a la funci\u00f3n password hash para proteger mejor las contrase\u00f1as almacenadas en el sistema de votaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-916"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-759"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:onlinevotingsystem_project:onlinevotingsystem:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.1.2", "matchCriteriaId": "9512C3B9-84DD-4E95-8091-B4C18719D719"}]}]}], "references": [{"url": "https://github.com/dbijaya/OnlineVotingSystem/commit/0181cb0272857696c8eb3e44fcf6cb014ff90f09", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/dbijaya/OnlineVotingSystem/security/advisories/GHSA-wwg8-372v-v332", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dbijaya/OnlineVotingSystem/commit/0181cb0272857696c8eb3e44fcf6cb014ff90f09"}}