{"buggy_code": ["# GLPI changes\n\nThe present file will list all changes made to the project; according to the\n[Keep a Changelog](http://keepachangelog.com/) project.\n\n## [9.5.1] unreleased\n\n## [9.5.0] 2020-07-07\n\n### Added\n\n- Encrypted file systems support.\n- Mails collected from suppliers can be marked as private on an entity basis.\n- Ability to add custom CSS in entity configuration.\n- CLI commands to enable and disable maintenance mode.\n- Operating system links on Monitors, Peripherals, Phones and Printers.\n- Add datacenter items to global search\n- Project task search options for Projects\n- Automatic action to purge closed tickets\n- Ability to automatically calculate project's percent done\n- Software link on Phones.\n- Add and answer approvals from timeline\n- Add lightbox with PhotoSwipe to timeline images\n- Ability to copy tasks while merging tickets\n- the API gives the ID of the user who logs in with initSession\n- Kanban view for projects\n- Network ports on Monitors\n- Add warning when there are unsaved changes in forms\n- Add ability to get information from the status endpoint in JSON format using Accept header\n- Add `glpi:system:status` CLI command for getting the GLPI status\n\n### Changed\n\n- PHP error_reporting and display_errors configuration directives are no longer overrided by GLPI, unless in debug mode (which forces reporting and display of all errors).\n- `scripts/migrations/racks_plugin.php` has been replaced by `glpi:migration:racks_plugin_to_core` command available using `bin/console`\n- Encryption alogithm improved using libsodium\n\n### API changes\n\n#### Added\n\n- Add translation functions `__()`,  `_n()`,  `_x()` and  `_nx()` in javascript in browser context.\n- `Migration::renameItemtype()` method to update of database schema/values when an itemtype class is renamed\n- Menu returned by `CommonGLPI::getMenuContent()` method override may now define an icon for each menu entry.\n- `CommonDBConnexity::getItemsAssociatedTo()` method to get the items associated to the given one\n- `CommonDBConnexity::getItemsAssociationRequest()` method to get the DB request to use to get the items associated to the given one\n- `CommonDBTM::clone()` method to clone the current item\n- `CommonDBTM::prepareInputForClone()` method to modify the input data that will be used for the cloning\n- `CommonDBTM::post_clone()` method to perform other steps after an item has been cloned (like clone the elements it is associated to)\n\n#### Changes\n\n- jQuery library has been upgraded from 2.2.x to 3.4.x. jQuery Migrate is used to ensure backward compatibility in most cases.\n- `DBmysqlIterator::handleOrderClause()` supports QueryExpressions\n- Use Laminas instead of deprecated ZendFramework\n- Database datetime fields have been replaced by timestamp fields to handle timezones support.\n- Database integer/float fields values are now returned as number instead of strings from DB read operations.\n- Field `domains_id` of Computer, NetworkEquipment and Printer has been dropped and data has been transfered into `glpi_domains_items` table.\n- Plugin status hook can now be used to provide an array with more information about the plugin's status the status of any child services.\n    - Returned array should contain a 'status' value at least (See status values in Glpi\\System\\Status\\StatusChecker)\n    - Old style returns are still supported\n\n#### Deprecated\n\n- `DBMysql::fetch_array()`\n- `DBMysql::fetch_row()`\n- `DBMysql::fetch_assoc()`\n- `DBMysql::fetch_object()`\n- `DBMysql::data_seek()`\n- `DBMysql::insert_id()`\n- `DBMysql::num_fields()`\n- `DBMysql::field_name()`\n- `DBMysql::list_fields()`\n- `DBMysql::affected_rows()`\n- `DBMysql::free_result()`\n- `DBMysql::isMySQLStrictMode()`\n- `getAllDatasFromTable` renamed to `getAllDataFromTable()`\n- Usage of `$order` parameter in `getAllDataFromTable()` (`DbUtils::getAllDataFromTable()`)\n- `Ticket::getTicketTemplateToUse()` renamed to `Ticket::getITILTemplateToUse()`\n- `TicketTemplate::getFromDBWithDatas()` renamed to `TicketTemplate::getFromDBWithData()` (inherited from `ITILTemplate`)\n- `Computer_SoftwareLicense` replaced by `Item_SoftwareLicense` and table `glpi_computers_softwarelicenses` renamed to `glpi_items_softwarelicenses`\n- `Computer_SoftwareVersion` replaced by `Item_SoftwareVersion` and table `glpi_computers_softwareversions` renamed to `glpi_items_softwareversions`\n- `Item_SoftwareVersion::updateDatasForComputer` renamed to `Item_SoftwareVersion::updateDatasForItem`\n- `Item_SoftwareVersion::showForComputer` renamed to `Item_SoftwareVersion::showForItem`\n- `Item_SoftwareVersion::softsByCategory` renamed to `Item_SoftwareVersion::softwareByCategory`\n- `Item_SoftwareVersion::displaySoftsByLicense` renamed to `Item_SoftwareVersion::displaySoftwareByLicense`\n- `Item_SoftwareVersion::cloneComputer` renamed to `Item_SoftwareVersion::cloneItem`\n- `Transfer::transferComputerSoftwares` renamed to `Transfer::transferItemSoftwares`\n- 'getRealQueryForTreeItem()'\n- ``getCommonSelect`` and ``getCommonLeftJoin()`` from ``Ticket``, ``Change`` and ``Problem`` are replaced with ``getCommonCriteria()`` compliant with db iterator\n- `Config::checkWriteAccessToDirs()`\n- `Config::displayCheckExtensions()`\n- `Toolbox::checkSELinux()`\n- `Toolbox::userErrorHandlerDebug()`\n- `Toolbox::userErrorHandlerNormal()`\n- `Html::jsDisable()`\n- `Html::jsEnable()`\n- `Plugin::setLoaded()`\n- `Plugin::setUnloaded()`\n- `Plugin::setUnloadedByName()`\n- Usage of `$LOADED_PLUGINS` global variable\n- `CommonDBTM::getRawName()` replaced by `CommonDBTM::getFriendlyName()`\n- `Calendar_Holiday::cloneCalendar()`\n- `CalendarSegment::cloneCalendar()`\n- `Computer_Item::cloneComputer()`\n- `Computer_Item::cloneItem()`\n- `ComputerAntivirus::cloneComputer()`\n- `Contract::cloneItem()`\n- `Contract_Item::cloneItem()`\n- `ContractCost::cloneContract()`\n- `Document_Item::cloneItem()`\n- `Infocom::cloneItem()`\n- `Item_Devices::cloneItem()`\n- `Item_Disk::cloneItem()`\n- `Item_OperatingSystem::cloneItem()`\n- `Item_SoftwareLicense::cloneComputer()`\n- `Item_SoftwareLicense::cloneItem()`\n- `Item_SoftwareVersion::cloneComputer()`\n- `Item_SoftwareVersion::cloneItem()`\n- `Itil_Project::cloneItilProject()`\n- `KnowbaseItem_Item::cloneItem()`\n- `NetworkPort::cloneItem()`\n- `Notepad::cloneItem()`\n- `ProjectCost::cloneProject()`\n- `ProjectTeam::cloneProjectTask()`\n- `ProjectTask::cloneProjectTeam()`\n- Usage of `GLPIKEY` constant\n- `Toolbox::encrypt()` and `Toolbox::decrypt()` because they use the old encryption aglogithm\n\n#### Removed\n\n- Usage of string `$condition` parameter in `CommonDBTM::find()`\n- Usage of string `$condition` parameter in `Dropdown::addNewCondition()`\n- Usage of string in `$option['condition']` parameter in `Dropdown::show()`\n- `KnowbaseItemCategory::showFirstLevel()`\n- `Ticket::getTicketActors()`\n- `NotificationTarget::getProfileJoinSql()`\n- `NotificationTarget::getDistinctUserSql()`\n- `NotificationTargetCommonITILObject::getProfileJoinSql()`\n- `RuleCollection::getRuleListQuery()`\n- `getNextItem()`\n- `getPreviousItem()`\n- `CommonDBChild::getSQLRequestToSearchForItem()`\n- `CommonDBConnexity::getSQLRequestToSearchForItem()`\n- `CommonDBRelation::getSQLRequestToSearchForItem()`\n- `Project::addVisibility()`\n- `Project::addVisibilityJoins()`\n- `Plugin::hasBeenInit()`\n- 'SELECT DISTINCT' and 'DISTINCT FIELDS' criteria in `DBmysqlIterator::buildQuery()`\n- `CommonDBTM::getTablesOf()`\n- `CommonDBTM::getForeignKeyFieldsOf()`\n- `TicketFollowup`\n- `getDateRequest` and `DbUtils::getDateRequest()`\n- `Html::convertTagFromRichTextToImageTag()`\n- `Transfer::createSearchConditionUsingArray()`\n- Unused constants GLPI_FONT_FREESANS and GLPI_SCRIPT_DIR\n\n## [9.4.6] 2020-05-05\n\n## [9.4.5] 2019-12-18\n\n## [9.4.4] 2019-09-24\n\n### API changes\n\n#### Changes\n- For security reasons, autocompletion feature requires now to be authorized by a `'autocomplete' => true` flag in corresponding field search option.\n\n## [9.4.3] 2019-06-20\n\n### API changes\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `Html::convertTagFromRichTextToImageTag()`\n\n## [9.4.2] 2019-04-11\n\n### API changes\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `CommonDBTM::getTablesOf()`\n- `CommonDBTM::getForeignKeyFieldsOf()`\n\n## [9.4.1] 2019-03-15\n\n### API changes\n\n#### Added\n\n- new display hook `timeline_actions` to add new buttons to timeline forms\n- Ability to copy document links while merging tickets\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `Plugin::hasBeenInit()`\n- Deprecate 'SELECT DISTINCT' and 'DISTINCT FIELDS' criteria in `DBmysqlIterator::buildQuery()`\n\n#### Removed\n\n- Drop `CommonITILObject::showSolutions()`.\n\n## [9.4.0] 2019-02-11\n\n### Added\n\n- Ability to link project with problems and tickets.\n- Ability to specify creation and modification dates during CommonDBTM object add method\n- Add followups to Changes and Problems.\n- Add timeline to Changes and Problems.\n- CLI console to centralize CLI commands.\n- Search on devices from Printers and Network equipments.\n- Ability to merge and split tickets.\n- Search on devices from Printers and Network equipments.\n- Ability to specify creation and modification dates during CommonDBTM object add method.\n\n### Changed\n- `license_id` field in `glpi_items_operatingsystems` table has been renamed to `licenseid`\n- `olas_tto_id` field in `glpi_tickets` table has been renamed to `olas_id_tto`\n- `olas_ttr_id` field in `glpi_tickets` table has been renamed to `olas_id_ttr`\n- `ttr_olalevels_id` field in `glpi_tickets` table has been renamed to `olalevels_id_ttr`\n- `slas_tto_id` field in `glpi_tickets` table has been renamed to `slas_id_tto`\n- `slas_ttr_id` field in `glpi_tickets` table has been renamed to `slas_id_ttr`\n- `ttr_slalevels_id` field in `glpi_tickets` table has been renamed to `slalevels_id_ttr`\n- `scripts/add_creation_date.php` has been replaced by `glpi:migration:build_missing_timestamps` command available using `bin/console`\n- `scripts/checkdb.php` has been replaced by `glpi:database:check` command available using `bin/console`\n- `scripts/cliinstall.php` has been replaced by `glpi:database:install` command available using `bin/console`\n- `scripts/cliupdate.php` has been replaced by `glpi:database:update` command available using `bin/console`\n- `scripts/ldap_mass_sync.php` has been replaced by `glpi:ldap:synchronize_users` command available using `bin/console`\n- `scripts/innodb_migration.php` has been replaced by `glpi:migration:myisam_to_innodb` command available using `bin/console`\n- `scripts/unlock_tasks.php` has been replaced by `glpi:task:unlock` command available using `bin/console`\n\n### API changes\n\n#### Changes\n- Plugins are now loaded in ajax files.\n- `TicketFollowup` has been replaced by `ITILFollowup`\n- `$num` parameter has been removed from several `Search` class methods:\n   - `addSelect()`,\n   - `addOrderBy()`,\n   - `addHaving()`,\n   - `giveItem()`\n- `NotificationTarget::getMode()` visibility is now `public`.\n- Added `add_recipient_to_target` hook, triggered when a recipient is added to a notification.\n\n#### Deprecated\n\n- Remove `$CFG_GLPI['use_rich_text']` parameter. Will now be `true` per default.\n- Remove `$CFG_GLPI['ticket_timeline']` parameter. Will now be `true` per default.\n- Remove `$CFG_GLPI['ticket_timeline_keep_replaced_tabs']` parameter. Will now be `false` per default.\n- Usage of `TicketFollowup` class has been deprecated.\n- Usage of string `$condition` parameter in `CommonDBTM::find()` has been deprecated.\n- Usage of string `$condition` parameter in `Dropdown::addNewCondition()` has been deprecated.\n- Usage of string in `$option['condition']` parameter in `Dropdown::show()` has been deprecated.\n\nThe following methods have been deprecated:\n\n- `KnowbaseItemCategory::showFirstLevel()`\n- `Ticket::getTicketActors()`\n- `Ticket::processMassiveActionsForOneItemtype()`\n- `Ticket::showFormMassiveAction()`\n- `Ticket::showMassiveActionsSubForm()`\n- `NotificationTarget::getProfileJoinSql()`\n- `NotificationTarget::getDistinctUserSql()`\n- `NotificationTargetCommonITILObject::getProfileJoinSql()`\n- `RuleCollection::getRuleListQuery()`\n- `getNextItem()`\n- `getPreviousItem()`\n- `CommonDBChild::getSQLRequestToSearchForItem()`\n- `CommonDBConnexity::getSQLRequestToSearchForItem()`\n- `CommonDBRelation::getSQLRequestToSearchForItem()`\n- `Project::addVisibility()`\n- `Project::addVisibilityJoins()`\n\n#### Removed\n\n- Drop ability to use `JOIN` in `DBmysqlIterator::buildQuery()`\n- Drop `NotificationTarget::datas` property\n- Drop support of string `$filter` parameter in `Profileuser::getUserProfiles()`\n- Drop support of string `$condition` parameter in `User::getFromDBbyEmail()`\n- Drop support of string `$condition` parameter in `Group_User::getUserGroups()`\n- Drop support of string `$condition` parameter in `Group_User::getGroupUsers()`\n- Drop support of string `$condition` parameter in `countElementsInTable` (`DbUtils::countElementsInTable()`)\n- Drop support of string `$condition` parameter in `countDistinctElementsInTable` (`DbUtils::countDistinctElementsInTable()`)\n- Drop support of string `$condition` parameter in `countElementsInTableForMyEntities` (`DbUtils::countElementsInTableForMyEntities()`)\n- Drop support of string `$condition` parameter in `countElementsInTableForEntity` (`DbUtils::countElementsInTableForEntity()`)\n- Drop support of string `$condition` parameter in `getAllDatasFromTable` (`DbUtils::getAllDataFromTable()`)\n- Drop ITIL Tasks, Followups and Solutions `showSummary()` and massive actions related methods that are replaced with timeline\n\n- Drop class alias `Event` for `Glpi\\Event`\n- Drop `Zend\\Loader\\SplAutoloader` interface\n- Drop all methods that have been deprecated in GLPI 9.2\n  - `_e()`\n  - `_ex()`\n  - `FieldExists()`\n  - `formatOutputWebLink()`\n  - `TableExists()`\n  - `CommonTreeDropodwn::recursiveCleanSonsAboveID()`\n  - `DBMysql::optimize_tables()`\n  - `NotificationTarget::addToAddressesList()`\n  - `NotificationTarget::getAdditionalTargets()`\n  - `NotificationTarget::getAddressesByGroup()`\n  - `NotificationTarget::getAddressesByTarget()`\n  - `NotificationTarget::getAdminAddress()`\n  - `NotificationTarget::getEntityAdminAddress()`\n  - `NotificationTarget::getItemAuthorAddress()`\n  - `NotificationTarget::getItemGroupAddress()`\n  - `NotificationTarget::getItemGroupSupervisorAddress()`\n  - `NotificationTarget::getItemGroupTechInChargeAddress()`\n  - `NotificationTarget::getItemGroupWithoutSupervisorAddress()`\n  - `NotificationTarget::getItemOwnerAddress()`\n  - `NotificationTarget::getItemTechnicianInChargeAddress()`\n  - `NotificationTarget::getNotificationTargets()`\n  - `NotificationTarget::getSpecificTargets()`\n  - `NotificationTarget::getUserByField()`\n  - `NotificationTarget::getUsersAddressesByProfile()`\n  - `NotificationTargetCommonITILObject::getDatasForObject()`\n  - `NotificationTargetCommonITILObject::getFollowupAuthor()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupByType()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupSupervisorByType()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupWithoutSupervisorByType()`\n  - `NotificationTargetCommonITILObject::getLinkedUserByType()`\n  - `NotificationTargetCommonITILObject::getOldAssignTechnicianAddress()`\n  - `NotificationTargetCommonITILObject::getRecipientAddress()`\n  - `NotificationTargetCommonITILObject::getSupplierAddress()`\n  - `NotificationTargetCommonITILObject::getTaskAssignGroup()`\n  - `NotificationTargetCommonITILObject::getTaskAssignUser()`\n  - `NotificationTargetCommonITILObject::getTaskAuthor()`\n  - `NotificationTargetCommonITILObject::getValidationApproverAddress()`\n  - `NotificationTargetCommonITILObject::getValidationRequesterAddress()`\n  - `NotificationTargetProjectTask::getTeamContacts()`\n  - `NotificationTargetProjectTask::getTeamGroups()`\n  - `NotificationTargetProjectTask::getTeamSuppliers()`\n  - `NotificationTargetProjectTask::getTeamUsers()`\n  - `QueuedNotification::sendMailById()`\n  - `Ticket::convertContentForNotification()`\n  - `User::getPersonalToken()`\n  - `User::getUniquePersonalToken()`\n- Drop all methods that have been deprecated in GLPI 9.3.0\n  - `CommonDBTM::getFromDBByQuery()`\n  - `CommonDBTM::getSearchOptions()`\n  - `CommonDBTM::getSearchOptionsNew()`\n  - `CommonDBTM::getSearchOptionsToAddNew()`\n  - `CommonITILObject::getStatusIconURL()`\n  - `DBMysql::list_tables()`\n  - `Dropdown::showPrivatePublicSwitch()`\n  - `NotificationTargetProjectTask::getTeamContacts()`\n  - `NotificationTargetProjectTask::getTeamGroups()`\n  - `NotificationTargetProjectTask::getTeamSuppliers()`\n  - `NotificationTargetProjectTask::getTeamUsers()`\n  - `Search::constructDatas()`\n  - `Search::displayDatas()`\n  - `Transfer::transferComputerDisks()`\n- Drop all methods that have been deprecated in GLPI 9.3.1\n  - `ComputerVirtualMachine::getUUIDRestrictRequest()`\n  - `Config::getSQLMode()`\n  - `DBMysql::checkForCrashedTables()`\n  - `Html::checkAllAsCheckbox()`\n  - `Html::scriptEnd()`\n  - `Html::scriptStart()`\n  - `Plugin::isAllPluginsCSRFCompliant()`\n  - `Profile::getUnderActiveProfileRestrictRequest()`\n  - `Toolbox::is_a()`\n- Drop all constants that have been deprecated in GLPI 9.3.1\n  - `CommonDBTM::ERROR_FIELDSIZE_EXCEEDED`\n  - `CommonDBTM::HAS_DUPLICATE`\n  - `CommonDBTM::NOTHING_TO_DO`\n  - `CommonDBTM::SUCCESS`\n  - `CommonDBTM::TYPE_MISMATCH`\n- Drop all methods that have been deprecated in GLPI 9.3.2\n - `ITILSolution::removeForItem()`\n - `Session::isViewAllEntities()`\n\n## [9.3.3] 2018-11-27\n\n### Changed\n\n- Fix some cache issues\n- Fix reservation tab of an item\n- Fix actors notifications massive action\n- Improve racks plugins migration script\n\n### API changes\n\nNo API changes.\n\n## [9.3.2] 2018-10-26\n\n### API changes\n\n#### Changed\n\n- `Rule::executePluginsActions()` signature has changed\n- Javascript function `formatResult()` has been renamed to `templateResult()`\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `CommonITILTask::displayTabContentForItem()`\n- `CommonITILTask::showFormMassiveAction()`\n- `CommonITILTask::showSummary()`\n- `ITILSolution::displayTabContentForItem()`\n- `ITILSolution::removeForItem()`\n- `ITILSolution::showSummary()`\n- `Session::isViewAllEntities()`\n- `TicketFollowup::processMassiveActionsForOneItemtype()`\n- `TicketFollowup::showFormMassiveAction()`\n- `TicketFollowup::showMassiveActionsSubForm()`\n- `TicketFollowup::showSummary()`\n- `Plugin::removeFromSession()`\n\n## [9.3.1] 2018-09-12\n\n### Added\n- List receivers folders to choose imported/refused folders\n\n### API changes\n\n#### Deprecated\n\n- Usage of string `$condition` parameter in `Group_User::getUserGroups()` has been deprecated\n- Usage of string `$condition` parameter in `Group_User::getGroupUsers()` has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTable` (`DbUtils::countElementsInTable()`) has been deprecated\n- Usage of string `$condition` parameter in `countDistinctElementsInTable` (`DbUtils::countDistinctElementsInTable()`) has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTableForMyEntities` (`DbUtils::countElementsInTableForMyEntities()`) has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTableForEntity` (`DbUtils::countElementsInTableForEntity()`) has been deprecated\n- Usage of string `$condition` parameter in `getAllDatasFromTable` (`DbUtils::getAllDataFromTable()`) has been deprecated\n\nThe following methods have been deprecated:\n\n- `Config::getSQLMode()`\n- `DBMysql::checkForCrashedTables()`\n- `Html::checkAllAsCheckbox()`\n- `Html::scriptEnd()`\n- `Html::scriptStart()`\n- `Toolbox::is_a()`\n- `ComputerVirtualMachine::getUUIDRestrictRequest()`\n- `Plugin::isAllPluginsCSRFCompliant()`\n- `Profile::getUnderActiveProfileRestrictRequest()`\n\nThe following constants have been deprecated:\n- `CommonDBTM::ERROR_FIELDSIZE_EXCEEDED`\n- `CommonDBTM::HAS_DUPLICATE`\n- `CommonDBTM::NOTHING_TO_DO`\n- `CommonDBTM::SUCCESS`\n- `CommonDBTM::TYPE_MISMATCH`\n\n## [9.3.0] 2018-06-28\n\n### Added\n- Add DCIM management\n- Add OSM view to set locations and on Search\n- Add login source selection\n- Add logs purge\n- Filter in items logs\n\n### Changed\n- Switch MySQL engine from MyIsam to Innodb\n- Rework solutions for Tickets, Problems and Changes to support history\n- Disks can be attached to network equipments and printers\n\n### API changes\n\n#### Changes\n- Added `DB::insert()`, `DB::update()` and `DB::delete()` to replace raw SQL queries\n- `CommonITILObject::showMassiveSolutionForm()` now takes a `CommonITILObject` as argument\n- `Profileuser::getUserProfiles()` `$filter` parameter is now an array\n- `User::getFromDBbyEmail()` `$condition` parameter is now an array\n- Select2 javascript component has been upgraded to 4.0 version, see [Migrating from Select2 3.5](https://select2.org/upgrading/migrating-from-35)\n- `CommonDevice::getItem_DeviceType()` has a new optional `$devicetype` parameter\n\n#### Deprecated\n\n- Usage of string `$filter` parameter in `Profileuser::getUserProfiles()` has been deprecated\n- Usage of string `$condition` parameter in `User::getFromDBbyEmail()` has been deprecated\n\nThe following methods have been deprecated:\n\n- `CommonDBTM::getFromDBByQuery()`\n- `CommonDBTM::getSearchOptions()`\n- `CommonDBTM::getSearchOptionsNew()`\n- `CommonDBTM::getSearchOptionsToAddNew()`\n- `CommonITILObject::getStatusIconURL()`\n- `DBMysql::list_tables()`\n- `Dropdown::showPrivatePublicSwitch()`\n- `NotificationTargetProject::getTeamContacts()`\n- `NotificationTargetProject::getTeamGroups()`\n- `NotificationTargetProject::getTeamSuppliers()`\n- `NotificationTargetProject::getTeamUsers()`\n- `Search::constructDatas()`\n- `Search::displayDatas()`\n- `Transfer::transferComputerDisks()`\n\n#### Removed\n\n- `CommonITILValidation::isAllValidationsHaveSameStatusForTicket`\n- `CommonITILValidation::getNumberValidationForTicket`\n- PHPCas library is no longer provided (for licensing issues)\n\n## [9.2.4] 2018-06-21\n\n## [9.2.3] 2018-04-27\n\n## [9.2.2] 2018-03-01\n\n\n### Deprecated\n\n- `CommonITILValidation::isAllValidationsHaveSameStatusForTicket`\n- `CommonITILValidation::getNumberValidationForTicket`\n- `DBMysql::optimize_tables()`\n\n## [9.2.1] 2017-11-16\n\n### Added\n\n- Search engine, added ``itemtype_item_revert`` jointype\n\n### Deprecated\n\n- `Ticket::convertContentForNotification()`\n\n## [9.2] 2017-09-25\n\n### Added\n- Link knowledge base entries with assets or tickets\n- Revisions on knowledge base entries and their translations, with diff view\n- Add recursive comments on knowledge base entries\n- Direct links to KB article's title for a direct access\n- Load minified CSS and JS files (core and plugins) that are generated on release\n- Link beetween software licenses\n- Alerts on saved searches\n- Add ajax browsers notifications in addition to emails\n- Plugins can now add new notifications types (xmpp, sms, telegram, ...) to be used along with standard notifications\n- Simcard component\n- Synchronization field for LDAP\n- Improved performances on large entities databases\n- Remember me on login\n- Fuzzy search\n- Paste images in rich text editor\n- Add tasks in tickets templates\n- Composite tickets (link on sons/parents)\n- Telemetry\n- Certificates component\n- Firmwares components (BIOSes, firwmwares, ...)\n- Add OLA management\n\n### Changed\n- Many bugs have been fixed\n- Display knowledge base category items in tickets using a popup instead of a\nnew whole window\n- Reviewed all richtext editor (tinymce) and their upload parts, now more simpler and intuitive\n- Don't ask user to select a template if there is no configured template\n- personal_token is not used anymore for api authentication, a new api_token field has been added (empty by default, you should regenerate it)\n- Operating systems management has been improved\n- Direct language change from any page\n- Better icons harmonization\n\n### API changes\n\n#### Changes\n\n- `CommonDBTM::getTable()` signature has changed\n- `User::getFromDBbyToken()` signature has changed\n- `Bookmark` has been renamed to `SavedSearch`\n- Update to latest jsTree plugin\n- `RuleDictionnarySoftwareCollection::versionExists()` signature has changed\n- `NotificationTemplate::getDataToSend()` signature has changed\n- `QueuedMail` has been renamed to `QueuedNotification`\n- `CommonDBTM::mailqueueonaction()` has been renamed to `CommonDBTM::notificationqueueonaction()`\n- `NotificationTarget::getSender()` no longer takes any parameters (was not used)\n- `TableExists()` has been moved to `DBMysql::tableExists()`\n- `FieldExists()` has been moved to `DBMysql::fieldExists()`\n- `Profile_User::getUserEntitiesForRight()` signature has changed\n- `NotificationTarget` property `datas` has been renamed to `data`\n\n#### Deprecated\n\n- Ability to use `JOIN` in `DBmysqlIterator::buildQuery()` has been deprecated\n- Usage of `NotificationTarget::datas` property has been deprecated\n- Usage of `Zend\\Loader\\SplAutoloader` interface has been deprecated\n\nThe following methods have been deprecated:\n\n- `_e()`\n- `_ex()`\n- `Bookmark::mark_default()`\n- `Bookmark::unmark_default()`\n- `CommonTreeDropodwn::recursiveCleanSonsAboveID()`\n- `NotificationTarget::addToAddressesList()`\n- `NotificationTarget::getAdditionalTargets()`\n- `NotificationTarget::getAddressesByGroup()`\n- `NotificationTarget::getAddressesByTarget()`\n- `NotificationTarget::getAdminAddress()`\n- `NotificationTarget::getEntityAdminAddress()`\n- `NotificationTarget::getItemAuthorAddress()`\n- `NotificationTarget::getItemGroupAddress()`\n- `NotificationTarget::getItemGroupSupervisorAddress()`\n- `NotificationTarget::getItemGroupTechInChargeAddress()`\n- `NotificationTarget::getItemGroupWithoutSupervisorAddress()`\n- `NotificationTarget::getItemOwnerAddress()`\n- `NotificationTarget::getItemTechnicianInChargeAddress()`\n- `NotificationTarget::getNotificationTargets()`\n- `NotificationTarget::getSpecificTargets()`\n- `NotificationTarget::getUserByField()`\n- `NotificationTarget::getUsersAddressesByProfile()`\n- `NotificationTargetCommonITILObject::getDatasForObject()`\n- `NotificationTargetCommonITILObject::getFollowupAuthor()`\n- `NotificationTargetCommonITILObject::getLinkedGroupByType()`\n- `NotificationTargetCommonITILObject::getLinkedGroupSupervisorByType()`\n- `NotificationTargetCommonITILObject::getLinkedGroupWithoutSupervisorByType()`\n- `NotificationTargetCommonITILObject::getLinkedUserByType()`\n- `NotificationTargetCommonITILObject::getOldAssignTechnicianAddress()`\n- `NotificationTargetCommonITILObject::getRecipientAddress()`\n- `NotificationTargetCommonITILObject::getSupplierAddress()`\n- `NotificationTargetCommonITILObject::getTaskAssignGroup()`\n- `NotificationTargetCommonITILObject::getTaskAssignUser()`\n- `NotificationTargetCommonITILObject::getTaskAuthor()`\n- `NotificationTargetCommonITILObject::getValidationApproverAddress()`\n- `NotificationTargetCommonITILObject::getValidationRequesterAddress()`\n- `NotificationTargetProjectTask::getTeamContacts()`\n- `NotificationTargetProjectTask::getTeamGroups()`\n- `NotificationTargetProjectTask::getTeamSuppliers()`\n- `NotificationTargetProjectTask::getTeamUsers()`\n- `QueuedNotification::sendMailById()`\n- `User::getPersonalToken()`\n- `User::getUniquePersonalToken()`\n- `formatOutputWebLink()`\n\n#### Removals\n\nThe following methods have been dropped:\n\n- `Ajax::displaySearchTextForDropdown()`\n- `Ajax::getSearchTextForDropdown()`\n- `Bookmark::changeBookmarkOrder()`\n- `Bookmark::moveBookmark()`\n- `CommonGLPI::addDivForTabs()`\n- `CommonGLPI::showTabs()`\n- `CommonGLPI::showNavigationHeaderOld()`\n- `CommonGLPI::show()`\n- `Dropdown::showInteger()`\n- `DBMysql::field_flags()`\n- `Html::showDateFormItem()`\n- `Html::showDateTimeFormItem()`\n- `Profile::dropdownNoneReadWrite()`\n- `Toolbox::get_magic_quotes_runtime()`\n- `Toolbox::get_magic_quotes_gpc()`\n- `Dropdown::showAllItems()`\n\nFor older entries, please check [GLPI website](http://glpi-project.org).\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\n/**\n * @since 0.84\n */\n\n$AJAX_INCLUDE = 1;\n\ninclude ('../inc/includes.php');\n\nheader(\"Content-Type: text/html; charset=UTF-8\");\nHtml::header_nocache();\n\nSession::checkRight(\"networking\", UPDATE);\n\n// Make a select box\nif (class_exists($_POST[\"itemtype\"])\n    && isset($_POST[\"item\"])) {\n   $table = getTableForItemType($_POST[\"itemtype\"]);\n\n   $joins = [];\n   $name_field = new QueryExpression(\"'' AS \" . $DB->quoteName('npname'));\n\n   if ($_POST['instantiation_type'] == 'NetworkPortEthernet') {\n      $name_field = 'glpi_netpoints.name AS npname';\n      $joins = [\n         'glpi_networkportethernets'   => [\n            'ON'  => [\n               'glpi_networkportethernets'   => 'id',\n               'glpi_networkports'           => 'id'\n            ]\n         ],\n         'glpi_netpoints'              => [\n            'ON'  => [\n               'glpi_networkportethernets'   => 'netpoints_id',\n               'glpi_netpoints'              => 'id'\n            ]\n         ]\n      ];\n   }\n\n   $criteria = [\n      'SELECT'    => [\n         'glpi_networkports_networkports.id AS wid',\n         'glpi_networkports.id AS did',\n         \"$table.name AS cname\",\n         'glpi_networkports.name AS nname',\n         $name_field\n      ],\n      'DISTINCT'  => true,\n      'FROM'      => $table,\n      'LEFT JOIN' => [\n         'glpi_networkports'  => [\n            'ON'  => [\n               'glpi_networkports'  => 'items_id',\n               $table               => 'id', [\n                  'AND' => [\n                     'glpi_networkports.items_id'           => $_POST['item'],\n                     'glpi_networkports.itemtype'           => $_POST[\"itemtype\"],\n                     'glpi_networkports.instantiation_type' => $_POST['instantiation_type']\n                  ]\n               ]\n            ]\n         ],\n         'glpi_networkports_networkports' => [\n            'ON'  => [\n               'glpi_networkports_networkports' => 'networkports_id_1',\n               'glpi_networkports'              => 'id', [\n                  'OR'  => [\n                     'glpi_networkports_networkports.networkports_id_2' => $DB->quoteName('glpi_networkports.id')\n                  ]\n               ]\n            ]\n         ]\n      ] + $joins,\n      'WHERE'     => [\n         'glpi_networkports_networkports.id' => null,\n         'NOT'                               => ['glpi_networkports.id' => null],\n         'glpi_networkports.id'              => ['<>', $_POST['networkports_id']],\n         \"$table.is_deleted\"                 => 0,\n         \"$table.is_template\"                => 0\n      ],\n      'ORDERBY'   => 'glpi_networkports.id'\n   ];\n   $iterator = $DB->request($criteria);\n\n   echo \"<br>\";\n\n   $values = [];\n   while ($data = $iterator->next()) {\n      // Device name + port name\n      $output = $output_long = $data['cname'];\n\n      if (!empty($data['nname'])) {\n         $output      = sprintf(__('%1$s - %2$s'), $output, $data['nname']);\n         //TRANS: %1$s is device name, %2$s is port name\n         $output_long = sprintf(__('%1$s - The port %2$s'), $output_long, $data['nname']);\n      }\n\n      // display netpoint (which will be copied)\n      if (!empty($data['npname'])) {\n         $output      = sprintf(__('%1$s - %2$s'), $output, $data['npname']);\n         //TRANS: %1$s is a string (device name - port name...), %2$s is network outlet name\n         $output_long = sprintf(__('%1$s - Network outlet %2$s'), $output_long, $data['npname']);\n      }\n      $ID = $data['did'];\n\n      if ($_SESSION[\"glpiis_ids_visible\"] || empty($output) || empty($output_long)) {\n         $output      = sprintf(__('%1$s (%2$s)'), $output, $ID);\n         $output_long = sprintf(__('%1$s (%2$s)'), $output_long, $ID);\n      }\n      $values[$ID] = $output_long;\n   }\n   Dropdown::showFromArray($_POST['myname'], $values, ['display_emptychoice' => true]);\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\n// Needed for signal handler\ndeclare(ticks = 1);\n\nuse Glpi\\Event;\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n * CronTask class\n */\nclass CronTask extends CommonDBTM{\n\n   // From CommonDBTM\n   public $dohistory                   = true;\n\n   // Specific ones\n   static private $lockname = '';\n   private $timer           = 0.0;\n   private $startlog        = 0;\n   private $volume          = 0;\n   static $rightname        = 'config';\n\n   // Class constant\n   const STATE_DISABLE = 0;\n   const STATE_WAITING = 1;\n   const STATE_RUNNING = 2;\n\n   const MODE_INTERNAL = 1;\n   const MODE_EXTERNAL = 2;\n\n\n   static function getForbiddenActionsForMenu() {\n      return ['add'];\n   }\n\n\n   function getForbiddenStandardMassiveAction() {\n\n      $forbidden   = parent::getForbiddenStandardMassiveAction();\n      $forbidden[] = 'delete';\n      $forbidden[] = 'purge';\n      $forbidden[] = 'restore';\n      return $forbidden;\n   }\n\n\n   static function getTypeName($nb = 0) {\n      return _n('Automatic action', 'Automatic actions', $nb);\n   }\n\n\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addDefaultFormTab($ong);\n      $this->addImpactTab($ong, $options);\n      $this->addStandardTab('CronTaskLog', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n\n      return $ong;\n   }\n\n\n   static function canDelete() {\n      return false;\n   }\n\n\n   function cleanDBonPurge() {\n\n      // CronTaskLog does not extends CommonDBConnexity\n      $ctl = new CronTaskLog();\n      $ctl->deleteByCriteria(['crontasks_id' => $this->fields['id']]);\n   }\n\n\n   /**\n    * Read a CronTask by its name\n    *\n    * Used by plugins to load its crontasks\n    *\n    * @param string $itemtype  itemtype of the crontask\n    * @param string $name      name of the task\n    *\n    * @return boolean true if succeed else false\n   **/\n   function getFromDBbyName($itemtype, $name) {\n\n      return $this->getFromDBByCrit([\n         $this->getTable() . '.name'      => $name,\n         $this->getTable() . '.itemtype'  => $itemtype\n      ]);\n   }\n\n\n   /**\n    * Give a task state\n    *\n    * @return integer 0 : task is enabled\n    *    if disable : 1: by config, 2: by system lock, 3: by plugin\n   **/\n   function isDisabled() {\n\n      if ($this->fields['state'] == self::STATE_DISABLE) {\n         return 1;\n      }\n\n      if (is_file(GLPI_CRON_DIR. '/all.lock')\n          || is_file(GLPI_CRON_DIR. '/'.$this->fields['name'].'.lock')) {\n         // Global lock\n         return 2;\n      }\n\n      if (!($tab = isPluginItemType($this->fields['itemtype']))) {\n         return 0;\n      }\n\n      // Plugin case\n      $plug = new Plugin();\n      if (!$plug->isActivated($tab[\"plugin\"])) {\n         return 3;\n      }\n      return 0;\n   }\n\n   /**\n    * Get all itemtypes used\n    *\n    * @return string[]\n   **/\n   static function getUsedItemtypes() {\n      global $DB;\n\n      $types= [];\n      $iterator = $DB->request([\n         'SELECT'          => 'itemtype',\n         'DISTINCT'        => true,\n         'FROM'            => 'glpi_crontasks'\n      ]);\n      while ($data = $iterator->next()) {\n         $types[] = $data['itemtype'];\n      }\n      return $types;\n   }\n\n   /**\n    * Signal handler callback\n    *\n    * @since 9.1\n    */\n   function signal($signo) {\n      if ($signo == SIGTERM) {\n         pcntl_signal(SIGTERM, SIG_DFL);\n\n         // End of this task\n         $this->end(null);\n\n         // End of this cron\n         $_SESSION[\"glpicronuserrunning\"]='';\n         self::release_lock();\n         Toolbox::logInFile('cron', __('Action aborted').\"\\n\");\n         exit;\n      }\n   }\n\n   /**\n    * Start a task, timer, stat, log, ...\n    *\n    * @return bool : true if ok (not start by another)\n   **/\n   function start() {\n      global $DB;\n\n      if (!isset($this->fields['id']) || ($DB->isSlave())) {\n         return false;\n      }\n\n      if (isCommandLine() && function_exists('pcntl_signal')) {\n         pcntl_signal(SIGTERM, [$this, 'signal']);\n      }\n\n      $result = $DB->update(\n         $this->getTable(), [\n            'state'  => self::STATE_RUNNING,\n            'lastrun'   => new \\QueryExpression('DATE_FORMAT(NOW(),\\'%Y-%m-%d %H:%i:00\\')')\n         ], [\n            'id'  => $this->fields['id'],\n            'NOT' => ['state' => self::STATE_RUNNING]\n         ]\n      );\n\n      if ($DB->affectedRows($result)>0) {\n         $this->timer  = microtime(true);\n         $this->volume = 0;\n         $log = new CronTaskLog();\n         // No gettext for log\n         $txt = sprintf('%1$s: %2$s', 'Run mode',\n                        $this->getModeName(isCommandLine() ? self::MODE_EXTERNAL\n                                                           : self::MODE_INTERNAL));\n\n         $this->startlog = $log->add(['crontasks_id'    => $this->fields['id'],\n                                           'date'            => $_SESSION['glpi_currenttime'],\n                                           'content'         => addslashes($txt),\n                                           'crontasklogs_id' => 0,\n                                           'state'           => CronTaskLog::STATE_START,\n                                           'volume'          => 0,\n                                           'elapsed'         => 0]);\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Set the currently proccessed volume of a running task\n    *\n    * @param $volume\n   **/\n   function setVolume($volume) {\n      $this->volume = $volume;\n   }\n\n\n   /**\n    * Increase the currently proccessed volume of a running task\n    *\n    * @param $volume\n   **/\n   function addVolume($volume) {\n      $this->volume += $volume;\n   }\n\n\n   /**\n    * Start a task, timer, stat, log, ...\n    *\n    * @param $retcode : <0 : need to run again, 0:nothing to do, >0:ok\n    *\n    * @return bool : true if ok (not start by another)\n   **/\n   function end($retcode) {\n      global $DB;\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n\n      $result = $DB->update(\n         $this->getTable(), [\n            'state'  => $this->fields['state']\n         ], [\n            'id'     => $this->fields['id'],\n            'state'  => self::STATE_RUNNING\n         ]\n      );\n\n      if ($DB->affectedRows($result) > 0) {\n         // No gettext for log but add gettext line to be parsed for pot generation\n         // order is important for insertion in english in the database\n         if (is_null($retcode)) {\n            $content = __('Action aborted');\n            $content = 'Action aborted';\n         } else if ($retcode < 0) {\n            $content = __('Action completed, partially processed');\n            $content = 'Action completed, partially processed';\n\n         } else if ($retcode > 0) {\n            $content = __('Action completed, fully processed');\n            $content = 'Action completed, fully processed';\n         } else {\n            $content = __('Action completed, no processing required');\n            $content = 'Action completed, no processing required';\n         }\n\n         $log = new CronTaskLog();\n         $log->add(['crontasks_id'    => $this->fields['id'],\n                         'date'            => $_SESSION['glpi_currenttime'],\n                         'content'         => $content,\n                         'crontasklogs_id' => $this->startlog,\n                         'state'           => CronTaskLog::STATE_STOP,\n                         'volume'          => $this->volume,\n                         'elapsed'         => (microtime(true)-$this->timer)]);\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Add a log message for a running task\n    *\n    * @param string $content\n   **/\n   function log($content) {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      $log     = new CronTaskLog();\n      $content = Toolbox::substr($content, 0, 200);\n      return $log->add(['crontasks_id'    => $this->fields['id'],\n                             'date'            => $_SESSION['glpi_currenttime'],\n                             'content'         => addslashes($content),\n                             'crontasklogs_id' => $this->startlog,\n                             'state'           => CronTaskLog::STATE_RUN,\n                             'volume'          => $this->volume,\n                             'elapsed'         => (microtime(true)-$this->timer)]);\n   }\n\n\n   /**\n    * read the first task which need to be run by cron\n    *\n    * @param integer $mode >0 retrieve task configured for this mode\n    *                      <0 retrieve task allowed for this mode (force, no time check)\n    * @param string $name  one specify action\n    *\n    * @return boolean false if no task to run\n   **/\n   function getNeedToRun($mode = 0, $name = '') {\n      global $DB;\n\n      $hour = date('H');\n      // First core ones\n      $WHERE = ['NOT' => ['itemtype' => ['LIKE', 'Plugin%']]];\n\n      // Only activated plugins\n      foreach (Plugin::getPlugins() as $plug) {\n         $WHERE = ['OR' => $WHERE + ['itemtype' => ['LIKE', \"Plugin$plug%\"]]];\n      }\n\n      if ($name) {\n         $WHERE['name'] = addslashes($name);\n      }\n\n      // In force mode\n      if ($mode < 0) {\n         $WHERE['state'] = ['!=', self::STATE_RUNNING];\n         $WHERE['allowmode'] = ['&', (int)$mode * -1];\n      } else {\n         $WHERE['state'] = self::STATE_WAITING;\n         if ($mode > 0) {\n            $WHERE['mode'] = $mode;\n         }\n\n         // Get system lock\n         if (is_file(GLPI_CRON_DIR. '/all.lock')) {\n            // Global lock\n            return false;\n         }\n         $locks = [];\n         foreach (glob(GLPI_CRON_DIR. '/*.lock') as $lock) {\n            $reg = [];\n            if (preg_match('!.*/(.*).lock$!', $lock, $reg)) {\n               $locks[] = $reg[1];\n            }\n         }\n         if (count($locks)) {\n            $WHERE[] = ['NOT' => ['name' => $locks]];\n         }\n\n         // Build query for frequency and allowed hour\n         $WHERE[] = ['OR' => [\n            ['AND' => [\n               ['hourmin'   => ['<', $DB->quoteName('hourmax')]],\n               'hourmin'   => ['<=', $hour],\n               'hourmax'   => ['>', $hour]\n            ]],\n            ['AND' => [\n               'hourmin'   => ['>', $DB->quoteName('hourmax')],\n               'OR'        => [\n                  'hourmin'   => ['<=', $hour],\n                  'hourmax'   => ['>', $hour]\n               ]\n            ]]\n         ]];\n         $WHERE[] = ['OR' => [\n            'lastrun'   => null,\n            new \\QueryExpression('unix_timestamp(' . $DB->quoteName('lastrun') . ') + ' . $DB->quoteName('frequency') . ' <= unix_timestamp(now())')\n         ]];\n      }\n\n      $iterator = $DB->request([\n         'SELECT' => [\n            '*',\n            new \\QueryExpression(\"LOCATE('Plugin', \" . $DB->quoteName('itemtype') . \") AS ISPLUGIN\")\n         ],\n         'FROM'   => $this->getTable(),\n         'WHERE'  => $WHERE,\n         // Core task before plugins\n         'ORDER'  => [\n            'ISPLUGIN',\n            new \\QueryExpression('unix_timestamp(' . $DB->quoteName('lastrun') . ')+' . $DB->quoteName('frequency') . '')\n         ]\n      ]);\n\n      if (count($iterator)) {\n         $this->fields = $iterator->next();\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Print the contact form\n    *\n    * @param integer $ID\n    * @param array   $options\n    *     - target filename : where to go when done.\n    *     - withtemplate boolean : template or basic item\n    *\n    * @return boolean\n   **/\n   function showForm($ID, $options = []) {\n      global $CFG_GLPI;\n\n      if (!Config::canView() || !$this->getFromDB($ID)) {\n         return false;\n      }\n      $options['candel'] = false;\n      $this->showFormHeader($options);\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Name').\"</td>\";\n      echo \"<td class ='b'>\";\n      $name = $this->fields[\"name\"];\n      if ($isplug = isPluginItemType($this->fields[\"itemtype\"])) {\n         $name = sprintf(__('%1$s - %2$s'), $isplug[\"plugin\"], $name);\n      }\n      echo $name.\"</td>\";\n      echo \"<td rowspan='6' class='middle right'>\".__('Comments').\"</td>\";\n      echo \"<td class='center middle' rowspan='6'>\";\n      echo \"<textarea cols='45' rows='8' name='comment' >\".$this->fields[\"comment\"].\"</textarea>\";\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Description').\"</td><td>\";\n      echo $this->getDescription($ID);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Run frequency').\"</td><td>\";\n      $this->dropdownFrequency('frequency', $this->fields[\"frequency\"]);\n      echo \"</td></tr>\";\n\n      $tmpstate = $this->fields[\"state\"];\n      echo \"<tr class='tab_bg_1'><td>\".__('Status').\"</td><td>\";\n      if (is_file(GLPI_CRON_DIR. '/'.$this->fields[\"name\"].'.lock')\n          || is_file(GLPI_CRON_DIR. '/all.lock')) {\n         echo \"<span class='b'>\" . __('System lock').\"</span><br>\";\n         $tmpstate = self::STATE_DISABLE;\n      }\n\n      if ($isplug) {\n         $plug = new Plugin();\n         if (!$plug->isActivated($isplug[\"plugin\"])) {\n            echo \"<span class='b'>\" . __('Disabled plugin').\"</span><br>\";\n            $tmpstate = self::STATE_DISABLE;\n         }\n      }\n\n      if ($this->fields[\"state\"] == self::STATE_RUNNING) {\n         echo \"<span class='b'>\" . $this->getStateName(self::STATE_RUNNING).\"</span>\";\n      } else {\n         self::dropdownState('state', $this->fields[\"state\"]);\n      }\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Run mode').\"</td><td>\";\n      $modes = [];\n      if ($this->fields['allowmode']&self::MODE_INTERNAL) {\n         $modes[self::MODE_INTERNAL] = self::getModeName(self::MODE_INTERNAL);\n      }\n      if ($this->fields['allowmode']&self::MODE_EXTERNAL) {\n         $modes[self::MODE_EXTERNAL] = self::getModeName(self::MODE_EXTERNAL);\n      }\n      Dropdown::showFromArray('mode', $modes, ['value' => $this->fields['mode']]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Run period').\"</td><td>\";\n      Dropdown::showNumber('hourmin', ['value' => $this->fields['hourmin'],\n                                            'min'   => 0,\n                                            'max'   => 24]);\n      echo \"&nbsp;->&nbsp;\";\n      Dropdown::showNumber('hourmax', ['value' => $this->fields['hourmax'],\n                                            'min'   => 0,\n                                            'max'   => 24]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Number of days this action logs are stored').\"</td><td>\";\n      Dropdown::showNumber('logs_lifetime', ['value' => $this->fields['logs_lifetime'],\n                                                  'min'   => 10,\n                                                  'max'   => 360,\n                                                  'step'  => 10,\n                                                  'toadd' => [0 => __('Infinite')]]);\n      echo \"</td><td>\".__('Last run').\"</td><td>\";\n\n      if (empty($this->fields['lastrun'])) {\n         echo __('Never');\n      } else {\n         echo Html::convDateTime($this->fields['lastrun']);\n         echo \"&nbsp;\";\n         Html::showSimpleForm(static::getFormURL(), 'resetdate', __('Blank'),\n                              ['id' => $ID], 'fa-times-circle');\n      }\n      echo \"</td></tr>\";\n\n      $label = $this->getParameterDescription();\n      echo \"<tr class='tab_bg_1'><td>\";\n      if (empty($label)) {\n         echo \"&nbsp;</td><td>&nbsp;\";\n      } else {\n         echo $label.\"&nbsp;</td><td>\";\n         Dropdown::showNumber('param', ['value' => $this->fields['param'],\n                                             'min'   => 0,\n                                             'max'   => 400]);\n      }\n      echo \"</td><td>\".__('Next run').\"</td><td>\";\n\n      if ($tmpstate == self::STATE_RUNNING) {\n         $launch = false;\n      } else {\n         $launch = $this->fields['allowmode']&self::MODE_INTERNAL;\n      }\n\n      if ($tmpstate != self::STATE_WAITING) {\n         echo $this->getStateName($tmpstate);\n      } else if (empty($this->fields['lastrun'])) {\n         echo __('As soon as possible');\n      } else {\n         $next = strtotime($this->fields['lastrun'])+$this->fields['frequency'];\n         $h    = date('H', $next);\n         $deb  = ($this->fields['hourmin'] < 10 ? \"0\".$this->fields['hourmin']\n                                                : $this->fields['hourmin']);\n         $fin  = ($this->fields['hourmax'] < 10 ? \"0\".$this->fields['hourmax']\n                                                : $this->fields['hourmax']);\n\n         if (($deb < $fin)\n             && ($h < $deb)) {\n            $disp = date('Y-m-d', $next). \" $deb:00:00\";\n            $next = strtotime($disp);\n         } else if (($deb < $fin)\n                    && ($h >= $this->fields['hourmax'])) {\n            $disp = date('Y-m-d', $next+DAY_TIMESTAMP). \" $deb:00:00\";\n            $next = strtotime($disp);\n         }\n\n         if (($deb > $fin)\n             && ($h < $deb)\n             && ($h >= $fin)) {\n            $disp = date('Y-m-d', $next). \" $deb:00:00\";\n            $next = strtotime($disp);\n         } else {\n            $disp = date(\"Y-m-d H:i:s\", $next);\n         }\n\n         if ($next < time()) {\n            echo __('As soon as possible').'<br>('.Html::convDateTime($disp).') ';\n         } else {\n            echo Html::convDateTime($disp);\n         }\n      }\n\n      if (isset($CFG_GLPI['maintenance_mode']) && $CFG_GLPI['maintenance_mode']) {\n         echo \"<div class='warning'>\".\n              __('Maintenance mode enabled, running tasks is disabled').\n              \"</div>\";\n      } else if ($launch) {\n         echo \"&nbsp;\";\n         Html::showSimpleForm(static::getFormURL(), ['execute' => $this->fields['name']],\n                              __('Execute'));\n      }\n      if ($tmpstate == self::STATE_RUNNING) {\n         Html::showSimpleForm(static::getFormURL(), 'resetstate', __('Blank'),\n                              ['id' => $ID], 'fa-times-circle');\n      }\n      echo \"</td></tr>\";\n\n      $this->showFormButtons($options);\n\n      return true;\n   }\n\n\n   /**\n    * reset the next launch date => for a launch as soon as possible\n   **/\n   function resetDate () {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      return $this->update(['id'      => $this->fields['id'],\n                                 'lastrun' => 'NULL']);\n   }\n\n\n   /**\n    * reset the current state\n   **/\n   function resetState () {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      return $this->update(['id'    => $this->fields['id'],\n                                 'state' => self::STATE_WAITING]);\n   }\n\n\n   /**\n    * Translate task description\n    *\n    * @param $id integer ID of the crontask\n    *\n    * @return string\n   **/\n   public function getDescription($id) {\n\n      if (!isset($this->fields['id']) || ($this->fields['id'] != $id)) {\n         $this->getFromDB($id);\n      }\n\n      $hook = [$this->fields['itemtype'], 'cronInfo'];\n      if (is_callable($hook)) {\n         $info = call_user_func($hook, $this->fields['name']);\n      } else {\n         $info = false;\n      }\n\n      if (isset($info['description'])) {\n         return $info['description'];\n      }\n\n      return $this->fields['name'];\n   }\n\n\n   /**\n    * Translate task parameter description\n    *\n    * @return string\n   **/\n   public function getParameterDescription() {\n\n      $hook = [$this->fields['itemtype'], 'cronInfo'];\n\n      if (is_callable($hook)) {\n         $info = call_user_func($hook, $this->fields['name']);\n      } else {\n         $info = false;\n      }\n\n      if (isset($info['parameter'])) {\n         return $info['parameter'];\n      }\n\n      return '';\n   }\n\n\n   /**\n    * Translate state to string\n    *\n    * @param $state integer\n    *\n    * @return string\n   **/\n   static public function getStateName($state) {\n\n      switch ($state) {\n         case self::STATE_RUNNING :\n            return __('Running');\n\n         case self::STATE_WAITING :\n            return __('Scheduled');\n\n         case self::STATE_DISABLE :\n            return __('Disabled');\n      }\n\n      return '???';\n   }\n\n\n   /**\n    * Dropdown of state\n    *\n    * @param string  $name     select name\n    * @param integer $value    default value\n    * @param boolean $display  display or get string\n    *\n    * @return string|integer HTML output, or random part of dropdown ID.\n   **/\n   static function dropdownState($name, $value = 0, $display = true) {\n\n      return Dropdown::showFromArray($name,\n                                     [self::STATE_DISABLE => __('Disabled'),\n                                           self::STATE_WAITING => __('Scheduled')],\n                                     ['value'   => $value,\n                                           'display' => $display]);\n   }\n\n\n   /**\n    * Translate Mode to string\n    *\n    * @param $mode integer\n    *\n    * @return string\n   **/\n   static public function getModeName($mode) {\n\n      switch ($mode) {\n         case self::MODE_INTERNAL :\n            return __('GLPI');\n\n         case self::MODE_EXTERNAL :\n            return __('CLI');\n      }\n\n      return '???';\n   }\n\n\n   /**\n    * Get a global database lock for cron\n    *\n    * @return Boolean\n   **/\n   static private function get_lock() {\n      global $DB;\n\n      // Changer de nom toutes les heures en cas de blocage MySQL (ca arrive)\n      $nom = \"glpicron.\" . intval(time()/HOUR_TIMESTAMP-340000);\n\n      if ($DB->getLock($nom)) {\n         self::$lockname = $nom;\n         return true;\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Release the global database lock\n   **/\n   static private function release_lock() {\n      global $DB;\n\n      if (self::$lockname) {\n         $DB->releaseLock(self::$lockname);\n         self::$lockname = '';\n      }\n   }\n\n\n   /**\n    * Launch the need cron tasks\n    *\n    * @param integer $mode   (internal/external, <0 to force)\n    * @param integer $max    number of task to launch\n    * @param string  $name   name of task to run\n    *\n    * @return string|boolean the name of last task launched, or false if execution not available\n   **/\n   static public function launch($mode, $max = 1, $name = '') {\n      global $CFG_GLPI;\n\n      // No cron in maintenance mode\n      if (isset($CFG_GLPI['maintenance_mode']) && $CFG_GLPI['maintenance_mode']) {\n         Toolbox::logInFile('cron', __('Maintenance mode enabled, running tasks is disabled').\"\\n\");\n         return false;\n      }\n\n      $crontask = new self();\n      $taskname = '';\n      if (abs($mode) == self::MODE_EXTERNAL) {\n         // If cron is launched in command line, and if memory is insufficient,\n         // display a warning in the logs\n         if (Toolbox::checkMemoryLimit() == 2) {\n            Toolbox::logInFile('cron', __('A minimum of 64 Mio is commonly required for GLPI.').\"\\n\");\n         }\n         // If no task in CLI mode, call cron.php from command line is not really usefull ;)\n         if (!countElementsInTable($crontask->getTable(), ['mode' => abs($mode)])) {\n            Toolbox::logInFile('cron',\n                               __('No task with Run mode = CLI, fix your tasks configuration').\"\\n\");\n         }\n      }\n\n      if (self::get_lock()) {\n         for ($i=1; $i<=$max; $i++) {\n            $prefix = (abs($mode) == self::MODE_EXTERNAL ? __('External')\n                                                         : __('Internal'));\n            if ($crontask->getNeedToRun($mode, $name)) {\n               $_SESSION[\"glpicronuserrunning\"] = \"cron_\".$crontask->fields['name'];\n\n               if ($plug = isPluginItemType($crontask->fields['itemtype'])) {\n                  Plugin::load($plug['plugin'], true);\n               }\n               $fonction = [$crontask->fields['itemtype'],\n                                 'cron' . $crontask->fields['name']];\n\n               if (is_callable($fonction)) {\n                  if ($crontask->start()) { // Lock in DB + log start\n                     $taskname = $crontask->fields['name'];\n                     //TRANS: %1$s is mode (external or internal), %2$s is an order number,\n                     $msgcron = sprintf(__('%1$s #%2$s'), $prefix, $i);\n                     $msgcron = sprintf(__('%1$s: %2$s'), $msgcron,\n                                        sprintf(__('%1$s %2$s').\"\\n\",\n                                                __('Launch'), $crontask->fields['name']));\n                     Toolbox::logInFile('cron', $msgcron);\n                     $retcode = call_user_func($fonction, $crontask);\n                     $crontask->end($retcode); // Unlock in DB + log end\n                  } else {\n                     $msgcron = sprintf(__('%1$s #%2$s'), $prefix, $i);\n                     $msgcron = sprintf(__('%1$s: %2$s'), $msgcron,\n                                        sprintf(__('%1$s %2$s').\"\\n\",\n                                                __(\"Can't start\"), $crontask->fields['name']));\n                     Toolbox::logInFile('cron', $msgcron);\n                  }\n\n               } else {\n                  if (is_array($fonction)) {\n                     $fonction = implode('::', $fonction);\n                  }\n                  Toolbox::logInFile('php-errors',\n                                     sprintf(__('Undefined function %s (for cron)').\"\\n\",\n                                             $fonction));\n                  $msgcron = sprintf(__('%1$s #%2$s'), $prefix, $i);\n                  $msgcron = sprintf(__('%1$s: %2$s'), $msgcron,\n                                     sprintf(__('%1$s %2$s').\"\\n\",\n                                             __(\"Can't start\"), $crontask->fields['name']));\n                  Toolbox::logInFile('cron', $msgcron .\"\\n\".\n                                             sprintf(__('Undefined function %s (for cron)').\"\\n\",\n                                                     $fonction));\n               }\n\n            } else if ($i==1) {\n               $msgcron = sprintf(__('%1$s #%2$s'), $prefix, $i);\n               $msgcron = sprintf(__('%1$s: %2$s'), $msgcron, __('Nothing to launch'));\n               Toolbox::logInFile('cron', $msgcron.\"\\n\");\n            }\n         } // end for\n         $_SESSION[\"glpicronuserrunning\"]='';\n         self::release_lock();\n\n      } else {\n         Toolbox::logInFile('cron', __(\"Can't get DB lock\").\"\\n\");\n      }\n\n      return $taskname;\n   }\n\n\n   /**\n    * Register new task for plugin (called by plugin during install)\n    *\n    * @param string  $itemtype  itemtype of the plugin object\n    * @param string  $name      task name\n    * @param integer $frequency execution frequency\n    * @param array   $options   optional options\n    *       (state, mode, allowmode, hourmin, hourmax, logs_lifetime, param, comment)\n    *\n    * @return boolean\n   **/\n   static public function register($itemtype, $name, $frequency, $options = []) {\n\n      // Check that hook exists\n      if (!isPluginItemType($itemtype) && !class_exists($itemtype)) {\n         return false;\n      }\n\n      // manage NS class\n      $itemtype = addslashes($itemtype);\n\n      $temp = new self();\n      // Avoid duplicate entry\n      if ($temp->getFromDBbyName($itemtype, $name)) {\n         return false;\n      }\n      $input = [\n         'itemtype'  => $itemtype,\n         'name'      => $name,\n         'allowmode' => self::MODE_INTERNAL | self::MODE_EXTERNAL,\n         'frequency' => $frequency\n      ];\n\n      foreach (['allowmode', 'comment', 'hourmax', 'hourmin', 'logs_lifetime', 'mode',\n                     'param', 'state'] as $key) {\n         if (isset($options[$key])) {\n            $input[$key] = $options[$key];\n         }\n      }\n      if (defined('GLPI_SYSTEM_CRON')\n          && ($input['allowmode'] & self::MODE_EXTERNAL)\n          && !isset($input['mode'])) {\n         // Downstream packages may provide a good system cron\n         $input['mode'] = self::MODE_EXTERNAL;\n      }\n      return $temp->add($input);\n   }\n\n\n   /**\n    * Unregister tasks for a plugin (call by glpi after uninstall)\n    *\n    * @param $plugin : name of the plugin\n    *\n    * @return bool for success\n   **/\n   static public function unregister($plugin) {\n      global $DB;\n\n      if (empty($plugin)) {\n         return false;\n      }\n      $temp = new CronTask();\n      $ret  = true;\n\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => ['itemtype' => ['LIKE', \"Plugin$plugin%\"]]\n      ]);\n\n      while ($data = $iterator->next()) {\n         if (!$temp->delete($data)) {\n            $ret = false;\n         }\n      }\n\n      return $ret;\n   }\n\n\n   /**\n    * Display statistics of a task\n    *\n    * @return void\n   **/\n   function showStatistics() {\n      global $DB;\n\n      echo \"<br><div class='center'>\";\n      echo \"<table class='tab_cadre'>\";\n      echo \"<tr><th colspan='2'>&nbsp;\".__('Statistics').\"</th></tr>\\n\";\n\n      $nbstart = countElementsInTable('glpi_crontasklogs',\n                                      ['crontasks_id' => $this->fields['id'],\n                                       'state'        => CronTaskLog::STATE_START ]);\n      $nbstop  = countElementsInTable('glpi_crontasklogs',\n                                      ['crontasks_id' => $this->fields['id'],\n                                       'state'        => CronTaskLog::STATE_STOP ]);\n\n      echo \"<tr class='tab_bg_2'><td>\".__('Run count').\"</td><td class='right'>\";\n      if ($nbstart == $nbstop) {\n         echo $nbstart;\n      } else {\n         // This should not appen => task crash ?\n         //TRANS: %s is the number of starts\n         printf(_n('%s start', '%s starts', $nbstart), $nbstart);\n         echo \"<br>\";\n         //TRANS: %s is the number of stops\n         printf(_n('%s stop', '%s stops', $nbstop), $nbstop);\n      }\n      echo \"</td></tr>\";\n\n      if ($nbstop) {\n         $data = $DB->request([\n            'SELECT' => [\n               'MIN' => [\n                  'date AS datemin',\n                  'elapsed AS elapsedmin',\n                  'volume AS volmin'\n               ],\n               'MAX' => [\n                  'elapsed AS elapsedmax',\n                  'volume AS volmax'\n               ],\n               'SUM' => [\n                  'elapsed AS elapsedtot',\n                  'volume AS voltot'\n               ],\n               'AVG' => [\n                  'elapsed AS elapsedavg',\n                  'volume AS volavg'\n               ]\n            ],\n            'FROM'   => CronTaskLog::getTable(),\n            'WHERE'  => [\n               'crontasks_id' => $this->fields['id'],\n               'state'        => CronTaskLog::STATE_STOP\n            ]\n         ])->next();\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Start date').\"</td>\";\n         echo \"<td class='right'>\".Html::convDateTime($data['datemin']).\"</td></tr>\";\n\n         echo \"<tr class='tab_bg_2'><td>\".__('Minimal time').\"</td>\";\n         echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds', $data['elapsedmin']),\n                                             number_format($data['elapsedmin'], 2));\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Maximal time').\"</td>\";\n         echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds', $data['elapsedmax']),\n                                             number_format($data['elapsedmax'], 2));\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_2'><td>\".__('Average time').\"</td>\";\n         echo \"<td class='right b'>\".sprintf(_n('%s second', '%s seconds', $data['elapsedavg']),\n                                             number_format($data['elapsedavg'], 2));\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Total duration').\"</td>\";\n         echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds', $data['elapsedtot']),\n                                             number_format($data['elapsedtot'], 2));\n         echo \"</td></tr>\";\n\n         if ($data['voltot'] > 0) {\n            echo \"<tr class='tab_bg_2'><td>\".__('Minimal count').\"</td>\";\n            echo \"<td class='right'>\".sprintf(_n('%s item', '%s items', $data['volmin']),\n                                              $data['volmin']).\"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\".__('Maximal count').\"</td>\";\n            echo \"<td class='right'>\".sprintf(_n('%s item', '%s items', $data['volmax']),\n                                              $data['volmax']).\"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td>\".__('Average count').\"</td>\";\n            echo \"<td class='right b'>\".sprintf(_n('%s item', '%s items', $data['volavg']),\n                                                number_format($data['volavg'], 2)).\n                 \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\".__('Total count').\"</td>\";\n            echo \"<td class='right'>\". sprintf(_n('%s item', '%s items', $data['voltot']),\n                                               $data['voltot']).\"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td>\".__('Average speed').\"</td>\";\n            echo \"<td class='left'>\".sprintf(__('%s items/sec'),\n                                             number_format($data['voltot']/$data['elapsedtot'], 2));\n            echo \"</td></tr>\";\n         }\n      }\n      echo \"</table></div>\";\n   }\n\n\n   /**\n    * Display list of a runned tasks\n    *\n    * @return void\n   **/\n   function showHistory() {\n      global $DB;\n\n      if (isset($_GET[\"crontasklogs_id\"]) && $_GET[\"crontasklogs_id\"]) {\n         return $this->showHistoryDetail($_GET[\"crontasklogs_id\"]);\n      }\n\n      if (isset($_GET[\"start\"])) {\n         $start = $_GET[\"start\"];\n      } else {\n         $start = 0;\n      }\n\n      // Total Number of events\n      $number = countElementsInTable('glpi_crontasklogs',\n                                     ['crontasks_id' => $this->fields['id'],\n                                      'state'        => CronTaskLog::STATE_STOP ]);\n\n      echo \"<br><div class='center'>\";\n      if ($number < 1) {\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr><th>\".__('No item found').\"</th></tr>\";\n         echo \"</table>\";\n         echo \"</div>\";\n         return;\n      }\n\n      // Display the pager\n      Html::printAjaxPager(__('Last run list'), $start, $number);\n\n      $iterator = $DB->request([\n         'FROM'   => 'glpi_crontasklogs',\n         'WHERE'  => [\n            'crontasks_id' => $this->fields['id'],\n            'state'        => CronTaskLog::STATE_STOP\n         ],\n         'ORDER'  => 'id DESC',\n         'START'  => (int)$start,\n         'LIMIT'  => (int)$_SESSION['glpilist_limit']\n      ]);\n\n      if (count($iterator)) {\n         echo \"<table class='tab_cadrehov'>\";\n         $header = \"<tr>\";\n         $header .= \"<th>\"._n('Date', 'Dates', 1).\"</th>\";\n         $header .= \"<th>\".__('Total duration').\"</th>\";\n         $header .= \"<th>\"._x('quantity', 'Number').\"</th>\";\n         $header .= \"<th>\".__('Description').\"</th>\";\n         $header .= \"</tr>\\n\";\n         echo $header;\n\n         while ($data = $iterator->next()) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td><a href='javascript:reloadTab(\\\"crontasklogs_id=\".\n                        $data['crontasklogs_id'].\"\\\");'>\".Html::convDateTime($data['date']).\n                  \"</a></td>\";\n            echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds',\n                                                   intval($data['elapsed'])),\n                                                number_format($data['elapsed'], 3)).\n                  \"&nbsp;&nbsp;&nbsp;</td>\";\n            echo \"<td class='numeric'>\".$data['volume'].\"</td>\";\n            // Use gettext to display\n            echo \"<td>\".__($data['content']).\"</td>\";\n            echo \"</tr>\\n\";\n         }\n         echo $header;\n         echo \"</table>\";\n\n      } else { // Not found\n         echo __('No item found');\n      }\n      Html::printAjaxPager(__('Last run list'), $start, $number);\n\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Display detail of a runned task\n    *\n    * @param $logid : crontasklogs_id\n    *\n    * @return void\n   **/\n   function showHistoryDetail($logid) {\n      global $DB;\n\n      echo \"<br><div class='center'>\";\n      echo \"<p><a href='javascript:reloadTab(\\\"crontasklogs_id=0\\\");'>\".__('Last run list').\"</a>\".\n           \"</p>\";\n\n      $iterator = $DB->request([\n         'FROM'   => 'glpi_crontasklogs',\n         'WHERE'  => [\n            'OR' => [\n               'id'              => $logid,\n               'crontasklogs_id' => $logid\n            ]\n         ],\n         'ORDER'  => 'id ASC'\n      ]);\n\n      if (count($iterator)) {\n         echo \"<table class='tab_cadrehov'><tr>\";\n         echo \"<th>\"._n('Date', 'Dates', 1).\"</th>\";\n         echo \"<th>\".__('Status').\"</th>\";\n         echo \"<th>\". __('Duration').\"</th>\";\n         echo \"<th>\"._x('quantity', 'Number').\"</th>\";\n         echo \"<th>\".__('Description').\"</th>\";\n         echo \"</tr>\\n\";\n\n         $first = true;\n         while ($data = $iterator->next()) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td class='center'>\".($first ? Html::convDateTime($data['date'])\n                                                : \"&nbsp;\").\"</a></td>\";\n            $content = $data['content'];\n            switch ($data['state']) {\n               case CronTaskLog::STATE_START :\n                  echo \"<td>\".__('Start').\"</td>\";\n                  // Pass content to gettext\n                  // implode (Run mode: XXX)\n                  $list = explode(':', $data['content']);\n                  if (count($list)==2) {\n                     $content = sprintf('%1$s: %2$s', __($list[0]), $list[1]);\n                  }\n                  break;\n\n               case CronTaskLog::STATE_STOP :\n                  echo \"<td>\".__('End').\"</td>\";\n                  // Pass content to gettext\n                  $content = __($data['content']);\n                  break;\n\n               default :\n                  echo \"<td>\".__('Running').\"</td>\";\n                  // Pass content to gettext\n                  $content = __($data['content']);\n            }\n\n            echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds',\n                                                   intval($data['elapsed'])),\n                                                number_format($data['elapsed'], 3)).\n                  \"&nbsp;&nbsp;</td>\";\n            echo \"<td class='numeric'>\".$data['volume'].\"</td>\";\n\n            echo \"<td>\".$content.\"</td>\";\n            echo \"</tr>\\n\";\n            $first = false;\n         };\n\n         echo \"</table>\";\n\n      } else { // Not found\n         echo __('No item found');\n      }\n\n      echo \"</div>\";\n   }\n\n\n   /**\n    * @since 0.84\n    *\n    * @param $field\n    * @param $name               (default '')\n    * @param $values             (default '')\n    * @param $options      array\n   **/\n   static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      $options['display'] = 0;\n      switch ($field) {\n         case 'mode':\n            $options['value']         = $values[$field];\n            $tab = [\n               self::MODE_INTERNAL => self::getModeName(self::MODE_INTERNAL),\n               self::MODE_EXTERNAL => self::getModeName(self::MODE_EXTERNAL),\n            ];\n            return Dropdown::showFromArray($name, $tab, $options);\n\n         case 'state' :\n            return CronTask::dropdownState($name, $values[$field], false);\n      }\n\n      return parent::getSpecificValueToSelect($field, $name, $values, $options);\n   }\n\n\n   static function getSpecificValueToDisplay($field, $values, array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      switch ($field) {\n         case 'mode':\n            return self::getModeName($values[$field]);\n\n         case 'state':\n            return self::getStateName($values[$field]);\n      }\n      return parent::getSpecificValueToDisplay($field, $values, $options);\n   }\n\n\n   function getSpecificMassiveActions($checkitem = null) {\n\n      $isadmin = static::canUpdate();\n      $actions = parent::getSpecificMassiveActions($checkitem);\n\n      if ($isadmin) {\n         $actions[__CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR.'reset'] = __('Reset last run');\n      }\n      return $actions;\n   }\n\n\n   static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item,\n                                                       array $ids) {\n\n      switch ($ma->getAction()) {\n         case 'reset' :\n            if (Config::canUpdate()) {\n               foreach ($ids as $key) {\n                  if ($item->getFromDB($key)) {\n                     if ($item->resetDate()) {\n                        $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                     } else {\n                        $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_KO);\n                        $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                     }\n                  } else {\n                     $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_KO);\n                     $ma->addMessage($item->getErrorMessage(ERROR_NOT_FOUND));\n                  }\n               }\n            } else {\n               $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_NORIGHT);\n               $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n            }\n            return;\n      }\n      parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n   }\n\n\n   function rawSearchOptions() {\n      global $DB;\n\n      $tab = [];\n\n      $tab[] = [\n         'id'                 => 'common',\n         'name'               => __('Characteristics')\n      ];\n\n      $tab[] = [\n         'id'                 => '1',\n         'table'              => $this->getTable(),\n         'field'              => 'name',\n         'name'               => __('Name'),\n         'datatype'           => 'itemlink',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '2',\n         'table'              => $this->getTable(),\n         'field'              => 'id',\n         'name'               => __('ID'),\n         'massiveaction'      => false,\n         'datatype'           => 'number'\n      ];\n\n      $tab[] = [\n         'id'                 => '3',\n         'table'              => $this->getTable(),\n         'field'              => 'description',\n         'name'               => __('Description'),\n         'nosearch'           => true,\n         'nosort'             => true,\n         'massiveaction'      => false,\n         'datatype'           => 'text',\n         'computation'        => $DB->quoteName('TABLE.id') // Virtual data\n      ];\n\n      $tab[] = [\n         'id'                 => '4',\n         'table'              => $this->getTable(),\n         'field'              => 'state',\n         'name'               => __('Status'),\n         'searchtype'         => ['equals', 'notequals'],\n         'datatype'           => 'specific'\n      ];\n\n      $tab[] = [\n         'id'                 => '5',\n         'table'              => $this->getTable(),\n         'field'              => 'mode',\n         'name'               => __('Run mode'),\n         'datatype'           => 'specific',\n         'searchtype'         => ['equals', 'notequals']\n      ];\n\n      $tab[] = [\n         'id'                 => '6',\n         'table'              => $this->getTable(),\n         'field'              => 'frequency',\n         'name'               => __('Run frequency'),\n         'datatype'           => 'timestamp',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '7',\n         'table'              => $this->getTable(),\n         'field'              => 'lastrun',\n         'name'               => __('Last run'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '8',\n         'table'              => $this->getTable(),\n         'field'              => 'itemtype',\n         'name'               => __('Item type'),\n         'massiveaction'      => false,\n         'datatype'           => 'itemtypename',\n         'types'              => self::getUsedItemtypes()\n      ];\n\n      $tab[] = [\n         'id'                 => '16',\n         'table'              => $this->getTable(),\n         'field'              => 'comment',\n         'name'               => __('Comments'),\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '17',\n         'table'              => $this->getTable(),\n         'field'              => 'hourmin',\n         'name'               => __('Begin hour of run period'),\n         'datatype'           => 'integer',\n         'min'                => 0,\n         'max'                => 24\n      ];\n\n      $tab[] = [\n         'id'                 => '18',\n         'table'              => $this->getTable(),\n         'field'              => 'hourmax',\n         'name'               => __('End hour of run period'),\n         'datatype'           => 'integer',\n         'min'                => 0,\n         'max'                => 24\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => $this->getTable(),\n         'field'              => 'logs_lifetime',\n         'name'               => __('Number of days this action logs are stored'),\n         'datatype'           => 'integer',\n         'min'                => 10,\n         'max'                => 360,\n         'step'               => 10,\n         'toadd'              => [\n            '0'                  => 'Infinite'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '20',\n         'table'              => $this->getTable(),\n         'field'              => 'date_mod',\n         'name'               => __('Last update'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '121',\n         'table'              => $this->getTable(),\n         'field'              => 'date_creation',\n         'name'               => __('Creation date'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      return $tab;\n   }\n\n\n   /**\n    * Garbage collector for expired file session\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronSession(CronTask $task) {\n\n      // max time to keep the file session\n      $maxlifetime = ini_get('session.gc_maxlifetime');\n      if ($maxlifetime == 0) {\n         $maxlifetime = WEEK_TIMESTAMP;\n      }\n      $nb = 0;\n      foreach (glob(GLPI_SESSION_DIR.\"/sess_*\") as $filename) {\n         if ((filemtime($filename) + $maxlifetime) < time()) {\n            // Delete session file if not delete before\n            if (@unlink($filename)) {\n               $nb++;\n            }\n         }\n      }\n\n      $task->setVolume($nb);\n      if ($nb) {\n         //TRANS: % %1$d is a number, %2$s is a number of seconds\n         $task->log(sprintf(_n('Clean %1$d session file created since more than %2$s seconds',\n                               'Clean %1$d session files created since more than %2$s seconds',\n                               $nb).\"\\n\",\n                            $nb, $maxlifetime));\n         return 1;\n      }\n\n      return 0;\n   }\n\n\n   /**\n    * Circular logs\n    *\n    * @since 0.85\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronCircularlogs(CronTask $task) {\n\n      $actionCode = 0; // by default\n      $error      = false;\n      $task->setVolume(0); // start with zero\n\n      // compute date in the past for the archived log to be deleted\n      $firstdate = date(\"Ymd\", time() - ($task->fields['param'] * DAY_TIMESTAMP)); // compute current date - param as days and format it like YYYYMMDD\n\n      // first look for bak to delete\n      $dir       = GLPI_LOG_DIR.\"/*.bak\";\n      $findfiles = glob($dir);\n      foreach ($findfiles as $file) {\n         $shortfile = str_replace(GLPI_LOG_DIR.'/', '', $file);\n         // now depending on the format of the name we delete the file (for aging archives) or rename it (will add Ymd.log to the end of the file)\n         $match = null;\n         if (preg_match('/.+[.]log[.](\\\\d{8})[.]bak$/', $file, $match) > 0) {\n            if ($match[1] < $firstdate) {\n               $task->addVolume(1);\n               if (unlink($file)) {\n                  $task->log(sprintf(__('Deletion of archived log file: %s'), $shortfile));\n                  $actionCode = 1;\n               } else {\n                  $task->log(sprintf(__('Unable to delete archived log file: %s'), $shortfile));\n                  $error = true;\n               }\n            }\n         }\n      }\n\n      // second look for log to archive\n      $dir       = GLPI_LOG_DIR.\"/*.log\";\n      $findfiles = glob($dir);\n      foreach ($findfiles as $file) {\n         $shortfile    = str_replace(GLPI_LOG_DIR.'/', '', $file);\n         // rename the file\n         $newfilename  = $file.\".\".date(\"Ymd\", time()).\".bak\"; // will add to filename a string with format YYYYMMDD (= current date)\n         $shortnewfile = str_replace(GLPI_LOG_DIR.'/', '', $newfilename);\n\n         $task->addVolume(1);\n         if (!file_exists($newfilename) && rename($file, $newfilename)) {\n            $task->log(sprintf(__('Archiving log file: %1$s to %2$s'), $shortfile, $shortnewfile));\n            $actionCode = 1;\n         } else {\n            $task->log(sprintf(__('Unable to archive log file: %1$s. %2$s already exists. Wait till next day.'),\n                                 $shortfile, $shortnewfile));\n            $error = true;\n         }\n      }\n\n      if ($error) {\n         return -1;\n      }\n      return $actionCode;\n   }\n\n\n   /**\n    * Garbage collector for cleaning graph files\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronGraph(CronTask $task) {\n\n      // max time to keep the file session\n      $maxlifetime = HOUR_TIMESTAMP;\n      $nb          = 0;\n      foreach (glob(GLPI_GRAPH_DIR.\"/*\") as $filename) {\n         if (basename($filename) == \"remove.txt\" && is_dir(GLPI_ROOT.'/.git')) {\n            continue;\n         }\n         if ((filemtime($filename) + $maxlifetime) < time()) {\n            if (@unlink($filename)) {\n               $nb++;\n            }\n         }\n      }\n\n      $task->setVolume($nb);\n      if ($nb) {\n         $task->log(sprintf(_n('Clean %1$d graph file created since more than %2$s seconds',\n                               'Clean %1$d graph files created since more than %2$s seconds',\n                               $nb).\"\\n\",\n                            $nb, $maxlifetime));\n         return 1;\n      }\n\n      return 0;\n   }\n\n   /**\n    * Garbage collector for cleaning tmp files\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronTemp(CronTask $task) {\n\n      // max time to keep the file session\n      $maxlifetime = HOUR_TIMESTAMP;\n      $nb          = 0;\n      foreach (glob(GLPI_TMP_DIR.\"/*\") as $filename) {\n         if (basename($filename) == \"remove.txt\" && is_dir(GLPI_ROOT.'/.git')) {\n            continue;\n         }\n         if (is_file($filename) && is_writable($filename)\n             && (filemtime($filename) + $maxlifetime) < time()) {\n            if (@unlink($filename)) {\n               $nb++;\n            }\n         }\n      }\n\n      $task->setVolume($nb);\n      if ($nb) {\n         $task->log(sprintf(_n('Clean %1$d temporary file created since more than %2$s seconds',\n                               'Clean %1$d temporary files created since more than %2$s seconds',\n                               $nb).\"\\n\",\n                            $nb, $maxlifetime));\n         return 1;\n      }\n\n      return 0;\n   }\n\n   /**\n    * Clean log cron function\n    *\n    * @param CronTask $task\n    *\n    * @return integer\n   **/\n   static function cronLogs($task) {\n      global $DB;\n\n      $vol = 0;\n\n      // Expire Event Log\n      if ($task->fields['param'] > 0) {\n         $vol += Event::cleanOld($task->fields['param']);\n      }\n\n      foreach ($DB->request('glpi_crontasks') as $data) {\n         if ($data['logs_lifetime']>0) {\n            $vol += CronTaskLog::cleanOld($data['id'], $data['logs_lifetime']);\n         }\n      }\n      $task->setVolume($vol);\n      return ($vol > 0 ? 1 : 0);\n   }\n\n\n   /**\n    * Cron job to check if a new version is available\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronCheckUpdate($task) {\n\n      $result = Toolbox::checkNewVersionAvailable();\n      $task->log($result);\n\n      return 1;\n   }\n\n\n   /**\n    * Check zombie crontask\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronWatcher($task) {\n      global $DB;\n\n      // CronTasks running for more than 1 hour or 2 frequency\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'state'  => self::STATE_RUNNING,\n            'OR'     => [\n               new \\QueryExpression('unix_timestamp('.$DB->quoteName('lastrun').') + 2 * '.$DB->quoteName('frequency').' < unix_timestamp(now())'),\n               new \\QueryExpression('unix_timestamp('.$DB->quoteName('lastrun').') + 2 * '.HOUR_TIMESTAMP.' < unix_timestamp(now())')\n            ]\n         ]\n      ]);\n      $crontasks = [];\n      while ($data = $iterator->next()) {\n         $crontasks[$data['id']] = $data;\n      }\n\n      if (count($crontasks)) {\n         $task = new self();\n         $task->getFromDBByCrit(['itemtype' => 'CronTask', 'name' => 'watcher']);\n         if (NotificationEvent::raiseEvent(\"alert\", $task, ['items' => $crontasks])) {\n            $task->addVolume(1);\n         }\n         QueuedNotification::forceSendFor($task->getType(), $task->fields['id']);\n      }\n\n      return 1;\n   }\n\n\n   /**\n    * get Cron description parameter for this class\n    *\n    * @param $name string name of the task\n    *\n    * @return array of string\n   **/\n   static function cronInfo($name) {\n\n      switch ($name) {\n         case 'checkupdate' :\n            return ['description' => __('Check for new updates')];\n\n         case 'logs' :\n            return ['description' => __('Clean old logs'),\n                         'parameter'\n                           => __('System logs retention period (in days, 0 for infinite)')];\n\n         case 'session' :\n            return ['description' => __('Clean expired sessions')];\n\n         case 'graph' :\n            return ['description' => __('Clean generated graphics')];\n\n         case 'temp' :\n            return ['description' => __('Clean temporary files')];\n\n         case 'watcher' :\n            return ['description' => __('Monitoring of automatic actions')];\n\n         case 'circularlogs' :\n            return ['description' => __(\"Archives log files and deletes aging ones\"),\n                         'parameter'   => __(\"Number of days to keep archived logs\")];\n      }\n   }\n\n\n   /**\n    * Dropdown for frequency (interval between 2 actions)\n    *\n    * @param string  $name   select name\n    * @param integer $value  default value (default 0)\n    *\n    * @return string|integer HTML output, or random part of dropdown ID.\n   **/\n   function dropdownFrequency($name, $value = 0) {\n\n      $tab = [];\n\n      $tab[MINUTE_TIMESTAMP] = sprintf(_n('%d minute', '%d minutes', 1), 1);\n\n      // Minutes\n      for ($i=5; $i<60; $i+=5) {\n         $tab[$i*MINUTE_TIMESTAMP] = sprintf(_n('%d minute', '%d minutes', $i), $i);\n      }\n\n      // Heures\n      for ($i=1; $i<24; $i++) {\n         $tab[$i*HOUR_TIMESTAMP] = sprintf(_n('%d hour', '%d hours', $i), $i);\n      }\n\n      // Jours\n      $tab[DAY_TIMESTAMP] = __('Each day');\n      for ($i=2; $i<7; $i++) {\n         $tab[$i*DAY_TIMESTAMP] = sprintf(_n('%d day', '%d days', $i), $i);\n      }\n\n      $tab[WEEK_TIMESTAMP]  = __('Each week');\n      $tab[MONTH_TIMESTAMP] = __('Each month');\n\n      Dropdown::showFromArray($name, $tab, ['value' => $value]);\n   }\n\n\n   /**\n    * Call cron without time check\n    *\n    * @return boolean : true if launched\n   **/\n   static function callCronForce() {\n      global $CFG_GLPI;\n\n      $path = $CFG_GLPI['root_doc'].\"/front/cron.php\";\n\n      echo \"<div style=\\\"background-image: url('$path');\\\"></div>\";\n      return true;\n   }\n\n\n   /**\n    * Call cron if time since last launch elapsed\n    *\n    * @return void\n   **/\n   static function callCron() {\n\n      if (isset($_SESSION[\"glpicrontimer\"])) {\n         // call static function callcron() every 5min\n         if ((time() - $_SESSION[\"glpicrontimer\"]) > 300) {\n\n            if (self::callCronForce()) {\n               // Restart timer\n               $_SESSION[\"glpicrontimer\"] = time();\n            }\n         }\n\n      } else {\n         // Start timer\n         $_SESSION[\"glpicrontimer\"] = time();\n      }\n   }\n\n\n   static function getIcon() {\n      return \"fas fa-stopwatch\";\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\nuse Glpi\\Application\\ErrorHandler;\n\n/**\n *  Database class for Mysql\n**/\nclass DBmysql {\n\n   //! Database Host - string or Array of string (round robin)\n   public $dbhost             = \"\";\n   //! Database User\n   public $dbuser             = \"\";\n   //! Database Password\n   public $dbpassword         = \"\";\n   //! Default Database\n   public $dbdefault          = \"\";\n   //! Database Handler\n   private $dbh;\n   //! Database Error\n   public $error              = 0;\n\n   // Slave management\n   public $slave              = false;\n   private $in_transaction;\n\n   /**\n    * Defines if connection must use SSL.\n    *\n    * @var boolean\n    */\n   public $dbssl              = false;\n\n   /**\n    * The path name to the key file (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslkey           = null;\n\n   /**\n    * The path name to the certificate file (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslcert          = null;\n\n   /**\n    * The path name to the certificate authority file (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslca            = null;\n\n   /**\n    * The pathname to a directory that contains trusted SSL CA certificates in PEM format\n    * (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslcapath        = null;\n\n   /**\n    * A list of allowable ciphers to use for SSL encryption (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslcacipher      = null;\n\n\n   /** Is it a first connection ?\n    * Indicates if the first connection attempt is successful or not\n    * if first attempt fail -> display a warning which indicates that glpi is in readonly\n   **/\n   public $first_connection   = true;\n   // Is connected to the DB ?\n   public $connected          = false;\n\n   //to calculate execution time\n   public $execution_time          = false;\n\n   private $cache_disabled = false;\n\n   /**\n    * Cached list fo tables.\n    *\n    * @var array\n    * @see self::tableExists()\n    */\n   private $table_cache = [];\n\n   /**\n    * Cached list of fields.\n    *\n    * @var array\n    * @see self::listFields()\n    */\n   private $field_cache = [];\n\n   /**\n    * Constructor / Connect to the MySQL Database\n    *\n    * @param integer $choice host number (default NULL)\n    *\n    * @return void\n    */\n   function __construct($choice = null) {\n      $this->connect($choice);\n   }\n\n   /**\n    * Connect using current database settings\n    * Use dbhost, dbuser, dbpassword and dbdefault\n    *\n    * @param integer $choice host number (default NULL)\n    *\n    * @return void\n    */\n   function connect($choice = null) {\n      $this->connected = false;\n      $this->dbh = @new mysqli();\n      $this->dbh->init();\n      if ($this->dbssl) {\n          mysqli_ssl_set(\n             $this->dbh,\n             $this->dbsslkey,\n             $this->dbsslcert,\n             $this->dbsslca,\n             $this->dbsslcapath,\n             $this->dbsslcacipher\n          );\n      }\n\n      if (is_array($this->dbhost)) {\n         // Round robin choice\n         $i    = (isset($choice) ? $choice : mt_rand(0, count($this->dbhost)-1));\n         $host = $this->dbhost[$i];\n\n      } else {\n         $host = $this->dbhost;\n      }\n\n      $hostport = explode(\":\", $host);\n      if (count($hostport) < 2) {\n         // Host\n         $this->dbh->real_connect($host, $this->dbuser, rawurldecode($this->dbpassword), $this->dbdefault);\n      } else if (intval($hostport[1])>0) {\n         // Host:port\n          $this->dbh->real_connect($hostport[0], $this->dbuser, rawurldecode($this->dbpassword), $this->dbdefault, $hostport[1]);\n      } else {\n          // :Socket\n          $this->dbh->real_connect($hostport[0], $this->dbuser, rawurldecode($this->dbpassword), $this->dbdefault, ini_get('mysqli.default_port'), $hostport[1]);\n      }\n\n      if ($this->dbh->connect_error) {\n         $this->connected = false;\n         $this->error     = 1;\n      } else if (!defined('MYSQLI_OPT_INT_AND_FLOAT_NATIVE')) {\n         $this->connected = false;\n         $this->error     = 2;\n      } else {\n         $dbenc = isset($this->dbenc) ? $this->dbenc : \"utf8\";\n         $this->dbh->set_charset($dbenc);\n         if ($dbenc === \"utf8\") {\n            // The mysqli::set_charset function will make COLLATE to be defined to the default one for used charset.\n            //\n            // For 'utf8' charset, default one is 'utf8_general_ci',\n            // so we have to redefine it to 'utf8_unicode_ci'.\n            //\n            // If encoding used by connection is not the default one (i.e utf8), then we assume\n            // that we cannot be sure of used COLLATE and that using the default one is the best option.\n            $this->dbh->query(\"SET NAMES 'utf8' COLLATE 'utf8_unicode_ci';\");\n         }\n\n         // force mysqlnd to return int and float types correctly (not as strings)\n         $this->dbh->options(MYSQLI_OPT_INT_AND_FLOAT_NATIVE, true);\n\n         if (GLPI_FORCE_EMPTY_SQL_MODE) {\n            $this->dbh->query(\"SET SESSION sql_mode = ''\");\n         }\n\n         $this->connected = true;\n\n         $this->setTimezone($this->guessTimezone());\n      }\n   }\n\n   /**\n    * Guess timezone\n    *\n    * Will  check for an existing loaded timezone from user,\n    * then will check in preferences and finally will fallback to system one.\n    *\n    * @return string\n    *\n    * @since 9.5.0\n    */\n   protected function guessTimezone() {\n      if (isset($_SESSION['glpi_tz'])) {\n         $zone = $_SESSION['glpi_tz'];\n      } else {\n         $conf_tz = ['value' => null];\n         if ($this->tableExists(Config::getTable())\n             && $this->fieldExists(Config::getTable(), 'value')) {\n            $conf_tz = $this->request([\n               'SELECT' => 'value',\n               'FROM'   => Config::getTable(),\n               'WHERE'  => [\n                  'context'   => 'core',\n                  'name'      => 'timezone'\n                ]\n            ])->next();\n         }\n         $zone = !empty($conf_tz['value']) ? $conf_tz['value'] : date_default_timezone_get();\n      }\n\n      return $zone;\n   }\n\n   /**\n    * Escapes special characters in a string for use in an SQL statement,\n    * taking into account the current charset of the connection\n    *\n    * @since 0.84\n    *\n    * @param string $string String to escape\n    *\n    * @return string escaped string\n    */\n   function escape($string) {\n      return $this->dbh->real_escape_string($string);\n   }\n\n   /**\n    * Execute a MySQL query\n    *\n    * @param string $query Query to execute\n    *\n    * @var array   $CFG_GLPI\n    * @var array   $DEBUG_SQL\n    * @var integer $SQL_TOTAL_REQUEST\n    *\n    * @return mysqli_result|boolean Query result handler\n    *\n    * @throws GlpitestSQLError\n    */\n   function query($query) {\n      global $CFG_GLPI, $DEBUG_SQL, $GLPI, $SQL_TOTAL_REQUEST;\n\n      $is_debug = isset($_SESSION['glpi_use_mode']) && ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE);\n      if ($is_debug && $CFG_GLPI[\"debug_sql\"]) {\n         $SQL_TOTAL_REQUEST++;\n         $DEBUG_SQL[\"queries\"][$SQL_TOTAL_REQUEST] = $query;\n      }\n      if ($is_debug && $CFG_GLPI[\"debug_sql\"] || $this->execution_time === true) {\n         $TIMER                                    = new Timer();\n         $TIMER->start();\n      }\n\n      $res = $this->dbh->query($query);\n      if (!$res) {\n         // no translation for error logs\n         $error = \"  *** MySQL query error:\\n  SQL: \".$query.\"\\n  Error: \".\n                   $this->dbh->error.\"\\n\";\n         $error .= Toolbox::backtrace(false, 'DBmysql->query()', ['Toolbox::backtrace()']);\n\n         Toolbox::logSqlError($error);\n\n         $error_handler = $GLPI->getErrorHandler();\n         if ($error_handler instanceof ErrorHandler) {\n            $error_handler->handleSqlError($this->dbh->errno, $this->dbh->error, $query);\n         }\n\n         if (($is_debug || isAPI()) && $CFG_GLPI[\"debug_sql\"]) {\n            $DEBUG_SQL[\"errors\"][$SQL_TOTAL_REQUEST] = $this->error();\n         }\n      }\n\n      if ($is_debug && $CFG_GLPI[\"debug_sql\"]) {\n         $TIME                                   = $TIMER->getTime();\n         $DEBUG_SQL[\"times\"][$SQL_TOTAL_REQUEST] = $TIME;\n      }\n      if ($this->execution_time === true) {\n         $this->execution_time = $TIMER->getTime(0, true);\n      }\n      return $res;\n   }\n\n   /**\n    * Execute a MySQL query and die\n    * (optionnaly with a message) if it fails\n    *\n    * @since 0.84\n    *\n    * @param string $query   Query to execute\n    * @param string $message Explanation of query (default '')\n    *\n    * @return mysqli_result Query result handler\n    */\n   function queryOrDie($query, $message = '') {\n      $res = $this->query($query);\n      if (!$res) {\n         //TRANS: %1$s is the description, %2$s is the query, %3$s is the error message\n         $message = sprintf(\n            __('%1$s - Error during the database query: %2$s - Error is %3$s'),\n            $message,\n            $query,\n            $this->error()\n         );\n         if (isCommandLine()) {\n            throw new \\RuntimeException($message);\n         } else {\n            echo $message . \"\\n\";\n            die(1);\n         }\n      }\n      return $res;\n   }\n\n   /**\n    * Prepare a MySQL query\n    *\n    * @param string $query Query to prepare\n    *\n    * @return mysqli_stmt|boolean statement object or FALSE if an error occurred.\n    *\n    * @throws GlpitestSQLError\n    */\n   function prepare($query) {\n      global $CFG_GLPI, $DEBUG_SQL, $SQL_TOTAL_REQUEST;\n\n      $res = $this->dbh->prepare($query);\n      if (!$res) {\n         // no translation for error logs\n         $error = \"  *** MySQL prepare error:\\n  SQL: \".$query.\"\\n  Error: \".\n                   $this->dbh->error.\"\\n\";\n         $error .= Toolbox::backtrace(false, 'DBmysql->prepare()', ['Toolbox::backtrace()']);\n\n         Toolbox::logInFile(\"sql-errors\", $error);\n         if (class_exists('GlpitestSQLError')) { // For unit test\n            throw new GlpitestSQLError($error);\n         }\n\n         if (isset($_SESSION['glpi_use_mode'])\n             && $_SESSION['glpi_use_mode'] == Session::DEBUG_MODE\n             && $CFG_GLPI[\"debug_sql\"]) {\n            $SQL_TOTAL_REQUEST++;\n            $DEBUG_SQL[\"errors\"][$SQL_TOTAL_REQUEST] = $this->error();\n         }\n      }\n      return $res;\n   }\n\n   /**\n    * Give result from a sql result\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param int           $i      Row offset to give\n    * @param string        $field  Field to give\n    *\n    * @return mixed Value of the Row $i and the Field $field of the Mysql $result\n    */\n   function result($result, $i, $field) {\n      if ($result && ($result->data_seek($i))\n          && ($data = $result->fetch_array())\n          && isset($data[$field])) {\n         return $data[$field];\n      }\n      return null;\n   }\n\n   /**\n    * Number of rows\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return integer number of rows\n    */\n   function numrows($result) {\n      return $result->num_rows;\n   }\n\n   /**\n    * Fetch array of the next row of a Mysql query\n    * Please prefer fetchRow or fetchAssoc\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return string[]|null array results\n    *\n    * @deprecated 9.5.0\n    */\n   function fetch_array($result) {\n      Toolbox::deprecated('Use DBmysql::fetchArray()');\n      return $this->fetchArray($result);\n   }\n\n   /**\n    * Fetch array of the next row of a Mysql query\n    * Please prefer fetchRow or fetchAssoc\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return string[]|null array results\n    */\n   function fetchArray($result) {\n      return $result->fetch_array();\n   }\n\n   /**\n    * Fetch row of the next row of a Mysql query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return mixed|null result row\n    *\n    * @deprecated 9.5.0\n    */\n   function fetch_row($result) {\n      Toolbox::deprecated('Use DBmysql::fetchRow()');\n      return $this->fetchRow($result);\n   }\n\n   /**\n    * Fetch row of the next row of a Mysql query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return mixed|null result row\n    */\n   function fetchRow($result) {\n      return $result->fetch_row();\n   }\n\n   /**\n    * Fetch assoc of the next row of a Mysql query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return string[]|null result associative array\n    *\n    * @deprecated 9.5.0\n    */\n   function fetch_assoc($result) {\n      Toolbox::deprecated('Use DBmysql::fetchAssoc()');\n      return $this->fetchAssoc($result);\n   }\n\n   /**\n    * Fetch assoc of the next row of a Mysql query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return string[]|null result associative array\n    */\n   function fetchAssoc($result) {\n      return $result->fetch_assoc();\n   }\n\n   /**\n    * Fetch object of the next row of an SQL query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return object|null\n    */\n   function fetch_object($result) {\n      Toolbox::deprecated('Use DBmysql::fetchObject()');\n      return $this->fetchObject();\n   }\n\n   /**\n    * Fetch object of the next row of an SQL query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return object|null\n    */\n   function fetchObject($result) {\n      return $result->fetch_object();\n   }\n\n   /**\n    * Move current pointer of a Mysql result to the specific row\n    *\n    * @deprecated 9.5.0\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param integer       $num    Row to move current pointer\n    *\n    * @return boolean\n    */\n   function data_seek($result, $num) {\n      Toolbox::deprecated('Use DBmysql::dataSeek()');\n      return $this->dataSeek($result, $num);\n   }\n\n   /**\n    * Move current pointer of a Mysql result to the specific row\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param integer       $num    Row to move current pointer\n    *\n    * @return boolean\n    */\n   function dataSeek($result, $num) {\n      return $result->data_seek($num);\n   }\n\n\n   /**\n    * Give ID of the last inserted item by Mysql\n    *\n    * @return mixed\n    *\n    * @deprecated 9.5.0\n    */\n   function insert_id() {\n      Toolbox::deprecated('Use DBmysql::insertId()');\n      return $this->insertId();\n   }\n\n   /**\n    * Give ID of the last inserted item by Mysql\n    *\n    * @return mixed\n    */\n   function insertId() {\n      return $this->dbh->insert_id;\n   }\n\n   /**\n    * Give number of fields of a Mysql result\n    *\n    * @deprecated 9.5.0\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return int number of fields\n    */\n   function num_fields($result) {\n      Toolbox::deprecated('Use DBmysql::numFields()');\n      return $this->numFields($result);\n   }\n\n   /**\n    * Give number of fields of a Mysql result\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return int number of fields\n    */\n   function numFields($result) {\n      return $result->field_count;\n   }\n\n\n   /**\n    * Give name of a field of a Mysql result\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param integer       $nb     ID of the field\n    *\n    * @return string name of the field\n    *\n    * @deprecated 9.5.0\n    */\n   function field_name($result, $nb) {\n      Toolbox::deprecated('Use DBmysql::fieldName()');\n      return $this->fieldName($result, $nb);\n   }\n\n   /**\n    * Give name of a field of a Mysql result\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param integer       $nb     ID of the field\n    *\n    * @return string name of the field\n    *\n    * @deprecated 9.5.0\n    */\n   function fieldName($result, $nb) {\n      $finfo = $result->fetch_fields();\n      return $finfo[$nb]->name;\n   }\n\n\n   /**\n    * List tables in database\n    *\n    * @param string $table Table name condition (glpi_% as default to retrieve only glpi tables)\n    * @param array  $where Where clause to append\n    *\n    * @return DBmysqlIterator\n    */\n   function listTables($table = 'glpi_%', array $where = []) {\n      $iterator = $this->request([\n         'SELECT' => 'table_name as TABLE_NAME',\n         'FROM'   => 'information_schema.tables',\n         'WHERE'  => [\n            'table_schema' => $this->dbdefault,\n            'table_type'   => 'BASE TABLE',\n            'table_name'   => ['LIKE', $table]\n         ] + $where\n      ]);\n      return $iterator;\n   }\n\n   /**\n    * Returns tables using \"MyIsam\" engine.\n    *\n    * @return DBmysqlIterator\n    */\n   public function getMyIsamTables(): DBmysqlIterator {\n      $iterator = $this->listTables('glpi_%', ['engine' => 'MyIsam']);\n      return $iterator;\n   }\n\n   /**\n    * List fields of a table\n    *\n    * @param string  $table    Table name condition\n    * @param boolean $usecache If use field list cache (default true)\n    *\n    * @return mixed list of fields\n    *\n    * @deprecated 9.5.0\n    */\n   function list_fields($table, $usecache = true) {\n       Toolbox::deprecated('Use DBmysql::listFields()');\n      return $this->listFields($table, $usecache);\n   }\n\n   /**\n    * List fields of a table\n    *\n    * @param string  $table    Table name condition\n    * @param boolean $usecache If use field list cache (default true)\n    *\n    * @return mixed list of fields\n    */\n   function listFields($table, $usecache = true) {\n\n      if (!$this->cache_disabled && $usecache && isset($this->field_cache[$table])) {\n         return $this->field_cache[$table];\n      }\n      $result = $this->query(\"SHOW COLUMNS FROM `$table`\");\n      if ($result) {\n         if ($this->numrows($result) > 0) {\n            $this->field_cache[$table] = [];\n            while ($data = $this->fetchAssoc($result)) {\n               $this->field_cache[$table][$data[\"Field\"]] = $data;\n            }\n            return $this->field_cache[$table];\n         }\n         return [];\n      }\n      return false;\n   }\n\n   /**\n    * Get number of affected rows in previous MySQL operation\n    *\n    * @return int number of affected rows on success, and -1 if the last query failed.\n    *\n    * @deprecated 9.5.0\n    */\n   function affected_rows() {\n      Toolbox::deprecated('Use DBmysql::affectedRows()');\n      return $this->affectedRows();\n   }\n\n   /**\n    * Get number of affected rows in previous MySQL operation\n    *\n    * @return int number of affected rows on success, and -1 if the last query failed.\n    */\n   function affectedRows() {\n      return $this->dbh->affected_rows;\n   }\n\n\n   /**\n    * Free result memory\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return boolean\n    *\n    * @deprecated 9.5.0\n    */\n   function free_result($result) {\n      Toolbox::deprecated('Use DBmysql::freeResult()');\n      return $this->freeResult($result);\n   }\n\n   /**\n    * Free result memory\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return boolean\n    */\n   function freeResult($result) {\n      return $result->free();\n   }\n\n   /**\n    * Returns the numerical value of the error message from previous MySQL operation\n    *\n    * @return int error number from the last MySQL function, or 0 (zero) if no error occurred.\n    */\n   function errno() {\n      return $this->dbh->errno;\n   }\n\n   /**\n    * Returns the text of the error message from previous MySQL operation\n    *\n    * @return string error text from the last MySQL function, or '' (empty string) if no error occurred.\n    */\n   function error() {\n      return $this->dbh->error;\n   }\n\n   /**\n    * Close MySQL connection\n    *\n    * @return boolean TRUE on success or FALSE on failure.\n    */\n   function close() {\n      if ($this->connected && $this->dbh) {\n         return $this->dbh->close();\n      }\n      return false;\n   }\n\n   /**\n    * is a slave database ?\n    *\n    * @return boolean\n    */\n   function isSlave() {\n      return $this->slave;\n   }\n\n   /**\n    * Execute all the request in a file\n    *\n    * @param string $path with file full path\n    *\n    * @return boolean true if all query are successfull\n    */\n   function runFile($path) {\n      $script = fopen($path, 'r');\n      if (!$script) {\n         return false;\n      }\n      $sql_query = @fread(\n         $script,\n         @filesize($path)\n      ) . \"\\n\";\n      $sql_query = html_entity_decode($sql_query, ENT_COMPAT, 'UTF-8');\n\n      $sql_query = $this->removeSqlRemarks($sql_query);\n      $queries = preg_split('/;\\s*$/m', $sql_query);\n\n      foreach ($queries as $query) {\n         $query = trim($query);\n         if ($query != '') {\n            $query = htmlentities($query);\n            if (!$this->query($query)) {\n               return false;\n            }\n            if (!isCommandLine()) {\n               // Flush will prevent proxy to timeout as it will receive data.\n               // Flush requires a content to be sent, so we sent spaces as multiple spaces\n               // will be shown as a single one on browser.\n               echo ' ';\n               Html::glpi_flush();\n            }\n         }\n      }\n\n      return true;\n   }\n\n   /**\n    * Instanciate a Simple DBIterator\n    *\n    * Examples =\n    *  foreach ($DB->request(\"select * from glpi_states\") as $data) { ... }\n    *  foreach ($DB->request(\"glpi_states\") as $ID => $data) { ... }\n    *  foreach ($DB->request(\"glpi_states\", \"ID=1\") as $ID => $data) { ... }\n    *  foreach ($DB->request(\"glpi_states\", \"\", \"name\") as $ID => $data) { ... }\n    *  foreach ($DB->request(\"glpi_computers\",array(\"name\"=>\"SBEI003W\",\"entities_id\"=>1),array(\"serial\",\"otherserial\")) { ... }\n    *\n    * Examples =\n    *   array(\"id\"=>NULL)\n    *   array(\"OR\"=>array(\"id\"=>1, \"NOT\"=>array(\"state\"=>3)));\n    *   array(\"AND\"=>array(\"id\"=>1, array(\"NOT\"=>array(\"state\"=>array(3,4,5),\"toto\"=>2))))\n    *\n    * FIELDS name or array of field names\n    * ORDER name or array of field names\n    * LIMIT max of row to retrieve\n    * START first row to retrieve\n    *\n    * @param string|string[] $tableorsql Table name, array of names or SQL query\n    * @param string|string[] $crit       String or array of filed/values, ex array(\"id\"=>1), if empty => all rows\n    *                                    (default '')\n    * @param boolean         $debug      To log the request (default false)\n    *\n    * @return DBmysqlIterator\n    */\n   public function request ($tableorsql, $crit = \"\", $debug = false) {\n      $iterator = new DBmysqlIterator($this);\n      $iterator->execute($tableorsql, $crit, $debug);\n      return $iterator;\n   }\n\n\n   /**\n    * Get information about DB connection for showSystemInformations\n    *\n    * @since 0.84\n    *\n    * @return string[] Array of label / value\n    */\n   public function getInfo() {\n      // No translation, used in sysinfo\n      $ret = [];\n      $req = $this->request(\"SELECT @@sql_mode as mode, @@version AS vers, @@version_comment AS stype\");\n\n      if (($data = $req->next())) {\n         if ($data['stype']) {\n            $ret['Server Software'] = $data['stype'];\n         }\n         if ($data['vers']) {\n            $ret['Server Version'] = $data['vers'];\n         } else {\n            $ret['Server Version'] = $this->dbh->server_info;\n         }\n         if ($data['mode']) {\n            $ret['Server SQL Mode'] = $data['mode'];\n         } else {\n            $ret['Server SQL Mode'] = '';\n         }\n      }\n      $ret['Parameters'] = $this->dbuser.\"@\".$this->dbhost.\"/\".$this->dbdefault;\n      $ret['Host info']  = $this->dbh->host_info;\n\n      return $ret;\n   }\n\n   /**\n    * Is MySQL strict mode ?\n    *\n    * @var DB $DB\n    *\n    * @param string $msg Mode\n    *\n    * @return boolean\n    *\n    * @since 0.90\n    * @deprecated 9.5.0\n    */\n   static public function isMySQLStrictMode(&$msg) {\n      Toolbox::deprecated();\n      global $DB;\n\n      $msg = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ZERO_DATE,NO_ZERO_IN_DATE,ONLY_FULL_GROUP_BY,NO_AUTO_CREATE_USER';\n      $req = $DB->request(\"SELECT @@sql_mode as mode\");\n      if (($data = $req->next())) {\n         return (preg_match(\"/STRICT_TRANS/\", $data['mode'])\n                 && preg_match(\"/NO_ZERO_/\", $data['mode'])\n                 && preg_match(\"/ONLY_FULL_GROUP_BY/\", $data['mode']));\n      }\n      return false;\n   }\n\n   /**\n    * Get a global DB lock\n    *\n    * @since 0.84\n    *\n    * @param string $name lock's name\n    *\n    * @return boolean\n    */\n   public function getLock($name) {\n      $name          = addslashes($this->dbdefault.'.'.$name);\n      $query         = \"SELECT GET_LOCK('$name', 0)\";\n      $result        = $this->query($query);\n      list($lock_ok) = $this->fetchRow($result);\n\n      return (bool)$lock_ok;\n   }\n\n   /**\n    * Release a global DB lock\n    *\n    * @since 0.84\n    *\n    * @param string $name lock's name\n    *\n    * @return boolean\n    */\n   public function releaseLock($name) {\n      $name          = addslashes($this->dbdefault.'.'.$name);\n      $query         = \"SELECT RELEASE_LOCK('$name')\";\n      $result        = $this->query($query);\n      list($lock_ok) = $this->fetchRow($result);\n\n      return $lock_ok;\n   }\n\n\n   /**\n    * Check if a table exists\n    *\n    * @since 9.2\n    * @since 9.5 Added $usecache parameter.\n    *\n    * @param string  $tablename Table name\n    * @param boolean $usecache  If use table list cache\n    *\n    * @return boolean\n    **/\n   public function tableExists($tablename, $usecache = true) {\n\n      if (!$this->cache_disabled && $usecache && in_array($tablename, $this->table_cache)) {\n         return true;\n      }\n\n      // Retrieve all tables if cache is empty but enabled, in order to fill cache\n      // with all known tables\n      $retrieve_all = !$this->cache_disabled && empty($this->table_cache);\n\n      $result = $this->listTables($retrieve_all ? 'glpi_%' : $tablename);\n      $found_tables = [];\n      while ($data = $result->next()) {\n         $found_tables[] = $data['TABLE_NAME'];\n      }\n\n      if (!$this->cache_disabled) {\n         $this->table_cache = array_unique(array_merge($this->table_cache, $found_tables));\n      }\n\n      if (in_array($tablename, $found_tables)) {\n         return true;\n      }\n\n      return false;\n   }\n\n   /**\n    * Check if a field exists\n    *\n    * @since 9.2\n    *\n    * @param string  $table    Table name for the field we're looking for\n    * @param string  $field    Field name\n    * @param Boolean $usecache Use cache; @see DBmysql::listFields(), defaults to true\n    *\n    * @return boolean\n    **/\n   public function fieldExists($table, $field, $usecache = true) {\n      if (!$this->tableExists($table, $usecache)) {\n         trigger_error(\"Table $table does not exists\", E_USER_WARNING);\n         return false;\n      }\n\n      if ($fields = $this->listFields($table, $usecache)) {\n         if (isset($fields[$field])) {\n            return true;\n         }\n         return false;\n      }\n      return false;\n   }\n\n   /**\n    * Disable table cache globally; usefull for migrations\n    *\n    * @return void\n    */\n   public function disableTableCaching() {\n      $this->cache_disabled = true;\n   }\n\n   /**\n    * Quote field name\n    *\n    * @since 9.3\n    *\n    * @param string $name of field to quote (or table.field)\n    *\n    * @return string\n    */\n   public static function quoteName($name) {\n      //handle verbatim names\n      if ($name instanceof QueryExpression) {\n         return $name->getValue();\n      }\n      //handle aliases\n      $names = preg_split('/\\s+AS\\s+/i', $name);\n      if (count($names) > 2) {\n         throw new \\RuntimeException(\n            'Invalid field name ' . $name\n         );\n      }\n      if (count($names) == 2) {\n         $name = self::quoteName($names[0]);\n         $name .= ' AS ' . self::quoteName($names[1]);\n         return $name;\n      } else {\n         if (strpos($name, '.')) {\n            $n = explode('.', $name, 2);\n            $table = self::quoteName($n[0]);\n            $field = ($n[1] === '*') ? $n[1] : self::quoteName($n[1]);\n            return \"$table.$field\";\n         }\n         return ($name[0] == '`' ? $name : ($name === '*' ? $name : \"`$name`\"));\n      }\n   }\n\n   /**\n    * Quote value for insert/update\n    *\n    * @param mixed $value Value\n    *\n    * @return mixed\n    */\n   public static function quoteValue($value) {\n      if ($value instanceof QueryParam || $value instanceof QueryExpression) {\n         //no quote for query parameters nor expressions\n         $value = $value->getValue();\n      } else if ($value === null || $value === 'NULL' || $value === 'null') {\n         $value = 'NULL';\n      } else if (!preg_match(\"/^`.*?`$/\", $value)) { //`field` is valid only for mysql :/\n         //phone numbers may start with '+' and will be considered as numeric\n         $value = \"'$value'\";\n      }\n      return $value;\n   }\n\n   /**\n    * Builds an insert statement\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params Query parameters ([field name => field value)\n    *\n    * @return string\n    */\n   public function buildInsert($table, $params) {\n      $query = \"INSERT INTO \" . self::quoteName($table) . \" (\";\n\n      $fields = [];\n      foreach ($params as $key => &$value) {\n         $fields[] = $this->quoteName($key);\n         $value = $this->quoteValue($value);\n      }\n\n      $query .= implode(', ', $fields);\n      $query .= \") VALUES (\";\n      $query .= implode(\", \", $params);\n      $query .= \")\";\n\n      return $query;\n   }\n\n   /**\n    * Insert a row in the database\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params Query parameters ([field name => field value)\n    *\n    * @return mysqli_result|boolean Query result handler\n    */\n   public function insert($table, $params) {\n      $result = $this->query(\n         $this->buildInsert($table, $params)\n      );\n      return $result;\n   }\n\n   /**\n    * Insert a row in the database and die\n    * (optionnaly with a message) if it fails\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params  Query parameters ([field name => field value)\n    * @param string $message Explanation of query (default '')\n    *\n    * @return mysqli_result|boolean Query result handler\n    */\n   function insertOrDie($table, $params, $message = '') {\n      $insert = $this->buildInsert($table, $params);\n      $res = $this->query($insert);\n      if (!$res) {\n         //TRANS: %1$s is the description, %2$s is the query, %3$s is the error message\n         $message = sprintf(\n            __('%1$s - Error during the database query: %2$s - Error is %3$s'),\n            $message,\n            $insert,\n            $this->error()\n         );\n         if (isCommandLine()) {\n            throw new \\RuntimeException($message);\n         } else {\n            echo $message . \"\\n\";\n            die(1);\n         }\n      }\n      return $res;\n   }\n\n   /**\n    * Builds an update statement\n    *\n    * @since 9.3\n    *\n    * @param string $table   Table name\n    * @param array  $params  Query parameters ([field name => field value)\n    * @param array  $clauses Clauses to use. If not 'WHERE' key specified, will b the WHERE clause (@see DBmysqlIterator capabilities)\n    * @param array  $joins  JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return string\n    */\n   public function buildUpdate($table, $params, $clauses, array $joins = []) {\n      //when no explicit \"WHERE\", we only have a WHEre clause.\n      if (!isset($clauses['WHERE'])) {\n         $clauses  = ['WHERE' => $clauses];\n      } else {\n         $known_clauses = ['WHERE', 'ORDER', 'LIMIT', 'START'];\n         foreach (array_keys($clauses) as $key) {\n            if (!in_array($key, $known_clauses)) {\n               throw new \\RuntimeException(\n                  str_replace(\n                     '%clause',\n                     $key,\n                     'Trying to use an unknonw clause (%clause) building update query!'\n                  )\n               );\n            }\n         }\n      }\n\n      if (!count($clauses['WHERE'])) {\n         throw new \\RuntimeException('Cannot run an UPDATE query without WHERE clause!');\n      }\n\n      $query  = \"UPDATE \". self::quoteName($table);\n\n      //JOINS\n      $it = new DBmysqlIterator($this);\n      $query .= $it->analyseJoins($joins);\n\n      $query .= \" SET \";\n      foreach ($params as $field => $value) {\n         $query .= self::quoteName($field) . \" = \".$this->quoteValue($value).\", \";\n      }\n      $query = rtrim($query, ', ');\n\n      $query .= \" WHERE \" . $it->analyseCrit($clauses['WHERE']);\n\n      // ORDER BY\n      if (isset($clauses['ORDER']) && !empty($clauses['ORDER'])) {\n         $query .= $it->handleOrderClause($clauses['ORDER']);\n      }\n\n      if (isset($clauses['LIMIT']) && !empty($clauses['LIMIT'])) {\n         $offset = (isset($clauses['START']) && !empty($clauses['START'])) ? $clauses['START'] : null;\n         $query .= $it->handleLimits($clauses['LIMIT'], $offset);\n      }\n\n      return $query;\n   }\n\n   /**\n    * Update a row in the database\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params Query parameters ([:field name => field value)\n    * @param array  $where  WHERE clause\n    * @param array  $joins  JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return mysqli_result|boolean Query result handler\n    */\n   public function update($table, $params, $where, array $joins = []) {\n      $query = $this->buildUpdate($table, $params, $where, $joins);\n      $result = $this->query($query);\n      return $result;\n   }\n\n   /**\n    * Update a row in the database or die\n    * (optionnaly with a message) if it fails\n    *\n    * @since 9.3\n    *\n    * @param string $table   Table name\n    * @param array  $params  Query parameters ([:field name => field value)\n    * @param array  $where   WHERE clause\n    * @param string $message Explanation of query (default '')\n    * @param array  $joins   JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return mysqli_result|boolean Query result handler\n    */\n   function updateOrDie($table, $params, $where, $message = '', array $joins = []) {\n      $update = $this->buildUpdate($table, $params, $where, $joins);\n      $res = $this->query($update);\n      if (!$res) {\n         //TRANS: %1$s is the description, %2$s is the query, %3$s is the error message\n         $message = sprintf(\n            __('%1$s - Error during the database query: %2$s - Error is %3$s'),\n            $message,\n            $update,\n            $this->error()\n         );\n         if (isCommandLine()) {\n            throw new \\RuntimeException($message);\n         } else {\n            echo $message . \"\\n\";\n            die(1);\n         }\n      }\n      return $res;\n   }\n\n   /**\n    * Update a row in the database or insert a new one\n    *\n    * @since 9.4\n    *\n    * @param string  $table   Table name\n    * @param array   $params  Query parameters ([:field name => field value)\n    * @param array   $where   WHERE clause\n    * @param boolean $onlyone Do the update only one one element, defaults to true\n    *\n    * @return mysqli_result|boolean Query result handler\n    */\n   public function updateOrInsert($table, $params, $where, $onlyone = true) {\n      $req = $this->request($table, $where);\n      $data = array_merge($where, $params);\n      if ($req->count() == 0) {\n         return $this->insertOrDie($table, $data, 'Unable to create new element or update existing one');\n      } else if ($req->count() == 1 || !$onlyone) {\n         return $this->updateOrDie($table, $data, $where, 'Unable to create new element or update existing one');\n      } else {\n         Toolbox::logWarning('Update would change too many rows!');\n         return false;\n      }\n   }\n\n   /**\n    * Builds a delete statement\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params Query parameters ([field name => field value)\n    * @param array  $where  WHERE clause (@see DBmysqlIterator capabilities)\n    * @param array  $joins  JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return string\n    */\n   public function buildDelete($table, $where, array $joins = []) {\n\n      if (!count($where)) {\n         throw new \\RuntimeException('Cannot run an DELETE query without WHERE clause!');\n      }\n\n      $query  = \"DELETE \" . self::quoteName($table) . \" FROM \". self::quoteName($table);\n\n      $it = new DBmysqlIterator($this);\n      $query .= $it->analyseJoins($joins);\n      $query .= \" WHERE \" . $it->analyseCrit($where);\n\n      return $query;\n   }\n\n   /**\n    * Delete rows in the database\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $where  WHERE clause\n    * @param array  $joins  JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return mysqli_result|boolean Query result handler\n    */\n   public function delete($table, $where, array $joins = []) {\n      $query = $this->buildDelete($table, $where, $joins);\n      $result = $this->query($query);\n      return $result;\n   }\n\n   /**\n    * Delete a row in the database and die\n    * (optionnaly with a message) if it fails\n    *\n    * @since 9.3\n    *\n    * @param string $table   Table name\n    * @param array  $where   WHERE clause\n    * @param string $message Explanation of query (default '')\n    * @param array  $joins   JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return mysqli_result|boolean Query result handler\n    */\n   function deleteOrDie($table, $where, $message = '', array $joins = []) {\n      $update = $this->buildDelete($table, $where, $joins);\n      $res = $this->query($update);\n      if (!$res) {\n         //TRANS: %1$s is the description, %2$s is the query, %3$s is the error message\n         $message = sprintf(\n            __('%1$s - Error during the database query: %2$s - Error is %3$s'),\n            $message,\n            $update,\n            $this->error()\n         );\n         if (isCommandLine()) {\n            throw new \\RuntimeException($message);\n         } else {\n            echo $message . \"\\n\";\n            die(1);\n         }\n\n      }\n      return $res;\n   }\n\n\n   /**\n    * Get table schema\n    *\n    * @param string $table Table name,\n    * @param string|null $structure Raw table structure\n    *\n    * @return array\n    */\n   public function getTableSchema($table, $structure = null) {\n      if ($structure === null) {\n         $structure = $this->query(\"SHOW CREATE TABLE `$table`\")->fetch_row();\n         $structure = $structure[1];\n      }\n\n      //get table index\n      $index = preg_grep(\n         \"/^\\s\\s+?KEY/\",\n         array_map(\n            function($idx) { return rtrim($idx, ','); },\n            explode(\"\\n\", $structure)\n         )\n      );\n      //get table schema, without index, without AUTO_INCREMENT\n      $structure = preg_replace(\n         [\n            \"/\\s\\s+KEY .*/\",\n            \"/AUTO_INCREMENT=\\d+ /\"\n         ],\n         \"\",\n         $structure\n      );\n      $structure = preg_replace('/,(\\s)?$/m', '', $structure);\n      $structure = preg_replace('/ COMMENT \\'(.+)\\'/', '', $structure);\n\n      $structure = str_replace(\n         [\n            \" COLLATE utf8_unicode_ci\",\n            \" CHARACTER SET utf8\",\n            ', ',\n         ], [\n            '',\n            '',\n            ',',\n         ],\n         trim($structure)\n      );\n\n      //do not check engine nor collation\n      $structure = preg_replace(\n         '/\\) ENGINE.*$/',\n         '',\n         $structure\n      );\n\n      //Mariadb 10.2 will return current_timestamp()\n      //while older retuns CURRENT_TIMESTAMP...\n      $structure = preg_replace(\n         '/ CURRENT_TIMESTAMP\\(\\)/i',\n         ' CURRENT_TIMESTAMP',\n         $structure\n      );\n\n      //Mariadb 10.2 allow default values on longblob, text and longtext\n      $defaults = [];\n      preg_match_all(\n         '/^.+ (longblob|text|longtext) .+$/m',\n         $structure,\n         $defaults\n      );\n      if (count($defaults[0])) {\n         foreach ($defaults[0] as $line) {\n               $structure = str_replace(\n                  $line,\n                  str_replace(' DEFAULT NULL', '', $line),\n                  $structure\n               );\n         }\n      }\n\n      $structure = preg_replace(\"/(DEFAULT) ([-|+]?\\d+)(\\.\\d+)?/\", \"$1 '$2$3'\", $structure);\n      //$structure = preg_replace(\"/(DEFAULT) (')?([-|+]?\\d+)(\\.\\d+)(')?/\", \"$1 '$3'\", $structure);\n      $structure = preg_replace('/(BIGINT)\\(\\d+\\)/i', '$1', $structure);\n      $structure = preg_replace('/(TINYINT) /i', '$1(4) ', $structure);\n\n      return [\n         'schema' => strtolower($structure),\n         'index'  => $index\n      ];\n\n   }\n\n   /**\n    * Get database raw version\n    *\n    * @return string\n    */\n   public function getVersion() {\n      $req = $this->request('SELECT version()')->next();\n      $raw = $req['version()'];\n      return $raw;\n   }\n\n   /**\n    * Starts a transaction\n    *\n    * @return boolean\n    */\n   public function beginTransaction() {\n      $this->in_transaction = true;\n      return $this->dbh->begin_transaction();\n   }\n\n   /**\n    * Commits a transaction\n    *\n    * @return boolean\n    */\n   public function commit() {\n      $this->in_transaction = false;\n      return $this->dbh->commit();\n   }\n\n   /**\n    * Rollbacks a transaction\n    *\n    * @return boolean\n    */\n   public function rollBack() {\n      $this->in_transaction = false;\n      return $this->dbh->rollback();\n   }\n\n   /**\n    * Are we in a transaction?\n    *\n    * @return boolean\n    */\n   public function inTransaction() {\n      return $this->in_transaction;\n   }\n\n   /**\n    * Check if timezone data is accessible and available in database.\n    *\n    * @param string $msg  Variable that would contain the reason of data unavailability.\n    *\n    * @return boolean\n    *\n    * @since 9.5.0\n    */\n   public function areTimezonesAvailable(string &$msg = '') {\n      $mysql_db_res = $this->request('SHOW DATABASES LIKE ' . $this->quoteValue('mysql'));\n      if ($mysql_db_res->count() === 0) {\n         $msg = __('Access to timezone database (mysql) is not allowed.');\n         return false;\n      }\n\n      $tz_table_res = $this->request(\n         'SHOW TABLES FROM '\n         . $this->quoteName('mysql')\n         . ' LIKE '\n         . $this->quoteValue('time_zone_name')\n      );\n      if ($tz_table_res->count() === 0) {\n         $msg = __('Access to timezone table (mysql.time_zone_name) is not allowed.');\n         return false;\n      }\n\n      $criteria = [\n         'COUNT'  => 'cpt',\n         'FROM'   => 'mysql.time_zone_name',\n      ];\n      $iterator = $this->request($criteria);\n      $result = $iterator->next();\n      if ($result['cpt'] == 0) {\n         $msg = __('Timezones seems not loaded, see https://glpi-install.readthedocs.io/en/latest/timezones.html.');\n         return false;\n      }\n\n      return true;\n   }\n\n   /**\n    * Defines timezone to use.\n    *\n    * @param string $timezone\n    *\n    * @return DBmysql\n    */\n   public function setTimezone($timezone) {\n      //setup timezone\n      if ($this->areTimezonesAvailable()) {\n         date_default_timezone_set($timezone);\n         $this->dbh->query(\"SET SESSION time_zone = '$timezone'\");\n         $_SESSION['glpi_currenttime'] = date(\"Y-m-d H:i:s\");\n      }\n      return $this;\n   }\n\n   /**\n    * Returns list of timezones.\n    *\n    * @return string[]\n    *\n    * @since 9.5.0\n    */\n   public function getTimezones() {\n      $list = []; //default $tz is empty\n\n      $from_php = \\DateTimeZone::listIdentifiers();\n      $now = new \\DateTime();\n\n      $iterator = $this->request([\n         'SELECT' => 'Name',\n         'FROM'   => 'mysql.time_zone_name',\n         'WHERE'  => ['Name' => $from_php]\n      ]);\n\n      while ($from_mysql = $iterator->next()) {\n         $now->setTimezone(new \\DateTimeZone($from_mysql['Name']));\n         $list[$from_mysql['Name']] = $from_mysql['Name'] . $now->format(\" (T P)\");\n      }\n\n      return $list;\n   }\n\n   /**\n    * Returns count of tables that were not migrated to be compatible with timezones usage.\n    *\n    * @return number\n    *\n    * @since 9.5.0\n    */\n   public function notTzMigrated() {\n       global $DB;\n\n       $result = $DB->request([\n           'COUNT'       => 'cpt',\n           'FROM'        => 'information_schema.columns',\n           'WHERE'       => [\n              'information_schema.columns.table_schema'  => $DB->dbdefault,\n              'information_schema.columns.data_type'     => ['datetime']\n           ]\n       ])->next();\n       return (int)$result['cpt'];\n   }\n\n   /**\n    * Clear cached schema informations.\n    *\n    * @return void\n    */\n   public function clearSchemaCache() {\n      $this->table_cache = [];\n      $this->field_cache = [];\n   }\n\n   /**\n    * Quote a value for a specified type\n    * Should be used for PDO, but this will prevent heavy\n    * replacements in the source code in the future.\n    *\n    * @param mixed   $value Value to quote\n    * @param integer $type  Value type, defaults to PDO::PARAM_STR\n    *\n    * @return mixed\n    *\n    * @since 9.5.0\n    */\n   public function quote($value, int $type = 2/*\\PDO::PARAM_STR*/) {\n      return \"'\" . $this->escape($value) . \"'\";\n      //return $this->dbh->quote($value, $type);\n   }\n\n   /**\n    * Get character used to quote names for current database engine\n    *\n    * @return string\n    *\n    * @since 9.5.0\n    */\n   public static function getQuoteNameChar(): string {\n      return '`';\n   }\n\n   /**\n    * Is value quoted as database field/expression?\n    *\n    * @param string|\\QueryExpression $value Value to check\n    *\n    * @return boolean\n    *\n    * @since 9.5.0\n    */\n   public static function isNameQuoted($value): bool {\n      $quote = static::getQuoteNameChar();\n      return is_string($value) && trim($value, $quote) != $value;\n   }\n\n   /**\n    * Remove SQL comments\n    * \u00a9 2011 PHPBB Group\n    *\n    * @param string $output SQL statements\n    *\n    * @return string\n    */\n   public function removeSqlComments($output) {\n      $lines = explode(\"\\n\", $output);\n      $output = \"\";\n\n      // try to keep mem. use down\n      $linecount = count($lines);\n\n      $in_comment = false;\n      for ($i = 0; $i < $linecount; $i++) {\n         if (preg_match(\"/^\\/\\*/\", $lines[$i])) {\n            $in_comment = true;\n         }\n\n         if (!$in_comment) {\n            $output .= $lines[$i] . \"\\n\";\n         }\n\n         if (preg_match(\"/\\*\\/$/\", preg_quote($lines[$i]))) {\n            $in_comment = false;\n         }\n      }\n\n      unset($lines);\n      return trim($output);\n   }\n\n   /**\n    * Remove remarks and comments from SQL\n    * @see DBmysql::removeSqlComments()\n    * \u00a9 2011 PHPBB Group\n    *\n    * @param $string $sql SQL statements\n    *\n    * @return string\n    */\n   public function removeSqlRemarks($sql) {\n      $lines = explode(\"\\n\", $sql);\n\n      // try to keep mem. use down\n      $sql = \"\";\n\n      $linecount = count($lines);\n      $output = \"\";\n\n      for ($i = 0; $i < $linecount; $i++) {\n         if (($i != ($linecount - 1)) || (strlen($lines[$i]) > 0)) {\n            if (isset($lines[$i][0])) {\n               if ($lines[$i][0] != \"#\" && substr($lines[$i], 0, 2) != \"--\") {\n\n                  $output .= $lines[$i] . \"\\n\";\n               } else {\n                  $output .= \"\\n\";\n               }\n            }\n            // Trading a bit of speed for lower mem. use here.\n            $lines[$i] = \"\";\n         }\n      }\n      return trim($this->removeSqlComments($output));\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n *  Database iterator class for Mysql\n**/\nclass DBmysqlIterator implements Iterator, Countable {\n   /**\n    * DBmysql object\n    * @var DBmysql\n    */\n   private $conn;\n   // Current SQL query\n   private $sql;\n   // Current result\n   private $res = false;\n   // Current row\n   private $row;\n\n   // Current position\n   private $position = 0;\n\n   //Known query operators\n   private $allowed_operators = [\n      '=',\n      '!=',\n      '<',\n      '<=',\n      '>',\n      '>=',\n      '<>',\n      'LIKE',\n      'REGEXP',\n      'NOT LIKE',\n      'NOT REGEX',\n      '&',\n      '|'\n   ];\n\n   /**\n    * Constructor\n    *\n    * @param DBmysql $dbconnexion Database Connnexion (must be a CommonDBTM object)\n    *\n    * @return void\n    */\n   function __construct ($dbconnexion) {\n      $this->conn = $dbconnexion;\n   }\n\n   /**\n    * Executes the query\n    *\n    * @param string|array $table       Table name (optional when $crit have FROM entry)\n    * @param string|array $crit        Fields/values, ex array(\"id\"=>1), if empty => all rows (default '')\n    * @param boolean      $debug       To log the request (default false)\n    *\n    * @return DBmysqlIterator\n    */\n   function execute ($table, $crit = \"\", $debug = false) {\n      $this->buildQuery($table, $crit, $debug);\n      $this->res = ($this->conn ? $this->conn->query($this->sql) : false);\n      $this->position = 0;\n      return $this;\n   }\n\n   /**\n    * Builds the query\n    *\n    * @param string|array $table       Table name (optional when $crit have FROM entry)\n    * @param string|array $crit        Fields/values, ex array(\"id\"=>1), if empty => all rows (default '')\n    * @param boolean      $log         To log the request (default false)\n    *\n    * @return void\n    */\n   function buildQuery ($table, $crit = \"\", $log = false) {\n      $this->sql = null;\n      $this->res = false;\n      $this->parameters = [];\n\n      $is_legacy = false;\n\n      if (is_string($table) && strpos($table, \" \")) {\n         $names = preg_split('/\\s+AS\\s+/i', $table);\n         if (isset($names[1]) && strpos($names[1], ' ') || !isset($names[1]) || strpos($names[0], ' ')) {\n            $is_legacy = true;\n         }\n      }\n\n      if ($is_legacy) {\n         //if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n         //   trigger_error(\"Deprecated usage of SQL in DB/request (full query)\", E_USER_DEPRECATED);\n         //}\n         $this->sql = $table;\n      } else {\n         // Modern way\n         if (is_array($table) && isset($table['FROM'])) {\n            // Shift the args\n            $debug = $crit;\n            $crit  = $table;\n            $table = $crit['FROM'];\n            unset($crit['FROM']);\n         }\n\n         // Check field, orderby, limit, start in criterias\n         $field    = \"\";\n         $distinct = false;\n         $orderby  = null;\n         $limit    = 0;\n         $start    = 0;\n         $where    = '';\n         $count    = '';\n         $join     = [];\n         $groupby  = '';\n         $having   = '';\n         if (is_array($crit) && count($crit)) {\n            foreach ($crit as $key => $val) {\n               switch ((string)$key) {\n                  case 'SELECT' :\n                  case 'FIELDS' :\n                     $field = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'DISTINCT' :\n                     if ($val) {\n                        $distinct = true;\n                     }\n                     unset($crit[$key]);\n                     break;\n\n                  case 'COUNT' :\n                     $count = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'ORDER' :\n                  case 'ORDERBY' :\n                     $orderby = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'LIMIT' :\n                     $limit = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'START' :\n                     $start = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'WHERE' :\n                     $where = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'HAVING' :\n                     $having = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'GROUP' :\n                  case 'GROUPBY' :\n                     $groupby = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'JOIN' :\n                  case 'LEFT JOIN' :\n                  case 'RIGHT JOIN' :\n                  case 'INNER JOIN' :\n                     $join[$key] = $val;\n                     unset($crit[$key]);\n                     break;\n               }\n            }\n         }\n\n         $this->sql = 'SELECT ';\n         $first = true;\n\n         // SELECT field list\n         if ($count) {\n            $this->sql .= 'COUNT(';\n            if ($distinct) {\n               $this->sql .= 'DISTINCT ';\n            }\n            if (!empty($field) && !is_array($field)) {\n               $this->sql .= \"\" . DBmysql::quoteName($field);\n            } else {\n               if ($distinct) {\n                  trigger_error(\"With COUNT and DISTINCT, you must specify exactly one field, or use 'COUNT DISTINCT'\", E_USER_ERROR);\n               }\n               $this->sql .= \"*\";\n            }\n            $this->sql .= \") AS $count\";\n            $first = false;\n         }\n         if (!$count || $count && is_array($field)) {\n            if ($distinct && !$count) {\n               $this->sql .= 'DISTINCT ';\n            }\n            if (empty($field)) {\n               $this->sql .= '*';\n            }\n            if (!empty($field)) {\n               if (!is_array($field)) {\n                  $field = [$field];\n               }\n               foreach ($field as $t => $f) {\n                  if ($first) {\n                     $first = false;\n                  } else {\n                     $this->sql .= ', ';\n                  }\n                  $this->sql .= $this->handleFields($t, $f);\n               }\n            }\n         }\n\n         // FROM table list\n         if (is_array($table)) {\n            if (count($table)) {\n               $table = array_map([DBmysql::class, 'quoteName'], $table);\n               $this->sql .= ' FROM '.implode(\", \", $table);\n            } else {\n               trigger_error(\"Missing table name\", E_USER_ERROR);\n            }\n         } else if ($table) {\n            if ($table instanceof \\AbstractQuery) {\n               $table = $table->getQuery();\n            } else if ($table instanceof \\QueryExpression) {\n               $table = $table->getValue();\n            } else {\n               $table = DBmysql::quoteName($table);\n            }\n            $this->sql .= \" FROM $table\";\n         } else {\n            /*\n             * TODO filter with if ($where || !empty($crit)) {\n             * but not usefull for now, as we CANNOT write somthing like \"SELECT NOW()\"\n             */\n            trigger_error(\"Missing table name\", E_USER_ERROR);\n         }\n\n         // JOIN\n         if (!empty($join)) {\n            $this->sql .= $this->analyseJoins($join);\n         }\n\n         // WHERE criteria list\n         if (!empty($crit)) {\n            $this->sql .= \" WHERE \".$this->analyseCrit($crit);\n         } else if ($where) {\n            $this->sql .= \" WHERE \".$this->analyseCrit($where);\n         }\n\n         // GROUP BY field list\n         if (is_array($groupby)) {\n            if (count($groupby)) {\n               $groupby = array_map([DBmysql::class, 'quoteName'], $groupby);\n               $this->sql .= ' GROUP BY '.implode(\", \", $groupby);\n            } else {\n               trigger_error(\"Missing group by field\", E_USER_ERROR);\n            }\n         } else if ($groupby) {\n            $groupby = DBmysql::quoteName($groupby);\n            $this->sql .= \" GROUP BY $groupby\";\n         }\n\n         // HAVING criteria list\n         if ($having) {\n            $this->sql .= \" HAVING \".$this->analyseCrit($having);\n         }\n\n         // ORDER BY\n         if ($orderby !== null) {\n            $this->sql .= $this->handleOrderClause($orderby);\n         }\n\n         //LIMIT & OFFSET\n         $this->sql .= $this->handleLimits($limit, $start);\n      }\n\n      if ($log == true || defined('GLPI_SQL_DEBUG') && GLPI_SQL_DEBUG == true) {\n         Toolbox::logSqlDebug(\"Generated query:\", $this->getSql());\n      }\n   }\n\n   /**\n    * Handle \"ORDER BY\" SQL clause\n    *\n    * @param string|array $clause Clause parameters\n    *\n    * @reutn string\n    */\n   public function handleOrderClause($clause) {\n      if (!is_array($clause)) {\n         $clause = [$clause];\n      }\n\n      $cleanorderby = [];\n      foreach ($clause as $o) {\n         if (is_string($o)) {\n            $fields = explode(',', $o);\n            foreach ($fields as $field) {\n               $new = '';\n               $tmp = explode(' ', trim($field));\n               $new .= DBmysql::quoteName($tmp[0]);\n               // ASC OR DESC added\n               if (isset($tmp[1]) && in_array($tmp[1], ['ASC', 'DESC'])) {\n                  $new .= ' ' . $tmp[1];\n               }\n               $cleanorderby[] = $new;\n            }\n         } else if ($o instanceof QueryExpression) {\n            $cleanorderby[] = $o->getValue();\n         } else {\n            trigger_error(\"Invalid order clause\", E_USER_ERROR);\n         }\n      }\n\n      return \" ORDER BY \".implode(\", \", $cleanorderby);\n   }\n\n\n   /**\n    * Handle LIMIT and OFFSET\n    *\n    * @param integer $limit  SQL LIMIT\n    * @param integer $offset Start OFFSET (defaults to null)\n    *\n    * @return string\n    */\n   public function handleLimits($limit, $offset = null) {\n      $limits = '';\n      if (is_numeric($limit) && ($limit > 0)) {\n         $limits = \" LIMIT $limit\";\n         if (is_numeric($offset) && ($offset > 0)) {\n            $limits .= \" OFFSET $offset\";\n         }\n      }\n      return $limits;\n   }\n\n   /**\n    * Handle fields\n    *\n    * @param integer|string $t Table name or function\n    * @param array|string   $f Field(s) name(s)\n    *\n    * @return void\n    */\n   private function handleFields($t, $f) {\n      if (is_numeric($t)) {\n         if ($f instanceof \\AbstractQuery) {\n            return $f->getQuery();\n         } else if ($f instanceof \\QueryExpression) {\n            return $f->getValue();\n         } else {\n            return DBmysql::quoteName($f);\n         }\n      } else {\n         switch ($t) {\n            case 'COUNT DISTINCT':\n            case 'DISTINCT COUNT':\n               if (is_array($f)) {\n                  $sub_count = [];\n                  foreach ($f as $sub_f) {\n                     $sub_count[] = $this->handleFieldsAlias(\"COUNT(DISTINCT\", $sub_f, ')');\n                  }\n                  return implode(\", \", $sub_count);\n               } else {\n                  return $this->handleFieldsAlias(\"COUNT(DISTINCT\", $f, ')');\n               }\n               break;\n            case 'COUNT':\n            case 'SUM':\n            case 'AVG':\n            case 'MAX':\n            case 'MIN':\n               if (is_array($f)) {\n                  $sub_aggr = [];\n                  foreach ($f as $sub_f) {\n                     $sub_aggr[] = $this->handleFields($t, $sub_f);\n                  }\n                  return implode(\", \", $sub_aggr);\n               } else {\n                  return $this->handleFieldsAlias($t, $f);\n               }\n               break;\n            default:\n               if (is_array($f)) {\n                  $t = DBmysql::quoteName($t);\n                  $f = array_map([DBmysql::class, 'quoteName'], $f);\n                  return \"$t.\" . implode(\", $t.\", $f);\n               } else {\n                  $t = DBmysql::quoteName($t);\n                  $f = ($f == '*' ? $f : DBmysql::quoteName($f));\n                  return \"$t.$f\";\n               }\n               break;\n         }\n      }\n   }\n\n   /**\n    * Handle alias on fields\n    *\n    * @param string $t      Function name\n    * @param string $f      Field name (with alias if any)\n    * @param string $suffix Suffix to append, defaults to ''\n    *\n    * @return string\n    */\n   private function handleFieldsAlias($t, $f, $suffix = '') {\n      $names = preg_split('/\\s+AS\\s+/i', $f);\n      $expr  = \"$t(\".$this->handleFields(0, $names[0]).\"$suffix)\";\n      if (isset($names[1])) {\n          $expr .= \" AS \" . DBmysql::quoteName($names[1]);\n      }\n\n      return $expr;\n   }\n\n   /**\n    * Retrieve the SQL statement\n    *\n    * @since 9.1\n    *\n    * @return string\n    */\n   public function getSql() {\n      return preg_replace('/ +/', ' ', $this->sql);\n   }\n\n   /**\n    * Destructor\n    *\n    * @return void\n    */\n   function __destruct () {\n      if ($this->res instanceof \\mysqli_result) {\n         $this->conn->freeResult($this->res);\n      }\n   }\n\n   /**\n    * Generate the SQL statement for a array of criteria\n    *\n    * @param string[] $crit Criteria\n    * @param string   $bool Boolean operator (default AND)\n    *\n    * @return string\n    */\n   public function analyseCrit ($crit, $bool = \"AND\") {\n\n      if (!is_array($crit)) {\n         //if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n         //  trigger_error(\"Deprecated usage of SQL in DB/request (criteria)\", E_USER_DEPRECATED);\n         //}\n         return $crit;\n      }\n      $ret = \"\";\n      foreach ($crit as $name => $value) {\n         if (!empty($ret)) {\n            $ret .= \" $bool \";\n         }\n         if (is_numeric($name)) {\n            // no key and direct expression\n            if ($value instanceof QueryExpression) {\n               $ret .= $value->getValue();\n            } else if ($value instanceof QuerySubQuery) {\n               $ret .= $value->getQuery();\n            } else {\n               // No Key case => recurse.\n               $ret .= \"(\" . $this->analyseCrit($value) . \")\";\n            }\n\n         } else if (($name === \"OR\") || ($name === \"AND\")) {\n            // Binary logical operator\n            $ret .= \"(\" . $this->analyseCrit($value, $name) . \")\";\n\n         } else if ($name === \"NOT\") {\n            // Uninary logicial operator\n            $ret .= \" NOT (\" . $this->analyseCrit($value) . \")\";\n\n         } else if ($name === \"FKEY\" || $name === 'ON') {\n            // Foreign Key condition\n            $ret .= $this->analyseFkey($value);\n         } else if ($name === 'RAW') {\n            $key = key($value);\n            $value = current($value);\n            $ret .= '((' . $key . ') ' . $this->analyseCriterion($value) . ')';\n         } else {\n            $ret .= DBmysql::quoteName($name) . ' ' . $this->analyseCriterion($value);\n         }\n      }\n      return $ret;\n   }\n\n   /**\n    * analyse a criterion\n    *\n    * @since 9.3.1\n    *\n    * @param mixed $value Value to analyse\n    *\n    * @return string\n    */\n   private function analyseCriterion($value) {\n      $criterion = null;\n\n      if (is_null($value) || (is_string($value) && strtolower($value) === 'null')) {\n         // NULL condition\n         $criterion = 'IS NULL';\n      } else {\n         if (is_array($value)) {\n            if (count($value) == 2 && isset($value[0]) && $this->isOperator($value[0])) {\n               $comparison = $value[0];\n               $criterion_value = $value[1];\n            } else {\n               if (!count($value)) {\n                  throw new \\RuntimeException('Empty IN are not allowed');\n               }\n               // Array of Values\n               return \"IN (\".$this->analyseCriterionValue($value).\")\";\n            }\n         } else {\n            $comparison = ($value instanceof \\AbstractQuery ? 'IN' : '=');\n            $criterion_value = $value;\n         }\n         $criterion = \"$comparison \" . $this->getCriterionValue($criterion_value);\n      }\n\n      return $criterion;\n   }\n\n   /**\n    * Handle a criterion value\n    *\n    * @since 9.5.0\n    *\n    * @param mixed $value The value to handle. This may be:\n    *                      - an instance of AbstractQuery\n    *                      - a QueryExpression\n    *                      - a value quoted as a name in the db engine\n    *                      - a QueryParam\n    *                      - a value or an array of values\n    *\n    * @return string\n    */\n   private function getCriterionValue($value) {\n      if ($value instanceof \\AbstractQuery) {\n         return $value->getQuery();\n      } else if ($value instanceof \\QueryExpression) {\n         return $value->getValue();\n      } else if (DBmysql::isNameQuoted($value)) { //FIXME: database related\n         return $value;\n      } else if ($value instanceof \\QueryParam) {\n         return $value->getValue();\n      } else {\n         return $this->analyseCriterionValue($value);\n      }\n   }\n\n   private function analyseCriterionValue($value) {\n      $crit_value = null;\n      if (is_array($value)) {\n         foreach ($value as $k => $v) {\n            $value[$k] = DBmysql::quoteValue($v);\n         }\n         $crit_value = implode(', ', $value);\n      } else {\n         $crit_value = DBmysql::quoteValue($value);\n      }\n      return $crit_value;\n   }\n\n   /**\n    * analyse an array of joins criteria\n    *\n    * @since 9.4.0\n    *\n    * @param array $joinarray Array of joins to analyse\n    *       [jointype => [table => criteria]]\n    *\n    * @return string\n    */\n   public function analyseJoins(array $joinarray) {\n      $query = '';\n      foreach ($joinarray as $jointype => $jointables) {\n         if (!in_array($jointype, ['JOIN', 'LEFT JOIN', 'INNER JOIN', 'RIGHT JOIN'])) {\n            throw new \\RuntimeException('BAD JOIN');\n         }\n\n         if ($jointype == 'JOIN') {\n            $jointype = 'LEFT JOIN';\n         }\n\n         if (!is_array($jointables)) {\n            trigger_error(\"BAD JOIN, value must be [ table => criteria ]\", E_USER_ERROR);\n            continue;\n         }\n\n         foreach ($jointables as $jointablekey => $jointablecrit) {\n            if (isset($jointablecrit['TABLE'])) {\n               //not a \"simple\" FKEY\n               $jointablekey = $jointablecrit['TABLE'];\n               unset($jointablecrit['TABLE']);\n            } else if (is_numeric($jointablekey) || $jointablekey == 'FKEY' || $jointablekey == 'ON') {\n               throw new \\RuntimeException('BAD JOIN');\n            }\n\n            if ($jointablekey instanceof \\QuerySubQuery) {\n               $jointablekey = $jointablekey->getQuery();\n            } else {\n               $jointablekey = DBmysql::quoteName($jointablekey);\n            }\n\n            $query .= \" $jointype $jointablekey ON (\" . $this->analyseCrit($jointablecrit) . \")\";\n         }\n      }\n      return $query;\n   }\n\n   /**\n    * Analyse foreign keys\n    *\n    * @param mixed $values Values for Foreign keys\n    *\n    * @return string\n    */\n   private function analyseFkey($values) {\n      if (is_array($values)) {\n         $keys = array_keys($values);\n         if (count($values) == 2) {\n            $t1 = $keys[0];\n            $f1 = $values[$t1];\n            $t2 = $keys[1];\n            $f2 = $values[$t2];\n            if ($f2 instanceof QuerySubQuery) {\n               return (is_numeric($t1) ? DBmysql::quoteName($f1) : DBmysql::quoteName($t1) . '.' . DBmysql::quoteName($f1)) . ' = ' .\n                  $f2->getQuery();\n            } else {\n               return (is_numeric($t1) ? DBmysql::quoteName($f1) : DBmysql::quoteName($t1) . '.' . DBmysql::quoteName($f1)) . ' = ' .\n                  (is_numeric($t2) ? DBmysql::quoteName($f2) : DBmysql::quoteName($t2) . '.' . DBmysql::quoteName($f2));\n            }\n         } else if (count($values) == 3) {\n            $condition = array_pop($values);\n            $fkey = $this->analyseFkey($values);\n            return $fkey . ' ' . key($condition) . ' ' . $this->analyseCrit(current($condition));\n         }\n      }\n      trigger_error(\"BAD FOREIGN KEY, should be [ table1 => key1, table2 => key2 ] or [ table1 => key1, table2 => key2, [criteria]]\", E_USER_ERROR);\n   }\n\n   /**\n    * Reset rows parsing (go to first offset) & provide first row\n    *\n    * @return string[]|null fetch_assoc() of first results row\n    */\n   public function rewind() {\n      if ($this->res && $this->conn->numrows($this->res)) {\n         $this->conn->dataSeek($this->res, 0);\n      }\n      $this->position = 0;\n      return $this->next();\n   }\n\n   /**\n    * Provide actual row\n    *\n    * @return mixed\n    */\n   public function current() {\n      return $this->row;\n   }\n\n   /**\n    * Get current key value\n    *\n    * @return mixed\n    */\n   public function key() {\n      return (isset($this->row[\"id\"]) ? $this->row[\"id\"] : $this->position - 1);\n   }\n\n   /**\n    * Return next row of query results\n    *\n    * @return string[]|null fetch_assoc() of first results row\n    */\n   public function next() {\n      if (!($this->res instanceof \\mysqli_result)) {\n         return false;\n      }\n      $this->row = $this->conn->fetchAssoc($this->res);\n      ++$this->position;\n      return $this->row;\n   }\n\n   /**\n    * @todo phpdoc...\n    *\n    * @return boolean\n    */\n   public function valid() {\n      return $this->res instanceof \\mysqli_result && $this->row;\n   }\n\n   /**\n    * Number of rows on a result\n    *\n    * @return integer\n    */\n   public function numrows() {\n      return ($this->res instanceof \\mysqli_result ? $this->conn->numrows($this->res) : 0);\n   }\n\n   /**\n    * Number of rows on a result\n    *\n    * @since 9.2\n    *\n    * @return integer\n    */\n   public function count() {\n      return ($this->res instanceof \\mysqli_result ? $this->conn->numrows($this->res) : 0);\n   }\n\n   /**\n    * Do we have an operator?\n    *\n    * @param string $value Value to check\n    *\n    * @return boolean\n    */\n   public function isOperator($value) {\n      return in_array($value, $this->allowed_operators, true);\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n *  Report class\n *\n * @ since version 0.84\n**/\nclass Report extends CommonGLPI{\n\n   static protected $notable = false;\n   static $rightname         = 'reports';\n\n\n   static function getTypeName($nb = 0) {\n      return _n('Report', 'Reports', $nb);\n   }\n\n\n   /**\n    * @see CommonGLPI::getMenuShorcut()\n    *\n    *  @since 0.85\n   **/\n   static function getMenuShorcut() {\n      return 'e';\n   }\n\n\n   /**\n    * Show report title\n   **/\n   static function title() {\n      global $PLUGIN_HOOKS, $CFG_GLPI;\n\n      // Report generation\n      // Default Report included\n      $report_list = [];\n      $report_list[\"default\"][\"name\"] = __('Default report');\n      $report_list[\"default\"][\"file\"] = \"report.default.php\";\n\n      if (Contract::canView()) {\n         // Rapport ajoute par GLPI V0.2\n         $report_list[\"Contrats\"][\"name\"] = __('By contract');\n         $report_list[\"Contrats\"][\"file\"] = \"report.contract.php\";\n      }\n      if (Infocom::canView()) {\n         $report_list[\"Par_annee\"][\"name\"] = __('By year');\n         $report_list[\"Par_annee\"][\"file\"] = \"report.year.php\";\n         $report_list[\"Infocoms\"][\"name\"]  = __('Hardware financial and administrative information');\n         $report_list[\"Infocoms\"][\"file\"]  = \"report.infocom.php\";\n         $report_list[\"Infocoms2\"][\"name\"] = __('Other financial and administrative information (licenses, cartridges, consumables)');\n         $report_list[\"Infocoms2\"][\"file\"] = \"report.infocom.conso.php\";\n      }\n      if (Session::haveRight(\"networking\", READ)) {\n         $report_list[\"Rapport prises reseau\"][\"name\"] = __('Network report');\n         $report_list[\"Rapport prises reseau\"][\"file\"] = \"report.networking.php\";\n      }\n      if (Session::haveRight(\"reservation\", READ)) {\n         $report_list[\"reservation\"][\"name\"] = __('Loan');\n         $report_list[\"reservation\"][\"file\"] = \"report.reservation.php\";\n      }\n      if (Computer::canView()\n          || Monitor::canView()\n          || Session::haveRight(\"networking\", READ)\n          || Peripheral::canView()\n          || Printer::canView()\n          || Phone::canView()) {\n         $report_list[\"state\"][\"name\"] = __('Status');\n         $report_list[\"state\"][\"file\"] = \"report.state.php\";\n      }\n      //Affichage du tableau de presentation des stats\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr><th colspan='2'>\".__('Select the report you want to generate').\"</th></tr>\";\n      echo \"<tr class='tab_bg_1'><td class='center'>\";\n\n      $selected = -1;\n      $values   = [$CFG_GLPI[\"root_doc\"].'/front/report.php' => Dropdown::EMPTY_VALUE];\n\n      foreach ($report_list as $val => $data) {\n         $name          = $data['name'];\n         $file          = $data['file'];\n         $key           = $CFG_GLPI[\"root_doc\"].\"/front/\".$file;\n         $values[$key]  = $name;\n         if (stripos($_SERVER['REQUEST_URI'], $key) !== false) {\n            $selected = $key;\n         }\n      }\n\n      $names    = [];\n      $optgroup = [];\n      if (isset($PLUGIN_HOOKS[\"reports\"]) && is_array($PLUGIN_HOOKS[\"reports\"])) {\n         foreach ($PLUGIN_HOOKS[\"reports\"] as $plug => $pages) {\n            if (!Plugin::isPluginActive($plug)) {\n               continue;\n            }\n            if (is_array($pages) && count($pages)) {\n               foreach ($pages as $page => $name) {\n                  $names[$plug.'/'.$page] = [\"name\" => $name,\n                                                  \"plug\" => $plug];\n                  $optgroup[$plug] = Plugin::getInfo($plug, 'name');\n               }\n            }\n         }\n         asort($names);\n      }\n\n      foreach ($optgroup as $opt => $title) {\n         $group = $title;\n         foreach ($names as $key => $val) {\n            if ($opt == $val[\"plug\"]) {\n               $file                  = $CFG_GLPI[\"root_doc\"].\"/plugins/\".$key;\n               $values[$group][$file] = $val[\"name\"];\n               if (stripos($_SERVER['REQUEST_URI'], $file) !== false) {\n                  $selected = $file;\n               }\n            }\n         }\n      }\n\n      Dropdown::showFromArray('statmenu', $values,\n                              ['on_change' => \"window.location.href=this.options[this.selectedIndex].value\",\n                                    'value'     => $selected]);\n      echo \"</td>\";\n      echo \"</tr>\";\n      echo \"</table>\";\n   }\n\n\n   /**\n    * Show Default Report\n    *\n    * @since 0.84\n   **/\n   static function showDefaultReport() {\n      global $DB;\n\n      // Title\n      echo \"<span class='big b'>GLPI \".Report::getTypeName(Session::getPluralNumber()).\"</span><br><br>\";\n\n      // 1. Get counts of itemtype\n      $items     = ['Computer', 'Monitor', 'NetworkEquipment', 'Peripheral', 'Phone',\n                         'Printer', 'Software'];\n\n      $linkitems = ['Monitor', 'Peripheral', 'Phone', 'Printer'];\n\n      echo \"<table class='tab_cadrehov'>\";\n\n      foreach ($items as $itemtype) {\n         $table_item = getTableForItemType($itemtype);\n         $criteria = [\n            'COUNT'  => 'cpt',\n            'FROM'   => $table_item,\n            'WHERE'  => [\n               \"$table_item.is_deleted\"   => 0,\n               \"$table_item.is_template\"  => 0\n            ] + getEntitiesRestrictCriteria($table_item)\n         ];\n\n         if (in_array($itemtype, $linkitems)) {\n            $criteria['LEFT JOIN'] = [\n               'glpi_computers_items' => [\n                  'ON' => [\n                     'glpi_computers_items'  => 'items_id',\n                     $table_item             => 'id', [\n                        'AND' => [\n                           'glpi_computers_items.itemtype' => $itemtype\n                        ]\n                     ]\n                  ]\n               ]\n            ];\n         }\n\n         $result = $DB->request($criteria)->next();\n         $number = (int)$result['cpt'];\n\n         echo \"<tr class='tab_bg_2'><td>\".$itemtype::getTypeName(Session::getPluralNumber()).\"</td>\";\n         echo \"<td class='numeric'>$number</td></tr>\";\n      }\n\n      echo \"<tr class='tab_bg_1'><td colspan='2' class='b'>\".OperatingSystem::getTypeName(1).\"</td></tr>\";\n\n      // 2. Get some more number data (operating systems per computer)\n      $iterator = $DB->request([\n         'SELECT'    => [\n            'COUNT' => '* AS count',\n            'glpi_operatingsystems.name AS name'\n         ],\n         'FROM'      => 'glpi_items_operatingsystems',\n         'LEFT JOIN' => [\n            'glpi_operatingsystems' => [\n               'ON' => [\n                  'glpi_items_operatingsystems' => 'operatingsystems_id',\n                  'glpi_operatingsystems'       => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['is_deleted' => 0],\n         'GROUPBY'   => 'glpi_operatingsystems.name'\n      ]);\n\n      while ($data = $iterator->next()) {\n         if (empty($data['name'])) {\n            $data['name'] = Dropdown::EMPTY_VALUE;\n         }\n         echo \"<tr class='tab_bg_2'><td>\".$data['name'].\"</td>\";\n         echo \"<td class='numeric'>\".$data['count'].\"</td></tr>\";\n      }\n\n      // Get counts of types\n\n      $val   = array_flip($items);\n      unset($val[\"Software\"]);\n      $items = array_flip($val);\n\n      foreach ($items as $itemtype) {\n         echo \"<tr class='tab_bg_1'><td colspan='2' class='b'>\".$itemtype::getTypeName(Session::getPluralNumber()).\n              \"</td></tr>\";\n\n         $table_item = getTableForItemType($itemtype);\n         $typeclass  = $itemtype.\"Type\";\n         $type_table = getTableForItemType($typeclass);\n         $typefield  = getForeignKeyFieldForTable(getTableForItemType($typeclass));\n\n         $criteria = [\n            'SELECT'    => [\n               'COUNT'  => '* AS count',\n               \"$type_table.name AS name\"\n            ],\n            'FROM'      => $table_item,\n            'LEFT JOIN' => [\n               $type_table => [\n                  'ON' => [\n                     $table_item => $typefield,\n                     $type_table => 'id'\n                  ]\n               ]\n            ],\n            'WHERE'     => [\n               \"$table_item.is_deleted\"   => 0,\n               \"$table_item.is_template\"  => 0\n            ] + getEntitiesRestrictCriteria($table_item),\n            'GROUPBY'   => \"$type_table.name\"\n         ];\n\n         if (in_array($itemtype, $linkitems)) {\n            $criteria['LEFT JOIN']['glpi_computers_items'] = [\n               'ON' => [\n                  'glpi_computers_items'  => 'items_id',\n                  $table_item             => 'id', [\n                     'AND' => [\n                        'glpi_computers_items.itemtype'  => $itemtype\n                     ]\n                  ]\n               ]\n            ];\n         }\n\n         $iterator = $DB->request($criteria);\n         while ($data = $iterator->next()) {\n            if (empty($data['name'])) {\n               $data['name'] = Dropdown:: EMPTY_VALUE;\n            }\n            echo \"<tr class='tab_bg_2'><td>\".$data['name'].\"</td>\";\n            echo \"<td class='numeric'>\".$data['count'].\"</td></tr>\";\n         }\n      }\n      echo \"</table>\";\n   }\n\n\n   /**\n    * Get report informations\n    *\n    * @param string $from      From table\n    * @param array  $joincrit  Join criteria\n    * @param array  $where     Where clause\n    * @param array  $select    Extra select clause\n    * @param array  $leftjoin  Extra LEFT JOIN clause\n    * @param array  $innerjoin Extra INNER JOIN clause\n    * @param array  $order     Order clause\n    * @param string $extra     ?\n    *\n    * @return void\n    *\n    * @since 10.0.0\n   **/\n   static function reportForNetworkInformations(\n      $from,\n      array $joincrit,\n      array $where = [],\n      array $select = [],\n      array $leftjoin = [],\n      array $innerjoin = [],\n      array $order = [],\n      $extra = ''\n   ) {\n      global $DB;\n\n      // This SQL request matches the NetworkPort, then its NetworkName and IPAddreses. It also\n      //      match opposite NetworkPort, then its NetworkName and IPAddresses.\n      // Results are groupes by NetworkPort. Then all IPs are concatenated by comma as separator.\n\n      if (count($joincrit) === 3) {\n         $andcrit = array_pop($joincrit);\n         $andcrit['AND']['PORT_1.is_deleted'] = 0;\n         $joincrit[] = $andcrit;\n      } else {\n         $joincrit[]['AND']['PORT_1.is_deleted'] = 0;\n      }\n\n      $criteria = [\n         'SELECT'       => array_merge([\n            'PORT_1.itemtype AS itemtype_1',\n            'PORT_1.items_id AS items_id_1',\n            'PORT_1.id AS id_1',\n            'PORT_1.name AS port_1',\n            'PORT_1.mac AS mac_1',\n            'PORT_1.logical_number AS logical_1',\n            new QueryExpression('GROUP_CONCAT(' . $DB->quoteName('ADDR_1.name') . ' SEPARATOR ' . $DB->quote(',') . ') AS ' . $DB->quoteName('ip_1')),\n            'PORT_2.itemtype AS itemtype_2',\n            'PORT_2.items_id AS items_id_2',\n            'PORT_2.id AS id_2',\n            'PORT_2.name AS port_2',\n            'PORT_2.mac AS mac_2',\n            new QueryExpression('GROUP_CONCAT(' . $DB->quoteName('ADDR_2.name') .' SEPARATOR ' . $DB->quote(',') . ') AS ' . $DB->quoteName('ip_2'))\n         ], $select),\n         'FROM'         => $from,\n         'INNER JOIN'   => $innerjoin + [\n            'glpi_networkports AS PORT_1' => [\n               'ON' => $joincrit\n            ]\n         ],\n         'LEFT JOIN'    => [\n            'glpi_networknames AS NAME_1' => [\n               'ON'  => [\n                  'PORT_1' => 'id',\n                  'NAME_1' => 'items_id', [\n                     'AND'    => [\n                        'NAME_1.itemtype'    => 'NetworkPort',\n                        'NAME_1.is_deleted'  => 0\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_ipaddresses AS ADDR_1'  => [\n               'ON'  => [\n                  'NAME_1' => 'id',\n                  'ADDR_1' => 'items_id', [\n                     'AND'    => [\n                        'ADDR_1.itemtype'    => 'NetworkName',\n                        'ADDR_1.is_deleted'  => 0\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_networkports_networkports AS LINK'  => [\n               'ON'  =>[\n                  'LINK'   => 'networkports_id_1',\n                  'PORT_1' => 'id', [\n                     'OR'     => [\n                        'LINK.networkports_id_2'   => $DB->quoteName('PORT_1.id')\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_networkports AS PORT_2' => [\n               'ON'  => [\n                  'PORT_2' => 'id',\n                  new QueryExpression(\n                     'IF(' . $DB->quoteName('LINK.networkports_id_1') . ' = ' . $DB->quoteName('PORT_1.id') . ', ' .\n                        $DB->quoteName('LINK.networkports_id_2') . ', ' .\n                        $DB->quoteName('LINK.networkports_id_1') . ')'\n                  )\n               ]\n            ],\n            'glpi_networknames AS NAME_2' => [\n               'ON'  => [\n                  'PORT_2' => 'id',\n                  'NAME_2' => 'items_id', [\n                     'AND'    => [\n                        'NAME_2.itemtype'     => 'NetworkPort',\n                        'NAME_2.is_deleted'   => 0\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_ipaddresses AS ADDR_2'  => [\n               'ON'  => [\n                  'NAME_2' => 'id',\n                  'ADDR_2' => 'items_id', [\n                     'AND'    => [\n                        'ADDR_2.itemtype'    => 'NetworkName',\n                        'ADDR_2.is_deleted'  => 0\n                     ]\n                  ]\n               ]\n            ]\n         ] + $leftjoin,\n         'WHERE'        => $where,\n         'GROUPBY'      => ['PORT_1.id']\n      ];\n\n      if (count($order)) {\n         $criteria['ORDER'] = $order;\n      }\n\n      $iterator = $DB->request($criteria);\n\n      if (count($iterator)) {\n         echo \"<table class='tab_cadre_fixehov'>\";\n         echo \"<tr>\";\n         if (!empty($extra)) {\n            echo \"<td>&nbsp;</td>\";\n         }\n         echo \"<th colspan='5'>\".__('Device 1').\"</th>\";\n         echo \"<th colspan='5'>\".__('Device 2').\"</th>\";\n         echo \"</tr>\\n\";\n\n         echo \"<tr>\";\n         if (!empty($extra)) {\n            echo \"<th>$extra</th>\";\n         }\n         echo \"<th>\"._n('Device type', 'Device types', 1).\"</th>\";\n         echo \"<th>\".__('Device name').\"</th>\";\n         echo \"<th>\".__('Port Number').\"</th>\";\n         echo \"<th>\".NetworkPort::getTypeName(1).\"</th>\";\n         echo \"<th>\".__('MAC address').\"</th>\";\n         echo \"<th>\".IPAddress::getTypeName(0).\"</th>\";\n         echo \"<th>\".NetworkPort::getTypeName(1).\"</th>\";\n         echo \"<th>\".__('MAC address').\"</th>\";\n         echo \"<th>\".IPAddress::getTypeName(0).\"</th>\";\n         echo \"<th>\"._n('Device type', 'Device types', 1).\"</th>\";\n         echo \"<th>\".__('Device name').\"</th>\";\n         echo \"</tr>\\n\";\n\n         while ($line = $iterator->next()) {\n            echo \"<tr class='tab_bg_1'>\";\n\n            // To ensure that the NetworkEquipment remain the first item, we test its type\n            if ($line['itemtype_2'] == 'NetworkEquipment') {\n               $idx = 2;\n            } else {\n               $idx = 1;\n            }\n\n            if (!empty($extra)) {\n               echo \"<td>\".(empty($line['extra']) ? NOT_AVAILABLE : $line['extra']).\"</td>\";\n            }\n\n            $itemtype = $line[\"itemtype_$idx\"];\n            if (!empty($itemtype)) {\n               echo \"<td>\".$itemtype::getTypeName(1).\"</td>\";\n               $item_name = '';\n               if ($item = getItemForItemtype($itemtype)) {\n                  if ($item->getFromDB($line[\"items_id_$idx\"])) {\n                     $item_name = $item->getName();\n                  }\n               }\n               echo \"<td>\".(empty($item_name) ? NOT_AVAILABLE : $item_name).\"</td>\";\n            } else {\n               echo \"<td> \".NOT_AVAILABLE.\" </td>\";\n               echo \"<td> \".NOT_AVAILABLE.\" </td>\";\n            }\n            echo \"<td>\".(empty($line[\"logical_$idx\"]) ? NOT_AVAILABLE : $line[\"logical_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"port_$idx\"]) ? NOT_AVAILABLE : $line[\"port_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"mac_$idx\"]) ? NOT_AVAILABLE : $line[\"mac_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"ip_$idx\"]) ? NOT_AVAILABLE : $line[\"ip_$idx\"]).\"</td>\";\n\n            if ($idx == 1) {\n               $idx = 2;\n            } else {\n               $idx = 1;\n            }\n\n            echo \"<td>\".(empty($line[\"port_$idx\"]) ? NOT_AVAILABLE : $line[\"port_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"mac_$idx\"]) ? NOT_AVAILABLE : $line[\"mac_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"ip_$idx\"]) ? NOT_AVAILABLE : $line[\"ip_$idx\"]).\"</td>\";\n            $itemtype = $line[\"itemtype_$idx\"];\n            if (!empty($itemtype)) {\n               echo \"<td>\".$itemtype::getTypeName(1).\"</td>\";\n               $item_name = '';\n               if ($item = getItemForItemtype($itemtype)) {\n                  if ($item->getFromDB($line[\"items_id_$idx\"])) {\n                     $item_name = $item->getName();\n                  }\n               }\n               echo \"<td>\".(empty($item_name) ? NOT_AVAILABLE : $item_name).\"</td>\";\n            } else {\n               echo \"<td> \".NOT_AVAILABLE.\" </td>\";\n               echo \"<td> \".NOT_AVAILABLE.\" </td>\";\n            }\n\n            echo \"</tr>\\n\";\n         }\n         echo \"</table><br><hr><br>\";\n      }\n   }\n\n\n   /**\n    * @since 0.85\n    *\n    * @see commonDBTM::getRights()\n   **/\n   function getRights($interface = 'central') {\n\n      $values = [ READ => __('Read')];\n      return $values;\n   }\n\n\n   static function getIcon() {\n      return \"fas fa-file-medical-alt\";\n   }\n\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units;\n\n/* Test for inc/dbmysql.class.php */\n\nclass DB extends \\GLPITestCase {\n\n   public function testTableExist() {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->boolean($this->testedInstance->tableExists('glpi_configs'))->isTrue()\n            ->boolean($this->testedInstance->tableExists('fakeTable'))->isFalse();\n   }\n\n   public function testFieldExists() {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->boolean($this->testedInstance->fieldExists('glpi_configs', 'id'))->isTrue()\n            ->boolean($this->testedInstance->fieldExists('glpi_configs', 'ID'))->isFalse()\n            ->boolean($this->testedInstance->fieldExists('glpi_configs', 'fakeField'))->isFalse()\n            ->when(\n               function () {\n                  $this->boolean($this->testedInstance->fieldExists('fakeTable', 'id'))->isFalse();\n               }\n            )->error\n               ->withType(E_USER_WARNING)\n               ->exists()\n            ->when(\n               function () {\n                  $this->boolean($this->testedInstance->fieldExists('fakeTable', 'fakeField'))->isFalse();\n               }\n            )->error\n               ->withType(E_USER_WARNING)\n               ->exists();\n   }\n\n   protected function dataName() {\n      return [\n         ['field', '`field`'],\n         ['`field`', '`field`'],\n         ['*', '*'],\n         ['table.field', '`table`.`field`'],\n         ['table.*', '`table`.*'],\n         ['field AS f', '`field` AS `f`'],\n         ['field as f', '`field` AS `f`'],\n         ['table.field as f', '`table`.`field` AS `f`'],\n      ];\n   }\n\n   /**\n    * @dataProvider dataName\n    */\n   public function testQuoteName($raw, $quoted) {\n      $this->string(\\DB::quoteName($raw))->isIdenticalTo($quoted);\n   }\n\n   protected function dataValue() {\n      return [\n         ['foo', \"'foo'\"],\n         ['bar', \"'bar'\"],\n         ['42', \"'42'\"],\n         ['+33', \"'+33'\"],\n         [null, 'NULL'],\n         ['null', 'NULL'],\n         ['NULL', 'NULL'],\n         ['`field`', '`field`'],\n         ['`field', \"'`field'\"]\n      ];\n   }\n\n   /**\n    * @dataProvider dataValue\n    */\n   public function testQuoteValue($raw, $expected) {\n      $this->string(\\DB::quoteValue($raw))->isIdenticalTo($expected);\n   }\n\n\n   protected function dataInsert() {\n      return [\n         [\n            'table', [\n               'field'  => 'value',\n               'other'  => 'doe'\n            ],\n            'INSERT INTO `table` (`field`, `other`) VALUES (\\'value\\', \\'doe\\')'\n         ], [\n            '`table`', [\n               '`field`'  => 'value',\n               '`other`'  => 'doe'\n            ],\n            'INSERT INTO `table` (`field`, `other`) VALUES (\\'value\\', \\'doe\\')'\n         ], [\n            'table', [\n               'field'  => new \\QueryParam(),\n               'other'  => new \\QueryParam()\n            ],\n            'INSERT INTO `table` (`field`, `other`) VALUES (?, ?)'\n         ], [\n            'table', [\n               'field'  => new \\QueryParam('field'),\n               'other'  => new \\QueryParam('other')\n            ],\n            'INSERT INTO `table` (`field`, `other`) VALUES (:field, :other)'\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider dataInsert\n    */\n   public function testBuildInsert($table, $values, $expected) {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->buildInsert($table, $values))->isIdenticalTo($expected);\n   }\n\n   protected function dataUpdate() {\n      return [\n         [\n            'table', [\n               'field'  => 'value',\n               'other'  => 'doe'\n            ], [\n               'id'  => 1\n            ],\n            'UPDATE `table` SET `field` = \\'value\\', `other` = \\'doe\\' WHERE `id` = \\'1\\''\n         ], [\n            'table', [\n               'field'  => 'value'\n            ], [\n               'id'  => [1, 2]\n            ],\n            'UPDATE `table` SET `field` = \\'value\\' WHERE `id` IN (\\'1\\', \\'2\\')'\n         ], [\n            'table', [\n               'field'  => 'value'\n            ], [\n               'NOT'  => ['id' => [1, 2]]\n            ],\n            'UPDATE `table` SET `field` = \\'value\\' WHERE  NOT (`id` IN (\\'1\\', \\'2\\'))'\n         ], [\n            'table', [\n               'field'  => new \\QueryParam()\n            ], [\n               'NOT' => ['id' => [new \\QueryParam(), new \\QueryParam()]]\n            ],\n            'UPDATE `table` SET `field` = ? WHERE  NOT (`id` IN (?, ?))'\n         ], [\n            'table', [\n               'field'  => new \\QueryParam('field')\n            ], [\n               'NOT' => ['id' => [new \\QueryParam('idone'), new \\QueryParam('idtwo')]]\n            ],\n            'UPDATE `table` SET `field` = :field WHERE  NOT (`id` IN (:idone, :idtwo))'\n         ], [\n            'table', [\n               'field'  => new \\QueryExpression(\\DB::quoteName('field') . ' + 1')\n            ], [\n               'id'  => [1, 2]\n            ],\n            'UPDATE `table` SET `field` = `field` + 1 WHERE `id` IN (\\'1\\', \\'2\\')'\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider dataUpdate\n    */\n   public function testBuildUpdate($table, $values, $where, $expected) {\n       $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->buildUpdate($table, $values, $where))->isIdenticalTo($expected);\n   }\n\n   public function testBuildUpdateWException() {\n      $this->exception(\n         function() {\n            $this\n               ->if($this->newTestedInstance)\n               ->then\n                  ->string($this->testedInstance->buildUpdate('table', ['a' => 'b'], []))->isIdenticalTo('');\n         }\n      )->hasMessage('Cannot run an UPDATE query without WHERE clause!');\n   }\n\n   protected function dataDelete() {\n      return [\n         [\n            'table', [\n               'id'  => 1\n            ],\n            'DELETE `table` FROM `table` WHERE `id` = \\'1\\''\n         ], [\n            'table', [\n               'id'  => [1, 2]\n            ],\n            'DELETE `table` FROM `table` WHERE `id` IN (\\'1\\', \\'2\\')'\n         ], [\n            'table', [\n               'NOT'  => ['id' => [1, 2]]\n            ],\n            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (\\'1\\', \\'2\\'))'\n         ], [\n            'table', [\n               'NOT'  => ['id' => [new \\QueryParam(), new \\QueryParam()]]\n            ],\n            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (?, ?))'\n         ], [\n            'table', [\n               'NOT'  => ['id' => [new \\QueryParam('idone'), new \\QueryParam('idtwo')]]\n            ],\n            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (:idone, :idtwo))'\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider dataDelete\n    */\n   public function testBuildDelete($table, $where, $expected) {\n       $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->buildDelete($table, $where))->isIdenticalTo($expected);\n   }\n\n   public function testBuildDeleteWException() {\n      $this->exception(\n         function() {\n            $this\n               ->if($this->newTestedInstance)\n               ->then\n                  ->string($this->testedInstance->buildDelete('table', []))->isIdenticalTo('');\n         }\n      )->hasMessage('Cannot run an DELETE query without WHERE clause!');\n   }\n\n   public function testListTables() {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->given($tables = $this->testedInstance->listTables())\n            ->object($tables)\n               ->isInstanceOf(\\DBmysqlIterator::class)\n            ->integer(count($tables))\n               ->isGreaterThan(100)\n            ->given($tables = $this->testedInstance->listTables('glpi_configs'))\n            ->object($tables)\n               ->isInstanceOf(\\DBmysqlIterator::class)\n               ->hasSize(1);\n\n   }\n\n   public function testTablesHasItemtype() {\n      $dbu = new \\DbUtils();\n      $this->newTestedInstance();\n      $list = $this->testedInstance->listTables();\n      $this->object($list)->isInstanceOf(\\DBmysqlIterator::class);\n      $this->integer(count($list))->isGreaterThan(200);\n\n      //check if each table has a corresponding itemtype\n      while ($line = $list->next()) {\n         $this->array($line)\n            ->hasSize(1);\n         $table = $line['TABLE_NAME'];\n         if ($table == 'glpi_appliancerelations') {\n            //FIXME temporary hack for unit tests\n            continue;\n         }\n         $type = $dbu->getItemTypeForTable($table);\n\n         $this->object($item = $dbu->getItemForItemtype($type))->isInstanceOf('CommonDBTM', $table);\n         $this->string(get_class($item))->isIdenticalTo($type);\n         $this->string($dbu->getTableForItemType($type))->isIdenticalTo($table);\n      }\n   }\n\n   public function testEscape() {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->escape('nothing to do'))->isIdenticalTo('nothing to do')\n            ->string($this->testedInstance->escape(\"shoul'be escaped\"))->isIdenticalTo(\"shoul\\\\'be escaped\")\n            ->string($this->testedInstance->escape(\"First\\nSecond\"))->isIdenticalTo(\"First\\\\nSecond\")\n            ->string($this->testedInstance->escape(\"First\\rSecond\"))->isIdenticalTo(\"First\\\\rSecond\")\n            ->string($this->testedInstance->escape('Hi, \"you\"'))->isIdenticalTo('Hi, \\\\\"you\\\\\"');\n   }\n\n   protected function commentsProvider() {\n      return [\n         [\n            'sql' => \"SQL EXPRESSION;\n/* Here begins a\n   multiline comment */\nOTHER EXPRESSION;\n\",\n            'expected'  => \"SQL EXPRESSION;\nOTHER EXPRESSION;\"\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider commentsProvider\n    */\n   public function testRemoveSqlComments($sql, $expected) {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->removeSqlComments($sql))->isIdenticalTo($expected);\n   }\n\n   /**\n    * Sql expressions provider\n    */\n   protected function sqlProvider () {\n      return array_merge([\n         [\n            'sql'       => \"SQL;\\n-- comment;\\n\\nSQL2;\",\n            'expected'  => \"SQL;\\n\\nSQL2;\"\n         ]\n      ], $this->commentsProvider());\n   }\n\n   /**\n    * @dataProvider sqlProvider\n    */\n   public function testRemoveSqlRemarks($sql, $expected) {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->removeSqlRemarks($sql))->isIdenticalTo($expected);\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units;\n\nuse DbTestCase;\nuse Monolog\\Logger;\nuse Monolog\\Handler\\TestHandler;\n\n// Generic test classe, to be extended for CommonDBTM Object\n\nclass DBmysqlIterator extends DbTestCase {\n\n   private $it;\n\n   public function beforeTestMethod($method) {\n      parent::beforeTestMethod($method);\n      $this->it = new \\DBmysqlIterator(null);\n   }\n\n   public function testQuery() {\n      $req = 'SELECT Something FROM Somewhere';\n      $it = $this->it->execute($req);\n      $this->string($it->getSql())->isIdenticalTo($req);\n\n      $req = 'SELECT @@sql_mode as mode';\n      $it = $this->it->execute($req);\n      $this->string($it->getSql())->isIdenticalTo($req);\n   }\n\n\n   public function testSqlError() {\n      global $DB;\n\n      $this->exception(\n         function () use ($DB) {\n            $DB->request('fakeTable');\n         }\n      )\n         ->isInstanceOf('GlpitestSQLerror')\n         ->message\n            ->contains(\"fakeTable' doesn't exist\");\n   }\n\n\n   public function testOnlyTable() {\n\n      $it = $this->it->execute('foo');\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute('`foo`');\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute(['foo', '`bar`']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`, `bar`');\n   }\n\n\n   /**\n    * This is really an error, no table but a WHERE clase\n    */\n   public function testNoTableWithWhere() {\n      $this->when(\n         function () {\n            $it = $this->it->execute('', ['foo' => 1]);\n            $this->string($it->getSql())->isIdenticalTo('SELECT * WHERE `foo` = \\'1\\'');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing table name')\n         ->exists();\n   }\n\n\n   /**\n    * Temporarily, this is an error, will be allowed later\n    */\n   public function testNoTableWithoutWhere() {\n      $this->when(\n         function () {\n            $it = $this->it->execute('');\n            $this->string($it->getSql())->isIdenticalTo('SELECT *');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing table name')\n         ->exists();\n   }\n\n\n   /**\n    * Temporarily, this is an error, will be allowed later\n    */\n   public function testNoTableWithoutWhereBis() {\n      $this->when(\n         function () {\n            $it = $this->it->execute(['FROM' => []]);\n            $this->string('SELECT *', $it->getSql(), 'No table');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing table name')\n         ->exists();\n\n   }\n\n\n   public function testDebug() {\n      global $SQLLOGGER;\n\n      foreach ($SQLLOGGER->getHandlers() as $handler) {\n         if ($handler instanceof TestHandler) {\n            break;\n         }\n      }\n\n      //clean from previous queries\n      $handler->clear();\n      define('GLPI_SQL_DEBUG', true);\n\n      $id = mt_rand();\n      $this->it->execute('foo', ['FIELDS' => 'name', 'id = ' . $id]);\n\n      $this->array($handler->getRecords())->hasSize(1);\n      $this->boolean(\n         $handler->hasRecordThatContains(\n            'Generated query: SELECT `name` FROM `foo` WHERE (id = ' . $id . ')',\n            Logger::DEBUG\n         )\n      )->isTrue();\n   }\n\n\n   public function testFields() {\n      $it = $this->it->execute('foo', ['FIELDS' => 'bar', 'DISTINCT' => true]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT DISTINCT `bar` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['bar', 'baz'], 'DISTINCT' => true]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT DISTINCT `bar`, `baz` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => 'bar']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `bar` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['bar', '`baz`']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `bar`, `baz` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['b' => 'bar']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `b`.`bar` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['b' => 'bar', '`c`' => '`baz`']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `b`.`bar`, `c`.`baz` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['a' => ['`bar`', 'baz']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `a`.`bar`, `a`.`baz` FROM `foo`');\n\n      $it = $this->it->execute(['foo', 'bar'], ['FIELDS' => ['foo' => ['*']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.* FROM `foo`, `bar`');\n\n      $it = $this->it->execute(['foo', 'bar'], ['FIELDS' => ['foo.*']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.* FROM `foo`, `bar`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['SUM' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT SUM(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['AVG' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT AVG(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['MIN' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT MIN(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['MAX' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT MAX(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => new \\QueryExpression('IF(bar IS NOT NULL, 1, 0) AS baz')]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT IF(bar IS NOT NULL, 1, 0) AS baz FROM `foo`');\n   }\n\n   public function testFrom() {\n      $this->it->buildQuery(['FIELDS' => 'bar', 'FROM' => 'foo']);\n      $this->string($this->it->getSql())->isIdenticalTo('SELECT `bar` FROM `foo`');\n\n      $this->it->buildQuery(['FIELDS' => 'bar', 'FROM' => 'foo as baz']);\n      $this->string($this->it->getSql())->isIdenticalTo('SELECT `bar` FROM `foo` AS `baz`');\n\n      $this->it->buildQuery(['FIELDS' => 'bar', 'FROM' => ['foo', 'baz']]);\n      $this->string($this->it->getSql())->isIdenticalTo('SELECT `bar` FROM `foo`, `baz`');\n\n      $this->it->buildQuery(['FIELDS' => 'c', 'FROM' => new \\QueryExpression(\"(SELECT CONCAT('foo', 'baz') as c) as t\")]);\n      $this->string($this->it->getSql())->isIdenticalTo(\"SELECT `c` FROM (SELECT CONCAT('foo', 'baz') as c) as t\");\n   }\n\n\n   public function testOrder() {\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar`');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar`');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => '`baz`']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `baz`');\n\n      $it = $this->it->execute('foo', ['ORDER' => '`baz`']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `baz`');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` ASC');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` ASC');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar DESC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` DESC');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar DESC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` DESC');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => ['`a`', 'b ASC', 'c DESC']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `a`, `b` ASC, `c` DESC');\n\n      $it = $this->it->execute('foo', ['ORDER' => ['`a`', 'b ASC', 'c DESC']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `a`, `b` ASC, `c` DESC');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar, baz ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar`, `baz` ASC');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar, baz ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar`, `baz` ASC');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar DESC, baz ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` DESC, `baz` ASC');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar DESC, baz ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` DESC, `baz` ASC');\n\n      $it = $this->it->execute('foo', ['ORDER' => new \\QueryExpression(\"CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\")]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` ORDER BY CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\");\n\n      $it = $this->it->execute('foo', ['ORDER' => [new \\QueryExpression(\"CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\"), 'bar ASC']]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` ORDER BY CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END, `bar` ASC\");\n\n      $it = $this->it->execute('foo', ['ORDER' => [new \\QueryExpression(\"CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\"), 'bar ASC, baz DESC']]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` ORDER BY CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END, `bar` ASC, `baz` DESC\");\n\n      $it = $this->it->execute('foo', ['ORDER' => [new \\QueryExpression(\"CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\"), 'bar ASC', 'baz DESC']]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` ORDER BY CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END, `bar` ASC, `baz` DESC\");\n\n      $this->when(\n         function () {\n            $it = $this->it->execute('foo', ['ORDER' => [new \\stdClass]]);\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Invalid order clause')\n         ->exists();\n   }\n\n\n   public function testCount() {\n      $it = $this->it->execute('foo', ['COUNT' => 'cpt']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(*) AS cpt FROM `foo`');\n\n      $it = $this->it->execute('foo', ['COUNT' => 'cpt', 'SELECT' => 'bar', 'DISTINCT' => true]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT `bar`) AS cpt FROM `foo`');\n\n      $it = $this->it->execute('foo', ['COUNT' => 'cpt', 'FIELDS' => ['name', 'version']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(*) AS cpt, `name`, `version` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT' => 'bar']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(`bar`) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['foo.bar', 'COUNT' => 'foo.baz']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.`bar`, COUNT(`foo`.`baz`) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT' => ['bar', 'baz']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(`bar`), COUNT(`baz`) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT' => ['bar AS cpt', 'baz AS cpt2']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(`bar`) AS `cpt`, COUNT(`baz`) AS `cpt2` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['foo.bar', 'COUNT' => ['foo.baz', 'foo.qux']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.`bar`, COUNT(`foo`.`baz`), COUNT(`foo`.`qux`) FROM `foo`');\n   }\n\n   public function testCountDistinct() {\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT DISTINCT' => 'bar']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT(`bar`)) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT DISTINCT' => ['bar', 'baz']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT(`bar`)), COUNT(DISTINCT(`baz`)) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT DISTINCT' => ['bar AS cpt', 'baz AS cpt2']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT(`bar`)) AS `cpt`, COUNT(DISTINCT(`baz`)) AS `cpt2` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['foo.bar', 'COUNT DISTINCT' => ['foo.baz', 'foo.qux']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.`bar`, COUNT(DISTINCT(`foo`.`baz`)), COUNT(DISTINCT(`foo`.`qux`)) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => 'bar', 'COUNT' => 'cpt', 'DISTINCT' => true]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT `bar`) AS cpt FROM `foo`');\n\n      $this->when(\n         function () {\n            $it = $this->it->execute('foo', ['COUNT' => 'cpt', 'DISTINCT' => true]);\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage(\"With COUNT and DISTINCT, you must specify exactly one field, or use 'COUNT DISTINCT'\")\n         ->exists();\n   }\n\n\n   public function testJoins() {\n      $it = $this->it->execute('foo', ['LEFT JOIN' => []]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute('foo', ['LEFT JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      //old JOIN alias for LEFT JOIN\n      $it = $this->it->execute('foo', ['JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $it = $this->it->execute('foo', ['LEFT JOIN' => [['TABLE' => 'bar', 'FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $it = $this->it->execute('foo', ['LEFT JOIN' => ['bar' => ['ON' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $it = $this->it->execute(\n         'foo', [\n            'LEFT JOIN' => [\n               'bar' => [\n                  'FKEY' => [\n                     'bar' => 'id',\n                     'foo' => 'fk'\n                  ]\n               ],\n               'baz' => [\n                  'FKEY' => [\n                     'baz' => 'id',\n                     'foo' => 'baz_id'\n                  ]\n               ]\n            ]\n         ]\n      );\n      $this->string($it->getSql())->isIdenticalTo(\n         'SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`) '.\n         'LEFT JOIN `baz` ON (`baz`.`id` = `foo`.`baz_id`)'\n      );\n\n      $it = $this->it->execute('foo', ['INNER JOIN' => []]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute('foo', ['INNER JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` INNER JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $it = $this->it->execute('foo', ['RIGHT JOIN' => []]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute('foo', ['RIGHT JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` RIGHT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $this->exception(\n         function() {\n            $it = $this->it->execute('foo', ['LEFT JOIN' => ['ON' => ['a' => 'id', 'b' => 'a_id']]]);\n         }\n      )\n         ->isInstanceOf('RuntimeException')\n         ->hasMessage('BAD JOIN');\n\n      $this->when(\n         function () {\n            $it = $this->it->execute('foo', ['LEFT JOIN' => 'bar']);\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('BAD JOIN, value must be [ table => criteria ]')\n         ->exists();\n\n      $this->when(\n         function () {\n            $it = $this->it->execute('foo', ['INNER JOIN' => ['bar' => ['FKEY' => 'akey']]]);\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('BAD FOREIGN KEY, should be [ table1 => key1, table2 => key2 ] or [ table1 => key1, table2 => key2, [criteria]]')\n         ->exists();\n\n      //test conditions\n      $it = $this->it->execute(\n         'foo', [\n            'LEFT JOIN' => [\n               'bar' => [\n                  'FKEY' => [\n                     'bar' => 'id',\n                     'foo' => 'fk', [\n                        'OR'  => ['field' => ['>', 20]]\n                     ]\n                  ]\n               ]\n            ]\n         ]\n      );\n      $this->string($it->getSql())->isIdenticalTo(\n         'SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk` OR `field` > \\'20\\')'\n      );\n\n      $it = $this->it->execute(\n         'foo', [\n            'LEFT JOIN' => [\n               'bar' => [\n                  'FKEY' => [\n                     'bar' => 'id',\n                     'foo' => 'fk', [\n                        'AND'  => ['field' => 42]\n                     ]\n                  ]\n               ]\n            ]\n         ]\n      );\n      $this->string($it->getSql())->isIdenticalTo(\n         'SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk` AND `field` = \\'42\\')'\n      );\n\n      //test derived table in JOIN statement\n      $it = $this->it->execute(\n         'foo', [\n            'LEFT JOIN' => [\n               [\n                  'TABLE'  => new \\QuerySubQuery(['FROM' => 'bar'], 't2'),\n                  'FKEY'   => [\n                     't2'  => 'id',\n                     'foo' => 'fk'\n                  ]\n               ]\n            ]\n         ]\n      );\n      $this->string($it->getSql())->isIdenticalTo(\n         'SELECT * FROM `foo` LEFT JOIN (SELECT * FROM `bar`) AS `t2` ON (`t2`.`id` = `foo`.`fk`)'\n      );\n\n   }\n\n   public function testAnalyseJoins() {\n      $join = $this->it->analyseJoins(['LEFT JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($join)->isIdenticalTo(' LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $this->exception(\n         function() {\n            $it = $this->it->analyseJoins(['LEFT OUTER JOIN' => ['ON' => ['a' => 'id', 'b' => 'a_id']]]);\n         }\n      )\n         ->isInstanceOf('RuntimeException')\n         ->hasMessage('BAD JOIN');\n   }\n\n   public function testHaving() {\n      $it = $this->it->execute('foo', ['HAVING' => ['bar' => 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` HAVING `bar` = \\'1\\'');\n\n      $it = $this->it->execute('foo', ['HAVING' => ['bar' => ['>', 0]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` HAVING `bar` > \\'0\\'');\n   }\n\n\n\n   public function testOperators() {\n      $it = $this->it->execute('foo', ['a' => 1]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` = \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['=', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` = \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['>', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` > \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['LIKE', '%bar%']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` LIKE \\'%bar%\\'');\n\n      $it = $this->it->execute('foo', ['NOT' => ['a' => ['LIKE', '%bar%']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE NOT (`a` LIKE \\'%bar%\\')');\n\n      $it = $this->it->execute('foo', ['a' => ['NOT LIKE', '%bar%']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` NOT LIKE \\'%bar%\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['<>', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` <> \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['&', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` & \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['|', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` | \\'1\\'');\n   }\n\n\n   public function testWhere() {\n      $it = $this->it->execute('foo', 'id=1');\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE id=1');\n\n      $it = $this->it->execute('foo', ['WHERE' => ['bar' => null]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` IS NULL');\n\n      $it = $this->it->execute('foo', ['bar' => null]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` IS NULL');\n\n      $it = $this->it->execute('foo', ['`bar`' => null]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` IS NULL');\n\n      $it = $this->it->execute('foo', ['bar' => 1]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = \\'1\\'');\n\n      $this->exception(\n         function() {\n            $it = $this->it->execute('foo', ['bar' => []]);\n         }\n      )\n         ->isInstanceOf('RuntimeException')\n         ->hasMessage('Empty IN are not allowed');\n\n      $it = $this->it->execute('foo', ['bar' => [1, 2, 4]]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` IN ('1', '2', '4')\");\n\n      $it = $this->it->execute('foo', ['bar' => ['a', 'b', 'c']]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` IN ('a', 'b', 'c')\");\n\n      $it = $this->it->execute('foo', ['bar' => 'val']);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` = 'val'\");\n\n      $it = $this->it->execute('foo', ['bar' => '`field`']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = `field`');\n\n      $it = $this->it->execute('foo', ['bar' => '?']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = \\'?\\'');\n\n      $it = $this->it->execute('foo', ['bar' => new \\QueryParam()]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = ?');\n\n      $it = $this->it->execute('foo', ['bar' => new \\QueryParam('myparam')]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = :myparam');\n   }\n\n\n   public function testFkey() {\n\n      $it = $this->it->execute(['foo', 'bar'], ['FKEY' => ['id', 'fk']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`, `bar` WHERE `id` = `fk`');\n\n      $it = $this->it->execute(['foo', 'bar'], ['FKEY' => ['foo' => 'id', 'bar' => 'fk']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`, `bar` WHERE `foo`.`id` = `bar`.`fk`');\n\n      $it = $this->it->execute(['foo', 'bar'], ['FKEY' => ['`foo`' => 'id', 'bar' => '`fk`']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`, `bar` WHERE `foo`.`id` = `bar`.`fk`');\n   }\n\n   public function testGroupBy() {\n\n      $it = $this->it->execute(['foo'], ['GROUPBY' => ['id']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`');\n\n      $it = $this->it->execute(['foo'], ['GROUP' => ['id']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`');\n\n      $it = $this->it->execute(['foo'], ['GROUPBY' => 'id']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`');\n\n      $it = $this->it->execute(['foo'], ['GROUP' => 'id']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`');\n\n      $it = $this->it->execute(['foo'], ['GROUPBY' => ['id', 'name']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`, `name`');\n\n      $it = $this->it->execute(['foo'], ['GROUP' => ['id', 'name']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`, `name`');\n   }\n\n   public function testNoFieldGroupBy() {\n      $this->when(\n         function () {\n            $it = $this->it->execute(['foo'], ['GROUPBY' => []]);\n            $this->string('SELECT * FROM `foo`', $it->getSql(), 'No group by field');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing group by field')\n         ->exists();\n\n      $this->when(\n         function () {\n            $it = $this->it->execute(['foo'], ['GROUP' => []]);\n            $this->string('SELECT * FROM `foo`', $it->getSql(), 'No group by field');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing group by field')\n         ->exists();\n\n   }\n\n   public function testRange() {\n\n      $it = $this->it->execute('foo', ['START' => 5, 'LIMIT' => 10]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LIMIT 10 OFFSET 5');\n   }\n\n\n   public function testLogical() {\n      $it = $this->it->execute(['foo'], [['a' => 1, 'b' => 2]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE (`a` = \\'1\\' AND `b` = \\'2\\')');\n\n      $it = $this->it->execute(['foo'], ['AND' => ['a' => 1, 'b' => 2]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE (`a` = \\'1\\' AND `b` = \\'2\\')');\n\n      $it = $this->it->execute(['foo'], ['OR' => ['a' => 1, 'b' => 2]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE (`a` = \\'1\\' OR `b` = \\'2\\')');\n\n      $it = $this->it->execute(['foo'], ['NOT' => ['a' => 1, 'b' => 2]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE NOT (`a` = \\'1\\' AND `b` = \\'2\\')');\n\n      $crit = [\n         'WHERE' => [\n            'OR' => [\n               [\n                  'items_id' => 15,\n                  'itemtype' => 'Computer'\n               ],\n               [\n                  'items_id' => 3,\n                  'itemtype' => 'Document'\n               ],\n            ],\n         ],\n      ];\n      $sql = \"SELECT * FROM `foo` WHERE ((`items_id` = '15' AND `itemtype` = 'Computer') OR (`items_id` = '3' AND `itemtype` = 'Document'))\";\n      $it = $this->it->execute(['foo'], $crit);\n      $this->string($it->getSql())->isIdenticalTo($sql);\n\n      $crit = [\n         'WHERE' => [\n            'a'  => 1,\n            'OR' => [\n               'b'   => 2,\n               'NOT' => [\n                  'c'   => [2, 3],\n                  [\n                     'd' => 4,\n                     'e' => 5,\n                  ],\n               ],\n            ],\n         ],\n      ];\n      $sql = \"SELECT * FROM `foo` WHERE `a` = '1' AND (`b` = '2' OR NOT (`c` IN ('2', '3') AND (`d` = '4' AND `e` = '5')))\";\n      $it = $this->it->execute(['foo'], $crit);\n      $this->string($it->getSql())->isIdenticalTo($sql);\n\n      $crit['FROM'] = 'foo';\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo($sql);\n\n      $crit = [\n         'FROM'   => 'foo',\n         'WHERE'  => [\n            'bar' => 'baz',\n            'RAW' => ['SELECT COUNT(*) FROM xyz' => 5]\n         ]\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` = 'baz' AND ((SELECT COUNT(*) FROM xyz) = '5')\");\n\n      $crit = [\n         'FROM'   => 'foo',\n         'WHERE'  => [\n            'bar' => 'baz',\n            'RAW' => ['SELECT COUNT(*) FROM xyz' => ['>', 2]]\n         ]\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` = 'baz' AND ((SELECT COUNT(*) FROM xyz) > '2')\");\n\n      $crit = [\n         'FROM'   => 'foo',\n         'WHERE'  => [\n            'bar' => 'baz',\n            'RAW' => ['SELECT COUNT(*) FROM xyz' => [3, 4]]\n         ]\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` = 'baz' AND ((SELECT COUNT(*) FROM xyz) IN ('3', '4'))\");\n   }\n\n\n   public function testModern() {\n      $req = [\n         'SELECT' => ['a', 'b'],\n         'FROM'   => 'foo',\n         'WHERE'  => ['c' => 1],\n      ];\n      $sql = \"SELECT `a`, `b` FROM `foo` WHERE `c` = '1'\";\n      $it = $this->it->execute($req);\n      $this->string($it->getSql())->isIdenticalTo($sql);\n   }\n\n\n   public function testRows() {\n      global $DB;\n\n      $it = $this->it->execute('foo');\n      $this->integer($it->numrows())->isIdenticalTo(0);\n      $this->integer(count($it))->isIdenticalTo(0);\n      $this->boolean($it->next())->isFalse();\n\n      $it = $DB->request('glpi_configs', ['context' => 'core', 'name' => 'version']);\n      $this->integer($it->numrows())->isIdenticalTo(1);\n      $this->integer(count($it))->isIdenticalTo(1);\n      $row = $it->next();\n      $key = $it->key();\n      $this->integer($row['id'])->isIdenticalTo($key);\n\n      $it = $DB->request('glpi_configs', ['context' => 'core']);\n      $this->integer($it->numrows())->isGreaterThan(100);\n      $this->integer(count($it))->isGreaterThan(100);\n      $this->boolean($it->numrows() == count($it))->isTrue();\n   }\n\n   public function testKey() {\n      global $DB;\n\n      // test keys with absence of 'id' in select\n      // we should use a incremented position in the first case\n      // see https://github.com/glpi-project/glpi/pull/3401\n      // previously, the first query returned only one result\n      $users_list = iterator_to_array($DB->request([\n         'SELECT' => 'name',\n         'FROM'   => 'glpi_users']));\n      $users_list2 = iterator_to_array($DB->request([\n         'SELECT' =>  ['id', 'name'],\n         'FROM'   => 'glpi_users']));\n      $nb  = count($users_list);\n      $nb2 = count($users_list2);\n      $this->integer($nb)->isEqualTo($nb2);\n   }\n\n   public function testAlias() {\n      $it = $this->it->execute('foo AS f');\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` AS `f`');\n\n      $it = $this->it->execute(['FROM' => 'foo AS f']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` AS `f`');\n\n      $it = $this->it->execute(['SELECT' => ['field AS f'], 'FROM' => 'bar AS b']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `field` AS `f` FROM `bar` AS `b`');\n\n      $it = $this->it->execute(['SELECT' => ['b.field AS f'], 'FROM' => 'bar AS b']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `b`.`field` AS `f` FROM `bar` AS `b`');\n\n      $it = $this->it->execute(['SELECT' => ['id', 'field AS f', 'baz as Z'], 'FROM' => 'bar AS b']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `id`, `field` AS `f`, `baz` AS `Z` FROM `bar` AS `b`');\n\n      $it = $this->it->execute([\n         'FROM' => 'bar AS b',\n         'INNER JOIN'   => [\n            'foo AS f' => [\n               'FKEY' => [\n                  'b'   => 'fid',\n                  'f'   => 'id'\n               ]\n            ]\n         ]\n      ]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `bar` AS `b` INNER JOIN `foo` AS `f` ON (`b`.`fid` = `f`.`id`)');\n\n      $it = $this->it->execute([\n         'SELECT' => ['id', 'field  AS  f', 'baz as  Z'],\n         'FROM' => 'bar  AS b',\n         'INNER JOIN'   => [\n            'foo AS  f' => [\n               'FKEY' => [\n                  'b'   => 'fid',\n                  'f'   => 'id'\n               ]\n            ]\n         ]\n      ]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `id`, `field` AS `f`, `baz` AS `Z` FROM `bar` AS `b` INNER JOIN `foo` AS `f` ON (`b`.`fid` = `f`.`id`)');\n   }\n\n   public function testExpression() {\n      $it = $this->it->execute('foo', [new \\QueryExpression('a LIKE b')]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE a LIKE b');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['b' => 'bar', '`c`' => '`baz`', new \\QueryExpression('1 AS `myfield`')]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `b`.`bar`, `c`.`baz`, 1 AS `myfield` FROM `foo`');\n   }\n\n   public function testSubQuery() {\n      $crit = ['SELECT' => 'id', 'FROM' => 'baz', 'WHERE' => ['z' => 'f']];\n      $raw_subq = \"(SELECT `id` FROM `baz` WHERE `z` = 'f')\";\n\n      $sub_query =new \\QuerySubQuery($crit);\n      $this->string($sub_query->getQuery())->isIdenticalTo($raw_subq);\n\n      $it = $this->it->execute('foo', ['bar' => $sub_query]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` IN $raw_subq\");\n\n      $it = $this->it->execute('foo', ['bar' => ['<>', $sub_query]]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` <> $raw_subq\");\n\n      $it = $this->it->execute('foo', ['NOT' => ['bar' => $sub_query]]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT * FROM `foo` WHERE NOT (`bar` IN $raw_subq)\");\n\n      $sub_query =new \\QuerySubQuery($crit, 'thesubquery');\n      $this->string($sub_query->getQuery())->isIdenticalTo(\"$raw_subq AS `thesubquery`\");\n\n      $it = $this->it->execute('foo', ['bar' => $sub_query]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` IN $raw_subq AS `thesubquery`\");\n\n      $it = $this->it->execute([\n         'SELECT' => ['bar', $sub_query],\n         'FROM'   => 'foo'\n      ]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT `bar`, $raw_subq AS `thesubquery` FROM `foo`\");\n   }\n\n   public function testUnionQuery() {\n      $union_crit = [\n         ['FROM' => 'table1'],\n         ['FROM' => 'table2']\n      ];\n      $union = new \\QueryUnion($union_crit);\n      $union_raw_query = '((SELECT * FROM `table1`) UNION ALL (SELECT * FROM `table2`))';\n      $raw_query = 'SELECT * FROM ' . $union_raw_query . ' AS `union_' . md5($union_raw_query) . '`';\n      $it = $this->it->execute(['FROM' => $union]);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n\n      $union = new \\QueryUnion($union_crit, true);\n      $union_raw_query = '((SELECT * FROM `table1`) UNION (SELECT * FROM `table2`))';\n      $raw_query = 'SELECT * FROM ' . $union_raw_query . ' AS `union_' . md5($union_raw_query) . '`';\n      $it = $this->it->execute(['FROM' => $union]);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n\n      $union = new \\QueryUnion($union_crit, false, 'theunion');\n      $raw_query = 'SELECT * FROM ((SELECT * FROM `table1`) UNION ALL (SELECT * FROM `table2`)) AS `theunion`';\n      $it = $this->it->execute(['FROM' => $union]);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n\n      $union = new \\QueryUnion($union_crit, false, 'theunion');\n      $raw_query = 'SELECT DISTINCT `theunion`.`field` FROM ((SELECT * FROM `table1`) UNION ALL (SELECT * FROM `table2`)) AS `theunion`';\n      $crit = [\n         'SELECT'    => 'theunion.field',\n         'DISTINCT'  => true,\n         'FROM'      => $union,\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n\n      $union = new \\QueryUnion($union_crit, true);\n      $union_raw_query = '((SELECT * FROM `table1`) UNION (SELECT * FROM `table2`))';\n      $raw_query = 'SELECT DISTINCT `theunion`.`field` FROM ' . $union_raw_query . ' AS `union_' . md5($union_raw_query) . '`';\n      $crit = [\n         'SELECT'    => 'theunion.field',\n         'DISTINCT'  => true,\n         'FROM'      => $union,\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n   }\n\n   public function testComplexUnionQuery() {\n\n      $fk = \\Ticket::getForeignKeyField();\n      $users_table = \\User::getTable();\n      $users_table = 'glpi_ticket_users';\n      $groups_table = 'glpi_groups_tickets';\n\n      $subquery1 = new \\QuerySubQuery([\n         'SELECT'    => [\n            'usr.id AS users_id',\n            'tu.type AS type'\n         ],\n         'FROM'      => \"$users_table AS tu\",\n         'LEFT JOIN' => [\n            \\User::getTable() . ' AS usr' => [\n               'ON' => [\n                  'tu'  => 'users_id',\n                  'usr' => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [\n            \"tu.$fk\" => 42\n         ]\n      ]);\n      $subquery2 = new \\QuerySubQuery([\n         'SELECT'    => [\n            'usr.id AS users_id',\n            'gt.type AS type'\n         ],\n         'FROM'      => \"$groups_table AS gt\",\n         'LEFT JOIN' => [\n            \\Group_User::getTable() . ' AS gu'   => [\n               'ON' => [\n                  'gu'  => 'groups_id',\n                  'gt'  => 'groups_id'\n               ]\n            ],\n            \\User::getTable() . ' AS usr'        => [\n               'ON' => [\n                  'gu'  => 'users_id',\n                  'usr' => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [\n            \"gt.$fk\" => 42\n         ]\n      ]);\n\n      $raw_query = \"SELECT DISTINCT `users_id`, `type`\"\n                     . \" FROM ((SELECT `usr`.`id` AS `users_id`, `tu`.`type` AS `type`\"\n                     . \" FROM `$users_table` AS `tu`\"\n                     . \" LEFT JOIN `glpi_users` AS `usr` ON (`tu`.`users_id` = `usr`.`id`)\"\n                     . \" WHERE `tu`.`$fk` = '42')\"\n                     . \" UNION ALL\"\n                     . \" (SELECT `usr`.`id` AS `users_id`, `gt`.`type` AS `type`\"\n                     . \" FROM `$groups_table` AS `gt`\"\n                     . \" LEFT JOIN `glpi_groups_users` AS `gu` ON (`gu`.`groups_id` = `gt`.`groups_id`)\"\n                     . \" LEFT JOIN `glpi_users` AS `usr` ON (`gu`.`users_id` = `usr`.`id`)\"\n                     . \" WHERE `gt`.`$fk` = '42')\"\n                     . \") AS `allactors`\";\n\n      $union = new \\QueryUnion([$subquery1, $subquery2], false, 'allactors');\n      $it = $this->it->execute([\n         'FIELDS'          => [\n            'users_id',\n            'type'\n         ],\n         'DISTINCT'        => true,\n         'FROM'            => $union\n      ]);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n   }\n\n   public function testComplexUnionQueryAgain() {\n      global $CFG_GLPI, $DB;\n\n      //Old build way\n      $queries = [];\n\n      foreach ($CFG_GLPI[\"networkport_types\"] as $itemtype) {\n         $table = getTableForItemType($itemtype);\n         $queries[] = \"(SELECT `ADDR`.`binary_0` AS `binary_0`,\n                                 `ADDR`.`binary_1` AS `binary_1`,\n                                 `ADDR`.`binary_2` AS `binary_2`,\n                                 `ADDR`.`binary_3` AS `binary_3`,\n                                 `ADDR`.`name` AS `ip`,\n                                 `ADDR`.`id` AS `id`,\n                                 `ADDR`.`itemtype` AS `addr_item_type`,\n                                 `ADDR`.`items_id` AS `addr_item_id`,\n                                 `glpi_entities`.`completename` AS `entity`,\n                                 `NAME`.`id` AS `name_id`,\n                                 `PORT`.`id` AS `port_id`,\n                                 `ITEM`.`id` AS `item_id`,\n                                 '$itemtype' AS `item_type`\n                        FROM `glpi_ipaddresses_ipnetworks` AS `LINK`\n                        INNER JOIN `glpi_ipaddresses` AS `ADDR` ON (`ADDR`.`id` = `LINK`.`ipaddresses_id`\n                                                            AND `ADDR`.`itemtype` = 'NetworkName'\n                                                            AND `ADDR`.`is_deleted` = '0')\n                        INNER JOIN `glpi_networknames` AS `NAME` ON (`NAME`.`id` = `ADDR`.`items_id`\n                                                               AND `NAME`.`itemtype` = 'NetworkPort')\n                        INNER JOIN `glpi_networkports` AS `PORT` ON (`NAME`.`items_id` = `PORT`.`id`\n                                                               AND `PORT`.`itemtype` = '$itemtype')\n                        INNER JOIN `$table` AS `ITEM` ON (`ITEM`.`id` = `PORT`.`items_id`)\n                        LEFT JOIN `glpi_entities` ON (`ADDR`.`entities_id` = `glpi_entities`.`id`)\n                        WHERE `LINK`.`ipnetworks_id` = '42')\";\n      }\n\n      $queries[] = \"(SELECT `ADDR`.`binary_0` AS `binary_0`,\n                              `ADDR`.`binary_1` AS `binary_1`,\n                              `ADDR`.`binary_2` AS `binary_2`,\n                              `ADDR`.`binary_3` AS `binary_3`,\n                              `ADDR`.`name` AS `ip`,\n                              `ADDR`.`id` AS `id`,\n                              `ADDR`.`itemtype` AS `addr_item_type`,\n                              `ADDR`.`items_id` AS `addr_item_id`,\n                              `glpi_entities`.`completename` AS `entity`,\n                              `NAME`.`id` AS `name_id`,\n                              `PORT`.`id` AS `port_id`,\n                              NULL AS `item_id`,\n                              NULL AS `item_type`\n                     FROM `glpi_ipaddresses_ipnetworks` AS `LINK`\n                     INNER JOIN `glpi_ipaddresses` AS `ADDR` ON (`ADDR`.`id` = `LINK`.`ipaddresses_id`\n                                                         AND `ADDR`.`itemtype` = 'NetworkName'\n                                                         AND `ADDR`.`is_deleted` = '0')\n                     INNER JOIN `glpi_networknames` AS `NAME` ON (`NAME`.`id` = `ADDR`.`items_id`\n                                                            AND `NAME`.`itemtype` = 'NetworkPort')\n                     INNER JOIN `glpi_networkports` AS `PORT`\n                        ON (`NAME`.`items_id` = `PORT`.`id`\n                             AND NOT (`PORT`.`itemtype`\n                                      IN ('\" .implode(\"', '\", $CFG_GLPI[\"networkport_types\"]).\"')))\n                     LEFT JOIN `glpi_entities` ON (`ADDR`.`entities_id` = `glpi_entities`.`id`)\n                     WHERE `LINK`.`ipnetworks_id` = '42')\";\n\n      $queries[] = \"(SELECT `ADDR`.`binary_0` AS `binary_0`,\n                              `ADDR`.`binary_1` AS `binary_1`,\n                              `ADDR`.`binary_2` AS `binary_2`,\n                              `ADDR`.`binary_3` AS `binary_3`,\n                              `ADDR`.`name` AS `ip`,\n                              `ADDR`.`id` AS `id`,\n                              `ADDR`.`itemtype` AS `addr_item_type`,\n                              `ADDR`.`items_id` AS `addr_item_id`,\n                              `glpi_entities`.`completename` AS `entity`,\n                              `NAME`.`id` AS `name_id`,\n                              NULL AS `port_id`,\n                              NULL AS `item_id`,\n                              NULL AS `item_type`\n                     FROM `glpi_ipaddresses_ipnetworks` AS `LINK`\n                     INNER JOIN `glpi_ipaddresses` AS `ADDR` ON (`ADDR`.`id` = `LINK`.`ipaddresses_id`\n                                                         AND `ADDR`.`itemtype` = 'NetworkName'\n                                                         AND `ADDR`.`is_deleted` = '0')\n                     INNER JOIN `glpi_networknames` AS `NAME` ON (`NAME`.`id` = `ADDR`.`items_id`\n                                                            AND `NAME`.`itemtype` != 'NetworkPort')\n                     LEFT JOIN `glpi_entities` ON (`ADDR`.`entities_id` = `glpi_entities`.`id`)\n                     WHERE `LINK`.`ipnetworks_id` = '42')\";\n\n      $queries[] = \"(SELECT `ADDR`.`binary_0` AS `binary_0`,\n                              `ADDR`.`binary_1` AS `binary_1`,\n                              `ADDR`.`binary_2` AS `binary_2`,\n                              `ADDR`.`binary_3` AS `binary_3`,\n                              `ADDR`.`name` AS `ip`,\n                              `ADDR`.`id` AS `id`,\n                              `ADDR`.`itemtype` AS `addr_item_type`,\n                              `ADDR`.`items_id` AS `addr_item_id`,\n                              `glpi_entities`.`completename` AS `entity`,\n                              NULL AS `name_id`,\n                              NULL AS `port_id`,\n                              NULL AS `item_id`,\n                              NULL AS `item_type`\n                     FROM `glpi_ipaddresses_ipnetworks` AS `LINK`\n                     INNER JOIN `glpi_ipaddresses` AS `ADDR` ON (`ADDR`.`id` = `LINK`.`ipaddresses_id`\n                                                         AND `ADDR`.`itemtype` != 'NetworkName'\n                                                         AND `ADDR`.`is_deleted` = '0')\n                     LEFT JOIN `glpi_entities` ON (`ADDR`.`entities_id` = `glpi_entities`.`id`)\n                     WHERE `LINK`.`ipnetworks_id` = '42')\";\n\n      $union_raw_query = '(' . preg_replace('/\\s+/', ' ', implode(' UNION ALL ', $queries)) . ')';\n      $raw_query = 'SELECT * FROM ' . $union_raw_query . ' AS `union_' . md5($union_raw_query) . '`';\n\n      //New build way\n      $queries = [];\n      $main_criteria = [\n         'SELECT'       => [\n            'ADDR.binary_0 AS binary_0',\n            'ADDR.binary_1 AS binary_1',\n            'ADDR.binary_2 AS binary_2',\n            'ADDR.binary_3 AS binary_3',\n            'ADDR.name AS ip',\n            'ADDR.id AS id',\n            'ADDR.itemtype AS addr_item_type',\n            'ADDR.items_id AS addr_item_id',\n            'glpi_entities.completename AS entity',\n         ],\n         'FROM'         => 'glpi_ipaddresses_ipnetworks AS LINK',\n         'INNER JOIN'   => [\n            'glpi_ipaddresses AS ADDR' => [\n               'ON' => [\n                  'ADDR'   => 'id',\n                  'LINK'   => 'ipaddresses_id', [\n                     'AND' => [\n                        'ADDR.itemtype' => 'NetworkName',\n                        'ADDR.is_deleted' => 0\n                     ]\n                  ]\n               ]\n            ]\n         ],\n         'LEFT JOIN'    => [\n            'glpi_entities'             => [\n               'ON' => [\n                  'ADDR'            => 'entities_id',\n                  'glpi_entities'   => 'id'\n               ]\n            ]\n         ],\n         'WHERE'        => [\n            'LINK.ipnetworks_id' => 42,\n         ]\n      ];\n\n      foreach ($CFG_GLPI[\"networkport_types\"] as $itemtype) {\n         $table = getTableForItemType($itemtype);\n         $criteria = $main_criteria;\n         $criteria['SELECT'] = array_merge($criteria['SELECT'], [\n            'NAME.id AS name_id',\n            'PORT.id AS port_id',\n            'ITEM.id AS item_id',\n            new \\QueryExpression(\"'$itemtype' AS \" . $DB->quoteName('item_type'))\n         ]);\n         $criteria['INNER JOIN'] = $criteria['INNER JOIN'] + [\n            'glpi_networknames AS NAME'   => [\n               'ON' => [\n                  'NAME'   => 'id',\n                  'ADDR'   => 'items_id', [\n                     'AND' => [\n                        'NAME.itemtype' => 'NetworkPort'\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_networkports AS PORT'   => [\n               'ON' => [\n                  'NAME'   => 'items_id',\n                  'PORT'   => 'id', [\n                     'AND' => [\n                        'PORT.itemtype' => $itemtype\n                     ]\n                  ]\n               ]\n            ],\n            \"$table AS ITEM\"              => [\n               'ON' => [\n                  'ITEM'   => 'id',\n                  'PORT'   => 'items_id'\n               ]\n            ]\n         ];\n         $queries[] = $criteria;\n      }\n\n      $criteria = $main_criteria;\n      $criteria['SELECT'] = array_merge($criteria['SELECT'], [\n         'NAME.id AS name_id',\n         'PORT.id AS port_id',\n         new \\QueryExpression('NULL AS ' . $DB->quoteName('item_id')),\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('item_type')),\n      ]);\n      $criteria['INNER JOIN'] = $criteria['INNER JOIN'] + [\n         'glpi_networknames AS NAME'   => [\n            'ON' => [\n               'NAME'   => 'id',\n               'ADDR'   => 'items_id', [\n                  'AND' => [\n                     'NAME.itemtype' => 'NetworkPort'\n                  ]\n               ]\n            ]\n         ],\n         'glpi_networkports AS PORT'   => [\n            'ON' => [\n               'NAME'   => 'items_id',\n               'PORT'   => 'id', [\n                  'AND' => [\n                     'NOT' => [\n                        'PORT.itemtype' => $CFG_GLPI['networkport_types']\n                     ]\n                  ]\n               ]\n            ]\n         ]\n      ];\n      $queries[] = $criteria;\n\n      $criteria = $main_criteria;\n      $criteria['SELECT'] = array_merge($criteria['SELECT'], [\n         'NAME.id AS name_id',\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('port_id')),\n         new \\QueryExpression('NULL AS ' . $DB->quoteName('item_id')),\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('item_type'))\n      ]);\n      $criteria['INNER JOIN'] = $criteria['INNER JOIN'] + [\n         'glpi_networknames AS NAME'   => [\n            'ON' => [\n               'NAME'   => 'id',\n               'ADDR'   => 'items_id', [\n                  'AND' => [\n                     'NAME.itemtype' => ['!=', 'NetworkPort']\n                  ]\n               ]\n            ]\n         ]\n      ];\n      $queries[] = $criteria;\n\n      $criteria = $main_criteria;\n      $criteria['SELECT'] = array_merge($criteria['SELECT'], [\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('name_id')),\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('port_id')),\n         new \\QueryExpression('NULL AS ' . $DB->quoteName('item_id')),\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('item_type'))\n      ]);\n      $criteria['INNER JOIN']['glpi_ipaddresses AS ADDR']['ON'][0]['AND']['ADDR.itemtype'] = ['!=', 'NetworkName'];\n      $queries[] = $criteria;\n\n      $union = new \\QueryUnion($queries);\n      $criteria = [\n         'FROM'   => $union,\n      ];\n\n      $it = $this->it->execute($criteria);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n   }\n\n   public function testAnalyseCrit() {\n      $crit = [new \\QuerySubQuery([\n         'SELECT' => ['COUNT' => ['users_id']],\n         'FROM'   => 'glpi_groups_users',\n         'WHERE'  => ['groups_id' => new \\QueryExpression('glpi_groups.id')]\n      ])];\n      $this->string($this->it->analyseCrit($crit))->isIdenticalTo(\"(SELECT COUNT(`users_id`) FROM `glpi_groups_users` WHERE `groups_id` = glpi_groups.id)\");\n   }\n}\n"], "fixing_code": ["# GLPI changes\n\nThe present file will list all changes made to the project; according to the\n[Keep a Changelog](http://keepachangelog.com/) project.\n\n## [9.5.2] unreleased\n\n### API changes\n\n#### Removed\n\n- Ability to use SQL expressions as string in criterion values in SQL iterator (replaced by usage of `QueryExpression`).\n\n## [9.5.1] 2020-07-16\n\n## [9.5.0] 2020-07-07\n\n### Added\n\n- Encrypted file systems support.\n- Mails collected from suppliers can be marked as private on an entity basis.\n- Ability to add custom CSS in entity configuration.\n- CLI commands to enable and disable maintenance mode.\n- Operating system links on Monitors, Peripherals, Phones and Printers.\n- Add datacenter items to global search\n- Project task search options for Projects\n- Automatic action to purge closed tickets\n- Ability to automatically calculate project's percent done\n- Software link on Phones.\n- Add and answer approvals from timeline\n- Add lightbox with PhotoSwipe to timeline images\n- Ability to copy tasks while merging tickets\n- the API gives the ID of the user who logs in with initSession\n- Kanban view for projects\n- Network ports on Monitors\n- Add warning when there are unsaved changes in forms\n- Add ability to get information from the status endpoint in JSON format using Accept header\n- Add `glpi:system:status` CLI command for getting the GLPI status\n\n### Changed\n\n- PHP error_reporting and display_errors configuration directives are no longer overrided by GLPI, unless in debug mode (which forces reporting and display of all errors).\n- `scripts/migrations/racks_plugin.php` has been replaced by `glpi:migration:racks_plugin_to_core` command available using `bin/console`\n- Encryption alogithm improved using libsodium\n\n### API changes\n\n#### Added\n\n- Add translation functions `__()`,  `_n()`,  `_x()` and  `_nx()` in javascript in browser context.\n- `Migration::renameItemtype()` method to update of database schema/values when an itemtype class is renamed\n- Menu returned by `CommonGLPI::getMenuContent()` method override may now define an icon for each menu entry.\n- `CommonDBConnexity::getItemsAssociatedTo()` method to get the items associated to the given one\n- `CommonDBConnexity::getItemsAssociationRequest()` method to get the DB request to use to get the items associated to the given one\n- `CommonDBTM::clone()` method to clone the current item\n- `CommonDBTM::prepareInputForClone()` method to modify the input data that will be used for the cloning\n- `CommonDBTM::post_clone()` method to perform other steps after an item has been cloned (like clone the elements it is associated to)\n\n#### Changes\n\n- jQuery library has been upgraded from 2.2.x to 3.4.x. jQuery Migrate is used to ensure backward compatibility in most cases.\n- `DBmysqlIterator::handleOrderClause()` supports QueryExpressions\n- Use Laminas instead of deprecated ZendFramework\n- Database datetime fields have been replaced by timestamp fields to handle timezones support.\n- Database integer/float fields values are now returned as number instead of strings from DB read operations.\n- Field `domains_id` of Computer, NetworkEquipment and Printer has been dropped and data has been transfered into `glpi_domains_items` table.\n- Plugin status hook can now be used to provide an array with more information about the plugin's status the status of any child services.\n    - Returned array should contain a 'status' value at least (See status values in Glpi\\System\\Status\\StatusChecker)\n    - Old style returns are still supported\n\n#### Deprecated\n\n- `DBMysql::fetch_array()`\n- `DBMysql::fetch_row()`\n- `DBMysql::fetch_assoc()`\n- `DBMysql::fetch_object()`\n- `DBMysql::data_seek()`\n- `DBMysql::insert_id()`\n- `DBMysql::num_fields()`\n- `DBMysql::field_name()`\n- `DBMysql::list_fields()`\n- `DBMysql::affected_rows()`\n- `DBMysql::free_result()`\n- `DBMysql::isMySQLStrictMode()`\n- `getAllDatasFromTable` renamed to `getAllDataFromTable()`\n- Usage of `$order` parameter in `getAllDataFromTable()` (`DbUtils::getAllDataFromTable()`)\n- `Ticket::getTicketTemplateToUse()` renamed to `Ticket::getITILTemplateToUse()`\n- `TicketTemplate::getFromDBWithDatas()` renamed to `TicketTemplate::getFromDBWithData()` (inherited from `ITILTemplate`)\n- `Computer_SoftwareLicense` replaced by `Item_SoftwareLicense` and table `glpi_computers_softwarelicenses` renamed to `glpi_items_softwarelicenses`\n- `Computer_SoftwareVersion` replaced by `Item_SoftwareVersion` and table `glpi_computers_softwareversions` renamed to `glpi_items_softwareversions`\n- `Item_SoftwareVersion::updateDatasForComputer` renamed to `Item_SoftwareVersion::updateDatasForItem`\n- `Item_SoftwareVersion::showForComputer` renamed to `Item_SoftwareVersion::showForItem`\n- `Item_SoftwareVersion::softsByCategory` renamed to `Item_SoftwareVersion::softwareByCategory`\n- `Item_SoftwareVersion::displaySoftsByLicense` renamed to `Item_SoftwareVersion::displaySoftwareByLicense`\n- `Item_SoftwareVersion::cloneComputer` renamed to `Item_SoftwareVersion::cloneItem`\n- `Transfer::transferComputerSoftwares` renamed to `Transfer::transferItemSoftwares`\n- 'getRealQueryForTreeItem()'\n- ``getCommonSelect`` and ``getCommonLeftJoin()`` from ``Ticket``, ``Change`` and ``Problem`` are replaced with ``getCommonCriteria()`` compliant with db iterator\n- `Config::checkWriteAccessToDirs()`\n- `Config::displayCheckExtensions()`\n- `Toolbox::checkSELinux()`\n- `Toolbox::userErrorHandlerDebug()`\n- `Toolbox::userErrorHandlerNormal()`\n- `Html::jsDisable()`\n- `Html::jsEnable()`\n- `Plugin::setLoaded()`\n- `Plugin::setUnloaded()`\n- `Plugin::setUnloadedByName()`\n- Usage of `$LOADED_PLUGINS` global variable\n- `CommonDBTM::getRawName()` replaced by `CommonDBTM::getFriendlyName()`\n- `Calendar_Holiday::cloneCalendar()`\n- `CalendarSegment::cloneCalendar()`\n- `Computer_Item::cloneComputer()`\n- `Computer_Item::cloneItem()`\n- `ComputerAntivirus::cloneComputer()`\n- `Contract::cloneItem()`\n- `Contract_Item::cloneItem()`\n- `ContractCost::cloneContract()`\n- `Document_Item::cloneItem()`\n- `Infocom::cloneItem()`\n- `Item_Devices::cloneItem()`\n- `Item_Disk::cloneItem()`\n- `Item_OperatingSystem::cloneItem()`\n- `Item_SoftwareLicense::cloneComputer()`\n- `Item_SoftwareLicense::cloneItem()`\n- `Item_SoftwareVersion::cloneComputer()`\n- `Item_SoftwareVersion::cloneItem()`\n- `Itil_Project::cloneItilProject()`\n- `KnowbaseItem_Item::cloneItem()`\n- `NetworkPort::cloneItem()`\n- `Notepad::cloneItem()`\n- `ProjectCost::cloneProject()`\n- `ProjectTeam::cloneProjectTask()`\n- `ProjectTask::cloneProjectTeam()`\n- Usage of `GLPIKEY` constant\n- `Toolbox::encrypt()` and `Toolbox::decrypt()` because they use the old encryption aglogithm\n\n#### Removed\n\n- Usage of string `$condition` parameter in `CommonDBTM::find()`\n- Usage of string `$condition` parameter in `Dropdown::addNewCondition()`\n- Usage of string in `$option['condition']` parameter in `Dropdown::show()`\n- `KnowbaseItemCategory::showFirstLevel()`\n- `Ticket::getTicketActors()`\n- `NotificationTarget::getProfileJoinSql()`\n- `NotificationTarget::getDistinctUserSql()`\n- `NotificationTargetCommonITILObject::getProfileJoinSql()`\n- `RuleCollection::getRuleListQuery()`\n- `getNextItem()`\n- `getPreviousItem()`\n- `CommonDBChild::getSQLRequestToSearchForItem()`\n- `CommonDBConnexity::getSQLRequestToSearchForItem()`\n- `CommonDBRelation::getSQLRequestToSearchForItem()`\n- `Project::addVisibility()`\n- `Project::addVisibilityJoins()`\n- `Plugin::hasBeenInit()`\n- 'SELECT DISTINCT' and 'DISTINCT FIELDS' criteria in `DBmysqlIterator::buildQuery()`\n- `CommonDBTM::getTablesOf()`\n- `CommonDBTM::getForeignKeyFieldsOf()`\n- `TicketFollowup`\n- `getDateRequest` and `DbUtils::getDateRequest()`\n- `Html::convertTagFromRichTextToImageTag()`\n- `Transfer::createSearchConditionUsingArray()`\n- Unused constants GLPI_FONT_FREESANS and GLPI_SCRIPT_DIR\n\n## [9.4.6] 2020-05-05\n\n## [9.4.5] 2019-12-18\n\n## [9.4.4] 2019-09-24\n\n### API changes\n\n#### Changes\n- For security reasons, autocompletion feature requires now to be authorized by a `'autocomplete' => true` flag in corresponding field search option.\n\n## [9.4.3] 2019-06-20\n\n### API changes\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `Html::convertTagFromRichTextToImageTag()`\n\n## [9.4.2] 2019-04-11\n\n### API changes\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `CommonDBTM::getTablesOf()`\n- `CommonDBTM::getForeignKeyFieldsOf()`\n\n## [9.4.1] 2019-03-15\n\n### API changes\n\n#### Added\n\n- new display hook `timeline_actions` to add new buttons to timeline forms\n- Ability to copy document links while merging tickets\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `Plugin::hasBeenInit()`\n- Deprecate 'SELECT DISTINCT' and 'DISTINCT FIELDS' criteria in `DBmysqlIterator::buildQuery()`\n\n#### Removed\n\n- Drop `CommonITILObject::showSolutions()`.\n\n## [9.4.0] 2019-02-11\n\n### Added\n\n- Ability to link project with problems and tickets.\n- Ability to specify creation and modification dates during CommonDBTM object add method\n- Add followups to Changes and Problems.\n- Add timeline to Changes and Problems.\n- CLI console to centralize CLI commands.\n- Search on devices from Printers and Network equipments.\n- Ability to merge and split tickets.\n- Search on devices from Printers and Network equipments.\n- Ability to specify creation and modification dates during CommonDBTM object add method.\n\n### Changed\n- `license_id` field in `glpi_items_operatingsystems` table has been renamed to `licenseid`\n- `olas_tto_id` field in `glpi_tickets` table has been renamed to `olas_id_tto`\n- `olas_ttr_id` field in `glpi_tickets` table has been renamed to `olas_id_ttr`\n- `ttr_olalevels_id` field in `glpi_tickets` table has been renamed to `olalevels_id_ttr`\n- `slas_tto_id` field in `glpi_tickets` table has been renamed to `slas_id_tto`\n- `slas_ttr_id` field in `glpi_tickets` table has been renamed to `slas_id_ttr`\n- `ttr_slalevels_id` field in `glpi_tickets` table has been renamed to `slalevels_id_ttr`\n- `scripts/add_creation_date.php` has been replaced by `glpi:migration:build_missing_timestamps` command available using `bin/console`\n- `scripts/checkdb.php` has been replaced by `glpi:database:check` command available using `bin/console`\n- `scripts/cliinstall.php` has been replaced by `glpi:database:install` command available using `bin/console`\n- `scripts/cliupdate.php` has been replaced by `glpi:database:update` command available using `bin/console`\n- `scripts/ldap_mass_sync.php` has been replaced by `glpi:ldap:synchronize_users` command available using `bin/console`\n- `scripts/innodb_migration.php` has been replaced by `glpi:migration:myisam_to_innodb` command available using `bin/console`\n- `scripts/unlock_tasks.php` has been replaced by `glpi:task:unlock` command available using `bin/console`\n\n### API changes\n\n#### Changes\n- Plugins are now loaded in ajax files.\n- `TicketFollowup` has been replaced by `ITILFollowup`\n- `$num` parameter has been removed from several `Search` class methods:\n   - `addSelect()`,\n   - `addOrderBy()`,\n   - `addHaving()`,\n   - `giveItem()`\n- `NotificationTarget::getMode()` visibility is now `public`.\n- Added `add_recipient_to_target` hook, triggered when a recipient is added to a notification.\n\n#### Deprecated\n\n- Remove `$CFG_GLPI['use_rich_text']` parameter. Will now be `true` per default.\n- Remove `$CFG_GLPI['ticket_timeline']` parameter. Will now be `true` per default.\n- Remove `$CFG_GLPI['ticket_timeline_keep_replaced_tabs']` parameter. Will now be `false` per default.\n- Usage of `TicketFollowup` class has been deprecated.\n- Usage of string `$condition` parameter in `CommonDBTM::find()` has been deprecated.\n- Usage of string `$condition` parameter in `Dropdown::addNewCondition()` has been deprecated.\n- Usage of string in `$option['condition']` parameter in `Dropdown::show()` has been deprecated.\n\nThe following methods have been deprecated:\n\n- `KnowbaseItemCategory::showFirstLevel()`\n- `Ticket::getTicketActors()`\n- `Ticket::processMassiveActionsForOneItemtype()`\n- `Ticket::showFormMassiveAction()`\n- `Ticket::showMassiveActionsSubForm()`\n- `NotificationTarget::getProfileJoinSql()`\n- `NotificationTarget::getDistinctUserSql()`\n- `NotificationTargetCommonITILObject::getProfileJoinSql()`\n- `RuleCollection::getRuleListQuery()`\n- `getNextItem()`\n- `getPreviousItem()`\n- `CommonDBChild::getSQLRequestToSearchForItem()`\n- `CommonDBConnexity::getSQLRequestToSearchForItem()`\n- `CommonDBRelation::getSQLRequestToSearchForItem()`\n- `Project::addVisibility()`\n- `Project::addVisibilityJoins()`\n\n#### Removed\n\n- Drop ability to use `JOIN` in `DBmysqlIterator::buildQuery()`\n- Drop `NotificationTarget::datas` property\n- Drop support of string `$filter` parameter in `Profileuser::getUserProfiles()`\n- Drop support of string `$condition` parameter in `User::getFromDBbyEmail()`\n- Drop support of string `$condition` parameter in `Group_User::getUserGroups()`\n- Drop support of string `$condition` parameter in `Group_User::getGroupUsers()`\n- Drop support of string `$condition` parameter in `countElementsInTable` (`DbUtils::countElementsInTable()`)\n- Drop support of string `$condition` parameter in `countDistinctElementsInTable` (`DbUtils::countDistinctElementsInTable()`)\n- Drop support of string `$condition` parameter in `countElementsInTableForMyEntities` (`DbUtils::countElementsInTableForMyEntities()`)\n- Drop support of string `$condition` parameter in `countElementsInTableForEntity` (`DbUtils::countElementsInTableForEntity()`)\n- Drop support of string `$condition` parameter in `getAllDatasFromTable` (`DbUtils::getAllDataFromTable()`)\n- Drop ITIL Tasks, Followups and Solutions `showSummary()` and massive actions related methods that are replaced with timeline\n\n- Drop class alias `Event` for `Glpi\\Event`\n- Drop `Zend\\Loader\\SplAutoloader` interface\n- Drop all methods that have been deprecated in GLPI 9.2\n  - `_e()`\n  - `_ex()`\n  - `FieldExists()`\n  - `formatOutputWebLink()`\n  - `TableExists()`\n  - `CommonTreeDropodwn::recursiveCleanSonsAboveID()`\n  - `DBMysql::optimize_tables()`\n  - `NotificationTarget::addToAddressesList()`\n  - `NotificationTarget::getAdditionalTargets()`\n  - `NotificationTarget::getAddressesByGroup()`\n  - `NotificationTarget::getAddressesByTarget()`\n  - `NotificationTarget::getAdminAddress()`\n  - `NotificationTarget::getEntityAdminAddress()`\n  - `NotificationTarget::getItemAuthorAddress()`\n  - `NotificationTarget::getItemGroupAddress()`\n  - `NotificationTarget::getItemGroupSupervisorAddress()`\n  - `NotificationTarget::getItemGroupTechInChargeAddress()`\n  - `NotificationTarget::getItemGroupWithoutSupervisorAddress()`\n  - `NotificationTarget::getItemOwnerAddress()`\n  - `NotificationTarget::getItemTechnicianInChargeAddress()`\n  - `NotificationTarget::getNotificationTargets()`\n  - `NotificationTarget::getSpecificTargets()`\n  - `NotificationTarget::getUserByField()`\n  - `NotificationTarget::getUsersAddressesByProfile()`\n  - `NotificationTargetCommonITILObject::getDatasForObject()`\n  - `NotificationTargetCommonITILObject::getFollowupAuthor()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupByType()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupSupervisorByType()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupWithoutSupervisorByType()`\n  - `NotificationTargetCommonITILObject::getLinkedUserByType()`\n  - `NotificationTargetCommonITILObject::getOldAssignTechnicianAddress()`\n  - `NotificationTargetCommonITILObject::getRecipientAddress()`\n  - `NotificationTargetCommonITILObject::getSupplierAddress()`\n  - `NotificationTargetCommonITILObject::getTaskAssignGroup()`\n  - `NotificationTargetCommonITILObject::getTaskAssignUser()`\n  - `NotificationTargetCommonITILObject::getTaskAuthor()`\n  - `NotificationTargetCommonITILObject::getValidationApproverAddress()`\n  - `NotificationTargetCommonITILObject::getValidationRequesterAddress()`\n  - `NotificationTargetProjectTask::getTeamContacts()`\n  - `NotificationTargetProjectTask::getTeamGroups()`\n  - `NotificationTargetProjectTask::getTeamSuppliers()`\n  - `NotificationTargetProjectTask::getTeamUsers()`\n  - `QueuedNotification::sendMailById()`\n  - `Ticket::convertContentForNotification()`\n  - `User::getPersonalToken()`\n  - `User::getUniquePersonalToken()`\n- Drop all methods that have been deprecated in GLPI 9.3.0\n  - `CommonDBTM::getFromDBByQuery()`\n  - `CommonDBTM::getSearchOptions()`\n  - `CommonDBTM::getSearchOptionsNew()`\n  - `CommonDBTM::getSearchOptionsToAddNew()`\n  - `CommonITILObject::getStatusIconURL()`\n  - `DBMysql::list_tables()`\n  - `Dropdown::showPrivatePublicSwitch()`\n  - `NotificationTargetProjectTask::getTeamContacts()`\n  - `NotificationTargetProjectTask::getTeamGroups()`\n  - `NotificationTargetProjectTask::getTeamSuppliers()`\n  - `NotificationTargetProjectTask::getTeamUsers()`\n  - `Search::constructDatas()`\n  - `Search::displayDatas()`\n  - `Transfer::transferComputerDisks()`\n- Drop all methods that have been deprecated in GLPI 9.3.1\n  - `ComputerVirtualMachine::getUUIDRestrictRequest()`\n  - `Config::getSQLMode()`\n  - `DBMysql::checkForCrashedTables()`\n  - `Html::checkAllAsCheckbox()`\n  - `Html::scriptEnd()`\n  - `Html::scriptStart()`\n  - `Plugin::isAllPluginsCSRFCompliant()`\n  - `Profile::getUnderActiveProfileRestrictRequest()`\n  - `Toolbox::is_a()`\n- Drop all constants that have been deprecated in GLPI 9.3.1\n  - `CommonDBTM::ERROR_FIELDSIZE_EXCEEDED`\n  - `CommonDBTM::HAS_DUPLICATE`\n  - `CommonDBTM::NOTHING_TO_DO`\n  - `CommonDBTM::SUCCESS`\n  - `CommonDBTM::TYPE_MISMATCH`\n- Drop all methods that have been deprecated in GLPI 9.3.2\n - `ITILSolution::removeForItem()`\n - `Session::isViewAllEntities()`\n\n## [9.3.3] 2018-11-27\n\n### Changed\n\n- Fix some cache issues\n- Fix reservation tab of an item\n- Fix actors notifications massive action\n- Improve racks plugins migration script\n\n### API changes\n\nNo API changes.\n\n## [9.3.2] 2018-10-26\n\n### API changes\n\n#### Changed\n\n- `Rule::executePluginsActions()` signature has changed\n- Javascript function `formatResult()` has been renamed to `templateResult()`\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `CommonITILTask::displayTabContentForItem()`\n- `CommonITILTask::showFormMassiveAction()`\n- `CommonITILTask::showSummary()`\n- `ITILSolution::displayTabContentForItem()`\n- `ITILSolution::removeForItem()`\n- `ITILSolution::showSummary()`\n- `Session::isViewAllEntities()`\n- `TicketFollowup::processMassiveActionsForOneItemtype()`\n- `TicketFollowup::showFormMassiveAction()`\n- `TicketFollowup::showMassiveActionsSubForm()`\n- `TicketFollowup::showSummary()`\n- `Plugin::removeFromSession()`\n\n## [9.3.1] 2018-09-12\n\n### Added\n- List receivers folders to choose imported/refused folders\n\n### API changes\n\n#### Deprecated\n\n- Usage of string `$condition` parameter in `Group_User::getUserGroups()` has been deprecated\n- Usage of string `$condition` parameter in `Group_User::getGroupUsers()` has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTable` (`DbUtils::countElementsInTable()`) has been deprecated\n- Usage of string `$condition` parameter in `countDistinctElementsInTable` (`DbUtils::countDistinctElementsInTable()`) has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTableForMyEntities` (`DbUtils::countElementsInTableForMyEntities()`) has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTableForEntity` (`DbUtils::countElementsInTableForEntity()`) has been deprecated\n- Usage of string `$condition` parameter in `getAllDatasFromTable` (`DbUtils::getAllDataFromTable()`) has been deprecated\n\nThe following methods have been deprecated:\n\n- `Config::getSQLMode()`\n- `DBMysql::checkForCrashedTables()`\n- `Html::checkAllAsCheckbox()`\n- `Html::scriptEnd()`\n- `Html::scriptStart()`\n- `Toolbox::is_a()`\n- `ComputerVirtualMachine::getUUIDRestrictRequest()`\n- `Plugin::isAllPluginsCSRFCompliant()`\n- `Profile::getUnderActiveProfileRestrictRequest()`\n\nThe following constants have been deprecated:\n- `CommonDBTM::ERROR_FIELDSIZE_EXCEEDED`\n- `CommonDBTM::HAS_DUPLICATE`\n- `CommonDBTM::NOTHING_TO_DO`\n- `CommonDBTM::SUCCESS`\n- `CommonDBTM::TYPE_MISMATCH`\n\n## [9.3.0] 2018-06-28\n\n### Added\n- Add DCIM management\n- Add OSM view to set locations and on Search\n- Add login source selection\n- Add logs purge\n- Filter in items logs\n\n### Changed\n- Switch MySQL engine from MyIsam to Innodb\n- Rework solutions for Tickets, Problems and Changes to support history\n- Disks can be attached to network equipments and printers\n\n### API changes\n\n#### Changes\n- Added `DB::insert()`, `DB::update()` and `DB::delete()` to replace raw SQL queries\n- `CommonITILObject::showMassiveSolutionForm()` now takes a `CommonITILObject` as argument\n- `Profileuser::getUserProfiles()` `$filter` parameter is now an array\n- `User::getFromDBbyEmail()` `$condition` parameter is now an array\n- Select2 javascript component has been upgraded to 4.0 version, see [Migrating from Select2 3.5](https://select2.org/upgrading/migrating-from-35)\n- `CommonDevice::getItem_DeviceType()` has a new optional `$devicetype` parameter\n\n#### Deprecated\n\n- Usage of string `$filter` parameter in `Profileuser::getUserProfiles()` has been deprecated\n- Usage of string `$condition` parameter in `User::getFromDBbyEmail()` has been deprecated\n\nThe following methods have been deprecated:\n\n- `CommonDBTM::getFromDBByQuery()`\n- `CommonDBTM::getSearchOptions()`\n- `CommonDBTM::getSearchOptionsNew()`\n- `CommonDBTM::getSearchOptionsToAddNew()`\n- `CommonITILObject::getStatusIconURL()`\n- `DBMysql::list_tables()`\n- `Dropdown::showPrivatePublicSwitch()`\n- `NotificationTargetProject::getTeamContacts()`\n- `NotificationTargetProject::getTeamGroups()`\n- `NotificationTargetProject::getTeamSuppliers()`\n- `NotificationTargetProject::getTeamUsers()`\n- `Search::constructDatas()`\n- `Search::displayDatas()`\n- `Transfer::transferComputerDisks()`\n\n#### Removed\n\n- `CommonITILValidation::isAllValidationsHaveSameStatusForTicket`\n- `CommonITILValidation::getNumberValidationForTicket`\n- PHPCas library is no longer provided (for licensing issues)\n\n## [9.2.4] 2018-06-21\n\n## [9.2.3] 2018-04-27\n\n## [9.2.2] 2018-03-01\n\n\n### Deprecated\n\n- `CommonITILValidation::isAllValidationsHaveSameStatusForTicket`\n- `CommonITILValidation::getNumberValidationForTicket`\n- `DBMysql::optimize_tables()`\n\n## [9.2.1] 2017-11-16\n\n### Added\n\n- Search engine, added ``itemtype_item_revert`` jointype\n\n### Deprecated\n\n- `Ticket::convertContentForNotification()`\n\n## [9.2] 2017-09-25\n\n### Added\n- Link knowledge base entries with assets or tickets\n- Revisions on knowledge base entries and their translations, with diff view\n- Add recursive comments on knowledge base entries\n- Direct links to KB article's title for a direct access\n- Load minified CSS and JS files (core and plugins) that are generated on release\n- Link beetween software licenses\n- Alerts on saved searches\n- Add ajax browsers notifications in addition to emails\n- Plugins can now add new notifications types (xmpp, sms, telegram, ...) to be used along with standard notifications\n- Simcard component\n- Synchronization field for LDAP\n- Improved performances on large entities databases\n- Remember me on login\n- Fuzzy search\n- Paste images in rich text editor\n- Add tasks in tickets templates\n- Composite tickets (link on sons/parents)\n- Telemetry\n- Certificates component\n- Firmwares components (BIOSes, firwmwares, ...)\n- Add OLA management\n\n### Changed\n- Many bugs have been fixed\n- Display knowledge base category items in tickets using a popup instead of a\nnew whole window\n- Reviewed all richtext editor (tinymce) and their upload parts, now more simpler and intuitive\n- Don't ask user to select a template if there is no configured template\n- personal_token is not used anymore for api authentication, a new api_token field has been added (empty by default, you should regenerate it)\n- Operating systems management has been improved\n- Direct language change from any page\n- Better icons harmonization\n\n### API changes\n\n#### Changes\n\n- `CommonDBTM::getTable()` signature has changed\n- `User::getFromDBbyToken()` signature has changed\n- `Bookmark` has been renamed to `SavedSearch`\n- Update to latest jsTree plugin\n- `RuleDictionnarySoftwareCollection::versionExists()` signature has changed\n- `NotificationTemplate::getDataToSend()` signature has changed\n- `QueuedMail` has been renamed to `QueuedNotification`\n- `CommonDBTM::mailqueueonaction()` has been renamed to `CommonDBTM::notificationqueueonaction()`\n- `NotificationTarget::getSender()` no longer takes any parameters (was not used)\n- `TableExists()` has been moved to `DBMysql::tableExists()`\n- `FieldExists()` has been moved to `DBMysql::fieldExists()`\n- `Profile_User::getUserEntitiesForRight()` signature has changed\n- `NotificationTarget` property `datas` has been renamed to `data`\n\n#### Deprecated\n\n- Ability to use `JOIN` in `DBmysqlIterator::buildQuery()` has been deprecated\n- Usage of `NotificationTarget::datas` property has been deprecated\n- Usage of `Zend\\Loader\\SplAutoloader` interface has been deprecated\n\nThe following methods have been deprecated:\n\n- `_e()`\n- `_ex()`\n- `Bookmark::mark_default()`\n- `Bookmark::unmark_default()`\n- `CommonTreeDropodwn::recursiveCleanSonsAboveID()`\n- `NotificationTarget::addToAddressesList()`\n- `NotificationTarget::getAdditionalTargets()`\n- `NotificationTarget::getAddressesByGroup()`\n- `NotificationTarget::getAddressesByTarget()`\n- `NotificationTarget::getAdminAddress()`\n- `NotificationTarget::getEntityAdminAddress()`\n- `NotificationTarget::getItemAuthorAddress()`\n- `NotificationTarget::getItemGroupAddress()`\n- `NotificationTarget::getItemGroupSupervisorAddress()`\n- `NotificationTarget::getItemGroupTechInChargeAddress()`\n- `NotificationTarget::getItemGroupWithoutSupervisorAddress()`\n- `NotificationTarget::getItemOwnerAddress()`\n- `NotificationTarget::getItemTechnicianInChargeAddress()`\n- `NotificationTarget::getNotificationTargets()`\n- `NotificationTarget::getSpecificTargets()`\n- `NotificationTarget::getUserByField()`\n- `NotificationTarget::getUsersAddressesByProfile()`\n- `NotificationTargetCommonITILObject::getDatasForObject()`\n- `NotificationTargetCommonITILObject::getFollowupAuthor()`\n- `NotificationTargetCommonITILObject::getLinkedGroupByType()`\n- `NotificationTargetCommonITILObject::getLinkedGroupSupervisorByType()`\n- `NotificationTargetCommonITILObject::getLinkedGroupWithoutSupervisorByType()`\n- `NotificationTargetCommonITILObject::getLinkedUserByType()`\n- `NotificationTargetCommonITILObject::getOldAssignTechnicianAddress()`\n- `NotificationTargetCommonITILObject::getRecipientAddress()`\n- `NotificationTargetCommonITILObject::getSupplierAddress()`\n- `NotificationTargetCommonITILObject::getTaskAssignGroup()`\n- `NotificationTargetCommonITILObject::getTaskAssignUser()`\n- `NotificationTargetCommonITILObject::getTaskAuthor()`\n- `NotificationTargetCommonITILObject::getValidationApproverAddress()`\n- `NotificationTargetCommonITILObject::getValidationRequesterAddress()`\n- `NotificationTargetProjectTask::getTeamContacts()`\n- `NotificationTargetProjectTask::getTeamGroups()`\n- `NotificationTargetProjectTask::getTeamSuppliers()`\n- `NotificationTargetProjectTask::getTeamUsers()`\n- `QueuedNotification::sendMailById()`\n- `User::getPersonalToken()`\n- `User::getUniquePersonalToken()`\n- `formatOutputWebLink()`\n\n#### Removals\n\nThe following methods have been dropped:\n\n- `Ajax::displaySearchTextForDropdown()`\n- `Ajax::getSearchTextForDropdown()`\n- `Bookmark::changeBookmarkOrder()`\n- `Bookmark::moveBookmark()`\n- `CommonGLPI::addDivForTabs()`\n- `CommonGLPI::showTabs()`\n- `CommonGLPI::showNavigationHeaderOld()`\n- `CommonGLPI::show()`\n- `Dropdown::showInteger()`\n- `DBMysql::field_flags()`\n- `Html::showDateFormItem()`\n- `Html::showDateTimeFormItem()`\n- `Profile::dropdownNoneReadWrite()`\n- `Toolbox::get_magic_quotes_runtime()`\n- `Toolbox::get_magic_quotes_gpc()`\n- `Dropdown::showAllItems()`\n\nFor older entries, please check [GLPI website](http://glpi-project.org).\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\n/**\n * @since 0.84\n */\n\n$AJAX_INCLUDE = 1;\n\ninclude ('../inc/includes.php');\n\nheader(\"Content-Type: text/html; charset=UTF-8\");\nHtml::header_nocache();\n\nSession::checkRight(\"networking\", UPDATE);\n\n// Make a select box\nif (class_exists($_POST[\"itemtype\"])\n    && isset($_POST[\"item\"])) {\n   $table = getTableForItemType($_POST[\"itemtype\"]);\n\n   $joins = [];\n   $name_field = new QueryExpression(\"'' AS \" . $DB->quoteName('npname'));\n\n   if ($_POST['instantiation_type'] == 'NetworkPortEthernet') {\n      $name_field = 'glpi_netpoints.name AS npname';\n      $joins = [\n         'glpi_networkportethernets'   => [\n            'ON'  => [\n               'glpi_networkportethernets'   => 'id',\n               'glpi_networkports'           => 'id'\n            ]\n         ],\n         'glpi_netpoints'              => [\n            'ON'  => [\n               'glpi_networkportethernets'   => 'netpoints_id',\n               'glpi_netpoints'              => 'id'\n            ]\n         ]\n      ];\n   }\n\n   $criteria = [\n      'SELECT'    => [\n         'glpi_networkports_networkports.id AS wid',\n         'glpi_networkports.id AS did',\n         \"$table.name AS cname\",\n         'glpi_networkports.name AS nname',\n         $name_field\n      ],\n      'DISTINCT'  => true,\n      'FROM'      => $table,\n      'LEFT JOIN' => [\n         'glpi_networkports'  => [\n            'ON'  => [\n               'glpi_networkports'  => 'items_id',\n               $table               => 'id', [\n                  'AND' => [\n                     'glpi_networkports.items_id'           => $_POST['item'],\n                     'glpi_networkports.itemtype'           => $_POST[\"itemtype\"],\n                     'glpi_networkports.instantiation_type' => $_POST['instantiation_type']\n                  ]\n               ]\n            ]\n         ],\n         'glpi_networkports_networkports' => [\n            'ON'  => [\n               'glpi_networkports_networkports' => 'networkports_id_1',\n               'glpi_networkports'              => 'id', [\n                  'OR'  => [\n                     'glpi_networkports_networkports.networkports_id_2' => new QueryExpression($DB->quoteName('glpi_networkports.id'))\n                  ]\n               ]\n            ]\n         ]\n      ] + $joins,\n      'WHERE'     => [\n         'glpi_networkports_networkports.id' => null,\n         'NOT'                               => ['glpi_networkports.id' => null],\n         'glpi_networkports.id'              => ['<>', $_POST['networkports_id']],\n         \"$table.is_deleted\"                 => 0,\n         \"$table.is_template\"                => 0\n      ],\n      'ORDERBY'   => 'glpi_networkports.id'\n   ];\n   $iterator = $DB->request($criteria);\n\n   echo \"<br>\";\n\n   $values = [];\n   while ($data = $iterator->next()) {\n      // Device name + port name\n      $output = $output_long = $data['cname'];\n\n      if (!empty($data['nname'])) {\n         $output      = sprintf(__('%1$s - %2$s'), $output, $data['nname']);\n         //TRANS: %1$s is device name, %2$s is port name\n         $output_long = sprintf(__('%1$s - The port %2$s'), $output_long, $data['nname']);\n      }\n\n      // display netpoint (which will be copied)\n      if (!empty($data['npname'])) {\n         $output      = sprintf(__('%1$s - %2$s'), $output, $data['npname']);\n         //TRANS: %1$s is a string (device name - port name...), %2$s is network outlet name\n         $output_long = sprintf(__('%1$s - Network outlet %2$s'), $output_long, $data['npname']);\n      }\n      $ID = $data['did'];\n\n      if ($_SESSION[\"glpiis_ids_visible\"] || empty($output) || empty($output_long)) {\n         $output      = sprintf(__('%1$s (%2$s)'), $output, $ID);\n         $output_long = sprintf(__('%1$s (%2$s)'), $output_long, $ID);\n      }\n      $values[$ID] = $output_long;\n   }\n   Dropdown::showFromArray($_POST['myname'], $values, ['display_emptychoice' => true]);\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\n// Needed for signal handler\ndeclare(ticks = 1);\n\nuse Glpi\\Event;\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n * CronTask class\n */\nclass CronTask extends CommonDBTM{\n\n   // From CommonDBTM\n   public $dohistory                   = true;\n\n   // Specific ones\n   static private $lockname = '';\n   private $timer           = 0.0;\n   private $startlog        = 0;\n   private $volume          = 0;\n   static $rightname        = 'config';\n\n   // Class constant\n   const STATE_DISABLE = 0;\n   const STATE_WAITING = 1;\n   const STATE_RUNNING = 2;\n\n   const MODE_INTERNAL = 1;\n   const MODE_EXTERNAL = 2;\n\n\n   static function getForbiddenActionsForMenu() {\n      return ['add'];\n   }\n\n\n   function getForbiddenStandardMassiveAction() {\n\n      $forbidden   = parent::getForbiddenStandardMassiveAction();\n      $forbidden[] = 'delete';\n      $forbidden[] = 'purge';\n      $forbidden[] = 'restore';\n      return $forbidden;\n   }\n\n\n   static function getTypeName($nb = 0) {\n      return _n('Automatic action', 'Automatic actions', $nb);\n   }\n\n\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addDefaultFormTab($ong);\n      $this->addImpactTab($ong, $options);\n      $this->addStandardTab('CronTaskLog', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n\n      return $ong;\n   }\n\n\n   static function canDelete() {\n      return false;\n   }\n\n\n   function cleanDBonPurge() {\n\n      // CronTaskLog does not extends CommonDBConnexity\n      $ctl = new CronTaskLog();\n      $ctl->deleteByCriteria(['crontasks_id' => $this->fields['id']]);\n   }\n\n\n   /**\n    * Read a CronTask by its name\n    *\n    * Used by plugins to load its crontasks\n    *\n    * @param string $itemtype  itemtype of the crontask\n    * @param string $name      name of the task\n    *\n    * @return boolean true if succeed else false\n   **/\n   function getFromDBbyName($itemtype, $name) {\n\n      return $this->getFromDBByCrit([\n         $this->getTable() . '.name'      => $name,\n         $this->getTable() . '.itemtype'  => $itemtype\n      ]);\n   }\n\n\n   /**\n    * Give a task state\n    *\n    * @return integer 0 : task is enabled\n    *    if disable : 1: by config, 2: by system lock, 3: by plugin\n   **/\n   function isDisabled() {\n\n      if ($this->fields['state'] == self::STATE_DISABLE) {\n         return 1;\n      }\n\n      if (is_file(GLPI_CRON_DIR. '/all.lock')\n          || is_file(GLPI_CRON_DIR. '/'.$this->fields['name'].'.lock')) {\n         // Global lock\n         return 2;\n      }\n\n      if (!($tab = isPluginItemType($this->fields['itemtype']))) {\n         return 0;\n      }\n\n      // Plugin case\n      $plug = new Plugin();\n      if (!$plug->isActivated($tab[\"plugin\"])) {\n         return 3;\n      }\n      return 0;\n   }\n\n   /**\n    * Get all itemtypes used\n    *\n    * @return string[]\n   **/\n   static function getUsedItemtypes() {\n      global $DB;\n\n      $types= [];\n      $iterator = $DB->request([\n         'SELECT'          => 'itemtype',\n         'DISTINCT'        => true,\n         'FROM'            => 'glpi_crontasks'\n      ]);\n      while ($data = $iterator->next()) {\n         $types[] = $data['itemtype'];\n      }\n      return $types;\n   }\n\n   /**\n    * Signal handler callback\n    *\n    * @since 9.1\n    */\n   function signal($signo) {\n      if ($signo == SIGTERM) {\n         pcntl_signal(SIGTERM, SIG_DFL);\n\n         // End of this task\n         $this->end(null);\n\n         // End of this cron\n         $_SESSION[\"glpicronuserrunning\"]='';\n         self::release_lock();\n         Toolbox::logInFile('cron', __('Action aborted').\"\\n\");\n         exit;\n      }\n   }\n\n   /**\n    * Start a task, timer, stat, log, ...\n    *\n    * @return bool : true if ok (not start by another)\n   **/\n   function start() {\n      global $DB;\n\n      if (!isset($this->fields['id']) || ($DB->isSlave())) {\n         return false;\n      }\n\n      if (isCommandLine() && function_exists('pcntl_signal')) {\n         pcntl_signal(SIGTERM, [$this, 'signal']);\n      }\n\n      $result = $DB->update(\n         $this->getTable(), [\n            'state'  => self::STATE_RUNNING,\n            'lastrun'   => new \\QueryExpression('DATE_FORMAT(NOW(),\\'%Y-%m-%d %H:%i:00\\')')\n         ], [\n            'id'  => $this->fields['id'],\n            'NOT' => ['state' => self::STATE_RUNNING]\n         ]\n      );\n\n      if ($DB->affectedRows($result)>0) {\n         $this->timer  = microtime(true);\n         $this->volume = 0;\n         $log = new CronTaskLog();\n         // No gettext for log\n         $txt = sprintf('%1$s: %2$s', 'Run mode',\n                        $this->getModeName(isCommandLine() ? self::MODE_EXTERNAL\n                                                           : self::MODE_INTERNAL));\n\n         $this->startlog = $log->add(['crontasks_id'    => $this->fields['id'],\n                                           'date'            => $_SESSION['glpi_currenttime'],\n                                           'content'         => addslashes($txt),\n                                           'crontasklogs_id' => 0,\n                                           'state'           => CronTaskLog::STATE_START,\n                                           'volume'          => 0,\n                                           'elapsed'         => 0]);\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Set the currently proccessed volume of a running task\n    *\n    * @param $volume\n   **/\n   function setVolume($volume) {\n      $this->volume = $volume;\n   }\n\n\n   /**\n    * Increase the currently proccessed volume of a running task\n    *\n    * @param $volume\n   **/\n   function addVolume($volume) {\n      $this->volume += $volume;\n   }\n\n\n   /**\n    * Start a task, timer, stat, log, ...\n    *\n    * @param $retcode : <0 : need to run again, 0:nothing to do, >0:ok\n    *\n    * @return bool : true if ok (not start by another)\n   **/\n   function end($retcode) {\n      global $DB;\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n\n      $result = $DB->update(\n         $this->getTable(), [\n            'state'  => $this->fields['state']\n         ], [\n            'id'     => $this->fields['id'],\n            'state'  => self::STATE_RUNNING\n         ]\n      );\n\n      if ($DB->affectedRows($result) > 0) {\n         // No gettext for log but add gettext line to be parsed for pot generation\n         // order is important for insertion in english in the database\n         if (is_null($retcode)) {\n            $content = __('Action aborted');\n            $content = 'Action aborted';\n         } else if ($retcode < 0) {\n            $content = __('Action completed, partially processed');\n            $content = 'Action completed, partially processed';\n\n         } else if ($retcode > 0) {\n            $content = __('Action completed, fully processed');\n            $content = 'Action completed, fully processed';\n         } else {\n            $content = __('Action completed, no processing required');\n            $content = 'Action completed, no processing required';\n         }\n\n         $log = new CronTaskLog();\n         $log->add(['crontasks_id'    => $this->fields['id'],\n                         'date'            => $_SESSION['glpi_currenttime'],\n                         'content'         => $content,\n                         'crontasklogs_id' => $this->startlog,\n                         'state'           => CronTaskLog::STATE_STOP,\n                         'volume'          => $this->volume,\n                         'elapsed'         => (microtime(true)-$this->timer)]);\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Add a log message for a running task\n    *\n    * @param string $content\n   **/\n   function log($content) {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      $log     = new CronTaskLog();\n      $content = Toolbox::substr($content, 0, 200);\n      return $log->add(['crontasks_id'    => $this->fields['id'],\n                             'date'            => $_SESSION['glpi_currenttime'],\n                             'content'         => addslashes($content),\n                             'crontasklogs_id' => $this->startlog,\n                             'state'           => CronTaskLog::STATE_RUN,\n                             'volume'          => $this->volume,\n                             'elapsed'         => (microtime(true)-$this->timer)]);\n   }\n\n\n   /**\n    * read the first task which need to be run by cron\n    *\n    * @param integer $mode >0 retrieve task configured for this mode\n    *                      <0 retrieve task allowed for this mode (force, no time check)\n    * @param string $name  one specify action\n    *\n    * @return boolean false if no task to run\n   **/\n   function getNeedToRun($mode = 0, $name = '') {\n      global $DB;\n\n      $hour = date('H');\n      // First core ones\n      $WHERE = ['NOT' => ['itemtype' => ['LIKE', 'Plugin%']]];\n\n      // Only activated plugins\n      foreach (Plugin::getPlugins() as $plug) {\n         $WHERE = ['OR' => $WHERE + ['itemtype' => ['LIKE', \"Plugin$plug%\"]]];\n      }\n\n      if ($name) {\n         $WHERE['name'] = addslashes($name);\n      }\n\n      // In force mode\n      if ($mode < 0) {\n         $WHERE['state'] = ['!=', self::STATE_RUNNING];\n         $WHERE['allowmode'] = ['&', (int)$mode * -1];\n      } else {\n         $WHERE['state'] = self::STATE_WAITING;\n         if ($mode > 0) {\n            $WHERE['mode'] = $mode;\n         }\n\n         // Get system lock\n         if (is_file(GLPI_CRON_DIR. '/all.lock')) {\n            // Global lock\n            return false;\n         }\n         $locks = [];\n         foreach (glob(GLPI_CRON_DIR. '/*.lock') as $lock) {\n            $reg = [];\n            if (preg_match('!.*/(.*).lock$!', $lock, $reg)) {\n               $locks[] = $reg[1];\n            }\n         }\n         if (count($locks)) {\n            $WHERE[] = ['NOT' => ['name' => $locks]];\n         }\n\n         // Build query for frequency and allowed hour\n         $WHERE[] = ['OR' => [\n            ['AND' => [\n               ['hourmin'   => ['<', new QueryExpression($DB->quoteName('hourmax'))]],\n               'hourmin'   => ['<=', $hour],\n               'hourmax'   => ['>', $hour]\n            ]],\n            ['AND' => [\n               'hourmin'   => ['>', new QueryExpression($DB->quoteName('hourmax'))],\n               'OR'        => [\n                  'hourmin'   => ['<=', $hour],\n                  'hourmax'   => ['>', $hour]\n               ]\n            ]]\n         ]];\n         $WHERE[] = ['OR' => [\n            'lastrun'   => null,\n            new \\QueryExpression('unix_timestamp(' . $DB->quoteName('lastrun') . ') + ' . $DB->quoteName('frequency') . ' <= unix_timestamp(now())')\n         ]];\n      }\n\n      $iterator = $DB->request([\n         'SELECT' => [\n            '*',\n            new \\QueryExpression(\"LOCATE('Plugin', \" . $DB->quoteName('itemtype') . \") AS ISPLUGIN\")\n         ],\n         'FROM'   => $this->getTable(),\n         'WHERE'  => $WHERE,\n         // Core task before plugins\n         'ORDER'  => [\n            'ISPLUGIN',\n            new \\QueryExpression('unix_timestamp(' . $DB->quoteName('lastrun') . ')+' . $DB->quoteName('frequency') . '')\n         ]\n      ]);\n\n      if (count($iterator)) {\n         $this->fields = $iterator->next();\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Print the contact form\n    *\n    * @param integer $ID\n    * @param array   $options\n    *     - target filename : where to go when done.\n    *     - withtemplate boolean : template or basic item\n    *\n    * @return boolean\n   **/\n   function showForm($ID, $options = []) {\n      global $CFG_GLPI;\n\n      if (!Config::canView() || !$this->getFromDB($ID)) {\n         return false;\n      }\n      $options['candel'] = false;\n      $this->showFormHeader($options);\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Name').\"</td>\";\n      echo \"<td class ='b'>\";\n      $name = $this->fields[\"name\"];\n      if ($isplug = isPluginItemType($this->fields[\"itemtype\"])) {\n         $name = sprintf(__('%1$s - %2$s'), $isplug[\"plugin\"], $name);\n      }\n      echo $name.\"</td>\";\n      echo \"<td rowspan='6' class='middle right'>\".__('Comments').\"</td>\";\n      echo \"<td class='center middle' rowspan='6'>\";\n      echo \"<textarea cols='45' rows='8' name='comment' >\".$this->fields[\"comment\"].\"</textarea>\";\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Description').\"</td><td>\";\n      echo $this->getDescription($ID);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Run frequency').\"</td><td>\";\n      $this->dropdownFrequency('frequency', $this->fields[\"frequency\"]);\n      echo \"</td></tr>\";\n\n      $tmpstate = $this->fields[\"state\"];\n      echo \"<tr class='tab_bg_1'><td>\".__('Status').\"</td><td>\";\n      if (is_file(GLPI_CRON_DIR. '/'.$this->fields[\"name\"].'.lock')\n          || is_file(GLPI_CRON_DIR. '/all.lock')) {\n         echo \"<span class='b'>\" . __('System lock').\"</span><br>\";\n         $tmpstate = self::STATE_DISABLE;\n      }\n\n      if ($isplug) {\n         $plug = new Plugin();\n         if (!$plug->isActivated($isplug[\"plugin\"])) {\n            echo \"<span class='b'>\" . __('Disabled plugin').\"</span><br>\";\n            $tmpstate = self::STATE_DISABLE;\n         }\n      }\n\n      if ($this->fields[\"state\"] == self::STATE_RUNNING) {\n         echo \"<span class='b'>\" . $this->getStateName(self::STATE_RUNNING).\"</span>\";\n      } else {\n         self::dropdownState('state', $this->fields[\"state\"]);\n      }\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Run mode').\"</td><td>\";\n      $modes = [];\n      if ($this->fields['allowmode']&self::MODE_INTERNAL) {\n         $modes[self::MODE_INTERNAL] = self::getModeName(self::MODE_INTERNAL);\n      }\n      if ($this->fields['allowmode']&self::MODE_EXTERNAL) {\n         $modes[self::MODE_EXTERNAL] = self::getModeName(self::MODE_EXTERNAL);\n      }\n      Dropdown::showFromArray('mode', $modes, ['value' => $this->fields['mode']]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Run period').\"</td><td>\";\n      Dropdown::showNumber('hourmin', ['value' => $this->fields['hourmin'],\n                                            'min'   => 0,\n                                            'max'   => 24]);\n      echo \"&nbsp;->&nbsp;\";\n      Dropdown::showNumber('hourmax', ['value' => $this->fields['hourmax'],\n                                            'min'   => 0,\n                                            'max'   => 24]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Number of days this action logs are stored').\"</td><td>\";\n      Dropdown::showNumber('logs_lifetime', ['value' => $this->fields['logs_lifetime'],\n                                                  'min'   => 10,\n                                                  'max'   => 360,\n                                                  'step'  => 10,\n                                                  'toadd' => [0 => __('Infinite')]]);\n      echo \"</td><td>\".__('Last run').\"</td><td>\";\n\n      if (empty($this->fields['lastrun'])) {\n         echo __('Never');\n      } else {\n         echo Html::convDateTime($this->fields['lastrun']);\n         echo \"&nbsp;\";\n         Html::showSimpleForm(static::getFormURL(), 'resetdate', __('Blank'),\n                              ['id' => $ID], 'fa-times-circle');\n      }\n      echo \"</td></tr>\";\n\n      $label = $this->getParameterDescription();\n      echo \"<tr class='tab_bg_1'><td>\";\n      if (empty($label)) {\n         echo \"&nbsp;</td><td>&nbsp;\";\n      } else {\n         echo $label.\"&nbsp;</td><td>\";\n         Dropdown::showNumber('param', ['value' => $this->fields['param'],\n                                             'min'   => 0,\n                                             'max'   => 400]);\n      }\n      echo \"</td><td>\".__('Next run').\"</td><td>\";\n\n      if ($tmpstate == self::STATE_RUNNING) {\n         $launch = false;\n      } else {\n         $launch = $this->fields['allowmode']&self::MODE_INTERNAL;\n      }\n\n      if ($tmpstate != self::STATE_WAITING) {\n         echo $this->getStateName($tmpstate);\n      } else if (empty($this->fields['lastrun'])) {\n         echo __('As soon as possible');\n      } else {\n         $next = strtotime($this->fields['lastrun'])+$this->fields['frequency'];\n         $h    = date('H', $next);\n         $deb  = ($this->fields['hourmin'] < 10 ? \"0\".$this->fields['hourmin']\n                                                : $this->fields['hourmin']);\n         $fin  = ($this->fields['hourmax'] < 10 ? \"0\".$this->fields['hourmax']\n                                                : $this->fields['hourmax']);\n\n         if (($deb < $fin)\n             && ($h < $deb)) {\n            $disp = date('Y-m-d', $next). \" $deb:00:00\";\n            $next = strtotime($disp);\n         } else if (($deb < $fin)\n                    && ($h >= $this->fields['hourmax'])) {\n            $disp = date('Y-m-d', $next+DAY_TIMESTAMP). \" $deb:00:00\";\n            $next = strtotime($disp);\n         }\n\n         if (($deb > $fin)\n             && ($h < $deb)\n             && ($h >= $fin)) {\n            $disp = date('Y-m-d', $next). \" $deb:00:00\";\n            $next = strtotime($disp);\n         } else {\n            $disp = date(\"Y-m-d H:i:s\", $next);\n         }\n\n         if ($next < time()) {\n            echo __('As soon as possible').'<br>('.Html::convDateTime($disp).') ';\n         } else {\n            echo Html::convDateTime($disp);\n         }\n      }\n\n      if (isset($CFG_GLPI['maintenance_mode']) && $CFG_GLPI['maintenance_mode']) {\n         echo \"<div class='warning'>\".\n              __('Maintenance mode enabled, running tasks is disabled').\n              \"</div>\";\n      } else if ($launch) {\n         echo \"&nbsp;\";\n         Html::showSimpleForm(static::getFormURL(), ['execute' => $this->fields['name']],\n                              __('Execute'));\n      }\n      if ($tmpstate == self::STATE_RUNNING) {\n         Html::showSimpleForm(static::getFormURL(), 'resetstate', __('Blank'),\n                              ['id' => $ID], 'fa-times-circle');\n      }\n      echo \"</td></tr>\";\n\n      $this->showFormButtons($options);\n\n      return true;\n   }\n\n\n   /**\n    * reset the next launch date => for a launch as soon as possible\n   **/\n   function resetDate () {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      return $this->update(['id'      => $this->fields['id'],\n                                 'lastrun' => 'NULL']);\n   }\n\n\n   /**\n    * reset the current state\n   **/\n   function resetState () {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      return $this->update(['id'    => $this->fields['id'],\n                                 'state' => self::STATE_WAITING]);\n   }\n\n\n   /**\n    * Translate task description\n    *\n    * @param $id integer ID of the crontask\n    *\n    * @return string\n   **/\n   public function getDescription($id) {\n\n      if (!isset($this->fields['id']) || ($this->fields['id'] != $id)) {\n         $this->getFromDB($id);\n      }\n\n      $hook = [$this->fields['itemtype'], 'cronInfo'];\n      if (is_callable($hook)) {\n         $info = call_user_func($hook, $this->fields['name']);\n      } else {\n         $info = false;\n      }\n\n      if (isset($info['description'])) {\n         return $info['description'];\n      }\n\n      return $this->fields['name'];\n   }\n\n\n   /**\n    * Translate task parameter description\n    *\n    * @return string\n   **/\n   public function getParameterDescription() {\n\n      $hook = [$this->fields['itemtype'], 'cronInfo'];\n\n      if (is_callable($hook)) {\n         $info = call_user_func($hook, $this->fields['name']);\n      } else {\n         $info = false;\n      }\n\n      if (isset($info['parameter'])) {\n         return $info['parameter'];\n      }\n\n      return '';\n   }\n\n\n   /**\n    * Translate state to string\n    *\n    * @param $state integer\n    *\n    * @return string\n   **/\n   static public function getStateName($state) {\n\n      switch ($state) {\n         case self::STATE_RUNNING :\n            return __('Running');\n\n         case self::STATE_WAITING :\n            return __('Scheduled');\n\n         case self::STATE_DISABLE :\n            return __('Disabled');\n      }\n\n      return '???';\n   }\n\n\n   /**\n    * Dropdown of state\n    *\n    * @param string  $name     select name\n    * @param integer $value    default value\n    * @param boolean $display  display or get string\n    *\n    * @return string|integer HTML output, or random part of dropdown ID.\n   **/\n   static function dropdownState($name, $value = 0, $display = true) {\n\n      return Dropdown::showFromArray($name,\n                                     [self::STATE_DISABLE => __('Disabled'),\n                                           self::STATE_WAITING => __('Scheduled')],\n                                     ['value'   => $value,\n                                           'display' => $display]);\n   }\n\n\n   /**\n    * Translate Mode to string\n    *\n    * @param $mode integer\n    *\n    * @return string\n   **/\n   static public function getModeName($mode) {\n\n      switch ($mode) {\n         case self::MODE_INTERNAL :\n            return __('GLPI');\n\n         case self::MODE_EXTERNAL :\n            return __('CLI');\n      }\n\n      return '???';\n   }\n\n\n   /**\n    * Get a global database lock for cron\n    *\n    * @return Boolean\n   **/\n   static private function get_lock() {\n      global $DB;\n\n      // Changer de nom toutes les heures en cas de blocage MySQL (ca arrive)\n      $nom = \"glpicron.\" . intval(time()/HOUR_TIMESTAMP-340000);\n\n      if ($DB->getLock($nom)) {\n         self::$lockname = $nom;\n         return true;\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Release the global database lock\n   **/\n   static private function release_lock() {\n      global $DB;\n\n      if (self::$lockname) {\n         $DB->releaseLock(self::$lockname);\n         self::$lockname = '';\n      }\n   }\n\n\n   /**\n    * Launch the need cron tasks\n    *\n    * @param integer $mode   (internal/external, <0 to force)\n    * @param integer $max    number of task to launch\n    * @param string  $name   name of task to run\n    *\n    * @return string|boolean the name of last task launched, or false if execution not available\n   **/\n   static public function launch($mode, $max = 1, $name = '') {\n      global $CFG_GLPI;\n\n      // No cron in maintenance mode\n      if (isset($CFG_GLPI['maintenance_mode']) && $CFG_GLPI['maintenance_mode']) {\n         Toolbox::logInFile('cron', __('Maintenance mode enabled, running tasks is disabled').\"\\n\");\n         return false;\n      }\n\n      $crontask = new self();\n      $taskname = '';\n      if (abs($mode) == self::MODE_EXTERNAL) {\n         // If cron is launched in command line, and if memory is insufficient,\n         // display a warning in the logs\n         if (Toolbox::checkMemoryLimit() == 2) {\n            Toolbox::logInFile('cron', __('A minimum of 64 Mio is commonly required for GLPI.').\"\\n\");\n         }\n         // If no task in CLI mode, call cron.php from command line is not really usefull ;)\n         if (!countElementsInTable($crontask->getTable(), ['mode' => abs($mode)])) {\n            Toolbox::logInFile('cron',\n                               __('No task with Run mode = CLI, fix your tasks configuration').\"\\n\");\n         }\n      }\n\n      if (self::get_lock()) {\n         for ($i=1; $i<=$max; $i++) {\n            $prefix = (abs($mode) == self::MODE_EXTERNAL ? __('External')\n                                                         : __('Internal'));\n            if ($crontask->getNeedToRun($mode, $name)) {\n               $_SESSION[\"glpicronuserrunning\"] = \"cron_\".$crontask->fields['name'];\n\n               if ($plug = isPluginItemType($crontask->fields['itemtype'])) {\n                  Plugin::load($plug['plugin'], true);\n               }\n               $fonction = [$crontask->fields['itemtype'],\n                                 'cron' . $crontask->fields['name']];\n\n               if (is_callable($fonction)) {\n                  if ($crontask->start()) { // Lock in DB + log start\n                     $taskname = $crontask->fields['name'];\n                     //TRANS: %1$s is mode (external or internal), %2$s is an order number,\n                     $msgcron = sprintf(__('%1$s #%2$s'), $prefix, $i);\n                     $msgcron = sprintf(__('%1$s: %2$s'), $msgcron,\n                                        sprintf(__('%1$s %2$s').\"\\n\",\n                                                __('Launch'), $crontask->fields['name']));\n                     Toolbox::logInFile('cron', $msgcron);\n                     $retcode = call_user_func($fonction, $crontask);\n                     $crontask->end($retcode); // Unlock in DB + log end\n                  } else {\n                     $msgcron = sprintf(__('%1$s #%2$s'), $prefix, $i);\n                     $msgcron = sprintf(__('%1$s: %2$s'), $msgcron,\n                                        sprintf(__('%1$s %2$s').\"\\n\",\n                                                __(\"Can't start\"), $crontask->fields['name']));\n                     Toolbox::logInFile('cron', $msgcron);\n                  }\n\n               } else {\n                  if (is_array($fonction)) {\n                     $fonction = implode('::', $fonction);\n                  }\n                  Toolbox::logInFile('php-errors',\n                                     sprintf(__('Undefined function %s (for cron)').\"\\n\",\n                                             $fonction));\n                  $msgcron = sprintf(__('%1$s #%2$s'), $prefix, $i);\n                  $msgcron = sprintf(__('%1$s: %2$s'), $msgcron,\n                                     sprintf(__('%1$s %2$s').\"\\n\",\n                                             __(\"Can't start\"), $crontask->fields['name']));\n                  Toolbox::logInFile('cron', $msgcron .\"\\n\".\n                                             sprintf(__('Undefined function %s (for cron)').\"\\n\",\n                                                     $fonction));\n               }\n\n            } else if ($i==1) {\n               $msgcron = sprintf(__('%1$s #%2$s'), $prefix, $i);\n               $msgcron = sprintf(__('%1$s: %2$s'), $msgcron, __('Nothing to launch'));\n               Toolbox::logInFile('cron', $msgcron.\"\\n\");\n            }\n         } // end for\n         $_SESSION[\"glpicronuserrunning\"]='';\n         self::release_lock();\n\n      } else {\n         Toolbox::logInFile('cron', __(\"Can't get DB lock\").\"\\n\");\n      }\n\n      return $taskname;\n   }\n\n\n   /**\n    * Register new task for plugin (called by plugin during install)\n    *\n    * @param string  $itemtype  itemtype of the plugin object\n    * @param string  $name      task name\n    * @param integer $frequency execution frequency\n    * @param array   $options   optional options\n    *       (state, mode, allowmode, hourmin, hourmax, logs_lifetime, param, comment)\n    *\n    * @return boolean\n   **/\n   static public function register($itemtype, $name, $frequency, $options = []) {\n\n      // Check that hook exists\n      if (!isPluginItemType($itemtype) && !class_exists($itemtype)) {\n         return false;\n      }\n\n      // manage NS class\n      $itemtype = addslashes($itemtype);\n\n      $temp = new self();\n      // Avoid duplicate entry\n      if ($temp->getFromDBbyName($itemtype, $name)) {\n         return false;\n      }\n      $input = [\n         'itemtype'  => $itemtype,\n         'name'      => $name,\n         'allowmode' => self::MODE_INTERNAL | self::MODE_EXTERNAL,\n         'frequency' => $frequency\n      ];\n\n      foreach (['allowmode', 'comment', 'hourmax', 'hourmin', 'logs_lifetime', 'mode',\n                     'param', 'state'] as $key) {\n         if (isset($options[$key])) {\n            $input[$key] = $options[$key];\n         }\n      }\n      if (defined('GLPI_SYSTEM_CRON')\n          && ($input['allowmode'] & self::MODE_EXTERNAL)\n          && !isset($input['mode'])) {\n         // Downstream packages may provide a good system cron\n         $input['mode'] = self::MODE_EXTERNAL;\n      }\n      return $temp->add($input);\n   }\n\n\n   /**\n    * Unregister tasks for a plugin (call by glpi after uninstall)\n    *\n    * @param $plugin : name of the plugin\n    *\n    * @return bool for success\n   **/\n   static public function unregister($plugin) {\n      global $DB;\n\n      if (empty($plugin)) {\n         return false;\n      }\n      $temp = new CronTask();\n      $ret  = true;\n\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => ['itemtype' => ['LIKE', \"Plugin$plugin%\"]]\n      ]);\n\n      while ($data = $iterator->next()) {\n         if (!$temp->delete($data)) {\n            $ret = false;\n         }\n      }\n\n      return $ret;\n   }\n\n\n   /**\n    * Display statistics of a task\n    *\n    * @return void\n   **/\n   function showStatistics() {\n      global $DB;\n\n      echo \"<br><div class='center'>\";\n      echo \"<table class='tab_cadre'>\";\n      echo \"<tr><th colspan='2'>&nbsp;\".__('Statistics').\"</th></tr>\\n\";\n\n      $nbstart = countElementsInTable('glpi_crontasklogs',\n                                      ['crontasks_id' => $this->fields['id'],\n                                       'state'        => CronTaskLog::STATE_START ]);\n      $nbstop  = countElementsInTable('glpi_crontasklogs',\n                                      ['crontasks_id' => $this->fields['id'],\n                                       'state'        => CronTaskLog::STATE_STOP ]);\n\n      echo \"<tr class='tab_bg_2'><td>\".__('Run count').\"</td><td class='right'>\";\n      if ($nbstart == $nbstop) {\n         echo $nbstart;\n      } else {\n         // This should not appen => task crash ?\n         //TRANS: %s is the number of starts\n         printf(_n('%s start', '%s starts', $nbstart), $nbstart);\n         echo \"<br>\";\n         //TRANS: %s is the number of stops\n         printf(_n('%s stop', '%s stops', $nbstop), $nbstop);\n      }\n      echo \"</td></tr>\";\n\n      if ($nbstop) {\n         $data = $DB->request([\n            'SELECT' => [\n               'MIN' => [\n                  'date AS datemin',\n                  'elapsed AS elapsedmin',\n                  'volume AS volmin'\n               ],\n               'MAX' => [\n                  'elapsed AS elapsedmax',\n                  'volume AS volmax'\n               ],\n               'SUM' => [\n                  'elapsed AS elapsedtot',\n                  'volume AS voltot'\n               ],\n               'AVG' => [\n                  'elapsed AS elapsedavg',\n                  'volume AS volavg'\n               ]\n            ],\n            'FROM'   => CronTaskLog::getTable(),\n            'WHERE'  => [\n               'crontasks_id' => $this->fields['id'],\n               'state'        => CronTaskLog::STATE_STOP\n            ]\n         ])->next();\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Start date').\"</td>\";\n         echo \"<td class='right'>\".Html::convDateTime($data['datemin']).\"</td></tr>\";\n\n         echo \"<tr class='tab_bg_2'><td>\".__('Minimal time').\"</td>\";\n         echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds', $data['elapsedmin']),\n                                             number_format($data['elapsedmin'], 2));\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Maximal time').\"</td>\";\n         echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds', $data['elapsedmax']),\n                                             number_format($data['elapsedmax'], 2));\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_2'><td>\".__('Average time').\"</td>\";\n         echo \"<td class='right b'>\".sprintf(_n('%s second', '%s seconds', $data['elapsedavg']),\n                                             number_format($data['elapsedavg'], 2));\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Total duration').\"</td>\";\n         echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds', $data['elapsedtot']),\n                                             number_format($data['elapsedtot'], 2));\n         echo \"</td></tr>\";\n\n         if ($data['voltot'] > 0) {\n            echo \"<tr class='tab_bg_2'><td>\".__('Minimal count').\"</td>\";\n            echo \"<td class='right'>\".sprintf(_n('%s item', '%s items', $data['volmin']),\n                                              $data['volmin']).\"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\".__('Maximal count').\"</td>\";\n            echo \"<td class='right'>\".sprintf(_n('%s item', '%s items', $data['volmax']),\n                                              $data['volmax']).\"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td>\".__('Average count').\"</td>\";\n            echo \"<td class='right b'>\".sprintf(_n('%s item', '%s items', $data['volavg']),\n                                                number_format($data['volavg'], 2)).\n                 \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\".__('Total count').\"</td>\";\n            echo \"<td class='right'>\". sprintf(_n('%s item', '%s items', $data['voltot']),\n                                               $data['voltot']).\"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td>\".__('Average speed').\"</td>\";\n            echo \"<td class='left'>\".sprintf(__('%s items/sec'),\n                                             number_format($data['voltot']/$data['elapsedtot'], 2));\n            echo \"</td></tr>\";\n         }\n      }\n      echo \"</table></div>\";\n   }\n\n\n   /**\n    * Display list of a runned tasks\n    *\n    * @return void\n   **/\n   function showHistory() {\n      global $DB;\n\n      if (isset($_GET[\"crontasklogs_id\"]) && $_GET[\"crontasklogs_id\"]) {\n         return $this->showHistoryDetail($_GET[\"crontasklogs_id\"]);\n      }\n\n      if (isset($_GET[\"start\"])) {\n         $start = $_GET[\"start\"];\n      } else {\n         $start = 0;\n      }\n\n      // Total Number of events\n      $number = countElementsInTable('glpi_crontasklogs',\n                                     ['crontasks_id' => $this->fields['id'],\n                                      'state'        => CronTaskLog::STATE_STOP ]);\n\n      echo \"<br><div class='center'>\";\n      if ($number < 1) {\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr><th>\".__('No item found').\"</th></tr>\";\n         echo \"</table>\";\n         echo \"</div>\";\n         return;\n      }\n\n      // Display the pager\n      Html::printAjaxPager(__('Last run list'), $start, $number);\n\n      $iterator = $DB->request([\n         'FROM'   => 'glpi_crontasklogs',\n         'WHERE'  => [\n            'crontasks_id' => $this->fields['id'],\n            'state'        => CronTaskLog::STATE_STOP\n         ],\n         'ORDER'  => 'id DESC',\n         'START'  => (int)$start,\n         'LIMIT'  => (int)$_SESSION['glpilist_limit']\n      ]);\n\n      if (count($iterator)) {\n         echo \"<table class='tab_cadrehov'>\";\n         $header = \"<tr>\";\n         $header .= \"<th>\"._n('Date', 'Dates', 1).\"</th>\";\n         $header .= \"<th>\".__('Total duration').\"</th>\";\n         $header .= \"<th>\"._x('quantity', 'Number').\"</th>\";\n         $header .= \"<th>\".__('Description').\"</th>\";\n         $header .= \"</tr>\\n\";\n         echo $header;\n\n         while ($data = $iterator->next()) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td><a href='javascript:reloadTab(\\\"crontasklogs_id=\".\n                        $data['crontasklogs_id'].\"\\\");'>\".Html::convDateTime($data['date']).\n                  \"</a></td>\";\n            echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds',\n                                                   intval($data['elapsed'])),\n                                                number_format($data['elapsed'], 3)).\n                  \"&nbsp;&nbsp;&nbsp;</td>\";\n            echo \"<td class='numeric'>\".$data['volume'].\"</td>\";\n            // Use gettext to display\n            echo \"<td>\".__($data['content']).\"</td>\";\n            echo \"</tr>\\n\";\n         }\n         echo $header;\n         echo \"</table>\";\n\n      } else { // Not found\n         echo __('No item found');\n      }\n      Html::printAjaxPager(__('Last run list'), $start, $number);\n\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Display detail of a runned task\n    *\n    * @param $logid : crontasklogs_id\n    *\n    * @return void\n   **/\n   function showHistoryDetail($logid) {\n      global $DB;\n\n      echo \"<br><div class='center'>\";\n      echo \"<p><a href='javascript:reloadTab(\\\"crontasklogs_id=0\\\");'>\".__('Last run list').\"</a>\".\n           \"</p>\";\n\n      $iterator = $DB->request([\n         'FROM'   => 'glpi_crontasklogs',\n         'WHERE'  => [\n            'OR' => [\n               'id'              => $logid,\n               'crontasklogs_id' => $logid\n            ]\n         ],\n         'ORDER'  => 'id ASC'\n      ]);\n\n      if (count($iterator)) {\n         echo \"<table class='tab_cadrehov'><tr>\";\n         echo \"<th>\"._n('Date', 'Dates', 1).\"</th>\";\n         echo \"<th>\".__('Status').\"</th>\";\n         echo \"<th>\". __('Duration').\"</th>\";\n         echo \"<th>\"._x('quantity', 'Number').\"</th>\";\n         echo \"<th>\".__('Description').\"</th>\";\n         echo \"</tr>\\n\";\n\n         $first = true;\n         while ($data = $iterator->next()) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td class='center'>\".($first ? Html::convDateTime($data['date'])\n                                                : \"&nbsp;\").\"</a></td>\";\n            $content = $data['content'];\n            switch ($data['state']) {\n               case CronTaskLog::STATE_START :\n                  echo \"<td>\".__('Start').\"</td>\";\n                  // Pass content to gettext\n                  // implode (Run mode: XXX)\n                  $list = explode(':', $data['content']);\n                  if (count($list)==2) {\n                     $content = sprintf('%1$s: %2$s', __($list[0]), $list[1]);\n                  }\n                  break;\n\n               case CronTaskLog::STATE_STOP :\n                  echo \"<td>\".__('End').\"</td>\";\n                  // Pass content to gettext\n                  $content = __($data['content']);\n                  break;\n\n               default :\n                  echo \"<td>\".__('Running').\"</td>\";\n                  // Pass content to gettext\n                  $content = __($data['content']);\n            }\n\n            echo \"<td class='right'>\".sprintf(_n('%s second', '%s seconds',\n                                                   intval($data['elapsed'])),\n                                                number_format($data['elapsed'], 3)).\n                  \"&nbsp;&nbsp;</td>\";\n            echo \"<td class='numeric'>\".$data['volume'].\"</td>\";\n\n            echo \"<td>\".$content.\"</td>\";\n            echo \"</tr>\\n\";\n            $first = false;\n         };\n\n         echo \"</table>\";\n\n      } else { // Not found\n         echo __('No item found');\n      }\n\n      echo \"</div>\";\n   }\n\n\n   /**\n    * @since 0.84\n    *\n    * @param $field\n    * @param $name               (default '')\n    * @param $values             (default '')\n    * @param $options      array\n   **/\n   static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      $options['display'] = 0;\n      switch ($field) {\n         case 'mode':\n            $options['value']         = $values[$field];\n            $tab = [\n               self::MODE_INTERNAL => self::getModeName(self::MODE_INTERNAL),\n               self::MODE_EXTERNAL => self::getModeName(self::MODE_EXTERNAL),\n            ];\n            return Dropdown::showFromArray($name, $tab, $options);\n\n         case 'state' :\n            return CronTask::dropdownState($name, $values[$field], false);\n      }\n\n      return parent::getSpecificValueToSelect($field, $name, $values, $options);\n   }\n\n\n   static function getSpecificValueToDisplay($field, $values, array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      switch ($field) {\n         case 'mode':\n            return self::getModeName($values[$field]);\n\n         case 'state':\n            return self::getStateName($values[$field]);\n      }\n      return parent::getSpecificValueToDisplay($field, $values, $options);\n   }\n\n\n   function getSpecificMassiveActions($checkitem = null) {\n\n      $isadmin = static::canUpdate();\n      $actions = parent::getSpecificMassiveActions($checkitem);\n\n      if ($isadmin) {\n         $actions[__CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR.'reset'] = __('Reset last run');\n      }\n      return $actions;\n   }\n\n\n   static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item,\n                                                       array $ids) {\n\n      switch ($ma->getAction()) {\n         case 'reset' :\n            if (Config::canUpdate()) {\n               foreach ($ids as $key) {\n                  if ($item->getFromDB($key)) {\n                     if ($item->resetDate()) {\n                        $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                     } else {\n                        $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_KO);\n                        $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                     }\n                  } else {\n                     $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_KO);\n                     $ma->addMessage($item->getErrorMessage(ERROR_NOT_FOUND));\n                  }\n               }\n            } else {\n               $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_NORIGHT);\n               $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n            }\n            return;\n      }\n      parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n   }\n\n\n   function rawSearchOptions() {\n      global $DB;\n\n      $tab = [];\n\n      $tab[] = [\n         'id'                 => 'common',\n         'name'               => __('Characteristics')\n      ];\n\n      $tab[] = [\n         'id'                 => '1',\n         'table'              => $this->getTable(),\n         'field'              => 'name',\n         'name'               => __('Name'),\n         'datatype'           => 'itemlink',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '2',\n         'table'              => $this->getTable(),\n         'field'              => 'id',\n         'name'               => __('ID'),\n         'massiveaction'      => false,\n         'datatype'           => 'number'\n      ];\n\n      $tab[] = [\n         'id'                 => '3',\n         'table'              => $this->getTable(),\n         'field'              => 'description',\n         'name'               => __('Description'),\n         'nosearch'           => true,\n         'nosort'             => true,\n         'massiveaction'      => false,\n         'datatype'           => 'text',\n         'computation'        => $DB->quoteName('TABLE.id') // Virtual data\n      ];\n\n      $tab[] = [\n         'id'                 => '4',\n         'table'              => $this->getTable(),\n         'field'              => 'state',\n         'name'               => __('Status'),\n         'searchtype'         => ['equals', 'notequals'],\n         'datatype'           => 'specific'\n      ];\n\n      $tab[] = [\n         'id'                 => '5',\n         'table'              => $this->getTable(),\n         'field'              => 'mode',\n         'name'               => __('Run mode'),\n         'datatype'           => 'specific',\n         'searchtype'         => ['equals', 'notequals']\n      ];\n\n      $tab[] = [\n         'id'                 => '6',\n         'table'              => $this->getTable(),\n         'field'              => 'frequency',\n         'name'               => __('Run frequency'),\n         'datatype'           => 'timestamp',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '7',\n         'table'              => $this->getTable(),\n         'field'              => 'lastrun',\n         'name'               => __('Last run'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '8',\n         'table'              => $this->getTable(),\n         'field'              => 'itemtype',\n         'name'               => __('Item type'),\n         'massiveaction'      => false,\n         'datatype'           => 'itemtypename',\n         'types'              => self::getUsedItemtypes()\n      ];\n\n      $tab[] = [\n         'id'                 => '16',\n         'table'              => $this->getTable(),\n         'field'              => 'comment',\n         'name'               => __('Comments'),\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '17',\n         'table'              => $this->getTable(),\n         'field'              => 'hourmin',\n         'name'               => __('Begin hour of run period'),\n         'datatype'           => 'integer',\n         'min'                => 0,\n         'max'                => 24\n      ];\n\n      $tab[] = [\n         'id'                 => '18',\n         'table'              => $this->getTable(),\n         'field'              => 'hourmax',\n         'name'               => __('End hour of run period'),\n         'datatype'           => 'integer',\n         'min'                => 0,\n         'max'                => 24\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => $this->getTable(),\n         'field'              => 'logs_lifetime',\n         'name'               => __('Number of days this action logs are stored'),\n         'datatype'           => 'integer',\n         'min'                => 10,\n         'max'                => 360,\n         'step'               => 10,\n         'toadd'              => [\n            '0'                  => 'Infinite'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '20',\n         'table'              => $this->getTable(),\n         'field'              => 'date_mod',\n         'name'               => __('Last update'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '121',\n         'table'              => $this->getTable(),\n         'field'              => 'date_creation',\n         'name'               => __('Creation date'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      return $tab;\n   }\n\n\n   /**\n    * Garbage collector for expired file session\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronSession(CronTask $task) {\n\n      // max time to keep the file session\n      $maxlifetime = ini_get('session.gc_maxlifetime');\n      if ($maxlifetime == 0) {\n         $maxlifetime = WEEK_TIMESTAMP;\n      }\n      $nb = 0;\n      foreach (glob(GLPI_SESSION_DIR.\"/sess_*\") as $filename) {\n         if ((filemtime($filename) + $maxlifetime) < time()) {\n            // Delete session file if not delete before\n            if (@unlink($filename)) {\n               $nb++;\n            }\n         }\n      }\n\n      $task->setVolume($nb);\n      if ($nb) {\n         //TRANS: % %1$d is a number, %2$s is a number of seconds\n         $task->log(sprintf(_n('Clean %1$d session file created since more than %2$s seconds',\n                               'Clean %1$d session files created since more than %2$s seconds',\n                               $nb).\"\\n\",\n                            $nb, $maxlifetime));\n         return 1;\n      }\n\n      return 0;\n   }\n\n\n   /**\n    * Circular logs\n    *\n    * @since 0.85\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronCircularlogs(CronTask $task) {\n\n      $actionCode = 0; // by default\n      $error      = false;\n      $task->setVolume(0); // start with zero\n\n      // compute date in the past for the archived log to be deleted\n      $firstdate = date(\"Ymd\", time() - ($task->fields['param'] * DAY_TIMESTAMP)); // compute current date - param as days and format it like YYYYMMDD\n\n      // first look for bak to delete\n      $dir       = GLPI_LOG_DIR.\"/*.bak\";\n      $findfiles = glob($dir);\n      foreach ($findfiles as $file) {\n         $shortfile = str_replace(GLPI_LOG_DIR.'/', '', $file);\n         // now depending on the format of the name we delete the file (for aging archives) or rename it (will add Ymd.log to the end of the file)\n         $match = null;\n         if (preg_match('/.+[.]log[.](\\\\d{8})[.]bak$/', $file, $match) > 0) {\n            if ($match[1] < $firstdate) {\n               $task->addVolume(1);\n               if (unlink($file)) {\n                  $task->log(sprintf(__('Deletion of archived log file: %s'), $shortfile));\n                  $actionCode = 1;\n               } else {\n                  $task->log(sprintf(__('Unable to delete archived log file: %s'), $shortfile));\n                  $error = true;\n               }\n            }\n         }\n      }\n\n      // second look for log to archive\n      $dir       = GLPI_LOG_DIR.\"/*.log\";\n      $findfiles = glob($dir);\n      foreach ($findfiles as $file) {\n         $shortfile    = str_replace(GLPI_LOG_DIR.'/', '', $file);\n         // rename the file\n         $newfilename  = $file.\".\".date(\"Ymd\", time()).\".bak\"; // will add to filename a string with format YYYYMMDD (= current date)\n         $shortnewfile = str_replace(GLPI_LOG_DIR.'/', '', $newfilename);\n\n         $task->addVolume(1);\n         if (!file_exists($newfilename) && rename($file, $newfilename)) {\n            $task->log(sprintf(__('Archiving log file: %1$s to %2$s'), $shortfile, $shortnewfile));\n            $actionCode = 1;\n         } else {\n            $task->log(sprintf(__('Unable to archive log file: %1$s. %2$s already exists. Wait till next day.'),\n                                 $shortfile, $shortnewfile));\n            $error = true;\n         }\n      }\n\n      if ($error) {\n         return -1;\n      }\n      return $actionCode;\n   }\n\n\n   /**\n    * Garbage collector for cleaning graph files\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronGraph(CronTask $task) {\n\n      // max time to keep the file session\n      $maxlifetime = HOUR_TIMESTAMP;\n      $nb          = 0;\n      foreach (glob(GLPI_GRAPH_DIR.\"/*\") as $filename) {\n         if (basename($filename) == \"remove.txt\" && is_dir(GLPI_ROOT.'/.git')) {\n            continue;\n         }\n         if ((filemtime($filename) + $maxlifetime) < time()) {\n            if (@unlink($filename)) {\n               $nb++;\n            }\n         }\n      }\n\n      $task->setVolume($nb);\n      if ($nb) {\n         $task->log(sprintf(_n('Clean %1$d graph file created since more than %2$s seconds',\n                               'Clean %1$d graph files created since more than %2$s seconds',\n                               $nb).\"\\n\",\n                            $nb, $maxlifetime));\n         return 1;\n      }\n\n      return 0;\n   }\n\n   /**\n    * Garbage collector for cleaning tmp files\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronTemp(CronTask $task) {\n\n      // max time to keep the file session\n      $maxlifetime = HOUR_TIMESTAMP;\n      $nb          = 0;\n      foreach (glob(GLPI_TMP_DIR.\"/*\") as $filename) {\n         if (basename($filename) == \"remove.txt\" && is_dir(GLPI_ROOT.'/.git')) {\n            continue;\n         }\n         if (is_file($filename) && is_writable($filename)\n             && (filemtime($filename) + $maxlifetime) < time()) {\n            if (@unlink($filename)) {\n               $nb++;\n            }\n         }\n      }\n\n      $task->setVolume($nb);\n      if ($nb) {\n         $task->log(sprintf(_n('Clean %1$d temporary file created since more than %2$s seconds',\n                               'Clean %1$d temporary files created since more than %2$s seconds',\n                               $nb).\"\\n\",\n                            $nb, $maxlifetime));\n         return 1;\n      }\n\n      return 0;\n   }\n\n   /**\n    * Clean log cron function\n    *\n    * @param CronTask $task\n    *\n    * @return integer\n   **/\n   static function cronLogs($task) {\n      global $DB;\n\n      $vol = 0;\n\n      // Expire Event Log\n      if ($task->fields['param'] > 0) {\n         $vol += Event::cleanOld($task->fields['param']);\n      }\n\n      foreach ($DB->request('glpi_crontasks') as $data) {\n         if ($data['logs_lifetime']>0) {\n            $vol += CronTaskLog::cleanOld($data['id'], $data['logs_lifetime']);\n         }\n      }\n      $task->setVolume($vol);\n      return ($vol > 0 ? 1 : 0);\n   }\n\n\n   /**\n    * Cron job to check if a new version is available\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronCheckUpdate($task) {\n\n      $result = Toolbox::checkNewVersionAvailable();\n      $task->log($result);\n\n      return 1;\n   }\n\n\n   /**\n    * Check zombie crontask\n    *\n    * @param CronTask $task for log\n    *\n    * @return integer\n   **/\n   static function cronWatcher($task) {\n      global $DB;\n\n      // CronTasks running for more than 1 hour or 2 frequency\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'state'  => self::STATE_RUNNING,\n            'OR'     => [\n               new \\QueryExpression('unix_timestamp('.$DB->quoteName('lastrun').') + 2 * '.$DB->quoteName('frequency').' < unix_timestamp(now())'),\n               new \\QueryExpression('unix_timestamp('.$DB->quoteName('lastrun').') + 2 * '.HOUR_TIMESTAMP.' < unix_timestamp(now())')\n            ]\n         ]\n      ]);\n      $crontasks = [];\n      while ($data = $iterator->next()) {\n         $crontasks[$data['id']] = $data;\n      }\n\n      if (count($crontasks)) {\n         $task = new self();\n         $task->getFromDBByCrit(['itemtype' => 'CronTask', 'name' => 'watcher']);\n         if (NotificationEvent::raiseEvent(\"alert\", $task, ['items' => $crontasks])) {\n            $task->addVolume(1);\n         }\n         QueuedNotification::forceSendFor($task->getType(), $task->fields['id']);\n      }\n\n      return 1;\n   }\n\n\n   /**\n    * get Cron description parameter for this class\n    *\n    * @param $name string name of the task\n    *\n    * @return array of string\n   **/\n   static function cronInfo($name) {\n\n      switch ($name) {\n         case 'checkupdate' :\n            return ['description' => __('Check for new updates')];\n\n         case 'logs' :\n            return ['description' => __('Clean old logs'),\n                         'parameter'\n                           => __('System logs retention period (in days, 0 for infinite)')];\n\n         case 'session' :\n            return ['description' => __('Clean expired sessions')];\n\n         case 'graph' :\n            return ['description' => __('Clean generated graphics')];\n\n         case 'temp' :\n            return ['description' => __('Clean temporary files')];\n\n         case 'watcher' :\n            return ['description' => __('Monitoring of automatic actions')];\n\n         case 'circularlogs' :\n            return ['description' => __(\"Archives log files and deletes aging ones\"),\n                         'parameter'   => __(\"Number of days to keep archived logs\")];\n      }\n   }\n\n\n   /**\n    * Dropdown for frequency (interval between 2 actions)\n    *\n    * @param string  $name   select name\n    * @param integer $value  default value (default 0)\n    *\n    * @return string|integer HTML output, or random part of dropdown ID.\n   **/\n   function dropdownFrequency($name, $value = 0) {\n\n      $tab = [];\n\n      $tab[MINUTE_TIMESTAMP] = sprintf(_n('%d minute', '%d minutes', 1), 1);\n\n      // Minutes\n      for ($i=5; $i<60; $i+=5) {\n         $tab[$i*MINUTE_TIMESTAMP] = sprintf(_n('%d minute', '%d minutes', $i), $i);\n      }\n\n      // Heures\n      for ($i=1; $i<24; $i++) {\n         $tab[$i*HOUR_TIMESTAMP] = sprintf(_n('%d hour', '%d hours', $i), $i);\n      }\n\n      // Jours\n      $tab[DAY_TIMESTAMP] = __('Each day');\n      for ($i=2; $i<7; $i++) {\n         $tab[$i*DAY_TIMESTAMP] = sprintf(_n('%d day', '%d days', $i), $i);\n      }\n\n      $tab[WEEK_TIMESTAMP]  = __('Each week');\n      $tab[MONTH_TIMESTAMP] = __('Each month');\n\n      Dropdown::showFromArray($name, $tab, ['value' => $value]);\n   }\n\n\n   /**\n    * Call cron without time check\n    *\n    * @return boolean : true if launched\n   **/\n   static function callCronForce() {\n      global $CFG_GLPI;\n\n      $path = $CFG_GLPI['root_doc'].\"/front/cron.php\";\n\n      echo \"<div style=\\\"background-image: url('$path');\\\"></div>\";\n      return true;\n   }\n\n\n   /**\n    * Call cron if time since last launch elapsed\n    *\n    * @return void\n   **/\n   static function callCron() {\n\n      if (isset($_SESSION[\"glpicrontimer\"])) {\n         // call static function callcron() every 5min\n         if ((time() - $_SESSION[\"glpicrontimer\"]) > 300) {\n\n            if (self::callCronForce()) {\n               // Restart timer\n               $_SESSION[\"glpicrontimer\"] = time();\n            }\n         }\n\n      } else {\n         // Start timer\n         $_SESSION[\"glpicrontimer\"] = time();\n      }\n   }\n\n\n   static function getIcon() {\n      return \"fas fa-stopwatch\";\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\nuse Glpi\\Application\\ErrorHandler;\n\n/**\n *  Database class for Mysql\n**/\nclass DBmysql {\n\n   //! Database Host - string or Array of string (round robin)\n   public $dbhost             = \"\";\n   //! Database User\n   public $dbuser             = \"\";\n   //! Database Password\n   public $dbpassword         = \"\";\n   //! Default Database\n   public $dbdefault          = \"\";\n   //! Database Handler\n   private $dbh;\n   //! Database Error\n   public $error              = 0;\n\n   // Slave management\n   public $slave              = false;\n   private $in_transaction;\n\n   /**\n    * Defines if connection must use SSL.\n    *\n    * @var boolean\n    */\n   public $dbssl              = false;\n\n   /**\n    * The path name to the key file (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslkey           = null;\n\n   /**\n    * The path name to the certificate file (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslcert          = null;\n\n   /**\n    * The path name to the certificate authority file (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslca            = null;\n\n   /**\n    * The pathname to a directory that contains trusted SSL CA certificates in PEM format\n    * (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslcapath        = null;\n\n   /**\n    * A list of allowable ciphers to use for SSL encryption (used in case of SSL connection).\n    *\n    * @see mysqli::ssl_set()\n    * @var string|null\n    */\n   public $dbsslcacipher      = null;\n\n\n   /** Is it a first connection ?\n    * Indicates if the first connection attempt is successful or not\n    * if first attempt fail -> display a warning which indicates that glpi is in readonly\n   **/\n   public $first_connection   = true;\n   // Is connected to the DB ?\n   public $connected          = false;\n\n   //to calculate execution time\n   public $execution_time          = false;\n\n   private $cache_disabled = false;\n\n   /**\n    * Cached list fo tables.\n    *\n    * @var array\n    * @see self::tableExists()\n    */\n   private $table_cache = [];\n\n   /**\n    * Cached list of fields.\n    *\n    * @var array\n    * @see self::listFields()\n    */\n   private $field_cache = [];\n\n   /**\n    * Constructor / Connect to the MySQL Database\n    *\n    * @param integer $choice host number (default NULL)\n    *\n    * @return void\n    */\n   function __construct($choice = null) {\n      $this->connect($choice);\n   }\n\n   /**\n    * Connect using current database settings\n    * Use dbhost, dbuser, dbpassword and dbdefault\n    *\n    * @param integer $choice host number (default NULL)\n    *\n    * @return void\n    */\n   function connect($choice = null) {\n      $this->connected = false;\n      $this->dbh = @new mysqli();\n      $this->dbh->init();\n      if ($this->dbssl) {\n          mysqli_ssl_set(\n             $this->dbh,\n             $this->dbsslkey,\n             $this->dbsslcert,\n             $this->dbsslca,\n             $this->dbsslcapath,\n             $this->dbsslcacipher\n          );\n      }\n\n      if (is_array($this->dbhost)) {\n         // Round robin choice\n         $i    = (isset($choice) ? $choice : mt_rand(0, count($this->dbhost)-1));\n         $host = $this->dbhost[$i];\n\n      } else {\n         $host = $this->dbhost;\n      }\n\n      $hostport = explode(\":\", $host);\n      if (count($hostport) < 2) {\n         // Host\n         $this->dbh->real_connect($host, $this->dbuser, rawurldecode($this->dbpassword), $this->dbdefault);\n      } else if (intval($hostport[1])>0) {\n         // Host:port\n          $this->dbh->real_connect($hostport[0], $this->dbuser, rawurldecode($this->dbpassword), $this->dbdefault, $hostport[1]);\n      } else {\n          // :Socket\n          $this->dbh->real_connect($hostport[0], $this->dbuser, rawurldecode($this->dbpassword), $this->dbdefault, ini_get('mysqli.default_port'), $hostport[1]);\n      }\n\n      if ($this->dbh->connect_error) {\n         $this->connected = false;\n         $this->error     = 1;\n      } else if (!defined('MYSQLI_OPT_INT_AND_FLOAT_NATIVE')) {\n         $this->connected = false;\n         $this->error     = 2;\n      } else {\n         $dbenc = isset($this->dbenc) ? $this->dbenc : \"utf8\";\n         $this->dbh->set_charset($dbenc);\n         if ($dbenc === \"utf8\") {\n            // The mysqli::set_charset function will make COLLATE to be defined to the default one for used charset.\n            //\n            // For 'utf8' charset, default one is 'utf8_general_ci',\n            // so we have to redefine it to 'utf8_unicode_ci'.\n            //\n            // If encoding used by connection is not the default one (i.e utf8), then we assume\n            // that we cannot be sure of used COLLATE and that using the default one is the best option.\n            $this->dbh->query(\"SET NAMES 'utf8' COLLATE 'utf8_unicode_ci';\");\n         }\n\n         // force mysqlnd to return int and float types correctly (not as strings)\n         $this->dbh->options(MYSQLI_OPT_INT_AND_FLOAT_NATIVE, true);\n\n         if (GLPI_FORCE_EMPTY_SQL_MODE) {\n            $this->dbh->query(\"SET SESSION sql_mode = ''\");\n         }\n\n         $this->connected = true;\n\n         $this->setTimezone($this->guessTimezone());\n      }\n   }\n\n   /**\n    * Guess timezone\n    *\n    * Will  check for an existing loaded timezone from user,\n    * then will check in preferences and finally will fallback to system one.\n    *\n    * @return string\n    *\n    * @since 9.5.0\n    */\n   protected function guessTimezone() {\n      if (isset($_SESSION['glpi_tz'])) {\n         $zone = $_SESSION['glpi_tz'];\n      } else {\n         $conf_tz = ['value' => null];\n         if ($this->tableExists(Config::getTable())\n             && $this->fieldExists(Config::getTable(), 'value')) {\n            $conf_tz = $this->request([\n               'SELECT' => 'value',\n               'FROM'   => Config::getTable(),\n               'WHERE'  => [\n                  'context'   => 'core',\n                  'name'      => 'timezone'\n                ]\n            ])->next();\n         }\n         $zone = !empty($conf_tz['value']) ? $conf_tz['value'] : date_default_timezone_get();\n      }\n\n      return $zone;\n   }\n\n   /**\n    * Escapes special characters in a string for use in an SQL statement,\n    * taking into account the current charset of the connection\n    *\n    * @since 0.84\n    *\n    * @param string $string String to escape\n    *\n    * @return string escaped string\n    */\n   function escape($string) {\n      return $this->dbh->real_escape_string($string);\n   }\n\n   /**\n    * Execute a MySQL query\n    *\n    * @param string $query Query to execute\n    *\n    * @var array   $CFG_GLPI\n    * @var array   $DEBUG_SQL\n    * @var integer $SQL_TOTAL_REQUEST\n    *\n    * @return mysqli_result|boolean Query result handler\n    *\n    * @throws GlpitestSQLError\n    */\n   function query($query) {\n      global $CFG_GLPI, $DEBUG_SQL, $GLPI, $SQL_TOTAL_REQUEST;\n\n      $is_debug = isset($_SESSION['glpi_use_mode']) && ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE);\n      if ($is_debug && $CFG_GLPI[\"debug_sql\"]) {\n         $SQL_TOTAL_REQUEST++;\n         $DEBUG_SQL[\"queries\"][$SQL_TOTAL_REQUEST] = $query;\n      }\n      if ($is_debug && $CFG_GLPI[\"debug_sql\"] || $this->execution_time === true) {\n         $TIMER                                    = new Timer();\n         $TIMER->start();\n      }\n\n      $res = $this->dbh->query($query);\n      if (!$res) {\n         // no translation for error logs\n         $error = \"  *** MySQL query error:\\n  SQL: \".$query.\"\\n  Error: \".\n                   $this->dbh->error.\"\\n\";\n         $error .= Toolbox::backtrace(false, 'DBmysql->query()', ['Toolbox::backtrace()']);\n\n         Toolbox::logSqlError($error);\n\n         $error_handler = $GLPI->getErrorHandler();\n         if ($error_handler instanceof ErrorHandler) {\n            $error_handler->handleSqlError($this->dbh->errno, $this->dbh->error, $query);\n         }\n\n         if (($is_debug || isAPI()) && $CFG_GLPI[\"debug_sql\"]) {\n            $DEBUG_SQL[\"errors\"][$SQL_TOTAL_REQUEST] = $this->error();\n         }\n      }\n\n      if ($is_debug && $CFG_GLPI[\"debug_sql\"]) {\n         $TIME                                   = $TIMER->getTime();\n         $DEBUG_SQL[\"times\"][$SQL_TOTAL_REQUEST] = $TIME;\n      }\n      if ($this->execution_time === true) {\n         $this->execution_time = $TIMER->getTime(0, true);\n      }\n      return $res;\n   }\n\n   /**\n    * Execute a MySQL query and die\n    * (optionnaly with a message) if it fails\n    *\n    * @since 0.84\n    *\n    * @param string $query   Query to execute\n    * @param string $message Explanation of query (default '')\n    *\n    * @return mysqli_result Query result handler\n    */\n   function queryOrDie($query, $message = '') {\n      $res = $this->query($query);\n      if (!$res) {\n         //TRANS: %1$s is the description, %2$s is the query, %3$s is the error message\n         $message = sprintf(\n            __('%1$s - Error during the database query: %2$s - Error is %3$s'),\n            $message,\n            $query,\n            $this->error()\n         );\n         if (isCommandLine()) {\n            throw new \\RuntimeException($message);\n         } else {\n            echo $message . \"\\n\";\n            die(1);\n         }\n      }\n      return $res;\n   }\n\n   /**\n    * Prepare a MySQL query\n    *\n    * @param string $query Query to prepare\n    *\n    * @return mysqli_stmt|boolean statement object or FALSE if an error occurred.\n    *\n    * @throws GlpitestSQLError\n    */\n   function prepare($query) {\n      global $CFG_GLPI, $DEBUG_SQL, $SQL_TOTAL_REQUEST;\n\n      $res = $this->dbh->prepare($query);\n      if (!$res) {\n         // no translation for error logs\n         $error = \"  *** MySQL prepare error:\\n  SQL: \".$query.\"\\n  Error: \".\n                   $this->dbh->error.\"\\n\";\n         $error .= Toolbox::backtrace(false, 'DBmysql->prepare()', ['Toolbox::backtrace()']);\n\n         Toolbox::logInFile(\"sql-errors\", $error);\n         if (class_exists('GlpitestSQLError')) { // For unit test\n            throw new GlpitestSQLError($error);\n         }\n\n         if (isset($_SESSION['glpi_use_mode'])\n             && $_SESSION['glpi_use_mode'] == Session::DEBUG_MODE\n             && $CFG_GLPI[\"debug_sql\"]) {\n            $SQL_TOTAL_REQUEST++;\n            $DEBUG_SQL[\"errors\"][$SQL_TOTAL_REQUEST] = $this->error();\n         }\n      }\n      return $res;\n   }\n\n   /**\n    * Give result from a sql result\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param int           $i      Row offset to give\n    * @param string        $field  Field to give\n    *\n    * @return mixed Value of the Row $i and the Field $field of the Mysql $result\n    */\n   function result($result, $i, $field) {\n      if ($result && ($result->data_seek($i))\n          && ($data = $result->fetch_array())\n          && isset($data[$field])) {\n         return $data[$field];\n      }\n      return null;\n   }\n\n   /**\n    * Number of rows\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return integer number of rows\n    */\n   function numrows($result) {\n      return $result->num_rows;\n   }\n\n   /**\n    * Fetch array of the next row of a Mysql query\n    * Please prefer fetchRow or fetchAssoc\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return string[]|null array results\n    *\n    * @deprecated 9.5.0\n    */\n   function fetch_array($result) {\n      Toolbox::deprecated('Use DBmysql::fetchArray()');\n      return $this->fetchArray($result);\n   }\n\n   /**\n    * Fetch array of the next row of a Mysql query\n    * Please prefer fetchRow or fetchAssoc\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return string[]|null array results\n    */\n   function fetchArray($result) {\n      return $result->fetch_array();\n   }\n\n   /**\n    * Fetch row of the next row of a Mysql query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return mixed|null result row\n    *\n    * @deprecated 9.5.0\n    */\n   function fetch_row($result) {\n      Toolbox::deprecated('Use DBmysql::fetchRow()');\n      return $this->fetchRow($result);\n   }\n\n   /**\n    * Fetch row of the next row of a Mysql query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return mixed|null result row\n    */\n   function fetchRow($result) {\n      return $result->fetch_row();\n   }\n\n   /**\n    * Fetch assoc of the next row of a Mysql query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return string[]|null result associative array\n    *\n    * @deprecated 9.5.0\n    */\n   function fetch_assoc($result) {\n      Toolbox::deprecated('Use DBmysql::fetchAssoc()');\n      return $this->fetchAssoc($result);\n   }\n\n   /**\n    * Fetch assoc of the next row of a Mysql query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return string[]|null result associative array\n    */\n   function fetchAssoc($result) {\n      return $result->fetch_assoc();\n   }\n\n   /**\n    * Fetch object of the next row of an SQL query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return object|null\n    */\n   function fetch_object($result) {\n      Toolbox::deprecated('Use DBmysql::fetchObject()');\n      return $this->fetchObject();\n   }\n\n   /**\n    * Fetch object of the next row of an SQL query\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return object|null\n    */\n   function fetchObject($result) {\n      return $result->fetch_object();\n   }\n\n   /**\n    * Move current pointer of a Mysql result to the specific row\n    *\n    * @deprecated 9.5.0\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param integer       $num    Row to move current pointer\n    *\n    * @return boolean\n    */\n   function data_seek($result, $num) {\n      Toolbox::deprecated('Use DBmysql::dataSeek()');\n      return $this->dataSeek($result, $num);\n   }\n\n   /**\n    * Move current pointer of a Mysql result to the specific row\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param integer       $num    Row to move current pointer\n    *\n    * @return boolean\n    */\n   function dataSeek($result, $num) {\n      return $result->data_seek($num);\n   }\n\n\n   /**\n    * Give ID of the last inserted item by Mysql\n    *\n    * @return mixed\n    *\n    * @deprecated 9.5.0\n    */\n   function insert_id() {\n      Toolbox::deprecated('Use DBmysql::insertId()');\n      return $this->insertId();\n   }\n\n   /**\n    * Give ID of the last inserted item by Mysql\n    *\n    * @return mixed\n    */\n   function insertId() {\n      return $this->dbh->insert_id;\n   }\n\n   /**\n    * Give number of fields of a Mysql result\n    *\n    * @deprecated 9.5.0\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return int number of fields\n    */\n   function num_fields($result) {\n      Toolbox::deprecated('Use DBmysql::numFields()');\n      return $this->numFields($result);\n   }\n\n   /**\n    * Give number of fields of a Mysql result\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return int number of fields\n    */\n   function numFields($result) {\n      return $result->field_count;\n   }\n\n\n   /**\n    * Give name of a field of a Mysql result\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param integer       $nb     ID of the field\n    *\n    * @return string name of the field\n    *\n    * @deprecated 9.5.0\n    */\n   function field_name($result, $nb) {\n      Toolbox::deprecated('Use DBmysql::fieldName()');\n      return $this->fieldName($result, $nb);\n   }\n\n   /**\n    * Give name of a field of a Mysql result\n    *\n    * @param mysqli_result $result MySQL result handler\n    * @param integer       $nb     ID of the field\n    *\n    * @return string name of the field\n    *\n    * @deprecated 9.5.0\n    */\n   function fieldName($result, $nb) {\n      $finfo = $result->fetch_fields();\n      return $finfo[$nb]->name;\n   }\n\n\n   /**\n    * List tables in database\n    *\n    * @param string $table Table name condition (glpi_% as default to retrieve only glpi tables)\n    * @param array  $where Where clause to append\n    *\n    * @return DBmysqlIterator\n    */\n   function listTables($table = 'glpi_%', array $where = []) {\n      $iterator = $this->request([\n         'SELECT' => 'table_name as TABLE_NAME',\n         'FROM'   => 'information_schema.tables',\n         'WHERE'  => [\n            'table_schema' => $this->dbdefault,\n            'table_type'   => 'BASE TABLE',\n            'table_name'   => ['LIKE', $table]\n         ] + $where\n      ]);\n      return $iterator;\n   }\n\n   /**\n    * Returns tables using \"MyIsam\" engine.\n    *\n    * @return DBmysqlIterator\n    */\n   public function getMyIsamTables(): DBmysqlIterator {\n      $iterator = $this->listTables('glpi_%', ['engine' => 'MyIsam']);\n      return $iterator;\n   }\n\n   /**\n    * List fields of a table\n    *\n    * @param string  $table    Table name condition\n    * @param boolean $usecache If use field list cache (default true)\n    *\n    * @return mixed list of fields\n    *\n    * @deprecated 9.5.0\n    */\n   function list_fields($table, $usecache = true) {\n       Toolbox::deprecated('Use DBmysql::listFields()');\n      return $this->listFields($table, $usecache);\n   }\n\n   /**\n    * List fields of a table\n    *\n    * @param string  $table    Table name condition\n    * @param boolean $usecache If use field list cache (default true)\n    *\n    * @return mixed list of fields\n    */\n   function listFields($table, $usecache = true) {\n\n      if (!$this->cache_disabled && $usecache && isset($this->field_cache[$table])) {\n         return $this->field_cache[$table];\n      }\n      $result = $this->query(\"SHOW COLUMNS FROM `$table`\");\n      if ($result) {\n         if ($this->numrows($result) > 0) {\n            $this->field_cache[$table] = [];\n            while ($data = $this->fetchAssoc($result)) {\n               $this->field_cache[$table][$data[\"Field\"]] = $data;\n            }\n            return $this->field_cache[$table];\n         }\n         return [];\n      }\n      return false;\n   }\n\n   /**\n    * Get number of affected rows in previous MySQL operation\n    *\n    * @return int number of affected rows on success, and -1 if the last query failed.\n    *\n    * @deprecated 9.5.0\n    */\n   function affected_rows() {\n      Toolbox::deprecated('Use DBmysql::affectedRows()');\n      return $this->affectedRows();\n   }\n\n   /**\n    * Get number of affected rows in previous MySQL operation\n    *\n    * @return int number of affected rows on success, and -1 if the last query failed.\n    */\n   function affectedRows() {\n      return $this->dbh->affected_rows;\n   }\n\n\n   /**\n    * Free result memory\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return boolean\n    *\n    * @deprecated 9.5.0\n    */\n   function free_result($result) {\n      Toolbox::deprecated('Use DBmysql::freeResult()');\n      return $this->freeResult($result);\n   }\n\n   /**\n    * Free result memory\n    *\n    * @param mysqli_result $result MySQL result handler\n    *\n    * @return boolean\n    */\n   function freeResult($result) {\n      return $result->free();\n   }\n\n   /**\n    * Returns the numerical value of the error message from previous MySQL operation\n    *\n    * @return int error number from the last MySQL function, or 0 (zero) if no error occurred.\n    */\n   function errno() {\n      return $this->dbh->errno;\n   }\n\n   /**\n    * Returns the text of the error message from previous MySQL operation\n    *\n    * @return string error text from the last MySQL function, or '' (empty string) if no error occurred.\n    */\n   function error() {\n      return $this->dbh->error;\n   }\n\n   /**\n    * Close MySQL connection\n    *\n    * @return boolean TRUE on success or FALSE on failure.\n    */\n   function close() {\n      if ($this->connected && $this->dbh) {\n         return $this->dbh->close();\n      }\n      return false;\n   }\n\n   /**\n    * is a slave database ?\n    *\n    * @return boolean\n    */\n   function isSlave() {\n      return $this->slave;\n   }\n\n   /**\n    * Execute all the request in a file\n    *\n    * @param string $path with file full path\n    *\n    * @return boolean true if all query are successfull\n    */\n   function runFile($path) {\n      $script = fopen($path, 'r');\n      if (!$script) {\n         return false;\n      }\n      $sql_query = @fread(\n         $script,\n         @filesize($path)\n      ) . \"\\n\";\n      $sql_query = html_entity_decode($sql_query, ENT_COMPAT, 'UTF-8');\n\n      $sql_query = $this->removeSqlRemarks($sql_query);\n      $queries = preg_split('/;\\s*$/m', $sql_query);\n\n      foreach ($queries as $query) {\n         $query = trim($query);\n         if ($query != '') {\n            $query = htmlentities($query);\n            if (!$this->query($query)) {\n               return false;\n            }\n            if (!isCommandLine()) {\n               // Flush will prevent proxy to timeout as it will receive data.\n               // Flush requires a content to be sent, so we sent spaces as multiple spaces\n               // will be shown as a single one on browser.\n               echo ' ';\n               Html::glpi_flush();\n            }\n         }\n      }\n\n      return true;\n   }\n\n   /**\n    * Instanciate a Simple DBIterator\n    *\n    * Examples =\n    *  foreach ($DB->request(\"select * from glpi_states\") as $data) { ... }\n    *  foreach ($DB->request(\"glpi_states\") as $ID => $data) { ... }\n    *  foreach ($DB->request(\"glpi_states\", \"ID=1\") as $ID => $data) { ... }\n    *  foreach ($DB->request(\"glpi_states\", \"\", \"name\") as $ID => $data) { ... }\n    *  foreach ($DB->request(\"glpi_computers\",array(\"name\"=>\"SBEI003W\",\"entities_id\"=>1),array(\"serial\",\"otherserial\")) { ... }\n    *\n    * Examples =\n    *   array(\"id\"=>NULL)\n    *   array(\"OR\"=>array(\"id\"=>1, \"NOT\"=>array(\"state\"=>3)));\n    *   array(\"AND\"=>array(\"id\"=>1, array(\"NOT\"=>array(\"state\"=>array(3,4,5),\"toto\"=>2))))\n    *\n    * FIELDS name or array of field names\n    * ORDER name or array of field names\n    * LIMIT max of row to retrieve\n    * START first row to retrieve\n    *\n    * @param string|string[] $tableorsql Table name, array of names or SQL query\n    * @param string|string[] $crit       String or array of filed/values, ex array(\"id\"=>1), if empty => all rows\n    *                                    (default '')\n    * @param boolean         $debug      To log the request (default false)\n    *\n    * @return DBmysqlIterator\n    */\n   public function request ($tableorsql, $crit = \"\", $debug = false) {\n      $iterator = new DBmysqlIterator($this);\n      $iterator->execute($tableorsql, $crit, $debug);\n      return $iterator;\n   }\n\n\n   /**\n    * Get information about DB connection for showSystemInformations\n    *\n    * @since 0.84\n    *\n    * @return string[] Array of label / value\n    */\n   public function getInfo() {\n      // No translation, used in sysinfo\n      $ret = [];\n      $req = $this->request(\"SELECT @@sql_mode as mode, @@version AS vers, @@version_comment AS stype\");\n\n      if (($data = $req->next())) {\n         if ($data['stype']) {\n            $ret['Server Software'] = $data['stype'];\n         }\n         if ($data['vers']) {\n            $ret['Server Version'] = $data['vers'];\n         } else {\n            $ret['Server Version'] = $this->dbh->server_info;\n         }\n         if ($data['mode']) {\n            $ret['Server SQL Mode'] = $data['mode'];\n         } else {\n            $ret['Server SQL Mode'] = '';\n         }\n      }\n      $ret['Parameters'] = $this->dbuser.\"@\".$this->dbhost.\"/\".$this->dbdefault;\n      $ret['Host info']  = $this->dbh->host_info;\n\n      return $ret;\n   }\n\n   /**\n    * Is MySQL strict mode ?\n    *\n    * @var DB $DB\n    *\n    * @param string $msg Mode\n    *\n    * @return boolean\n    *\n    * @since 0.90\n    * @deprecated 9.5.0\n    */\n   static public function isMySQLStrictMode(&$msg) {\n      Toolbox::deprecated();\n      global $DB;\n\n      $msg = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ZERO_DATE,NO_ZERO_IN_DATE,ONLY_FULL_GROUP_BY,NO_AUTO_CREATE_USER';\n      $req = $DB->request(\"SELECT @@sql_mode as mode\");\n      if (($data = $req->next())) {\n         return (preg_match(\"/STRICT_TRANS/\", $data['mode'])\n                 && preg_match(\"/NO_ZERO_/\", $data['mode'])\n                 && preg_match(\"/ONLY_FULL_GROUP_BY/\", $data['mode']));\n      }\n      return false;\n   }\n\n   /**\n    * Get a global DB lock\n    *\n    * @since 0.84\n    *\n    * @param string $name lock's name\n    *\n    * @return boolean\n    */\n   public function getLock($name) {\n      $name          = addslashes($this->dbdefault.'.'.$name);\n      $query         = \"SELECT GET_LOCK('$name', 0)\";\n      $result        = $this->query($query);\n      list($lock_ok) = $this->fetchRow($result);\n\n      return (bool)$lock_ok;\n   }\n\n   /**\n    * Release a global DB lock\n    *\n    * @since 0.84\n    *\n    * @param string $name lock's name\n    *\n    * @return boolean\n    */\n   public function releaseLock($name) {\n      $name          = addslashes($this->dbdefault.'.'.$name);\n      $query         = \"SELECT RELEASE_LOCK('$name')\";\n      $result        = $this->query($query);\n      list($lock_ok) = $this->fetchRow($result);\n\n      return $lock_ok;\n   }\n\n\n   /**\n    * Check if a table exists\n    *\n    * @since 9.2\n    * @since 9.5 Added $usecache parameter.\n    *\n    * @param string  $tablename Table name\n    * @param boolean $usecache  If use table list cache\n    *\n    * @return boolean\n    **/\n   public function tableExists($tablename, $usecache = true) {\n\n      if (!$this->cache_disabled && $usecache && in_array($tablename, $this->table_cache)) {\n         return true;\n      }\n\n      // Retrieve all tables if cache is empty but enabled, in order to fill cache\n      // with all known tables\n      $retrieve_all = !$this->cache_disabled && empty($this->table_cache);\n\n      $result = $this->listTables($retrieve_all ? 'glpi_%' : $tablename);\n      $found_tables = [];\n      while ($data = $result->next()) {\n         $found_tables[] = $data['TABLE_NAME'];\n      }\n\n      if (!$this->cache_disabled) {\n         $this->table_cache = array_unique(array_merge($this->table_cache, $found_tables));\n      }\n\n      if (in_array($tablename, $found_tables)) {\n         return true;\n      }\n\n      return false;\n   }\n\n   /**\n    * Check if a field exists\n    *\n    * @since 9.2\n    *\n    * @param string  $table    Table name for the field we're looking for\n    * @param string  $field    Field name\n    * @param Boolean $usecache Use cache; @see DBmysql::listFields(), defaults to true\n    *\n    * @return boolean\n    **/\n   public function fieldExists($table, $field, $usecache = true) {\n      if (!$this->tableExists($table, $usecache)) {\n         trigger_error(\"Table $table does not exists\", E_USER_WARNING);\n         return false;\n      }\n\n      if ($fields = $this->listFields($table, $usecache)) {\n         if (isset($fields[$field])) {\n            return true;\n         }\n         return false;\n      }\n      return false;\n   }\n\n   /**\n    * Disable table cache globally; usefull for migrations\n    *\n    * @return void\n    */\n   public function disableTableCaching() {\n      $this->cache_disabled = true;\n   }\n\n   /**\n    * Quote field name\n    *\n    * @since 9.3\n    *\n    * @param string $name of field to quote (or table.field)\n    *\n    * @return string\n    */\n   public static function quoteName($name) {\n      //handle verbatim names\n      if ($name instanceof QueryExpression) {\n         return $name->getValue();\n      }\n      //handle aliases\n      $names = preg_split('/\\s+AS\\s+/i', $name);\n      if (count($names) > 2) {\n         throw new \\RuntimeException(\n            'Invalid field name ' . $name\n         );\n      }\n      if (count($names) == 2) {\n         $name = self::quoteName($names[0]);\n         $name .= ' AS ' . self::quoteName($names[1]);\n         return $name;\n      } else {\n         if (strpos($name, '.')) {\n            $n = explode('.', $name, 2);\n            $table = self::quoteName($n[0]);\n            $field = ($n[1] === '*') ? $n[1] : self::quoteName($n[1]);\n            return \"$table.$field\";\n         }\n         return ($name[0] == '`' ? $name : ($name === '*' ? $name : \"`$name`\"));\n      }\n   }\n\n   /**\n    * Quote value for insert/update\n    *\n    * @param mixed $value Value\n    *\n    * @return mixed\n    */\n   public static function quoteValue($value) {\n      if ($value instanceof QueryParam || $value instanceof QueryExpression) {\n         //no quote for query parameters nor expressions\n         $value = $value->getValue();\n      } else if ($value === null || $value === 'NULL' || $value === 'null') {\n         $value = 'NULL';\n      } else {\n         //phone numbers may start with '+' and will be considered as numeric\n         $value = \"'$value'\";\n      }\n      return $value;\n   }\n\n   /**\n    * Builds an insert statement\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params Query parameters ([field name => field value)\n    *\n    * @return string\n    */\n   public function buildInsert($table, $params) {\n      $query = \"INSERT INTO \" . self::quoteName($table) . \" (\";\n\n      $fields = [];\n      foreach ($params as $key => &$value) {\n         $fields[] = $this->quoteName($key);\n         $value = $this->quoteValue($value);\n      }\n\n      $query .= implode(', ', $fields);\n      $query .= \") VALUES (\";\n      $query .= implode(\", \", $params);\n      $query .= \")\";\n\n      return $query;\n   }\n\n   /**\n    * Insert a row in the database\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params Query parameters ([field name => field value)\n    *\n    * @return mysqli_result|boolean Query result handler\n    */\n   public function insert($table, $params) {\n      $result = $this->query(\n         $this->buildInsert($table, $params)\n      );\n      return $result;\n   }\n\n   /**\n    * Insert a row in the database and die\n    * (optionnaly with a message) if it fails\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params  Query parameters ([field name => field value)\n    * @param string $message Explanation of query (default '')\n    *\n    * @return mysqli_result|boolean Query result handler\n    */\n   function insertOrDie($table, $params, $message = '') {\n      $insert = $this->buildInsert($table, $params);\n      $res = $this->query($insert);\n      if (!$res) {\n         //TRANS: %1$s is the description, %2$s is the query, %3$s is the error message\n         $message = sprintf(\n            __('%1$s - Error during the database query: %2$s - Error is %3$s'),\n            $message,\n            $insert,\n            $this->error()\n         );\n         if (isCommandLine()) {\n            throw new \\RuntimeException($message);\n         } else {\n            echo $message . \"\\n\";\n            die(1);\n         }\n      }\n      return $res;\n   }\n\n   /**\n    * Builds an update statement\n    *\n    * @since 9.3\n    *\n    * @param string $table   Table name\n    * @param array  $params  Query parameters ([field name => field value)\n    * @param array  $clauses Clauses to use. If not 'WHERE' key specified, will b the WHERE clause (@see DBmysqlIterator capabilities)\n    * @param array  $joins  JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return string\n    */\n   public function buildUpdate($table, $params, $clauses, array $joins = []) {\n      //when no explicit \"WHERE\", we only have a WHEre clause.\n      if (!isset($clauses['WHERE'])) {\n         $clauses  = ['WHERE' => $clauses];\n      } else {\n         $known_clauses = ['WHERE', 'ORDER', 'LIMIT', 'START'];\n         foreach (array_keys($clauses) as $key) {\n            if (!in_array($key, $known_clauses)) {\n               throw new \\RuntimeException(\n                  str_replace(\n                     '%clause',\n                     $key,\n                     'Trying to use an unknonw clause (%clause) building update query!'\n                  )\n               );\n            }\n         }\n      }\n\n      if (!count($clauses['WHERE'])) {\n         throw new \\RuntimeException('Cannot run an UPDATE query without WHERE clause!');\n      }\n\n      $query  = \"UPDATE \". self::quoteName($table);\n\n      //JOINS\n      $it = new DBmysqlIterator($this);\n      $query .= $it->analyseJoins($joins);\n\n      $query .= \" SET \";\n      foreach ($params as $field => $value) {\n         $query .= self::quoteName($field) . \" = \".$this->quoteValue($value).\", \";\n      }\n      $query = rtrim($query, ', ');\n\n      $query .= \" WHERE \" . $it->analyseCrit($clauses['WHERE']);\n\n      // ORDER BY\n      if (isset($clauses['ORDER']) && !empty($clauses['ORDER'])) {\n         $query .= $it->handleOrderClause($clauses['ORDER']);\n      }\n\n      if (isset($clauses['LIMIT']) && !empty($clauses['LIMIT'])) {\n         $offset = (isset($clauses['START']) && !empty($clauses['START'])) ? $clauses['START'] : null;\n         $query .= $it->handleLimits($clauses['LIMIT'], $offset);\n      }\n\n      return $query;\n   }\n\n   /**\n    * Update a row in the database\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params Query parameters ([:field name => field value)\n    * @param array  $where  WHERE clause\n    * @param array  $joins  JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return mysqli_result|boolean Query result handler\n    */\n   public function update($table, $params, $where, array $joins = []) {\n      $query = $this->buildUpdate($table, $params, $where, $joins);\n      $result = $this->query($query);\n      return $result;\n   }\n\n   /**\n    * Update a row in the database or die\n    * (optionnaly with a message) if it fails\n    *\n    * @since 9.3\n    *\n    * @param string $table   Table name\n    * @param array  $params  Query parameters ([:field name => field value)\n    * @param array  $where   WHERE clause\n    * @param string $message Explanation of query (default '')\n    * @param array  $joins   JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return mysqli_result|boolean Query result handler\n    */\n   function updateOrDie($table, $params, $where, $message = '', array $joins = []) {\n      $update = $this->buildUpdate($table, $params, $where, $joins);\n      $res = $this->query($update);\n      if (!$res) {\n         //TRANS: %1$s is the description, %2$s is the query, %3$s is the error message\n         $message = sprintf(\n            __('%1$s - Error during the database query: %2$s - Error is %3$s'),\n            $message,\n            $update,\n            $this->error()\n         );\n         if (isCommandLine()) {\n            throw new \\RuntimeException($message);\n         } else {\n            echo $message . \"\\n\";\n            die(1);\n         }\n      }\n      return $res;\n   }\n\n   /**\n    * Update a row in the database or insert a new one\n    *\n    * @since 9.4\n    *\n    * @param string  $table   Table name\n    * @param array   $params  Query parameters ([:field name => field value)\n    * @param array   $where   WHERE clause\n    * @param boolean $onlyone Do the update only one one element, defaults to true\n    *\n    * @return mysqli_result|boolean Query result handler\n    */\n   public function updateOrInsert($table, $params, $where, $onlyone = true) {\n      $req = $this->request($table, $where);\n      $data = array_merge($where, $params);\n      if ($req->count() == 0) {\n         return $this->insertOrDie($table, $data, 'Unable to create new element or update existing one');\n      } else if ($req->count() == 1 || !$onlyone) {\n         return $this->updateOrDie($table, $data, $where, 'Unable to create new element or update existing one');\n      } else {\n         Toolbox::logWarning('Update would change too many rows!');\n         return false;\n      }\n   }\n\n   /**\n    * Builds a delete statement\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $params Query parameters ([field name => field value)\n    * @param array  $where  WHERE clause (@see DBmysqlIterator capabilities)\n    * @param array  $joins  JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return string\n    */\n   public function buildDelete($table, $where, array $joins = []) {\n\n      if (!count($where)) {\n         throw new \\RuntimeException('Cannot run an DELETE query without WHERE clause!');\n      }\n\n      $query  = \"DELETE \" . self::quoteName($table) . \" FROM \". self::quoteName($table);\n\n      $it = new DBmysqlIterator($this);\n      $query .= $it->analyseJoins($joins);\n      $query .= \" WHERE \" . $it->analyseCrit($where);\n\n      return $query;\n   }\n\n   /**\n    * Delete rows in the database\n    *\n    * @since 9.3\n    *\n    * @param string $table  Table name\n    * @param array  $where  WHERE clause\n    * @param array  $joins  JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return mysqli_result|boolean Query result handler\n    */\n   public function delete($table, $where, array $joins = []) {\n      $query = $this->buildDelete($table, $where, $joins);\n      $result = $this->query($query);\n      return $result;\n   }\n\n   /**\n    * Delete a row in the database and die\n    * (optionnaly with a message) if it fails\n    *\n    * @since 9.3\n    *\n    * @param string $table   Table name\n    * @param array  $where   WHERE clause\n    * @param string $message Explanation of query (default '')\n    * @param array  $joins   JOINS criteria array\n    *\n    * @since 9.4.0 $joins parameter added\n    * @return mysqli_result|boolean Query result handler\n    */\n   function deleteOrDie($table, $where, $message = '', array $joins = []) {\n      $update = $this->buildDelete($table, $where, $joins);\n      $res = $this->query($update);\n      if (!$res) {\n         //TRANS: %1$s is the description, %2$s is the query, %3$s is the error message\n         $message = sprintf(\n            __('%1$s - Error during the database query: %2$s - Error is %3$s'),\n            $message,\n            $update,\n            $this->error()\n         );\n         if (isCommandLine()) {\n            throw new \\RuntimeException($message);\n         } else {\n            echo $message . \"\\n\";\n            die(1);\n         }\n\n      }\n      return $res;\n   }\n\n\n   /**\n    * Get table schema\n    *\n    * @param string $table Table name,\n    * @param string|null $structure Raw table structure\n    *\n    * @return array\n    */\n   public function getTableSchema($table, $structure = null) {\n      if ($structure === null) {\n         $structure = $this->query(\"SHOW CREATE TABLE `$table`\")->fetch_row();\n         $structure = $structure[1];\n      }\n\n      //get table index\n      $index = preg_grep(\n         \"/^\\s\\s+?KEY/\",\n         array_map(\n            function($idx) { return rtrim($idx, ','); },\n            explode(\"\\n\", $structure)\n         )\n      );\n      //get table schema, without index, without AUTO_INCREMENT\n      $structure = preg_replace(\n         [\n            \"/\\s\\s+KEY .*/\",\n            \"/AUTO_INCREMENT=\\d+ /\"\n         ],\n         \"\",\n         $structure\n      );\n      $structure = preg_replace('/,(\\s)?$/m', '', $structure);\n      $structure = preg_replace('/ COMMENT \\'(.+)\\'/', '', $structure);\n\n      $structure = str_replace(\n         [\n            \" COLLATE utf8_unicode_ci\",\n            \" CHARACTER SET utf8\",\n            ', ',\n         ], [\n            '',\n            '',\n            ',',\n         ],\n         trim($structure)\n      );\n\n      //do not check engine nor collation\n      $structure = preg_replace(\n         '/\\) ENGINE.*$/',\n         '',\n         $structure\n      );\n\n      //Mariadb 10.2 will return current_timestamp()\n      //while older retuns CURRENT_TIMESTAMP...\n      $structure = preg_replace(\n         '/ CURRENT_TIMESTAMP\\(\\)/i',\n         ' CURRENT_TIMESTAMP',\n         $structure\n      );\n\n      //Mariadb 10.2 allow default values on longblob, text and longtext\n      $defaults = [];\n      preg_match_all(\n         '/^.+ (longblob|text|longtext) .+$/m',\n         $structure,\n         $defaults\n      );\n      if (count($defaults[0])) {\n         foreach ($defaults[0] as $line) {\n               $structure = str_replace(\n                  $line,\n                  str_replace(' DEFAULT NULL', '', $line),\n                  $structure\n               );\n         }\n      }\n\n      $structure = preg_replace(\"/(DEFAULT) ([-|+]?\\d+)(\\.\\d+)?/\", \"$1 '$2$3'\", $structure);\n      //$structure = preg_replace(\"/(DEFAULT) (')?([-|+]?\\d+)(\\.\\d+)(')?/\", \"$1 '$3'\", $structure);\n      $structure = preg_replace('/(BIGINT)\\(\\d+\\)/i', '$1', $structure);\n      $structure = preg_replace('/(TINYINT) /i', '$1(4) ', $structure);\n\n      return [\n         'schema' => strtolower($structure),\n         'index'  => $index\n      ];\n\n   }\n\n   /**\n    * Get database raw version\n    *\n    * @return string\n    */\n   public function getVersion() {\n      $req = $this->request('SELECT version()')->next();\n      $raw = $req['version()'];\n      return $raw;\n   }\n\n   /**\n    * Starts a transaction\n    *\n    * @return boolean\n    */\n   public function beginTransaction() {\n      $this->in_transaction = true;\n      return $this->dbh->begin_transaction();\n   }\n\n   /**\n    * Commits a transaction\n    *\n    * @return boolean\n    */\n   public function commit() {\n      $this->in_transaction = false;\n      return $this->dbh->commit();\n   }\n\n   /**\n    * Rollbacks a transaction\n    *\n    * @return boolean\n    */\n   public function rollBack() {\n      $this->in_transaction = false;\n      return $this->dbh->rollback();\n   }\n\n   /**\n    * Are we in a transaction?\n    *\n    * @return boolean\n    */\n   public function inTransaction() {\n      return $this->in_transaction;\n   }\n\n   /**\n    * Check if timezone data is accessible and available in database.\n    *\n    * @param string $msg  Variable that would contain the reason of data unavailability.\n    *\n    * @return boolean\n    *\n    * @since 9.5.0\n    */\n   public function areTimezonesAvailable(string &$msg = '') {\n      $mysql_db_res = $this->request('SHOW DATABASES LIKE ' . $this->quoteValue('mysql'));\n      if ($mysql_db_res->count() === 0) {\n         $msg = __('Access to timezone database (mysql) is not allowed.');\n         return false;\n      }\n\n      $tz_table_res = $this->request(\n         'SHOW TABLES FROM '\n         . $this->quoteName('mysql')\n         . ' LIKE '\n         . $this->quoteValue('time_zone_name')\n      );\n      if ($tz_table_res->count() === 0) {\n         $msg = __('Access to timezone table (mysql.time_zone_name) is not allowed.');\n         return false;\n      }\n\n      $criteria = [\n         'COUNT'  => 'cpt',\n         'FROM'   => 'mysql.time_zone_name',\n      ];\n      $iterator = $this->request($criteria);\n      $result = $iterator->next();\n      if ($result['cpt'] == 0) {\n         $msg = __('Timezones seems not loaded, see https://glpi-install.readthedocs.io/en/latest/timezones.html.');\n         return false;\n      }\n\n      return true;\n   }\n\n   /**\n    * Defines timezone to use.\n    *\n    * @param string $timezone\n    *\n    * @return DBmysql\n    */\n   public function setTimezone($timezone) {\n      //setup timezone\n      if ($this->areTimezonesAvailable()) {\n         date_default_timezone_set($timezone);\n         $this->dbh->query(\"SET SESSION time_zone = '$timezone'\");\n         $_SESSION['glpi_currenttime'] = date(\"Y-m-d H:i:s\");\n      }\n      return $this;\n   }\n\n   /**\n    * Returns list of timezones.\n    *\n    * @return string[]\n    *\n    * @since 9.5.0\n    */\n   public function getTimezones() {\n      $list = []; //default $tz is empty\n\n      $from_php = \\DateTimeZone::listIdentifiers();\n      $now = new \\DateTime();\n\n      $iterator = $this->request([\n         'SELECT' => 'Name',\n         'FROM'   => 'mysql.time_zone_name',\n         'WHERE'  => ['Name' => $from_php]\n      ]);\n\n      while ($from_mysql = $iterator->next()) {\n         $now->setTimezone(new \\DateTimeZone($from_mysql['Name']));\n         $list[$from_mysql['Name']] = $from_mysql['Name'] . $now->format(\" (T P)\");\n      }\n\n      return $list;\n   }\n\n   /**\n    * Returns count of tables that were not migrated to be compatible with timezones usage.\n    *\n    * @return number\n    *\n    * @since 9.5.0\n    */\n   public function notTzMigrated() {\n       global $DB;\n\n       $result = $DB->request([\n           'COUNT'       => 'cpt',\n           'FROM'        => 'information_schema.columns',\n           'WHERE'       => [\n              'information_schema.columns.table_schema'  => $DB->dbdefault,\n              'information_schema.columns.data_type'     => ['datetime']\n           ]\n       ])->next();\n       return (int)$result['cpt'];\n   }\n\n   /**\n    * Clear cached schema informations.\n    *\n    * @return void\n    */\n   public function clearSchemaCache() {\n      $this->table_cache = [];\n      $this->field_cache = [];\n   }\n\n   /**\n    * Quote a value for a specified type\n    * Should be used for PDO, but this will prevent heavy\n    * replacements in the source code in the future.\n    *\n    * @param mixed   $value Value to quote\n    * @param integer $type  Value type, defaults to PDO::PARAM_STR\n    *\n    * @return mixed\n    *\n    * @since 9.5.0\n    */\n   public function quote($value, int $type = 2/*\\PDO::PARAM_STR*/) {\n      return \"'\" . $this->escape($value) . \"'\";\n      //return $this->dbh->quote($value, $type);\n   }\n\n   /**\n    * Get character used to quote names for current database engine\n    *\n    * @return string\n    *\n    * @since 9.5.0\n    */\n   public static function getQuoteNameChar(): string {\n      return '`';\n   }\n\n   /**\n    * Is value quoted as database field/expression?\n    *\n    * @param string|\\QueryExpression $value Value to check\n    *\n    * @return boolean\n    *\n    * @since 9.5.0\n    */\n   public static function isNameQuoted($value): bool {\n      $quote = static::getQuoteNameChar();\n      return is_string($value) && trim($value, $quote) != $value;\n   }\n\n   /**\n    * Remove SQL comments\n    * \u00a9 2011 PHPBB Group\n    *\n    * @param string $output SQL statements\n    *\n    * @return string\n    */\n   public function removeSqlComments($output) {\n      $lines = explode(\"\\n\", $output);\n      $output = \"\";\n\n      // try to keep mem. use down\n      $linecount = count($lines);\n\n      $in_comment = false;\n      for ($i = 0; $i < $linecount; $i++) {\n         if (preg_match(\"/^\\/\\*/\", $lines[$i])) {\n            $in_comment = true;\n         }\n\n         if (!$in_comment) {\n            $output .= $lines[$i] . \"\\n\";\n         }\n\n         if (preg_match(\"/\\*\\/$/\", preg_quote($lines[$i]))) {\n            $in_comment = false;\n         }\n      }\n\n      unset($lines);\n      return trim($output);\n   }\n\n   /**\n    * Remove remarks and comments from SQL\n    * @see DBmysql::removeSqlComments()\n    * \u00a9 2011 PHPBB Group\n    *\n    * @param $string $sql SQL statements\n    *\n    * @return string\n    */\n   public function removeSqlRemarks($sql) {\n      $lines = explode(\"\\n\", $sql);\n\n      // try to keep mem. use down\n      $sql = \"\";\n\n      $linecount = count($lines);\n      $output = \"\";\n\n      for ($i = 0; $i < $linecount; $i++) {\n         if (($i != ($linecount - 1)) || (strlen($lines[$i]) > 0)) {\n            if (isset($lines[$i][0])) {\n               if ($lines[$i][0] != \"#\" && substr($lines[$i], 0, 2) != \"--\") {\n\n                  $output .= $lines[$i] . \"\\n\";\n               } else {\n                  $output .= \"\\n\";\n               }\n            }\n            // Trading a bit of speed for lower mem. use here.\n            $lines[$i] = \"\";\n         }\n      }\n      return trim($this->removeSqlComments($output));\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n *  Database iterator class for Mysql\n**/\nclass DBmysqlIterator implements Iterator, Countable {\n   /**\n    * DBmysql object\n    * @var DBmysql\n    */\n   private $conn;\n   // Current SQL query\n   private $sql;\n   // Current result\n   private $res = false;\n   // Current row\n   private $row;\n\n   // Current position\n   private $position = 0;\n\n   //Known query operators\n   private $allowed_operators = [\n      '=',\n      '!=',\n      '<',\n      '<=',\n      '>',\n      '>=',\n      '<>',\n      'LIKE',\n      'REGEXP',\n      'NOT LIKE',\n      'NOT REGEX',\n      '&',\n      '|'\n   ];\n\n   /**\n    * Constructor\n    *\n    * @param DBmysql $dbconnexion Database Connnexion (must be a CommonDBTM object)\n    *\n    * @return void\n    */\n   function __construct ($dbconnexion) {\n      $this->conn = $dbconnexion;\n   }\n\n   /**\n    * Executes the query\n    *\n    * @param string|array $table       Table name (optional when $crit have FROM entry)\n    * @param string|array $crit        Fields/values, ex array(\"id\"=>1), if empty => all rows (default '')\n    * @param boolean      $debug       To log the request (default false)\n    *\n    * @return DBmysqlIterator\n    */\n   function execute ($table, $crit = \"\", $debug = false) {\n      $this->buildQuery($table, $crit, $debug);\n      $this->res = ($this->conn ? $this->conn->query($this->sql) : false);\n      $this->position = 0;\n      return $this;\n   }\n\n   /**\n    * Builds the query\n    *\n    * @param string|array $table       Table name (optional when $crit have FROM entry)\n    * @param string|array $crit        Fields/values, ex array(\"id\"=>1), if empty => all rows (default '')\n    * @param boolean      $log         To log the request (default false)\n    *\n    * @return void\n    */\n   function buildQuery ($table, $crit = \"\", $log = false) {\n      $this->sql = null;\n      $this->res = false;\n      $this->parameters = [];\n\n      $is_legacy = false;\n\n      if (is_string($table) && strpos($table, \" \")) {\n         $names = preg_split('/\\s+AS\\s+/i', $table);\n         if (isset($names[1]) && strpos($names[1], ' ') || !isset($names[1]) || strpos($names[0], ' ')) {\n            $is_legacy = true;\n         }\n      }\n\n      if ($is_legacy) {\n         //if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n         //   trigger_error(\"Deprecated usage of SQL in DB/request (full query)\", E_USER_DEPRECATED);\n         //}\n         $this->sql = $table;\n      } else {\n         // Modern way\n         if (is_array($table) && isset($table['FROM'])) {\n            // Shift the args\n            $debug = $crit;\n            $crit  = $table;\n            $table = $crit['FROM'];\n            unset($crit['FROM']);\n         }\n\n         // Check field, orderby, limit, start in criterias\n         $field    = \"\";\n         $distinct = false;\n         $orderby  = null;\n         $limit    = 0;\n         $start    = 0;\n         $where    = '';\n         $count    = '';\n         $join     = [];\n         $groupby  = '';\n         $having   = '';\n         if (is_array($crit) && count($crit)) {\n            foreach ($crit as $key => $val) {\n               switch ((string)$key) {\n                  case 'SELECT' :\n                  case 'FIELDS' :\n                     $field = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'DISTINCT' :\n                     if ($val) {\n                        $distinct = true;\n                     }\n                     unset($crit[$key]);\n                     break;\n\n                  case 'COUNT' :\n                     $count = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'ORDER' :\n                  case 'ORDERBY' :\n                     $orderby = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'LIMIT' :\n                     $limit = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'START' :\n                     $start = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'WHERE' :\n                     $where = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'HAVING' :\n                     $having = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'GROUP' :\n                  case 'GROUPBY' :\n                     $groupby = $val;\n                     unset($crit[$key]);\n                     break;\n\n                  case 'JOIN' :\n                  case 'LEFT JOIN' :\n                  case 'RIGHT JOIN' :\n                  case 'INNER JOIN' :\n                     $join[$key] = $val;\n                     unset($crit[$key]);\n                     break;\n               }\n            }\n         }\n\n         $this->sql = 'SELECT ';\n         $first = true;\n\n         // SELECT field list\n         if ($count) {\n            $this->sql .= 'COUNT(';\n            if ($distinct) {\n               $this->sql .= 'DISTINCT ';\n            }\n            if (!empty($field) && !is_array($field)) {\n               $this->sql .= \"\" . DBmysql::quoteName($field);\n            } else {\n               if ($distinct) {\n                  trigger_error(\"With COUNT and DISTINCT, you must specify exactly one field, or use 'COUNT DISTINCT'\", E_USER_ERROR);\n               }\n               $this->sql .= \"*\";\n            }\n            $this->sql .= \") AS $count\";\n            $first = false;\n         }\n         if (!$count || $count && is_array($field)) {\n            if ($distinct && !$count) {\n               $this->sql .= 'DISTINCT ';\n            }\n            if (empty($field)) {\n               $this->sql .= '*';\n            }\n            if (!empty($field)) {\n               if (!is_array($field)) {\n                  $field = [$field];\n               }\n               foreach ($field as $t => $f) {\n                  if ($first) {\n                     $first = false;\n                  } else {\n                     $this->sql .= ', ';\n                  }\n                  $this->sql .= $this->handleFields($t, $f);\n               }\n            }\n         }\n\n         // FROM table list\n         if (is_array($table)) {\n            if (count($table)) {\n               $table = array_map([DBmysql::class, 'quoteName'], $table);\n               $this->sql .= ' FROM '.implode(\", \", $table);\n            } else {\n               trigger_error(\"Missing table name\", E_USER_ERROR);\n            }\n         } else if ($table) {\n            if ($table instanceof \\AbstractQuery) {\n               $table = $table->getQuery();\n            } else if ($table instanceof \\QueryExpression) {\n               $table = $table->getValue();\n            } else {\n               $table = DBmysql::quoteName($table);\n            }\n            $this->sql .= \" FROM $table\";\n         } else {\n            /*\n             * TODO filter with if ($where || !empty($crit)) {\n             * but not usefull for now, as we CANNOT write somthing like \"SELECT NOW()\"\n             */\n            trigger_error(\"Missing table name\", E_USER_ERROR);\n         }\n\n         // JOIN\n         if (!empty($join)) {\n            $this->sql .= $this->analyseJoins($join);\n         }\n\n         // WHERE criteria list\n         if (!empty($crit)) {\n            $this->sql .= \" WHERE \".$this->analyseCrit($crit);\n         } else if ($where) {\n            $this->sql .= \" WHERE \".$this->analyseCrit($where);\n         }\n\n         // GROUP BY field list\n         if (is_array($groupby)) {\n            if (count($groupby)) {\n               $groupby = array_map([DBmysql::class, 'quoteName'], $groupby);\n               $this->sql .= ' GROUP BY '.implode(\", \", $groupby);\n            } else {\n               trigger_error(\"Missing group by field\", E_USER_ERROR);\n            }\n         } else if ($groupby) {\n            $groupby = DBmysql::quoteName($groupby);\n            $this->sql .= \" GROUP BY $groupby\";\n         }\n\n         // HAVING criteria list\n         if ($having) {\n            $this->sql .= \" HAVING \".$this->analyseCrit($having);\n         }\n\n         // ORDER BY\n         if ($orderby !== null) {\n            $this->sql .= $this->handleOrderClause($orderby);\n         }\n\n         //LIMIT & OFFSET\n         $this->sql .= $this->handleLimits($limit, $start);\n      }\n\n      if ($log == true || defined('GLPI_SQL_DEBUG') && GLPI_SQL_DEBUG == true) {\n         Toolbox::logSqlDebug(\"Generated query:\", $this->getSql());\n      }\n   }\n\n   /**\n    * Handle \"ORDER BY\" SQL clause\n    *\n    * @param string|array $clause Clause parameters\n    *\n    * @reutn string\n    */\n   public function handleOrderClause($clause) {\n      if (!is_array($clause)) {\n         $clause = [$clause];\n      }\n\n      $cleanorderby = [];\n      foreach ($clause as $o) {\n         if (is_string($o)) {\n            $fields = explode(',', $o);\n            foreach ($fields as $field) {\n               $new = '';\n               $tmp = explode(' ', trim($field));\n               $new .= DBmysql::quoteName($tmp[0]);\n               // ASC OR DESC added\n               if (isset($tmp[1]) && in_array($tmp[1], ['ASC', 'DESC'])) {\n                  $new .= ' ' . $tmp[1];\n               }\n               $cleanorderby[] = $new;\n            }\n         } else if ($o instanceof QueryExpression) {\n            $cleanorderby[] = $o->getValue();\n         } else {\n            trigger_error(\"Invalid order clause\", E_USER_ERROR);\n         }\n      }\n\n      return \" ORDER BY \".implode(\", \", $cleanorderby);\n   }\n\n\n   /**\n    * Handle LIMIT and OFFSET\n    *\n    * @param integer $limit  SQL LIMIT\n    * @param integer $offset Start OFFSET (defaults to null)\n    *\n    * @return string\n    */\n   public function handleLimits($limit, $offset = null) {\n      $limits = '';\n      if (is_numeric($limit) && ($limit > 0)) {\n         $limits = \" LIMIT $limit\";\n         if (is_numeric($offset) && ($offset > 0)) {\n            $limits .= \" OFFSET $offset\";\n         }\n      }\n      return $limits;\n   }\n\n   /**\n    * Handle fields\n    *\n    * @param integer|string $t Table name or function\n    * @param array|string   $f Field(s) name(s)\n    *\n    * @return void\n    */\n   private function handleFields($t, $f) {\n      if (is_numeric($t)) {\n         if ($f instanceof \\AbstractQuery) {\n            return $f->getQuery();\n         } else if ($f instanceof \\QueryExpression) {\n            return $f->getValue();\n         } else {\n            return DBmysql::quoteName($f);\n         }\n      } else {\n         switch ($t) {\n            case 'COUNT DISTINCT':\n            case 'DISTINCT COUNT':\n               if (is_array($f)) {\n                  $sub_count = [];\n                  foreach ($f as $sub_f) {\n                     $sub_count[] = $this->handleFieldsAlias(\"COUNT(DISTINCT\", $sub_f, ')');\n                  }\n                  return implode(\", \", $sub_count);\n               } else {\n                  return $this->handleFieldsAlias(\"COUNT(DISTINCT\", $f, ')');\n               }\n               break;\n            case 'COUNT':\n            case 'SUM':\n            case 'AVG':\n            case 'MAX':\n            case 'MIN':\n               if (is_array($f)) {\n                  $sub_aggr = [];\n                  foreach ($f as $sub_f) {\n                     $sub_aggr[] = $this->handleFields($t, $sub_f);\n                  }\n                  return implode(\", \", $sub_aggr);\n               } else {\n                  return $this->handleFieldsAlias($t, $f);\n               }\n               break;\n            default:\n               if (is_array($f)) {\n                  $t = DBmysql::quoteName($t);\n                  $f = array_map([DBmysql::class, 'quoteName'], $f);\n                  return \"$t.\" . implode(\", $t.\", $f);\n               } else {\n                  $t = DBmysql::quoteName($t);\n                  $f = ($f == '*' ? $f : DBmysql::quoteName($f));\n                  return \"$t.$f\";\n               }\n               break;\n         }\n      }\n   }\n\n   /**\n    * Handle alias on fields\n    *\n    * @param string $t      Function name\n    * @param string $f      Field name (with alias if any)\n    * @param string $suffix Suffix to append, defaults to ''\n    *\n    * @return string\n    */\n   private function handleFieldsAlias($t, $f, $suffix = '') {\n      $names = preg_split('/\\s+AS\\s+/i', $f);\n      $expr  = \"$t(\".$this->handleFields(0, $names[0]).\"$suffix)\";\n      if (isset($names[1])) {\n          $expr .= \" AS \" . DBmysql::quoteName($names[1]);\n      }\n\n      return $expr;\n   }\n\n   /**\n    * Retrieve the SQL statement\n    *\n    * @since 9.1\n    *\n    * @return string\n    */\n   public function getSql() {\n      return preg_replace('/ +/', ' ', $this->sql);\n   }\n\n   /**\n    * Destructor\n    *\n    * @return void\n    */\n   function __destruct () {\n      if ($this->res instanceof \\mysqli_result) {\n         $this->conn->freeResult($this->res);\n      }\n   }\n\n   /**\n    * Generate the SQL statement for a array of criteria\n    *\n    * @param string[] $crit Criteria\n    * @param string   $bool Boolean operator (default AND)\n    *\n    * @return string\n    */\n   public function analyseCrit ($crit, $bool = \"AND\") {\n\n      if (!is_array($crit)) {\n         //if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n         //  trigger_error(\"Deprecated usage of SQL in DB/request (criteria)\", E_USER_DEPRECATED);\n         //}\n         return $crit;\n      }\n      $ret = \"\";\n      foreach ($crit as $name => $value) {\n         if (!empty($ret)) {\n            $ret .= \" $bool \";\n         }\n         if (is_numeric($name)) {\n            // no key and direct expression\n            if ($value instanceof QueryExpression) {\n               $ret .= $value->getValue();\n            } else if ($value instanceof QuerySubQuery) {\n               $ret .= $value->getQuery();\n            } else {\n               // No Key case => recurse.\n               $ret .= \"(\" . $this->analyseCrit($value) . \")\";\n            }\n\n         } else if (($name === \"OR\") || ($name === \"AND\")) {\n            // Binary logical operator\n            $ret .= \"(\" . $this->analyseCrit($value, $name) . \")\";\n\n         } else if ($name === \"NOT\") {\n            // Uninary logicial operator\n            $ret .= \" NOT (\" . $this->analyseCrit($value) . \")\";\n\n         } else if ($name === \"FKEY\" || $name === 'ON') {\n            // Foreign Key condition\n            $ret .= $this->analyseFkey($value);\n         } else if ($name === 'RAW') {\n            $key = key($value);\n            $value = current($value);\n            $ret .= '((' . $key . ') ' . $this->analyseCriterion($value) . ')';\n         } else {\n            $ret .= DBmysql::quoteName($name) . ' ' . $this->analyseCriterion($value);\n         }\n      }\n      return $ret;\n   }\n\n   /**\n    * analyse a criterion\n    *\n    * @since 9.3.1\n    *\n    * @param mixed $value Value to analyse\n    *\n    * @return string\n    */\n   private function analyseCriterion($value) {\n      $criterion = null;\n\n      if (is_null($value) || (is_string($value) && strtolower($value) === 'null')) {\n         // NULL condition\n         $criterion = 'IS NULL';\n      } else {\n         if (is_array($value)) {\n            if (count($value) == 2 && isset($value[0]) && $this->isOperator($value[0])) {\n               $comparison = $value[0];\n               $criterion_value = $value[1];\n            } else {\n               if (!count($value)) {\n                  throw new \\RuntimeException('Empty IN are not allowed');\n               }\n               // Array of Values\n               return \"IN (\".$this->analyseCriterionValue($value).\")\";\n            }\n         } else {\n            $comparison = ($value instanceof \\AbstractQuery ? 'IN' : '=');\n            $criterion_value = $value;\n         }\n         $criterion = \"$comparison \" . $this->getCriterionValue($criterion_value);\n      }\n\n      return $criterion;\n   }\n\n   /**\n    * Handle a criterion value\n    *\n    * @since 9.5.0\n    *\n    * @param mixed $value The value to handle. This may be:\n    *                      - an instance of AbstractQuery\n    *                      - a QueryExpression\n    *                      - a value quoted as a name in the db engine\n    *                      - a QueryParam\n    *                      - a value or an array of values\n    *\n    * @return string\n    */\n   private function getCriterionValue($value) {\n      if ($value instanceof \\AbstractQuery) {\n         return $value->getQuery();\n      } else if ($value instanceof \\QueryExpression) {\n         return $value->getValue();\n      } else if ($value instanceof \\QueryParam) {\n         return $value->getValue();\n      } else {\n         return $this->analyseCriterionValue($value);\n      }\n   }\n\n   private function analyseCriterionValue($value) {\n      $crit_value = null;\n      if (is_array($value)) {\n         foreach ($value as $k => $v) {\n            $value[$k] = DBmysql::quoteValue($v);\n         }\n         $crit_value = implode(', ', $value);\n      } else {\n         $crit_value = DBmysql::quoteValue($value);\n      }\n      return $crit_value;\n   }\n\n   /**\n    * analyse an array of joins criteria\n    *\n    * @since 9.4.0\n    *\n    * @param array $joinarray Array of joins to analyse\n    *       [jointype => [table => criteria]]\n    *\n    * @return string\n    */\n   public function analyseJoins(array $joinarray) {\n      $query = '';\n      foreach ($joinarray as $jointype => $jointables) {\n         if (!in_array($jointype, ['JOIN', 'LEFT JOIN', 'INNER JOIN', 'RIGHT JOIN'])) {\n            throw new \\RuntimeException('BAD JOIN');\n         }\n\n         if ($jointype == 'JOIN') {\n            $jointype = 'LEFT JOIN';\n         }\n\n         if (!is_array($jointables)) {\n            trigger_error(\"BAD JOIN, value must be [ table => criteria ]\", E_USER_ERROR);\n            continue;\n         }\n\n         foreach ($jointables as $jointablekey => $jointablecrit) {\n            if (isset($jointablecrit['TABLE'])) {\n               //not a \"simple\" FKEY\n               $jointablekey = $jointablecrit['TABLE'];\n               unset($jointablecrit['TABLE']);\n            } else if (is_numeric($jointablekey) || $jointablekey == 'FKEY' || $jointablekey == 'ON') {\n               throw new \\RuntimeException('BAD JOIN');\n            }\n\n            if ($jointablekey instanceof \\QuerySubQuery) {\n               $jointablekey = $jointablekey->getQuery();\n            } else {\n               $jointablekey = DBmysql::quoteName($jointablekey);\n            }\n\n            $query .= \" $jointype $jointablekey ON (\" . $this->analyseCrit($jointablecrit) . \")\";\n         }\n      }\n      return $query;\n   }\n\n   /**\n    * Analyse foreign keys\n    *\n    * @param mixed $values Values for Foreign keys\n    *\n    * @return string\n    */\n   private function analyseFkey($values) {\n      if (is_array($values)) {\n         $keys = array_keys($values);\n         if (count($values) == 2) {\n            $t1 = $keys[0];\n            $f1 = $values[$t1];\n            $t2 = $keys[1];\n            $f2 = $values[$t2];\n            if ($f2 instanceof QuerySubQuery) {\n               return (is_numeric($t1) ? DBmysql::quoteName($f1) : DBmysql::quoteName($t1) . '.' . DBmysql::quoteName($f1)) . ' = ' .\n                  $f2->getQuery();\n            } else {\n               return (is_numeric($t1) ? DBmysql::quoteName($f1) : DBmysql::quoteName($t1) . '.' . DBmysql::quoteName($f1)) . ' = ' .\n                  (is_numeric($t2) ? DBmysql::quoteName($f2) : DBmysql::quoteName($t2) . '.' . DBmysql::quoteName($f2));\n            }\n         } else if (count($values) == 3) {\n            $condition = array_pop($values);\n            $fkey = $this->analyseFkey($values);\n            return $fkey . ' ' . key($condition) . ' ' . $this->analyseCrit(current($condition));\n         }\n      }\n      trigger_error(\"BAD FOREIGN KEY, should be [ table1 => key1, table2 => key2 ] or [ table1 => key1, table2 => key2, [criteria]]\", E_USER_ERROR);\n   }\n\n   /**\n    * Reset rows parsing (go to first offset) & provide first row\n    *\n    * @return string[]|null fetch_assoc() of first results row\n    */\n   public function rewind() {\n      if ($this->res && $this->conn->numrows($this->res)) {\n         $this->conn->dataSeek($this->res, 0);\n      }\n      $this->position = 0;\n      return $this->next();\n   }\n\n   /**\n    * Provide actual row\n    *\n    * @return mixed\n    */\n   public function current() {\n      return $this->row;\n   }\n\n   /**\n    * Get current key value\n    *\n    * @return mixed\n    */\n   public function key() {\n      return (isset($this->row[\"id\"]) ? $this->row[\"id\"] : $this->position - 1);\n   }\n\n   /**\n    * Return next row of query results\n    *\n    * @return string[]|null fetch_assoc() of first results row\n    */\n   public function next() {\n      if (!($this->res instanceof \\mysqli_result)) {\n         return false;\n      }\n      $this->row = $this->conn->fetchAssoc($this->res);\n      ++$this->position;\n      return $this->row;\n   }\n\n   /**\n    * @todo phpdoc...\n    *\n    * @return boolean\n    */\n   public function valid() {\n      return $this->res instanceof \\mysqli_result && $this->row;\n   }\n\n   /**\n    * Number of rows on a result\n    *\n    * @return integer\n    */\n   public function numrows() {\n      return ($this->res instanceof \\mysqli_result ? $this->conn->numrows($this->res) : 0);\n   }\n\n   /**\n    * Number of rows on a result\n    *\n    * @since 9.2\n    *\n    * @return integer\n    */\n   public function count() {\n      return ($this->res instanceof \\mysqli_result ? $this->conn->numrows($this->res) : 0);\n   }\n\n   /**\n    * Do we have an operator?\n    *\n    * @param string $value Value to check\n    *\n    * @return boolean\n    */\n   public function isOperator($value) {\n      return in_array($value, $this->allowed_operators, true);\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n *  Report class\n *\n * @ since version 0.84\n**/\nclass Report extends CommonGLPI{\n\n   static protected $notable = false;\n   static $rightname         = 'reports';\n\n\n   static function getTypeName($nb = 0) {\n      return _n('Report', 'Reports', $nb);\n   }\n\n\n   /**\n    * @see CommonGLPI::getMenuShorcut()\n    *\n    *  @since 0.85\n   **/\n   static function getMenuShorcut() {\n      return 'e';\n   }\n\n\n   /**\n    * Show report title\n   **/\n   static function title() {\n      global $PLUGIN_HOOKS, $CFG_GLPI;\n\n      // Report generation\n      // Default Report included\n      $report_list = [];\n      $report_list[\"default\"][\"name\"] = __('Default report');\n      $report_list[\"default\"][\"file\"] = \"report.default.php\";\n\n      if (Contract::canView()) {\n         // Rapport ajoute par GLPI V0.2\n         $report_list[\"Contrats\"][\"name\"] = __('By contract');\n         $report_list[\"Contrats\"][\"file\"] = \"report.contract.php\";\n      }\n      if (Infocom::canView()) {\n         $report_list[\"Par_annee\"][\"name\"] = __('By year');\n         $report_list[\"Par_annee\"][\"file\"] = \"report.year.php\";\n         $report_list[\"Infocoms\"][\"name\"]  = __('Hardware financial and administrative information');\n         $report_list[\"Infocoms\"][\"file\"]  = \"report.infocom.php\";\n         $report_list[\"Infocoms2\"][\"name\"] = __('Other financial and administrative information (licenses, cartridges, consumables)');\n         $report_list[\"Infocoms2\"][\"file\"] = \"report.infocom.conso.php\";\n      }\n      if (Session::haveRight(\"networking\", READ)) {\n         $report_list[\"Rapport prises reseau\"][\"name\"] = __('Network report');\n         $report_list[\"Rapport prises reseau\"][\"file\"] = \"report.networking.php\";\n      }\n      if (Session::haveRight(\"reservation\", READ)) {\n         $report_list[\"reservation\"][\"name\"] = __('Loan');\n         $report_list[\"reservation\"][\"file\"] = \"report.reservation.php\";\n      }\n      if (Computer::canView()\n          || Monitor::canView()\n          || Session::haveRight(\"networking\", READ)\n          || Peripheral::canView()\n          || Printer::canView()\n          || Phone::canView()) {\n         $report_list[\"state\"][\"name\"] = __('Status');\n         $report_list[\"state\"][\"file\"] = \"report.state.php\";\n      }\n      //Affichage du tableau de presentation des stats\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr><th colspan='2'>\".__('Select the report you want to generate').\"</th></tr>\";\n      echo \"<tr class='tab_bg_1'><td class='center'>\";\n\n      $selected = -1;\n      $values   = [$CFG_GLPI[\"root_doc\"].'/front/report.php' => Dropdown::EMPTY_VALUE];\n\n      foreach ($report_list as $val => $data) {\n         $name          = $data['name'];\n         $file          = $data['file'];\n         $key           = $CFG_GLPI[\"root_doc\"].\"/front/\".$file;\n         $values[$key]  = $name;\n         if (stripos($_SERVER['REQUEST_URI'], $key) !== false) {\n            $selected = $key;\n         }\n      }\n\n      $names    = [];\n      $optgroup = [];\n      if (isset($PLUGIN_HOOKS[\"reports\"]) && is_array($PLUGIN_HOOKS[\"reports\"])) {\n         foreach ($PLUGIN_HOOKS[\"reports\"] as $plug => $pages) {\n            if (!Plugin::isPluginActive($plug)) {\n               continue;\n            }\n            if (is_array($pages) && count($pages)) {\n               foreach ($pages as $page => $name) {\n                  $names[$plug.'/'.$page] = [\"name\" => $name,\n                                                  \"plug\" => $plug];\n                  $optgroup[$plug] = Plugin::getInfo($plug, 'name');\n               }\n            }\n         }\n         asort($names);\n      }\n\n      foreach ($optgroup as $opt => $title) {\n         $group = $title;\n         foreach ($names as $key => $val) {\n            if ($opt == $val[\"plug\"]) {\n               $file                  = $CFG_GLPI[\"root_doc\"].\"/plugins/\".$key;\n               $values[$group][$file] = $val[\"name\"];\n               if (stripos($_SERVER['REQUEST_URI'], $file) !== false) {\n                  $selected = $file;\n               }\n            }\n         }\n      }\n\n      Dropdown::showFromArray('statmenu', $values,\n                              ['on_change' => \"window.location.href=this.options[this.selectedIndex].value\",\n                                    'value'     => $selected]);\n      echo \"</td>\";\n      echo \"</tr>\";\n      echo \"</table>\";\n   }\n\n\n   /**\n    * Show Default Report\n    *\n    * @since 0.84\n   **/\n   static function showDefaultReport() {\n      global $DB;\n\n      // Title\n      echo \"<span class='big b'>GLPI \".Report::getTypeName(Session::getPluralNumber()).\"</span><br><br>\";\n\n      // 1. Get counts of itemtype\n      $items     = ['Computer', 'Monitor', 'NetworkEquipment', 'Peripheral', 'Phone',\n                         'Printer', 'Software'];\n\n      $linkitems = ['Monitor', 'Peripheral', 'Phone', 'Printer'];\n\n      echo \"<table class='tab_cadrehov'>\";\n\n      foreach ($items as $itemtype) {\n         $table_item = getTableForItemType($itemtype);\n         $criteria = [\n            'COUNT'  => 'cpt',\n            'FROM'   => $table_item,\n            'WHERE'  => [\n               \"$table_item.is_deleted\"   => 0,\n               \"$table_item.is_template\"  => 0\n            ] + getEntitiesRestrictCriteria($table_item)\n         ];\n\n         if (in_array($itemtype, $linkitems)) {\n            $criteria['LEFT JOIN'] = [\n               'glpi_computers_items' => [\n                  'ON' => [\n                     'glpi_computers_items'  => 'items_id',\n                     $table_item             => 'id', [\n                        'AND' => [\n                           'glpi_computers_items.itemtype' => $itemtype\n                        ]\n                     ]\n                  ]\n               ]\n            ];\n         }\n\n         $result = $DB->request($criteria)->next();\n         $number = (int)$result['cpt'];\n\n         echo \"<tr class='tab_bg_2'><td>\".$itemtype::getTypeName(Session::getPluralNumber()).\"</td>\";\n         echo \"<td class='numeric'>$number</td></tr>\";\n      }\n\n      echo \"<tr class='tab_bg_1'><td colspan='2' class='b'>\".OperatingSystem::getTypeName(1).\"</td></tr>\";\n\n      // 2. Get some more number data (operating systems per computer)\n      $iterator = $DB->request([\n         'SELECT'    => [\n            'COUNT' => '* AS count',\n            'glpi_operatingsystems.name AS name'\n         ],\n         'FROM'      => 'glpi_items_operatingsystems',\n         'LEFT JOIN' => [\n            'glpi_operatingsystems' => [\n               'ON' => [\n                  'glpi_items_operatingsystems' => 'operatingsystems_id',\n                  'glpi_operatingsystems'       => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['is_deleted' => 0],\n         'GROUPBY'   => 'glpi_operatingsystems.name'\n      ]);\n\n      while ($data = $iterator->next()) {\n         if (empty($data['name'])) {\n            $data['name'] = Dropdown::EMPTY_VALUE;\n         }\n         echo \"<tr class='tab_bg_2'><td>\".$data['name'].\"</td>\";\n         echo \"<td class='numeric'>\".$data['count'].\"</td></tr>\";\n      }\n\n      // Get counts of types\n\n      $val   = array_flip($items);\n      unset($val[\"Software\"]);\n      $items = array_flip($val);\n\n      foreach ($items as $itemtype) {\n         echo \"<tr class='tab_bg_1'><td colspan='2' class='b'>\".$itemtype::getTypeName(Session::getPluralNumber()).\n              \"</td></tr>\";\n\n         $table_item = getTableForItemType($itemtype);\n         $typeclass  = $itemtype.\"Type\";\n         $type_table = getTableForItemType($typeclass);\n         $typefield  = getForeignKeyFieldForTable(getTableForItemType($typeclass));\n\n         $criteria = [\n            'SELECT'    => [\n               'COUNT'  => '* AS count',\n               \"$type_table.name AS name\"\n            ],\n            'FROM'      => $table_item,\n            'LEFT JOIN' => [\n               $type_table => [\n                  'ON' => [\n                     $table_item => $typefield,\n                     $type_table => 'id'\n                  ]\n               ]\n            ],\n            'WHERE'     => [\n               \"$table_item.is_deleted\"   => 0,\n               \"$table_item.is_template\"  => 0\n            ] + getEntitiesRestrictCriteria($table_item),\n            'GROUPBY'   => \"$type_table.name\"\n         ];\n\n         if (in_array($itemtype, $linkitems)) {\n            $criteria['LEFT JOIN']['glpi_computers_items'] = [\n               'ON' => [\n                  'glpi_computers_items'  => 'items_id',\n                  $table_item             => 'id', [\n                     'AND' => [\n                        'glpi_computers_items.itemtype'  => $itemtype\n                     ]\n                  ]\n               ]\n            ];\n         }\n\n         $iterator = $DB->request($criteria);\n         while ($data = $iterator->next()) {\n            if (empty($data['name'])) {\n               $data['name'] = Dropdown:: EMPTY_VALUE;\n            }\n            echo \"<tr class='tab_bg_2'><td>\".$data['name'].\"</td>\";\n            echo \"<td class='numeric'>\".$data['count'].\"</td></tr>\";\n         }\n      }\n      echo \"</table>\";\n   }\n\n\n   /**\n    * Get report informations\n    *\n    * @param string $from      From table\n    * @param array  $joincrit  Join criteria\n    * @param array  $where     Where clause\n    * @param array  $select    Extra select clause\n    * @param array  $leftjoin  Extra LEFT JOIN clause\n    * @param array  $innerjoin Extra INNER JOIN clause\n    * @param array  $order     Order clause\n    * @param string $extra     ?\n    *\n    * @return void\n    *\n    * @since 10.0.0\n   **/\n   static function reportForNetworkInformations(\n      $from,\n      array $joincrit,\n      array $where = [],\n      array $select = [],\n      array $leftjoin = [],\n      array $innerjoin = [],\n      array $order = [],\n      $extra = ''\n   ) {\n      global $DB;\n\n      // This SQL request matches the NetworkPort, then its NetworkName and IPAddreses. It also\n      //      match opposite NetworkPort, then its NetworkName and IPAddresses.\n      // Results are groupes by NetworkPort. Then all IPs are concatenated by comma as separator.\n\n      if (count($joincrit) === 3) {\n         $andcrit = array_pop($joincrit);\n         $andcrit['AND']['PORT_1.is_deleted'] = 0;\n         $joincrit[] = $andcrit;\n      } else {\n         $joincrit[]['AND']['PORT_1.is_deleted'] = 0;\n      }\n\n      $criteria = [\n         'SELECT'       => array_merge([\n            'PORT_1.itemtype AS itemtype_1',\n            'PORT_1.items_id AS items_id_1',\n            'PORT_1.id AS id_1',\n            'PORT_1.name AS port_1',\n            'PORT_1.mac AS mac_1',\n            'PORT_1.logical_number AS logical_1',\n            new QueryExpression('GROUP_CONCAT(' . $DB->quoteName('ADDR_1.name') . ' SEPARATOR ' . $DB->quote(',') . ') AS ' . $DB->quoteName('ip_1')),\n            'PORT_2.itemtype AS itemtype_2',\n            'PORT_2.items_id AS items_id_2',\n            'PORT_2.id AS id_2',\n            'PORT_2.name AS port_2',\n            'PORT_2.mac AS mac_2',\n            new QueryExpression('GROUP_CONCAT(' . $DB->quoteName('ADDR_2.name') .' SEPARATOR ' . $DB->quote(',') . ') AS ' . $DB->quoteName('ip_2'))\n         ], $select),\n         'FROM'         => $from,\n         'INNER JOIN'   => $innerjoin + [\n            'glpi_networkports AS PORT_1' => [\n               'ON' => $joincrit\n            ]\n         ],\n         'LEFT JOIN'    => [\n            'glpi_networknames AS NAME_1' => [\n               'ON'  => [\n                  'PORT_1' => 'id',\n                  'NAME_1' => 'items_id', [\n                     'AND'    => [\n                        'NAME_1.itemtype'    => 'NetworkPort',\n                        'NAME_1.is_deleted'  => 0\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_ipaddresses AS ADDR_1'  => [\n               'ON'  => [\n                  'NAME_1' => 'id',\n                  'ADDR_1' => 'items_id', [\n                     'AND'    => [\n                        'ADDR_1.itemtype'    => 'NetworkName',\n                        'ADDR_1.is_deleted'  => 0\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_networkports_networkports AS LINK'  => [\n               'ON'  =>[\n                  'LINK'   => 'networkports_id_1',\n                  'PORT_1' => 'id', [\n                     'OR'     => [\n                        'LINK.networkports_id_2'   => new QueryExpression($DB->quoteName('PORT_1.id'))\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_networkports AS PORT_2' => [\n               'ON'  => [\n                  'PORT_2' => 'id',\n                  new QueryExpression(\n                     'IF(' . $DB->quoteName('LINK.networkports_id_1') . ' = ' . $DB->quoteName('PORT_1.id') . ', ' .\n                        $DB->quoteName('LINK.networkports_id_2') . ', ' .\n                        $DB->quoteName('LINK.networkports_id_1') . ')'\n                  )\n               ]\n            ],\n            'glpi_networknames AS NAME_2' => [\n               'ON'  => [\n                  'PORT_2' => 'id',\n                  'NAME_2' => 'items_id', [\n                     'AND'    => [\n                        'NAME_2.itemtype'     => 'NetworkPort',\n                        'NAME_2.is_deleted'   => 0\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_ipaddresses AS ADDR_2'  => [\n               'ON'  => [\n                  'NAME_2' => 'id',\n                  'ADDR_2' => 'items_id', [\n                     'AND'    => [\n                        'ADDR_2.itemtype'    => 'NetworkName',\n                        'ADDR_2.is_deleted'  => 0\n                     ]\n                  ]\n               ]\n            ]\n         ] + $leftjoin,\n         'WHERE'        => $where,\n         'GROUPBY'      => ['PORT_1.id']\n      ];\n\n      if (count($order)) {\n         $criteria['ORDER'] = $order;\n      }\n\n      $iterator = $DB->request($criteria);\n\n      if (count($iterator)) {\n         echo \"<table class='tab_cadre_fixehov'>\";\n         echo \"<tr>\";\n         if (!empty($extra)) {\n            echo \"<td>&nbsp;</td>\";\n         }\n         echo \"<th colspan='5'>\".__('Device 1').\"</th>\";\n         echo \"<th colspan='5'>\".__('Device 2').\"</th>\";\n         echo \"</tr>\\n\";\n\n         echo \"<tr>\";\n         if (!empty($extra)) {\n            echo \"<th>$extra</th>\";\n         }\n         echo \"<th>\"._n('Device type', 'Device types', 1).\"</th>\";\n         echo \"<th>\".__('Device name').\"</th>\";\n         echo \"<th>\".__('Port Number').\"</th>\";\n         echo \"<th>\".NetworkPort::getTypeName(1).\"</th>\";\n         echo \"<th>\".__('MAC address').\"</th>\";\n         echo \"<th>\".IPAddress::getTypeName(0).\"</th>\";\n         echo \"<th>\".NetworkPort::getTypeName(1).\"</th>\";\n         echo \"<th>\".__('MAC address').\"</th>\";\n         echo \"<th>\".IPAddress::getTypeName(0).\"</th>\";\n         echo \"<th>\"._n('Device type', 'Device types', 1).\"</th>\";\n         echo \"<th>\".__('Device name').\"</th>\";\n         echo \"</tr>\\n\";\n\n         while ($line = $iterator->next()) {\n            echo \"<tr class='tab_bg_1'>\";\n\n            // To ensure that the NetworkEquipment remain the first item, we test its type\n            if ($line['itemtype_2'] == 'NetworkEquipment') {\n               $idx = 2;\n            } else {\n               $idx = 1;\n            }\n\n            if (!empty($extra)) {\n               echo \"<td>\".(empty($line['extra']) ? NOT_AVAILABLE : $line['extra']).\"</td>\";\n            }\n\n            $itemtype = $line[\"itemtype_$idx\"];\n            if (!empty($itemtype)) {\n               echo \"<td>\".$itemtype::getTypeName(1).\"</td>\";\n               $item_name = '';\n               if ($item = getItemForItemtype($itemtype)) {\n                  if ($item->getFromDB($line[\"items_id_$idx\"])) {\n                     $item_name = $item->getName();\n                  }\n               }\n               echo \"<td>\".(empty($item_name) ? NOT_AVAILABLE : $item_name).\"</td>\";\n            } else {\n               echo \"<td> \".NOT_AVAILABLE.\" </td>\";\n               echo \"<td> \".NOT_AVAILABLE.\" </td>\";\n            }\n            echo \"<td>\".(empty($line[\"logical_$idx\"]) ? NOT_AVAILABLE : $line[\"logical_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"port_$idx\"]) ? NOT_AVAILABLE : $line[\"port_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"mac_$idx\"]) ? NOT_AVAILABLE : $line[\"mac_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"ip_$idx\"]) ? NOT_AVAILABLE : $line[\"ip_$idx\"]).\"</td>\";\n\n            if ($idx == 1) {\n               $idx = 2;\n            } else {\n               $idx = 1;\n            }\n\n            echo \"<td>\".(empty($line[\"port_$idx\"]) ? NOT_AVAILABLE : $line[\"port_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"mac_$idx\"]) ? NOT_AVAILABLE : $line[\"mac_$idx\"]).\"</td>\";\n            echo \"<td>\".(empty($line[\"ip_$idx\"]) ? NOT_AVAILABLE : $line[\"ip_$idx\"]).\"</td>\";\n            $itemtype = $line[\"itemtype_$idx\"];\n            if (!empty($itemtype)) {\n               echo \"<td>\".$itemtype::getTypeName(1).\"</td>\";\n               $item_name = '';\n               if ($item = getItemForItemtype($itemtype)) {\n                  if ($item->getFromDB($line[\"items_id_$idx\"])) {\n                     $item_name = $item->getName();\n                  }\n               }\n               echo \"<td>\".(empty($item_name) ? NOT_AVAILABLE : $item_name).\"</td>\";\n            } else {\n               echo \"<td> \".NOT_AVAILABLE.\" </td>\";\n               echo \"<td> \".NOT_AVAILABLE.\" </td>\";\n            }\n\n            echo \"</tr>\\n\";\n         }\n         echo \"</table><br><hr><br>\";\n      }\n   }\n\n\n   /**\n    * @since 0.85\n    *\n    * @see commonDBTM::getRights()\n   **/\n   function getRights($interface = 'central') {\n\n      $values = [ READ => __('Read')];\n      return $values;\n   }\n\n\n   static function getIcon() {\n      return \"fas fa-file-medical-alt\";\n   }\n\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units;\n\n/* Test for inc/dbmysql.class.php */\n\nclass DB extends \\GLPITestCase {\n\n   public function testTableExist() {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->boolean($this->testedInstance->tableExists('glpi_configs'))->isTrue()\n            ->boolean($this->testedInstance->tableExists('fakeTable'))->isFalse();\n   }\n\n   public function testFieldExists() {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->boolean($this->testedInstance->fieldExists('glpi_configs', 'id'))->isTrue()\n            ->boolean($this->testedInstance->fieldExists('glpi_configs', 'ID'))->isFalse()\n            ->boolean($this->testedInstance->fieldExists('glpi_configs', 'fakeField'))->isFalse()\n            ->when(\n               function () {\n                  $this->boolean($this->testedInstance->fieldExists('fakeTable', 'id'))->isFalse();\n               }\n            )->error\n               ->withType(E_USER_WARNING)\n               ->exists()\n            ->when(\n               function () {\n                  $this->boolean($this->testedInstance->fieldExists('fakeTable', 'fakeField'))->isFalse();\n               }\n            )->error\n               ->withType(E_USER_WARNING)\n               ->exists();\n   }\n\n   protected function dataName() {\n      return [\n         ['field', '`field`'],\n         ['`field`', '`field`'],\n         ['*', '*'],\n         ['table.field', '`table`.`field`'],\n         ['table.*', '`table`.*'],\n         ['field AS f', '`field` AS `f`'],\n         ['field as f', '`field` AS `f`'],\n         ['table.field as f', '`table`.`field` AS `f`'],\n      ];\n   }\n\n   /**\n    * @dataProvider dataName\n    */\n   public function testQuoteName($raw, $quoted) {\n      $this->string(\\DB::quoteName($raw))->isIdenticalTo($quoted);\n   }\n\n   protected function dataValue() {\n      return [\n         ['foo', \"'foo'\"],\n         ['bar', \"'bar'\"],\n         ['42', \"'42'\"],\n         ['+33', \"'+33'\"],\n         [null, 'NULL'],\n         ['null', 'NULL'],\n         ['NULL', 'NULL'],\n         [new \\QueryExpression('`field`'), '`field`'],\n         ['`field', \"'`field'\"]\n      ];\n   }\n\n   /**\n    * @dataProvider dataValue\n    */\n   public function testQuoteValue($raw, $expected) {\n      $this->string(\\DB::quoteValue($raw))->isIdenticalTo($expected);\n   }\n\n\n   protected function dataInsert() {\n      return [\n         [\n            'table', [\n               'field'  => 'value',\n               'other'  => 'doe'\n            ],\n            'INSERT INTO `table` (`field`, `other`) VALUES (\\'value\\', \\'doe\\')'\n         ], [\n            '`table`', [\n               '`field`'  => 'value',\n               '`other`'  => 'doe'\n            ],\n            'INSERT INTO `table` (`field`, `other`) VALUES (\\'value\\', \\'doe\\')'\n         ], [\n            'table', [\n               'field'  => new \\QueryParam(),\n               'other'  => new \\QueryParam()\n            ],\n            'INSERT INTO `table` (`field`, `other`) VALUES (?, ?)'\n         ], [\n            'table', [\n               'field'  => new \\QueryParam('field'),\n               'other'  => new \\QueryParam('other')\n            ],\n            'INSERT INTO `table` (`field`, `other`) VALUES (:field, :other)'\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider dataInsert\n    */\n   public function testBuildInsert($table, $values, $expected) {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->buildInsert($table, $values))->isIdenticalTo($expected);\n   }\n\n   protected function dataUpdate() {\n      return [\n         [\n            'table', [\n               'field'  => 'value',\n               'other'  => 'doe'\n            ], [\n               'id'  => 1\n            ],\n            'UPDATE `table` SET `field` = \\'value\\', `other` = \\'doe\\' WHERE `id` = \\'1\\''\n         ], [\n            'table', [\n               'field'  => 'value'\n            ], [\n               'id'  => [1, 2]\n            ],\n            'UPDATE `table` SET `field` = \\'value\\' WHERE `id` IN (\\'1\\', \\'2\\')'\n         ], [\n            'table', [\n               'field'  => 'value'\n            ], [\n               'NOT'  => ['id' => [1, 2]]\n            ],\n            'UPDATE `table` SET `field` = \\'value\\' WHERE  NOT (`id` IN (\\'1\\', \\'2\\'))'\n         ], [\n            'table', [\n               'field'  => new \\QueryParam()\n            ], [\n               'NOT' => ['id' => [new \\QueryParam(), new \\QueryParam()]]\n            ],\n            'UPDATE `table` SET `field` = ? WHERE  NOT (`id` IN (?, ?))'\n         ], [\n            'table', [\n               'field'  => new \\QueryParam('field')\n            ], [\n               'NOT' => ['id' => [new \\QueryParam('idone'), new \\QueryParam('idtwo')]]\n            ],\n            'UPDATE `table` SET `field` = :field WHERE  NOT (`id` IN (:idone, :idtwo))'\n         ], [\n            'table', [\n               'field'  => new \\QueryExpression(\\DB::quoteName('field') . ' + 1')\n            ], [\n               'id'  => [1, 2]\n            ],\n            'UPDATE `table` SET `field` = `field` + 1 WHERE `id` IN (\\'1\\', \\'2\\')'\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider dataUpdate\n    */\n   public function testBuildUpdate($table, $values, $where, $expected) {\n       $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->buildUpdate($table, $values, $where))->isIdenticalTo($expected);\n   }\n\n   public function testBuildUpdateWException() {\n      $this->exception(\n         function() {\n            $this\n               ->if($this->newTestedInstance)\n               ->then\n                  ->string($this->testedInstance->buildUpdate('table', ['a' => 'b'], []))->isIdenticalTo('');\n         }\n      )->hasMessage('Cannot run an UPDATE query without WHERE clause!');\n   }\n\n   protected function dataDelete() {\n      return [\n         [\n            'table', [\n               'id'  => 1\n            ],\n            'DELETE `table` FROM `table` WHERE `id` = \\'1\\''\n         ], [\n            'table', [\n               'id'  => [1, 2]\n            ],\n            'DELETE `table` FROM `table` WHERE `id` IN (\\'1\\', \\'2\\')'\n         ], [\n            'table', [\n               'NOT'  => ['id' => [1, 2]]\n            ],\n            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (\\'1\\', \\'2\\'))'\n         ], [\n            'table', [\n               'NOT'  => ['id' => [new \\QueryParam(), new \\QueryParam()]]\n            ],\n            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (?, ?))'\n         ], [\n            'table', [\n               'NOT'  => ['id' => [new \\QueryParam('idone'), new \\QueryParam('idtwo')]]\n            ],\n            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (:idone, :idtwo))'\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider dataDelete\n    */\n   public function testBuildDelete($table, $where, $expected) {\n       $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->buildDelete($table, $where))->isIdenticalTo($expected);\n   }\n\n   public function testBuildDeleteWException() {\n      $this->exception(\n         function() {\n            $this\n               ->if($this->newTestedInstance)\n               ->then\n                  ->string($this->testedInstance->buildDelete('table', []))->isIdenticalTo('');\n         }\n      )->hasMessage('Cannot run an DELETE query without WHERE clause!');\n   }\n\n   public function testListTables() {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->given($tables = $this->testedInstance->listTables())\n            ->object($tables)\n               ->isInstanceOf(\\DBmysqlIterator::class)\n            ->integer(count($tables))\n               ->isGreaterThan(100)\n            ->given($tables = $this->testedInstance->listTables('glpi_configs'))\n            ->object($tables)\n               ->isInstanceOf(\\DBmysqlIterator::class)\n               ->hasSize(1);\n\n   }\n\n   public function testTablesHasItemtype() {\n      $dbu = new \\DbUtils();\n      $this->newTestedInstance();\n      $list = $this->testedInstance->listTables();\n      $this->object($list)->isInstanceOf(\\DBmysqlIterator::class);\n      $this->integer(count($list))->isGreaterThan(200);\n\n      //check if each table has a corresponding itemtype\n      while ($line = $list->next()) {\n         $this->array($line)\n            ->hasSize(1);\n         $table = $line['TABLE_NAME'];\n         if ($table == 'glpi_appliancerelations') {\n            //FIXME temporary hack for unit tests\n            continue;\n         }\n         $type = $dbu->getItemTypeForTable($table);\n\n         $this->object($item = $dbu->getItemForItemtype($type))->isInstanceOf('CommonDBTM', $table);\n         $this->string(get_class($item))->isIdenticalTo($type);\n         $this->string($dbu->getTableForItemType($type))->isIdenticalTo($table);\n      }\n   }\n\n   public function testEscape() {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->escape('nothing to do'))->isIdenticalTo('nothing to do')\n            ->string($this->testedInstance->escape(\"shoul'be escaped\"))->isIdenticalTo(\"shoul\\\\'be escaped\")\n            ->string($this->testedInstance->escape(\"First\\nSecond\"))->isIdenticalTo(\"First\\\\nSecond\")\n            ->string($this->testedInstance->escape(\"First\\rSecond\"))->isIdenticalTo(\"First\\\\rSecond\")\n            ->string($this->testedInstance->escape('Hi, \"you\"'))->isIdenticalTo('Hi, \\\\\"you\\\\\"');\n   }\n\n   protected function commentsProvider() {\n      return [\n         [\n            'sql' => \"SQL EXPRESSION;\n/* Here begins a\n   multiline comment */\nOTHER EXPRESSION;\n\",\n            'expected'  => \"SQL EXPRESSION;\nOTHER EXPRESSION;\"\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider commentsProvider\n    */\n   public function testRemoveSqlComments($sql, $expected) {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->removeSqlComments($sql))->isIdenticalTo($expected);\n   }\n\n   /**\n    * Sql expressions provider\n    */\n   protected function sqlProvider () {\n      return array_merge([\n         [\n            'sql'       => \"SQL;\\n-- comment;\\n\\nSQL2;\",\n            'expected'  => \"SQL;\\n\\nSQL2;\"\n         ]\n      ], $this->commentsProvider());\n   }\n\n   /**\n    * @dataProvider sqlProvider\n    */\n   public function testRemoveSqlRemarks($sql, $expected) {\n      $this\n         ->if($this->newTestedInstance)\n         ->then\n            ->string($this->testedInstance->removeSqlRemarks($sql))->isIdenticalTo($expected);\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units;\n\nuse DbTestCase;\nuse Monolog\\Logger;\nuse Monolog\\Handler\\TestHandler;\n\n// Generic test classe, to be extended for CommonDBTM Object\n\nclass DBmysqlIterator extends DbTestCase {\n\n   private $it;\n\n   public function beforeTestMethod($method) {\n      parent::beforeTestMethod($method);\n      $this->it = new \\DBmysqlIterator(null);\n   }\n\n   public function testQuery() {\n      $req = 'SELECT Something FROM Somewhere';\n      $it = $this->it->execute($req);\n      $this->string($it->getSql())->isIdenticalTo($req);\n\n      $req = 'SELECT @@sql_mode as mode';\n      $it = $this->it->execute($req);\n      $this->string($it->getSql())->isIdenticalTo($req);\n   }\n\n\n   public function testSqlError() {\n      global $DB;\n\n      $this->exception(\n         function () use ($DB) {\n            $DB->request('fakeTable');\n         }\n      )\n         ->isInstanceOf('GlpitestSQLerror')\n         ->message\n            ->contains(\"fakeTable' doesn't exist\");\n   }\n\n\n   public function testOnlyTable() {\n\n      $it = $this->it->execute('foo');\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute('`foo`');\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute(['foo', '`bar`']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`, `bar`');\n   }\n\n\n   /**\n    * This is really an error, no table but a WHERE clase\n    */\n   public function testNoTableWithWhere() {\n      $this->when(\n         function () {\n            $it = $this->it->execute('', ['foo' => 1]);\n            $this->string($it->getSql())->isIdenticalTo('SELECT * WHERE `foo` = \\'1\\'');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing table name')\n         ->exists();\n   }\n\n\n   /**\n    * Temporarily, this is an error, will be allowed later\n    */\n   public function testNoTableWithoutWhere() {\n      $this->when(\n         function () {\n            $it = $this->it->execute('');\n            $this->string($it->getSql())->isIdenticalTo('SELECT *');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing table name')\n         ->exists();\n   }\n\n\n   /**\n    * Temporarily, this is an error, will be allowed later\n    */\n   public function testNoTableWithoutWhereBis() {\n      $this->when(\n         function () {\n            $it = $this->it->execute(['FROM' => []]);\n            $this->string('SELECT *', $it->getSql(), 'No table');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing table name')\n         ->exists();\n\n   }\n\n\n   public function testDebug() {\n      global $SQLLOGGER;\n\n      foreach ($SQLLOGGER->getHandlers() as $handler) {\n         if ($handler instanceof TestHandler) {\n            break;\n         }\n      }\n\n      //clean from previous queries\n      $handler->clear();\n      define('GLPI_SQL_DEBUG', true);\n\n      $id = mt_rand();\n      $this->it->execute('foo', ['FIELDS' => 'name', 'id = ' . $id]);\n\n      $this->array($handler->getRecords())->hasSize(1);\n      $this->boolean(\n         $handler->hasRecordThatContains(\n            'Generated query: SELECT `name` FROM `foo` WHERE (id = ' . $id . ')',\n            Logger::DEBUG\n         )\n      )->isTrue();\n   }\n\n\n   public function testFields() {\n      $it = $this->it->execute('foo', ['FIELDS' => 'bar', 'DISTINCT' => true]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT DISTINCT `bar` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['bar', 'baz'], 'DISTINCT' => true]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT DISTINCT `bar`, `baz` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => 'bar']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `bar` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['bar', '`baz`']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `bar`, `baz` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['b' => 'bar']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `b`.`bar` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['b' => 'bar', '`c`' => '`baz`']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `b`.`bar`, `c`.`baz` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['a' => ['`bar`', 'baz']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `a`.`bar`, `a`.`baz` FROM `foo`');\n\n      $it = $this->it->execute(['foo', 'bar'], ['FIELDS' => ['foo' => ['*']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.* FROM `foo`, `bar`');\n\n      $it = $this->it->execute(['foo', 'bar'], ['FIELDS' => ['foo.*']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.* FROM `foo`, `bar`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['SUM' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT SUM(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['AVG' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT AVG(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['MIN' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT MIN(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['MAX' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT MAX(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => new \\QueryExpression('IF(bar IS NOT NULL, 1, 0) AS baz')]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT IF(bar IS NOT NULL, 1, 0) AS baz FROM `foo`');\n   }\n\n   public function testFrom() {\n      $this->it->buildQuery(['FIELDS' => 'bar', 'FROM' => 'foo']);\n      $this->string($this->it->getSql())->isIdenticalTo('SELECT `bar` FROM `foo`');\n\n      $this->it->buildQuery(['FIELDS' => 'bar', 'FROM' => 'foo as baz']);\n      $this->string($this->it->getSql())->isIdenticalTo('SELECT `bar` FROM `foo` AS `baz`');\n\n      $this->it->buildQuery(['FIELDS' => 'bar', 'FROM' => ['foo', 'baz']]);\n      $this->string($this->it->getSql())->isIdenticalTo('SELECT `bar` FROM `foo`, `baz`');\n\n      $this->it->buildQuery(['FIELDS' => 'c', 'FROM' => new \\QueryExpression(\"(SELECT CONCAT('foo', 'baz') as c) as t\")]);\n      $this->string($this->it->getSql())->isIdenticalTo(\"SELECT `c` FROM (SELECT CONCAT('foo', 'baz') as c) as t\");\n   }\n\n\n   public function testOrder() {\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar`');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar`');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => '`baz`']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `baz`');\n\n      $it = $this->it->execute('foo', ['ORDER' => '`baz`']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `baz`');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` ASC');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` ASC');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar DESC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` DESC');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar DESC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` DESC');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => ['`a`', 'b ASC', 'c DESC']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `a`, `b` ASC, `c` DESC');\n\n      $it = $this->it->execute('foo', ['ORDER' => ['`a`', 'b ASC', 'c DESC']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `a`, `b` ASC, `c` DESC');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar, baz ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar`, `baz` ASC');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar, baz ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar`, `baz` ASC');\n\n      $it = $this->it->execute('foo', ['ORDERBY' => 'bar DESC, baz ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` DESC, `baz` ASC');\n\n      $it = $this->it->execute('foo', ['ORDER' => 'bar DESC, baz ASC']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` ORDER BY `bar` DESC, `baz` ASC');\n\n      $it = $this->it->execute('foo', ['ORDER' => new \\QueryExpression(\"CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\")]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` ORDER BY CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\");\n\n      $it = $this->it->execute('foo', ['ORDER' => [new \\QueryExpression(\"CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\"), 'bar ASC']]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` ORDER BY CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END, `bar` ASC\");\n\n      $it = $this->it->execute('foo', ['ORDER' => [new \\QueryExpression(\"CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\"), 'bar ASC, baz DESC']]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` ORDER BY CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END, `bar` ASC, `baz` DESC\");\n\n      $it = $this->it->execute('foo', ['ORDER' => [new \\QueryExpression(\"CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END\"), 'bar ASC', 'baz DESC']]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` ORDER BY CASE WHEN `foo` LIKE 'test%' THEN 0 ELSE 1 END, `bar` ASC, `baz` DESC\");\n\n      $this->when(\n         function () {\n            $it = $this->it->execute('foo', ['ORDER' => [new \\stdClass]]);\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Invalid order clause')\n         ->exists();\n   }\n\n\n   public function testCount() {\n      $it = $this->it->execute('foo', ['COUNT' => 'cpt']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(*) AS cpt FROM `foo`');\n\n      $it = $this->it->execute('foo', ['COUNT' => 'cpt', 'SELECT' => 'bar', 'DISTINCT' => true]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT `bar`) AS cpt FROM `foo`');\n\n      $it = $this->it->execute('foo', ['COUNT' => 'cpt', 'FIELDS' => ['name', 'version']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(*) AS cpt, `name`, `version` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT' => 'bar']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(`bar`) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT' => 'bar AS cpt']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(`bar`) AS `cpt` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['foo.bar', 'COUNT' => 'foo.baz']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.`bar`, COUNT(`foo`.`baz`) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT' => ['bar', 'baz']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(`bar`), COUNT(`baz`) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT' => ['bar AS cpt', 'baz AS cpt2']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(`bar`) AS `cpt`, COUNT(`baz`) AS `cpt2` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['foo.bar', 'COUNT' => ['foo.baz', 'foo.qux']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.`bar`, COUNT(`foo`.`baz`), COUNT(`foo`.`qux`) FROM `foo`');\n   }\n\n   public function testCountDistinct() {\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT DISTINCT' => 'bar']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT(`bar`)) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT DISTINCT' => ['bar', 'baz']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT(`bar`)), COUNT(DISTINCT(`baz`)) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['COUNT DISTINCT' => ['bar AS cpt', 'baz AS cpt2']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT(`bar`)) AS `cpt`, COUNT(DISTINCT(`baz`)) AS `cpt2` FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['foo.bar', 'COUNT DISTINCT' => ['foo.baz', 'foo.qux']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `foo`.`bar`, COUNT(DISTINCT(`foo`.`baz`)), COUNT(DISTINCT(`foo`.`qux`)) FROM `foo`');\n\n      $it = $this->it->execute('foo', ['FIELDS' => 'bar', 'COUNT' => 'cpt', 'DISTINCT' => true]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT COUNT(DISTINCT `bar`) AS cpt FROM `foo`');\n\n      $this->when(\n         function () {\n            $it = $this->it->execute('foo', ['COUNT' => 'cpt', 'DISTINCT' => true]);\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage(\"With COUNT and DISTINCT, you must specify exactly one field, or use 'COUNT DISTINCT'\")\n         ->exists();\n   }\n\n\n   public function testJoins() {\n      $it = $this->it->execute('foo', ['LEFT JOIN' => []]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute('foo', ['LEFT JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      //old JOIN alias for LEFT JOIN\n      $it = $this->it->execute('foo', ['JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $it = $this->it->execute('foo', ['LEFT JOIN' => [['TABLE' => 'bar', 'FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $it = $this->it->execute('foo', ['LEFT JOIN' => ['bar' => ['ON' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $it = $this->it->execute(\n         'foo', [\n            'LEFT JOIN' => [\n               'bar' => [\n                  'FKEY' => [\n                     'bar' => 'id',\n                     'foo' => 'fk'\n                  ]\n               ],\n               'baz' => [\n                  'FKEY' => [\n                     'baz' => 'id',\n                     'foo' => 'baz_id'\n                  ]\n               ]\n            ]\n         ]\n      );\n      $this->string($it->getSql())->isIdenticalTo(\n         'SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`) '.\n         'LEFT JOIN `baz` ON (`baz`.`id` = `foo`.`baz_id`)'\n      );\n\n      $it = $this->it->execute('foo', ['INNER JOIN' => []]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute('foo', ['INNER JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` INNER JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $it = $this->it->execute('foo', ['RIGHT JOIN' => []]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`');\n\n      $it = $this->it->execute('foo', ['RIGHT JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` RIGHT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $this->exception(\n         function() {\n            $it = $this->it->execute('foo', ['LEFT JOIN' => ['ON' => ['a' => 'id', 'b' => 'a_id']]]);\n         }\n      )\n         ->isInstanceOf('RuntimeException')\n         ->hasMessage('BAD JOIN');\n\n      $this->when(\n         function () {\n            $it = $this->it->execute('foo', ['LEFT JOIN' => 'bar']);\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('BAD JOIN, value must be [ table => criteria ]')\n         ->exists();\n\n      $this->when(\n         function () {\n            $it = $this->it->execute('foo', ['INNER JOIN' => ['bar' => ['FKEY' => 'akey']]]);\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('BAD FOREIGN KEY, should be [ table1 => key1, table2 => key2 ] or [ table1 => key1, table2 => key2, [criteria]]')\n         ->exists();\n\n      //test conditions\n      $it = $this->it->execute(\n         'foo', [\n            'LEFT JOIN' => [\n               'bar' => [\n                  'FKEY' => [\n                     'bar' => 'id',\n                     'foo' => 'fk', [\n                        'OR'  => ['field' => ['>', 20]]\n                     ]\n                  ]\n               ]\n            ]\n         ]\n      );\n      $this->string($it->getSql())->isIdenticalTo(\n         'SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk` OR `field` > \\'20\\')'\n      );\n\n      $it = $this->it->execute(\n         'foo', [\n            'LEFT JOIN' => [\n               'bar' => [\n                  'FKEY' => [\n                     'bar' => 'id',\n                     'foo' => 'fk', [\n                        'AND'  => ['field' => 42]\n                     ]\n                  ]\n               ]\n            ]\n         ]\n      );\n      $this->string($it->getSql())->isIdenticalTo(\n         'SELECT * FROM `foo` LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk` AND `field` = \\'42\\')'\n      );\n\n      //test derived table in JOIN statement\n      $it = $this->it->execute(\n         'foo', [\n            'LEFT JOIN' => [\n               [\n                  'TABLE'  => new \\QuerySubQuery(['FROM' => 'bar'], 't2'),\n                  'FKEY'   => [\n                     't2'  => 'id',\n                     'foo' => 'fk'\n                  ]\n               ]\n            ]\n         ]\n      );\n      $this->string($it->getSql())->isIdenticalTo(\n         'SELECT * FROM `foo` LEFT JOIN (SELECT * FROM `bar`) AS `t2` ON (`t2`.`id` = `foo`.`fk`)'\n      );\n\n   }\n\n   public function testAnalyseJoins() {\n      $join = $this->it->analyseJoins(['LEFT JOIN' => ['bar' => ['FKEY' => ['bar' => 'id', 'foo' => 'fk']]]]);\n      $this->string($join)->isIdenticalTo(' LEFT JOIN `bar` ON (`bar`.`id` = `foo`.`fk`)');\n\n      $this->exception(\n         function() {\n            $it = $this->it->analyseJoins(['LEFT OUTER JOIN' => ['ON' => ['a' => 'id', 'b' => 'a_id']]]);\n         }\n      )\n         ->isInstanceOf('RuntimeException')\n         ->hasMessage('BAD JOIN');\n   }\n\n   public function testHaving() {\n      $it = $this->it->execute('foo', ['HAVING' => ['bar' => 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` HAVING `bar` = \\'1\\'');\n\n      $it = $this->it->execute('foo', ['HAVING' => ['bar' => ['>', 0]]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` HAVING `bar` > \\'0\\'');\n   }\n\n\n\n   public function testOperators() {\n      $it = $this->it->execute('foo', ['a' => 1]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` = \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['=', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` = \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['>', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` > \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['LIKE', '%bar%']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` LIKE \\'%bar%\\'');\n\n      $it = $this->it->execute('foo', ['NOT' => ['a' => ['LIKE', '%bar%']]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE NOT (`a` LIKE \\'%bar%\\')');\n\n      $it = $this->it->execute('foo', ['a' => ['NOT LIKE', '%bar%']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` NOT LIKE \\'%bar%\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['<>', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` <> \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['&', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` & \\'1\\'');\n\n      $it = $this->it->execute('foo', ['a' => ['|', 1]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `a` | \\'1\\'');\n   }\n\n\n   public function testWhere() {\n      $it = $this->it->execute('foo', 'id=1');\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE id=1');\n\n      $it = $this->it->execute('foo', ['WHERE' => ['bar' => null]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` IS NULL');\n\n      $it = $this->it->execute('foo', ['bar' => null]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` IS NULL');\n\n      $it = $this->it->execute('foo', ['`bar`' => null]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` IS NULL');\n\n      $it = $this->it->execute('foo', ['bar' => 1]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = \\'1\\'');\n\n      $this->exception(\n         function() {\n            $it = $this->it->execute('foo', ['bar' => []]);\n         }\n      )\n         ->isInstanceOf('RuntimeException')\n         ->hasMessage('Empty IN are not allowed');\n\n      $it = $this->it->execute('foo', ['bar' => [1, 2, 4]]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` IN ('1', '2', '4')\");\n\n      $it = $this->it->execute('foo', ['bar' => ['a', 'b', 'c']]);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` IN ('a', 'b', 'c')\");\n\n      $it = $this->it->execute('foo', ['bar' => 'val']);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` = 'val'\");\n\n      $it = $this->it->execute('foo', ['bar' => new \\QueryExpression('`field`')]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = `field`');\n\n      $it = $this->it->execute('foo', ['bar' => '?']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = \\'?\\'');\n\n      $it = $this->it->execute('foo', ['bar' => new \\QueryParam()]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = ?');\n\n      $it = $this->it->execute('foo', ['bar' => new \\QueryParam('myparam')]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE `bar` = :myparam');\n   }\n\n\n   public function testFkey() {\n\n      $it = $this->it->execute(['foo', 'bar'], ['FKEY' => ['id', 'fk']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`, `bar` WHERE `id` = `fk`');\n\n      $it = $this->it->execute(['foo', 'bar'], ['FKEY' => ['foo' => 'id', 'bar' => 'fk']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`, `bar` WHERE `foo`.`id` = `bar`.`fk`');\n\n      $it = $this->it->execute(['foo', 'bar'], ['FKEY' => ['`foo`' => 'id', 'bar' => '`fk`']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo`, `bar` WHERE `foo`.`id` = `bar`.`fk`');\n   }\n\n   public function testGroupBy() {\n\n      $it = $this->it->execute(['foo'], ['GROUPBY' => ['id']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`');\n\n      $it = $this->it->execute(['foo'], ['GROUP' => ['id']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`');\n\n      $it = $this->it->execute(['foo'], ['GROUPBY' => 'id']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`');\n\n      $it = $this->it->execute(['foo'], ['GROUP' => 'id']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`');\n\n      $it = $this->it->execute(['foo'], ['GROUPBY' => ['id', 'name']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`, `name`');\n\n      $it = $this->it->execute(['foo'], ['GROUP' => ['id', 'name']]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` GROUP BY `id`, `name`');\n   }\n\n   public function testNoFieldGroupBy() {\n      $this->when(\n         function () {\n            $it = $this->it->execute(['foo'], ['GROUPBY' => []]);\n            $this->string('SELECT * FROM `foo`', $it->getSql(), 'No group by field');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing group by field')\n         ->exists();\n\n      $this->when(\n         function () {\n            $it = $this->it->execute(['foo'], ['GROUP' => []]);\n            $this->string('SELECT * FROM `foo`', $it->getSql(), 'No group by field');\n         }\n      )->error()\n         ->withType(E_USER_ERROR)\n         ->withMessage('Missing group by field')\n         ->exists();\n\n   }\n\n   public function testRange() {\n\n      $it = $this->it->execute('foo', ['START' => 5, 'LIMIT' => 10]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` LIMIT 10 OFFSET 5');\n   }\n\n\n   public function testLogical() {\n      $it = $this->it->execute(['foo'], [['a' => 1, 'b' => 2]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE (`a` = \\'1\\' AND `b` = \\'2\\')');\n\n      $it = $this->it->execute(['foo'], ['AND' => ['a' => 1, 'b' => 2]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE (`a` = \\'1\\' AND `b` = \\'2\\')');\n\n      $it = $this->it->execute(['foo'], ['OR' => ['a' => 1, 'b' => 2]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE (`a` = \\'1\\' OR `b` = \\'2\\')');\n\n      $it = $this->it->execute(['foo'], ['NOT' => ['a' => 1, 'b' => 2]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE NOT (`a` = \\'1\\' AND `b` = \\'2\\')');\n\n      $crit = [\n         'WHERE' => [\n            'OR' => [\n               [\n                  'items_id' => 15,\n                  'itemtype' => 'Computer'\n               ],\n               [\n                  'items_id' => 3,\n                  'itemtype' => 'Document'\n               ],\n            ],\n         ],\n      ];\n      $sql = \"SELECT * FROM `foo` WHERE ((`items_id` = '15' AND `itemtype` = 'Computer') OR (`items_id` = '3' AND `itemtype` = 'Document'))\";\n      $it = $this->it->execute(['foo'], $crit);\n      $this->string($it->getSql())->isIdenticalTo($sql);\n\n      $crit = [\n         'WHERE' => [\n            'a'  => 1,\n            'OR' => [\n               'b'   => 2,\n               'NOT' => [\n                  'c'   => [2, 3],\n                  [\n                     'd' => 4,\n                     'e' => 5,\n                  ],\n               ],\n            ],\n         ],\n      ];\n      $sql = \"SELECT * FROM `foo` WHERE `a` = '1' AND (`b` = '2' OR NOT (`c` IN ('2', '3') AND (`d` = '4' AND `e` = '5')))\";\n      $it = $this->it->execute(['foo'], $crit);\n      $this->string($it->getSql())->isIdenticalTo($sql);\n\n      $crit['FROM'] = 'foo';\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo($sql);\n\n      $crit = [\n         'FROM'   => 'foo',\n         'WHERE'  => [\n            'bar' => 'baz',\n            'RAW' => ['SELECT COUNT(*) FROM xyz' => 5]\n         ]\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` = 'baz' AND ((SELECT COUNT(*) FROM xyz) = '5')\");\n\n      $crit = [\n         'FROM'   => 'foo',\n         'WHERE'  => [\n            'bar' => 'baz',\n            'RAW' => ['SELECT COUNT(*) FROM xyz' => ['>', 2]]\n         ]\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` = 'baz' AND ((SELECT COUNT(*) FROM xyz) > '2')\");\n\n      $crit = [\n         'FROM'   => 'foo',\n         'WHERE'  => [\n            'bar' => 'baz',\n            'RAW' => ['SELECT COUNT(*) FROM xyz' => [3, 4]]\n         ]\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` = 'baz' AND ((SELECT COUNT(*) FROM xyz) IN ('3', '4'))\");\n   }\n\n\n   public function testModern() {\n      $req = [\n         'SELECT' => ['a', 'b'],\n         'FROM'   => 'foo',\n         'WHERE'  => ['c' => 1],\n      ];\n      $sql = \"SELECT `a`, `b` FROM `foo` WHERE `c` = '1'\";\n      $it = $this->it->execute($req);\n      $this->string($it->getSql())->isIdenticalTo($sql);\n   }\n\n\n   public function testRows() {\n      global $DB;\n\n      $it = $this->it->execute('foo');\n      $this->integer($it->numrows())->isIdenticalTo(0);\n      $this->integer(count($it))->isIdenticalTo(0);\n      $this->boolean($it->next())->isFalse();\n\n      $it = $DB->request('glpi_configs', ['context' => 'core', 'name' => 'version']);\n      $this->integer($it->numrows())->isIdenticalTo(1);\n      $this->integer(count($it))->isIdenticalTo(1);\n      $row = $it->next();\n      $key = $it->key();\n      $this->integer($row['id'])->isIdenticalTo($key);\n\n      $it = $DB->request('glpi_configs', ['context' => 'core']);\n      $this->integer($it->numrows())->isGreaterThan(100);\n      $this->integer(count($it))->isGreaterThan(100);\n      $this->boolean($it->numrows() == count($it))->isTrue();\n   }\n\n   public function testKey() {\n      global $DB;\n\n      // test keys with absence of 'id' in select\n      // we should use a incremented position in the first case\n      // see https://github.com/glpi-project/glpi/pull/3401\n      // previously, the first query returned only one result\n      $users_list = iterator_to_array($DB->request([\n         'SELECT' => 'name',\n         'FROM'   => 'glpi_users']));\n      $users_list2 = iterator_to_array($DB->request([\n         'SELECT' =>  ['id', 'name'],\n         'FROM'   => 'glpi_users']));\n      $nb  = count($users_list);\n      $nb2 = count($users_list2);\n      $this->integer($nb)->isEqualTo($nb2);\n   }\n\n   public function testAlias() {\n      $it = $this->it->execute('foo AS f');\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` AS `f`');\n\n      $it = $this->it->execute(['FROM' => 'foo AS f']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` AS `f`');\n\n      $it = $this->it->execute(['SELECT' => ['field AS f'], 'FROM' => 'bar AS b']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `field` AS `f` FROM `bar` AS `b`');\n\n      $it = $this->it->execute(['SELECT' => ['b.field AS f'], 'FROM' => 'bar AS b']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `b`.`field` AS `f` FROM `bar` AS `b`');\n\n      $it = $this->it->execute(['SELECT' => ['id', 'field AS f', 'baz as Z'], 'FROM' => 'bar AS b']);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `id`, `field` AS `f`, `baz` AS `Z` FROM `bar` AS `b`');\n\n      $it = $this->it->execute([\n         'FROM' => 'bar AS b',\n         'INNER JOIN'   => [\n            'foo AS f' => [\n               'FKEY' => [\n                  'b'   => 'fid',\n                  'f'   => 'id'\n               ]\n            ]\n         ]\n      ]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `bar` AS `b` INNER JOIN `foo` AS `f` ON (`b`.`fid` = `f`.`id`)');\n\n      $it = $this->it->execute([\n         'SELECT' => ['id', 'field  AS  f', 'baz as  Z'],\n         'FROM' => 'bar  AS b',\n         'INNER JOIN'   => [\n            'foo AS  f' => [\n               'FKEY' => [\n                  'b'   => 'fid',\n                  'f'   => 'id'\n               ]\n            ]\n         ]\n      ]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `id`, `field` AS `f`, `baz` AS `Z` FROM `bar` AS `b` INNER JOIN `foo` AS `f` ON (`b`.`fid` = `f`.`id`)');\n   }\n\n   public function testExpression() {\n      $it = $this->it->execute('foo', [new \\QueryExpression('a LIKE b')]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT * FROM `foo` WHERE a LIKE b');\n\n      $it = $this->it->execute('foo', ['FIELDS' => ['b' => 'bar', '`c`' => '`baz`', new \\QueryExpression('1 AS `myfield`')]]);\n      $this->string($it->getSql())->isIdenticalTo('SELECT `b`.`bar`, `c`.`baz`, 1 AS `myfield` FROM `foo`');\n   }\n\n   public function testSubQuery() {\n      $crit = ['SELECT' => 'id', 'FROM' => 'baz', 'WHERE' => ['z' => 'f']];\n      $raw_subq = \"(SELECT `id` FROM `baz` WHERE `z` = 'f')\";\n\n      $sub_query =new \\QuerySubQuery($crit);\n      $this->string($sub_query->getQuery())->isIdenticalTo($raw_subq);\n\n      $it = $this->it->execute('foo', ['bar' => $sub_query]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` IN $raw_subq\");\n\n      $it = $this->it->execute('foo', ['bar' => ['<>', $sub_query]]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` <> $raw_subq\");\n\n      $it = $this->it->execute('foo', ['NOT' => ['bar' => $sub_query]]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT * FROM `foo` WHERE NOT (`bar` IN $raw_subq)\");\n\n      $sub_query =new \\QuerySubQuery($crit, 'thesubquery');\n      $this->string($sub_query->getQuery())->isIdenticalTo(\"$raw_subq AS `thesubquery`\");\n\n      $it = $this->it->execute('foo', ['bar' => $sub_query]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT * FROM `foo` WHERE `bar` IN $raw_subq AS `thesubquery`\");\n\n      $it = $this->it->execute([\n         'SELECT' => ['bar', $sub_query],\n         'FROM'   => 'foo'\n      ]);\n      $this->string($it->getSql())\n           ->isIdenticalTo(\"SELECT `bar`, $raw_subq AS `thesubquery` FROM `foo`\");\n   }\n\n   public function testUnionQuery() {\n      $union_crit = [\n         ['FROM' => 'table1'],\n         ['FROM' => 'table2']\n      ];\n      $union = new \\QueryUnion($union_crit);\n      $union_raw_query = '((SELECT * FROM `table1`) UNION ALL (SELECT * FROM `table2`))';\n      $raw_query = 'SELECT * FROM ' . $union_raw_query . ' AS `union_' . md5($union_raw_query) . '`';\n      $it = $this->it->execute(['FROM' => $union]);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n\n      $union = new \\QueryUnion($union_crit, true);\n      $union_raw_query = '((SELECT * FROM `table1`) UNION (SELECT * FROM `table2`))';\n      $raw_query = 'SELECT * FROM ' . $union_raw_query . ' AS `union_' . md5($union_raw_query) . '`';\n      $it = $this->it->execute(['FROM' => $union]);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n\n      $union = new \\QueryUnion($union_crit, false, 'theunion');\n      $raw_query = 'SELECT * FROM ((SELECT * FROM `table1`) UNION ALL (SELECT * FROM `table2`)) AS `theunion`';\n      $it = $this->it->execute(['FROM' => $union]);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n\n      $union = new \\QueryUnion($union_crit, false, 'theunion');\n      $raw_query = 'SELECT DISTINCT `theunion`.`field` FROM ((SELECT * FROM `table1`) UNION ALL (SELECT * FROM `table2`)) AS `theunion`';\n      $crit = [\n         'SELECT'    => 'theunion.field',\n         'DISTINCT'  => true,\n         'FROM'      => $union,\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n\n      $union = new \\QueryUnion($union_crit, true);\n      $union_raw_query = '((SELECT * FROM `table1`) UNION (SELECT * FROM `table2`))';\n      $raw_query = 'SELECT DISTINCT `theunion`.`field` FROM ' . $union_raw_query . ' AS `union_' . md5($union_raw_query) . '`';\n      $crit = [\n         'SELECT'    => 'theunion.field',\n         'DISTINCT'  => true,\n         'FROM'      => $union,\n      ];\n      $it = $this->it->execute($crit);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n   }\n\n   public function testComplexUnionQuery() {\n\n      $fk = \\Ticket::getForeignKeyField();\n      $users_table = \\User::getTable();\n      $users_table = 'glpi_ticket_users';\n      $groups_table = 'glpi_groups_tickets';\n\n      $subquery1 = new \\QuerySubQuery([\n         'SELECT'    => [\n            'usr.id AS users_id',\n            'tu.type AS type'\n         ],\n         'FROM'      => \"$users_table AS tu\",\n         'LEFT JOIN' => [\n            \\User::getTable() . ' AS usr' => [\n               'ON' => [\n                  'tu'  => 'users_id',\n                  'usr' => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [\n            \"tu.$fk\" => 42\n         ]\n      ]);\n      $subquery2 = new \\QuerySubQuery([\n         'SELECT'    => [\n            'usr.id AS users_id',\n            'gt.type AS type'\n         ],\n         'FROM'      => \"$groups_table AS gt\",\n         'LEFT JOIN' => [\n            \\Group_User::getTable() . ' AS gu'   => [\n               'ON' => [\n                  'gu'  => 'groups_id',\n                  'gt'  => 'groups_id'\n               ]\n            ],\n            \\User::getTable() . ' AS usr'        => [\n               'ON' => [\n                  'gu'  => 'users_id',\n                  'usr' => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [\n            \"gt.$fk\" => 42\n         ]\n      ]);\n\n      $raw_query = \"SELECT DISTINCT `users_id`, `type`\"\n                     . \" FROM ((SELECT `usr`.`id` AS `users_id`, `tu`.`type` AS `type`\"\n                     . \" FROM `$users_table` AS `tu`\"\n                     . \" LEFT JOIN `glpi_users` AS `usr` ON (`tu`.`users_id` = `usr`.`id`)\"\n                     . \" WHERE `tu`.`$fk` = '42')\"\n                     . \" UNION ALL\"\n                     . \" (SELECT `usr`.`id` AS `users_id`, `gt`.`type` AS `type`\"\n                     . \" FROM `$groups_table` AS `gt`\"\n                     . \" LEFT JOIN `glpi_groups_users` AS `gu` ON (`gu`.`groups_id` = `gt`.`groups_id`)\"\n                     . \" LEFT JOIN `glpi_users` AS `usr` ON (`gu`.`users_id` = `usr`.`id`)\"\n                     . \" WHERE `gt`.`$fk` = '42')\"\n                     . \") AS `allactors`\";\n\n      $union = new \\QueryUnion([$subquery1, $subquery2], false, 'allactors');\n      $it = $this->it->execute([\n         'FIELDS'          => [\n            'users_id',\n            'type'\n         ],\n         'DISTINCT'        => true,\n         'FROM'            => $union\n      ]);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n   }\n\n   public function testComplexUnionQueryAgain() {\n      global $CFG_GLPI, $DB;\n\n      //Old build way\n      $queries = [];\n\n      foreach ($CFG_GLPI[\"networkport_types\"] as $itemtype) {\n         $table = getTableForItemType($itemtype);\n         $queries[] = \"(SELECT `ADDR`.`binary_0` AS `binary_0`,\n                                 `ADDR`.`binary_1` AS `binary_1`,\n                                 `ADDR`.`binary_2` AS `binary_2`,\n                                 `ADDR`.`binary_3` AS `binary_3`,\n                                 `ADDR`.`name` AS `ip`,\n                                 `ADDR`.`id` AS `id`,\n                                 `ADDR`.`itemtype` AS `addr_item_type`,\n                                 `ADDR`.`items_id` AS `addr_item_id`,\n                                 `glpi_entities`.`completename` AS `entity`,\n                                 `NAME`.`id` AS `name_id`,\n                                 `PORT`.`id` AS `port_id`,\n                                 `ITEM`.`id` AS `item_id`,\n                                 '$itemtype' AS `item_type`\n                        FROM `glpi_ipaddresses_ipnetworks` AS `LINK`\n                        INNER JOIN `glpi_ipaddresses` AS `ADDR` ON (`ADDR`.`id` = `LINK`.`ipaddresses_id`\n                                                            AND `ADDR`.`itemtype` = 'NetworkName'\n                                                            AND `ADDR`.`is_deleted` = '0')\n                        INNER JOIN `glpi_networknames` AS `NAME` ON (`NAME`.`id` = `ADDR`.`items_id`\n                                                               AND `NAME`.`itemtype` = 'NetworkPort')\n                        INNER JOIN `glpi_networkports` AS `PORT` ON (`NAME`.`items_id` = `PORT`.`id`\n                                                               AND `PORT`.`itemtype` = '$itemtype')\n                        INNER JOIN `$table` AS `ITEM` ON (`ITEM`.`id` = `PORT`.`items_id`)\n                        LEFT JOIN `glpi_entities` ON (`ADDR`.`entities_id` = `glpi_entities`.`id`)\n                        WHERE `LINK`.`ipnetworks_id` = '42')\";\n      }\n\n      $queries[] = \"(SELECT `ADDR`.`binary_0` AS `binary_0`,\n                              `ADDR`.`binary_1` AS `binary_1`,\n                              `ADDR`.`binary_2` AS `binary_2`,\n                              `ADDR`.`binary_3` AS `binary_3`,\n                              `ADDR`.`name` AS `ip`,\n                              `ADDR`.`id` AS `id`,\n                              `ADDR`.`itemtype` AS `addr_item_type`,\n                              `ADDR`.`items_id` AS `addr_item_id`,\n                              `glpi_entities`.`completename` AS `entity`,\n                              `NAME`.`id` AS `name_id`,\n                              `PORT`.`id` AS `port_id`,\n                              NULL AS `item_id`,\n                              NULL AS `item_type`\n                     FROM `glpi_ipaddresses_ipnetworks` AS `LINK`\n                     INNER JOIN `glpi_ipaddresses` AS `ADDR` ON (`ADDR`.`id` = `LINK`.`ipaddresses_id`\n                                                         AND `ADDR`.`itemtype` = 'NetworkName'\n                                                         AND `ADDR`.`is_deleted` = '0')\n                     INNER JOIN `glpi_networknames` AS `NAME` ON (`NAME`.`id` = `ADDR`.`items_id`\n                                                            AND `NAME`.`itemtype` = 'NetworkPort')\n                     INNER JOIN `glpi_networkports` AS `PORT`\n                        ON (`NAME`.`items_id` = `PORT`.`id`\n                             AND NOT (`PORT`.`itemtype`\n                                      IN ('\" .implode(\"', '\", $CFG_GLPI[\"networkport_types\"]).\"')))\n                     LEFT JOIN `glpi_entities` ON (`ADDR`.`entities_id` = `glpi_entities`.`id`)\n                     WHERE `LINK`.`ipnetworks_id` = '42')\";\n\n      $queries[] = \"(SELECT `ADDR`.`binary_0` AS `binary_0`,\n                              `ADDR`.`binary_1` AS `binary_1`,\n                              `ADDR`.`binary_2` AS `binary_2`,\n                              `ADDR`.`binary_3` AS `binary_3`,\n                              `ADDR`.`name` AS `ip`,\n                              `ADDR`.`id` AS `id`,\n                              `ADDR`.`itemtype` AS `addr_item_type`,\n                              `ADDR`.`items_id` AS `addr_item_id`,\n                              `glpi_entities`.`completename` AS `entity`,\n                              `NAME`.`id` AS `name_id`,\n                              NULL AS `port_id`,\n                              NULL AS `item_id`,\n                              NULL AS `item_type`\n                     FROM `glpi_ipaddresses_ipnetworks` AS `LINK`\n                     INNER JOIN `glpi_ipaddresses` AS `ADDR` ON (`ADDR`.`id` = `LINK`.`ipaddresses_id`\n                                                         AND `ADDR`.`itemtype` = 'NetworkName'\n                                                         AND `ADDR`.`is_deleted` = '0')\n                     INNER JOIN `glpi_networknames` AS `NAME` ON (`NAME`.`id` = `ADDR`.`items_id`\n                                                            AND `NAME`.`itemtype` != 'NetworkPort')\n                     LEFT JOIN `glpi_entities` ON (`ADDR`.`entities_id` = `glpi_entities`.`id`)\n                     WHERE `LINK`.`ipnetworks_id` = '42')\";\n\n      $queries[] = \"(SELECT `ADDR`.`binary_0` AS `binary_0`,\n                              `ADDR`.`binary_1` AS `binary_1`,\n                              `ADDR`.`binary_2` AS `binary_2`,\n                              `ADDR`.`binary_3` AS `binary_3`,\n                              `ADDR`.`name` AS `ip`,\n                              `ADDR`.`id` AS `id`,\n                              `ADDR`.`itemtype` AS `addr_item_type`,\n                              `ADDR`.`items_id` AS `addr_item_id`,\n                              `glpi_entities`.`completename` AS `entity`,\n                              NULL AS `name_id`,\n                              NULL AS `port_id`,\n                              NULL AS `item_id`,\n                              NULL AS `item_type`\n                     FROM `glpi_ipaddresses_ipnetworks` AS `LINK`\n                     INNER JOIN `glpi_ipaddresses` AS `ADDR` ON (`ADDR`.`id` = `LINK`.`ipaddresses_id`\n                                                         AND `ADDR`.`itemtype` != 'NetworkName'\n                                                         AND `ADDR`.`is_deleted` = '0')\n                     LEFT JOIN `glpi_entities` ON (`ADDR`.`entities_id` = `glpi_entities`.`id`)\n                     WHERE `LINK`.`ipnetworks_id` = '42')\";\n\n      $union_raw_query = '(' . preg_replace('/\\s+/', ' ', implode(' UNION ALL ', $queries)) . ')';\n      $raw_query = 'SELECT * FROM ' . $union_raw_query . ' AS `union_' . md5($union_raw_query) . '`';\n\n      //New build way\n      $queries = [];\n      $main_criteria = [\n         'SELECT'       => [\n            'ADDR.binary_0 AS binary_0',\n            'ADDR.binary_1 AS binary_1',\n            'ADDR.binary_2 AS binary_2',\n            'ADDR.binary_3 AS binary_3',\n            'ADDR.name AS ip',\n            'ADDR.id AS id',\n            'ADDR.itemtype AS addr_item_type',\n            'ADDR.items_id AS addr_item_id',\n            'glpi_entities.completename AS entity',\n         ],\n         'FROM'         => 'glpi_ipaddresses_ipnetworks AS LINK',\n         'INNER JOIN'   => [\n            'glpi_ipaddresses AS ADDR' => [\n               'ON' => [\n                  'ADDR'   => 'id',\n                  'LINK'   => 'ipaddresses_id', [\n                     'AND' => [\n                        'ADDR.itemtype' => 'NetworkName',\n                        'ADDR.is_deleted' => 0\n                     ]\n                  ]\n               ]\n            ]\n         ],\n         'LEFT JOIN'    => [\n            'glpi_entities'             => [\n               'ON' => [\n                  'ADDR'            => 'entities_id',\n                  'glpi_entities'   => 'id'\n               ]\n            ]\n         ],\n         'WHERE'        => [\n            'LINK.ipnetworks_id' => 42,\n         ]\n      ];\n\n      foreach ($CFG_GLPI[\"networkport_types\"] as $itemtype) {\n         $table = getTableForItemType($itemtype);\n         $criteria = $main_criteria;\n         $criteria['SELECT'] = array_merge($criteria['SELECT'], [\n            'NAME.id AS name_id',\n            'PORT.id AS port_id',\n            'ITEM.id AS item_id',\n            new \\QueryExpression(\"'$itemtype' AS \" . $DB->quoteName('item_type'))\n         ]);\n         $criteria['INNER JOIN'] = $criteria['INNER JOIN'] + [\n            'glpi_networknames AS NAME'   => [\n               'ON' => [\n                  'NAME'   => 'id',\n                  'ADDR'   => 'items_id', [\n                     'AND' => [\n                        'NAME.itemtype' => 'NetworkPort'\n                     ]\n                  ]\n               ]\n            ],\n            'glpi_networkports AS PORT'   => [\n               'ON' => [\n                  'NAME'   => 'items_id',\n                  'PORT'   => 'id', [\n                     'AND' => [\n                        'PORT.itemtype' => $itemtype\n                     ]\n                  ]\n               ]\n            ],\n            \"$table AS ITEM\"              => [\n               'ON' => [\n                  'ITEM'   => 'id',\n                  'PORT'   => 'items_id'\n               ]\n            ]\n         ];\n         $queries[] = $criteria;\n      }\n\n      $criteria = $main_criteria;\n      $criteria['SELECT'] = array_merge($criteria['SELECT'], [\n         'NAME.id AS name_id',\n         'PORT.id AS port_id',\n         new \\QueryExpression('NULL AS ' . $DB->quoteName('item_id')),\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('item_type')),\n      ]);\n      $criteria['INNER JOIN'] = $criteria['INNER JOIN'] + [\n         'glpi_networknames AS NAME'   => [\n            'ON' => [\n               'NAME'   => 'id',\n               'ADDR'   => 'items_id', [\n                  'AND' => [\n                     'NAME.itemtype' => 'NetworkPort'\n                  ]\n               ]\n            ]\n         ],\n         'glpi_networkports AS PORT'   => [\n            'ON' => [\n               'NAME'   => 'items_id',\n               'PORT'   => 'id', [\n                  'AND' => [\n                     'NOT' => [\n                        'PORT.itemtype' => $CFG_GLPI['networkport_types']\n                     ]\n                  ]\n               ]\n            ]\n         ]\n      ];\n      $queries[] = $criteria;\n\n      $criteria = $main_criteria;\n      $criteria['SELECT'] = array_merge($criteria['SELECT'], [\n         'NAME.id AS name_id',\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('port_id')),\n         new \\QueryExpression('NULL AS ' . $DB->quoteName('item_id')),\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('item_type'))\n      ]);\n      $criteria['INNER JOIN'] = $criteria['INNER JOIN'] + [\n         'glpi_networknames AS NAME'   => [\n            'ON' => [\n               'NAME'   => 'id',\n               'ADDR'   => 'items_id', [\n                  'AND' => [\n                     'NAME.itemtype' => ['!=', 'NetworkPort']\n                  ]\n               ]\n            ]\n         ]\n      ];\n      $queries[] = $criteria;\n\n      $criteria = $main_criteria;\n      $criteria['SELECT'] = array_merge($criteria['SELECT'], [\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('name_id')),\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('port_id')),\n         new \\QueryExpression('NULL AS ' . $DB->quoteName('item_id')),\n         new \\QueryExpression(\"NULL AS \" . $DB->quoteName('item_type'))\n      ]);\n      $criteria['INNER JOIN']['glpi_ipaddresses AS ADDR']['ON'][0]['AND']['ADDR.itemtype'] = ['!=', 'NetworkName'];\n      $queries[] = $criteria;\n\n      $union = new \\QueryUnion($queries);\n      $criteria = [\n         'FROM'   => $union,\n      ];\n\n      $it = $this->it->execute($criteria);\n      $this->string($it->getSql())->isIdenticalTo($raw_query);\n   }\n\n   public function testAnalyseCrit() {\n      $crit = [new \\QuerySubQuery([\n         'SELECT' => ['COUNT' => ['users_id']],\n         'FROM'   => 'glpi_groups_users',\n         'WHERE'  => ['groups_id' => new \\QueryExpression('glpi_groups.id')]\n      ])];\n      $this->string($this->it->analyseCrit($crit))->isIdenticalTo(\"(SELECT COUNT(`users_id`) FROM `glpi_groups_users` WHERE `groups_id` = glpi_groups.id)\");\n   }\n}\n"], "filenames": ["CHANGELOG.md", "ajax/dropdownConnectNetworkPort.php", "inc/crontask.class.php", "inc/dbmysql.class.php", "inc/dbmysqliterator.class.php", "inc/report.class.php", "tests/units/DB.php", "tests/units/DBmysqlIterator.php"], "buggy_code_start_loc": [6, 100, 399, 1080, 592, 396, 99, 565], "buggy_code_end_loc": [7, 101, 405, 1081, 594, 397, 100, 566], "fixing_code_start_loc": [6, 100, 399, 1080, 591, 396, 99, 565], "fixing_code_end_loc": [15, 101, 405, 1081, 591, 397, 100, 566], "type": "CWE-89", "message": "In GLPI before version 9.5.2, when supplying a back tick in input that gets put into a SQL query,the application does not escape or sanitize allowing for SQL Injection to occur. Leveraging this vulnerability an attacker is able to exfiltrate sensitive information like passwords, reset tokens, personal details, and more. The issue is patched in version 9.5.2", "other": {"cve": {"id": "CVE-2020-15176", "sourceIdentifier": "security-advisories@github.com", "published": "2020-10-07T19:15:12.720", "lastModified": "2020-10-16T15:36:03.727", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In GLPI before version 9.5.2, when supplying a back tick in input that gets put into a SQL query,the application does not escape or sanitize allowing for SQL Injection to occur. Leveraging this vulnerability an attacker is able to exfiltrate sensitive information like passwords, reset tokens, personal details, and more. The issue is patched in version 9.5.2"}, {"lang": "es", "value": "En GLPI versiones anteriores a 9.5.2, cuando se suministra un back tick en la entrada que se coloca en una consulta SQL, la aplicaci\u00f3n no escapa ni se sanea, permitiendo que ocurra una inyecci\u00f3n SQL.&#xa0;Al aprovechar esta vulnerabilidad, un atacante es capaz de exfiltrar informaci\u00f3n confidencial como contrase\u00f1as, tokens de restablecimiento, detalles personales y m\u00e1s.&#xa0;El problema es parcheado en la versi\u00f3n 9.5.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.5.2", "matchCriteriaId": "4FDDC1DB-791A-495C-84D1-110B95394022"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/f021f1f365b4acea5066d3e57c6d22658cf32575", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-x93w-64x9-58qw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/f021f1f365b4acea5066d3e57c6d22658cf32575"}}