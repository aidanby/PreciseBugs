{"buggy_code": ["<?php\n\n  require_once \"RestServer.php\";\n  require_once \"config.php\";\n\n  include(\"geoip/src/geoip.inc\");\n\n  class AddInfo {\n     public function add_info($uuid, $release, $type = \"community\") {\n\n\t  // get ip from remote address\n      $ip = $_SERVER['REMOTE_ADDR'];\n\n      // get geodata\n      $gi = geoip_open(\"geoip/GeoIP.dat\", GEOIP_STANDARD);\n\n      // get country code from ip\n      $country_code = geoip_country_code_by_addr($gi, $ip);\n\n      // get country name from ip\n      $country_name = geoip_country_name_by_addr($gi, $ip);\n\n      try {\n        // get connession\n        $conn = new PDO(\"mysql:host=\".$GLOBALS['$dbhost'].\n                        \";dbname=\".$GLOBALS['$dbname'].\n                        \"\", $GLOBALS['$dbuser'], $GLOBALS['$dbpass']);\n\n        // set the PDO error mode to exception\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // insert query\n        $sql = \"REPLACE INTO phone_home_tb (uuid,\n                                            release_tag,\n                                            ip,\n                                            country_code,\n                                            country_name,\n                                            type,\n                                            reg_date)\n                VALUES (:uuid,\n                        :release,\n                        :ip,\n                        :country_code,\n                        :country_name,\n                        :type,\n                        NOW())\";\n\n        // prepare statement\n        $stmt = $conn->prepare($sql);\n\n        // execute query\n        $stmt->execute(array( ':uuid'                 => $uuid,\n                              ':release'              => $release,\n                              ':ip'                   => $ip,\n                              ':country_code'         => $country_code,\n                              ':country_name'         => $country_name,\n                              ':type'                 => $type\n                            ));\n\n        // close connession\n        $conn = null;\n\n      }\n      catch(PDOException $e) {\n        echo $e->getMessage();\n      }\n\n     }\n  }\n\n  class GetInfo {\n    public function get_info($interval) {\n      try {\n        // get connession\n        $conn = new PDO(\"mysql:host=\".$GLOBALS['$dbhost'].\n                        \";dbname=\".$GLOBALS['$dbname'].\n                        \"\", $GLOBALS['$dbuser'], $GLOBALS['$dbpass']);\n\n        // set the PDO error mode to exception\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // select query\n        $sql = \"SELECT    country_code,\n                          GROUP_CONCAT(CONCAT( release_tag,'#',num )) AS installations,\n                          country_name\n\n                FROM      ( SELECT  country_code,\n                                    release_tag,\n                                    country_name,\n                                    reg_date,\n                                    COUNT(release_tag) AS num\n                            FROM phone_home_tb \";\n\n        if ($interval!=='1') {\n          $sql .= \" WHERE reg_date >= DATE_SUB(CURDATE(), INTERVAL $interval DAY)\";\n        }\n\n        $sql .= \" GROUP BY release_tag, country_code\n        ) AS t\n        GROUP BY  country_code;\";\n\n        // prepare statement\n        $stmt = $conn->prepare($sql);\n\n        // execute query\n        $stmt->execute();\n\n        // create new empty array\n        $infos = array();\n\n        // set the resulting array to associative\n        for($i=0; $row = $stmt->fetch(); $i++){\n          array_push($infos, array( 'installations'         => $row['installations'],\n                                    'country_code'          => $row['country_code'],\n                                    'country_name'          => $row['country_name']\n                                  ));\n        }\n\n        // close connession\n        $conn = null;\n\n        // return info inserted\n        header('Content-Type: application/json');\n        echo json_encode($infos);\n\n      }\n      catch(PDOException $e) {\n        echo $e->getMessage();\n      }\n\n    }\n\n  }\n\n  class GetCountryCoor {\n    public function get_country_coor($country_code) {\n      try {\n        // get connession\n        $conn = new PDO(\"mysql:host=\".$GLOBALS['$dbhost'].\n                        \";dbname=\".$GLOBALS['$dbname'].\n                        \"\", $GLOBALS['$dbuser'], $GLOBALS['$dbpass']);\n\n        // set the PDO error mode to exception\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // select query\n        $sql = \"SELECT lat, lng\n\n                FROM country_name_map\n\n                WHERE code = '$country_code'\";\n        }\n        catch(PDOException $e) {\n          echo $e->getMessage();\n        }\n\n        // prepare statement\n        $stmt = $conn->prepare($sql);\n\n        // execute query\n        $stmt->execute();\n\n        // create new empty array\n        $infos = array();\n\n        // set the resulting array to associative\n        for($i=0; $row = $stmt->fetch(); $i++){\n          array_push($infos, array( 'lat' => $row['lat'],\n                                    'lng' => $row['lng']\n                                                        ));\n      }\n\n\n      // close connession\n      $conn = null;\n\n      // return info inserted\n      header('Content-Type: application/json');\n      echo json_encode($infos);\n    }\n  }\n\n  $rest = new RestServer();\n  $rest->addServiceClass('AddInfo');\n  $rest->addServiceClass('GetInfo');\n  $rest->addServiceClass('GetCountryCoor');\n  $rest->handle();\n"], "fixing_code": ["<?php\n\n  require_once \"RestServer.php\";\n  require_once \"config.php\";\n\n  include(\"geoip/src/geoip.inc\");\n\n  class AddInfo {\n     public function add_info($uuid, $release, $type = \"community\") {\n\n\t  // get ip from remote address\n      $ip = $_SERVER['REMOTE_ADDR'];\n\n      // get geodata\n      $gi = geoip_open(\"geoip/GeoIP.dat\", GEOIP_STANDARD);\n\n      // get country code from ip\n      $country_code = geoip_country_code_by_addr($gi, $ip);\n\n      // get country name from ip\n      $country_name = geoip_country_name_by_addr($gi, $ip);\n\n      try {\n        // get connession\n        $conn = new PDO(\"mysql:host=\".$GLOBALS['$dbhost'].\n                        \";dbname=\".$GLOBALS['$dbname'].\n                        \"\", $GLOBALS['$dbuser'], $GLOBALS['$dbpass']);\n\n        // set the PDO error mode to exception\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // insert query\n        $sql = \"REPLACE INTO phone_home_tb (uuid,\n                                            release_tag,\n                                            ip,\n                                            country_code,\n                                            country_name,\n                                            type,\n                                            reg_date)\n                VALUES (:uuid,\n                        :release,\n                        :ip,\n                        :country_code,\n                        :country_name,\n                        :type,\n                        NOW())\";\n\n        // prepare statement\n        $stmt = $conn->prepare($sql);\n\n        // execute query\n        $stmt->execute(array( ':uuid'                 => $uuid,\n                              ':release'              => $release,\n                              ':ip'                   => $ip,\n                              ':country_code'         => $country_code,\n                              ':country_name'         => $country_name,\n                              ':type'                 => $type\n                            ));\n\n        // close connession\n        $conn = null;\n\n      }\n      catch(PDOException $e) {\n        echo $e->getMessage();\n      }\n\n     }\n  }\n\n  class GetInfo {\n    public function get_info($interval) {\n      try {\n        // get connession\n        $conn = new PDO(\"mysql:host=\".$GLOBALS['$dbhost'].\n                        \";dbname=\".$GLOBALS['$dbname'].\n                        \"\", $GLOBALS['$dbuser'], $GLOBALS['$dbpass']);\n\n        // set the PDO error mode to exception\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // select query\n        $sql = \"SELECT    country_code,\n                          GROUP_CONCAT(CONCAT( release_tag,'#',num )) AS installations,\n                          country_name\n\n                FROM      ( SELECT  country_code,\n                                    release_tag,\n                                    country_name,\n                                    reg_date,\n                                    COUNT(release_tag) AS num\n                            FROM phone_home_tb \";\n\n        if ($interval!=='1') {\n          $sql .= \" WHERE reg_date >= DATE_SUB(CURDATE(), INTERVAL :interval DAY)\";\n        }\n\n        $sql .= \" GROUP BY release_tag, country_code\n        ) AS t\n        GROUP BY  country_code;\";\n\n        // prepare statement\n        $stmt = $conn->prepare($sql);\n\n        // execute query\n        $stmt->execute(array(':interval' => intval($interval)));\n\n        // create new empty array\n        $infos = array();\n\n        // set the resulting array to associative\n        for($i=0; $row = $stmt->fetch(); $i++){\n          array_push($infos, array( 'installations'         => $row['installations'],\n                                    'country_code'          => $row['country_code'],\n                                    'country_name'          => $row['country_name']\n                                  ));\n        }\n\n        // close connession\n        $conn = null;\n\n        // return info inserted\n        header('Content-Type: application/json');\n        echo json_encode($infos);\n\n      }\n      catch(PDOException $e) {\n        echo $e->getMessage();\n      }\n\n    }\n\n  }\n\n  class GetCountryCoor {\n    public function get_country_coor($country_code) {\n      try {\n        // get connession\n        $conn = new PDO(\"mysql:host=\".$GLOBALS['$dbhost'].\n                        \";dbname=\".$GLOBALS['$dbname'].\n                        \"\", $GLOBALS['$dbuser'], $GLOBALS['$dbpass']);\n\n        // set the PDO error mode to exception\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // select query\n        $sql = \"SELECT lat, lng\n\n                FROM country_name_map\n\n                WHERE code = ':country_code'\";\n}\n        catch(PDOException $e) {\n          echo $e->getMessage();\n        }\n\n        // prepare statement\n        $stmt = $conn->prepare($sql);\n\n        // execute query\n        $stmt->execute(array(':country_code' => $country_code));\n\n        // create new empty array\n        $infos = array();\n\n        // set the resulting array to associative\n        for($i=0; $row = $stmt->fetch(); $i++){\n          array_push($infos, array( 'lat' => $row['lat'],\n                                    'lng' => $row['lng']\n                                                        ));\n      }\n\n\n      // close connession\n      $conn = null;\n\n      // return info inserted\n      header('Content-Type: application/json');\n      echo json_encode($infos);\n    }\n  }\n\n  $rest = new RestServer();\n  $rest->addServiceClass('AddInfo');\n  $rest->addServiceClass('GetInfo');\n  $rest->addServiceClass('GetCountryCoor');\n  $rest->handle();\n"], "filenames": ["server/index.php"], "buggy_code_start_loc": [95], "buggy_code_end_loc": [162], "fixing_code_start_loc": [95], "fixing_code_end_loc": [162], "type": "CWE-89", "message": "A vulnerability was found in NethServer phonenehome. It has been rated as critical. This issue affects the function get_info/get_country_coor of the file server/index.php. The manipulation leads to sql injection. The name of the patch is 759c30b0ddd7d493836bbdf695cf71624b377391. It is recommended to apply a patch to fix this issue. The identifier VDB-218393 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2021-4313", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-16T12:15:16.480", "lastModified": "2023-01-24T16:15:44.047", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in NethServer phonenehome. It has been rated as critical. This issue affects the function get_info/get_country_coor of the file server/index.php. The manipulation leads to sql injection. The name of the patch is 759c30b0ddd7d493836bbdf695cf71624b377391. It is recommended to apply a patch to fix this issue. The identifier VDB-218393 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nethserver-phonenehome_project:nethserver-phonenehome:*:*:*:*:*:*:*:*", "versionEndExcluding": "2021-09-28", "matchCriteriaId": "F7A3FF6F-A951-4AC1-9EFD-072385B5B80D"}]}]}], "references": [{"url": "https://github.com/NethServer/nethserver-phonehome/commit/759c30b0ddd7d493836bbdf695cf71624b377391", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/NethServer/nethserver-phonehome/pull/10", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218393", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218393", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/NethServer/nethserver-phonehome/commit/759c30b0ddd7d493836bbdf695cf71624b377391"}}