{"buggy_code": ["<?php\nApp::uses('AppHelper', 'View/Helper');\n\n//this helper simply replaces quotes between [QUOTE][/QUOTE] with div tags.\n// And now [thread][/thread], [event][/event], [link][/link], [code][/code]\n\n\n    class CommandHelper extends AppHelper {\n        var $helpers = array('Html');\n\n        private $__replacement;\n\n        private function __buildReplacements() {\n            $this->__replacement = array(\n                'link' => array('type' => 'url', 'url' => '$1', 'text' => '$1'),\n                'thread' => array('type' => 'url', 'url' => h(Configure::read('MISP.baseurl')). '/threads/view/$1', 'text' => ' Thread $1'),\n                'event' => array('type' => 'url', 'url' => h(Configure::read('MISP.baseurl')). '/events/view/$1', 'text' => ' Event $1'),\n                'code' => array('type' => 'replace', 'text' => '<pre>$1</pre>'),\n                'quote' => array('type' => 'replace', 'text' => '<div class=\"quote\">$1</div>')\n            );\n        }\n\n\n        public function convertQuotes($string) {\n            $this->__buildReplacements();\n            foreach ($this->__replacement as $trigger => $replacement) {\n                $result = $this->__handleLinks($string, $trigger);\n                // Does this return a UI Element?\n                if (!$result) return 'Malformed syntax.';\n            }\n            return $string;\n        }\n\n        private function __handleLinks(&$string, $trigger) {\n            $opening = preg_match('%\\[' . $trigger . '\\]%isU', $string, $opening_matches, PREG_OFFSET_CAPTURE);\n            $closing = preg_match('%\\[/' . $trigger . '\\]%isU', $string, $closing_matches, PREG_OFFSET_CAPTURE);\n            $opening_len = strlen($trigger) + 2;\n            $closing_len = $opening_len + 1;\n            if ((count($opening) !== count($closing))) return false;\n            $pairs = array();\n            $rearrangedTags = array();\n            foreach ($opening_matches as $opening_tag) {\n                $rearrangedTags[$opening_tag[1]] = 'open';\n            }\n            foreach ($closing_matches as $closing_tag) {\n                $rearrangedTags[$closing_tag[1]] = 'close';\n            }\n            foreach ($opening_matches as $opening_tag) {\n                $counter = 1;\n                foreach ($rearrangedTags as $pos => $type) {\n                    if ($opening_tag[1] == $pos) continue;\n                    if ($type == 'close') $counter--;\n                    else $counter++;\n                    if ($counter == 0) {\n                        $pairs[] = array($opening_tag[1], $pos);\n                        continue 2;\n                    }\n                }\n            }\n            foreach ($pairs as $pair) {\n                $temp = substr($string, 0, $pair[0]);\n                if ($this->__replacement[$trigger]['type'] == 'url') {\n                    $data = substr($string, $pair[0] + $opening_len, $pair[1] - ($pair[0] + $opening_len));\n                    if (empty($data)) {\n                        $replacement = '';\n                    } else {\n                        if (!is_numeric($data) && ($trigger == 'event' || $trigger == 'thread')) {\n                            $replacement = '%MALFORMED URL%';\n                        } else {\n                            if (filter_var(str_replace('$1', $data, $this->__replacement[$trigger]['url']), FILTER_VALIDATE_URL)) {\n                                $replacement = $this->Html->link(\n                                    str_replace('$1', $data, $this->__replacement[$trigger]['text']),\n                                    str_replace('$1', $data, $this->__replacement[$trigger]['url'])\n                                );\n                            } else {\n                                $replacement = '%MALFORMED URL%';\n                            }\n                        }\n                    }\n                } else {\n                    $data = substr($string, $pair[0] + $opening_len, $pair[1] - ($pair[0] + $opening_len));\n                    if (empty($data)) {\n                        $replacement = '';\n                    } else {\n                        $replacement = str_replace('$1', $data, $this->__replacement[$trigger]['text']);\n                    }\n                }\n                $temp .= $replacement;\n                $temp .= substr($string, $pair[1] + $closing_len, strlen($string));\n                $string = $temp;\n            }\n            return true;\n        }\n    }\n"], "fixing_code": ["<?php\nApp::uses('AppHelper', 'View/Helper');\n\n//this helper simply replaces quotes between [QUOTE][/QUOTE] with div tags.\n// And now [thread][/thread], [event][/event], [link][/link], [code][/code]\n\n\n    class CommandHelper extends AppHelper {\n        var $helpers = array('Html');\n\n        private $__replacement;\n\n        private function __buildReplacements() {\n            $this->__replacement = array(\n                'link' => array('type' => 'url', 'url' => '$1', 'text' => '$1'),\n                'thread' => array('type' => 'url', 'url' => h(Configure::read('MISP.baseurl')). '/threads/view/$1', 'text' => ' Thread $1'),\n                'event' => array('type' => 'url', 'url' => h(Configure::read('MISP.baseurl')). '/events/view/$1', 'text' => ' Event $1'),\n                'code' => array('type' => 'replace', 'text' => '<pre>$1</pre>'),\n                'quote' => array('type' => 'replace', 'text' => '<div class=\"quote\">$1</div>')\n            );\n        }\n\n\n        public function convertQuotes($string) {\n            $this->__buildReplacements();\n            foreach ($this->__replacement as $trigger => $replacement) {\n                $result = $this->__handleLinks($string, $trigger);\n                // Does this return a UI Element?\n                if (!$result) return 'Malformed syntax.';\n            }\n            return $string;\n        }\n\n        private function __handleLinks(&$string, $trigger) {\n            $opening = preg_match('%\\[' . $trigger . '\\]%isU', $string, $opening_matches, PREG_OFFSET_CAPTURE);\n            $closing = preg_match('%\\[/' . $trigger . '\\]%isU', $string, $closing_matches, PREG_OFFSET_CAPTURE);\n            $opening_len = strlen($trigger) + 2;\n            $closing_len = $opening_len + 1;\n            if ((count($opening) !== count($closing))) return false;\n            $pairs = array();\n            $rearrangedTags = array();\n            foreach ($opening_matches as $opening_tag) {\n                $rearrangedTags[$opening_tag[1]] = 'open';\n            }\n            foreach ($closing_matches as $closing_tag) {\n                $rearrangedTags[$closing_tag[1]] = 'close';\n            }\n            foreach ($opening_matches as $opening_tag) {\n                $counter = 1;\n                foreach ($rearrangedTags as $pos => $type) {\n                    if ($opening_tag[1] == $pos) continue;\n                    if ($type == 'close') $counter--;\n                    else $counter++;\n                    if ($counter == 0) {\n                        $pairs[] = array($opening_tag[1], $pos);\n                        continue 2;\n                    }\n                }\n            }\n            foreach ($pairs as $pair) {\n                $temp = substr($string, 0, $pair[0]);\n                if ($this->__replacement[$trigger]['type'] == 'url') {\n                    $data = substr($string, $pair[0] + $opening_len, $pair[1] - ($pair[0] + $opening_len));\n                    if (empty($data)) {\n                        $replacement = '';\n                    } else {\n                        if (!is_numeric($data) && ($trigger == 'event' || $trigger == 'thread')) {\n                            $replacement = '%MALFORMED URL%';\n                        } else {\n                            if (filter_var(str_replace('$1', $data, $this->__replacement[$trigger]['url']), FILTER_VALIDATE_URL)) {\n                                if (substr($data, 0, 7) === 'http://' || substr($data, 0, 8) === 'https://') {\n                                    $replacement = $this->Html->link(\n                                        str_replace('$1', $data, $this->__replacement[$trigger]['text']),\n                                        str_replace('$1', $data, $this->__replacement[$trigger]['url'])\n                                    );\n                                } else {\n                                    $replacement = '%MALFORMED URL%';\n                                }\n                            } else {\n                                $replacement = '%MALFORMED URL%';\n                            }\n                        }\n                    }\n                } else {\n                    $data = substr($string, $pair[0] + $opening_len, $pair[1] - ($pair[0] + $opening_len));\n                    if (empty($data)) {\n                        $replacement = '';\n                    } else {\n                        $replacement = str_replace('$1', $data, $this->__replacement[$trigger]['text']);\n                    }\n                }\n                $temp .= $replacement;\n                $temp .= substr($string, $pair[1] + $closing_len, strlen($string));\n                $string = $temp;\n            }\n            return true;\n        }\n    }\n"], "filenames": ["app/View/Helper/CommandHelper.php"], "buggy_code_start_loc": [71], "buggy_code_end_loc": [75], "fixing_code_start_loc": [71], "fixing_code_end_loc": [79], "type": "CWE-79", "message": "A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link.", "other": {"cve": {"id": "CVE-2019-11812", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-08T13:29:00.253", "lastModified": "2019-05-08T15:04:53.280", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A persistent XSS issue was discovered in app/View/Helper/CommandHelper.php in MISP before 2.4.107. JavaScript can be included in the discussion interface, and can be triggered by clicking on the link."}, {"lang": "es", "value": "Un problema XSS persistente se descubri\u00f3 en el archivo app/View/Helper/CommandHelper.php en MISP anterior a la versi\u00f3n 2.4.107 un JavaScript puede ser insertado en la interfaz discussion y puede ser activado haciendo clic sobre el enlace."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.107", "matchCriteriaId": "5596C0F2-50CF-4002-8C21-160B338A7896"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/3a085a6ceea00b3ab674a984dd56c1846ef775ff", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/3a085a6ceea00b3ab674a984dd56c1846ef775ff"}}