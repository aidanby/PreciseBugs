{"buggy_code": ["<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n\n\n// Are we editing or creating a new key?\n$edit = false;\n\nif (isset($_GET['key'], $_GET['type'])) {\n  if (($_GET['type'] == 'string') ||\n      (($_GET['type'] == 'hash') && isset($_GET['hkey']))  ||\n      (($_GET['type'] == 'list') && isset($_GET['index'])) ||\n      (($_GET['type'] == 'set' ) && isset($_GET['value'])) ||\n      (($_GET['type'] == 'zset') && isset($_GET['value']))) {\n    $edit = true;\n  }\n}\n\n\n\n\nif (isset($_POST['type'], $_POST['key'], $_POST['value'])) {\n  // Don't allow keys that are to long (Redis supports keys that can be way to long to put in an url).\n  if (strlen($_POST['key']) > $config['maxkeylen']) {\n    die('ERROR: Your key is to long (max length is '.$config['maxkeylen'].')');\n  }\n\n  $key   = input_convert($_POST['key']);\n  $value = input_convert($_POST['value']);\n  $value = encodeOrDecode('save', $key, $value);\n\n  if ($value === false || is_null($value)) {\n    die('ERROR: could not encode value');\n  }\n\n  // String\n  if ($_POST['type'] == 'string') {\n    $redis->set($key, $value);\n  }\n\n  // Hash\n  else if (($_POST['type'] == 'hash') && isset($_POST['hkey'])) {\n    if (strlen($_POST['hkey']) > $config['maxkeylen']) {\n      die('ERROR: Your hash key is to long (max length is '.$config['maxkeylen'].')');\n    }\n\n    if ($edit && !$redis->hExists($key, input_convert($_POST['hkey']))) {\n      $redis->hDel($key, input_convert($_GET['hkey']));\n    }\n\n    $redis->hSet($key, input_convert($_POST['hkey']), $value);\n  }\n\n  // List\n  else if (($_POST['type'] == 'list') && isset($_POST['index'])) {\n    $size = $redis->lLen($key);\n\n    if (($_POST['index'] == '') ||\n        ($_POST['index'] == $size)) {\n      // Push it at the end\n      $redis->rPush($key, $value);\n    } else if ($_POST['index'] == -1) {\n      // Push it at the start\n      $redis->lPush($key, $value);\n    } else if (($_POST['index'] >= 0) &&\n               ($_POST['index'] < $size)) {\n      // Overwrite an index\n      $redis->lSet($key, input_convert($_POST['index']), $value);\n    } else {\n      die('ERROR: Out of bounds index');\n    }\n  }\n\n  // Set\n  else if ($_POST['type'] == 'set') {\n    if ($_POST['value'] != $_POST['oldvalue']) {\n      // The only way to edit a Set value is to add it and remove the old value.\n      $redis->sRem($key, encodeOrDecode('save', $key, input_convert($_POST['oldvalue'])));\n      $redis->sAdd($key, $value);\n    }\n  }\n\n  // ZSet\n  else if (($_POST['type'] == 'zset') && isset($_POST['score'])) {\n    // The only way to edit a ZSet value is to add it and remove the old value.\n    $redis->zRem($key, encodeOrDecode('save', $key, input_convert($_POST['oldvalue'])));\n    $redis->zAdd($key, input_convert($_POST['score']), $value);\n  }\n\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?view&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>&key=<?php echo urlencode($_POST['key'])?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n\n// Get the current value.\n$value = '';\n\nif ($edit) {\n  // String\n  if ($_GET['type'] == 'string') {\n    $value = $redis->get($_GET['key']);\n  }\n\n  // Hash\n  else if (($_GET['type'] == 'hash') && isset($_GET['hkey'])) {\n    $value = $redis->hGet($_GET['key'], $_GET['hkey']);\n  }\n\n  // List\n  else if (($_GET['type'] == 'list') && isset($_GET['index'])) {\n    $value = $redis->lIndex($_GET['key'], $_GET['index']);\n  }\n\n  // Set, ZSet\n  else if ((($_GET['type'] == 'set') || ($_GET['type'] == 'zset')) && isset($_GET['value'])) {\n    $value = $_GET['value'];\n  }\n\n  $value = encodeOrDecode('load', $_GET['key'], $value);\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2><?php echo $edit ? 'Edit' : 'Add'?></h2>\n<form action=\"<?php echo format_html(getRelativePath('edit.php'))?>\" method=\"post\">\n\n<p>\n<label for=\"type\">Type:</label>\n<select name=\"type\" id=\"type\">\n<option value=\"string\" <?php echo (isset($_GET['type']) && ($_GET['type'] == 'string')) ? 'selected=\"selected\"' : ''?>>String</option>\n<option value=\"hash\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'hash'  )) ? 'selected=\"selected\"' : ''?>>Hash</option>\n<option value=\"list\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'list'  )) ? 'selected=\"selected\"' : ''?>>List</option>\n<option value=\"set\"    <?php echo (isset($_GET['type']) && ($_GET['type'] == 'set'   )) ? 'selected=\"selected\"' : ''?>>Set</option>\n<option value=\"zset\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'zset'  )) ? 'selected=\"selected\"' : ''?>>ZSet</option>\n</select>\n</p>\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<p id=\"hkeyp\">\n<label for=\"khey\">Hash key:</label>\n<input type=\"text\" name=\"hkey\" id=\"hkey\" size=\"30\" <?php echo isset($_GET['hkey']) ? 'value=\"'.format_html($_GET['hkey']).'\"' : ''?>>\n</p>\n\n<p id=\"indexp\">\n<label for=\"index\">Index:</label>\n<input type=\"text\" name=\"index\" id=\"index\" size=\"30\" <?php echo isset($_GET['index']) ? 'value=\"'.format_html($_GET['index']).'\"' : ''?>> <span class=\"info\">empty to append, -1 to prepend</span>\n</p>\n\n<p id=\"scorep\">\n<label for=\"score\">Score:</label>\n<input type=\"text\" name=\"score\" id=\"score\" size=\"30\" <?php echo isset($_GET['score']) ? 'value=\"'.format_html($_GET['score']).'\"' : ''?>>\n</p>\n\n<p>\n<label for=\"value\">Value:</label>\n<textarea name=\"value\" id=\"value\" cols=\"80\" rows=\"20\"><?php echo format_html($value)?></textarea>\n</p>\n\n<input type=\"hidden\" name=\"oldvalue\" value=\"<?php echo format_html($value)?>\">\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"<?php echo $edit ? 'Edit' : 'Add'?>\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n// Export to redis-cli commands\nfunction export_redis($key, $filter = false, $transform = false) {\n\n  global $redis;\n\n  $type = $redis->type($key);\n\n  // we rename the keys as necessary\n  if($filter !== false && $transform !== false)\n    $outputKey = str_replace($filter, $transform, $key);\n  else\n    $outputKey = $key;\n  \n  // String\n  if ($type == 'string') {\n    echo 'SET \"',addslashes($outputKey),'\" \"',addslashes($redis->get($key)),'\"',PHP_EOL;\n  }\n\n  // Hash\n  else if ($type == 'hash') {\n    $values = $redis->hGetAll($key);\n\n    foreach ($values as $k => $v) {\n      echo 'HSET \"',addslashes($outputKey),'\" \"',addslashes($k),'\" \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n\n  // List\n  else if ($type == 'list') {\n    $size = $redis->lLen($key);\n\n    for ($i = 0; $i < $size; ++$i) {\n      echo 'RPUSH \"',addslashes($outputKey),'\" \"',addslashes($redis->lIndex($key, $i)),'\"',PHP_EOL;\n    }\n  }\n\n  // Set\n  else if ($type == 'set') {\n    $values = $redis->sMembers($key);\n\n    foreach ($values as $v) {\n      echo 'SADD \"',addslashes($outputKey),'\" \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n\n  // ZSet\n  else if ($type == 'zset') {\n    $values = $redis->zRange($key, 0, -1);\n\n    foreach ($values as $v) {\n      $s = $redis->zScore($key, $v);\n\n      echo 'ZADD \"',addslashes($outputKey),'\" ',$s,' \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n}\n\n\n\n// Return the JSON for this key\nfunction export_json($key) {\n  global $redis;\n\n  $type = $redis->type($key);\n\n  // String\n  if ($type == 'string') {\n    $value = $redis->get($key);\n  }\n\n  // Hash\n  else if ($type == 'hash') {\n    $value = $redis->hGetAll($key);\n  }\n\n  // List\n  else if ($type == 'list') {\n    $size  = $redis->lLen($key);\n    $value = array();\n\n    for ($i = 0; $i < $size; ++$i) {\n      $value[] = $redis->lIndex($key, $i);\n    }\n  }\n\n  // Set\n  else if ($type == 'set') {\n    $value = $redis->sMembers($key);\n  }\n\n  // ZSet\n  else if ($type == 'zset') {\n    $value = $redis->zRange($key, 0, -1);\n  }\n\n\n  return $value;\n}\n\n\n\n\n// Export\nif (isset($_POST['type'])) {\n  if ($_POST['type'] == 'json') {\n    $ext = 'js';\n    $ct  = 'application/json';\n  } else {\n    $ext = 'redis';\n    $ct  = 'text/plain';\n  }\n\n\n  header('Content-type: '.$ct.'; charset=utf-8');\n  header('Content-Disposition: inline; filename=\"export.'.$ext.'\"');\n\n  $filter = !empty($_POST['filter']) ? trim($_POST['filter']) : false;\n  $transform = !empty($_POST['transform']) ? trim($_POST['transform']) : false;\n\n  // JSON\n  if ($_POST['type'] == 'json') {\n    \n    // Single key\n    if (isset($_GET['key'])) {\n      echo json_encode(export_json($_GET['key']));\n    } else { // All keys\n      $keys = $redis->keys('*');\n      $vals = array();\n\n      foreach ($keys as $key) {\n\n        // if we have a filter and no match, nothing to do\n        if($filter !== false && stripos($key, $filter) === false)\n          continue;\n        \n        // we rename the keys as necessary\n        if($filter !== false && $transform !== false)\n          $outputKey = str_replace($filter, $transform, $key);\n        else\n          $outputKey = $key;\n        \n        $vals[$outputKey] = export_json($key);\n      }\n\n      echo json_encode($vals);\n    }\n  }\n\n  // Redis Commands\n  else {\n\n    // Single key\n    if (isset($_GET['key'])) {\n      export_redis($_GET['key']);\n    } else { // All keys\n      $keys = $redis->keys('*');\n\n      foreach ($keys as $key) {\n\n        // if we have a filter and no match, we skip\n        if($filter !== false && stripos($key, $filter) === false)\n          continue;\n        \n        export_redis($key, $filter, $transform);\n      }\n    }\n  }\n\n\n  die;\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Export <?php echo isset($_GET['key']) ? format_html($_GET['key']) : ''?></h2>\n\n<form action=\"<?php echo format_html(getRelativePath('export.php'))?>\" method=\"post\">\n\n<p>\n<label for=\"type\">Type:</label>\n<select name=\"type\" id=\"type\">\n<option value=\"redis\" <?php echo (isset($_GET['type']) && ($_GET['type'] == 'redis')) ? 'selected=\"selected\"' : ''?>>Redis</option>\n<option value=\"json\"  <?php echo (isset($_GET['type']) && ($_GET['type'] == 'json' )) ? 'selected=\"selected\"' : ''?>>JSON</option>\n</select>\n</p> \n\n<?php if (!isset($_GET['key'])): ?>\n  <p>\n  <label for=\"filter\">Filter:</label>\n  <input type=\"text\" name=\"filter\" />\n  </p>\n\n  <p>\n  <label for=\"transform\">Tranform:</label>\n  <input type=\"text\" name=\"transform\" />\n  </p>\n<?php endif; ?>\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"Export\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n\n\n// This mess could need some cleanup!\nif (isset($_POST['commands'])) {\n  // Append some spaces at the end to make sure we always have enough arguments for the last function.\n  $commands = str_getcsv(str_replace(array(\"\\r\", \"\\n\"), array('', ' '), $_POST['commands']).'    ', ' ');\n\n  foreach ($commands as &$command) {\n    $command = stripslashes($command);\n  }\n  unset($command);\n\n  for ($i = 0; $i < count($commands); ++$i) {\n    if (empty($commands[$i])) {\n      continue;\n    }\n\n    $commands[$i] = strtoupper($commands[$i]);\n\n    switch ($commands[$i]) {\n      case 'SET': {\n        $redis->set($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'HSET': {\n        $redis->hSet($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n\n      case 'LPUSH': {\n        $redis->lPush($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'RPUSH': {\n        $redis->rPush($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'LSET': {\n        $redis->lSet($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n\n      case 'SADD': {\n        $redis->sAdd($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'ZADD': {\n        $redis->zAdd($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n    }\n  }\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?overview&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Import</h2>\n<form action=\"<?php echo format_html(getRelativePath('import.php'))?>\" method=\"post\">\n\n<p>\n<label for=\"commands\">Commands:<br>\n<br>\n<span class=\"info\">\nValid are:<br>\nSET<br>\nHSET<br>\nLPUSH<br>\nRPUSH<br>\nLSET<br>\nSADD<br>\nZADD\n</span>\n</label>\n<textarea name=\"commands\" id=\"commands\" cols=\"80\" rows=\"20\"></textarea>\n</p>\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"Import\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\nrequire dirname(__FILE__) . '/../vendor/autoload.php';\n\ndefine('PHPREDIS_ADMIN_PATH', dirname(__DIR__));\n\n\n\n\n// These includes are needed by each script.\nif(file_exists(PHPREDIS_ADMIN_PATH . '/includes/config.inc.php')){\n  require_once PHPREDIS_ADMIN_PATH . '/includes/config.inc.php';\n}else{\n  require_once PHPREDIS_ADMIN_PATH . '/includes/config.sample.inc.php';\n}\nrequire_once PHPREDIS_ADMIN_PATH . '/includes/functions.inc.php';\nrequire_once PHPREDIS_ADMIN_PATH . '/includes/page.inc.php';\n\nif (isset($config['login'])) {\n  require_once PHPREDIS_ADMIN_PATH . '/includes/login.inc.php';\n}\n\n\nif (isset($login['servers'])) {\n  $i = current($login['servers']);\n} else {\n  $i = 0;\n}\n\n\nif (isset($_GET['s']) && is_numeric($_GET['s']) && ($_GET['s'] < count($config['servers']))) {\n  $i = $_GET['s'];\n}\n\n$server            = $config['servers'][$i];\n$server['id']      = $i;\n$server['charset'] = isset($server['charset']) && $server['charset'] ? $server['charset'] : false;\n\n\nmb_internal_encoding('utf-8');\n\n\nif (isset($login, $login['servers'])) {\n  if (array_search($i, $login['servers']) === false) {\n    die('You are not allowed to access this database.');\n  }\n\n  foreach ($config['servers'] as $key => $ignore) {\n    if (array_search($key, $login['servers']) === false) {\n      unset($config['servers'][$key]);\n    }\n  }\n}\n\n\nif (!isset($server['db'])) {\n  if (isset($_GET['d']) && is_numeric($_GET['d'])) {\n    $server['db'] = $_GET['d'];\n  } else {\n    $server['db'] = 0;\n  }\n}\n\n\nif (!isset($server['filter'])) {\n  $server['filter'] = '*';\n}\n\n// filter from GET param\nif (isset($_GET['filter']) && $_GET['filter'] != '') {\n    $server['filter'] = $_GET['filter'];\n    if (strpos($server['filter'], '*') === false) {\n      $server['filter'].= '*';\n    }\n}\n\nif (!isset($server['seperator'])) {\n  $server['seperator'] = $config['seperator'];\n}\n\nif (!isset($server['keys'])) {\n  $server['keys'] = $config['keys'];\n}\n\nif (!isset($server['scansize'])) {\n  $server['scansize'] = $config['scansize'];\n}\n\nif (!isset($server['serialization'])) {\n  if (isset($config['serialization'])) {\n    $server['serialization'] = $config['serialization'];\n  }\n}\n\nif (!isset($config['hideEmptyDBs'])) {\n  $config['hideEmptyDBs'] = false;\n}\n\nif (!isset($config['showEmptyNamespaceAsKey'])) {\n  $config['showEmptyNamespaceAsKey'] = false;\n}\n\n// Setup a connection to Redis.\nif(isset($server['scheme']) && $server['scheme'] === 'unix' && $server['path']) {\n  $redis = new Predis\\Client(array('scheme' => 'unix', 'path' => $server['path']));\n} else {\n  $redis = !$server['port'] ? new Predis\\Client($server['host']) : new Predis\\Client('tcp://'.$server['host'].':'.$server['port']);\n}\n\ntry {\n    $redis->connect();\n} catch (Predis\\CommunicationException $exception) {\n    die('ERROR: ' . $exception->getMessage());\n}\n\nif (isset($server['auth'])) {\n  if (!$redis->auth($server['auth'])) {\n    die('ERROR: Authentication failed ('.$server['host'].':'.$server['port'].')');\n  }\n}\n\n\nif ($server['db'] != 0) {\n  if (!$redis->select($server['db'])) {\n    die('ERROR: Selecting database failed ('.$server['host'].':'.$server['port'].','.$server['db'].')');\n  }\n}\n\n?>\n", "<?php\ndefine('LOGIN_PAGE', true);\n\nrequire_once 'includes/common.inc.php';\n\n$page['css'][] = 'login';\n\nrequire 'includes/header.inc.php';\n\n// Layout borrowed from http://getbootstrap.com/examples/signin/\n?>\n\n<h1 class=\"logo\">phpRedisAdmin</h1>\n\n<form class=\"form-signin\" method=\"post\" action=\"login.php\">\n    <h2 class=\"form-signin-heading\">Please log in</h2>\n\n    <?php if (isset($_POST['username']) || isset($_POST['password'])): ?>\n        <div class=\"invalid-credentials\">\n            <h3>Invalid username/password</h3>\n            <p>Please try again.</p>\n        </div>\n    <?php endif; ?>\n\n    <label for=\"inputUser\" class=\"sr-only\">Username</label>\n    <input type=\"text\" name=\"username\" id=\"inputUser\" class=\"form-control\"\n           placeholder=\"Username\"\n           value=\"<?= isset($_POST['username']) ? htmlentities($_POST['username'], defined('ENT_SUBSTITUTE') ? (ENT_QUOTES | ENT_SUBSTITUTE) : ENT_QUOTES, 'utf-8') : '' ?>\"\n           required <?= isset($_POST['username']) ? '' : 'autofocus' ?>>\n\n    <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\"\n           placeholder=\"Password\"\n           required <?= isset($_POST['username']) ? 'autofocus' : '' ?>>\n\n    <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Log in</button>\n</form>\n\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n\n\nif (isset($_POST['old'], $_POST['key'])) {\n  if (strlen($_POST['key']) > $config['maxkeylen']) {\n    die('ERROR: Your key is to long (max length is '.$config['maxkeylen'].')');\n  }\n\n  $redis->rename($_POST['old'], $_POST['key']);\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?view&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>&key=<?php echo urlencode($_POST['key'])?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Edit Name of <?php echo format_html($_GET['key'])?></h2>\n<form action=\"<?php echo format_html(getRelativePath('rename.php'))?>\" method=\"post\">\n\n<input type=\"hidden\" name=\"old\" value=\"<?php echo format_html($_GET['key'])?>\">\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"Rename\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n\n\nif (isset($_POST['key'], $_POST['ttl'])) {\n  if ($_POST['ttl'] == -1) {\n    $redis->persist($_POST['key']);\n  } else {\n    $redis->expire($_POST['key'], $_POST['ttl']);\n  }\n\n  header('Location: view.php?key='.urlencode($_POST['key']));\n  die;\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Edit TTL</h2>\n<form action=\"<?php echo format_html(getRelativePath('ttl.php'))?>\" method=\"post\">\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<p>\n<label for=\"ttl\"><abbr title=\"Time To Live\">TTL</abbr>:</label>\n<input type=\"text\" name=\"ttl\" id=\"ttl\" size=\"30\" <?php echo isset($_GET['ttl']) ? 'value=\"'.format_html($_GET['ttl']).'\"' : ''?>> <span class=\"info\">(-1 to remove the TTL)</span>\n</p>\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"Edit TTL\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"], "fixing_code": ["<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n\n\n// Are we editing or creating a new key?\n$edit = false;\n\nif (isset($_GET['key'], $_GET['type'])) {\n  if (($_GET['type'] == 'string') ||\n      (($_GET['type'] == 'hash') && isset($_GET['hkey']))  ||\n      (($_GET['type'] == 'list') && isset($_GET['index'])) ||\n      (($_GET['type'] == 'set' ) && isset($_GET['value'])) ||\n      (($_GET['type'] == 'zset') && isset($_GET['value']))) {\n    $edit = true;\n  }\n}\n\n\n\n\nif (isset($_POST['type'], $_POST['key'], $_POST['value'])) {\n  // Don't allow keys that are to long (Redis supports keys that can be way to long to put in an url).\n  if (strlen($_POST['key']) > $config['maxkeylen']) {\n    die('ERROR: Your key is to long (max length is '.$config['maxkeylen'].')');\n  }\n\n  $key   = input_convert($_POST['key']);\n  $value = input_convert($_POST['value']);\n  $value = encodeOrDecode('save', $key, $value);\n\n  if ($value === false || is_null($value)) {\n    die('ERROR: could not encode value');\n  }\n\n  // String\n  if ($_POST['type'] == 'string') {\n    $redis->set($key, $value);\n  }\n\n  // Hash\n  else if (($_POST['type'] == 'hash') && isset($_POST['hkey'])) {\n    if (strlen($_POST['hkey']) > $config['maxkeylen']) {\n      die('ERROR: Your hash key is to long (max length is '.$config['maxkeylen'].')');\n    }\n\n    if ($edit && !$redis->hExists($key, input_convert($_POST['hkey']))) {\n      $redis->hDel($key, input_convert($_GET['hkey']));\n    }\n\n    $redis->hSet($key, input_convert($_POST['hkey']), $value);\n  }\n\n  // List\n  else if (($_POST['type'] == 'list') && isset($_POST['index'])) {\n    $size = $redis->lLen($key);\n\n    if (($_POST['index'] == '') ||\n        ($_POST['index'] == $size)) {\n      // Push it at the end\n      $redis->rPush($key, $value);\n    } else if ($_POST['index'] == -1) {\n      // Push it at the start\n      $redis->lPush($key, $value);\n    } else if (($_POST['index'] >= 0) &&\n               ($_POST['index'] < $size)) {\n      // Overwrite an index\n      $redis->lSet($key, input_convert($_POST['index']), $value);\n    } else {\n      die('ERROR: Out of bounds index');\n    }\n  }\n\n  // Set\n  else if ($_POST['type'] == 'set') {\n    if ($_POST['value'] != $_POST['oldvalue']) {\n      // The only way to edit a Set value is to add it and remove the old value.\n      $redis->sRem($key, encodeOrDecode('save', $key, input_convert($_POST['oldvalue'])));\n      $redis->sAdd($key, $value);\n    }\n  }\n\n  // ZSet\n  else if (($_POST['type'] == 'zset') && isset($_POST['score'])) {\n    // The only way to edit a ZSet value is to add it and remove the old value.\n    $redis->zRem($key, encodeOrDecode('save', $key, input_convert($_POST['oldvalue'])));\n    $redis->zAdd($key, input_convert($_POST['score']), $value);\n  }\n\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?view&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>&key=<?php echo urlencode($_POST['key'])?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n\n// Get the current value.\n$value = '';\n\nif ($edit) {\n  // String\n  if ($_GET['type'] == 'string') {\n    $value = $redis->get($_GET['key']);\n  }\n\n  // Hash\n  else if (($_GET['type'] == 'hash') && isset($_GET['hkey'])) {\n    $value = $redis->hGet($_GET['key'], $_GET['hkey']);\n  }\n\n  // List\n  else if (($_GET['type'] == 'list') && isset($_GET['index'])) {\n    $value = $redis->lIndex($_GET['key'], $_GET['index']);\n  }\n\n  // Set, ZSet\n  else if ((($_GET['type'] == 'set') || ($_GET['type'] == 'zset')) && isset($_GET['value'])) {\n    $value = $_GET['value'];\n  }\n\n  $value = encodeOrDecode('load', $_GET['key'], $value);\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2><?php echo $edit ? 'Edit' : 'Add'?></h2>\n<form action=\"<?php echo format_html(getRelativePath('edit.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<p>\n<label for=\"type\">Type:</label>\n<select name=\"type\" id=\"type\">\n<option value=\"string\" <?php echo (isset($_GET['type']) && ($_GET['type'] == 'string')) ? 'selected=\"selected\"' : ''?>>String</option>\n<option value=\"hash\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'hash'  )) ? 'selected=\"selected\"' : ''?>>Hash</option>\n<option value=\"list\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'list'  )) ? 'selected=\"selected\"' : ''?>>List</option>\n<option value=\"set\"    <?php echo (isset($_GET['type']) && ($_GET['type'] == 'set'   )) ? 'selected=\"selected\"' : ''?>>Set</option>\n<option value=\"zset\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'zset'  )) ? 'selected=\"selected\"' : ''?>>ZSet</option>\n</select>\n</p>\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<p id=\"hkeyp\">\n<label for=\"khey\">Hash key:</label>\n<input type=\"text\" name=\"hkey\" id=\"hkey\" size=\"30\" <?php echo isset($_GET['hkey']) ? 'value=\"'.format_html($_GET['hkey']).'\"' : ''?>>\n</p>\n\n<p id=\"indexp\">\n<label for=\"index\">Index:</label>\n<input type=\"text\" name=\"index\" id=\"index\" size=\"30\" <?php echo isset($_GET['index']) ? 'value=\"'.format_html($_GET['index']).'\"' : ''?>> <span class=\"info\">empty to append, -1 to prepend</span>\n</p>\n\n<p id=\"scorep\">\n<label for=\"score\">Score:</label>\n<input type=\"text\" name=\"score\" id=\"score\" size=\"30\" <?php echo isset($_GET['score']) ? 'value=\"'.format_html($_GET['score']).'\"' : ''?>>\n</p>\n\n<p>\n<label for=\"value\">Value:</label>\n<textarea name=\"value\" id=\"value\" cols=\"80\" rows=\"20\"><?php echo format_html($value)?></textarea>\n</p>\n\n<input type=\"hidden\" name=\"oldvalue\" value=\"<?php echo format_html($value)?>\">\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"<?php echo $edit ? 'Edit' : 'Add'?>\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n// Export to redis-cli commands\nfunction export_redis($key, $filter = false, $transform = false) {\n\n  global $redis;\n\n  $type = $redis->type($key);\n\n  // we rename the keys as necessary\n  if($filter !== false && $transform !== false)\n    $outputKey = str_replace($filter, $transform, $key);\n  else\n    $outputKey = $key;\n  \n  // String\n  if ($type == 'string') {\n    echo 'SET \"',addslashes($outputKey),'\" \"',addslashes($redis->get($key)),'\"',PHP_EOL;\n  }\n\n  // Hash\n  else if ($type == 'hash') {\n    $values = $redis->hGetAll($key);\n\n    foreach ($values as $k => $v) {\n      echo 'HSET \"',addslashes($outputKey),'\" \"',addslashes($k),'\" \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n\n  // List\n  else if ($type == 'list') {\n    $size = $redis->lLen($key);\n\n    for ($i = 0; $i < $size; ++$i) {\n      echo 'RPUSH \"',addslashes($outputKey),'\" \"',addslashes($redis->lIndex($key, $i)),'\"',PHP_EOL;\n    }\n  }\n\n  // Set\n  else if ($type == 'set') {\n    $values = $redis->sMembers($key);\n\n    foreach ($values as $v) {\n      echo 'SADD \"',addslashes($outputKey),'\" \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n\n  // ZSet\n  else if ($type == 'zset') {\n    $values = $redis->zRange($key, 0, -1);\n\n    foreach ($values as $v) {\n      $s = $redis->zScore($key, $v);\n\n      echo 'ZADD \"',addslashes($outputKey),'\" ',$s,' \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n}\n\n\n\n// Return the JSON for this key\nfunction export_json($key) {\n  global $redis;\n\n  $type = $redis->type($key);\n\n  // String\n  if ($type == 'string') {\n    $value = $redis->get($key);\n  }\n\n  // Hash\n  else if ($type == 'hash') {\n    $value = $redis->hGetAll($key);\n  }\n\n  // List\n  else if ($type == 'list') {\n    $size  = $redis->lLen($key);\n    $value = array();\n\n    for ($i = 0; $i < $size; ++$i) {\n      $value[] = $redis->lIndex($key, $i);\n    }\n  }\n\n  // Set\n  else if ($type == 'set') {\n    $value = $redis->sMembers($key);\n  }\n\n  // ZSet\n  else if ($type == 'zset') {\n    $value = $redis->zRange($key, 0, -1);\n  }\n\n\n  return $value;\n}\n\n\n\n\n// Export\nif (isset($_POST['type'])) {\n  if ($_POST['type'] == 'json') {\n    $ext = 'js';\n    $ct  = 'application/json';\n  } else {\n    $ext = 'redis';\n    $ct  = 'text/plain';\n  }\n\n\n  header('Content-type: '.$ct.'; charset=utf-8');\n  header('Content-Disposition: inline; filename=\"export.'.$ext.'\"');\n\n  $filter = !empty($_POST['filter']) ? trim($_POST['filter']) : false;\n  $transform = !empty($_POST['transform']) ? trim($_POST['transform']) : false;\n\n  // JSON\n  if ($_POST['type'] == 'json') {\n    \n    // Single key\n    if (isset($_GET['key'])) {\n      echo json_encode(export_json($_GET['key']));\n    } else { // All keys\n      $keys = $redis->keys('*');\n      $vals = array();\n\n      foreach ($keys as $key) {\n\n        // if we have a filter and no match, nothing to do\n        if($filter !== false && stripos($key, $filter) === false)\n          continue;\n        \n        // we rename the keys as necessary\n        if($filter !== false && $transform !== false)\n          $outputKey = str_replace($filter, $transform, $key);\n        else\n          $outputKey = $key;\n        \n        $vals[$outputKey] = export_json($key);\n      }\n\n      echo json_encode($vals);\n    }\n  }\n\n  // Redis Commands\n  else {\n\n    // Single key\n    if (isset($_GET['key'])) {\n      export_redis($_GET['key']);\n    } else { // All keys\n      $keys = $redis->keys('*');\n\n      foreach ($keys as $key) {\n\n        // if we have a filter and no match, we skip\n        if($filter !== false && stripos($key, $filter) === false)\n          continue;\n        \n        export_redis($key, $filter, $transform);\n      }\n    }\n  }\n\n\n  die;\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Export <?php echo isset($_GET['key']) ? format_html($_GET['key']) : ''?></h2>\n\n<form action=\"<?php echo format_html(getRelativePath('export.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<p>\n<label for=\"type\">Type:</label>\n<select name=\"type\" id=\"type\">\n<option value=\"redis\" <?php echo (isset($_GET['type']) && ($_GET['type'] == 'redis')) ? 'selected=\"selected\"' : ''?>>Redis</option>\n<option value=\"json\"  <?php echo (isset($_GET['type']) && ($_GET['type'] == 'json' )) ? 'selected=\"selected\"' : ''?>>JSON</option>\n</select>\n</p> \n\n<?php if (!isset($_GET['key'])): ?>\n  <p>\n  <label for=\"filter\">Filter:</label>\n  <input type=\"text\" name=\"filter\" />\n  </p>\n\n  <p>\n  <label for=\"transform\">Tranform:</label>\n  <input type=\"text\" name=\"transform\" />\n  </p>\n<?php endif; ?>\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"Export\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n\n\n// This mess could need some cleanup!\nif (isset($_POST['commands'])) {\n  // Append some spaces at the end to make sure we always have enough arguments for the last function.\n  $commands = str_getcsv(str_replace(array(\"\\r\", \"\\n\"), array('', ' '), $_POST['commands']).'    ', ' ');\n\n  foreach ($commands as &$command) {\n    $command = stripslashes($command);\n  }\n  unset($command);\n\n  for ($i = 0; $i < count($commands); ++$i) {\n    if (empty($commands[$i])) {\n      continue;\n    }\n\n    $commands[$i] = strtoupper($commands[$i]);\n\n    switch ($commands[$i]) {\n      case 'SET': {\n        $redis->set($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'HSET': {\n        $redis->hSet($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n\n      case 'LPUSH': {\n        $redis->lPush($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'RPUSH': {\n        $redis->rPush($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'LSET': {\n        $redis->lSet($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n\n      case 'SADD': {\n        $redis->sAdd($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'ZADD': {\n        $redis->zAdd($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n    }\n  }\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?overview&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Import</h2>\n<form action=\"<?php echo format_html(getRelativePath('import.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<p>\n<label for=\"commands\">Commands:<br>\n<br>\n<span class=\"info\">\nValid are:<br>\nSET<br>\nHSET<br>\nLPUSH<br>\nRPUSH<br>\nLSET<br>\nSADD<br>\nZADD\n</span>\n</label>\n<textarea name=\"commands\" id=\"commands\" cols=\"80\" rows=\"20\"></textarea>\n</p>\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"Import\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\nrequire dirname(__FILE__) . '/../vendor/autoload.php';\n\ndefine('PHPREDIS_ADMIN_PATH', dirname(__DIR__));\n\n\nif (session_status() !== PHP_SESSION_DISABLED) {\n  session_start();\n\n  if (isset($_SESSION['phpredisadmin_csrf'])) {\n    $csrfToken = $_SESSION['phpredisadmin_csrf'];\n  } else {\n    $csrfToken = bin2hex(random_bytes(16));\n    $_SESSION['phpredisadmin_csrf'] = $csrfToken;\n  }\n} else {\n  $csrfToken = 'nosession';\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  if ($_POST['csrf'] !== $csrfToken) {\n    die('bad csrf token');\n  }\n}\n\n\n// These includes are needed by each script.\nif(file_exists(PHPREDIS_ADMIN_PATH . '/includes/config.inc.php')){\n  require_once PHPREDIS_ADMIN_PATH . '/includes/config.inc.php';\n}else{\n  require_once PHPREDIS_ADMIN_PATH . '/includes/config.sample.inc.php';\n}\nrequire_once PHPREDIS_ADMIN_PATH . '/includes/functions.inc.php';\nrequire_once PHPREDIS_ADMIN_PATH . '/includes/page.inc.php';\n\nif (isset($config['login'])) {\n  require_once PHPREDIS_ADMIN_PATH . '/includes/login.inc.php';\n}\n\n\nif (isset($login['servers'])) {\n  $i = current($login['servers']);\n} else {\n  $i = 0;\n}\n\n\nif (isset($_GET['s']) && is_numeric($_GET['s']) && ($_GET['s'] < count($config['servers']))) {\n  $i = $_GET['s'];\n}\n\n$server            = $config['servers'][$i];\n$server['id']      = $i;\n$server['charset'] = isset($server['charset']) && $server['charset'] ? $server['charset'] : false;\n\n\nmb_internal_encoding('utf-8');\n\n\nif (isset($login, $login['servers'])) {\n  if (array_search($i, $login['servers']) === false) {\n    die('You are not allowed to access this database.');\n  }\n\n  foreach ($config['servers'] as $key => $ignore) {\n    if (array_search($key, $login['servers']) === false) {\n      unset($config['servers'][$key]);\n    }\n  }\n}\n\n\nif (!isset($server['db'])) {\n  if (isset($_GET['d']) && is_numeric($_GET['d'])) {\n    $server['db'] = $_GET['d'];\n  } else {\n    $server['db'] = 0;\n  }\n}\n\n\nif (!isset($server['filter'])) {\n  $server['filter'] = '*';\n}\n\n// filter from GET param\nif (isset($_GET['filter']) && $_GET['filter'] != '') {\n    $server['filter'] = $_GET['filter'];\n    if (strpos($server['filter'], '*') === false) {\n      $server['filter'].= '*';\n    }\n}\n\nif (!isset($server['seperator'])) {\n  $server['seperator'] = $config['seperator'];\n}\n\nif (!isset($server['keys'])) {\n  $server['keys'] = $config['keys'];\n}\n\nif (!isset($server['scansize'])) {\n  $server['scansize'] = $config['scansize'];\n}\n\nif (!isset($server['serialization'])) {\n  if (isset($config['serialization'])) {\n    $server['serialization'] = $config['serialization'];\n  }\n}\n\nif (!isset($config['hideEmptyDBs'])) {\n  $config['hideEmptyDBs'] = false;\n}\n\nif (!isset($config['showEmptyNamespaceAsKey'])) {\n  $config['showEmptyNamespaceAsKey'] = false;\n}\n\n// Setup a connection to Redis.\nif(isset($server['scheme']) && $server['scheme'] === 'unix' && $server['path']) {\n  $redis = new Predis\\Client(array('scheme' => 'unix', 'path' => $server['path']));\n} else {\n  $redis = !$server['port'] ? new Predis\\Client($server['host']) : new Predis\\Client('tcp://'.$server['host'].':'.$server['port']);\n}\n\ntry {\n    $redis->connect();\n} catch (Predis\\CommunicationException $exception) {\n    die('ERROR: ' . $exception->getMessage());\n}\n\nif (isset($server['auth'])) {\n  if (!$redis->auth($server['auth'])) {\n    die('ERROR: Authentication failed ('.$server['host'].':'.$server['port'].')');\n  }\n}\n\n\nif ($server['db'] != 0) {\n  if (!$redis->select($server['db'])) {\n    die('ERROR: Selecting database failed ('.$server['host'].':'.$server['port'].','.$server['db'].')');\n  }\n}\n\n?>\n", "<?php\ndefine('LOGIN_PAGE', true);\n\nrequire_once 'includes/common.inc.php';\n\n$page['css'][] = 'login';\n\nrequire 'includes/header.inc.php';\n\n// Layout borrowed from http://getbootstrap.com/examples/signin/\n?>\n\n<h1 class=\"logo\">phpRedisAdmin</h1>\n\n<form class=\"form-signin\" method=\"post\" action=\"login.php\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n    <h2 class=\"form-signin-heading\">Please log in</h2>\n\n    <?php if (isset($_POST['username']) || isset($_POST['password'])): ?>\n        <div class=\"invalid-credentials\">\n            <h3>Invalid username/password</h3>\n            <p>Please try again.</p>\n        </div>\n    <?php endif; ?>\n\n    <label for=\"inputUser\" class=\"sr-only\">Username</label>\n    <input type=\"text\" name=\"username\" id=\"inputUser\" class=\"form-control\"\n           placeholder=\"Username\"\n           value=\"<?= isset($_POST['username']) ? htmlentities($_POST['username'], defined('ENT_SUBSTITUTE') ? (ENT_QUOTES | ENT_SUBSTITUTE) : ENT_QUOTES, 'utf-8') : '' ?>\"\n           required <?= isset($_POST['username']) ? '' : 'autofocus' ?>>\n\n    <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\"\n           placeholder=\"Password\"\n           required <?= isset($_POST['username']) ? 'autofocus' : '' ?>>\n\n    <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Log in</button>\n</form>\n\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n\n\nif (isset($_POST['old'], $_POST['key'])) {\n  if (strlen($_POST['key']) > $config['maxkeylen']) {\n    die('ERROR: Your key is to long (max length is '.$config['maxkeylen'].')');\n  }\n\n  $redis->rename($_POST['old'], $_POST['key']);\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?view&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>&key=<?php echo urlencode($_POST['key'])?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Edit Name of <?php echo format_html($_GET['key'])?></h2>\n<form action=\"<?php echo format_html(getRelativePath('rename.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<input type=\"hidden\" name=\"old\" value=\"<?php echo format_html($_GET['key'])?>\">\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"Rename\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n", "<?php\n\nrequire_once 'includes/common.inc.php';\n\n\n\n\nif (isset($_POST['key'], $_POST['ttl'])) {\n  if ($_POST['ttl'] == -1) {\n    $redis->persist($_POST['key']);\n  } else {\n    $redis->expire($_POST['key'], $_POST['ttl']);\n  }\n\n  header('Location: view.php?key='.urlencode($_POST['key']));\n  die;\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Edit TTL</h2>\n<form action=\"<?php echo format_html(getRelativePath('ttl.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<p>\n<label for=\"ttl\"><abbr title=\"Time To Live\">TTL</abbr>:</label>\n<input type=\"text\" name=\"ttl\" id=\"ttl\" size=\"30\" <?php echo isset($_GET['ttl']) ? 'value=\"'.format_html($_GET['ttl']).'\"' : ''?>> <span class=\"info\">(-1 to remove the TTL)</span>\n</p>\n\n<p>\n<input type=\"submit\" class=\"button\" value=\"Edit TTL\">\n</p>\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"], "filenames": ["edit.php", "export.php", "import.php", "includes/common.inc.php", "login.php", "rename.php", "ttl.php"], "buggy_code_start_loc": [147, 189, 94, 6, 15, 38, 29], "buggy_code_end_loc": [147, 189, 94, 6, 15, 38, 29], "fixing_code_start_loc": [148, 190, 95, 7, 16, 39, 30], "fixing_code_end_loc": [149, 191, 96, 25, 17, 40, 31], "type": "CWE-352", "message": "A vulnerability, which was classified as problematic, was found in phpRedisAdmin up to 1.17.3. This affects an unknown part. The manipulation leads to cross-site request forgery. It is possible to initiate the attack remotely. Upgrading to version 1.18.0 is able to address this issue. The name of the patch is b9039adbb264c81333328faa9575ecf8e0d2be94. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216471.", "other": {"cve": {"id": "CVE-2021-4268", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-21T19:15:13.360", "lastModified": "2022-12-28T18:52:16.203", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in phpRedisAdmin up to 1.17.3. This affects an unknown part. The manipulation leads to cross-site request forgery. It is possible to initiate the attack remotely. Upgrading to version 1.18.0 is able to address this issue. The name of the patch is b9039adbb264c81333328faa9575ecf8e0d2be94. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216471."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}, {"lang": "en", "value": "CWE-862"}, {"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpredisadmin_project:phpredisadmin:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.18.0", "matchCriteriaId": "6BEF86E4-4994-4E28-8648-CF2BDBCA481F"}]}]}], "references": [{"url": "https://github.com/erikdubbelboer/phpRedisAdmin/commit/b9039adbb264c81333328faa9575ecf8e0d2be94", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/erikdubbelboer/phpRedisAdmin/releases/tag/v1.18.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216471", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/erikdubbelboer/phpRedisAdmin/commit/b9039adbb264c81333328faa9575ecf8e0d2be94"}}