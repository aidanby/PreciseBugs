{"buggy_code": ["## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n##\n## Globals\n##\n#set ($canView = !$doc.isNew() && $xwiki.hasAccessLevel('view'))\n## Note: For Copy we would need to check that the user has edit permissions\n## (since there's no create permission) for the *target* location. Since the\n## user selects the target location in the Copy UI, we need to display the\n## copy menu action. Checking if the user (or guest) doesn't have edit\n## permissions on the whole wiki (including subwiki) is costly. Thus FTM we\n## only check for view permissions.\n#set ($canCopy = $canView)\n\n#set ($nbUsers = $doc.getObjectNumbers(\"XWiki.XWikiUsers\"))\n#set ($nbGroups = $doc.getObjectNumbers(\"XWiki.XWikiGroups\"))\n#set ($hasAdminRights = $xwiki.hasAccessLevel('admin'))\n\n#if ($nbUsers == 0 && $nbGroups == 0 || $hasAdminRights)\n  #set ($canDelete = !$doc.isNew() && $xwiki.hasAccessLevel('delete'))\n#else\n  #set ($canDelete = false)\n#end\n#set ($canShare = $canView && $xwiki.exists('XWiki.SharePage') && !$isGuest)\n## Add rel='nofollow' to prevent search crawler from navigating the links and indexing them in search results\n#set ($extraAttributes = 'rel=\"nofollow\"')\n\n##\n## Display the main menus\n##\n#if ($displayContentMenu)\n  #template(\"menus_macros.vm\")\n  ##\n  #set ($topStaticExtensions = [])\n  ##\n  ## TRANSLATE menu\n  ##\n  #define ($translateMenu)\n    ## Output the translate menu if all the following conditions are met:\n    ## * multilingual is on\n    ## * the user can edit the current document\n    ## * the user is viewing the original document version\n    ## * the document is translatable (either has a default locale specified or it has existing translations)\n    ## * the current UI locale doesn't match the original document locale\n    #if (\n      $displayTranslateMenu &&\n      $xwiki.isMultiLingual() &&\n      $hasEdit && !$isReadOnly &&\n      $xcontext.action == 'view' && $tdoc.realLocale == $doc.realLocale &&\n      (\"$!doc.realLocale\" != '' || !$doc.translationLocales.isEmpty()) &&\n      $doc.realLocale != $xcontext.locale\n    )\n      #displayTranslateMenu()\n    #end\n  #end\n  #set ($discard = $topStaticExtensions.add( { 'content': \"$!translateMenu\", 'order': 5000}))\n  ##\n  ## EDIT menu\n  ##\n  #define ($editMenu)\n    #if ($displayEditMenu && $hasEdit && !$isReadOnly)\n      #displayEditMenu()\n    #end\n  #end\n  #set ($discard = $topStaticExtensions.add( { 'content': \"$!editMenu\", 'order': 10000}))\n  ##\n  ## CREATE menu\n  ##\n  #define ($createMenu)\n    ## Display a create menu if the user has the right to create spaces in the current wiki (since the Create UI supports)\n    ## creating pages in other places in the hierarchy) or if the user has right to create pages in the current location.\n    ## This supports the following 2 use cases for non-admin users:\n    ## - I'm on a space where I don't have permissions to create pages but I have the right to create pages in the wiki.\n    ##   Example: I'm on my user profile which is located in the XWiki space (in which users don't have Edit rights by\n    ##   default). I can see the Create button. See https://jira.xwiki.org/browse/XWIKI-10999\n    ## - I don't have the right to create pages in the wiki but I have the right to create pages under a given hierarchy.\n    ##   Example: I'm allowed to create pages only in the Sandbox space and I'm there. I can see the Create button.\n    ##   See https://jira.xwiki.org/browse/XWIKI-13847\n    #if ($displayCreateMenu && ($hasCreateSpace || $hasCreatePage))\n      #displayCreateButton()\n    #end\n  #end\n  #set ($discard = $topStaticExtensions.add( { 'content': \"$!createMenu\", 'order': 20000}))\n  ##\n  ## MORE ACTIONS menu\n  ##\n  #define ($actionsMenu)\n    ## Note: Both the admin actions and the more actions menus are now merged into one.\n    #if ($displayAdminMenu || $displayMoreActionsMenu)\n      #displayOptionsMenu()\n      #if ($canView)\n        #template(\"export_modal.vm\")\n        #exportModal()\n      #end\n    #end\n  #end\n  #set ($discard = $topStaticExtensions.add( { 'content': \"$!actionsMenu\", 'order': 40000}))\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #define ($menuContent)\n    #displaySecureUIX('org.xwiki.plaftorm.menu.content', $topStaticExtensions)\n  #end\n  ##\n  ## Display the menu\n  ##\n  <div id=\"contentmenu\" class=\"pull-right actionmenu\">\n    $menuContent\n\n    #if($keyboardShortcutsEnabled)\n      #keyboardShortcuts()\n    #end\n  </div>\n#end\n\n#**\n * Display a menu if it has some content.\n *\n * @param $id the id of the menu\n * @param $icon the icon of the menu\n * @param $content the content of the menu\n * @param $titleKey translation key of the link title to use\n * @param $titleAsLabel if the link title should also be used as link label\n * @param $actionUrl (optional) the link of the top menu entry.\n *   If not provided, the top menu entry will act as an activator for the dropdown\n * @param $extraAttribute (optional) additional attributes to add (such as ref=\"nofollow\" for example)\n *   By default those attribute should fit an anchor.\n *   Do take care that if the $actionUrl provided is empty,\n *   the $extraAttributes are going to be used for a `button` instead of an `anchor`\n *   and should have values fit to a `button`.\n * @since 7.3M2\n *#\n#macro(displayMenu $id $icon $menuContent $titleKey $titleAsLabel $actionUrl $extraAttribute)\n  <div class=\"btn-group\" id=\"$id\">\n    <#if (\"$!actionUrl\" == '')button#{else}a#end class=\"btn btn-default#if (\"$!actionUrl\" == '') dropdown-toggle#end\" title=\"$services.localization.render($titleKey)\"##\n    #if (\"$!actionUrl\" != '')\n      href=\"$actionUrl\"\n    #else\n      data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\n    #end\n    #if (\"$!extraAttribute\" != '') ${extraAttribute}#end>\n      $services.icon.renderHTML($icon)\n      #if ($titleAsLabel)\n        <span class=\"btn-label\">$services.localization.render($titleKey)</span>\n      #end\n    </#if (\"$!actionUrl\" == '')button#{else}a#end>\n    #if ($stringtool.isNotBlank(\"$!menuContent\"))\n      #if (\"$!actionUrl\" != '')\n        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          <span class=\"caret\"></span>\n          <span class=\"sr-only\">$services.localization.render('core.menu.toggleDropdown')</span>\n        </button>\n      #end\n      <ul class=\"dropdown-menu #if (\"$!actionUrl\" == '')dropdown-menu-right#end\">\n        $menuContent\n      </ul>\n    #end\n  </div>\n#end\n\n#**\n * Display UI extensions if the author of the UIX has the ADMIN right on the current wiki\n *\n * @param $name the name of the UI extension to display\n * @param $staticExtensions (optional) an array of static extensions to display along with the regular uix.\n *         e.g. [ { 'content': 'someHTMLcontent', 'order': 20000, 'separator': true } ]\n * @param $count out parameter containing the number of entries displayed in the menu\n * @since 7.3M1\n *\n * TODO: replace this macro to stop having \"static extensions\" but a mechanism to have real UI Extensions in templates.\n *#\n#macro(displaySecureUIX $name $staticExtensions $count)\n  #set ($count = 0)\n  ## Add the static UIX to the list of UIX to display\n  #set ($extensions = [])\n  #set ($discard = $extensions.addAll($staticExtensions))\n  ## Add the dynamic UIX to the list of of UIX to display\n  #foreach($uix in $services.uix.getExtensions($name))\n    #if ($services.security.authorization.hasAccess('admin', $uix.authorReference, $services.wiki.currentWikiDescriptor.reference))\n      #set ($separator = (\"$!uix.getParameters().separator\" == 'true'))\n      #set ($order = $numbertool.toNumber($uix.getParameters().order).intValue())\n      #if (\"$!order\" == '')\n        ## Fallback for incomplete/invalid extension orders to avoid breaking the display.\n        #set ($order = 0)\n      #end\n      #set ($uixMap = { 'content'  : $services.rendering.render($uix.execute(), 'html/5.0'),\n                        'order'    : $order,\n                        'separator': $separator})\n      #set ($discard = $extensions.add($uixMap))\n    #end\n  #end\n  ## Display them, sorted by order\n  #set ($canHaveMenuSeparator = false)\n  #foreach($uix in $collectiontool.sort($extensions, 'order'))\n    ## Maybe display a menu separator\n    #if (\"$!uix.separator\" == 'true' && $canHaveMenuSeparator)\n      #submenuseparator()\n      #set ($canHaveMenuSeparator = false)\n    #end\n    #set ($content = $uix.content.toString())\n    $content\n    #if ($stringtool.isNotBlank($content))\n      #set ($canHaveMenuSeparator = true)\n      #set ($count = $count + 1)\n    #end\n  #end\n  #setVariable(\"$count\", $count)\n#end\n\n#macro (submenuheader $titleKey)\n  <li class=\"dropdown-header\">$services.localization.render($titleKey)</li>\n#end\n\n#**\n * Display the create button\n *#\n#macro(displayCreateButton)\n  #displayMenu('tmCreate', 'add', '', 'core.menu.create', true, $doc.getURL('create'), $extraAttributes)\n#end\n\n#**\n * Display the Translate button used to translate the current document in the current locale.\n *#\n#macro(displayTranslateMenu)\n  #set ($translateHint = $services.localization.render('core.menu.translate.hint',\n    [$xcontext.locale.getDisplayName($xcontext.locale)]))\n  #set ($translateDetails = $services.localization.render('core.menu.translate.details', [\n    $doc.realLocale.getDisplayName($xcontext.locale),\n    $xcontext.locale.getDisplayName($xcontext.locale)\n  ]))\n  #set ($translateAttrs = \"$!extraAttributes tabindex='0' data-toggle='popover' data-trigger='hover' \" +\n    \"data-container='body' data-placement='bottom' data-title='$escapetool.xml($translateHint)' \" +\n    \"data-content='$escapetool.xml($translateDetails)'\")\n  #set ($translateURL = $doc.getURL('edit', $escapetool.url({'language': $xcontext.locale})))\n  #displayMenu('tmTranslate', 'translate', '', 'core.menu.translate', true, $translateURL, $translateAttrs)\n#end\n\n#**\n * Display the edit menu\n *#\n#macro(displayEditMenu)\n  #set ($defaultEditURL = $doc.getURL($doc.getDefaultEditMode(), $!languageparams))\n  #set ($staticExtensions = [])\n  #if ($isAdvancedUser)\n    ##\n    ## WYSIWYG\n    ##\n    ## Check if the WYSIWYG supports the current document's syntax and if so add a menu entry to edit the current\n    ## document with the WYSIWYG editor.\n    #define ($editWYSIWYG)\n      #if ($services.wysiwyg.isSyntaxSupported($tdoc.syntax.toIdString()))\n        #submenuitem($doc.getURL('edit', \"$!{languageparams}#if ($languageparams != '')&amp;#{end}editor=wysiwyg\") $services.localization.render('core.menu.edit.wysiwyg') 'tmEditWysiwyg', '', 'pencil', $extraAttributes)\n      #end\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $editWYSIWYG, 'order': 20000, 'separator': true}))\n    ##\n    ## WIKI EDITOR\n    ##\n    #define ($wikiEditor)\n      #submenuitem($doc.getURL('edit', \"$!{languageparams}#if ($languageparams != '')&amp;#{end}editor=wiki\") $services.localization.render('core.menu.edit.wiki') 'tmEditWiki', '', 'wrench', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $wikiEditor, 'order': 30000}))\n    ##\n    ## INLINE EDITOR\n    ##\n    #define ($inlineEditor)\n      #submenuitem($doc.getURL('edit', \"$!{languageparams}#if ($languageparams != '')&amp;#{end}editor=inline\") $services.localization.render('core.menu.edit.inline') 'tmEditInline', '', 'list', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $inlineEditor, 'order': 40000}))\n    ##\n    ## RIGHTS\n    ##\n    ## The 'rights' editor is already present in the page administration. So we display it here only if we are not in \n    ## a terminal document or if the user has not the admin right on the space (because right now the page \n    ## administration is still combined with the space administration).\n    ## TODO: create a proprer 'page administration' and stop adding a right editor in this menu\n    #define ($rightsEditor)\n      #if ($doc.documentReference.name != 'WebHome' || !$hasSpaceAdmin || !$isAdminAppInstalled)\n        #submenuitem($doc.getURL('edit', 'editor=rights') $services.localization.render('core.menu.edit.rights') 'tmEditRights', '', 'lock', $extraAttributes)\n      #end\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $rightsEditor, 'order': 50000, 'separator': true}))\n    ##\n    ## OBJECTS EDITOR\n    ##\n    #set ($discard = $staticExtensions.add( { 'content': \"#submenuitem($doc.getURL('edit', 'editor=object') $services.localization.render('core.menu.edit.object') 'tmEditObject', '', 'bricks', $extraAttributes)\", 'order': 60000}))\n    ##\n    ## CLASS EDITOR\n    ##\n    #set ($discard = $staticExtensions.add( { 'content': \"#submenuitem($doc.getURL('edit', 'editor=class') $services.localization.render('core.menu.edit.class') 'tmEditClass', '', 'box', $extraAttributes)\", 'order': 70000}))\n  #end\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #define ($menuContent)\n    #displaySecureUIX('org.xwiki.plaftorm.editactions', $staticExtensions)\n  #end\n  #displayMenu('tmEdit', 'pencil', $menuContent, 'core.menu.edit', true, $defaultEditURL, $extraAttributes)\n#end\n\n#**\n * Display admin actions\n *#\n#macro(displayAdminActions)\n  #set ($staticExtensions = [])\n  ##\n  ## COPY\n  ##\n  #if ($canCopy)\n    #define ($copy)\n      #submenuitem($xwiki.getURL($doc.documentReference, 'view', 'xpage=copy') $services.localization.render('core.menu.copy') 'tmActionCopy', '' 'copy', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $copy, 'order': 20000}))\n  #end\n  ##\n  ## DELETE / RENAME\n  ##\n  #if ($canDelete)\n    #define ($rename)\n      #submenuitem($xwiki.getURL($doc.documentReference, 'view', 'xpage=rename&amp;step=1') $services.localization.render('core.menu.rename') 'tmActionRename', '' 'edit', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $rename, 'order': 30000}))\n    #define ($delete)\n      #submenuitem($xwiki.getURL($doc.documentReference, 'delete', $!languageparams) $services.localization.render('core.menu.delete') 'tmActionDelete', '', 'remove', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $delete, 'order': 40000}))\n  #end\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #displaySecureUIX('org.xwiki.plaftorm.adminactions', $staticExtensions)\n#end\n\n#**\n * Display \"more actions\" entries\n *#\n#macro(displayMoreActions)\n  #set ($staticExtensions = [])\n  ##\n  ## EXPORT / PRINT / SOURCE / SHARE\n  ##\n  #if ($canView)\n    ##\n    ## EXPORT (only if we are not in the pdfoptions to export the page)\n    ##\n    #if (\"$!request.xpage\" != 'pdfoptions')\n      #define ($export)\n        #submenuitem('' $services.localization.render('core.menu.export') 'tmExport', '', 'download', 'data-toggle=\"modal\" data-target=\"#exportModal\"')\n      #end\n      #set ($discard = $staticExtensions.add( { 'content': $export, 'order': 80000}))\n    #end\n    ##\n    ## PRINT\n    ##\n    #define ($print)\n      #submenuitem($doc.getURL('view', \"xpage=print&amp;$!escapetool.html($request.getQueryString())\") $services.localization.render('core.menu.preview') 'tmPrintPreview', '', 'print', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $print, 'order': 90000}))\n    ##\n    ## SHARE BY EMAIL\n    ##\n    #if ($canShare)\n      #define ($share)\n        #submenuitem($xwiki.getURL($doc.documentReference, 'view', 'viewer=share') $services.localization.render('core.menu.share') 'tmActionShare', '', 'envelope', $extraAttributes)\n        #userPicker_import()\n      #end\n      #set ($discard = $staticExtensions.add( { 'content': $share, 'order': 110000}))\n      $xwiki.jsx.use('XWiki.SharePage')\n      $xwiki.ssx.use('XWiki.SharePage')\n    #end\n  #end\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #displaySecureUIX('org.xwiki.plaftorm.moreoptions', $staticExtensions)\n#end\n\n#**\n * Display options menu\n *#\n#macro(displayOptionsMenu)\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #define ($menuContent)\n    #set ($needsSeparator = false)\n    ## Admin actions UIXP\n    #if ($displayAdminMenu)\n      #set ($adminActions = \"#displayAdminActions()\")\n      #if ($stringtool.isNotBlank(\"$!adminActions\"))\n        #submenuheader('core.menu.actions.main')\n        $adminActions\n        #set ($needsSeparator = true)\n      #end\n    #end\n    ## More actions UIXP\n    #if ($displayMoreActionsMenu)\n      #set ($moreActions = \"#displayMoreActions()\")\n      #if ($stringtool.isNotBlank(\"$!moreActions\"))\n        #if ($needsSeparator)\n          #submenuseparator()\n        #end\n        #submenuheader('core.menu.actions.others')\n        $moreActions\n        #set ($needsSeparator = true)\n      #end\n      ## ----------------------------\n      ## Display the shortcuts\n      ## ----------------------------\n      #if($xwiki.hasAccessLevel('view') && $displayShortcuts)\n        #set ($viewersContent = \"#template('shortcuts.vm')\")\n        ## Only display a separator if at least one menu entry has been displayed before\n        #if ($needsSeparator)\n          #submenuseparator()\n        #end\n        #submenuheader('core.menu.actions.viewers')\n        ##\n        ## VIEW SOURCE\n        ##\n        #if (\"$!request.rev\" != '')\n          #set ($revisionParameter = \"&rev=$request.rev\")\n        #end\n        #submenuitem($doc.getURL('view', \"viewer=code$!{revisionParameter}\") $services.localization.render('core.menu.view.source') 'tmViewSource', '', 'search', $extraAttributes)\n        $viewersContent\n        ## Display Viewers menu UIX..\n        #displaySecureUIX('org.xwiki.platform.template.menu.viewers', [])\n        #set ($needsSeparator = true)\n      #end\n    #end\n  #end\n  ##\n  ## Display the menu if it has some content\n  ##\n  #displayMenu('tmMoreActions', 'more-vertical', $menuContent, 'core.menu.actions.label')\n#end\n\n#**\n * Add keyboard shortcuts\n *#\n#macro(keyboardShortcuts)\n  <script>\n  //<![CDATA[\n    #if ($hasEdit && !$isReadOnly)\n      shortcut.add(\"$services.localization.render('core.shortcuts.view.edit')\", function() {\n        var editLink = $('tmEdit').down('a');\n        // Make sure the shortcut doesn't work when the edit link is disabled.\n        if (editLink && !editLink.classList.contains('disabled')) {\n          // Simulate the user click because the edit link can have click listeners registered (which aren't executed if\n          // we simply change the window location using the link URL).\n          editLink.click();\n        }\n      }, {'disable_in_input': true});\n      #if($isAdvancedUser)\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.wiki')\",function() { location.href=$('tmEditWiki').href; }, { 'disable_in_input':true });\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.wysiwyg')\",function() { location.href=$('tmEditWysiwyg').href; }, { 'disable_in_input':true });\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.inline')\",function() { location.href=$('tmEditInline').href; }, { 'disable_in_input':true });\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.rights')\",function() { var editRights = $('tmEditRights'); location.href= editRights ? editRights.href : \"$xwiki.getURL($spacePreferencesDocumentReference, 'admin', 'category=1')\";}, { 'disable_in_input':true });\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.objects')\",function() { location.href=$('tmEditObject').href; }, { 'disable_in_input':true });\n        #if($hasAdmin)\n          shortcut.add(\"$services.localization.render('core.shortcuts.view.class')\",function() { location.href=$('tmEditClass').href; }, { 'disable_in_input':true });\n        #end\n      #end\n    #end\n    #if ($canDelete && $displayAdminMenu)\n      shortcut.add(\"$services.localization.render('core.shortcuts.view.delete')\",function() { location.href=$('tmActionDelete').href; }, { 'disable_in_input':true });\n      shortcut.add(\"$services.localization.render('core.shortcuts.view.rename')\",function() { location.href=$('tmActionRename').href; }, { 'disable_in_input':true });\n    #end\n    #if ($canView && $displayMoreActionsMenu)\n      shortcut.add(\"$services.localization.render('core.shortcuts.view.code')\", function() { location.href = $('tmViewSource').href; }, { 'disable_in_input': true });\n    #end\n  //]]>\n  </script>\n#end\n"], "fixing_code": ["## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n##\n## Globals\n##\n#set ($canView = !$doc.isNew() && $xwiki.hasAccessLevel('view'))\n## Note: For Copy we would need to check that the user has edit permissions\n## (since there's no create permission) for the *target* location. Since the\n## user selects the target location in the Copy UI, we need to display the\n## copy menu action. Checking if the user (or guest) doesn't have edit\n## permissions on the whole wiki (including subwiki) is costly. Thus FTM we\n## only check for view permissions.\n#set ($canCopy = $canView)\n\n#set ($nbUsers = $doc.getObjectNumbers(\"XWiki.XWikiUsers\"))\n#set ($nbGroups = $doc.getObjectNumbers(\"XWiki.XWikiGroups\"))\n#set ($hasAdminRights = $xwiki.hasAccessLevel('admin'))\n\n#if ($nbUsers == 0 && $nbGroups == 0 || $hasAdminRights)\n  #set ($canDelete = !$doc.isNew() && $xwiki.hasAccessLevel('delete'))\n#else\n  #set ($canDelete = false)\n#end\n#set ($canShare = $canView && $xwiki.exists('XWiki.SharePage') && !$isGuest)\n## Add rel='nofollow' to prevent search crawler from navigating the links and indexing them in search results\n#set ($extraAttributes = 'rel=\"nofollow\"')\n\n##\n## Display the main menus\n##\n#if ($displayContentMenu)\n  #template(\"menus_macros.vm\")\n  ##\n  #set ($topStaticExtensions = [])\n  ##\n  ## TRANSLATE menu\n  ##\n  #define ($translateMenu)\n    ## Output the translate menu if all the following conditions are met:\n    ## * multilingual is on\n    ## * the user can edit the current document\n    ## * the user is viewing the original document version\n    ## * the document is translatable (either has a default locale specified or it has existing translations)\n    ## * the current UI locale doesn't match the original document locale\n    #if (\n      $displayTranslateMenu &&\n      $xwiki.isMultiLingual() &&\n      $hasEdit && !$isReadOnly &&\n      $xcontext.action == 'view' && $tdoc.realLocale == $doc.realLocale &&\n      (\"$!doc.realLocale\" != '' || !$doc.translationLocales.isEmpty()) &&\n      $doc.realLocale != $xcontext.locale\n    )\n      #displayTranslateMenu()\n    #end\n  #end\n  #set ($discard = $topStaticExtensions.add( { 'content': \"$!translateMenu\", 'order': 5000}))\n  ##\n  ## EDIT menu\n  ##\n  #define ($editMenu)\n    #if ($displayEditMenu && $hasEdit && !$isReadOnly)\n      #displayEditMenu()\n    #end\n  #end\n  #set ($discard = $topStaticExtensions.add( { 'content': \"$!editMenu\", 'order': 10000}))\n  ##\n  ## CREATE menu\n  ##\n  #define ($createMenu)\n    ## Display a create menu if the user has the right to create spaces in the current wiki (since the Create UI supports)\n    ## creating pages in other places in the hierarchy) or if the user has right to create pages in the current location.\n    ## This supports the following 2 use cases for non-admin users:\n    ## - I'm on a space where I don't have permissions to create pages but I have the right to create pages in the wiki.\n    ##   Example: I'm on my user profile which is located in the XWiki space (in which users don't have Edit rights by\n    ##   default). I can see the Create button. See https://jira.xwiki.org/browse/XWIKI-10999\n    ## - I don't have the right to create pages in the wiki but I have the right to create pages under a given hierarchy.\n    ##   Example: I'm allowed to create pages only in the Sandbox space and I'm there. I can see the Create button.\n    ##   See https://jira.xwiki.org/browse/XWIKI-13847\n    #if ($displayCreateMenu && ($hasCreateSpace || $hasCreatePage))\n      #displayCreateButton()\n    #end\n  #end\n  #set ($discard = $topStaticExtensions.add( { 'content': \"$!createMenu\", 'order': 20000}))\n  ##\n  ## MORE ACTIONS menu\n  ##\n  #define ($actionsMenu)\n    ## Note: Both the admin actions and the more actions menus are now merged into one.\n    #if ($displayAdminMenu || $displayMoreActionsMenu)\n      #displayOptionsMenu()\n      #if ($canView)\n        #template(\"export_modal.vm\")\n        #exportModal()\n      #end\n    #end\n  #end\n  #set ($discard = $topStaticExtensions.add( { 'content': \"$!actionsMenu\", 'order': 40000}))\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #define ($menuContent)\n    #displaySecureUIX('org.xwiki.plaftorm.menu.content', $topStaticExtensions)\n  #end\n  ##\n  ## Display the menu\n  ##\n  <div id=\"contentmenu\" class=\"pull-right actionmenu\">\n    $menuContent\n\n    #if($keyboardShortcutsEnabled)\n      #keyboardShortcuts()\n    #end\n  </div>\n#end\n\n#**\n * Display a menu if it has some content.\n *\n * @param $id the id of the menu\n * @param $icon the icon of the menu\n * @param $content the content of the menu\n * @param $titleKey translation key of the link title to use\n * @param $titleAsLabel if the link title should also be used as link label\n * @param $actionUrl (optional) the link of the top menu entry.\n *   If not provided, the top menu entry will act as an activator for the dropdown\n * @param $extraAttribute (optional) additional attributes to add (such as ref=\"nofollow\" for example)\n *   By default those attribute should fit an anchor.\n *   Do take care that if the $actionUrl provided is empty,\n *   the $extraAttributes are going to be used for a `button` instead of an `anchor`\n *   and should have values fit to a `button`.\n * @since 7.3M2\n *#\n#macro(displayMenu $id $icon $menuContent $titleKey $titleAsLabel $actionUrl $extraAttribute)\n  <div class=\"btn-group\" id=\"$id\">\n    <#if (\"$!actionUrl\" == '')button#{else}a#end class=\"btn btn-default#if (\"$!actionUrl\" == '') dropdown-toggle#end\" title=\"$services.localization.render($titleKey)\"##\n    #if (\"$!actionUrl\" != '')\n      href=\"$actionUrl\"\n    #else\n      data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\n    #end\n    #if (\"$!extraAttribute\" != '') ${extraAttribute}#end>\n      $services.icon.renderHTML($icon)\n      #if ($titleAsLabel)\n        <span class=\"btn-label\">$services.localization.render($titleKey)</span>\n      #end\n    </#if (\"$!actionUrl\" == '')button#{else}a#end>\n    #if ($stringtool.isNotBlank(\"$!menuContent\"))\n      #if (\"$!actionUrl\" != '')\n        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          <span class=\"caret\"></span>\n          <span class=\"sr-only\">$services.localization.render('core.menu.toggleDropdown')</span>\n        </button>\n      #end\n      <ul class=\"dropdown-menu #if (\"$!actionUrl\" == '')dropdown-menu-right#end\">\n        $menuContent\n      </ul>\n    #end\n  </div>\n#end\n\n#**\n * Display UI extensions if the author of the UIX has the ADMIN right on the current wiki\n *\n * @param $name the name of the UI extension to display\n * @param $staticExtensions (optional) an array of static extensions to display along with the regular uix.\n *         e.g. [ { 'content': 'someHTMLcontent', 'order': 20000, 'separator': true } ]\n * @param $count out parameter containing the number of entries displayed in the menu\n * @since 7.3M1\n *\n * TODO: replace this macro to stop having \"static extensions\" but a mechanism to have real UI Extensions in templates.\n *#\n#macro(displaySecureUIX $name $staticExtensions $count)\n  #set ($count = 0)\n  ## Add the static UIX to the list of UIX to display\n  #set ($extensions = [])\n  #set ($discard = $extensions.addAll($staticExtensions))\n  ## Add the dynamic UIX to the list of of UIX to display\n  #foreach($uix in $services.uix.getExtensions($name))\n    #if ($services.security.authorization.hasAccess('admin', $uix.authorReference, $services.wiki.currentWikiDescriptor.reference))\n      #set ($separator = (\"$!uix.getParameters().separator\" == 'true'))\n      #set ($order = $numbertool.toNumber($uix.getParameters().order).intValue())\n      #if (\"$!order\" == '')\n        ## Fallback for incomplete/invalid extension orders to avoid breaking the display.\n        #set ($order = 0)\n      #end\n      #set ($uixMap = { 'content'  : $services.rendering.render($uix.execute(), 'html/5.0'),\n                        'order'    : $order,\n                        'separator': $separator})\n      #set ($discard = $extensions.add($uixMap))\n    #end\n  #end\n  ## Display them, sorted by order\n  #set ($canHaveMenuSeparator = false)\n  #foreach($uix in $collectiontool.sort($extensions, 'order'))\n    ## Maybe display a menu separator\n    #if (\"$!uix.separator\" == 'true' && $canHaveMenuSeparator)\n      #submenuseparator()\n      #set ($canHaveMenuSeparator = false)\n    #end\n    #set ($content = $uix.content.toString())\n    $content\n    #if ($stringtool.isNotBlank($content))\n      #set ($canHaveMenuSeparator = true)\n      #set ($count = $count + 1)\n    #end\n  #end\n  #setVariable(\"$count\", $count)\n#end\n\n#macro (submenuheader $titleKey)\n  <li class=\"dropdown-header\">$services.localization.render($titleKey)</li>\n#end\n\n#**\n * Display the create button\n *#\n#macro(displayCreateButton)\n  #displayMenu('tmCreate', 'add', '', 'core.menu.create', true, $doc.getURL('create'), $extraAttributes)\n#end\n\n#**\n * Display the Translate button used to translate the current document in the current locale.\n *#\n#macro(displayTranslateMenu)\n  #set ($translateHint = $services.localization.render('core.menu.translate.hint',\n    [$xcontext.locale.getDisplayName($xcontext.locale)]))\n  #set ($translateDetails = $services.localization.render('core.menu.translate.details', [\n    $doc.realLocale.getDisplayName($xcontext.locale),\n    $xcontext.locale.getDisplayName($xcontext.locale)\n  ]))\n  #set ($translateAttrs = \"$!extraAttributes tabindex='0' data-toggle='popover' data-trigger='hover' \" +\n    \"data-container='body' data-placement='bottom' data-title='$escapetool.xml($translateHint)' \" +\n    \"data-content='$escapetool.xml($translateDetails)'\")\n  #set ($translateURL = $doc.getURL('edit', $escapetool.url({'language': $xcontext.locale})))\n  #displayMenu('tmTranslate', 'translate', '', 'core.menu.translate', true, $translateURL, $translateAttrs)\n#end\n\n#**\n * Display the edit menu\n *#\n#macro(displayEditMenu)\n  #set ($defaultEditURL = $doc.getURL($doc.getDefaultEditMode(), $!languageparams))\n  #set ($staticExtensions = [])\n  #if ($isAdvancedUser)\n    ##\n    ## WYSIWYG\n    ##\n    ## Check if the WYSIWYG supports the current document's syntax and if so add a menu entry to edit the current\n    ## document with the WYSIWYG editor.\n    #define ($editWYSIWYG)\n      #if ($services.wysiwyg.isSyntaxSupported($tdoc.syntax.toIdString()))\n        #submenuitem($doc.getURL('edit', \"$!{languageparams}#if ($languageparams != '')&amp;#{end}editor=wysiwyg\") $services.localization.render('core.menu.edit.wysiwyg') 'tmEditWysiwyg', '', 'pencil', $extraAttributes)\n      #end\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $editWYSIWYG, 'order': 20000, 'separator': true}))\n    ##\n    ## WIKI EDITOR\n    ##\n    #define ($wikiEditor)\n      #submenuitem($doc.getURL('edit', \"$!{languageparams}#if ($languageparams != '')&amp;#{end}editor=wiki\") $services.localization.render('core.menu.edit.wiki') 'tmEditWiki', '', 'wrench', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $wikiEditor, 'order': 30000}))\n    ##\n    ## INLINE EDITOR\n    ##\n    #define ($inlineEditor)\n      #submenuitem($doc.getURL('edit', \"$!{languageparams}#if ($languageparams != '')&amp;#{end}editor=inline\") $services.localization.render('core.menu.edit.inline') 'tmEditInline', '', 'list', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $inlineEditor, 'order': 40000}))\n    ##\n    ## RIGHTS\n    ##\n    ## The 'rights' editor is already present in the page administration. So we display it here only if we are not in \n    ## a terminal document or if the user has not the admin right on the space (because right now the page \n    ## administration is still combined with the space administration).\n    ## TODO: create a proprer 'page administration' and stop adding a right editor in this menu\n    #define ($rightsEditor)\n      #if ($doc.documentReference.name != 'WebHome' || !$hasSpaceAdmin || !$isAdminAppInstalled)\n        #submenuitem($doc.getURL('edit', 'editor=rights') $services.localization.render('core.menu.edit.rights') 'tmEditRights', '', 'lock', $extraAttributes)\n      #end\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $rightsEditor, 'order': 50000, 'separator': true}))\n    ##\n    ## OBJECTS EDITOR\n    ##\n    #set ($discard = $staticExtensions.add( { 'content': \"#submenuitem($doc.getURL('edit', 'editor=object') $services.localization.render('core.menu.edit.object') 'tmEditObject', '', 'bricks', $extraAttributes)\", 'order': 60000}))\n    ##\n    ## CLASS EDITOR\n    ##\n    #set ($discard = $staticExtensions.add( { 'content': \"#submenuitem($doc.getURL('edit', 'editor=class') $services.localization.render('core.menu.edit.class') 'tmEditClass', '', 'box', $extraAttributes)\", 'order': 70000}))\n  #end\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #define ($menuContent)\n    #displaySecureUIX('org.xwiki.plaftorm.editactions', $staticExtensions)\n  #end\n  #displayMenu('tmEdit', 'pencil', $menuContent, 'core.menu.edit', true, $defaultEditURL, $extraAttributes)\n#end\n\n#**\n * Display admin actions\n *#\n#macro(displayAdminActions)\n  #set ($staticExtensions = [])\n  ##\n  ## COPY\n  ##\n  #if ($canCopy)\n    #define ($copy)\n      #submenuitem($xwiki.getURL($doc.documentReference, 'view', 'xpage=copy') $services.localization.render('core.menu.copy') 'tmActionCopy', '' 'copy', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $copy, 'order': 20000}))\n  #end\n  ##\n  ## DELETE / RENAME\n  ##\n  #if ($canDelete)\n    #define ($rename)\n      #submenuitem($xwiki.getURL($doc.documentReference, 'view', 'xpage=rename&amp;step=1') $services.localization.render('core.menu.rename') 'tmActionRename', '' 'edit', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $rename, 'order': 30000}))\n    #define ($delete)\n      #submenuitem($xwiki.getURL($doc.documentReference, 'delete', $!languageparams) $services.localization.render('core.menu.delete') 'tmActionDelete', '', 'remove', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $delete, 'order': 40000}))\n  #end\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #displaySecureUIX('org.xwiki.plaftorm.adminactions', $staticExtensions)\n#end\n\n#**\n * Display \"more actions\" entries\n *#\n#macro(displayMoreActions)\n  #set ($staticExtensions = [])\n  ##\n  ## EXPORT / PRINT / SOURCE / SHARE\n  ##\n  #if ($canView)\n    ##\n    ## EXPORT (only if we are not in the pdfoptions to export the page)\n    ##\n    #if (\"$!request.xpage\" != 'pdfoptions')\n      #define ($export)\n        #submenuitem('' $services.localization.render('core.menu.export') 'tmExport', '', 'download', 'data-toggle=\"modal\" data-target=\"#exportModal\"')\n      #end\n      #set ($discard = $staticExtensions.add( { 'content': $export, 'order': 80000}))\n    #end\n    ##\n    ## PRINT\n    ##\n    #define ($print)\n      #submenuitem($doc.getURL('view', \"xpage=print&amp;$!escapetool.html($request.getQueryString())\") $services.localization.render('core.menu.preview') 'tmPrintPreview', '', 'print', $extraAttributes)\n    #end\n    #set ($discard = $staticExtensions.add( { 'content': $print, 'order': 90000}))\n    ##\n    ## SHARE BY EMAIL\n    ##\n    #if ($canShare)\n      #define ($share)\n        #submenuitem($xwiki.getURL($doc.documentReference, 'view', 'viewer=share') $services.localization.render('core.menu.share') 'tmActionShare', '', 'envelope', $extraAttributes)\n        #userPicker_import()\n      #end\n      #set ($discard = $staticExtensions.add( { 'content': $share, 'order': 110000}))\n      $xwiki.jsx.use('XWiki.SharePage')\n      $xwiki.ssx.use('XWiki.SharePage')\n    #end\n  #end\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #displaySecureUIX('org.xwiki.plaftorm.moreoptions', $staticExtensions)\n#end\n\n#**\n * Display options menu\n *#\n#macro(displayOptionsMenu)\n  ##\n  ## Display all the extensions points, including the static ones\n  ##\n  #define ($menuContent)\n    #set ($needsSeparator = false)\n    ## Admin actions UIXP\n    #if ($displayAdminMenu)\n      #set ($adminActions = \"#displayAdminActions()\")\n      #if ($stringtool.isNotBlank(\"$!adminActions\"))\n        #submenuheader('core.menu.actions.main')\n        $adminActions\n        #set ($needsSeparator = true)\n      #end\n    #end\n    ## More actions UIXP\n    #if ($displayMoreActionsMenu)\n      #set ($moreActions = \"#displayMoreActions()\")\n      #if ($stringtool.isNotBlank(\"$!moreActions\"))\n        #if ($needsSeparator)\n          #submenuseparator()\n        #end\n        #submenuheader('core.menu.actions.others')\n        $moreActions\n        #set ($needsSeparator = true)\n      #end\n      ## ----------------------------\n      ## Display the shortcuts\n      ## ----------------------------\n      #if($xwiki.hasAccessLevel('view') && $displayShortcuts)\n        #set ($viewersContent = \"#template('shortcuts.vm')\")\n        ## Only display a separator if at least one menu entry has been displayed before\n        #if ($needsSeparator)\n          #submenuseparator()\n        #end\n        #submenuheader('core.menu.actions.viewers')\n        ##\n        ## VIEW SOURCE\n        ##\n        #if (\"$!request.rev\" != '')\n          #set ($revisionParameter = \"&rev=$escapetool.url($request.rev)\")\n        #end\n        #submenuitem($doc.getURL('view', \"viewer=code$!{revisionParameter}\") $services.localization.render('core.menu.view.source') 'tmViewSource', '', 'search', $extraAttributes)\n        $viewersContent\n        ## Display Viewers menu UIX..\n        #displaySecureUIX('org.xwiki.platform.template.menu.viewers', [])\n        #set ($needsSeparator = true)\n      #end\n    #end\n  #end\n  ##\n  ## Display the menu if it has some content\n  ##\n  #displayMenu('tmMoreActions', 'more-vertical', $menuContent, 'core.menu.actions.label')\n#end\n\n#**\n * Add keyboard shortcuts\n *#\n#macro(keyboardShortcuts)\n  <script>\n  //<![CDATA[\n    #if ($hasEdit && !$isReadOnly)\n      shortcut.add(\"$services.localization.render('core.shortcuts.view.edit')\", function() {\n        var editLink = $('tmEdit').down('a');\n        // Make sure the shortcut doesn't work when the edit link is disabled.\n        if (editLink && !editLink.classList.contains('disabled')) {\n          // Simulate the user click because the edit link can have click listeners registered (which aren't executed if\n          // we simply change the window location using the link URL).\n          editLink.click();\n        }\n      }, {'disable_in_input': true});\n      #if($isAdvancedUser)\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.wiki')\",function() { location.href=$('tmEditWiki').href; }, { 'disable_in_input':true });\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.wysiwyg')\",function() { location.href=$('tmEditWysiwyg').href; }, { 'disable_in_input':true });\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.inline')\",function() { location.href=$('tmEditInline').href; }, { 'disable_in_input':true });\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.rights')\",function() { var editRights = $('tmEditRights'); location.href= editRights ? editRights.href : \"$xwiki.getURL($spacePreferencesDocumentReference, 'admin', 'category=1')\";}, { 'disable_in_input':true });\n        shortcut.add(\"$services.localization.render('core.shortcuts.view.objects')\",function() { location.href=$('tmEditObject').href; }, { 'disable_in_input':true });\n        #if($hasAdmin)\n          shortcut.add(\"$services.localization.render('core.shortcuts.view.class')\",function() { location.href=$('tmEditClass').href; }, { 'disable_in_input':true });\n        #end\n      #end\n    #end\n    #if ($canDelete && $displayAdminMenu)\n      shortcut.add(\"$services.localization.render('core.shortcuts.view.delete')\",function() { location.href=$('tmActionDelete').href; }, { 'disable_in_input':true });\n      shortcut.add(\"$services.localization.render('core.shortcuts.view.rename')\",function() { location.href=$('tmActionRename').href; }, { 'disable_in_input':true });\n    #end\n    #if ($canView && $displayMoreActionsMenu)\n      shortcut.add(\"$services.localization.render('core.shortcuts.view.code')\", function() { location.href = $('tmViewSource').href; }, { 'disable_in_input': true });\n    #end\n  //]]>\n  </script>\n#end\n"], "filenames": ["xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/menus_content.vm"], "buggy_code_start_loc": [438], "buggy_code_end_loc": [439], "fixing_code_start_loc": [438], "fixing_code_end_loc": [439], "type": "CWE-79", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. XWiki is vulnerable to reflected cross-site scripting (RXSS) via the `rev` parameter that is used in the content of the content menu without escaping. If an attacker can convince a user to visit a link with a crafted parameter, this allows the attacker to execute arbitrary actions in the name of the user, including remote code (Groovy) execution in the case of a user with programming right, compromising the confidentiality, integrity and availability of the whole XWiki installation. This has been patched in XWiki 15.6 RC1, 15.5.1 and 14.10.14. The patch in commit `04e325d57` can be manually applied without upgrading (or restarting) the instance. Users are advised to upgrade or to manually apply the patch. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-46732", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-06T19:15:09.397", "lastModified": "2023-11-14T19:33:15.620", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. XWiki is vulnerable to reflected cross-site scripting (RXSS) via the `rev` parameter that is used in the content of the content menu without escaping. If an attacker can convince a user to visit a link with a crafted parameter, this allows the attacker to execute arbitrary actions in the name of the user, including remote code (Groovy) execution in the case of a user with programming right, compromising the confidentiality, integrity and availability of the whole XWiki installation. This has been patched in XWiki 15.6 RC1, 15.5.1 and 14.10.14. The patch in commit `04e325d57` can be manually applied without upgrading (or restarting) the instance. Users are advised to upgrade or to manually apply the patch. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "XWiki Platform es una plataforma wiki gen\u00e9rica que ofrece servicios de ejecuci\u00f3n para aplicaciones creadas sobre ella. XWiki es vulnerable a Reflected Cross-Site Scripting (RXSS) a trav\u00e9s del par\u00e1metro \"rev\" que se utiliza en el contenido del men\u00fa de contenido sin escapar. Si un atacante puede convencer a un usuario para que visite un enlace con un par\u00e1metro manipulado, esto le permitir\u00e1 ejecutar acciones arbitrarias en nombre del usuario, incluida la ejecuci\u00f3n remota de c\u00f3digo (Groovy) en el caso de un usuario con derechos de programaci\u00f3n, comprometiendo la confidencialidad, integridad y disponibilidad de toda la instalaci\u00f3n de XWiki. Esto ha sido parcheado en XWiki 15.6 RC1, 15.5.1 y 14.10.14. El parche en el commit `04e325d57` se puede aplicar manualmente sin actualizar (o reiniciar) la instancia. Se recomienda a los usuarios que actualicen o apliquen manualmente el parche. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.7", "versionEndExcluding": "14.10.14", "matchCriteriaId": "EBA6A5EC-3D7C-4278-B18C-3B522DF08111"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "15.0", "versionEndExcluding": "15.5.1", "matchCriteriaId": "C6697094-C3B7-4746-AC50-1C99C9DECAC9"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/04e325d57d4bcb6ab79bddcafbb19032474c2a55", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-j9rc-w3wv-fv62", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-21095", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/04e325d57d4bcb6ab79bddcafbb19032474c2a55"}}