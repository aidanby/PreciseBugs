{"buggy_code": ["/*\n * @copyright 2016- commenthol\n * @license MIT\n */\n\n'use strict'\n\n// dependencies\nvar util = require('./internal/utils')\nvar Ref = require('./internal/reference')\n\n/**\n * serializes an object to javascript\n *\n * @example <caption>serializing regex, date, buffer, ...</caption>\n * var serialize = require('serialize-to-js').serialize;\n * var obj = {\n *   str: '<script>var a = 0 > 1</script>',\n *   num: 3.1415,\n *   bool: true,\n *   nil: null,\n *   undef: undefined,\n *   obj: { foo: 'bar' },\n *   arr: [1, '2'],\n *   regexp: /^test?$/,\n *   date: new Date(),\n *   buffer: new Buffer('data'),\n * }\n * console.log(serialize(obj))\n * // > {str: \"\\u003Cscript\\u003Evar a = 0 \\u003E 1\\u003C\\u002Fscript\\u003E\", num: 3.1415, bool: true, nil: null, undef: undefined, obj: {foo: \"bar\"}, arr: [1, \"2\"], regexp: /^test?$/, date: new Date(\"2016-04-15T16:22:52.009Z\"), buffer: new Buffer('ZGF0YQ==', 'base64')}\n *\n * @example <caption>serializing while respecting references</caption>\n * var serialize = require('serialize-to-js').serialize;\n * var obj = { object: { regexp: /^test?$/ } };\n * obj.reference = obj.object;\n * var opts = { reference: true };\n * console.log(serialize(obj, opts));\n * //> {object: {regexp: /^test?$/}}\n * console.log(opts.references);\n * //> [ [ '.reference', '.object' ] ]\n *\n * @param {Object|Array|Function|Any} source - source to serialize\n * @param {Object} [opts] - options\n * @param {Boolean} opts.ignoreCircular - ignore circular objects\n * @param {Boolean} opts.reference - reference instead of a copy (requires post-processing of opts.references)\n * @param {Boolean} opts.unsafe - do not escape chars `<>/`\n * @return {String} serialized representation of `source`\n */\nfunction serialize (source, opts) {\n  var out = ''\n  var key\n  var tmp\n  var type\n  var i\n\n  opts = opts || {}\n  if (!opts._visited) {\n    opts._visited = []\n  }\n  if (!opts._refs) {\n    opts.references = []\n    opts._refs = new Ref(opts.references)\n  }\n\n  if (util.isNull(source)) {\n    out += 'null'\n  } else if (util.isArray(source)) {\n    tmp = source.map(function (item) {\n      return serialize(item, opts)\n    })\n    out += '[' + tmp.join(', ') + ']'\n  } else if (util.isFunction(source)) {\n    tmp = source.toString()\n    // append function to es6 function within obj\n    out += !/^\\s*(function|\\([^)]*\\)\\s*=>)/m.test(tmp) ? 'function ' + tmp : tmp\n  } else if (util.isObject(source)) {\n    if (util.isRegExp(source)) {\n      out += source.toString()\n    } else if (util.isDate(source)) {\n      out += 'new Date(\"' + source.toJSON() + '\")'\n    } else if (util.isError(source)) {\n      out += 'new Error(' + (source.message ? '\"' + source.message + '\"' : '') + ')'\n    } else if (util.isBuffer(source)) {\n      // check for buffer first otherwise tests fail on node@4.4\n      // looks like buffers are accidentially detected as typed arrays\n      out += \"Buffer.from('\" + source.toString('base64') + \"', 'base64')\"\n    } else if ((type = util.isTypedArray(source))) {\n      tmp = []\n      for (i = 0; i < source.length; i++) {\n        tmp.push(source[i])\n      }\n      out += 'new ' + type + '(' +\n        '[' + tmp.join(', ') + ']' +\n        ')'\n    } else {\n      tmp = []\n      // copy properties if not circular\n      if (!~opts._visited.indexOf(source)) {\n        opts._visited.push(source)\n        for (key in source) {\n          if (source.hasOwnProperty(key)) {\n            if (opts.reference && util.isObject(source[key])) {\n              opts._refs.push(key)\n              if (!opts._refs.hasReference(source[key])) {\n                tmp.push(Ref.wrapkey(key) + ': ' + serialize(source[key], opts))\n              }\n              opts._refs.pop()\n            } else {\n              tmp.push(Ref.wrapkey(key) + ': ' + serialize(source[key], opts))\n            }\n          }\n        }\n        out += '{' + tmp.join(', ') + '}'\n        opts._visited.pop()\n      } else {\n        if (opts.ignoreCircular) {\n          out += '{/*[Circular]*/}'\n        } else {\n          throw new Error('can not convert circular structures.')\n        }\n      }\n    }\n  } else if (util.isString(source)) {\n    out += '\"' + (opts.unsafe ? util.unsafeString(source) : util.safeString(source)) + '\"'\n  } else {\n    out += '' + source\n  }\n  return out\n}\nmodule.exports = serialize\n", "'use strict'\n\nvar isBrowser = (typeof window !== 'undefined')\n\nfunction log (arg) {\n  console.log(JSON.stringify(arg))\n}\n\nmodule.exports = {\n  'string': [\n    \"string's\\n\\\"new\\\"   line\",\n    '\"string\\'s\\\\n\\\\\"new\\\\\"   line\"'\n  ],\n  'string with unsafe characters': [\n    '<script type=\"application/javascript\">\\u2028\\u2029\\nvar a = 0;\\nvar b = 1; a > 1;\\n</script>',\n    '\"\\\\u003Cscript type=\\\\\"application\\\\u002Fjavascript\\\\\"\\\\u003E\\\\u2028\\\\u2029\\\\nvar a = 0;\\\\nvar b = 1; a \\\\u003E 1;\\\\n\\\\u003C\\\\u002Fscript\\\\u003E\"'\n  ],\n  'number': [\n    3.1415,\n    '3.1415'\n  ],\n  'boolean': [\n    true,\n    'true'\n  ],\n  'undefined': [\n    undefined,\n    'undefined'\n  ],\n  'null': [\n    null,\n    'null'\n  ],\n  'regex': [\n    /test(?:it)?/ig,\n    '/test(?:it)?/gi'\n  ],\n  'object': [\n    { a: 1, b: 2 },\n    '{a: 1, b: 2}'\n  ],\n  'empty object': [\n    {},\n    '{}'\n  ],\n  'object with backslash': [\n    { backslash: '\\\\' },\n    '{backslash: \"\\\\\\\\\"}'\n  ],\n  'object of primitives': [\n    {\n      one: true,\n      two: false,\n      'thr-ee': undefined,\n      four: 1,\n      '5': 3.1415,\n      six: -17,\n      'se ven': 'string'\n    },\n    '{\"5\": 3.1415, one: true, two: false, \"thr-ee\": undefined, four: 1, six: -17, \"se ven\": \"string\"}'\n  ],\n  'function': [\n    log,\n    log.toString(),\n    'toString'\n  ],\n  'arrow function': [\n    (a) => a + 1,\n    '(a) => a + 1'\n  ],\n  'shorthand method': [\n    { key(a) { return a + 1 } }, // eslint-disable-line\n    '{key: function key(a) { return a + 1 }}'\n  ],\n  'arrow function in object': [\n    { key: (a) => a + 1 },\n    '{key: (a) => a + 1}'\n  ],\n  'date': [\n    new Date(24 * 12 * 3600000),\n    'new Date(\"1970-01-13T00:00:00.000Z\")'\n  ],\n  'error': [\n    new Error('error'),\n    'new Error(\"error\")',\n    'toString' // safari has problems with deepEqual here\n  ],\n  'empty error': [\n    new Error(),\n    'new Error()',\n    'toString' // safari has problems with deepEqual here\n  ],\n  'array of primitives': [\n    [true, false, undefined, 1, 3.1415, -17, 'string'],\n    '[true, false, undefined, 1, 3.1415, -17, \"string\"]'\n  ],\n  'Int8Array': [\n    new Int8Array([1, 2, 3, 4, 5]),\n    'new Int8Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Uint8Array': [\n    new Uint8Array([1, 2, 3, 4, 5]),\n    'new Uint8Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Uint8ClampedArray': [\n    new Uint8ClampedArray([1, 2, 3, 4, 5]),\n    'new Uint8ClampedArray([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Int16Array': [\n    new Int16Array([-1, 0, 2, 3, 4, 5]),\n    'new Int16Array([-1, 0, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Uint16Array': [\n    new Uint16Array([1, 2, 3, 4, 5]),\n    'new Uint16Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Int32Array': [\n    new Int32Array([1, 2, 3, 4, 5]),\n    'new Int32Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Uint32Array': [\n    new Uint32Array([1, 2, 3, 4, 5]),\n    'new Uint32Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Float32Array': [\n    new Float32Array([1e10, 2000000, 3.1415, -4.9e2, 5]),\n    'new Float32Array([10000000000, 2000000, 3.1414999961853027, -490, 5])',\n    'toString'\n  ],\n  'Float64Array': [\n    new Float64Array([1e12, 2000000, 3.1415, -4.9e2, 5]),\n    'new Float64Array([1000000000000, 2000000, 3.1415, -490, 5])',\n    'toString'\n  ]\n}\n\nif (!isBrowser) {\n  Object.assign(module.exports, {\n    'buffer': [\n      Buffer.from('buffer'), // eslint-disable-line node/no-deprecated-api\n      \"Buffer.from('YnVmZmVy', 'base64')\"\n    ],\n    'empty buffer': [\n      Buffer.from(''), // eslint-disable-line node/no-deprecated-api\n      \"Buffer.from('', 'base64')\"\n    ]\n  })\n}\n"], "fixing_code": ["/*\n * @copyright 2016- commenthol\n * @license MIT\n */\n\n'use strict'\n\n// dependencies\nvar util = require('./internal/utils')\nvar Ref = require('./internal/reference')\n\n/**\n * serializes an object to javascript\n *\n * @example <caption>serializing regex, date, buffer, ...</caption>\n * var serialize = require('serialize-to-js').serialize;\n * var obj = {\n *   str: '<script>var a = 0 > 1</script>',\n *   num: 3.1415,\n *   bool: true,\n *   nil: null,\n *   undef: undefined,\n *   obj: { foo: 'bar' },\n *   arr: [1, '2'],\n *   regexp: /^test?$/,\n *   date: new Date(),\n *   buffer: new Buffer('data'),\n * }\n * console.log(serialize(obj))\n * // > {str: \"\\u003Cscript\\u003Evar a = 0 \\u003E 1\\u003C\\u002Fscript\\u003E\", num: 3.1415, bool: true, nil: null, undef: undefined, obj: {foo: \"bar\"}, arr: [1, \"2\"], regexp: /^test?$/, date: new Date(\"2016-04-15T16:22:52.009Z\"), buffer: new Buffer('ZGF0YQ==', 'base64')}\n *\n * @example <caption>serializing while respecting references</caption>\n * var serialize = require('serialize-to-js').serialize;\n * var obj = { object: { regexp: /^test?$/ } };\n * obj.reference = obj.object;\n * var opts = { reference: true };\n * console.log(serialize(obj, opts));\n * //> {object: {regexp: /^test?$/}}\n * console.log(opts.references);\n * //> [ [ '.reference', '.object' ] ]\n *\n * @param {Object|Array|Function|Any} source - source to serialize\n * @param {Object} [opts] - options\n * @param {Boolean} opts.ignoreCircular - ignore circular objects\n * @param {Boolean} opts.reference - reference instead of a copy (requires post-processing of opts.references)\n * @param {Boolean} opts.unsafe - do not escape chars `<>/`\n * @return {String} serialized representation of `source`\n */\nfunction serialize (source, opts) {\n  var out = ''\n  var key\n  var tmp\n  var type\n  var i\n\n  opts = opts || {}\n  if (!opts._visited) {\n    opts._visited = []\n  }\n  if (!opts._refs) {\n    opts.references = []\n    opts._refs = new Ref(opts.references)\n  }\n\n  if (util.isNull(source)) {\n    out += 'null'\n  } else if (util.isArray(source)) {\n    tmp = source.map(function (item) {\n      return serialize(item, opts)\n    })\n    out += '[' + tmp.join(', ') + ']'\n  } else if (util.isFunction(source)) {\n    tmp = source.toString()\n    // append function to es6 function within obj\n    out += !/^\\s*(function|\\([^)]*\\)\\s*=>)/m.test(tmp) ? 'function ' + tmp : tmp\n  } else if (util.isObject(source)) {\n    if (util.isRegExp(source)) {\n      out += 'new RegExp(\"' + source.source + '\", \"' + source.flags + '\")'\n    } else if (util.isDate(source)) {\n      out += 'new Date(\"' + source.toJSON() + '\")'\n    } else if (util.isError(source)) {\n      out += 'new Error(' + (source.message ? '\"' + source.message + '\"' : '') + ')'\n    } else if (util.isBuffer(source)) {\n      // check for buffer first otherwise tests fail on node@4.4\n      // looks like buffers are accidentially detected as typed arrays\n      out += \"Buffer.from('\" + source.toString('base64') + \"', 'base64')\"\n    } else if ((type = util.isTypedArray(source))) {\n      tmp = []\n      for (i = 0; i < source.length; i++) {\n        tmp.push(source[i])\n      }\n      out += 'new ' + type + '(' +\n        '[' + tmp.join(', ') + ']' +\n        ')'\n    } else {\n      tmp = []\n      // copy properties if not circular\n      if (!~opts._visited.indexOf(source)) {\n        opts._visited.push(source)\n        for (key in source) {\n          if (source.hasOwnProperty(key)) {\n            if (opts.reference && util.isObject(source[key])) {\n              opts._refs.push(key)\n              if (!opts._refs.hasReference(source[key])) {\n                tmp.push(Ref.wrapkey(key) + ': ' + serialize(source[key], opts))\n              }\n              opts._refs.pop()\n            } else {\n              tmp.push(Ref.wrapkey(key) + ': ' + serialize(source[key], opts))\n            }\n          }\n        }\n        out += '{' + tmp.join(', ') + '}'\n        opts._visited.pop()\n      } else {\n        if (opts.ignoreCircular) {\n          out += '{/*[Circular]*/}'\n        } else {\n          throw new Error('can not convert circular structures.')\n        }\n      }\n    }\n  } else if (util.isString(source)) {\n    out += '\"' + (opts.unsafe ? util.unsafeString(source) : util.safeString(source)) + '\"'\n  } else {\n    out += '' + source\n  }\n  return out\n}\nmodule.exports = serialize\n", "'use strict'\n\nvar isBrowser = (typeof window !== 'undefined')\n\nfunction log (arg) {\n  console.log(JSON.stringify(arg))\n}\n\nmodule.exports = {\n  'string': [\n    \"string's\\n\\\"new\\\"   line\",\n    '\"string\\'s\\\\n\\\\\"new\\\\\"   line\"'\n  ],\n  'string with unsafe characters': [\n    '<script type=\"application/javascript\">\\u2028\\u2029\\nvar a = 0;\\nvar b = 1; a > 1;\\n</script>',\n    '\"\\\\u003Cscript type=\\\\\"application\\\\u002Fjavascript\\\\\"\\\\u003E\\\\u2028\\\\u2029\\\\nvar a = 0;\\\\nvar b = 1; a \\\\u003E 1;\\\\n\\\\u003C\\\\u002Fscript\\\\u003E\"'\n  ],\n  'number': [\n    3.1415,\n    '3.1415'\n  ],\n  'boolean': [\n    true,\n    'true'\n  ],\n  'undefined': [\n    undefined,\n    'undefined'\n  ],\n  'null': [\n    null,\n    'null'\n  ],\n  'regex': [\n    /test(?:it)?/ig,\n    'new RegExp(\"test(?:it)?\", \"gi\")'\n  ],\n  'object': [\n    { a: 1, b: 2 },\n    '{a: 1, b: 2}'\n  ],\n  'empty object': [\n    {},\n    '{}'\n  ],\n  'object with backslash': [\n    { backslash: '\\\\' },\n    '{backslash: \"\\\\\\\\\"}'\n  ],\n  'object of primitives': [\n    {\n      one: true,\n      two: false,\n      'thr-ee': undefined,\n      four: 1,\n      '5': 3.1415,\n      six: -17,\n      'se ven': 'string'\n    },\n    '{\"5\": 3.1415, one: true, two: false, \"thr-ee\": undefined, four: 1, six: -17, \"se ven\": \"string\"}'\n  ],\n  'function': [\n    log,\n    log.toString(),\n    'toString'\n  ],\n  'arrow function': [\n    (a) => a + 1,\n    '(a) => a + 1'\n  ],\n  'shorthand method': [\n    { key(a) { return a + 1 } }, // eslint-disable-line\n    '{key: function key(a) { return a + 1 }}'\n  ],\n  'arrow function in object': [\n    { key: (a) => a + 1 },\n    '{key: (a) => a + 1}'\n  ],\n  'date': [\n    new Date(24 * 12 * 3600000),\n    'new Date(\"1970-01-13T00:00:00.000Z\")'\n  ],\n  'error': [\n    new Error('error'),\n    'new Error(\"error\")',\n    'toString' // safari has problems with deepEqual here\n  ],\n  'empty error': [\n    new Error(),\n    'new Error()',\n    'toString' // safari has problems with deepEqual here\n  ],\n  'array of primitives': [\n    [true, false, undefined, 1, 3.1415, -17, 'string'],\n    '[true, false, undefined, 1, 3.1415, -17, \"string\"]'\n  ],\n  'Int8Array': [\n    new Int8Array([1, 2, 3, 4, 5]),\n    'new Int8Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Uint8Array': [\n    new Uint8Array([1, 2, 3, 4, 5]),\n    'new Uint8Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Uint8ClampedArray': [\n    new Uint8ClampedArray([1, 2, 3, 4, 5]),\n    'new Uint8ClampedArray([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Int16Array': [\n    new Int16Array([-1, 0, 2, 3, 4, 5]),\n    'new Int16Array([-1, 0, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Uint16Array': [\n    new Uint16Array([1, 2, 3, 4, 5]),\n    'new Uint16Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Int32Array': [\n    new Int32Array([1, 2, 3, 4, 5]),\n    'new Int32Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Uint32Array': [\n    new Uint32Array([1, 2, 3, 4, 5]),\n    'new Uint32Array([1, 2, 3, 4, 5])',\n    'toString'\n  ],\n  'Float32Array': [\n    new Float32Array([1e10, 2000000, 3.1415, -4.9e2, 5]),\n    'new Float32Array([10000000000, 2000000, 3.1414999961853027, -490, 5])',\n    'toString'\n  ],\n  'Float64Array': [\n    new Float64Array([1e12, 2000000, 3.1415, -4.9e2, 5]),\n    'new Float64Array([1000000000000, 2000000, 3.1415, -490, 5])',\n    'toString'\n  ],\n  'regexXss': [\n    /[</script><script>alert('xss')//]/i,\n    'new RegExp(\"[</script><script>alert(\\'xss\\')//]\", \"i\")'\n  ],\n  'regex no flags': [\n    /abc/,\n    'new RegExp(\"abc\", \"\")'\n  ]\n}\n\nif (!isBrowser) {\n  Object.assign(module.exports, {\n    'buffer': [\n      Buffer.from('buffer'), // eslint-disable-line node/no-deprecated-api\n      \"Buffer.from('YnVmZmVy', 'base64')\"\n    ],\n    'empty buffer': [\n      Buffer.from(''), // eslint-disable-line node/no-deprecated-api\n      \"Buffer.from('', 'base64')\"\n    ]\n  })\n}\n"], "filenames": ["lib/index.js", "test/fixtures.js"], "buggy_code_start_loc": [78, 36], "buggy_code_end_loc": [79, 140], "fixing_code_start_loc": [78, 36], "fixing_code_end_loc": [79, 149], "type": "CWE-79", "message": "The serialize-to-js NPM package before version 3.0.1 is vulnerable to Cross-site Scripting (XSS). It does not properly mitigate against unsafe characters in serialized regular expressions. This vulnerability is not affected on Node.js environment since Node.js's implementation of RegExp.prototype.toString() backslash-escapes all forward slashes in regular expressions. If serialized data of regular expression objects are used in an environment other than Node.js, it is affected by this vulnerability.", "other": {"cve": {"id": "CVE-2019-16772", "sourceIdentifier": "security-advisories@github.com", "published": "2019-12-07T00:15:11.090", "lastModified": "2019-12-09T17:10:35.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The serialize-to-js NPM package before version 3.0.1 is vulnerable to Cross-site Scripting (XSS). It does not properly mitigate against unsafe characters in serialized regular expressions. This vulnerability is not affected on Node.js environment since Node.js's implementation of RegExp.prototype.toString() backslash-escapes all forward slashes in regular expressions. If serialized data of regular expression objects are used in an environment other than Node.js, it is affected by this vulnerability."}, {"lang": "es", "value": "El paquete serialize-to-js NPM versiones anteriores a 3.0.1, es vulnerable a ataque de tipo Cross-site Scripting (XSS). No mitiga apropiadamente contra caracteres no seguros en expresiones regulares serializadas. Esta vulnerabilidad no est\u00e1 afectada en el entorno Node.js ya que la implementaci\u00f3n de barra invertida en la funci\u00f3n RegExp.prototype.toString() de Node.js escapa a todas las barras diagonales en expresiones regulares. Si los datos serializados de los objetos de expresi\u00f3n regular son usados en un entorno diferente de Node.js, es afectado por esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 3.1, "baseSeverity": "LOW"}, "exploitabilityScore": 1.6, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:serialize-to-js_project:serialize-to-js:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "3.0.1", "matchCriteriaId": "F8953E5B-2099-403C-AA1F-F1B036EC5C69"}]}]}], "references": [{"url": "https://github.com/commenthol/serialize-to-js/commit/181d7d583ae5293cd47cc99b14ad13352875f3e3", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/commenthol/serialize-to-js/security/advisories/GHSA-3fjq-93xj-3f3f", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/commenthol/serialize-to-js/commit/181d7d583ae5293cd47cc99b14ad13352875f3e3"}}