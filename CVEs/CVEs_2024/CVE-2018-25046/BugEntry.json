{"buggy_code": ["package extractor_test\n\nimport (\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\n\t. \"github.com/onsi/ginkgo\"\n\t. \"github.com/onsi/gomega\"\n\n\t. \"code.cloudfoundry.org/archiver/extractor\"\n\t\"code.cloudfoundry.org/archiver/extractor/test_helper\"\n)\n\nvar _ = Describe(\"Extractor\", func() {\n\tvar extractor Extractor\n\n\tvar extractionDest string\n\tvar extractionSrc string\n\n\tBeforeEach(func() {\n\t\tvar err error\n\n\t\tarchive, err := ioutil.TempFile(\"\", \"extractor-archive\")\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\textractionDest, err = ioutil.TempDir(\"\", \"extracted\")\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\textractionSrc = archive.Name()\n\n\t\textractor = NewDetectable()\n\t})\n\n\tAfterEach(func() {\n\t\tos.RemoveAll(extractionSrc)\n\t\tos.RemoveAll(extractionDest)\n\t})\n\n\tarchiveFiles := []test_helper.ArchiveFile{\n\t\t{\n\t\t\tName: \"./\",\n\t\t\tDir:  true,\n\t\t},\n\t\t{\n\t\t\tName: \"./some-file\",\n\t\t\tBody: \"some-file-contents\",\n\t\t},\n\t\t{\n\t\t\tName: \"./empty-dir/\",\n\t\t\tDir:  true,\n\t\t},\n\t\t{\n\t\t\tName: \"./nonempty-dir/\",\n\t\t\tDir:  true,\n\t\t},\n\t\t{\n\t\t\tName: \"./nonempty-dir/file-in-dir\",\n\t\t\tBody: \"file-in-dir-contents\",\n\t\t},\n\t\t{\n\t\t\tName: \"./legit-exe-not-a-virus.bat\",\n\t\t\tMode: 0644,\n\t\t\tBody: \"rm -rf /\",\n\t\t},\n\t\t{\n\t\t\tName: \"./some-symlink\",\n\t\t\tLink: \"some-file\",\n\t\t\tMode: 0755,\n\t\t},\n\t}\n\n\textractionTest := func() {\n\t\terr := extractor.Extract(extractionSrc, extractionDest)\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\tfileContents, err := ioutil.ReadFile(filepath.Join(extractionDest, \"some-file\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tExpect(string(fileContents)).To(Equal(\"some-file-contents\"))\n\n\t\tfileContents, err = ioutil.ReadFile(filepath.Join(extractionDest, \"nonempty-dir\", \"file-in-dir\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tExpect(string(fileContents)).To(Equal(\"file-in-dir-contents\"))\n\n\t\texecutable, err := os.Open(filepath.Join(extractionDest, \"legit-exe-not-a-virus.bat\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\texecutableInfo, err := executable.Stat()\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tExpect(executableInfo.Mode()).To(Equal(os.FileMode(0644)))\n\n\t\temptyDir, err := os.Open(filepath.Join(extractionDest, \"empty-dir\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\temptyDirInfo, err := emptyDir.Stat()\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\tExpect(emptyDirInfo.IsDir()).To(BeTrue())\n\n\t\ttarget, err := os.Readlink(filepath.Join(extractionDest, \"some-symlink\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tExpect(target).To(Equal(\"some-file\"))\n\n\t\tsymlinkInfo, err := os.Lstat(filepath.Join(extractionDest, \"some-symlink\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\tExpect(symlinkInfo.Mode() & 0755).To(Equal(os.FileMode(0755)))\n\t}\n\n\tContext(\"when the file is a zip archive\", func() {\n\t\tBeforeEach(func() {\n\t\t\ttest_helper.CreateZipArchive(extractionSrc, archiveFiles)\n\t\t})\n\n\t\tContext(\"when 'unzip' is on the PATH\", func() {\n\t\t\tBeforeEach(func() {\n\t\t\t\t_, err := exec.LookPath(\"unzip\")\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t})\n\n\t\t\tIt(\"extracts the ZIP's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\t\t})\n\n\t\tContext(\"when 'unzip' is not in the PATH\", func() {\n\t\t\tvar oldPATH string\n\n\t\t\tBeforeEach(func() {\n\t\t\t\toldPATH = os.Getenv(\"PATH\")\n\t\t\t\tos.Setenv(\"PATH\", \"/dev/null\")\n\n\t\t\t\t_, err := exec.LookPath(\"unzip\")\n\t\t\t\tExpect(err).To(HaveOccurred())\n\t\t\t})\n\n\t\t\tAfterEach(func() {\n\t\t\t\tos.Setenv(\"PATH\", oldPATH)\n\t\t\t})\n\n\t\t\tIt(\"extracts the ZIP's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\t\t})\n\t})\n\n\tContext(\"when the file is a tgz archive\", func() {\n\t\tBeforeEach(func() {\n\t\t\ttest_helper.CreateTarGZArchive(extractionSrc, archiveFiles)\n\t\t})\n\n\t\tContext(\"when 'tar' is on the PATH\", func() {\n\t\t\tBeforeEach(func() {\n\t\t\t\t_, err := exec.LookPath(\"tar\")\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t})\n\n\t\t\tIt(\"extracts the TGZ's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\t\t})\n\n\t\tContext(\"when 'tar' is not in the PATH\", func() {\n\t\t\tvar oldPATH string\n\n\t\t\tBeforeEach(func() {\n\t\t\t\toldPATH = os.Getenv(\"PATH\")\n\t\t\t\tos.Setenv(\"PATH\", \"/dev/null\")\n\n\t\t\t\t_, err := exec.LookPath(\"tar\")\n\t\t\t\tExpect(err).To(HaveOccurred())\n\t\t\t})\n\n\t\t\tAfterEach(func() {\n\t\t\t\tos.Setenv(\"PATH\", oldPATH)\n\t\t\t})\n\n\t\t\tIt(\"extracts the TGZ's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\t\t})\n\t})\n\n\tContext(\"when the file is a tar archive\", func() {\n\t\tBeforeEach(func() {\n\t\t\textractor = NewTar()\n\t\t\ttest_helper.CreateTarArchive(extractionSrc, archiveFiles)\n\t\t})\n\n\t\tIt(\"extracts the TAR's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\t})\n})\n", "package extractor\n\nimport (\n\t\"archive/tar\"\n\t\"compress/gzip\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\ntype tgzExtractor struct{}\n\nfunc NewTgz() Extractor {\n\treturn &tgzExtractor{}\n}\n\nfunc (e *tgzExtractor) Extract(src, dest string) error {\n\tsrcType, err := mimeType(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tswitch srcType {\n\tcase \"application/x-gzip\":\n\t\terr := extractTgz(src, dest)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tdefault:\n\t\treturn fmt.Errorf(\"%s is not a tgz archive: %s\", src, srcType)\n\t}\n\n\treturn nil\n}\n\nfunc extractTgz(src, dest string) error {\n\ttarPath, err := exec.LookPath(\"tar\")\n\n\tif err == nil {\n\t\terr := os.MkdirAll(dest, 0755)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn exec.Command(tarPath, \"pzxf\", src, \"-C\", dest).Run()\n\t}\n\n\tfd, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fd.Close()\n\n\tgReader, err := gzip.NewReader(fd)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gReader.Close()\n\n\ttarReader := tar.NewReader(gReader)\n\treturn extractTarArchive(tarReader, dest)\n}\n\nfunc extractTarArchive(tarReader *tar.Reader, dest string) error {\n\tfor {\n\t\thdr, err := tarReader.Next()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif hdr.Name == \".\" {\n\t\t\tcontinue\n\t\t}\n\n\t\terr = extractTarArchiveFile(hdr, dest, tarReader)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc extractTarArchiveFile(header *tar.Header, dest string, input io.Reader) error {\n\tfilePath := filepath.Join(dest, header.Name)\n\tfileInfo := header.FileInfo()\n\n\tif fileInfo.IsDir() {\n\t\treturn os.MkdirAll(filePath, fileInfo.Mode())\n\t}\n\n\terr := os.MkdirAll(filepath.Dir(filePath), 0755)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif fileInfo.Mode()&os.ModeSymlink != 0 {\n\t\treturn os.Symlink(header.Linkname, filePath)\n\t}\n\n\tfileCopy, err := os.OpenFile(filePath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, fileInfo.Mode())\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer fileCopy.Close()\n\n\t_, err = io.Copy(fileCopy, input)\n\treturn err\n}\n", "package extractor\n\nimport (\n\t\"archive/zip\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\ntype zipExtractor struct{}\n\nfunc NewZip() Extractor {\n\treturn &zipExtractor{}\n}\n\nfunc (e *zipExtractor) Extract(src, dest string) error {\n\tsrcType, err := mimeType(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tswitch srcType {\n\tcase \"application/zip\":\n\t\terr := extractZip(src, dest)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tdefault:\n\t\treturn fmt.Errorf(\"%s is not a zip archive: %s\", src, srcType)\n\t}\n\n\treturn nil\n}\n\nfunc extractZip(src, dest string) error {\n\tpath, err := exec.LookPath(\"unzip\")\n\n\tif err == nil {\n\t\terr := os.MkdirAll(dest, 0755)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tunzipCmd := exec.Command(path, src)\n\t\tunzipCmd.Dir = dest\n\n\t\treturn unzipCmd.Run()\n\t} else {\n\t\tfiles, err := zip.OpenReader(src)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tdefer files.Close()\n\n\t\tfor _, file := range files.File {\n\t\t\terr = func() error {\n\t\t\t\treadCloser, err := file.Open()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tdefer readCloser.Close()\n\n\t\t\t\treturn extractZipArchiveFile(file, dest, readCloser)\n\t\t\t}()\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t}\n}\n\nfunc extractZipArchiveFile(file *zip.File, dest string, input io.Reader) error {\n\tfilePath := filepath.Join(dest, file.Name)\n\tfileInfo := file.FileInfo()\n\n\tif fileInfo.IsDir() {\n\t\terr := os.MkdirAll(filePath, fileInfo.Mode())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\terr := os.MkdirAll(filepath.Dir(filePath), 0755)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif fileInfo.Mode()&os.ModeSymlink != 0 {\n\t\t\tlinkName, err := ioutil.ReadAll(input)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn os.Symlink(string(linkName), filePath)\n\t\t}\n\n\t\tfileCopy, err := os.OpenFile(filePath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, fileInfo.Mode())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer fileCopy.Close()\n\n\t\t_, err = io.Copy(fileCopy, input)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n"], "fixing_code": ["package extractor_test\n\nimport (\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\n\t. \"github.com/onsi/ginkgo\"\n\t. \"github.com/onsi/gomega\"\n\n\t. \"code.cloudfoundry.org/archiver/extractor\"\n\t\"code.cloudfoundry.org/archiver/extractor/test_helper\"\n)\n\nvar _ = Describe(\"Extractor\", func() {\n\tvar extractor Extractor\n\n\tvar extractionDest string\n\tvar extractionSrc string\n\n\tBeforeEach(func() {\n\t\tvar err error\n\n\t\tarchive, err := ioutil.TempFile(\"\", \"extractor-archive\")\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\textractionDest, err = ioutil.TempDir(\"\", \"extracted\")\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\textractionSrc = archive.Name()\n\n\t\textractor = NewDetectable()\n\t})\n\n\tAfterEach(func() {\n\t\tos.RemoveAll(extractionSrc)\n\t\tos.RemoveAll(extractionDest)\n\t})\n\n\tarchiveFiles := []test_helper.ArchiveFile{\n\t\t{\n\t\t\tName: \"./\",\n\t\t\tDir:  true,\n\t\t},\n\t\t{\n\t\t\tName: \"./some-file\",\n\t\t\tBody: \"some-file-contents\",\n\t\t},\n\t\t{\n\t\t\tName: \"./empty-dir/\",\n\t\t\tDir:  true,\n\t\t},\n\t\t{\n\t\t\tName: \"./nonempty-dir/\",\n\t\t\tDir:  true,\n\t\t},\n\t\t{\n\t\t\tName: \"./nonempty-dir/file-in-dir\",\n\t\t\tBody: \"file-in-dir-contents\",\n\t\t},\n\t\t{\n\t\t\tName: \"./legit-exe-not-a-virus.bat\",\n\t\t\tMode: 0644,\n\t\t\tBody: \"rm -rf /\",\n\t\t},\n\t\t{\n\t\t\tName: \"./some-symlink\",\n\t\t\tLink: \"some-file\",\n\t\t\tMode: 0755,\n\t\t},\n\t}\n\n\textractionTest := func() {\n\t\terr := extractor.Extract(extractionSrc, extractionDest)\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\tfileContents, err := ioutil.ReadFile(filepath.Join(extractionDest, \"some-file\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tExpect(string(fileContents)).To(Equal(\"some-file-contents\"))\n\n\t\tfileContents, err = ioutil.ReadFile(filepath.Join(extractionDest, \"nonempty-dir\", \"file-in-dir\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tExpect(string(fileContents)).To(Equal(\"file-in-dir-contents\"))\n\n\t\texecutable, err := os.Open(filepath.Join(extractionDest, \"legit-exe-not-a-virus.bat\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\texecutableInfo, err := executable.Stat()\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tExpect(executableInfo.Mode()).To(Equal(os.FileMode(0644)))\n\n\t\temptyDir, err := os.Open(filepath.Join(extractionDest, \"empty-dir\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\temptyDirInfo, err := emptyDir.Stat()\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\tExpect(emptyDirInfo.IsDir()).To(BeTrue())\n\n\t\ttarget, err := os.Readlink(filepath.Join(extractionDest, \"some-symlink\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tExpect(target).To(Equal(\"some-file\"))\n\n\t\tsymlinkInfo, err := os.Lstat(filepath.Join(extractionDest, \"some-symlink\"))\n\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\tExpect(symlinkInfo.Mode() & 0755).To(Equal(os.FileMode(0755)))\n\t}\n\n\tContext(\"when the file is a zip archive\", func() {\n\t\tBeforeEach(func() {\n\t\t\ttest_helper.CreateZipArchive(extractionSrc, archiveFiles)\n\t\t})\n\n\t\tContext(\"when 'unzip' is on the PATH\", func() {\n\t\t\tBeforeEach(func() {\n\t\t\t\t_, err := exec.LookPath(\"unzip\")\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t})\n\n\t\t\tIt(\"extracts the ZIP's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\n\t\t\tContext(\"with a bad zip archive\", func() {\n\t\t\t\tBeforeEach(func() {\n\t\t\t\t\ttest_helper.CreateZipArchive(extractionSrc, []test_helper.ArchiveFile{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: \"../some-file\",\n\t\t\t\t\t\t\tBody: \"file-in-bad-dir-contents\",\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t\tIt(\"returns an error\", func() {\n\t\t\t\t\tsubdir := filepath.Join(extractionDest, \"subdir\")\n\t\t\t\t\tExpect(os.Mkdir(subdir, 0777)).To(Succeed())\n\t\t\t\t\terr := extractor.Extract(extractionSrc, subdir)\n\t\t\t\t\tExpect(err).To(HaveOccurred())\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\n\t\tContext(\"when 'unzip' is not in the PATH\", func() {\n\t\t\tvar oldPATH string\n\n\t\t\tBeforeEach(func() {\n\t\t\t\toldPATH = os.Getenv(\"PATH\")\n\t\t\t\tos.Setenv(\"PATH\", \"/dev/null\")\n\n\t\t\t\t_, err := exec.LookPath(\"unzip\")\n\t\t\t\tExpect(err).To(HaveOccurred())\n\t\t\t})\n\n\t\t\tAfterEach(func() {\n\t\t\t\tos.Setenv(\"PATH\", oldPATH)\n\t\t\t})\n\n\t\t\tIt(\"extracts the ZIP's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\n\t\t\tContext(\"with a bad zip archive\", func() {\n\t\t\t\tBeforeEach(func() {\n\t\t\t\t\ttest_helper.CreateZipArchive(extractionSrc, []test_helper.ArchiveFile{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: \"../some-file\",\n\t\t\t\t\t\t\tBody: \"file-in-bad-dir-contents\",\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t\tIt(\"does not insecurely extract the file outside of the provided destination\", func() {\n\t\t\t\t\tsubdir := filepath.Join(extractionDest, \"subdir\")\n\t\t\t\t\tExpect(os.Mkdir(subdir, 0777)).To(Succeed())\n\t\t\t\t\terr := extractor.Extract(extractionSrc, subdir)\n\t\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\t\t\t\tExpect(filepath.Join(extractionDest, \"some-file\")).NotTo(BeAnExistingFile())\n\t\t\t\t\tExpect(filepath.Join(subdir, \"some-file\")).To(BeAnExistingFile())\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\t})\n\n\tContext(\"when the file is a tgz archive\", func() {\n\t\tBeforeEach(func() {\n\t\t\ttest_helper.CreateTarGZArchive(extractionSrc, archiveFiles)\n\t\t})\n\n\t\tContext(\"when 'tar' is on the PATH\", func() {\n\t\t\tBeforeEach(func() {\n\t\t\t\t_, err := exec.LookPath(\"tar\")\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t})\n\n\t\t\tIt(\"extracts the TGZ's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\n\t\t\tContext(\"with a bad tgz archive\", func() {\n\t\t\t\tBeforeEach(func() {\n\t\t\t\t\ttest_helper.CreateTarGZArchive(extractionSrc, []test_helper.ArchiveFile{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: \"../some-file\",\n\t\t\t\t\t\t\tBody: \"file-in-bad-dir-contents\",\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t\tIt(\"returns an error\", func() {\n\t\t\t\t\tsubdir := filepath.Join(extractionDest, \"subdir\")\n\t\t\t\t\tExpect(os.Mkdir(subdir, 0777)).To(Succeed())\n\t\t\t\t\terr := extractor.Extract(extractionSrc, subdir)\n\t\t\t\t\tExpect(err).To(HaveOccurred())\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\n\t\tContext(\"when 'tar' is not in the PATH\", func() {\n\t\t\tvar oldPATH string\n\n\t\t\tBeforeEach(func() {\n\t\t\t\toldPATH = os.Getenv(\"PATH\")\n\t\t\t\tos.Setenv(\"PATH\", \"/dev/null\")\n\n\t\t\t\t_, err := exec.LookPath(\"tar\")\n\t\t\t\tExpect(err).To(HaveOccurred())\n\t\t\t})\n\n\t\t\tAfterEach(func() {\n\t\t\t\tos.Setenv(\"PATH\", oldPATH)\n\t\t\t})\n\n\t\t\tIt(\"extracts the TGZ's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\n\t\t\tContext(\"with a bad tgz archive\", func() {\n\t\t\t\tBeforeEach(func() {\n\t\t\t\t\ttest_helper.CreateTarGZArchive(extractionSrc, []test_helper.ArchiveFile{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: \"../some-file\",\n\t\t\t\t\t\t\tBody: \"file-in-bad-dir-contents\",\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t\tIt(\"does not insecurely extract the file outside of the provided destination\", func() {\n\t\t\t\t\tsubdir := filepath.Join(extractionDest, \"subdir\")\n\t\t\t\t\tExpect(os.Mkdir(subdir, 0777)).To(Succeed())\n\t\t\t\t\terr := extractor.Extract(extractionSrc, subdir)\n\t\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t\t\tExpect(filepath.Join(extractionDest, \"some-file\")).NotTo(BeAnExistingFile())\n\t\t\t\t\tExpect(filepath.Join(subdir, \"some-file\")).To(BeAnExistingFile())\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\t})\n\n\tContext(\"when the file is a tar archive\", func() {\n\t\tBeforeEach(func() {\n\t\t\textractor = NewTar()\n\t\t\ttest_helper.CreateTarArchive(extractionSrc, archiveFiles)\n\t\t})\n\n\t\tIt(\"extracts the TAR's files, generating directories, and honoring file permissions and symlinks\", extractionTest)\n\n\t\tContext(\"with a bad tar archive\", func() {\n\t\t\tBeforeEach(func() {\n\t\t\t\ttest_helper.CreateTarArchive(extractionSrc, []test_helper.ArchiveFile{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"../some-file\",\n\t\t\t\t\t\tBody: \"file-in-bad-dir-contents\",\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tIt(\"does not insecurely extract the file outside of the provided destination\", func() {\n\t\t\t\tsubdir := filepath.Join(extractionDest, \"subdir\")\n\t\t\t\tExpect(os.Mkdir(subdir, 0777)).To(Succeed())\n\t\t\t\terr := extractor.Extract(extractionSrc, subdir)\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t\tExpect(filepath.Join(extractionDest, \"some-file\")).NotTo(BeAnExistingFile())\n\t\t\t\tExpect(filepath.Join(subdir, \"some-file\")).To(BeAnExistingFile())\n\t\t\t})\n\t\t})\n\t})\n})\n", "package extractor\n\nimport (\n\t\"archive/tar\"\n\t\"compress/gzip\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\n\tsecurejoin \"github.com/cyphar/filepath-securejoin\"\n)\n\ntype tgzExtractor struct{}\n\nfunc NewTgz() Extractor {\n\treturn &tgzExtractor{}\n}\n\nfunc (e *tgzExtractor) Extract(src, dest string) error {\n\tsrcType, err := mimeType(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tswitch srcType {\n\tcase \"application/x-gzip\":\n\t\terr := extractTgz(src, dest)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tdefault:\n\t\treturn fmt.Errorf(\"%s is not a tgz archive: %s\", src, srcType)\n\t}\n\n\treturn nil\n}\n\nfunc extractTgz(src, dest string) error {\n\ttarPath, err := exec.LookPath(\"tar\")\n\n\tif err == nil {\n\t\terr := os.MkdirAll(dest, 0755)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn exec.Command(tarPath, \"pzxf\", src, \"-C\", dest).Run()\n\t}\n\n\tfd, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fd.Close()\n\n\tgReader, err := gzip.NewReader(fd)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gReader.Close()\n\n\ttarReader := tar.NewReader(gReader)\n\treturn extractTarArchive(tarReader, dest)\n}\n\nfunc extractTarArchive(tarReader *tar.Reader, dest string) error {\n\tfor {\n\t\thdr, err := tarReader.Next()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif hdr.Name == \".\" {\n\t\t\tcontinue\n\t\t}\n\n\t\terr = extractTarArchiveFile(hdr, dest, tarReader)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc extractTarArchiveFile(header *tar.Header, dest string, input io.Reader) error {\n\tfilePath, err := securejoin.SecureJoin(dest, header.Name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfileInfo := header.FileInfo()\n\n\tif fileInfo.IsDir() {\n\t\treturn os.MkdirAll(filePath, fileInfo.Mode())\n\t}\n\n\terr = os.MkdirAll(filepath.Dir(filePath), 0755)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif fileInfo.Mode()&os.ModeSymlink != 0 {\n\t\treturn os.Symlink(header.Linkname, filePath)\n\t}\n\n\tfileCopy, err := os.OpenFile(filePath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, fileInfo.Mode())\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer fileCopy.Close()\n\n\t_, err = io.Copy(fileCopy, input)\n\treturn err\n}\n", "package extractor\n\nimport (\n\t\"archive/zip\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\n\tsecurejoin \"github.com/cyphar/filepath-securejoin\"\n)\n\ntype zipExtractor struct{}\n\nfunc NewZip() Extractor {\n\treturn &zipExtractor{}\n}\n\nfunc (e *zipExtractor) Extract(src, dest string) error {\n\tsrcType, err := mimeType(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tswitch srcType {\n\tcase \"application/zip\":\n\t\terr := extractZip(src, dest)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tdefault:\n\t\treturn fmt.Errorf(\"%s is not a zip archive: %s\", src, srcType)\n\t}\n\n\treturn nil\n}\n\nfunc extractZip(src, dest string) error {\n\tpath, err := exec.LookPath(\"unzip\")\n\n\tif err == nil {\n\t\terr := os.MkdirAll(dest, 0755)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tunzipCmd := exec.Command(path, src)\n\t\tunzipCmd.Dir = dest\n\n\t\treturn unzipCmd.Run()\n\t} else {\n\t\tfiles, err := zip.OpenReader(src)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tdefer files.Close()\n\n\t\tfor _, file := range files.File {\n\t\t\terr = func() error {\n\t\t\t\treadCloser, err := file.Open()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tdefer readCloser.Close()\n\n\t\t\t\treturn extractZipArchiveFile(file, dest, readCloser)\n\t\t\t}()\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t}\n}\n\nfunc extractZipArchiveFile(file *zip.File, dest string, input io.Reader) error {\n\tfilePath, err := securejoin.SecureJoin(dest, file.Name)\n\tfileInfo := file.FileInfo()\n\n\tif fileInfo.IsDir() {\n\t\terr = os.MkdirAll(filePath, fileInfo.Mode())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\terr = os.MkdirAll(filepath.Dir(filePath), 0755)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif fileInfo.Mode()&os.ModeSymlink != 0 {\n\t\t\tlinkName, err := ioutil.ReadAll(input)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn os.Symlink(string(linkName), filePath)\n\t\t}\n\n\t\tfileCopy, err := os.OpenFile(filePath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, fileInfo.Mode())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer fileCopy.Close()\n\n\t\t_, err = io.Copy(fileCopy, input)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n"], "filenames": ["extractor/extractor_test.go", "extractor/tgz_extractor.go", "extractor/zip_extractor.go"], "buggy_code_start_loc": [122, 10, 10], "buggy_code_end_loc": [183, 98, 90], "fixing_code_start_loc": [123, 11, 11], "fixing_code_end_loc": [281, 103, 92], "type": "CWE-22", "message": "Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.", "other": {"cve": {"id": "CVE-2018-25046", "sourceIdentifier": "security@golang.org", "published": "2022-12-27T22:15:11.140", "lastModified": "2023-06-08T21:15:15.203", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cloudfoundry:archiver:*:*:*:*:*:*:*:*", "versionEndExcluding": "2018-05-23", "matchCriteriaId": "4B280BBD-EF9C-4D23-A4D5-33DEC02E38EC"}]}]}], "references": [{"url": "https://github.com/cloudfoundry/archiver/commit/09b5706aa9367972c09144a450bb4523049ee840", "source": "security@golang.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://pkg.go.dev/vuln/GO-2020-0025", "source": "security@golang.org", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/research/zip-slip-vulnerability", "source": "security@golang.org", "tags": ["Technical Description", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cloudfoundry/archiver/commit/09b5706aa9367972c09144a450bb4523049ee840"}}