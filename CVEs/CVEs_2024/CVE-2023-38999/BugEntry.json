{"buggy_code": ["<?php\n\n/**\n *    Copyright (C) 2019-2022 Deciso B.V.\n *\n *    All rights reserved.\n *\n *    Redistribution and use in source and binary forms, with or without\n *    modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n *    THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n *    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n *    AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n *    AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n *    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n *    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n *    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n *    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *    POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\nnamespace OPNsense\\Core\\Api;\n\nuse OPNsense\\Base\\ApiControllerBase;\nuse OPNsense\\Core\\ACL;\nuse OPNsense\\Core\\Backend;\n\n/**\n * Class SystemController\n * @package OPNsense\\Core\n */\nclass SystemController extends ApiControllerBase\n{\n    public function haltAction()\n    {\n        $backend = new Backend();\n        $backend->configdRun('system halt', true);\n        return [\n            'status' => 'ok'\n        ];\n    }\n\n    public function rebootAction()\n    {\n        $backend = new Backend();\n        $backend->configdRun('system reboot', true);\n        return [\n            'status' => 'ok'\n        ];\n    }\n\n    public function statusAction()\n    {\n        $this->sessionClose();\n\n        $response = [\"status\" => \"failed\"];\n\n        $backend = new Backend();\n        $statuses = json_decode(trim($backend->configdRun('system status')), true);\n        if ($statuses) {\n            $order = [-1 => 'Error', 0 => 'Warning', 1 => 'Notice', 2 => 'OK'];\n\n            $acl = new ACL();\n            foreach ($statuses as $subsystem => $status) {\n                $statuses[$subsystem]['status'] = $order[$status['statusCode']];\n                if (!empty($status['logLocation'])) {\n                    if (!$acl->isPageAccessible($this->getUserName(), $status['logLocation'])) {\n                        unset($statuses[$subsystem]);\n                    }\n                } else {\n                    return $response;\n                }\n            }\n\n            /* Sort on the highest error level after the ACL check */\n            $statusCodes = array_map(function ($v) {\n                return $v['statusCode'];\n            }, array_values($statuses));\n            sort($statusCodes);\n            $statuses['System'] = [\n                'status' => $order[$statusCodes[0] ?? 2]\n            ];\n\n            foreach ($statuses as &$status) {\n                if (!empty($status['timestamp'])) {\n                    $age = time() - $status['timestamp'];\n\n                    if ($age < 0) {\n                        /* time jump, do nothing */\n                    } elseif ($age < 60) {\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s second ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s seconds ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60) {\n                         $age = intdiv($age, 60);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s minute ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s minutes ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60 * 24) {\n                         $age = intdiv($age, 60 * 60);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s hour ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s hours ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60 * 24 * 7) {\n                         $age = intdiv($age, 60 * 60 * 24);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s day ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s days ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60 * 24 * 30) {\n                         $age = intdiv($age, 60 * 60 * 24 * 7);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s week ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s weeks ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60 * 24 * 365) {\n                         $age = intdiv($age, 60 * 60 * 24 * 30);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s month ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s months ago'), $age);\n                        }\n                    } else {\n                         $age = intdiv($age, 60 * 60 * 24 * 365);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s year ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s years ago'), $age);\n                        }\n                    }\n                }\n            }\n\n            $response = json_encode($statuses);\n        }\n\n        return $response;\n    }\n\n    public function dismissStatusAction()\n    {\n        $this->sessionClose();\n\n        if ($this->request->isPost() && $this->request->hasPost(\"subject\")) {\n            $acl = new ACL();\n            $backend = new Backend();\n            $subsystem = $this->request->getPost(\"subject\");\n            $system = json_decode(trim($backend->configdRun('system status')), true);\n            if (array_key_exists($subsystem, $system)) {\n                if (!empty($system[$subsystem]['logLocation'])) {\n                    $aclCheck = $system[$subsystem]['logLocation'];\n                    if (\n                        $acl->isPageAccessible($this->getUserName(), $aclCheck) ||\n                        !$acl->hasPrivilege($this->getUserName(), 'user-config-readonly')\n                    ) {\n                        $status = trim($backend->configdRun(sprintf('system dismiss status %s', $subsystem)));\n                        if ($status == \"OK\") {\n                            return [\n                                \"status\" => \"ok\"\n                            ];\n                        }\n                    }\n                }\n            }\n        }\n\n        return [\"status\" => \"failed\"];\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n *    Copyright (C) 2019-2022 Deciso B.V.\n *\n *    All rights reserved.\n *\n *    Redistribution and use in source and binary forms, with or without\n *    modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n *    THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n *    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n *    AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n *    AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n *    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n *    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n *    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n *    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *    POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\nnamespace OPNsense\\Core\\Api;\n\nuse OPNsense\\Base\\ApiControllerBase;\nuse OPNsense\\Core\\ACL;\nuse OPNsense\\Core\\Backend;\n\n/**\n * Class SystemController\n * @package OPNsense\\Core\n */\nclass SystemController extends ApiControllerBase\n{\n    public function haltAction()\n    {\n        if ($this->request->isPost()) {\n            (new Backend())->configdRun('system halt', true);\n            return ['status' => 'ok'];\n        } else {\n            return ['status' => 'failed'];\n        }\n    }\n\n    public function rebootAction()\n    {\n        if ($this->request->isPost()) {\n            (new Backend())->configdRun('system reboot', true);\n            return ['status' => 'ok'];\n        } else {\n            return ['status' => 'failed'];\n        }\n    }\n\n    public function statusAction()\n    {\n        $this->sessionClose();\n\n        $response = [\"status\" => \"failed\"];\n\n        $backend = new Backend();\n        $statuses = json_decode(trim($backend->configdRun('system status')), true);\n        if ($statuses) {\n            $order = [-1 => 'Error', 0 => 'Warning', 1 => 'Notice', 2 => 'OK'];\n\n            $acl = new ACL();\n            foreach ($statuses as $subsystem => $status) {\n                $statuses[$subsystem]['status'] = $order[$status['statusCode']];\n                if (!empty($status['logLocation'])) {\n                    if (!$acl->isPageAccessible($this->getUserName(), $status['logLocation'])) {\n                        unset($statuses[$subsystem]);\n                    }\n                } else {\n                    return $response;\n                }\n            }\n\n            /* Sort on the highest error level after the ACL check */\n            $statusCodes = array_map(function ($v) {\n                return $v['statusCode'];\n            }, array_values($statuses));\n            sort($statusCodes);\n            $statuses['System'] = [\n                'status' => $order[$statusCodes[0] ?? 2]\n            ];\n\n            foreach ($statuses as &$status) {\n                if (!empty($status['timestamp'])) {\n                    $age = time() - $status['timestamp'];\n\n                    if ($age < 0) {\n                        /* time jump, do nothing */\n                    } elseif ($age < 60) {\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s second ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s seconds ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60) {\n                         $age = intdiv($age, 60);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s minute ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s minutes ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60 * 24) {\n                         $age = intdiv($age, 60 * 60);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s hour ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s hours ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60 * 24 * 7) {\n                         $age = intdiv($age, 60 * 60 * 24);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s day ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s days ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60 * 24 * 30) {\n                         $age = intdiv($age, 60 * 60 * 24 * 7);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s week ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s weeks ago'), $age);\n                        }\n                    } elseif ($age < 60 * 60 * 24 * 365) {\n                         $age = intdiv($age, 60 * 60 * 24 * 30);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s month ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s months ago'), $age);\n                        }\n                    } else {\n                         $age = intdiv($age, 60 * 60 * 24 * 365);\n                        if ($age == 1) {\n                            $status['age'] = sprintf(gettext('%s year ago'), $age);\n                        } else {\n                            $status['age'] = sprintf(gettext('%s years ago'), $age);\n                        }\n                    }\n                }\n            }\n\n            $response = json_encode($statuses);\n        }\n\n        return $response;\n    }\n\n    public function dismissStatusAction()\n    {\n        $this->sessionClose();\n\n        if ($this->request->isPost() && $this->request->hasPost(\"subject\")) {\n            $acl = new ACL();\n            $backend = new Backend();\n            $subsystem = $this->request->getPost(\"subject\");\n            $system = json_decode(trim($backend->configdRun('system status')), true);\n            if (array_key_exists($subsystem, $system)) {\n                if (!empty($system[$subsystem]['logLocation'])) {\n                    $aclCheck = $system[$subsystem]['logLocation'];\n                    if (\n                        $acl->isPageAccessible($this->getUserName(), $aclCheck) ||\n                        !$acl->hasPrivilege($this->getUserName(), 'user-config-readonly')\n                    ) {\n                        $status = trim($backend->configdRun(sprintf('system dismiss status %s', $subsystem)));\n                        if ($status == \"OK\") {\n                            return [\n                                \"status\" => \"ok\"\n                            ];\n                        }\n                    }\n                }\n            }\n        }\n\n        return [\"status\" => \"failed\"];\n    }\n}\n"], "filenames": ["src/opnsense/mvc/app/controllers/OPNsense/Core/Api/SystemController.php"], "buggy_code_start_loc": [45], "buggy_code_end_loc": [59], "fixing_code_start_loc": [45], "fixing_code_end_loc": [61], "type": "CWE-352", "message": "A Cross-Site Request Forgery (CSRF) in the System Halt API (/system/halt) of OPNsense Community Edition before 23.7 and Business Edition before 23.4.2 allows attackers to cause a Denial of Service (DoS) via a crafted GET request.", "other": {"cve": {"id": "CVE-2023-38999", "sourceIdentifier": "cve@mitre.org", "published": "2023-08-09T19:15:14.723", "lastModified": "2023-10-10T23:15:10.170", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A Cross-Site Request Forgery (CSRF) in the System Halt API (/system/halt) of OPNsense Community Edition before 23.7 and Business Edition before 23.4.2 allows attackers to cause a Denial of Service (DoS) via a crafted GET request."}, {"lang": "es", "value": "Una Cross-Site Request Forgery (CSRF) en la API System Halt (/system/halt) de OPNsense Community Edition antes de 23.7 y Business Edition antes de 23.4.2 permite a los atacantes provocar una denegaci\u00f3n de servicio (DoS) a trav\u00e9s de una solicitud GET manipulada.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opnsense:opnsense:*:*:*:*:*:*:*:*", "versionEndExcluding": "23.7", "matchCriteriaId": "E4C1BDFF-B6E1-4F82-9957-1FFA069E2EDC"}]}]}], "references": [{"url": "https://github.com/opnsense/core/commit/5d68f43d1f254144831881fc87d885eed120cf3c", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://logicaltrust.net/blog/2023/08/opnsense.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/opnsense/core/commit/5d68f43d1f254144831881fc87d885eed120cf3c"}}