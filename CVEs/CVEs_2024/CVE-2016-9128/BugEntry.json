{"buggy_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * @package    MaxPlugins\n * @subpackage InvocationTags\n */\n\nrequire_once MAX_PATH . '/lib/Max.php';\nrequire_once LIB_PATH . '/Extension/invocationTags/InvocationTags.php';\nrequire_once MAX_PATH . '/lib/max/Plugin/Translation.php';\nrequire_once MAX_PATH . '/lib/max/Delivery/common.php';\nrequire_once MAX_PATH . '/lib/JSON/JSON.php';\n\nrequire_once OX_PATH . '/lib/OX.php';\n\n/**\n *\n * Invocation tag plugin.\n *\n */\nclass Plugins_InvocationTags_OxInvocationTags_Spc extends Plugins_InvocationTags\n{\n    /**\n     * Set default values for options used by this plugin\n     *\n     * @var array Array of $key => $defaultValue\n     */\n    var $defaultOptionValues = array(\n        'block' => 0,\n        'blockcampaign' => 0,\n        'target' => '',\n        'source' => '',\n        'withtext' => 0,\n        'noscript' => 1,\n        'ssl' => 0,\n        'charset' => '',\n    );\n\n    /**\n     * Make this the default publisher plugin\n     *\n     * @var boolean\n     */\n    var $default = true;\n\n    var $varprefix;\n    var $appname;\n\n    /**\n     * Constructor\n     *\n     */\n    function __construct()\n    {\n        $conf = $GLOBALS['_MAX']['CONF'];\n        $this->publisherPlugin = true;\n        $this->varprefix = $conf['var']['prefix'];\n        $this->appname = PRODUCT_NAME . \" v\" . VERSION;\n    }\n\n     /**\n     * Return name of plugin\n     *\n     * @return string\n     */\n    function getName()\n    {\n        return $this->translate(\"Publisher code - Single Page Call\");\n    }\n\n    /**\n     * Return the English name of the plugin. Used when\n     * generating translation keys based on the plugin\n     * name.\n     *\n     * @return string An English string describing the class.\n     */\n    function getNameEN()\n    {\n        return 'Publisher code - Single Page Call';\n    }\n\n    /**\n     * Check if plugin is allowed\n     *\n     * @return boolean  True - allowed, false - not allowed\n     */\n    function isAllowed($extra = null)\n    {\n        return false;\n    }\n\n    /**\n     * Return invocation code for this plugin (codetype)\n     *\n     * @return string\n     */\n    function generateInvocationCode()\n    {\n        $conf = $GLOBALS['_MAX']['CONF'];\n        $pref = $GLOBALS['_MAX']['CONF'];\n\n        $mi = &$this->maxInvocation;\n\n        // Get the affiliate information\n        $doAffiliates = OA_Dal::factoryDO('affiliates');\n        if ($doAffiliates->get($mi->affiliateid)) {\n            $affiliate = $doAffiliates->toArray();\n        }\n        $doZones = OA_Dal::factoryDO('zones');\n        $doZones->affiliateid = $mi->affiliateid;\n        $doZones->find();\n        while ($doZones->fetch() && $row = $doZones->toArray()) {\n            // Email/Newsletter and DHTML and Video zones are not included in SPC\n            if ($row['delivery'] != MAX_ZoneEmail\n                && $row['delivery'] != phpAds_ZoneInterstitial\n                && $row['delivery'] != OX_ZoneVideoInstream\n                && $row['delivery'] != OX_ZoneVideoOverlay) {\n                $aZones[] = $row;\n            }\n        }\n\n        if(count($aZones) == 0) {\n            return 'No Zones Available!';\n        }\n\n\n        $channel = (!empty($mi->source)) ? $mi->source : $affiliate['mnemonic'] . \"/test/preview\";\n\n        $script = \"<?xml version='1.0' encoding='UTF-8' ?><!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>\n<head>\n    <title>Tags for [id{$affiliate['affiliateid']}] \".htmlspecialchars($affiliate['name']).\"</title>\n        <link rel='stylesheet' type='text/css' href='\" . OX::assetPath() .  \"/css/preview.css' />\n        <script type='text/javascript' src='\" . OX::assetPath() .  \"/js/jquery-1.2.3.js'></script>\n\n        <script type='text/javascript'>\n        <!--\n\n            function selectElement() {\n                if (window.getSelection) {\n                    var r = document.createRange();\n                    r.selectNodeContents($(this)[0]);\n                    var s = window.getSelection();\n                    if (s.rangeCount) {\n                        s.collapseToStart();\n                        s.removeAllRanges();\n                    }\n                    s.addRange(r);\n                } else if (document.body.createTextRange) {\n                    var r = document.body.createTextRange();\n                    r.moveToElementText($(this)[0]);\n                    r.select();\n                }\n            }\n\n            $(document).ready(function() {\n                $('pre').bind('mousedown', selectElement);\n                $('pre').bind('click', selectElement);\n                $('pre').bind('mousemove', selectElement);\n\n                $('#closeWindow').click(function() {\n                    window.close();\n                });\n            });\n\n        //-->\n        </script>\n    </head>\n\n    <body class='invocationCodes'>\n        <div class='header'>\n            <h1>\" . PRODUCT_NAME . \"</h1>\n        </div>\n        \";\n\n        $script .= \"\n        <div class='settings'>\n            <h2>Tags <small>for <span class='inlinePublisher'>[id{$affiliate['affiliateid']}] \".htmlspecialchars($affiliate['name']).\"</span></small></h2>\n            <p>\n                This page contains all the information you need to show banners on your website.\n                Please follow the instructions carefully and ensure that you copied the scripts <strong>exactly</strong> as shown below.\n            </p>\n\n            <h3>The following settings were used to generate this page:</h3>\n            <table class='horizontalSummary' summary=''>\n        \";\n\n        reset ($this->defaultOptionValues);\n        foreach ($this->defaultOptionValues as $feature => $default) {\n            switch ($feature) {\n                case 'block':\n                        $optionName = $GLOBALS['strInvocationDontShowAgain'];\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'blockcampaign':\n                        $optionName = $GLOBALS['strInvocationDontShowAgainCampaign'];\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'target':\n                        $optionName = $GLOBALS['strInvocationTarget'];\n                        switch($mi->$feature) {\n                            case '_blank':  $optionValue = 'New window'; break;\n                            case '_top':    $optionValue = 'Same window'; break;\n                            default:        $optionValue = $GLOBALS['strDefault']; break;\n                        }\n                        break;\n                case 'source':\n                        $optionName = $GLOBALS['strInvocationSource'];\n                        $optionValue = $mi->$feature != '' ? htmlspecialchars(stripslashes($mi->$feature)) : '-';\n                        break;\n                case 'withtext':\n                        $optionName = $GLOBALS['strInvocationWithText'];\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'noscript':\n                        $optionName = $this->translate(\"Option - noscript\");\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'ssl':\n                        $optionName = $this->translate(\"Option - SSL\");\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'charset':\n                        $optionName = $GLOBALS['strCharset'];\n                        $optionValue = empty($mi->$feature) ? $GLOBALS['strAutoDetect'] : $mi->$feature;\n                        break;\n                default:\n                        $optionName = $feature;\n                        $optionValue = htmlspecialchars(stripslashes($mi->$feature));\n                        break;\n            }\n\n            $script .= \"\n                <tr>\n                    <th>{$optionName}</th>\n                    <td>{$optionValue}</td>\n                </tr>\n            \";\n        }\n\n        $script .= \"\n            </table>\n        </div>\n        \";\n\n        /* Common script at the top of the page */\n        $codeblock = $this->getHeaderCode();\n\n        $script .= \"\n        <div class='step'>\n            <h2>\n                <div class='number'><span>1</span></div>\n                Header script\n            </h2>\n            <p>\n                Insert the following script at the top of every page on the {$affiliate['website']} website. This code\n                belongs between the <code>&lt;head&gt;</code> and <code>&lt;/head&gt;</code> tags, before any ad scripts\n                on the page:\n            </p>\n\n            <pre>\". htmlspecialchars($codeblock) .\"</pre>\n        </div>\n        \";\n\n        $i = 2;\n\n\n\n\n        foreach($aZones as $zone) {\n            $width = $zone['width'] > -1 ? $zone['width'] : 150;\n            $widthLabel = $zone['width'] > -1 ? $zone['width'] : '*';\n\n            $height = $zone['height'] > -1 ? $zone['height'] : 150;\n            $heightLabel = $zone['height'] > -1 ? $zone['height'] : '*';\n\n            $customClass = array();\n\n            if ($zone['width'] == -1 && $zone['height'] == -1) {\n                $customClass[] = 'customBoth';\n            } elseif ($zone['height'] == -1) {\n                $customClass[] = 'customHeight';\n            } elseif ($zone['width'] == -1) {\n                $customClass[] = 'customWidth';\n            }\n\n            // Labels are roughly 80 x 30 pixels...\n            // width < 80 || height < 30 => No room for even a single label, drop the OpenX logo and show the size outside\n            // width < 160 && height < 60   => No room for both labels... drop the OpenX logo\n            if (($zone['width'] > -1 && $zone['width'] < 80) || ($zone['height'] > -1 && $zone['height'] < 30)) {\n                $customClass[] = 'labelsMicro';\n            } elseif ($zone['width'] > -1 && $zone['width'] < 160 && $zone['height'] > -1 && $zone['height'] < 60) {\n                $customClass[] = 'labelsMini';\n            }\n\n            $codeblock = $this->getZoneCode($zone, $affiliate);\n\n            $script .= \"\n        <div class='step'>\n            <h2>\n                <div class='number'><span>{$i}</span></div>\n                Ad script <small>for <span class='inlineZone'>[id{$zone['zoneid']}] \".htmlspecialchars($zone['zonename']).\"</span></small>\n            </h2>\n            <p>\n                Copy the following script and place it in the site where you want the ad to display:\n            </p>\n\n            <pre>\" . htmlspecialchars($codeblock) . \"</pre>\n\n            <p>\n                Example\" . ($zone['width'] == -1 || $zone['height'] == -1 ? ' (actual size may vary)' : '') . \":\n            </p>\n\n            <div class='sizePreview \" . (count($customClass) ? ' ' . implode(' ', $customClass) : '') . \"' style='width: {$width}px; height: {$height}px;'>\n                <img src='\" . OX::assetPath() . \"/images/logo-adserver-small.png' alt='' />\n                <span>{$widthLabel} x {$heightLabel}</span>\n            </div>\n\n        </div>\n            \";\n\n            $i++;\n        }\n\n        $script .= \"\n        <div class='step'>\n            <h2>\n                <div class='number'><span>{$i}</span></div>\n                Done\n            </h2>\n            <p>\n                Banners should now appear on your website\n            </p>\n\n            <button id='closeWindow'><img src='\" . OX::assetPath() . \"/images/cross.png' alt='' />Close this window</button>\n        </div>\n\n        <div class='generated'>\n            Generated by {$this->appname}\n        </div>\n    </body>\n</html>\n        \";\n\n        return $script;\n    }\n\n    /**\n     * Return list of options\n     *\n     * @return array    Group of options\n     */\n    function getOptionsList()\n    {\n        // Publisher Invocation doesn't require a lot of the default options...\n        if (is_array($this->defaultOptions)) {\n            // JS code generates it's own cacheBuster\n            unset($this->defaultOptions['cacheBuster']);\n            // Publisher invocation is not designed for loading into another adserver\n            unset($this->defaultOptions['3thirdPartyServer']);\n        }\n        $options = array (\n            'spacer'        => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'block'         => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'blockcampaign' => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'spacer'        => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'target'        => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'source'        => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'withtext'      => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'charset'       => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'noscript'      => MAX_PLUGINS_INVOCATION_TAGS_CUSTOM,\n            'ssl'           => MAX_PLUGINS_INVOCATION_TAGS_CUSTOM,\n        );\n\n        return $options;\n    }\n\n    /**\n     * A custom handler for the <noscript> option\n     *\n     * @return string HTML to show the <noscript> option\n     */\n    function noscript()\n    {\n        $maxInvocation = &$this->maxInvocation;\n        $noscript = (isset($maxInvocation->noscript)) ? $maxInvocation->noscript : $this->defaultOptionValues['noscript'];\n\n        $option = '';\n        $option .= \"<tr><td width='30'>&nbsp;</td>\";\n        $option .= \"<td width='200'>\" . $this->translate(\"Option - noscript\") . \"</td>\";\n        $option .= \"<td width='370'><input type='radio' id='noscript-y' name='noscript' value='1'\".($noscript == 1 ? \" checked='checked'\" : '').\" tabindex='\".($maxInvocation->tabindex++).\"'>&nbsp;<label for='noscript-y'>\".$GLOBALS['strYes'].\"</label><br />\";\n        $option .= \"<input type='radio' id='noscript-n' name='noscript' value='0'\".($noscript == 0 ? \" checked='checked'\" : '').\" tabindex='\".($maxInvocation->tabindex++).\"'>&nbsp;<label for='noscript-n'>\".$GLOBALS['strNo'].\"</label></td>\";\n        $option .= \"</tr>\";\n        $option .= \"<tr><td width='30'><img src='\" . OX::assetPath() . \"/images/spacer.gif' height='1' width='100%'></td>\";\n        return $option;\n    }\n\n    function ssl()\n    {\n        $maxInvocation = &$this->maxInvocation;\n        $ssl = (isset($maxInvocation->ssl)) ? $maxInvocation->ssl : $this->defaultOptionValues['ssl'];\n\n        $option = '';\n        $option .= \"<tr><td width='30'>&nbsp;</td>\";\n        $option .= \"<td width='200'>\" . $this->translate(\"Option - SSL\") . \"</td>\";\n        $option .= \"<td width='370'><input type='radio' id='ssl-y' name='ssl' value='1'\".($ssl == 1 ? \" checked='checked'\" : '').\" tabindex='\".($maxInvocation->tabindex++).\"'>&nbsp;<label for='ssl-y'>\".$GLOBALS['strYes'].\"</label><br />\";\n        $option .= \"<input type='radio' name='ssl' id='ssl-y' value='0'\".($ssl == 0 ? \" checked='checked'\" : '').\" tabindex='\".($maxInvocation->tabindex++).\"'>&nbsp;<label for='ssl-n'>\".$GLOBALS['strNo'].\"</label></td>\";\n        $option .= \"</tr>\";\n        $option .= \"<tr><td width='30'><img src='\" . OX::assetPath() . \"/images/spacer.gif' height='1' width='100%'></td>\";\n        return $option;\n    }\n\n    function setInvocation(&$invocation) {\n        $this->maxInvocation = &$invocation;\n        $this->maxInvocation->canDetectCharset = true;\n    }\n\n    /**\n     * Generates header spc tag.\n     * If optional $aZoneAliases is given, additional zone aliasing array will be generated.\n     *\n     * @param array $aZoneAliases zone id => array of alias names\n     * @return unknown\n     */\n    function getHeaderCode($aZoneAliases = null)\n    {\n        $mi = &$this->maxInvocation;\n        $conf = $GLOBALS['_MAX']['CONF'];\n\n        $additionalParams = \"\";\n        foreach ($this->defaultOptionValues as $feature => $default) {\n            // Skip invocation code settings here if they don't affect delivery\n            if ($feature == 'source' || $feature == 'noscript' || $feature == 'ssl') { continue; }\n            if ($mi->$feature != $this->defaultOptionValues[$feature]) {\n                $additionalParams .= \"&amp;{$feature}=\" . $mi->$feature;\n            }\n        }\n\n        $codeblock = \"\";\n        if ($mi->comments) {\n            $codeblock .= \"<!-- Generated by {$this->appname} -->\\n\";\n        }\n        if ($mi->source) {\n            $source = stripslashes($mi->source);\n            $source = addcslashes($source, \"\\x00..\\x1F\\'\\\\\");\n            $codeblock .= \"<script type='text/javascript'><!--// <![CDATA[\\n\";\n            $codeblock .= \"    var {$this->varprefix}source = '{$source}';\\n\";\n            $codeblock .= \"// ]]> --></script>\";\n        }\n\n        $aliasesBlock = '';\n        if (!empty($aZoneAliases)) {\n            $aliasesBlock = $this->generateAliasesCode($aZoneAliases);\n            $codeblock .= !empty($aliasesBlock) ? $aliasesBlock : '';\n        }\n        $url = (!empty($mi->ssl)) ? MAX_commonConstructSecureDeliveryUrl($conf['file']['spcjs'])  : MAX_commonConstructDeliveryUrl($conf['file']['spcjs']);\n        $codeblock .= \"<script type='text/javascript' src='{$url}?id={$mi->affiliateid}{$additionalParams}'></script>\";\n\n        return $codeblock;\n    }\n\n\n    private function generateAliasesCode($aZoneAliases)\n    {\n        $oJson = new Services_JSON();\n\n        $aStruct = array();\n        foreach ($aZoneAliases as $zoneId => $aAliases) {\n            foreach($aAliases as $alias) {\n                $aStruct[$alias] = $zoneId;\n            }\n        }\n        $aliasesCode.= $oJson->encode($aStruct);\n\n        $codeblock .= \"<script type='text/javascript'><!--// <![CDATA[\\n\";\n        $codeblock .= \"    var {$this->varprefix}zones = \";\n        $codeblock .= $aliasesCode;\n        $codeblock .= \"    \\n\";\n        $codeblock .= \"// ]]> --></script>\\n\";\n\n        return $codeblock;\n    }\n\n\n    function getZoneCode($zone, $affiliate, $zoneAlias = null)\n    {\n        $mi = &$this->maxInvocation;\n        $conf = $GLOBALS['_MAX']['CONF'];\n\n        $zone['n'] = $affiliate['mnemonic'] . substr(md5(uniqid('', 1)), 0, 7);\n\n        $uri = (!empty($mi->ssl)) ? MAX_commonConstructSecureDeliveryUrl('')  : MAX_commonConstructDeliveryUrl('');\n\n        $codeblock = \"<script type='text/javascript'><!--// <![CDATA[\";\n        $js_func = $this->varprefix . (($zone['delivery'] == phpAds_ZonePopup) ? 'showpop' : 'show');\n        if ($mi->comments) {\n            $codeblock .= \"\\n    /* \".($zoneAlias ? addcslashes($zoneAlias).\" - \" : '').\"[id{$zone['zoneid']}] \".addcslashes($zone['zonename'], '/').\" */\";\n        }\n        $codeblock .= \"\\n    {$js_func}(\".($zoneAlias ? \"'\".$zoneAlias.\"'\" : $zone['zoneid']).\");\\n// ]]> --></script>\";\n        if ($zone['delivery'] != phpAds_ZoneText && $mi->noscript) {\n            $codeblock .= \"<noscript><a target='_blank' href='{$uri}{$conf['file']['click']}?n={$zone['n']}'>\";\n            $codeblock .= \"<img border='0' alt='' src='{$uri}{$conf['file']['view']}?zoneid={$zone['zoneid']}&amp;n={$zone['n']}' /></a>\";\n            $codeblock .= \"</noscript>\";\n        }\n\n        return $codeblock;\n    }\n}\n\n?>\n"], "fixing_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * @package    MaxPlugins\n * @subpackage InvocationTags\n */\n\nrequire_once MAX_PATH . '/lib/Max.php';\nrequire_once LIB_PATH . '/Extension/invocationTags/InvocationTags.php';\nrequire_once MAX_PATH . '/lib/max/Plugin/Translation.php';\nrequire_once MAX_PATH . '/lib/max/Delivery/common.php';\nrequire_once MAX_PATH . '/lib/JSON/JSON.php';\n\nrequire_once OX_PATH . '/lib/OX.php';\n\n/**\n *\n * Invocation tag plugin.\n *\n */\nclass Plugins_InvocationTags_OxInvocationTags_Spc extends Plugins_InvocationTags\n{\n    /**\n     * Set default values for options used by this plugin\n     *\n     * @var array Array of $key => $defaultValue\n     */\n    var $defaultOptionValues = array(\n        'block' => 0,\n        'blockcampaign' => 0,\n        'target' => '',\n        'source' => '',\n        'withtext' => 0,\n        'noscript' => 1,\n        'ssl' => 0,\n        'charset' => '',\n    );\n\n    /**\n     * Make this the default publisher plugin\n     *\n     * @var boolean\n     */\n    var $default = true;\n\n    var $varprefix;\n    var $appname;\n\n    /**\n     * Constructor\n     *\n     */\n    function __construct()\n    {\n        $conf = $GLOBALS['_MAX']['CONF'];\n        $this->publisherPlugin = true;\n        $this->varprefix = $conf['var']['prefix'];\n        $this->appname = PRODUCT_NAME . \" v\" . VERSION;\n    }\n\n     /**\n     * Return name of plugin\n     *\n     * @return string\n     */\n    function getName()\n    {\n        return $this->translate(\"Publisher code - Single Page Call\");\n    }\n\n    /**\n     * Return the English name of the plugin. Used when\n     * generating translation keys based on the plugin\n     * name.\n     *\n     * @return string An English string describing the class.\n     */\n    function getNameEN()\n    {\n        return 'Publisher code - Single Page Call';\n    }\n\n    /**\n     * Check if plugin is allowed\n     *\n     * @return boolean  True - allowed, false - not allowed\n     */\n    function isAllowed($extra = null)\n    {\n        return false;\n    }\n\n    /**\n     * Return invocation code for this plugin (codetype)\n     *\n     * @return string\n     */\n    function generateInvocationCode()\n    {\n        $conf = $GLOBALS['_MAX']['CONF'];\n        $pref = $GLOBALS['_MAX']['CONF'];\n\n        $mi = &$this->maxInvocation;\n\n        // Get the affiliate information\n        $doAffiliates = OA_Dal::factoryDO('affiliates');\n        if ($doAffiliates->get($mi->affiliateid)) {\n            $affiliate = $doAffiliates->toArray();\n        }\n        $doZones = OA_Dal::factoryDO('zones');\n        $doZones->affiliateid = $mi->affiliateid;\n        $doZones->find();\n        while ($doZones->fetch() && $row = $doZones->toArray()) {\n            // Email/Newsletter and DHTML and Video zones are not included in SPC\n            if ($row['delivery'] != MAX_ZoneEmail\n                && $row['delivery'] != phpAds_ZoneInterstitial\n                && $row['delivery'] != OX_ZoneVideoInstream\n                && $row['delivery'] != OX_ZoneVideoOverlay) {\n                $aZones[] = $row;\n            }\n        }\n\n        if(count($aZones) == 0) {\n            return 'No Zones Available!';\n        }\n\n\n        $channel = (!empty($mi->source)) ? $mi->source : $affiliate['mnemonic'] . \"/test/preview\";\n\n        $script = \"<?xml version='1.0' encoding='UTF-8' ?><!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>\n<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>\n<head>\n    <title>Tags for [id{$affiliate['affiliateid']}] \".htmlspecialchars($affiliate['name']).\"</title>\n        <link rel='stylesheet' type='text/css' href='\" . OX::assetPath() .  \"/css/preview.css' />\n        <script type='text/javascript' src='\" . OX::assetPath() .  \"/js/jquery-1.2.3.js'></script>\n\n        <script type='text/javascript'>\n        <!--\n\n            function selectElement() {\n                if (window.getSelection) {\n                    var r = document.createRange();\n                    r.selectNodeContents($(this)[0]);\n                    var s = window.getSelection();\n                    if (s.rangeCount) {\n                        s.collapseToStart();\n                        s.removeAllRanges();\n                    }\n                    s.addRange(r);\n                } else if (document.body.createTextRange) {\n                    var r = document.body.createTextRange();\n                    r.moveToElementText($(this)[0]);\n                    r.select();\n                }\n            }\n\n            $(document).ready(function() {\n                $('pre').bind('mousedown', selectElement);\n                $('pre').bind('click', selectElement);\n                $('pre').bind('mousemove', selectElement);\n\n                $('#closeWindow').click(function() {\n                    window.close();\n                });\n            });\n\n        //-->\n        </script>\n    </head>\n\n    <body class='invocationCodes'>\n        <div class='header'>\n            <h1>\" . PRODUCT_NAME . \"</h1>\n        </div>\n        \";\n\n        $script .= \"\n        <div class='settings'>\n            <h2>Tags <small>for <span class='inlinePublisher'>[id{$affiliate['affiliateid']}] \".htmlspecialchars($affiliate['name']).\"</span></small></h2>\n            <p>\n                This page contains all the information you need to show banners on your website.\n                Please follow the instructions carefully and ensure that you copied the scripts <strong>exactly</strong> as shown below.\n            </p>\n\n            <h3>The following settings were used to generate this page:</h3>\n            <table class='horizontalSummary' summary=''>\n        \";\n\n        reset ($this->defaultOptionValues);\n        foreach ($this->defaultOptionValues as $feature => $default) {\n            switch ($feature) {\n                case 'block':\n                        $optionName = $GLOBALS['strInvocationDontShowAgain'];\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'blockcampaign':\n                        $optionName = $GLOBALS['strInvocationDontShowAgainCampaign'];\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'target':\n                        $optionName = $GLOBALS['strInvocationTarget'];\n                        switch($mi->$feature) {\n                            case '_blank':  $optionValue = 'New window'; break;\n                            case '_top':    $optionValue = 'Same window'; break;\n                            default:        $optionValue = $GLOBALS['strDefault']; break;\n                        }\n                        break;\n                case 'source':\n                        $optionName = $GLOBALS['strInvocationSource'];\n                        $optionValue = $mi->$feature != '' ? htmlspecialchars(stripslashes($mi->$feature)) : '-';\n                        break;\n                case 'withtext':\n                        $optionName = $GLOBALS['strInvocationWithText'];\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'noscript':\n                        $optionName = $this->translate(\"Option - noscript\");\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'ssl':\n                        $optionName = $this->translate(\"Option - SSL\");\n                        $optionValue = intval($mi->$feature) ? $GLOBALS['strYes'] : $GLOBALS['strNo'];\n                        break;\n                case 'charset':\n                        $optionName = $GLOBALS['strCharset'];\n                        $optionValue = empty($mi->$feature) ? $GLOBALS['strAutoDetect'] : htmlspecialchars($mi->$feature);\n                        break;\n                default:\n                        $optionName = $feature;\n                        $optionValue = htmlspecialchars(stripslashes($mi->$feature));\n                        break;\n            }\n\n            $script .= \"\n                <tr>\n                    <th>{$optionName}</th>\n                    <td>{$optionValue}</td>\n                </tr>\n            \";\n        }\n\n        $script .= \"\n            </table>\n        </div>\n        \";\n\n        /* Common script at the top of the page */\n        $codeblock = $this->getHeaderCode();\n\n        $script .= \"\n        <div class='step'>\n            <h2>\n                <div class='number'><span>1</span></div>\n                Header script\n            </h2>\n            <p>\n                Insert the following script at the top of every page on the {$affiliate['website']} website. This code\n                belongs between the <code>&lt;head&gt;</code> and <code>&lt;/head&gt;</code> tags, before any ad scripts\n                on the page:\n            </p>\n\n            <pre>\". htmlspecialchars($codeblock) .\"</pre>\n        </div>\n        \";\n\n        $i = 2;\n\n\n\n\n        foreach($aZones as $zone) {\n            $width = $zone['width'] > -1 ? $zone['width'] : 150;\n            $widthLabel = $zone['width'] > -1 ? $zone['width'] : '*';\n\n            $height = $zone['height'] > -1 ? $zone['height'] : 150;\n            $heightLabel = $zone['height'] > -1 ? $zone['height'] : '*';\n\n            $customClass = array();\n\n            if ($zone['width'] == -1 && $zone['height'] == -1) {\n                $customClass[] = 'customBoth';\n            } elseif ($zone['height'] == -1) {\n                $customClass[] = 'customHeight';\n            } elseif ($zone['width'] == -1) {\n                $customClass[] = 'customWidth';\n            }\n\n            // Labels are roughly 80 x 30 pixels...\n            // width < 80 || height < 30 => No room for even a single label, drop the OpenX logo and show the size outside\n            // width < 160 && height < 60   => No room for both labels... drop the OpenX logo\n            if (($zone['width'] > -1 && $zone['width'] < 80) || ($zone['height'] > -1 && $zone['height'] < 30)) {\n                $customClass[] = 'labelsMicro';\n            } elseif ($zone['width'] > -1 && $zone['width'] < 160 && $zone['height'] > -1 && $zone['height'] < 60) {\n                $customClass[] = 'labelsMini';\n            }\n\n            $codeblock = $this->getZoneCode($zone, $affiliate);\n\n            $script .= \"\n        <div class='step'>\n            <h2>\n                <div class='number'><span>{$i}</span></div>\n                Ad script <small>for <span class='inlineZone'>[id{$zone['zoneid']}] \".htmlspecialchars($zone['zonename']).\"</span></small>\n            </h2>\n            <p>\n                Copy the following script and place it in the site where you want the ad to display:\n            </p>\n\n            <pre>\" . htmlspecialchars($codeblock) . \"</pre>\n\n            <p>\n                Example\" . ($zone['width'] == -1 || $zone['height'] == -1 ? ' (actual size may vary)' : '') . \":\n            </p>\n\n            <div class='sizePreview \" . (count($customClass) ? ' ' . implode(' ', $customClass) : '') . \"' style='width: {$width}px; height: {$height}px;'>\n                <img src='\" . OX::assetPath() . \"/images/logo-adserver-small.png' alt='' />\n                <span>{$widthLabel} x {$heightLabel}</span>\n            </div>\n\n        </div>\n            \";\n\n            $i++;\n        }\n\n        $script .= \"\n        <div class='step'>\n            <h2>\n                <div class='number'><span>{$i}</span></div>\n                Done\n            </h2>\n            <p>\n                Banners should now appear on your website\n            </p>\n\n            <button id='closeWindow'><img src='\" . OX::assetPath() . \"/images/cross.png' alt='' />Close this window</button>\n        </div>\n\n        <div class='generated'>\n            Generated by {$this->appname}\n        </div>\n    </body>\n</html>\n        \";\n\n        return $script;\n    }\n\n    /**\n     * Return list of options\n     *\n     * @return array    Group of options\n     */\n    function getOptionsList()\n    {\n        // Publisher Invocation doesn't require a lot of the default options...\n        if (is_array($this->defaultOptions)) {\n            // JS code generates it's own cacheBuster\n            unset($this->defaultOptions['cacheBuster']);\n            // Publisher invocation is not designed for loading into another adserver\n            unset($this->defaultOptions['3thirdPartyServer']);\n        }\n        $options = array (\n            'spacer'        => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'block'         => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'blockcampaign' => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'spacer'        => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'target'        => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'source'        => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'withtext'      => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'charset'       => MAX_PLUGINS_INVOCATION_TAGS_STANDARD,\n            'noscript'      => MAX_PLUGINS_INVOCATION_TAGS_CUSTOM,\n            'ssl'           => MAX_PLUGINS_INVOCATION_TAGS_CUSTOM,\n        );\n\n        return $options;\n    }\n\n    /**\n     * A custom handler for the <noscript> option\n     *\n     * @return string HTML to show the <noscript> option\n     */\n    function noscript()\n    {\n        $maxInvocation = &$this->maxInvocation;\n        $noscript = (isset($maxInvocation->noscript)) ? $maxInvocation->noscript : $this->defaultOptionValues['noscript'];\n\n        $option = '';\n        $option .= \"<tr><td width='30'>&nbsp;</td>\";\n        $option .= \"<td width='200'>\" . $this->translate(\"Option - noscript\") . \"</td>\";\n        $option .= \"<td width='370'><input type='radio' id='noscript-y' name='noscript' value='1'\".($noscript == 1 ? \" checked='checked'\" : '').\" tabindex='\".($maxInvocation->tabindex++).\"'>&nbsp;<label for='noscript-y'>\".$GLOBALS['strYes'].\"</label><br />\";\n        $option .= \"<input type='radio' id='noscript-n' name='noscript' value='0'\".($noscript == 0 ? \" checked='checked'\" : '').\" tabindex='\".($maxInvocation->tabindex++).\"'>&nbsp;<label for='noscript-n'>\".$GLOBALS['strNo'].\"</label></td>\";\n        $option .= \"</tr>\";\n        $option .= \"<tr><td width='30'><img src='\" . OX::assetPath() . \"/images/spacer.gif' height='1' width='100%'></td>\";\n        return $option;\n    }\n\n    function ssl()\n    {\n        $maxInvocation = &$this->maxInvocation;\n        $ssl = (isset($maxInvocation->ssl)) ? $maxInvocation->ssl : $this->defaultOptionValues['ssl'];\n\n        $option = '';\n        $option .= \"<tr><td width='30'>&nbsp;</td>\";\n        $option .= \"<td width='200'>\" . $this->translate(\"Option - SSL\") . \"</td>\";\n        $option .= \"<td width='370'><input type='radio' id='ssl-y' name='ssl' value='1'\".($ssl == 1 ? \" checked='checked'\" : '').\" tabindex='\".($maxInvocation->tabindex++).\"'>&nbsp;<label for='ssl-y'>\".$GLOBALS['strYes'].\"</label><br />\";\n        $option .= \"<input type='radio' name='ssl' id='ssl-y' value='0'\".($ssl == 0 ? \" checked='checked'\" : '').\" tabindex='\".($maxInvocation->tabindex++).\"'>&nbsp;<label for='ssl-n'>\".$GLOBALS['strNo'].\"</label></td>\";\n        $option .= \"</tr>\";\n        $option .= \"<tr><td width='30'><img src='\" . OX::assetPath() . \"/images/spacer.gif' height='1' width='100%'></td>\";\n        return $option;\n    }\n\n    function setInvocation(&$invocation) {\n        $this->maxInvocation = &$invocation;\n        $this->maxInvocation->canDetectCharset = true;\n    }\n\n    /**\n     * Generates header spc tag.\n     * If optional $aZoneAliases is given, additional zone aliasing array will be generated.\n     *\n     * @param array $aZoneAliases zone id => array of alias names\n     * @return unknown\n     */\n    function getHeaderCode($aZoneAliases = null)\n    {\n        $mi = &$this->maxInvocation;\n        $conf = $GLOBALS['_MAX']['CONF'];\n\n        $additionalParams = \"\";\n        foreach ($this->defaultOptionValues as $feature => $default) {\n            // Skip invocation code settings here if they don't affect delivery\n            if ($feature == 'source' || $feature == 'noscript' || $feature == 'ssl') { continue; }\n            if ($mi->$feature != $this->defaultOptionValues[$feature]) {\n                $additionalParams .= \"&amp;{$feature}=\" . $mi->$feature;\n            }\n        }\n\n        $codeblock = \"\";\n        if ($mi->comments) {\n            $codeblock .= \"<!-- Generated by {$this->appname} -->\\n\";\n        }\n        if ($mi->source) {\n            $source = stripslashes($mi->source);\n            $source = addcslashes($source, \"\\x00..\\x1F\\'\\\\\");\n            $codeblock .= \"<script type='text/javascript'><!--// <![CDATA[\\n\";\n            $codeblock .= \"    var {$this->varprefix}source = '{$source}';\\n\";\n            $codeblock .= \"// ]]> --></script>\";\n        }\n\n        $aliasesBlock = '';\n        if (!empty($aZoneAliases)) {\n            $aliasesBlock = $this->generateAliasesCode($aZoneAliases);\n            $codeblock .= !empty($aliasesBlock) ? $aliasesBlock : '';\n        }\n        $url = (!empty($mi->ssl)) ? MAX_commonConstructSecureDeliveryUrl($conf['file']['spcjs'])  : MAX_commonConstructDeliveryUrl($conf['file']['spcjs']);\n        $codeblock .= \"<script type='text/javascript' src='{$url}?id={$mi->affiliateid}{$additionalParams}'></script>\";\n\n        return $codeblock;\n    }\n\n\n    private function generateAliasesCode($aZoneAliases)\n    {\n        $oJson = new Services_JSON();\n\n        $aStruct = array();\n        foreach ($aZoneAliases as $zoneId => $aAliases) {\n            foreach($aAliases as $alias) {\n                $aStruct[$alias] = $zoneId;\n            }\n        }\n        $aliasesCode.= $oJson->encode($aStruct);\n\n        $codeblock .= \"<script type='text/javascript'><!--// <![CDATA[\\n\";\n        $codeblock .= \"    var {$this->varprefix}zones = \";\n        $codeblock .= $aliasesCode;\n        $codeblock .= \"    \\n\";\n        $codeblock .= \"// ]]> --></script>\\n\";\n\n        return $codeblock;\n    }\n\n\n    function getZoneCode($zone, $affiliate, $zoneAlias = null)\n    {\n        $mi = &$this->maxInvocation;\n        $conf = $GLOBALS['_MAX']['CONF'];\n\n        $zone['n'] = $affiliate['mnemonic'] . substr(md5(uniqid('', 1)), 0, 7);\n\n        $uri = (!empty($mi->ssl)) ? MAX_commonConstructSecureDeliveryUrl('')  : MAX_commonConstructDeliveryUrl('');\n\n        $codeblock = \"<script type='text/javascript'><!--// <![CDATA[\";\n        $js_func = $this->varprefix . (($zone['delivery'] == phpAds_ZonePopup) ? 'showpop' : 'show');\n        if ($mi->comments) {\n            $codeblock .= \"\\n    /* \".($zoneAlias ? addcslashes($zoneAlias).\" - \" : '').\"[id{$zone['zoneid']}] \".addcslashes($zone['zonename'], '/').\" */\";\n        }\n        $codeblock .= \"\\n    {$js_func}(\".($zoneAlias ? \"'\".$zoneAlias.\"'\" : $zone['zoneid']).\");\\n// ]]> --></script>\";\n        if ($zone['delivery'] != phpAds_ZoneText && $mi->noscript) {\n            $codeblock .= \"<noscript><a target='_blank' href='{$uri}{$conf['file']['click']}?n={$zone['n']}'>\";\n            $codeblock .= \"<img border='0' alt='' src='{$uri}{$conf['file']['view']}?zoneid={$zone['zoneid']}&amp;n={$zone['n']}' /></a>\";\n            $codeblock .= \"</noscript>\";\n        }\n\n        return $codeblock;\n    }\n}\n\n?>\n"], "filenames": ["plugins_repo/openXInvocationTags/plugins/invocationTags/oxInvocationTags/spc.class.php"], "buggy_code_start_loc": [236], "buggy_code_end_loc": [237], "fixing_code_start_loc": [236], "fixing_code_end_loc": [237], "type": "CWE-79", "message": "Revive Adserver before 3.2.3 suffers from reflected XSS. The affiliate-preview.php script in www/admin is vulnerable to a reflected XSS attack. This vulnerability could be used by an attacker to steal the session ID of an authenticated user, by tricking them into visiting a specifically crafted URL.", "other": {"cve": {"id": "CVE-2016-9128", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:00.480", "lastModified": "2019-10-09T23:20:19.227", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Revive Adserver before 3.2.3 suffers from reflected XSS. The affiliate-preview.php script in www/admin is vulnerable to a reflected XSS attack. This vulnerability could be used by an attacker to steal the session ID of an authenticated user, by tricking them into visiting a specifically crafted URL."}, {"lang": "es", "value": "Revive Adserver en versiones anteriores a 3.2.3 sufre de XSS reflejado. El script affiliate-preview.php en www/admin es vulnerable a un ataque XSS reflejado. Esta vulnerabilidad podr\u00eda ser utilizada por un atacante para robar el identificador de sesi\u00f3n de un usuario autenticado, enga\u00f1\u00e1ndolos para que visiten una direcci\u00f3n URL espec\u00edfica."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:revive-adserver:revive_adserver:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.2.2", "matchCriteriaId": "94F64F5A-ACD3-4AED-82BE-832D7B4801DA"}]}]}], "references": [{"url": "https://github.com/revive-adserver/revive-adserver/commit/a323fd626627e8d42819fd5b7e2829196b5c54a3", "source": "support@hackerone.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/revive-adserver/revive-adserver/commit/e17a7ec3412ded751cda50b82338de471d656d74", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/99004", "source": "support@hackerone.com", "tags": ["Permissions Required"]}, {"url": "https://www.revive-adserver.com/security/revive-sa-2016-001/", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/revive-adserver/revive-adserver/commit/a323fd626627e8d42819fd5b7e2829196b5c54a3"}}