{"buggy_code": ["/*******************************************************************************\n * Copyright  (c) 2013 Mover Zhou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\npackage custom.application;\n\nimport custom.objects.User;\nimport custom.objects.bible;\nimport custom.objects.book;\nimport custom.objects.keyword;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.ParseException;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.tinystruct.AbstractApplication;\nimport org.tinystruct.ApplicationException;\nimport org.tinystruct.data.component.Field;\nimport org.tinystruct.data.component.Pager;\nimport org.tinystruct.data.component.Row;\nimport org.tinystruct.data.component.Table;\nimport org.tinystruct.dom.Document;\nimport org.tinystruct.dom.Element;\nimport org.tinystruct.handler.Reforward;\nimport org.tinystruct.http.Request;\nimport org.tinystruct.http.Response;\nimport org.tinystruct.http.Session;\nimport org.tinystruct.system.util.StringUtilities;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\n\nimport static org.tinystruct.http.Constants.HTTP_REQUEST;\nimport static org.tinystruct.http.Constants.HTTP_RESPONSE;\n\npublic class search extends AbstractApplication {\n    private static int i = 0;\n    private static String API_KEY = \"AIzaSyCgMMCOs8drxcnBclraPiR0eU29qSF1vHM\";\n    private static String CUSTOM_SEARCH_ENGINE_ID = \"016436735745445346824:fgyqgo18wfm\";\n    private final String[] ids = new String[]{\"016436735745445346824:fgyqgo18wfm\", \"014099384324434647311:udrkfx4-ipk\"};\n    private final String[] keys = new String[]{\"AIzaSyCgMMCOs8drxcnBclraPiR0eU29qSF1vHM\", \"AIzaSyC-k_Cm_xClsqzeOGk8Dh5ECaZ449Vf6Ic\"};\n    private Request request;\n    private Response response;\n    private User usr;\n\n    public static void main(String[] args) throws UnsupportedEncodingException {\n        System.out.println(new search().createRequestString(\"hello\", 1));\n    }\n\n    @Override\n    public void init() {\n\n        this.setAction(\"bible/search\", \"query\");\n        this.setAction(\"bible/advsearch\", \"advanced\");\n\n        this.setVariable(\"TEMPLATES_DIR\", \"/themes\", false);\n        this.setVariable(\"keyword\", \"\");\n        this.setVariable(\"start\", \"0\");\n        this.setVariable(\"end\", \"0\");\n        this.setVariable(\"size\", \"0\");\n        this.setVariable(\"value\", \"\");\n    }\n\n    @Override\n    public void setLocale(Locale locale) {\n        super.setLocale(locale);\n\n        this.setText(\"application.title\");\n        this.setText(\"application.language.name\");\n\n        this.setText(\"page.search.title\");\n        this.setText(\"page.welcome.caption\");\n        this.setText(\"page.language-setting.title\");\n        this.setText(\"page.logout.caption\");\n        this.setText(\"page.reading.title\");\n\n        this.setText(\"navigator.bible.caption\");\n        this.setText(\"navigator.video.caption\");\n        this.setText(\"navigator.document.caption\");\n        this.setText(\"navigator.reader.caption\");\n        this.setText(\"navigator.controller.caption\");\n        this.setText(\"navigator.help.caption\");\n\n        this.setText(\"holy.book.forward\");\n        this.setText(\"holy.book.previous\");\n        this.setText(\"holy.book.next\");\n        this.setText(\"holy.book.find-and-reading\");\n        this.setText(\"holy.book.tools\");\n        this.setText(\"holy.book.select\");\n\n        this.setText(\"holy.bible\");\n        this.setText(\"holy.bible.old-testament\");\n        this.setText(\"holy.bible.new-testament\");\n\n        this.setText(\"footer.report-a-site-bug\");\n        this.setText(\"footer.privacy\");\n        this.setText(\"footer.register\");\n        this.setText(\"footer.api\");\n        this.setText(\"footer.updates-rss\");\n\n        this.setText(\"search.confirm.caption\");\n        this.setText(\"search.submit.caption\");\n        this.setText(\"search.strict.mode\");\n        this.setText(\"search.advanced.mode\");\n\n        this.setText(\"invite.confirm.caption\");\n        this.setText(\"invite.submit.caption\");\n\n        this.setText(\"subscribe.plan\");\n        this.setText(\"subscribe.bible.plan\");\n        this.setText(\"subscribe.article.plan\");\n        this.setText(\"subscribe.submit.caption\");\n        this.setText(\"subscribe.email.caption\");\n        this.setText(\"user.lastlogin.caption\");\n        this.setText(\"holy.bible.download\");\n        this.setText(\"holy.bible.chinese.download\");\n        this.setText(\"search.info\", 0, 0, \"\", 0);\n\n        String username = \"\";\n        if (this.getVariable(\"username\") != null) {\n            username = String.valueOf(this.getVariable(\"username\").getValue());\n        }\n\n        this.setText(\"page.welcome.hello\", (username == null || username.trim()\n                .length() == 0) ? \"\" : username + \"\uff0c\");\n    }\n\n    @Override\n    public String version() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public Object query() throws ApplicationException {\n        this.request = (Request) this.context\n                .getAttribute(HTTP_REQUEST);\n        if (this.request.getParameter(\"keyword\") != null)\n            return this.query(this.request.getParameter(\"keyword\"));\n\n        return this;\n    }\n\n    public Object query(String query) throws ApplicationException {\n        StringBuffer html = new StringBuffer();\n        String[] keywords;\n\n        int page = 1, pageSize = 20;\n\n        this.request = (Request) this.context\n                .getAttribute(HTTP_REQUEST);\n        if (this.request.getParameter(\"page\") == null\n                || this.request.getParameter(\"page\").toString().trim().length() <= 0) {\n            page = 1;\n        } else {\n            page = Integer.parseInt(this.request.getParameter(\"page\").toString());\n        }\n\n        int startIndex = (page - 1) * pageSize;\n        this.setVariable(\"search.title\", \"\u65e0\u76f8\u5173\u7ed3\u679c - \");\n\n        if (query.trim().length() > 0) {\n            query = StringUtilities.htmlSpecialChars(query);\n            if (query.indexOf('|') != -1) {\n                String[] q = query.split(\"|\");\n                query = q[0];\n            }\n\n            query = query.trim();\n            keywords = query.split(\" \");\n\n            this.setVariable(\"keyword\", query);\n            this.setVariable(\"search.title\", query + \" - \");\n        } else {\n            this.setVariable(\"keyword\", \"\");\n            return this;\n        }\n\n        StringBuffer condition = new StringBuffer();\n        int i = 0, j, k = 0;\n        String _keyword;\n        while (i < keywords.length) {\n            _keyword = keywords[i];\n            if (_keyword.trim().length() > 0) {\n                if (condition.length() == 0) {\n                    condition.append(\" bible.content like '%\" + _keyword + \"%' \");\n                } else {\n                    condition.append(\" AND bible.content like '%\" + _keyword + \"%' \");\n                    /*\n                     * if(true)\n                     * condition.append(\" AND bible.content like '%\"+keywords[i]+\"%' \");\n                     * else\n                     * condition.append(\" OR bible.content like '%\"+keywords[i]+\"%' \");\n                     */\n                }\n            }\n            i++;\n        }\n\n        Locale locale = this.getLocale();\n        if (condition.length() == 0)\n            condition.append(\" book.language='\" + locale + \"' \");\n        else\n            condition.append(\" AND book.language='\" + locale + \"' \");\n\n        book book = new book();\n        bible bible = new bible();\n        if (locale.toString().equalsIgnoreCase(Locale.US.toString())) {\n            bible.setTableName(\"NIV\");\n        } else if (locale.toString().equalsIgnoreCase(Locale.UK.toString())) {\n            bible.setTableName(\"ESV\");\n        } else {\n            bible.setTableName(locale.toString());\n        }\n\n        String SQL = \"SELECT bible.*,book.book_name FROM \" + bible.getTableName()\n                + \" as bible left join \" + book.getTableName()\n                + \" as book on bible.book_id=book.book_id where \" + condition\n                + \" order by bible.book_id,bible.chapter_id limit \" + startIndex + \",\"\n                + pageSize;\n        String look = \"SELECT count(bible.id) AS size FROM \" + bible.getTableName()\n                + \" as bible left join \" + book.getTableName()\n                + \" as book on bible.book_id=book.book_id where \" + condition;\n\n        Table vtable = bible.find(SQL, new Object[]{});\n        boolean noResult = vtable.size() > 0;\n\n        if (!noResult && query.length() > 0) {\n            try {\n                Table list = book.findWith(\"WHERE language=? and book_name=?\",\n                        new Object[]{this.getLocale().toString(), query});\n                if (list.size() > 0) {\n                    this.response = (Response) this.context\n                            .getAttribute(HTTP_RESPONSE);\n\n                    Reforward reforward = new Reforward(request, response);\n                    query = URLEncoder.encode(query, \"utf-8\");\n                    reforward.setDefault(this.context.getAttribute(\"HTTP_HOST\") + query);\n                    reforward.forward();\n                    return reforward;\n                }\n            } catch (ApplicationException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (UnsupportedEncodingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n\n        Row found = bible.findOne(look, new Object[]{});\n\n        long startTime = System.currentTimeMillis();\n        Pager pager = new Pager();\n        pager.setPageSize(pageSize);\n        pager.setCurrentPage(page);\n        pager.setListSize(found.getFieldInfo(\"size\").intValue());\n\n        Field field;\n        int next = pager.getStartIndex();// \u6b64\u4f4d\u7f6e\u5373\u4e3a\u5f53\u524d\u9875\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\u7684ID\n\n        html.append(\"<ol class=\\\"searchresults\\\" start=\\\"\" + next + \"\\\">\\r\\n\");\n\n        String finded, word;\n        Row row;\n        Enumeration<Row> table = vtable.elements();\n        int n = 0;\n        while (table.hasMoreElements()) {\n            row = table.nextElement();\n            Iterator<Field> iterator = row.iterator();\n\n            n++;\n            while (iterator.hasNext()) {\n                field = iterator.next();\n                finded = field.get(\"content\").value().toString();\n\n                j = 0;\n                while (j < keywords.length) {\n                    finded = StringUtilities.sign(finded, keywords[j++]);\n                }\n\n                html.append(\"<li\"\n                        + (n % 2 == 0 ? \" class=\\\"even\\\"\" : \" class=\\\"odd\\\"\")\n                        + \"><a href=\\\"\"\n                        + this.context.getAttribute(\"HTTP_HOST\")\n                        + \"bible/\"\n                        + field.get(\"book_id\").value().toString()\n                        + \"/\"\n                        + field.get(\"chapter_id\").value().toString()\n                        + \"/\"\n                        + field.get(\"part_id\").value().toString()\n                        + \"\\\" target=\\\"_blank\\\">\"\n                        + this.setText(\"search.bible.info\", field.get(\"book_name\").value()\n                        .toString(), field.get(\"chapter_id\").value().toString(), field\n                        .get(\"part_id\").value().toString()) + \"</a><p>\" + finded\n                        + \"</p></li> \\r\\n\");\n                next++;\n            }\n        }\n\n        Table ktable;\n        Row krow;\n        while (k < keywords.length && noResult) {\n            word = keywords[k++];\n            keyword keyword = new keyword();\n            keyword.setKeyword(word);\n            ktable = keyword.setRequestFields(\"id,visit\").findWith(\"WHERE keyword=?\",\n                    new Object[]{word});\n\n            if (ktable.size() == 0) {\n                keyword.setVisit(0);\n                keyword.append();\n            } else {\n                krow = ktable.get(0);\n                keyword.setId(krow.getFieldInfo(\"id\").value());\n                keyword.setVisit(krow.getFieldInfo(\"visit\").intValue() + 1);\n                keyword.update();\n            }\n        }\n        html.append(\"</ol>\\r\\n\");\n\n        String actionURL = this.context.getAttribute(\"HTTP_HOST\") + \"bible/search/\"\n                + query + \"&page\";\n        pager.setFirstPageText(this.getProperty(\"page.first.text\"));\n        pager.setLastPageText(this.getProperty(\"page.last.text\"));\n        pager.setCurrentPageText(this.getProperty(\"page.current.text\"));\n        pager.setNextPageText(this.getProperty(\"page.next.text\"));\n        pager.setEndPageText(this.getProperty(\"page.end.text\"));\n        pager.setControlBarText(this.getProperty(\"page.controlbar.text\"));\n\n        html.append(\"<div class=\\\"pagination\\\" style=\\\"cursor:default\\\">\"\n                + pager.getPageControlBar(actionURL) + \"</div>\\r\\n\");\n        html.append(\"<!-- \"\n                + String.valueOf(System.currentTimeMillis() - startTime) + \" -->\");\n\n        int start = page - 1 == 0 ? 1 : (page - 1) * pageSize + 1, end = page\n                * pageSize;\n\n        this.setVariable(\"start\", String.valueOf(start));\n        this.setVariable(\"end\", String.valueOf(end));\n        this.setVariable(\"size\", String.valueOf(pager.getSize()));\n        this.setVariable(\"value\", html.toString());\n        this.setVariable(\"action\", this.config.get(\"default.base_url\")\n                + this.context.getAttribute(\"REQUEST_ACTION\").toString());\n\n        this.setText(\"search.info\", start, end, query, pager.getSize());\n\n        Session session = request.getSession();\n        if (session.getAttribute(\"usr\") != null) {\n            this.usr = (User) session.getAttribute(\"usr\");\n\n            this.setVariable(\"user.status\", \"\");\n            this.setVariable(\"user.profile\",\n                    \"<a href=\\\"javascript:void(0)\\\" onmousedown=\\\"profileMenu.show(event,'1')\\\">\"\n                            + this.usr.getEmail() + \"</a>\");\n        } else {\n            this.setVariable(\"user.status\", \"<a href=\\\"\" + this.getLink(\"user/login\")\n                    + \"\\\">\" + this.getProperty(\"page.login.caption\") + \"</a>\");\n            this.setVariable(\"user.profile\", \"\");\n        }\n\n        return this;\n    }\n\n    public String feed(String query) throws ApplicationException {\n        StringBuffer xml = new StringBuffer();\n        String finded = \"\";\n        String[] keywords;\n        boolean noResult = true;\n\n        int page = 1, pageSize = 20, startIndex = (page - 1) * pageSize;\n        if (this.request.getParameter(\"page\") == null\n                || this.request.getParameter(\"page\").toString().trim().length() <= 0) {\n            page = 1;\n        } else {\n            page = Integer.parseInt(this.request.getParameter(\"page\").toString());\n        }\n\n        if (query.trim().length() > 0) {\n            keywords = query.split(\" \");\n        } else {\n            return \"<result>Error</result>\";\n        }\n\n        String condition = \"\";\n        for (int i = 0; i < keywords.length; i++) {\n            if (condition.trim().length() == 0) {\n                condition = \" content like '%\" + keywords[i] + \"%' \";\n            } else {\n                condition += \" or content like '%\" + keywords[i] + \"%' \";\n            }\n        }\n\n        String SQL = \"SELECT a.*,b.book_name FROM bible as a left join book as b on a.book_id=b.book_id where \"\n                + condition\n                + \" order by a.book_id,a.chapter_id limit \"\n                + startIndex\n                + \",\" + pageSize;\n        // String look = \"SELECT FOUND_ROWS() AS size\";\n\n        bible bible = new bible();\n        Table vtable = bible.find(SQL, new Object[]{});\n        noResult = vtable.size() > 0;\n\n        /*\n         * Row found=bible.findOne(look, new Object[]{});\n         *\n         * Pager pager = new Pager(); pager.pageSize = pageSize; pager.currentPage =\n         * page; pager.size=found.getFieldInfo(\"size\").intValue();\n         * pager.setListSize(vtable.size());\n         */\n\n        Field field;\n        int next = startIndex + 1;// \u6b64\u4f4d\u7f6e\u5373\u4e3a\u5f53\u524d\u9875\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\u7684ID\n\n        for (Enumeration<Row> table = vtable.elements(); table.hasMoreElements(); ) {\n            Row row = table.nextElement();\n            Iterator<Field> iterator = row.iterator();\n\n            while (iterator.hasNext()) {\n                field = iterator.next();\n                finded = field.get(\"content\").value().toString();\n\n                for (int j = 0; j < keywords.length; j++) {\n                    finded = StringUtilities.sign(finded, keywords[j]);\n                }\n\n                xml.append(\"<item id=\\\"\" + next + \"\\\" chapterid=\\\"\"\n                        + field.get(\"chapter_id\").value().toString() + \"\\\" bookid=\\\"\"\n                        + field.get(\"book_id\").value().toString() + \"\\\" \"\n                        + field.get(\"book_name\").value().toString() + \" partid=\\\"\"\n                        + field.get(\"part_id\").value().toString() + \"\\\">\" + finded\n                        + \"</item>\\r\\n\");\n                next++;\n            }\n        }\n\n        for (int k = 0; k < keywords.length && noResult; k++) {\n            keyword keyword = new keyword();\n            keyword.setKeyword(keywords[k]);\n            Row findRow = keyword.findOne(\n                    \"SELECT id,visit FROM keyword WHERE keyword='\" + keywords[k] + \"'\",\n                    new Object[]{});\n\n            if (findRow.size() == 0) {\n                keyword.setVisit(0);\n                keyword.append();\n            } else {\n                keyword.setId(findRow.getFieldInfo(\"id\"));\n                keyword.setVisit(findRow.getFieldInfo(\"visit\").intValue() + 1);\n                keyword.update();\n            }\n        }\n\n        return xml.toString();\n    }\n\n    public Object advanced(String query) throws ApplicationException {\n        if (query == null || query.trim().length() == 0) {\n            return this;\n        }\n        query = StringUtilities.htmlSpecialChars(query);\n\n        int page = 1, pageSize = 10, total = 0;\n        this.request = (Request) this.context.getAttribute(HTTP_REQUEST);\n\n        if (this.request.getParameter(\"page\") == null\n                || this.request.getParameter(\"page\").toString().trim().length() == 0) {\n            page = 1;\n        } else {\n            page = Integer.parseInt(this.request.getParameter(\"page\").toString());\n        }\n\n        if (this.request.getParameter(\"amount\") == null || this.request.getParameter(\"amount\").toString().trim().length() == 0) {\n            total = 1;\n        } else {\n            total = Integer.parseInt(this.request.getParameter(\"amount\").toString());\n        }\n\n        long startTime = System.currentTimeMillis();\n        Pager pager = new Pager();\n        pager.setPageSize(pageSize);\n        pager.setCurrentPage(page);\n        pager.setListSize(total);\n\n        if (query == null || query.length() > 0) {\n            this.setVariable(\"keyword\", \"\");\n        } else {\n            this.setVariable(\"keyword\", query);\n            this.setVariable(\"search.title\", query + \" - \");\n        }\n\n        Document document = this.execute(query, pager.getStartIndex());\n        Element root = document.getRoot();\n        List<Element> vtable = root.getElementsByTagName(\"entry\");\n        if (vtable.size() == 0) {\n            this.setVariable(\"value\", \"Sorry, we could not get any related results with this keyword! \" + StringUtilities.htmlSpecialChars(root.toString()));\n            return this;\n        }\n\n        int n = 0, next, amount = Integer.parseInt(root.getElementsByTagName(\"opensearch:totalResults\").get(0).getData());\n        pager.setListSize(amount);\n\n        next = pager.getStartIndex();// \u6b64\u4f4d\u7f6e\u5373\u4e3a\u5f53\u524d\u9875\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\u7684ID\n        // opensearch:totalResults\n        StringBuffer html = new StringBuffer();\n        html.append(\"<ol class=\\\"searchresults\\\" start=\\\"\" + next + \"\\\">\\r\\n\");\n\n        Element element, title, link;\n        List<Element> t;\n        String summary;\n\n        Iterator<Element> item = vtable.iterator();\n        while (item.hasNext()) {\n            element = item.next();\n            n++;\n            link = element.getElementsByTagName(\"id\").get(0);\n            title = element.getElementsByTagName(\"title\").get(0);\n\n            t = element.getElementsByTagName(\"cse:PageMap\").get(0)\n                    .getElementsByTagName(\"cse:DataObject\");\n            if (t.size() >= 3) {\n                t = t.get(1).getElementsByTagName(\"cse:Attribute\");\n                summary = t.get(1).getAttribute(\"value\");\n            } else\n                summary = element.getElementsByTagName(\"summary\").get(0).getData();\n\n            html.append(\"<li\" + (n % 2 == 0 ? \" class=\\\"even\\\"\" : \" class=\\\"odd\\\"\")\n                    + \"><a href=\\\"\" + link.getData() + \"\\\" target=\\\"_blank\\\">\"\n                    + title.getData() + \" </a><p>\" + summary + \"</p></li> \\r\\n\");\n            next++;\n        }\n\n        html.append(\"</ol>\\r\\n\");\n\n        String actionURL = this.context.getAttribute(\"HTTP_HOST\") + \"bible/advsearch/\" + query + \"&amount=\" + amount + \"&page\";\n        pager.setFirstPageText(this.getProperty(\"page.first.text\"));\n        pager.setLastPageText(this.getProperty(\"page.last.text\"));\n        pager.setCurrentPageText(this.getProperty(\"page.current.text\"));\n        pager.setNextPageText(this.getProperty(\"page.next.text\"));\n        pager.setEndPageText(this.getProperty(\"page.end.text\"));\n        pager.setControlBarText(this.getProperty(\"page.controlbar.text\"));\n\n        html.append(\"<div class=\\\"pagination\\\" style=\\\"cursor:default\\\">\"\n                + pager.getPageControlBar(actionURL) + \"</div>\\r\\n\");\n        html.append(\"<!-- \"\n                + String.valueOf(System.currentTimeMillis() - startTime) + \" -->\");\n\n        int start = page - 1 == 0 ? 1 : (page - 1) * pageSize + 1, end = page\n                * pageSize;\n\n        this.setVariable(\"start\", String.valueOf(start));\n        this.setVariable(\"end\", String.valueOf(end));\n        this.setVariable(\"size\", String.valueOf(pager.getSize()));\n        this.setVariable(\"value\", html.toString());\n\n        this.setText(\"search.info\", start, end, query, pager.getSize());\n\n        this.setVariable(\"action\", String.valueOf(this.context.getAttribute(\"HTTP_HOST\")) + this.context.getAttribute(\"REQUEST_ACTION\").toString());\n\n        Session session = request.getSession();\n        if (session.getAttribute(\"usr\") != null) {\n            this.usr = (User) session.getAttribute(\"usr\");\n\n            this.setVariable(\"user.status\", \"\");\n            this.setVariable(\"user.profile\",\n                    \"<a href=\\\"javascript:void(0)\\\" onmousedown=\\\"profileMenu.show(event,'1')\\\">\"\n                            + this.usr.getEmail() + \"</a>\");\n        } else {\n            this.setVariable(\"user.status\", \"<a href=\\\"\" + this.getLink(\"user/login\")\n                    + \"\\\">\" + this.getProperty(\"page.login.caption\") + \"</a>\");\n            this.setVariable(\"user.profile\", \"\");\n        }\n\n        return this;\n    }\n\n    protected String createRequestString(String query, int start)\n            throws UnsupportedEncodingException {\n        String encoded_query = URLEncoder.encode(query, \"utf8\");\n        StringBuffer buffer = new StringBuffer();\n\n        buffer.append(\"https://www.googleapis.com/customsearch/v1?\");\n        buffer.append(\"key=\").append(API_KEY);\n        buffer.append(\"&cx=\").append(CUSTOM_SEARCH_ENGINE_ID);\n        buffer.append(\"&q=\").append(encoded_query);\n        buffer.append(\"&alt=atom\");\n        buffer.append(\"&start=\").append(start);\n\n        return buffer.toString();\n    }\n\n    private Document execute(String query, int start) throws ApplicationException {\n        HttpClient httpClient = new DefaultHttpClient();\n        HttpGet httpget;\n        try {\n            httpget = new HttpGet(createRequestString(query, start == 0 ? 1 : start));\n            httpClient.getParams().setParameter(HttpProtocolParams.HTTP_CONTENT_CHARSET, \"UTF-8\");\n\n            HttpResponse response = httpClient.execute(httpget);\n            InputStream instream = response.getEntity().getContent();\n\n            Document document = new Document();\n            document.load(instream);\n            if (document.getRoot().getElementsByTagName(\"errors\").size() > 0) {\n                if (i++ > ids.length - 1) i = 0;\n\n                CUSTOM_SEARCH_ENGINE_ID = ids[i];\n                API_KEY = keys[i];\n\n                httpget = new HttpGet(createRequestString(query, start == 0 ? 1 : start));\n\n                response = httpClient.execute(httpget);\n                instream = response.getEntity().getContent();\n\n                document.load(instream);\n            }\n\n            return document;\n        } catch (ClientProtocolException e) {\n            throw new ApplicationException(e.getMessage(), e);\n        } catch (IOException e) {\n            throw new ApplicationException(e.getMessage(), e);\n        } catch (ParseException e) {\n            throw new ApplicationException(e.getMessage(), e);\n        }\n\n    }\n}\n"], "fixing_code": ["/*******************************************************************************\n * Copyright  (c) 2013 Mover Zhou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\npackage custom.application;\n\nimport custom.objects.User;\nimport custom.objects.bible;\nimport custom.objects.book;\nimport custom.objects.keyword;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.ParseException;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.params.HttpProtocolParams;\nimport org.tinystruct.AbstractApplication;\nimport org.tinystruct.ApplicationException;\nimport org.tinystruct.data.component.Field;\nimport org.tinystruct.data.component.Pager;\nimport org.tinystruct.data.component.Row;\nimport org.tinystruct.data.component.Table;\nimport org.tinystruct.dom.Document;\nimport org.tinystruct.dom.Element;\nimport org.tinystruct.handler.Reforward;\nimport org.tinystruct.http.Request;\nimport org.tinystruct.http.Response;\nimport org.tinystruct.http.Session;\nimport org.tinystruct.system.util.StringUtilities;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\n\nimport static org.tinystruct.http.Constants.HTTP_REQUEST;\nimport static org.tinystruct.http.Constants.HTTP_RESPONSE;\n\npublic class search extends AbstractApplication {\n    private static int i = 0;\n    private static String API_KEY = \"AIzaSyCgMMCOs8drxcnBclraPiR0eU29qSF1vHM\";\n    private static String CUSTOM_SEARCH_ENGINE_ID = \"016436735745445346824:fgyqgo18wfm\";\n    private final String[] ids = new String[]{\"016436735745445346824:fgyqgo18wfm\", \"014099384324434647311:udrkfx4-ipk\"};\n    private final String[] keys = new String[]{\"AIzaSyCgMMCOs8drxcnBclraPiR0eU29qSF1vHM\", \"AIzaSyC-k_Cm_xClsqzeOGk8Dh5ECaZ449Vf6Ic\"};\n    private Request request;\n    private Response response;\n    private User usr;\n\n    public static void main(String[] args) throws UnsupportedEncodingException {\n        System.out.println(new search().createRequestString(\"hello\", 1));\n    }\n\n    @Override\n    public void init() {\n\n        this.setAction(\"bible/search\", \"query\");\n        this.setAction(\"bible/advsearch\", \"advanced\");\n\n        this.setVariable(\"TEMPLATES_DIR\", \"/themes\", false);\n        this.setVariable(\"keyword\", \"\");\n        this.setVariable(\"start\", \"0\");\n        this.setVariable(\"end\", \"0\");\n        this.setVariable(\"size\", \"0\");\n        this.setVariable(\"value\", \"\");\n    }\n\n    @Override\n    public void setLocale(Locale locale) {\n        super.setLocale(locale);\n\n        this.setText(\"application.title\");\n        this.setText(\"application.language.name\");\n\n        this.setText(\"page.search.title\");\n        this.setText(\"page.welcome.caption\");\n        this.setText(\"page.language-setting.title\");\n        this.setText(\"page.logout.caption\");\n        this.setText(\"page.reading.title\");\n\n        this.setText(\"navigator.bible.caption\");\n        this.setText(\"navigator.video.caption\");\n        this.setText(\"navigator.document.caption\");\n        this.setText(\"navigator.reader.caption\");\n        this.setText(\"navigator.controller.caption\");\n        this.setText(\"navigator.help.caption\");\n\n        this.setText(\"holy.book.forward\");\n        this.setText(\"holy.book.previous\");\n        this.setText(\"holy.book.next\");\n        this.setText(\"holy.book.find-and-reading\");\n        this.setText(\"holy.book.tools\");\n        this.setText(\"holy.book.select\");\n\n        this.setText(\"holy.bible\");\n        this.setText(\"holy.bible.old-testament\");\n        this.setText(\"holy.bible.new-testament\");\n\n        this.setText(\"footer.report-a-site-bug\");\n        this.setText(\"footer.privacy\");\n        this.setText(\"footer.register\");\n        this.setText(\"footer.api\");\n        this.setText(\"footer.updates-rss\");\n\n        this.setText(\"search.confirm.caption\");\n        this.setText(\"search.submit.caption\");\n        this.setText(\"search.strict.mode\");\n        this.setText(\"search.advanced.mode\");\n\n        this.setText(\"invite.confirm.caption\");\n        this.setText(\"invite.submit.caption\");\n\n        this.setText(\"subscribe.plan\");\n        this.setText(\"subscribe.bible.plan\");\n        this.setText(\"subscribe.article.plan\");\n        this.setText(\"subscribe.submit.caption\");\n        this.setText(\"subscribe.email.caption\");\n        this.setText(\"user.lastlogin.caption\");\n        this.setText(\"holy.bible.download\");\n        this.setText(\"holy.bible.chinese.download\");\n        this.setText(\"search.info\", 0, 0, \"\", 0);\n\n        String username = \"\";\n        if (this.getVariable(\"username\") != null) {\n            username = String.valueOf(this.getVariable(\"username\").getValue());\n        }\n\n        this.setText(\"page.welcome.hello\", (username == null || username.trim()\n                .length() == 0) ? \"\" : username + \"\uff0c\");\n    }\n\n    @Override\n    public String version() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public Object query() throws ApplicationException {\n        this.request = (Request) this.context\n                .getAttribute(HTTP_REQUEST);\n        if (this.request.getParameter(\"keyword\") != null)\n            return this.query(this.request.getParameter(\"keyword\"));\n\n        return this;\n    }\n\n    public Object query(String query) throws ApplicationException {\n        StringBuffer html = new StringBuffer();\n        String[] keywords;\n\n        int page = 1, pageSize = 20;\n\n        this.request = (Request) this.context\n                .getAttribute(HTTP_REQUEST);\n        if (this.request.getParameter(\"page\") == null\n                || this.request.getParameter(\"page\").toString().trim().length() <= 0) {\n            page = 1;\n        } else {\n            page = Integer.parseInt(this.request.getParameter(\"page\").toString());\n        }\n\n        int startIndex = (page - 1) * pageSize;\n        this.setVariable(\"search.title\", \"\u65e0\u76f8\u5173\u7ed3\u679c - \");\n\n        if (query.trim().length() > 0) {\n            query = StringUtilities.htmlSpecialChars(query);\n            if (query.indexOf('|') != -1) {\n                String[] q = query.split(\"|\");\n                query = q[0];\n            }\n\n            query = query.trim();\n            keywords = query.split(\" \");\n\n            this.setVariable(\"keyword\", query);\n            this.setVariable(\"search.title\", query + \" - \");\n        } else {\n            this.setVariable(\"keyword\", \"\");\n            return this;\n        }\n\n        StringBuilder condition = new StringBuilder();\n        int i = 0, j, k = 0;\n        String[] _keywords = new String[keywords.length];\n        while (i < keywords.length) {\n            _keywords[i] = \"%\" + keywords[i] + \"%\";\n            if (condition.length() == 0) {\n                condition.append(\" bible.content like ? \");\n            } else {\n                condition.append(\" AND bible.content like ? \");\n            }\n            i++;\n        }\n\n        Locale locale = this.getLocale();\n        if (condition.length() == 0)\n            condition.append(\" book.language='\").append(locale).append(\"' \");\n        else\n            condition.append(\" AND book.language='\").append(locale).append(\"' \");\n\n        book book = new book();\n        bible bible = new bible();\n        if (locale.toString().equalsIgnoreCase(Locale.US.toString())) {\n            bible.setTableName(\"NIV\");\n        } else if (locale.toString().equalsIgnoreCase(Locale.UK.toString())) {\n            bible.setTableName(\"ESV\");\n        } else {\n            bible.setTableName(locale.toString());\n        }\n\n        String SQL = \"SELECT bible.*,book.book_name FROM \" + bible.getTableName()\n                + \" as bible left join \" + book.getTableName()\n                + \" as book on bible.book_id=book.book_id where \" + condition\n                + \" order by bible.book_id,bible.chapter_id limit \" + startIndex + \",\"\n                + pageSize;\n        String look = \"SELECT count(bible.id) AS size FROM \" + bible.getTableName()\n                + \" as bible left join \" + book.getTableName()\n                + \" as book on bible.book_id=book.book_id where \" + condition;\n\n        Table vtable = bible.find(SQL, _keywords);\n        boolean noResult = vtable.size() > 0;\n\n        if (!noResult && query.length() > 0) {\n            try {\n                Table list = book.findWith(\"WHERE language=? and book_name=?\",\n                        new Object[]{this.getLocale().toString(), query});\n                if (list.size() > 0) {\n                    this.response = (Response) this.context\n                            .getAttribute(HTTP_RESPONSE);\n\n                    Reforward reforward = new Reforward(request, response);\n                    query = URLEncoder.encode(query, \"utf-8\");\n                    reforward.setDefault(this.context.getAttribute(\"HTTP_HOST\") + query);\n                    reforward.forward();\n                    return reforward;\n                }\n            } catch (ApplicationException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (UnsupportedEncodingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n\n        Row found = bible.findOne(look, _keywords);\n\n        long startTime = System.currentTimeMillis();\n        Pager pager = new Pager();\n        pager.setPageSize(pageSize);\n        pager.setCurrentPage(page);\n        pager.setListSize(found.getFieldInfo(\"size\").intValue());\n\n        Field field;\n        int next = pager.getStartIndex();// \u6b64\u4f4d\u7f6e\u5373\u4e3a\u5f53\u524d\u9875\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\u7684ID\n\n        html.append(\"<ol class=\\\"searchresults\\\" start=\\\"\").append(next).append(\"\\\">\\r\\n\");\n\n        String finded, word;\n        Row row;\n        Enumeration<Row> table = vtable.elements();\n        int n = 0;\n        while (table.hasMoreElements()) {\n            row = table.nextElement();\n            Iterator<Field> iterator = row.iterator();\n\n            n++;\n            while (iterator.hasNext()) {\n                field = iterator.next();\n                finded = field.get(\"content\").value().toString();\n\n                j = 0;\n                while (j < keywords.length) {\n                    finded = StringUtilities.sign(finded, keywords[j++]);\n                }\n\n                html.append(\"<li\"\n                        + (n % 2 == 0 ? \" class=\\\"even\\\"\" : \" class=\\\"odd\\\"\")\n                        + \"><a href=\\\"\"\n                        + this.context.getAttribute(\"HTTP_HOST\")\n                        + \"bible/\"\n                        + field.get(\"book_id\").value().toString()\n                        + \"/\"\n                        + field.get(\"chapter_id\").value().toString()\n                        + \"/\"\n                        + field.get(\"part_id\").value().toString()\n                        + \"\\\" target=\\\"_blank\\\">\"\n                        + this.setText(\"search.bible.info\", field.get(\"book_name\").value()\n                        .toString(), field.get(\"chapter_id\").value().toString(), field\n                        .get(\"part_id\").value().toString()) + \"</a><p>\" + finded\n                        + \"</p></li> \\r\\n\");\n                next++;\n            }\n        }\n\n        Table ktable;\n        Row krow;\n        while (k < keywords.length && noResult) {\n            word = keywords[k++];\n            keyword keyword = new keyword();\n            keyword.setKeyword(word);\n            ktable = keyword.setRequestFields(\"id,visit\").findWith(\"WHERE keyword=?\",\n                    new Object[]{word});\n\n            if (ktable.size() == 0) {\n                keyword.setVisit(0);\n                keyword.append();\n            } else {\n                krow = ktable.get(0);\n                keyword.setId(krow.getFieldInfo(\"id\").value());\n                keyword.setVisit(krow.getFieldInfo(\"visit\").intValue() + 1);\n                keyword.update();\n            }\n        }\n        html.append(\"</ol>\\r\\n\");\n\n        String actionURL = this.context.getAttribute(\"HTTP_HOST\") + \"bible/search/\"\n                + query + \"&page\";\n        pager.setFirstPageText(this.getProperty(\"page.first.text\"));\n        pager.setLastPageText(this.getProperty(\"page.last.text\"));\n        pager.setCurrentPageText(this.getProperty(\"page.current.text\"));\n        pager.setNextPageText(this.getProperty(\"page.next.text\"));\n        pager.setEndPageText(this.getProperty(\"page.end.text\"));\n        pager.setControlBarText(this.getProperty(\"page.controlbar.text\"));\n\n        html.append(\"<div class=\\\"pagination\\\" style=\\\"cursor:default\\\">\"\n                + pager.getPageControlBar(actionURL) + \"</div>\\r\\n\");\n        html.append(\"<!-- \"\n                + (System.currentTimeMillis() - startTime) + \" -->\");\n\n        int start = page - 1 == 0 ? 1 : (page - 1) * pageSize + 1, end = page\n                * pageSize;\n\n        this.setVariable(\"start\", String.valueOf(start));\n        this.setVariable(\"end\", String.valueOf(end));\n        this.setVariable(\"size\", String.valueOf(pager.getSize()));\n        this.setVariable(\"value\", html.toString());\n        this.setVariable(\"action\", this.config.get(\"default.base_url\")\n                + this.context.getAttribute(\"REQUEST_ACTION\").toString());\n\n        this.setText(\"search.info\", start, end, query, pager.getSize());\n\n        Session session = request.getSession();\n        if (session.getAttribute(\"usr\") != null) {\n            this.usr = (User) session.getAttribute(\"usr\");\n\n            this.setVariable(\"user.status\", \"\");\n            this.setVariable(\"user.profile\",\n                    \"<a href=\\\"javascript:void(0)\\\" onmousedown=\\\"profileMenu.show(event,'1')\\\">\"\n                            + this.usr.getEmail() + \"</a>\");\n        } else {\n            this.setVariable(\"user.status\", \"<a href=\\\"\" + this.getLink(\"user/login\")\n                    + \"\\\">\" + this.getProperty(\"page.login.caption\") + \"</a>\");\n            this.setVariable(\"user.profile\", \"\");\n        }\n\n        return this;\n    }\n\n    public String feed(String query) throws ApplicationException {\n        StringBuilder xml = new StringBuilder();\n        String finded = \"\";\n        String[] keywords;\n        boolean noResult = true;\n\n        int page = 1, pageSize = 20, startIndex = (page - 1) * pageSize;\n        if (this.request.getParameter(\"page\") == null\n                || this.request.getParameter(\"page\").toString().trim().length() <= 0) {\n            page = 1;\n        } else {\n            page = Integer.parseInt(this.request.getParameter(\"page\").toString());\n        }\n\n        if (query.trim().length() > 0) {\n            keywords = query.split(\" \");\n        } else {\n            return \"<result>Error</result>\";\n        }\n\n        String condition = \"\";\n        for (int i = 0; i < keywords.length; i++) {\n            if (condition.trim().length() == 0) {\n                condition = \" content like '%\" + keywords[i] + \"%' \";\n            } else {\n                condition += \" or content like '%\" + keywords[i] + \"%' \";\n            }\n        }\n\n        String SQL = \"SELECT a.*,b.book_name FROM bible as a left join book as b on a.book_id=b.book_id where \"\n                + condition\n                + \" order by a.book_id,a.chapter_id limit \"\n                + startIndex\n                + \",\" + pageSize;\n        // String look = \"SELECT FOUND_ROWS() AS size\";\n\n        bible bible = new bible();\n        Table vtable = bible.find(SQL, new Object[]{});\n        noResult = vtable.size() > 0;\n\n        /*\n         * Row found=bible.findOne(look, new Object[]{});\n         *\n         * Pager pager = new Pager(); pager.pageSize = pageSize; pager.currentPage =\n         * page; pager.size=found.getFieldInfo(\"size\").intValue();\n         * pager.setListSize(vtable.size());\n         */\n\n        Field field;\n        int next = startIndex + 1;// \u6b64\u4f4d\u7f6e\u5373\u4e3a\u5f53\u524d\u9875\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\u7684ID\n\n        for (Enumeration<Row> table = vtable.elements(); table.hasMoreElements(); ) {\n            Row row = table.nextElement();\n            Iterator<Field> iterator = row.iterator();\n\n            while (iterator.hasNext()) {\n                field = iterator.next();\n                finded = field.get(\"content\").value().toString();\n\n                for (int j = 0; j < keywords.length; j++) {\n                    finded = StringUtilities.sign(finded, keywords[j]);\n                }\n\n                xml.append(\"<item id=\\\"\" + next + \"\\\" chapterid=\\\"\"\n                        + field.get(\"chapter_id\").value().toString() + \"\\\" bookid=\\\"\"\n                        + field.get(\"book_id\").value().toString() + \"\\\" \"\n                        + field.get(\"book_name\").value().toString() + \" partid=\\\"\"\n                        + field.get(\"part_id\").value().toString() + \"\\\">\" + finded\n                        + \"</item>\\r\\n\");\n                next++;\n            }\n        }\n\n        for (int k = 0; k < keywords.length && noResult; k++) {\n            keyword keyword = new keyword();\n            keyword.setKeyword(keywords[k]);\n            Row findRow = keyword.findOne(\n                    \"SELECT id,visit FROM keyword WHERE keyword='\" + keywords[k] + \"'\",\n                    new Object[]{});\n\n            if (findRow.size() == 0) {\n                keyword.setVisit(0);\n                keyword.append();\n            } else {\n                keyword.setId(findRow.getFieldInfo(\"id\"));\n                keyword.setVisit(findRow.getFieldInfo(\"visit\").intValue() + 1);\n                keyword.update();\n            }\n        }\n\n        return xml.toString();\n    }\n\n    public Object advanced(String query) throws ApplicationException {\n        if (query == null || query.trim().length() == 0) {\n            return this;\n        }\n        query = StringUtilities.htmlSpecialChars(query);\n\n        int page = 1, pageSize = 10, total = 0;\n        this.request = (Request) this.context.getAttribute(HTTP_REQUEST);\n\n        if (this.request.getParameter(\"page\") == null\n                || this.request.getParameter(\"page\").toString().trim().length() == 0) {\n            page = 1;\n        } else {\n            page = Integer.parseInt(this.request.getParameter(\"page\").toString());\n        }\n\n        if (this.request.getParameter(\"amount\") == null || this.request.getParameter(\"amount\").toString().trim().length() == 0) {\n            total = 1;\n        } else {\n            total = Integer.parseInt(this.request.getParameter(\"amount\").toString());\n        }\n\n        long startTime = System.currentTimeMillis();\n        Pager pager = new Pager();\n        pager.setPageSize(pageSize);\n        pager.setCurrentPage(page);\n        pager.setListSize(total);\n\n        if (query == null || query.length() > 0) {\n            this.setVariable(\"keyword\", \"\");\n        } else {\n            this.setVariable(\"keyword\", query);\n            this.setVariable(\"search.title\", query + \" - \");\n        }\n\n        Document document = this.execute(query, pager.getStartIndex());\n        Element root = document.getRoot();\n        List<Element> vtable = root.getElementsByTagName(\"entry\");\n        if (vtable.size() == 0) {\n            this.setVariable(\"value\", \"Sorry, we could not get any related results with this keyword! \" + StringUtilities.htmlSpecialChars(root.toString()));\n            return this;\n        }\n\n        int n = 0, next, amount = Integer.parseInt(root.getElementsByTagName(\"opensearch:totalResults\").get(0).getData());\n        pager.setListSize(amount);\n\n        next = pager.getStartIndex();// \u6b64\u4f4d\u7f6e\u5373\u4e3a\u5f53\u524d\u9875\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\u7684ID\n        // opensearch:totalResults\n        StringBuffer html = new StringBuffer();\n        html.append(\"<ol class=\\\"searchresults\\\" start=\\\"\" + next + \"\\\">\\r\\n\");\n\n        Element element, title, link;\n        List<Element> t;\n        String summary;\n\n        Iterator<Element> item = vtable.iterator();\n        while (item.hasNext()) {\n            element = item.next();\n            n++;\n            link = element.getElementsByTagName(\"id\").get(0);\n            title = element.getElementsByTagName(\"title\").get(0);\n\n            t = element.getElementsByTagName(\"cse:PageMap\").get(0)\n                    .getElementsByTagName(\"cse:DataObject\");\n            if (t.size() >= 3) {\n                t = t.get(1).getElementsByTagName(\"cse:Attribute\");\n                summary = t.get(1).getAttribute(\"value\");\n            } else\n                summary = element.getElementsByTagName(\"summary\").get(0).getData();\n\n            html.append(\"<li\" + (n % 2 == 0 ? \" class=\\\"even\\\"\" : \" class=\\\"odd\\\"\")\n                    + \"><a href=\\\"\" + link.getData() + \"\\\" target=\\\"_blank\\\">\"\n                    + title.getData() + \" </a><p>\" + summary + \"</p></li> \\r\\n\");\n            next++;\n        }\n\n        html.append(\"</ol>\\r\\n\");\n\n        String actionURL = this.context.getAttribute(\"HTTP_HOST\") + \"bible/advsearch/\" + query + \"&amount=\" + amount + \"&page\";\n        pager.setFirstPageText(this.getProperty(\"page.first.text\"));\n        pager.setLastPageText(this.getProperty(\"page.last.text\"));\n        pager.setCurrentPageText(this.getProperty(\"page.current.text\"));\n        pager.setNextPageText(this.getProperty(\"page.next.text\"));\n        pager.setEndPageText(this.getProperty(\"page.end.text\"));\n        pager.setControlBarText(this.getProperty(\"page.controlbar.text\"));\n\n        html.append(\"<div class=\\\"pagination\\\" style=\\\"cursor:default\\\">\"\n                + pager.getPageControlBar(actionURL) + \"</div>\\r\\n\");\n        html.append(\"<!-- \"\n                + String.valueOf(System.currentTimeMillis() - startTime) + \" -->\");\n\n        int start = page - 1 == 0 ? 1 : (page - 1) * pageSize + 1, end = page\n                * pageSize;\n\n        this.setVariable(\"start\", String.valueOf(start));\n        this.setVariable(\"end\", String.valueOf(end));\n        this.setVariable(\"size\", String.valueOf(pager.getSize()));\n        this.setVariable(\"value\", html.toString());\n\n        this.setText(\"search.info\", start, end, query, pager.getSize());\n\n        this.setVariable(\"action\", String.valueOf(this.context.getAttribute(\"HTTP_HOST\")) + this.context.getAttribute(\"REQUEST_ACTION\").toString());\n\n        Session session = request.getSession();\n        if (session.getAttribute(\"usr\") != null) {\n            this.usr = (User) session.getAttribute(\"usr\");\n\n            this.setVariable(\"user.status\", \"\");\n            this.setVariable(\"user.profile\",\n                    \"<a href=\\\"javascript:void(0)\\\" onmousedown=\\\"profileMenu.show(event,'1')\\\">\"\n                            + this.usr.getEmail() + \"</a>\");\n        } else {\n            this.setVariable(\"user.status\", \"<a href=\\\"\" + this.getLink(\"user/login\")\n                    + \"\\\">\" + this.getProperty(\"page.login.caption\") + \"</a>\");\n            this.setVariable(\"user.profile\", \"\");\n        }\n\n        return this;\n    }\n\n    protected String createRequestString(String query, int start)\n            throws UnsupportedEncodingException {\n        String encoded_query = URLEncoder.encode(query, \"utf8\");\n        StringBuffer buffer = new StringBuffer();\n\n        buffer.append(\"https://www.googleapis.com/customsearch/v1?\");\n        buffer.append(\"key=\").append(API_KEY);\n        buffer.append(\"&cx=\").append(CUSTOM_SEARCH_ENGINE_ID);\n        buffer.append(\"&q=\").append(encoded_query);\n        buffer.append(\"&alt=atom\");\n        buffer.append(\"&start=\").append(start);\n\n        return buffer.toString();\n    }\n\n    private Document execute(String query, int start) throws ApplicationException {\n        HttpClient httpClient = new DefaultHttpClient();\n        HttpGet httpget;\n        try {\n            httpget = new HttpGet(createRequestString(query, start == 0 ? 1 : start));\n            httpClient.getParams().setParameter(HttpProtocolParams.HTTP_CONTENT_CHARSET, \"UTF-8\");\n\n            HttpResponse response = httpClient.execute(httpget);\n            InputStream instream = response.getEntity().getContent();\n\n            Document document = new Document();\n            document.load(instream);\n            if (document.getRoot().getElementsByTagName(\"errors\").size() > 0) {\n                if (i++ > ids.length - 1) i = 0;\n\n                CUSTOM_SEARCH_ENGINE_ID = ids[i];\n                API_KEY = keys[i];\n\n                httpget = new HttpGet(createRequestString(query, start == 0 ? 1 : start));\n\n                response = httpClient.execute(httpget);\n                instream = response.getEntity().getContent();\n\n                document.load(instream);\n            }\n\n            return document;\n        } catch (ClientProtocolException e) {\n            throw new ApplicationException(e.getMessage(), e);\n        } catch (IOException e) {\n            throw new ApplicationException(e.getMessage(), e);\n        } catch (ParseException e) {\n            throw new ApplicationException(e.getMessage(), e);\n        }\n\n    }\n}\n"], "filenames": ["src/main/java/custom/application/search.java"], "buggy_code_start_loc": [197], "buggy_code_end_loc": [385], "fixing_code_start_loc": [197], "fixing_code_end_loc": [377], "type": "CWE-89", "message": "A vulnerability, which was classified as critical, has been found in m0ver bible-online. Affected by this issue is the function query of the file src/main/java/custom/application/search.java of the component Search Handler. The manipulation leads to sql injection. The name of the patch is 6ef0aabfb2d4ccd53fcaa9707781303af357410e. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-215444.", "other": {"cve": {"id": "CVE-2022-4454", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-13T18:15:10.623", "lastModified": "2022-12-19T16:36:44.853", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as critical, has been found in m0ver bible-online. Affected by this issue is the function query of the file src/main/java/custom/application/search.java of the component Search Handler. The manipulation leads to sql injection. The name of the patch is 6ef0aabfb2d4ccd53fcaa9707781303af357410e. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-215444."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bible-online_project:bible-online:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-10-02", "matchCriteriaId": "5011FD05-7087-43A6-8BD6-20AB0CFEF93F"}]}]}], "references": [{"url": "https://github.com/m0ver/bible-online/commit/6ef0aabfb2d4ccd53fcaa9707781303af357410e", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.215444", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/m0ver/bible-online/commit/6ef0aabfb2d4ccd53fcaa9707781303af357410e"}}