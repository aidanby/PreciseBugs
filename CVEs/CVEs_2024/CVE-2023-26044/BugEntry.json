{"buggy_code": ["<?php\n\nnamespace React\\Http\\Io;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n/**\n * [Internal] Parses a string body with \"Content-Type: multipart/form-data\" into structured data\n *\n * This is use internally to parse incoming request bodies into structured data\n * that resembles PHP's `$_POST` and `$_FILES` superglobals.\n *\n * @internal\n * @link https://tools.ietf.org/html/rfc7578\n * @link https://tools.ietf.org/html/rfc2046#section-5.1.1\n */\nfinal class MultipartParser\n{\n    /**\n     * @var ServerRequestInterface|null\n     */\n    private $request;\n\n    /**\n     * @var int|null\n     */\n    private $maxFileSize;\n\n    /**\n     * ini setting \"max_input_vars\"\n     *\n     * Does not exist in PHP < 5.3.9 or HHVM, so assume PHP's default 1000 here.\n     *\n     * @var int\n     * @link http://php.net/manual/en/info.configuration.php#ini.max-input-vars\n     */\n    private $maxInputVars = 1000;\n\n    /**\n     * ini setting \"max_input_nesting_level\"\n     *\n     * Does not exist in HHVM, but assumes hard coded to 64 (PHP's default).\n     *\n     * @var int\n     * @link http://php.net/manual/en/info.configuration.php#ini.max-input-nesting-level\n     */\n    private $maxInputNestingLevel = 64;\n\n    /**\n     * ini setting \"upload_max_filesize\"\n     *\n     * @var int\n     */\n    private $uploadMaxFilesize;\n\n    /**\n     * ini setting \"max_file_uploads\"\n     *\n     * Additionally, setting \"file_uploads = off\" effectively sets this to zero.\n     *\n     * @var int\n     */\n    private $maxFileUploads;\n\n    private $postCount = 0;\n    private $filesCount = 0;\n    private $emptyCount = 0;\n\n    /**\n     * @param int|string|null $uploadMaxFilesize\n     * @param int|null $maxFileUploads\n     */\n    public function __construct($uploadMaxFilesize = null, $maxFileUploads = null)\n    {\n        $var = \\ini_get('max_input_vars');\n        if ($var !== false) {\n            $this->maxInputVars = (int)$var;\n        }\n        $var = \\ini_get('max_input_nesting_level');\n        if ($var !== false) {\n            $this->maxInputNestingLevel = (int)$var;\n        }\n\n        if ($uploadMaxFilesize === null) {\n            $uploadMaxFilesize = \\ini_get('upload_max_filesize');\n        }\n\n        $this->uploadMaxFilesize = IniUtil::iniSizeToBytes($uploadMaxFilesize);\n        $this->maxFileUploads = $maxFileUploads === null ? (\\ini_get('file_uploads') === '' ? 0 : (int)\\ini_get('max_file_uploads')) : (int)$maxFileUploads;\n    }\n\n    public function parse(ServerRequestInterface $request)\n    {\n        $contentType = $request->getHeaderLine('content-type');\n        if(!\\preg_match('/boundary=\"?(.*?)\"?$/', $contentType, $matches)) {\n            return $request;\n        }\n\n        $this->request = $request;\n        $this->parseBody('--' . $matches[1], (string)$request->getBody());\n\n        $request = $this->request;\n        $this->request = null;\n        $this->postCount = 0;\n        $this->filesCount = 0;\n        $this->emptyCount = 0;\n        $this->maxFileSize = null;\n\n        return $request;\n    }\n\n    private function parseBody($boundary, $buffer)\n    {\n        $len = \\strlen($boundary);\n\n        // ignore everything before initial boundary (SHOULD be empty)\n        $start = \\strpos($buffer, $boundary . \"\\r\\n\");\n\n        while ($start !== false) {\n            // search following boundary (preceded by newline)\n            // ignore last if not followed by boundary (SHOULD end with \"--\")\n            $start += $len + 2;\n            $end = \\strpos($buffer, \"\\r\\n\" . $boundary, $start);\n            if ($end === false) {\n                break;\n            }\n\n            // parse one part and continue searching for next\n            $this->parsePart(\\substr($buffer, $start, $end - $start));\n            $start = $end;\n        }\n    }\n\n    private function parsePart($chunk)\n    {\n        $pos = \\strpos($chunk, \"\\r\\n\\r\\n\");\n        if ($pos === false) {\n            return;\n        }\n\n        $headers = $this->parseHeaders((string)substr($chunk, 0, $pos));\n        $body = (string)\\substr($chunk, $pos + 4);\n\n        if (!isset($headers['content-disposition'])) {\n            return;\n        }\n\n        $name = $this->getParameterFromHeader($headers['content-disposition'], 'name');\n        if ($name === null) {\n            return;\n        }\n\n        $filename = $this->getParameterFromHeader($headers['content-disposition'], 'filename');\n        if ($filename !== null) {\n            $this->parseFile(\n                $name,\n                $filename,\n                isset($headers['content-type'][0]) ? $headers['content-type'][0] : null,\n                $body\n            );\n        } else {\n            $this->parsePost($name, $body);\n        }\n    }\n\n    private function parseFile($name, $filename, $contentType, $contents)\n    {\n        $file = $this->parseUploadedFile($filename, $contentType, $contents);\n        if ($file === null) {\n            return;\n        }\n\n        $this->request = $this->request->withUploadedFiles($this->extractPost(\n            $this->request->getUploadedFiles(),\n            $name,\n            $file\n        ));\n    }\n\n    private function parseUploadedFile($filename, $contentType, $contents)\n    {\n        $size = \\strlen($contents);\n\n        // no file selected (zero size and empty filename)\n        if ($size === 0 && $filename === '') {\n            // ignore excessive number of empty file uploads\n            if (++$this->emptyCount + $this->filesCount > $this->maxInputVars) {\n                return;\n            }\n\n            return new UploadedFile(\n                new BufferedBody(''),\n                $size,\n                \\UPLOAD_ERR_NO_FILE,\n                $filename,\n                $contentType\n            );\n        }\n\n        // ignore excessive number of file uploads\n        if (++$this->filesCount > $this->maxFileUploads) {\n            return;\n        }\n\n        // file exceeds \"upload_max_filesize\" ini setting\n        if ($size > $this->uploadMaxFilesize) {\n            return new UploadedFile(\n                new BufferedBody(''),\n                $size,\n                \\UPLOAD_ERR_INI_SIZE,\n                $filename,\n                $contentType\n            );\n        }\n\n        // file exceeds MAX_FILE_SIZE value\n        if ($this->maxFileSize !== null && $size > $this->maxFileSize) {\n            return new UploadedFile(\n                new BufferedBody(''),\n                $size,\n                \\UPLOAD_ERR_FORM_SIZE,\n                $filename,\n                $contentType\n            );\n        }\n\n        return new UploadedFile(\n            new BufferedBody($contents),\n            $size,\n            \\UPLOAD_ERR_OK,\n            $filename,\n            $contentType\n        );\n    }\n\n    private function parsePost($name, $value)\n    {\n        // ignore excessive number of post fields\n        if (++$this->postCount > $this->maxInputVars) {\n            return;\n        }\n\n        $this->request = $this->request->withParsedBody($this->extractPost(\n            $this->request->getParsedBody(),\n            $name,\n            $value\n        ));\n\n        if (\\strtoupper($name) === 'MAX_FILE_SIZE') {\n            $this->maxFileSize = (int)$value;\n\n            if ($this->maxFileSize === 0) {\n                $this->maxFileSize = null;\n            }\n        }\n    }\n\n    private function parseHeaders($header)\n    {\n        $headers = array();\n\n        foreach (\\explode(\"\\r\\n\", \\trim($header)) as $line) {\n            $parts = \\explode(':', $line, 2);\n            if (!isset($parts[1])) {\n                continue;\n            }\n\n            $key = \\strtolower(trim($parts[0]));\n            $values = \\explode(';', $parts[1]);\n            $values = \\array_map('trim', $values);\n            $headers[$key] = $values;\n        }\n\n        return $headers;\n    }\n\n    private function getParameterFromHeader(array $header, $parameter)\n    {\n        foreach ($header as $part) {\n            if (\\preg_match('/' . $parameter . '=\"?(.*?)\"?$/', $part, $matches)) {\n                return $matches[1];\n            }\n        }\n\n        return null;\n    }\n\n    private function extractPost($postFields, $key, $value)\n    {\n        $chunks = \\explode('[', $key);\n        if (\\count($chunks) == 1) {\n            $postFields[$key] = $value;\n            return $postFields;\n        }\n\n        // ignore this key if maximum nesting level is exceeded\n        if (isset($chunks[$this->maxInputNestingLevel])) {\n            return $postFields;\n        }\n\n        $chunkKey = \\rtrim($chunks[0], ']');\n        $parent = &$postFields;\n        for ($i = 1; isset($chunks[$i]); $i++) {\n            $previousChunkKey = $chunkKey;\n\n            if ($previousChunkKey === '') {\n                $parent[] = array();\n                \\end($parent);\n                $parent = &$parent[\\key($parent)];\n            } else {\n                if (!isset($parent[$previousChunkKey]) || !\\is_array($parent[$previousChunkKey])) {\n                    $parent[$previousChunkKey] = array();\n                }\n                $parent = &$parent[$previousChunkKey];\n            }\n\n            $chunkKey = \\rtrim($chunks[$i], ']');\n        }\n\n        if ($chunkKey === '') {\n            $parent[] = $value;\n        } else {\n            $parent[$chunkKey] = $value;\n        }\n\n        return $postFields;\n    }\n}\n", "<?php\n\nnamespace React\\Tests\\Http\\Io\\Middleware;\n\nuse React\\Http\\Io\\MultipartParser;\nuse React\\Http\\Message\\ServerRequest;\nuse React\\Tests\\Http\\TestCase;\n\nfinal class MultipartParserTest extends TestCase\n{\n    public function testDoesNotParseWithoutMultipartFormDataContentType()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"single\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"second\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data',\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testPostKey()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[one]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[two]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    'one' => 'single',\n                    'two' => 'second',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostWithQuotationMarkEncapsulatedBoundary()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[one]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[two]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=\"' . $boundary . '\"',\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    'one' => 'single',\n                    'two' => 'second',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostFormDataNamesWithoutQuotationMark()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=users[one]\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=users[two]\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=\"' . $boundary . '\"',\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    'one' => 'single',\n                    'two' => 'second',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostStringOverwritesMap()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[one]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"ignored\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"2\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => '2'\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostMapOverwritesString()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"ignored\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[two]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"2\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    'two' => '2',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostVectorOverwritesString()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"ignored\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"2\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    '2',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostDeeplyNestedArray()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[][]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"1\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[][]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"2\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    array(\n                        '1'\n                    ),\n                    array(\n                        '2'\n                    )\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testEmptyPostValue()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'key' => ''\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testEmptyPostKey()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                '' => 'value'\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testNestedPostKeyAssoc()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"a[b][c]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'a' => array(\n                    'b' => array(\n                        'c' => 'value'\n                    )\n                )\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testNestedPostKeyVector()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"a[][]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'a' => array(\n                    array(\n                        'value'\n                    )\n                )\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testFileUpload()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $file = base64_decode(\"R0lGODlhAQABAIAAAP///wAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==\");\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"12000\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[one]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[two]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-disposition: form-data; name=\\\"user\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"content-Disposition: form-data; name=\\\"user2\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"first in array\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second in array\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"Us er.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\";\n        $data .= \"\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"files[]\\\"; filename=\\\"blank.gif\\\"\\r\\n\";\n        $data .= \"content-Type: image/gif\\r\\n\";\n        $data .= \"X-Foo-Bar: base64\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= $file . \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"files[]\\\"; filename=\\\"User.php\\\"\\r\\n\";\n        $data .= \"Content-Type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"files[]\\\"; filename=\\\"Owner.php\\\"\\r\\n\";\n        $data .= \"Content-Type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'Owner';\\r\\n\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertSame(\n            array(\n                'MAX_FILE_SIZE' => '12000',\n                'users' => array(\n                    'one' => 'single',\n                    'two' => 'second',\n                    0 => 'first in array',\n                    1 => 'second in array',\n                ),\n                'user' => 'single',\n                'user2' => 'second',\n            ),\n            $parsedRequest->getParsedBody()\n        );\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertTrue(isset($files['file']));\n        $this->assertCount(3, $files['files']);\n\n        $this->assertSame('Us er.php', $files['file']->getClientFilename());\n        $this->assertSame('text/php', $files['file']->getClientMediaType());\n        $this->assertSame(\"<?php echo 'User';\\r\\n\", (string)$files['file']->getStream());\n\n        $this->assertSame('blank.gif', $files['files'][0]->getClientFilename());\n        $this->assertSame('image/gif', $files['files'][0]->getClientMediaType());\n        $this->assertSame($file, (string)$files['files'][0]->getStream());\n\n        $this->assertSame('User.php', $files['files'][1]->getClientFilename());\n        $this->assertSame('text/php', $files['files'][1]->getClientMediaType());\n        $this->assertSame(\"<?php echo 'User';\\r\\n\\r\\n\", (string)$files['files'][1]->getStream());\n\n        $this->assertSame('Owner.php', $files['files'][2]->getClientFilename());\n        $this->assertSame('text/php', $files['files'][2]->getClientMediaType());\n        $this->assertSame(\"<?php echo 'Owner';\\r\\n\\r\\n\", (string)$files['files'][2]->getStream());\n    }\n\n    public function testInvalidDoubleContentDispositionUsesLast()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"ignored\\\"\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'key' => 'value'\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testInvalidMissingNewlineAfterValueWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidMissingValueWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidMissingValueAndEndBoundaryWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidContentDispositionMissingWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"hello\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidContentDispositionMissingValueWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidContentDispositionWithoutNameWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; something=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidMissingEndBoundaryWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            null,\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testInvalidUploadFileWithoutContentTypeUsesNullValue()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"hello.txt\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('hello.txt', $file->getClientFilename());\n        $this->assertNull($file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('world', (string)$file->getStream());\n    }\n\n    public function testInvalidUploadFileWithoutMultipleContentTypeUsesLastValue()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"hello.txt\\\"\\r\\n\";\n        $data .= \"Content-Type: text/ignored\\r\\n\";\n        $data .= \"Content-Type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('hello.txt', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('world', (string)$file->getStream());\n    }\n\n    public function testUploadEmptyFile()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"empty\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('empty', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(0, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('', (string)$file->getStream());\n    }\n\n    public function testUploadTooLargeFile()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"hello\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser(4);\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('hello', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_INI_SIZE, $file->getError());\n    }\n\n    public function testUploadTooLargeFileWithIniLikeSize()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"hello\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= str_repeat('world', 1024) . \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser('1K');\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('hello', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5120, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_INI_SIZE, $file->getError());\n    }\n\n    public function testUploadNoFile()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"\\\"\\r\\n\";\n        $data .= \"Content-type: application/octet-stream\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('', $file->getClientFilename());\n        $this->assertSame('application/octet-stream', $file->getClientMediaType());\n        $this->assertSame(0, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_NO_FILE, $file->getError());\n    }\n\n    public function testUploadTooManyFilesReturnsTruncatedList()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"first\\\"; filename=\\\"first\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"hello\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"second\\\"; filename=\\\"second\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser(100, 1);\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['first']));\n\n        $file = $files['first'];\n        $this->assertSame('first', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('hello', (string)$file->getStream());\n    }\n\n    public function testUploadTooManyFilesIgnoresEmptyFilesAndIncludesThemDespiteTruncatedList()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"first\\\"; filename=\\\"first\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"hello\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"empty\\\"; filename=\\\"\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"second\\\"; filename=\\\"second\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser(100, 1);\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(2, $files);\n        $this->assertTrue(isset($files['first']));\n        $this->assertTrue(isset($files['empty']));\n\n        $file = $files['first'];\n        $this->assertSame('first', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('hello', (string)$file->getStream());\n\n        $file = $files['empty'];\n        $this->assertSame('', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(0, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_NO_FILE, $file->getError());\n    }\n\n    public function testPostMaxFileSize()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"12\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"User.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertTrue(isset($files['file']));\n        $this->assertSame(UPLOAD_ERR_FORM_SIZE, $files['file']->getError());\n    }\n\n    public function testPostMaxFileSizeIgnoredByFilesComingBeforeIt()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"User-one.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"100\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file2\\\"; filename=\\\"User-two.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"12\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file3\\\"; filename=\\\"User-third.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"0\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file4\\\"; filename=\\\"User-forth.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertTrue(isset($files['file']));\n        $this->assertSame(UPLOAD_ERR_OK, $files['file']->getError());\n        $this->assertTrue(isset($files['file2']));\n        $this->assertSame(UPLOAD_ERR_OK, $files['file2']->getError());\n        $this->assertTrue(isset($files['file3']));\n        $this->assertSame(UPLOAD_ERR_FORM_SIZE, $files['file3']->getError());\n        $this->assertTrue(isset($files['file4']));\n        $this->assertSame(UPLOAD_ERR_OK, $files['file4']->getError());\n    }\n}"], "fixing_code": ["<?php\n\nnamespace React\\Http\\Io;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n/**\n * [Internal] Parses a string body with \"Content-Type: multipart/form-data\" into structured data\n *\n * This is use internally to parse incoming request bodies into structured data\n * that resembles PHP's `$_POST` and `$_FILES` superglobals.\n *\n * @internal\n * @link https://tools.ietf.org/html/rfc7578\n * @link https://tools.ietf.org/html/rfc2046#section-5.1.1\n */\nfinal class MultipartParser\n{\n    /**\n     * @var ServerRequestInterface|null\n     */\n    private $request;\n\n    /**\n     * @var int|null\n     */\n    private $maxFileSize;\n\n    /**\n     * Based on $maxInputVars and $maxFileUploads\n     *\n     * @var int\n     */\n    private $maxMultipartBodyParts;\n\n    /**\n     * ini setting \"max_input_vars\"\n     *\n     * Does not exist in PHP < 5.3.9 or HHVM, so assume PHP's default 1000 here.\n     *\n     * @var int\n     * @link http://php.net/manual/en/info.configuration.php#ini.max-input-vars\n     */\n    private $maxInputVars = 1000;\n\n    /**\n     * ini setting \"max_input_nesting_level\"\n     *\n     * Does not exist in HHVM, but assumes hard coded to 64 (PHP's default).\n     *\n     * @var int\n     * @link http://php.net/manual/en/info.configuration.php#ini.max-input-nesting-level\n     */\n    private $maxInputNestingLevel = 64;\n\n    /**\n     * ini setting \"upload_max_filesize\"\n     *\n     * @var int\n     */\n    private $uploadMaxFilesize;\n\n    /**\n     * ini setting \"max_file_uploads\"\n     *\n     * Additionally, setting \"file_uploads = off\" effectively sets this to zero.\n     *\n     * @var int\n     */\n    private $maxFileUploads;\n\n    private $multipartBodyPartCount = 0;\n    private $postCount = 0;\n    private $filesCount = 0;\n    private $emptyCount = 0;\n\n    /**\n     * @param int|string|null $uploadMaxFilesize\n     * @param int|null $maxFileUploads\n     */\n    public function __construct($uploadMaxFilesize = null, $maxFileUploads = null)\n    {\n        $var = \\ini_get('max_input_vars');\n        if ($var !== false) {\n            $this->maxInputVars = (int)$var;\n        }\n        $var = \\ini_get('max_input_nesting_level');\n        if ($var !== false) {\n            $this->maxInputNestingLevel = (int)$var;\n        }\n\n        if ($uploadMaxFilesize === null) {\n            $uploadMaxFilesize = \\ini_get('upload_max_filesize');\n        }\n\n        $this->uploadMaxFilesize = IniUtil::iniSizeToBytes($uploadMaxFilesize);\n        $this->maxFileUploads = $maxFileUploads === null ? (\\ini_get('file_uploads') === '' ? 0 : (int)\\ini_get('max_file_uploads')) : (int)$maxFileUploads;\n\n        $this->maxMultipartBodyParts = $this->maxInputVars + $this->maxFileUploads;\n    }\n\n    public function parse(ServerRequestInterface $request)\n    {\n        $contentType = $request->getHeaderLine('content-type');\n        if(!\\preg_match('/boundary=\"?(.*?)\"?$/', $contentType, $matches)) {\n            return $request;\n        }\n\n        $this->request = $request;\n        $this->parseBody('--' . $matches[1], (string)$request->getBody());\n\n        $request = $this->request;\n        $this->request = null;\n        $this->multipartBodyPartCount = 0;\n        $this->postCount = 0;\n        $this->filesCount = 0;\n        $this->emptyCount = 0;\n        $this->maxFileSize = null;\n\n        return $request;\n    }\n\n    private function parseBody($boundary, $buffer)\n    {\n        $len = \\strlen($boundary);\n\n        // ignore everything before initial boundary (SHOULD be empty)\n        $start = \\strpos($buffer, $boundary . \"\\r\\n\");\n\n        while ($start !== false) {\n            // search following boundary (preceded by newline)\n            // ignore last if not followed by boundary (SHOULD end with \"--\")\n            $start += $len + 2;\n            $end = \\strpos($buffer, \"\\r\\n\" . $boundary, $start);\n            if ($end === false) {\n                break;\n            }\n\n            // parse one part and continue searching for next\n            $this->parsePart(\\substr($buffer, $start, $end - $start));\n            $start = $end;\n\n            if (++$this->multipartBodyPartCount > $this->maxMultipartBodyParts) {\n                break;\n            }\n        }\n    }\n\n    private function parsePart($chunk)\n    {\n        $pos = \\strpos($chunk, \"\\r\\n\\r\\n\");\n        if ($pos === false) {\n            return;\n        }\n\n        $headers = $this->parseHeaders((string)substr($chunk, 0, $pos));\n        $body = (string)\\substr($chunk, $pos + 4);\n\n        if (!isset($headers['content-disposition'])) {\n            return;\n        }\n\n        $name = $this->getParameterFromHeader($headers['content-disposition'], 'name');\n        if ($name === null) {\n            return;\n        }\n\n        $filename = $this->getParameterFromHeader($headers['content-disposition'], 'filename');\n        if ($filename !== null) {\n            $this->parseFile(\n                $name,\n                $filename,\n                isset($headers['content-type'][0]) ? $headers['content-type'][0] : null,\n                $body\n            );\n        } else {\n            $this->parsePost($name, $body);\n        }\n    }\n\n    private function parseFile($name, $filename, $contentType, $contents)\n    {\n        $file = $this->parseUploadedFile($filename, $contentType, $contents);\n        if ($file === null) {\n            return;\n        }\n\n        $this->request = $this->request->withUploadedFiles($this->extractPost(\n            $this->request->getUploadedFiles(),\n            $name,\n            $file\n        ));\n    }\n\n    private function parseUploadedFile($filename, $contentType, $contents)\n    {\n        $size = \\strlen($contents);\n\n        // no file selected (zero size and empty filename)\n        if ($size === 0 && $filename === '') {\n            // ignore excessive number of empty file uploads\n            if (++$this->emptyCount + $this->filesCount > $this->maxInputVars) {\n                return;\n            }\n\n            return new UploadedFile(\n                new BufferedBody(''),\n                $size,\n                \\UPLOAD_ERR_NO_FILE,\n                $filename,\n                $contentType\n            );\n        }\n\n        // ignore excessive number of file uploads\n        if (++$this->filesCount > $this->maxFileUploads) {\n            return;\n        }\n\n        // file exceeds \"upload_max_filesize\" ini setting\n        if ($size > $this->uploadMaxFilesize) {\n            return new UploadedFile(\n                new BufferedBody(''),\n                $size,\n                \\UPLOAD_ERR_INI_SIZE,\n                $filename,\n                $contentType\n            );\n        }\n\n        // file exceeds MAX_FILE_SIZE value\n        if ($this->maxFileSize !== null && $size > $this->maxFileSize) {\n            return new UploadedFile(\n                new BufferedBody(''),\n                $size,\n                \\UPLOAD_ERR_FORM_SIZE,\n                $filename,\n                $contentType\n            );\n        }\n\n        return new UploadedFile(\n            new BufferedBody($contents),\n            $size,\n            \\UPLOAD_ERR_OK,\n            $filename,\n            $contentType\n        );\n    }\n\n    private function parsePost($name, $value)\n    {\n        // ignore excessive number of post fields\n        if (++$this->postCount > $this->maxInputVars) {\n            return;\n        }\n\n        $this->request = $this->request->withParsedBody($this->extractPost(\n            $this->request->getParsedBody(),\n            $name,\n            $value\n        ));\n\n        if (\\strtoupper($name) === 'MAX_FILE_SIZE') {\n            $this->maxFileSize = (int)$value;\n\n            if ($this->maxFileSize === 0) {\n                $this->maxFileSize = null;\n            }\n        }\n    }\n\n    private function parseHeaders($header)\n    {\n        $headers = array();\n\n        foreach (\\explode(\"\\r\\n\", \\trim($header)) as $line) {\n            $parts = \\explode(':', $line, 2);\n            if (!isset($parts[1])) {\n                continue;\n            }\n\n            $key = \\strtolower(trim($parts[0]));\n            $values = \\explode(';', $parts[1]);\n            $values = \\array_map('trim', $values);\n            $headers[$key] = $values;\n        }\n\n        return $headers;\n    }\n\n    private function getParameterFromHeader(array $header, $parameter)\n    {\n        foreach ($header as $part) {\n            if (\\preg_match('/' . $parameter . '=\"?(.*?)\"?$/', $part, $matches)) {\n                return $matches[1];\n            }\n        }\n\n        return null;\n    }\n\n    private function extractPost($postFields, $key, $value)\n    {\n        $chunks = \\explode('[', $key);\n        if (\\count($chunks) == 1) {\n            $postFields[$key] = $value;\n            return $postFields;\n        }\n\n        // ignore this key if maximum nesting level is exceeded\n        if (isset($chunks[$this->maxInputNestingLevel])) {\n            return $postFields;\n        }\n\n        $chunkKey = \\rtrim($chunks[0], ']');\n        $parent = &$postFields;\n        for ($i = 1; isset($chunks[$i]); $i++) {\n            $previousChunkKey = $chunkKey;\n\n            if ($previousChunkKey === '') {\n                $parent[] = array();\n                \\end($parent);\n                $parent = &$parent[\\key($parent)];\n            } else {\n                if (!isset($parent[$previousChunkKey]) || !\\is_array($parent[$previousChunkKey])) {\n                    $parent[$previousChunkKey] = array();\n                }\n                $parent = &$parent[$previousChunkKey];\n            }\n\n            $chunkKey = \\rtrim($chunks[$i], ']');\n        }\n\n        if ($chunkKey === '') {\n            $parent[] = $value;\n        } else {\n            $parent[$chunkKey] = $value;\n        }\n\n        return $postFields;\n    }\n}\n", "<?php\n\nnamespace React\\Tests\\Http\\Io\\Middleware;\n\nuse React\\Http\\Io\\MultipartParser;\nuse React\\Http\\Message\\ServerRequest;\nuse React\\Tests\\Http\\TestCase;\n\nfinal class MultipartParserTest extends TestCase\n{\n    public function testDoesNotParseWithoutMultipartFormDataContentType()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"single\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"second\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data',\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testPostKey()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[one]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[two]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    'one' => 'single',\n                    'two' => 'second',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostWithQuotationMarkEncapsulatedBoundary()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[one]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[two]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=\"' . $boundary . '\"',\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    'one' => 'single',\n                    'two' => 'second',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostFormDataNamesWithoutQuotationMark()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=users[one]\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=users[two]\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=\"' . $boundary . '\"',\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    'one' => 'single',\n                    'two' => 'second',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostStringOverwritesMap()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[one]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"ignored\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"2\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => '2'\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostMapOverwritesString()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"ignored\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[two]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"2\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    'two' => '2',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostVectorOverwritesString()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"ignored\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"2\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    '2',\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testPostDeeplyNestedArray()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[][]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"1\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[][]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"2\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'users' => array(\n                    array(\n                        '1'\n                    ),\n                    array(\n                        '2'\n                    )\n                ),\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testEmptyPostValue()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'key' => ''\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testEmptyPostKey()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                '' => 'value'\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testNestedPostKeyAssoc()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"a[b][c]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'a' => array(\n                    'b' => array(\n                        'c' => 'value'\n                    )\n                )\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testNestedPostKeyVector()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"a[][]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'a' => array(\n                    array(\n                        'value'\n                    )\n                )\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testFileUpload()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $file = base64_decode(\"R0lGODlhAQABAIAAAP///wAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==\");\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"12000\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[one]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[two]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-disposition: form-data; name=\\\"user\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"single\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"content-Disposition: form-data; name=\\\"user2\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"first in array\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"users[]\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"second in array\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"Us er.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\";\n        $data .= \"\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"files[]\\\"; filename=\\\"blank.gif\\\"\\r\\n\";\n        $data .= \"content-Type: image/gif\\r\\n\";\n        $data .= \"X-Foo-Bar: base64\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= $file . \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"files[]\\\"; filename=\\\"User.php\\\"\\r\\n\";\n        $data .= \"Content-Type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"files[]\\\"; filename=\\\"Owner.php\\\"\\r\\n\";\n        $data .= \"Content-Type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'Owner';\\r\\n\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertSame(\n            array(\n                'MAX_FILE_SIZE' => '12000',\n                'users' => array(\n                    'one' => 'single',\n                    'two' => 'second',\n                    0 => 'first in array',\n                    1 => 'second in array',\n                ),\n                'user' => 'single',\n                'user2' => 'second',\n            ),\n            $parsedRequest->getParsedBody()\n        );\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertTrue(isset($files['file']));\n        $this->assertCount(3, $files['files']);\n\n        $this->assertSame('Us er.php', $files['file']->getClientFilename());\n        $this->assertSame('text/php', $files['file']->getClientMediaType());\n        $this->assertSame(\"<?php echo 'User';\\r\\n\", (string)$files['file']->getStream());\n\n        $this->assertSame('blank.gif', $files['files'][0]->getClientFilename());\n        $this->assertSame('image/gif', $files['files'][0]->getClientMediaType());\n        $this->assertSame($file, (string)$files['files'][0]->getStream());\n\n        $this->assertSame('User.php', $files['files'][1]->getClientFilename());\n        $this->assertSame('text/php', $files['files'][1]->getClientMediaType());\n        $this->assertSame(\"<?php echo 'User';\\r\\n\\r\\n\", (string)$files['files'][1]->getStream());\n\n        $this->assertSame('Owner.php', $files['files'][2]->getClientFilename());\n        $this->assertSame('text/php', $files['files'][2]->getClientMediaType());\n        $this->assertSame(\"<?php echo 'Owner';\\r\\n\\r\\n\", (string)$files['files'][2]->getStream());\n    }\n\n    public function testInvalidDoubleContentDispositionUsesLast()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"ignored\\\"\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            array(\n                'key' => 'value'\n            ),\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testInvalidMissingNewlineAfterValueWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidMissingValueWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidMissingValueAndEndBoundaryWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidContentDispositionMissingWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"hello\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidContentDispositionMissingValueWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidContentDispositionWithoutNameWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; something=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertEmpty($parsedRequest->getParsedBody());\n    }\n\n    public function testInvalidMissingEndBoundaryWillBeIgnored()\n    {\n        $boundary = \"---------------------------5844729766471062541057622570\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"key\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"value\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $this->assertEmpty($parsedRequest->getUploadedFiles());\n        $this->assertSame(\n            null,\n            $parsedRequest->getParsedBody()\n        );\n    }\n\n    public function testInvalidUploadFileWithoutContentTypeUsesNullValue()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"hello.txt\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('hello.txt', $file->getClientFilename());\n        $this->assertNull($file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('world', (string)$file->getStream());\n    }\n\n    public function testInvalidUploadFileWithoutMultipleContentTypeUsesLastValue()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"hello.txt\\\"\\r\\n\";\n        $data .= \"Content-Type: text/ignored\\r\\n\";\n        $data .= \"Content-Type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('hello.txt', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('world', (string)$file->getStream());\n    }\n\n    public function testUploadEmptyFile()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"empty\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('empty', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(0, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('', (string)$file->getStream());\n    }\n\n    public function testUploadTooLargeFile()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"hello\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser(4);\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('hello', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_INI_SIZE, $file->getError());\n    }\n\n    public function testUploadTooLargeFileWithIniLikeSize()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"hello\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= str_repeat('world', 1024) . \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser('1K');\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('hello', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5120, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_INI_SIZE, $file->getError());\n    }\n\n    public function testUploadNoFile()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"\\\"\\r\\n\";\n        $data .= \"Content-type: application/octet-stream\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['file']));\n        $this->assertInstanceOf('Psr\\Http\\Message\\UploadedFileInterface', $files['file']);\n\n        /* @var $file \\Psr\\Http\\Message\\UploadedFileInterface */\n        $file = $files['file'];\n\n        $this->assertSame('', $file->getClientFilename());\n        $this->assertSame('application/octet-stream', $file->getClientMediaType());\n        $this->assertSame(0, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_NO_FILE, $file->getError());\n    }\n\n    public function testUploadTooManyFilesReturnsTruncatedList()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"first\\\"; filename=\\\"first\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"hello\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"second\\\"; filename=\\\"second\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser(100, 1);\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(1, $files);\n        $this->assertTrue(isset($files['first']));\n\n        $file = $files['first'];\n        $this->assertSame('first', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('hello', (string)$file->getStream());\n    }\n\n    public function testUploadTooManyFilesIgnoresEmptyFilesAndIncludesThemDespiteTruncatedList()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"first\\\"; filename=\\\"first\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"hello\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"empty\\\"; filename=\\\"\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"second\\\"; filename=\\\"second\\\"\\r\\n\";\n        $data .= \"Content-type: text/plain\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"world\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser(100, 1);\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertCount(2, $files);\n        $this->assertTrue(isset($files['first']));\n        $this->assertTrue(isset($files['empty']));\n\n        $file = $files['first'];\n        $this->assertSame('first', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(5, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_OK, $file->getError());\n        $this->assertSame('hello', (string)$file->getStream());\n\n        $file = $files['empty'];\n        $this->assertSame('', $file->getClientFilename());\n        $this->assertSame('text/plain', $file->getClientMediaType());\n        $this->assertSame(0, $file->getSize());\n        $this->assertSame(UPLOAD_ERR_NO_FILE, $file->getError());\n    }\n\n    public function testPostMaxFileSize()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"12\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"User.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertTrue(isset($files['file']));\n        $this->assertSame(UPLOAD_ERR_FORM_SIZE, $files['file']->getError());\n    }\n\n    public function testPostMaxFileSizeIgnoredByFilesComingBeforeIt()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $data  = \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"User-one.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"100\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file2\\\"; filename=\\\"User-two.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"12\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file3\\\"; filename=\\\"User-third.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"0\\r\\n\";\n        $data .= \"--$boundary\\r\\n\";\n        $data .= \"Content-Disposition: form-data; name=\\\"file4\\\"; filename=\\\"User-forth.php\\\"\\r\\n\";\n        $data .= \"Content-type: text/php\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"<?php echo 'User';\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $parsedRequest = $parser->parse($request);\n\n        $files = $parsedRequest->getUploadedFiles();\n\n        $this->assertTrue(isset($files['file']));\n        $this->assertSame(UPLOAD_ERR_OK, $files['file']->getError());\n        $this->assertTrue(isset($files['file2']));\n        $this->assertSame(UPLOAD_ERR_OK, $files['file2']->getError());\n        $this->assertTrue(isset($files['file3']));\n        $this->assertSame(UPLOAD_ERR_FORM_SIZE, $files['file3']->getError());\n        $this->assertTrue(isset($files['file4']));\n        $this->assertSame(UPLOAD_ERR_OK, $files['file4']->getError());\n    }\n\n    public function testWeOnlyParseTheAmountOfMultiPartChunksWeConfigured()\n    {\n        $boundary = \"---------------------------12758086162038677464950549563\";\n\n        $chunk = \"--$boundary\\r\\n\";\n        $chunk .= \"Content-Disposition: form-data; name=\\\"f\\\"\\r\\n\";\n        $chunk .= \"\\r\\n\";\n        $chunk .= \"u\\r\\n\";\n        $data = '';\n        for ($i = 0; $i < 5000000; $i++) {\n            $data .= $chunk;\n        }\n        $data .= \"--$boundary--\\r\\n\";\n\n        $request = new ServerRequest('POST', 'http://example.com/', array(\n            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n        ), $data, 1.1);\n\n        $parser = new MultipartParser();\n        $startTime = microtime(true);\n        $parser->parse($request);\n        $runTime = microtime(true) - $startTime;\n        $this->assertLessThan(1, $runTime);\n    }\n}\n"], "filenames": ["src/Io/MultipartParser.php", "tests/Io/MultipartParserTest.php"], "buggy_code_start_loc": [29, 1029], "buggy_code_end_loc": [130, 1030], "fixing_code_start_loc": [30, 1029], "fixing_code_end_loc": [146, 1055], "type": "NVD-CWE-noinfo", "message": "react/http is an event-driven, streaming HTTP client and server implementation for ReactPHP.  Previous versions of ReactPHP's HTTP server component contain a potential DoS vulnerability that can cause high CPU load when processing large HTTP request bodies. This vulnerability has little to no impact on the default configuration, but can be exploited when explicitly using the RequestBodyBufferMiddleware with very large settings. This might lead to consuming large amounts of CPU time for processing requests and significantly delay or slow down the processing of legitimate user requests. This issue has been addressed in release 1.9.0. Users are advised to upgrade. Users unable to upgrade may keep the request body limited using RequestBodyBufferMiddleware with a sensible value which should mitigate the issue. An infrastructure or DevOps workaround could be to place a reverse proxy in front of the ReactPHP HTTP server to filter out any excessive HTTP request bodies.\n", "other": {"cve": {"id": "CVE-2023-26044", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-17T18:15:09.247", "lastModified": "2023-05-25T17:03:21.083", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "react/http is an event-driven, streaming HTTP client and server implementation for ReactPHP.  Previous versions of ReactPHP's HTTP server component contain a potential DoS vulnerability that can cause high CPU load when processing large HTTP request bodies. This vulnerability has little to no impact on the default configuration, but can be exploited when explicitly using the RequestBodyBufferMiddleware with very large settings. This might lead to consuming large amounts of CPU time for processing requests and significantly delay or slow down the processing of legitimate user requests. This issue has been addressed in release 1.9.0. Users are advised to upgrade. Users unable to upgrade may keep the request body limited using RequestBodyBufferMiddleware with a sensible value which should mitigate the issue. An infrastructure or DevOps workaround could be to place a reverse proxy in front of the ReactPHP HTTP server to filter out any excessive HTTP request bodies.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:reactphp:http:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.8.0", "versionEndExcluding": "1.9.0", "matchCriteriaId": "AC0B6E67-4AED-41D8-90CE-5D5179BAE135"}]}]}], "references": [{"url": "https://github.com/reactphp/http/commit/9681f764b80c45ebfb5fe2ea7da5bd3babfcdcfd", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/reactphp/http/security/advisories/GHSA-95x4-j7vc-h8mf", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/reactphp/http/commit/9681f764b80c45ebfb5fe2ea7da5bd3babfcdcfd"}}