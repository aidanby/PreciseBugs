{"buggy_code": ["/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/random_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <algorithm>\n#include <cmath>\n#include <memory>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/kernels/random_op_cpu.h\"\n#include \"tensorflow/core/lib/hash/crc32c.h\"\n#include \"tensorflow/core/lib/random/random_distributions.h\"\n#include \"tensorflow/core/lib/random/simple_philox.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/util/guarded_philox_random.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\n#if EIGEN_COMP_GNUC && __cplusplus > 199711L\n#define DISABLE_FLOAT_EQUALITY_WARNING \\\n  _Pragma(\"GCC diagnostic push\")       \\\n      _Pragma(\"GCC diagnostic ignored \\\"-Wfloat-equal\\\"\")\n#define ENABLE_FLOAT_EQUALITY_WARNING _Pragma(\"GCC diagnostic pop\")\n#else\n#define DISABLE_FLOAT_EQUALITY_WARNING\n#define ENABLE_FLOAT_EQUALITY_WARNING\n#endif\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace {\n\nstatic Status AllocateOutputWithShape(OpKernelContext* ctx, const Tensor& shape,\n                                      int index, Tensor** output) {\n  TensorShape tensor_shape;\n  TF_RETURN_IF_ERROR(tensor::MakeShape(shape, &tensor_shape));\n  return ctx->allocate_output(index, tensor_shape, output);\n}\n\n// For now, use the same interface as RandomOp, so we can choose either one\n// at the run-time.\ntemplate <typename Device, class Distribution>\nclass PhiloxRandomOp : public OpKernel {\n public:\n  typedef typename Distribution::ResultElementType T;\n  explicit PhiloxRandomOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, generator_.Init(ctx));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    Tensor* output;\n    OP_REQUIRES_OK(ctx, AllocateOutputWithShape(ctx, shape, 0, &output));\n    auto output_flat = output->flat<T>();\n    functor::FillPhiloxRandom<Device, Distribution>()(\n        ctx, ctx->eigen_device<Device>(), /*key=*/nullptr, /*counter=*/nullptr,\n        // Multiplier 256 is the same as in FillPhiloxRandomTask; do not change\n        // it just here.\n        generator_.ReserveRandomOutputs(output_flat.size(), 256),\n        output_flat.data(), output_flat.size(), Distribution());\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n};\n\ntemplate <typename Device, class IntType>\nclass RandomUniformIntOp : public OpKernel {\n public:\n  explicit RandomUniformIntOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, generator_.Init(ctx));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    const Tensor& minval = ctx->input(1);\n    const Tensor& maxval = ctx->input(2);\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(minval.shape()),\n                errors::InvalidArgument(\"minval must be 0-D, got shape \",\n                                        minval.shape().DebugString()));\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(maxval.shape()),\n                errors::InvalidArgument(\"maxval must be 0-D, got shape \",\n                                        maxval.shape().DebugString()));\n\n    // Allocate output, and exit early if possible\n    Tensor* output;\n    OP_REQUIRES_OK(ctx, AllocateOutputWithShape(ctx, shape, 0, &output));\n    if (output->NumElements() == 0) return;\n\n    // Verify that minval < maxval.  This check intentionally happens after the\n    // early exit for empty output.  Zero impossible things are fine.\n    IntType lo = minval.scalar<IntType>()();\n    IntType hi = maxval.scalar<IntType>()();\n    OP_REQUIRES(\n        ctx, lo < hi,\n        errors::InvalidArgument(\"Need minval < maxval, got \", lo, \" >= \", hi));\n\n    // Build distribution\n    typedef random::UniformDistribution<random::PhiloxRandom, IntType>\n        Distribution;\n    Distribution dist(lo, hi);\n\n    auto output_flat = output->flat<IntType>();\n    functor::FillPhiloxRandom<Device, Distribution>()(\n        ctx, ctx->eigen_device<Device>(), /*key=*/nullptr, /*counter=*/nullptr,\n        // Multiplier 256 is the same as in FillPhiloxRandomTask; do not change\n        // it just here.\n        generator_.ReserveRandomOutputs(output_flat.size(), 256),\n        output_flat.data(), output_flat.size(), dist);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n};\n\n// Samples from one or more gamma distributions. All internal computations are\n// done with double precision for numerical stability.\ntemplate <typename T>\nclass RandomGammaOp : public OpKernel {\n public:\n  explicit RandomGammaOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, generator_.Init(context));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape_t = ctx->input(0);\n    const Tensor& alpha_t = ctx->input(1);\n\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(shape_t.shape()) &&\n                    (shape_t.dtype() == DataType::DT_INT32 ||\n                     shape_t.dtype() == DataType::DT_INT64),\n                errors::InvalidArgument(\n                    \"shape must be a vector of {int32,int64}, got shape: \",\n                    shape_t.DebugString()));\n    TensorShape samples_shape;\n    if (shape_t.dtype() == DataType::DT_INT32) {\n      auto vec = shape_t.flat<int32>();\n      OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),\n                                                      &samples_shape));\n    } else if (shape_t.dtype() == DataType::DT_INT64) {\n      auto vec = shape_t.flat<int64_t>();\n      OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),\n                                                      &samples_shape));\n    }\n    const int64_t samples_per_alpha = samples_shape.num_elements();\n\n    samples_shape.AppendShape(alpha_t.shape());\n    // Allocate output samples.\n    Tensor* samples_t = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));\n\n    if (samples_shape.num_elements() == 0) return;\n\n    using random::PhiloxRandom;\n\n    typedef random::NormalDistribution<PhiloxRandom, double> Normal;\n    typedef random::UniformDistribution<PhiloxRandom, double> Uniform;\n#define UNIFORM(X)                                    \\\n  if (uniform_remaining == 0) {                       \\\n    uniform_remaining = Uniform::kResultElementCount; \\\n    uniform_result = uniform(&gen);                   \\\n  }                                                   \\\n  uniform_remaining--;                                \\\n  double X = uniform_result[uniform_remaining]\n\n    // Each attempt is 95+% successful, and requires 1-2 normal + 1 uniform\n    static constexpr int kReservedSamplesPerOutput = 256;\n\n    const auto alpha_flat = alpha_t.flat<T>().data();\n    const int64_t num_alphas = alpha_t.NumElements();\n    OP_REQUIRES(ctx, num_alphas > 0,\n                errors::InvalidArgument(\n                    \"Input alpha should have non-zero element count, got: \",\n                    num_alphas));\n    auto samples_flat = samples_t->flat<T>().data();\n    PhiloxRandom rng = generator_.ReserveRandomOutputs(\n        samples_per_alpha * num_alphas, kReservedSamplesPerOutput);\n\n    // We partition work first across alphas then across samples-per-alpha to\n    // avoid a couple flops which can be done on a per-alpha basis.\n\n    auto DoWork = [samples_per_alpha, num_alphas, &rng, samples_flat,\n                   alpha_flat](int64_t start_output, int64_t limit_output) {\n      using Eigen::numext::exp;\n      using Eigen::numext::log;\n      using Eigen::numext::log1p;\n      using Eigen::numext::pow;\n\n      // Capturing \"rng\" by-value would only make a copy for the _shared_\n      // lambda.  Since we want to let each worker have its own copy, we pass\n      // \"rng\" by reference and explicitly do a copy assignment.\n\n      Normal normal;\n      Uniform uniform;\n      typename Normal::ResultType norm_result;\n      typename Uniform::ResultType uniform_result;\n      for (int64_t output_idx = start_output; output_idx < limit_output;\n           /* output_idx incremented within inner loop below */) {\n        int64_t alpha_idx = output_idx / samples_per_alpha;\n\n        // Instead of +alpha_idx for each sample, we offset the pointer once.\n        T* const samples_alpha_offset = samples_flat + alpha_idx;\n\n        // Several calculations can be done on a per-alpha basis.\n        const double alpha = static_cast<double>(alpha_flat[alpha_idx]);\n\n        DISABLE_FLOAT_EQUALITY_WARNING\n        if (alpha == static_cast<double>(1.0)) {\n          ENABLE_FLOAT_EQUALITY_WARNING\n          // Sample from an exponential distribution.\n          for (int64_t sample_idx = output_idx % samples_per_alpha;\n               sample_idx < samples_per_alpha && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            // As we want data stable regardless of sharding\n            // (including eventually on GPU), we skip on a per-sample basis.\n            PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16_t uniform_remaining = 0;\n            UNIFORM(u);\n            const double res = -log1p(-u);\n            samples_alpha_offset[sample_idx * num_alphas] = static_cast<T>(res);\n          }       // for (sample_idx)\n        } else {  // if alpha != 1.0\n          // Transformation-rejection from pairs of uniform and normal random\n          // variables. http://dl.acm.org/citation.cfm?id=358414\n          //\n          // The algorithm has an acceptance rate of ~95% for small alpha (~1),\n          // and higher accept rates for higher alpha, so runtime is\n          // O(NumAlphas * NumSamples * k) with k ~ 1 / 0.95.\n          //\n          // For alpha<1, we add one to d=alpha-1/3, and multiply the final\n          // result by uniform()^(1/alpha)\n          const bool alpha_less_than_one = alpha < 1;\n          const double d = alpha + (alpha_less_than_one ? 2.0 / 3 : -1.0 / 3);\n          const double c = 1.0 / 3 / sqrt(d);\n\n          // Compute the rest of the samples for the current alpha value.\n          for (int64_t sample_idx = output_idx % samples_per_alpha;\n               sample_idx < samples_per_alpha && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            // Since each sample may use a variable number of normal/uniform\n            // samples, and we want data stable regardless of sharding\n            // (including eventually on GPU), we skip on a per-sample basis.\n            PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16_t norm_remaining = 0;\n            int16_t uniform_remaining = 0;\n\n            // Keep trying until we don't reject a sample. In practice, we will\n            // only reject ~5% at worst, for low alpha near 1.\n            while (true) {\n              if (norm_remaining == 0) {\n                norm_remaining = Normal::kResultElementCount;\n                norm_result = normal(&gen);\n              }\n              norm_remaining--;\n              const double x = norm_result[norm_remaining];\n              double v = 1 + c * x;\n              if (v <= 0) {\n                continue;\n              }\n              v = v * v * v;\n              UNIFORM(u);\n              // The first option in the if is a \"squeeze\" short-circuit to\n              // dodge the two logs. Magic constant sourced from the paper\n              // linked above. Upward of .91 of the area covered by the log\n              // inequality is covered by the squeeze as well (larger coverage\n              // for smaller values of alpha).\n              if ((u < 1 - 0.0331 * (x * x) * (x * x)) ||\n                  (log(u) < 0.5 * x * x + d * (1 - v + log(v)))) {\n                double res = d * v;\n                if (alpha_less_than_one) {\n                  UNIFORM(b);\n                  res *= pow(b, 1 / alpha);\n                }\n                samples_alpha_offset[sample_idx * num_alphas] =\n                    static_cast<T>(res);\n                break;\n              }\n            }  // while: true\n          }    // for: sample_idx\n        }      // if (alpha == 1.0)\n      }        // for: output_idx\n    };         // DoWork\n#undef UNIFORM\n    // Two calls to log only occur for ~10% of samples reaching the log line.\n    //   2 x 100 (64-bit cycles per log) x 0.10 = ~20.\n    // Other ops: sqrt, +, *, /, %... something like 15 of these, at 3-6 cycles\n    // each = ~60.\n    // All of this /0.95 due to the rejection possibility = ~85.\n    static const int kElementCost = 85 + 2 * Normal::kElementCost +\n                                    Uniform::kElementCost +\n                                    3 * PhiloxRandom::kElementCost;\n    auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers,\n          num_alphas * samples_per_alpha, kElementCost, DoWork);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(RandomGammaOp);\n};\n\n}  // namespace\n\n#define REGISTER(TYPE)                                                         \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice, random::UniformDistribution<random::PhiloxRandom, TYPE>>;     \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice, random::NormalDistribution<random::PhiloxRandom, TYPE>>;      \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice,                                                               \\\n      random::TruncatedNormalDistribution<                                     \\\n          random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>;           \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomUniform\")                                                    \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<CPUDevice, random::UniformDistribution<                   \\\n                                    random::PhiloxRandom, TYPE>>);             \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomStandardNormal\")                                             \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<CPUDevice,                                                \\\n                     random::NormalDistribution<random::PhiloxRandom, TYPE>>); \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"TruncatedNormal\")                                                  \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<                                                          \\\n          CPUDevice,                                                           \\\n          random::TruncatedNormalDistribution<                                 \\\n              random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>);      \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomGamma\").Device(DEVICE_CPU).TypeConstraint<TYPE>(\"T\"),        \\\n      RandomGammaOp<TYPE>)\n\n#define REGISTER_FULL_INT(IntType)           \\\n  template struct functor::FillPhiloxRandom< \\\n      CPUDevice,                             \\\n      random::UniformFullIntDistribution<random::PhiloxRandom, IntType>>\n\n#define REGISTER_INT(IntType)                                                 \\\n  REGISTER_FULL_INT(IntType);                                                 \\\n  template struct functor::FillPhiloxRandom<                                  \\\n      CPUDevice, random::UniformDistribution<random::PhiloxRandom, IntType>>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomUniformInt\")                            \\\n                              .Device(DEVICE_CPU)                             \\\n                              .HostMemory(\"shape\")                            \\\n                              .HostMemory(\"minval\")                           \\\n                              .HostMemory(\"maxval\")                           \\\n                              .TypeConstraint<IntType>(\"Tout\"),               \\\n                          RandomUniformIntOp<CPUDevice, IntType>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_bfloat16(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\nTF_CALL_int32(REGISTER_INT);\nTF_CALL_int64(REGISTER_INT);\nTF_CALL_uint32(REGISTER_FULL_INT);\nTF_CALL_uint64(REGISTER_FULL_INT);\n\n#undef REGISTER\n#undef REGISTER_INT\n#undef REGISTER_FULL_INT\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER(TYPE)                                                         \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomUniform\")                                                    \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<GPUDevice, random::UniformDistribution<                   \\\n                                    random::PhiloxRandom, TYPE>>);             \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomStandardNormal\")                                             \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<GPUDevice,                                                \\\n                     random::NormalDistribution<random::PhiloxRandom, TYPE>>); \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"TruncatedNormal\")                                                  \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<                                                          \\\n          GPUDevice,                                                           \\\n          random::TruncatedNormalDistribution<                                 \\\n              random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>);\n\n#define REGISTER_FULL_INT(IntType)           \\\n  template struct functor::FillPhiloxRandom< \\\n      GPUDevice,                             \\\n      random::UniformFullIntDistribution<random::PhiloxRandom, IntType>>\n\n#define REGISTER_INT(IntType)                                                 \\\n  REGISTER_FULL_INT(IntType);                                                 \\\n  template struct functor::FillPhiloxRandom<                                  \\\n      GPUDevice, random::UniformDistribution<random::PhiloxRandom, IntType>>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomUniformInt\")                            \\\n                              .Device(DEVICE_GPU)                             \\\n                              .HostMemory(\"shape\")                            \\\n                              .HostMemory(\"minval\")                           \\\n                              .HostMemory(\"maxval\")                           \\\n                              .TypeConstraint<int32>(\"T\")                     \\\n                              .TypeConstraint<IntType>(\"Tout\"),               \\\n                          RandomUniformIntOp<GPUDevice, IntType>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\nTF_CALL_int32(REGISTER_INT);\nTF_CALL_int64(REGISTER_INT);\nTF_CALL_uint32(REGISTER_FULL_INT);\nTF_CALL_uint64(REGISTER_FULL_INT);\n\n#undef REGISTER\n#undef REGISTER_INT\n#undef REGISTER_FULL_INT\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\n}  // end namespace tensorflow\n", "/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/random_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/random_poisson_op.h\"\n\n#include <algorithm>\n#include <cmath>\n#include <limits>\n#include <memory>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/lib/random/random_distributions.h\"\n#include \"tensorflow/core/lib/random/simple_philox.h\"\n#include \"tensorflow/core/util/guarded_philox_random.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\n#if EIGEN_COMP_GNUC && __cplusplus > 199711L\n#define DISABLE_FLOAT_EQUALITY_WARNING \\\n  _Pragma(\"GCC diagnostic push\")       \\\n      _Pragma(\"GCC diagnostic ignored \\\"-Wfloat-equal\\\"\")\n#define ENABLE_FLOAT_EQUALITY_WARNING _Pragma(\"GCC diagnostic pop\")\n#else\n#define DISABLE_FLOAT_EQUALITY_WARNING\n#define ENABLE_FLOAT_EQUALITY_WARNING\n#endif\n\n#define UNIFORM(X)                                    \\\n  if (uniform_remaining == 0) {                       \\\n    uniform_remaining = Uniform::kResultElementCount; \\\n    uniform_result = uniform(&gen);                   \\\n  }                                                   \\\n  uniform_remaining--;                                \\\n  CT X = uniform_result[uniform_remaining]\n\nnamespace tensorflow {\nnamespace {\n\nstatic constexpr int kReservedSamplesPerOutput = 256;\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate <typename T>\nstruct PoissonComputeType {\n  typedef double ComputeType;\n};\n\n}  // namespace\n\nnamespace functor {\n\ntemplate <typename T, typename U>\nstruct PoissonFunctor<CPUDevice, T, U> {\n  void operator()(OpKernelContext* ctx, const CPUDevice& d, const T* rate_flat,\n                  int num_rate, int num_samples,\n                  const random::PhiloxRandom& rng, U* samples_flat) {\n    // Two different algorithms are employed, depending on the size of\n    // rate.\n    // If rate < 10, we use an algorithm attributed to Knuth:\n    // Seminumerical Algorithms. Art of Computer Programming, Volume 2.\n    //\n    // This algorithm runs in O(rate) time, and will require O(rate)\n    // uniform variates.\n    //\n    // If rate >= 10 we use a transformation-rejection algorithm from\n    // pairs of uniform random variables due to Hormann.\n    // http://www.sciencedirect.com/science/article/pii/0167668793909974\n    //\n    // The algorithm has an acceptance rate of ~89% for the smallest rate\n    // (~10),\n    // and higher accept rates for higher rate, so runtime is\n    // O(NumRate * NumSamples * k) with k ~ 1 / 0.89.\n    //\n    // We partition work first across rates then across\n    // samples-per-rate to\n    // avoid a couple flops which can be done on a per-rate basis.\n\n    typedef random::UniformDistribution<random::PhiloxRandom, CT> Uniform;\n\n    auto DoWork = [num_samples, num_rate, &rng, samples_flat, rate_flat](\n                      int64_t start_output, int64_t limit_output) {\n      // Capturing \"rng\" by value would only make a copy for the _shared_\n      // lambda.  Since we want to let each worker have its own copy, we pass\n      // \"rng\" by reference and explicitly do a copy assignment.\n\n      Uniform uniform;\n      typename Uniform::ResultType uniform_result;\n      for (int64_t output_idx = start_output; output_idx < limit_output;\n           /* output_idx incremented within inner loop below */) {\n        const int64_t rate_idx = output_idx / num_samples;\n\n        // Several calculations can be done on a per-rate basis.\n        const CT rate = CT(rate_flat[rate_idx]);\n\n        auto samples_rate_output = samples_flat + rate_idx;\n\n        if (rate < CT(10)) {\n          // Knuth's algorithm for generating Poisson random variates.\n          // Given a Poisson process, the time between events is exponentially\n          // distributed. If we have a Poisson process with rate lambda, then,\n          // the time between events is distributed Exp(lambda). If X ~\n          // Uniform(0, 1), then Y ~ Exp(lambda), where Y = -log(X) / lambda.\n          // Thus to simulate a Poisson draw, we can draw X_i ~ Exp(lambda),\n          // and N ~ Poisson(lambda), where N is the least number such that\n          // \\sum_i^N X_i > 1.\n          const CT exp_neg_rate = Eigen::numext::exp(-rate);\n\n          // Compute the rest of the samples for the current rate value.\n          for (int64_t sample_idx = output_idx % num_samples;\n               sample_idx < num_samples && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            random::PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16_t uniform_remaining = 0;\n\n            CT prod = 1;\n            CT x = 0;\n\n            // Keep trying until we surpass e^(-rate). This will take\n            // expected time proportional to rate.\n            while (true) {\n              UNIFORM(u);\n              prod = prod * u;\n              if (prod <= exp_neg_rate &&\n                  x <= CT(Eigen::NumTraits<U>::highest())) {\n                samples_rate_output[sample_idx * num_rate] = U(x);\n                break;\n              }\n              x += 1;\n            }\n          }\n          continue;\n        }\n        if (Eigen::numext::isinf(rate) && rate > CT(0)) {\n          // Fill the rest of the samples for the current rate value.\n          for (int64_t sample_idx = output_idx % num_samples;\n               sample_idx < num_samples && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            U k = Eigen::NumTraits<U>::infinity();\n            samples_rate_output[sample_idx * num_rate] = k;\n          }\n          continue;\n        }\n        // Transformed rejection due to Hormann.\n        //\n        // Given a CDF F(x), and G(x), a dominating distribution chosen such\n        // that it is close to the inverse CDF F^-1(x), compute the following\n        // steps:\n        //\n        // 1) Generate U and V, two independent random variates. Set U = U - 0.5\n        // (this step isn't strictly necessary, but is done to make some\n        // calculations symmetric and convenient. Henceforth, G is defined on\n        // [-0.5, 0.5]).\n        //\n        // 2) If V <= alpha * F'(G(U)) * G'(U), return floor(G(U)), else return\n        // to step 1. alpha is the acceptance probability of the rejection\n        // algorithm.\n        //\n        // For more details on transformed rejection, see:\n        // http://citeseer.ist.psu.edu/viewdoc/citations;jsessionid=1BEB35946CC807879F55D42512E5490C?doi=10.1.1.48.3054.\n        //\n        // The dominating distribution in this case:\n        //\n        // G(u) = (2 * a / (2 - |u|) + b) * u + c\n\n        using Eigen::numext::log;\n        const CT log_rate = log(rate);\n\n        // Constants used to define the dominating distribution. Names taken\n        // from Hormann's paper. Constants were chosen to define the tightest\n        // G(u) for the inverse Poisson CDF.\n        const CT b = CT(0.931) + CT(2.53) * Eigen::numext::sqrt(rate);\n        const CT a = CT(-0.059) + CT(0.02483) * b;\n\n        // This is the inverse acceptance rate. At a minimum (when rate = 10),\n        // this corresponds to ~75% acceptance. As the rate becomes larger, this\n        // approaches ~89%.\n        const CT inv_alpha = CT(1.1239) + CT(1.1328) / (b - CT(3.4));\n\n        // Compute the rest of the samples for the current rate value.\n        for (int64_t sample_idx = output_idx % num_samples;\n             sample_idx < num_samples && output_idx < limit_output;\n             sample_idx++, output_idx++) {\n          random::PhiloxRandom gen = rng;\n          gen.Skip(kReservedSamplesPerOutput * output_idx);\n          int16_t uniform_remaining = 0;\n\n          while (true) {\n            UNIFORM(u);\n            u -= CT(0.5);\n            UNIFORM(v);\n\n            CT u_shifted = CT(0.5) - Eigen::numext::abs(u);\n            CT k = Eigen::numext::floor((CT(2) * a / u_shifted + b) * u + rate +\n                                        CT(0.43));\n\n            if (k > CT(Eigen::NumTraits<U>::highest())) {\n              // retry in case of overflow.\n              continue;\n            }\n\n            // When alpha * f(G(U)) * G'(U) is close to 1, it is possible to\n            // find a rectangle (-u_r, u_r) x (0, v_r) under the curve, such\n            // that if v <= v_r and |u| <= u_r, then we can accept.\n            // Here v_r = 0.9227 - 3.6224 / (b - 2) and u_r = 0.43.\n            if (u_shifted >= CT(0.07) &&\n                v <= CT(0.9277) - CT(3.6224) / (b - CT(2))) {\n              samples_rate_output[sample_idx * num_rate] = U(k);\n              break;\n            }\n\n            if (k < 0 || (u_shifted < CT(0.013) && v > u_shifted)) {\n              continue;\n            }\n\n            // The expression below is equivalent to the computation of step 2)\n            // in transformed rejection (v <= alpha * F'(G(u)) * G'(u)).\n            CT s = log(v * inv_alpha / (a / (u_shifted * u_shifted) + b));\n            CT t = -rate + k * log_rate - Eigen::numext::lgamma(k + 1);\n            if (s <= t) {\n              samples_rate_output[sample_idx * num_rate] = U(k);\n              break;\n            }\n          }\n        }\n      }\n    };\n\n    // This will depend on rate.\n    // For rate < 10, on average, O(rate) calls to uniform are\n    // needed, with that\n    // many multiplies. ~10 uniform calls on average with ~25 cost op calls.\n    //\n    // Very roughly, for rate >= 10, the single call to log + call to\n    // lgamma\n    // occur for ~60 percent of samples.\n    // 2 x 100 (64-bit cycles per log) * 0.62 = ~124\n    // Additionally, there are ~10 other ops (+, *, /, ...) at 3-6 cycles each:\n    // 40 * .62  = ~25.\n    //\n    // Finally, there are several other ops that are done every loop along with\n    // 2 uniform generations along with 5 other ops at 3-6 cycles each.\n    // ~15 / .89 = ~16\n    //\n    // In total this should be ~165 + 2 * Uniform::kElementCost.\n    // We assume that half the tensor has rate < 10, so on average 6\n    // uniform's\n    // will be needed. We will upper bound the other op cost by the one for\n    // rate > 10.\n    static const int kElementCost = 165 + 6 * Uniform::kElementCost +\n                                    6 * random::PhiloxRandom::kElementCost;\n    auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers,\n          num_rate * num_samples, kElementCost, DoWork);\n  }\n\n private:\n  typedef typename PoissonComputeType<T>::ComputeType CT;\n};\n\n}  // namespace functor\n\nnamespace {\n\n// Samples from one or more Poisson distributions.\ntemplate <typename T, typename U>\nclass RandomPoissonOp : public OpKernel {\n public:\n  explicit RandomPoissonOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, generator_.Init(context));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape_t = ctx->input(0);\n    const Tensor& rate_t = ctx->input(1);\n\n    TensorShape samples_shape;\n    OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_t, &samples_shape));\n    const int64_t num_samples = samples_shape.num_elements();\n\n    samples_shape.AppendShape(rate_t.shape());\n    // Allocate output samples.\n    Tensor* samples_t = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));\n    if (num_samples == 0) return;\n\n    const auto rate_flat = rate_t.flat<T>().data();\n    const int64_t num_rate = rate_t.NumElements();\n    auto samples_flat = samples_t->flat<U>().data();\n    random::PhiloxRandom rng = generator_.ReserveRandomOutputs(\n        num_samples * num_rate, kReservedSamplesPerOutput);\n\n    functor::PoissonFunctor<CPUDevice, T, U>()(\n        ctx, ctx->eigen_device<CPUDevice>(), rate_flat, num_rate, num_samples,\n        rng, samples_flat);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(RandomPoissonOp);\n};\n}  // namespace\n\n#undef UNIFORM\n\n#define REGISTER(TYPE)                                                        \\\n  REGISTER_KERNEL_BUILDER(                                                    \\\n      Name(\"RandomPoisson\").Device(DEVICE_CPU).TypeConstraint<TYPE>(\"dtype\"), \\\n      RandomPoissonOp<TYPE, TYPE>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\n\n#define REGISTER_V2(RTYPE, OTYPE)                                   \\\n  template struct functor::PoissonFunctor<CPUDevice, RTYPE, OTYPE>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomPoissonV2\")                   \\\n                              .Device(DEVICE_CPU)                   \\\n                              .TypeConstraint<RTYPE>(\"R\")           \\\n                              .TypeConstraint<OTYPE>(\"dtype\"),      \\\n                          RandomPoissonOp<RTYPE, OTYPE>);\n\n#define REGISTER_ALL(RTYPE)        \\\n  REGISTER_V2(RTYPE, Eigen::half); \\\n  REGISTER_V2(RTYPE, float);       \\\n  REGISTER_V2(RTYPE, double);      \\\n  REGISTER_V2(RTYPE, int32);       \\\n  REGISTER_V2(RTYPE, int64_t);\n\nREGISTER_ALL(Eigen::half);\nREGISTER_ALL(float);\nREGISTER_ALL(double);\nREGISTER_ALL(int32);\nREGISTER_ALL(int64_t);\n\n#undef REGISTER_ALL\n#undef REGISTER_V2\n#undef REGISTER\n\n}  // end namespace tensorflow\n", "# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.ops.random_ops.random_gamma.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import random_seed\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.kernel_tests.random import util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.ops import random_ops\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.platform import tf_logging\n\n\nclass RandomGammaTest(test.TestCase):\n  \"\"\"This is a medium test due to the moments computation taking some time.\"\"\"\n\n  def setUp(self):\n    np.random.seed(137)\n    random_seed.set_random_seed(137)\n\n  def _Sampler(self, num, alpha, beta, dtype, use_gpu=True, seed=None):\n\n    def func():\n      with self.session(use_gpu=use_gpu, graph=ops.Graph()) as sess:\n        rng = random_ops.random_gamma(\n            [num], alpha, beta=beta, dtype=dtype, seed=seed)\n        ret = np.empty([10, num])\n        for i in range(10):\n          ret[i, :] = self.evaluate(rng)\n      return ret\n\n    return func\n\n  def testNpDtypes(self):\n    self.evaluate(random_ops.random_gamma(\n        [5], alpha=np.ones([2, 1, 3]), beta=np.ones([3]), dtype=np.float32))\n\n  def testEmptySamplingNoError(self):\n    self.evaluate(random_ops.random_gamma(\n        [5], alpha=np.ones([2, 0, 3]), beta=np.ones([3]), dtype=dtypes.float32))\n\n  @test_util.run_deprecated_v1\n  def testMomentsFloat32(self):\n    self._testMoments(dtypes.float32)\n\n  @test_util.run_deprecated_v1\n  def testMomentsFloat64(self):\n    self._testMoments(dtypes.float64)\n\n  def _testMoments(self, dt):\n    try:\n      from scipy import stats  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf_logging.warn(\"Cannot test moments: %s\" % e)\n      return\n\n    # The moments test is a z-value test.  This is the largest z-value\n    # we want to tolerate. Since the z-test approximates a unit normal\n    # distribution, it should almost definitely never exceed 6.\n    z_limit = 6.0\n\n    for stride in 0, 1, 4, 17:\n      alphas = [0.2, 1.0, 3.0]\n      if dt == dtypes.float64:\n        alphas = [0.01] + alphas\n      for alpha in alphas:\n        for scale in 9, 17:\n          # Gamma moments only defined for values less than the scale param.\n          max_moment = min(6, scale // 2)\n          sampler = self._Sampler(20000, alpha, 1 / scale, dt, seed=12345)\n          z_scores = util.test_moment_matching(\n              sampler(),\n              max_moment,\n              stats.gamma(alpha, scale=scale),\n              stride=stride,\n          )\n          self.assertAllLess(z_scores, z_limit)\n\n  def _testZeroDensity(self, alpha):\n    \"\"\"Zero isn't in the support of the gamma distribution.\n\n    But quantized floating point math has its limits.\n    TODO(bjp): Implement log-gamma sampler for small-shape distributions.\n\n    Args:\n      alpha: float shape value to test\n    \"\"\"\n    try:\n      from scipy import stats  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf_logging.warn(\"Cannot test zero density proportions: %s\" % e)\n      return\n    allowable_zeros = {\n        dtypes.float16: stats.gamma(alpha).cdf(np.finfo(np.float16).tiny),\n        dtypes.float32: stats.gamma(alpha).cdf(np.finfo(np.float32).tiny),\n        dtypes.float64: stats.gamma(alpha).cdf(np.finfo(np.float64).tiny)\n    }\n    failures = []\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sampler = self._Sampler(10000, alpha, 1.0, dt, seed=12345)\n      x = sampler()\n      allowable = allowable_zeros[dt] * x.size\n      allowable = allowable * 2 if allowable < 10 else allowable * 1.05\n      if np.sum(x <= 0) > allowable:\n        failures += [dt]\n    self.assertEqual([], failures)\n\n  def testNonZeroSmallShape(self):\n    self._testZeroDensity(0.01)\n\n  def testNonZeroSmallishShape(self):\n    self._testZeroDensity(0.35)\n\n  # Asserts that different trials (1000 samples per trial) is unlikely\n  # to see the same sequence of values. Will catch buggy\n  # implementations which uses the same random number seed.\n  def testDistinct(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sampler = self._Sampler(1000, 2.0, 1.0, dt)\n      x = sampler()\n      y = sampler()\n      # Number of different samples.\n      count = (x == y).sum()\n      count_limit = 20 if dt == dtypes.float16 else 10\n      self.assertLess(count, count_limit)\n\n  # Checks that the CPU and GPU implementation returns the same results,\n  # given the same random seed\n  @test_util.run_deprecated_v1\n  def testCPUGPUMatch(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      results = {}\n      for use_gpu in [False, True]:\n        sampler = self._Sampler(1000, 0.0, 1.0, dt, use_gpu=use_gpu, seed=12345)\n        results[use_gpu] = sampler()\n      if dt == dtypes.float16:\n        self.assertAllClose(results[False], results[True], rtol=1e-3, atol=1e-3)\n      else:\n        self.assertAllClose(results[False], results[True], rtol=1e-6, atol=1e-6)\n\n  def testSeed(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sx = self._Sampler(1000, 0.0, 1.0, dt, seed=345)\n      sy = self._Sampler(1000, 0.0, 1.0, dt, seed=345)\n      self.assertAllEqual(sx(), sy())\n\n  @test_util.run_deprecated_v1\n  def testNoCSE(self):\n    \"\"\"CSE = constant subexpression eliminator.\n\n    SetIsStateful() should prevent two identical random ops from getting\n    merged.\n    \"\"\"\n    for dtype in dtypes.float16, dtypes.float32, dtypes.float64:\n      with self.cached_session():\n        rnd1 = random_ops.random_gamma([24], 2.0, dtype=dtype)\n        rnd2 = random_ops.random_gamma([24], 2.0, dtype=dtype)\n        diff = rnd2 - rnd1\n        self.assertGreater(np.linalg.norm(diff.eval()), 0.1)\n\n  @test_util.run_deprecated_v1\n  def testShape(self):\n    # Fully known shape.\n    rnd = random_ops.random_gamma([150], 2.0)\n    self.assertEqual([150], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma([150], 2.0, beta=[3.0, 4.0])\n    self.assertEqual([150, 2], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma([150], array_ops.ones([1, 2, 3]))\n    self.assertEqual([150, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma([20, 30], array_ops.ones([1, 2, 3]))\n    self.assertEqual([20, 30, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma(\n        [123], array_ops.placeholder(\n            dtypes.float32, shape=(2,)))\n    self.assertEqual([123, 2], rnd.get_shape().as_list())\n    # Partially known shape.\n    rnd = random_ops.random_gamma(\n        array_ops.placeholder(\n            dtypes.int32, shape=(1,)), array_ops.ones([7, 3]))\n    self.assertEqual([None, 7, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma(\n        array_ops.placeholder(\n            dtypes.int32, shape=(3,)), array_ops.ones([9, 6]))\n    self.assertEqual([None, None, None, 9, 6], rnd.get_shape().as_list())\n    # Unknown shape.\n    rnd = random_ops.random_gamma(\n        array_ops.placeholder(dtypes.int32),\n        array_ops.placeholder(dtypes.float32))\n    self.assertIs(None, rnd.get_shape().ndims)\n    rnd = random_ops.random_gamma([50], array_ops.placeholder(dtypes.float32))\n    self.assertIs(None, rnd.get_shape().ndims)\n\n  @test_util.run_deprecated_v1\n  def testPositive(self):\n    n = int(10e3)\n    for dt in [dtypes.float16, dtypes.float32, dtypes.float64]:\n      with self.cached_session():\n        x = random_ops.random_gamma(shape=[n], alpha=0.001, dtype=dt, seed=0)\n        self.assertEqual(0, math_ops.reduce_sum(math_ops.cast(\n            math_ops.less_equal(x, 0.), dtype=dtypes.int64)).eval())\n\n\nif __name__ == \"__main__\":\n  test.main()\n", "# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.ops.random_ops.random_poisson.\"\"\"\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.kernel_tests.random import util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import random_ops\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.platform import tf_logging\n\n# All supported dtypes for random_poisson().\n_SUPPORTED_DTYPES = (dtypes.float16, dtypes.float32, dtypes.float64,\n                     dtypes.int32, dtypes.int64)\n\n\nclass RandomPoissonTest(test.TestCase):\n  \"\"\"This is a large test due to the moments computation taking some time.\"\"\"\n\n  def _Sampler(self, num, lam, dtype, use_gpu, seed=None):\n\n    def func():\n      with self.session(use_gpu=use_gpu, graph=ops.Graph()) as sess:\n        rng = random_ops.random_poisson(lam, [num], dtype=dtype, seed=seed)\n        ret = np.empty([10, num])\n        for i in range(10):\n          ret[i, :] = self.evaluate(rng)\n      return ret\n\n    return func\n\n  def testMoments(self):\n    try:\n      from scipy import stats  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf_logging.warn(\"Cannot test moments: %s\", e)\n      return\n\n    # The moments test is a z-value test.  This is the largest z-value\n    # we want to tolerate. Since the z-test approximates a unit normal\n    # distribution, it should almost definitely never exceed 6.\n    z_limit = 6.0\n    for dt in _SUPPORTED_DTYPES:\n      # Test when lam < 10 and when lam >= 10\n      for stride in 0, 4, 10:\n        for lam in (3., 20):\n          max_moment = 5\n          sampler = self._Sampler(10000, lam, dt, use_gpu=False, seed=12345)\n          z_scores = util.test_moment_matching(\n              sampler(),\n              max_moment,\n              stats.poisson(lam),\n              stride=stride,\n          )\n          self.assertAllLess(z_scores, z_limit)\n\n  # Checks that the CPU and GPU implementation returns the same results,\n  # given the same random seed\n  @test_util.run_deprecated_v1\n  def testCPUGPUMatch(self):\n    for dt in _SUPPORTED_DTYPES:\n      results = {}\n      for use_gpu in [False, True]:\n        sampler = self._Sampler(1000, 1.0, dt, use_gpu=use_gpu, seed=12345)\n        results[use_gpu] = sampler()\n      if dt == dtypes.float16:\n        self.assertAllClose(results[False], results[True], rtol=1e-3, atol=1e-3)\n      else:\n        self.assertAllClose(results[False], results[True], rtol=1e-6, atol=1e-6)\n\n  @test_util.run_deprecated_v1\n  def testSeed(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sx = self._Sampler(1000, 1.0, dt, use_gpu=True, seed=345)\n      sy = self._Sampler(1000, 1.0, dt, use_gpu=True, seed=345)\n      self.assertAllEqual(sx(), sy())\n\n  @test_util.run_deprecated_v1\n  def testNoCSE(self):\n    \"\"\"CSE = constant subexpression eliminator.\n\n    SetIsStateful() should prevent two identical random ops from getting\n    merged.\n    \"\"\"\n    for dtype in dtypes.float16, dtypes.float32, dtypes.float64:\n      with self.cached_session():\n        rnd1 = random_ops.random_poisson(2.0, [24], dtype=dtype)\n        rnd2 = random_ops.random_poisson(2.0, [24], dtype=dtype)\n        diff = rnd2 - rnd1\n        # Since these are all positive integers, the norm will\n        # be at least 1 if they are different.\n        self.assertGreaterEqual(np.linalg.norm(diff.eval()), 1)\n\n  def testZeroShape(self):\n    with self.cached_session():\n      rnd = random_ops.random_poisson([], [], seed=12345)\n      self.assertEqual([0], rnd.get_shape().as_list())\n      self.assertAllClose(np.array([], dtype=np.float32), self.evaluate(rnd))\n\n  @test_util.run_deprecated_v1\n  def testShape(self):\n    # Fully known shape\n    rnd = random_ops.random_poisson(2.0, [150], seed=12345)\n    self.assertEqual([150], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([1, 2, 3]),\n        shape=[150],\n        seed=12345)\n    self.assertEqual([150, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([1, 2, 3]),\n        shape=[20, 30],\n        seed=12345)\n    self.assertEqual([20, 30, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32, shape=(2,)),\n        shape=[12],\n        seed=12345)\n    self.assertEqual([12, 2], rnd.get_shape().as_list())\n    # Partially known shape.\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([7, 3]),\n        shape=array_ops.placeholder(dtypes.int32, shape=(1,)),\n        seed=12345)\n    self.assertEqual([None, 7, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([9, 6]),\n        shape=array_ops.placeholder(dtypes.int32, shape=(3,)),\n        seed=12345)\n    self.assertEqual([None, None, None, 9, 6], rnd.get_shape().as_list())\n    # Unknown shape.\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32),\n        shape=array_ops.placeholder(dtypes.int32),\n        seed=12345)\n    self.assertIs(None, rnd.get_shape().ndims)\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32),\n        shape=[50],\n        seed=12345)\n    self.assertIs(None, rnd.get_shape().ndims)\n\n  @test_util.run_deprecated_v1\n  def testDTypeCombinationsV2(self):\n    \"\"\"Tests random_poisson_v2() for all supported dtype combinations.\"\"\"\n    with self.cached_session():\n      for lam_dt in _SUPPORTED_DTYPES:\n        for out_dt in _SUPPORTED_DTYPES:\n          random_ops.random_poisson(\n              constant_op.constant([1], dtype=lam_dt), [10],\n              dtype=out_dt).eval()\n\n  @test_util.run_deprecated_v1\n  def testInfRate(self):\n    sample = random_ops.random_poisson(shape=[2], lam=np.inf)\n    self.assertAllEqual([np.inf, np.inf], self.evaluate(sample))\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/random_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <algorithm>\n#include <cmath>\n#include <memory>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/kernels/random_op_cpu.h\"\n#include \"tensorflow/core/lib/hash/crc32c.h\"\n#include \"tensorflow/core/lib/random/random_distributions.h\"\n#include \"tensorflow/core/lib/random/simple_philox.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/util/guarded_philox_random.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\n#if EIGEN_COMP_GNUC && __cplusplus > 199711L\n#define DISABLE_FLOAT_EQUALITY_WARNING \\\n  _Pragma(\"GCC diagnostic push\")       \\\n      _Pragma(\"GCC diagnostic ignored \\\"-Wfloat-equal\\\"\")\n#define ENABLE_FLOAT_EQUALITY_WARNING _Pragma(\"GCC diagnostic pop\")\n#else\n#define DISABLE_FLOAT_EQUALITY_WARNING\n#define ENABLE_FLOAT_EQUALITY_WARNING\n#endif\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace {\n\nstatic Status AllocateOutputWithShape(OpKernelContext* ctx, const Tensor& shape,\n                                      int index, Tensor** output) {\n  TensorShape tensor_shape;\n  TF_RETURN_IF_ERROR(tensor::MakeShape(shape, &tensor_shape));\n  return ctx->allocate_output(index, tensor_shape, output);\n}\n\n// For now, use the same interface as RandomOp, so we can choose either one\n// at the run-time.\ntemplate <typename Device, class Distribution>\nclass PhiloxRandomOp : public OpKernel {\n public:\n  typedef typename Distribution::ResultElementType T;\n  explicit PhiloxRandomOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, generator_.Init(ctx));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    Tensor* output;\n    OP_REQUIRES_OK(ctx, AllocateOutputWithShape(ctx, shape, 0, &output));\n    auto output_flat = output->flat<T>();\n    functor::FillPhiloxRandom<Device, Distribution>()(\n        ctx, ctx->eigen_device<Device>(), /*key=*/nullptr, /*counter=*/nullptr,\n        // Multiplier 256 is the same as in FillPhiloxRandomTask; do not change\n        // it just here.\n        generator_.ReserveRandomOutputs(output_flat.size(), 256),\n        output_flat.data(), output_flat.size(), Distribution());\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n};\n\ntemplate <typename Device, class IntType>\nclass RandomUniformIntOp : public OpKernel {\n public:\n  explicit RandomUniformIntOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, generator_.Init(ctx));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    const Tensor& minval = ctx->input(1);\n    const Tensor& maxval = ctx->input(2);\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(minval.shape()),\n                errors::InvalidArgument(\"minval must be 0-D, got shape \",\n                                        minval.shape().DebugString()));\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(maxval.shape()),\n                errors::InvalidArgument(\"maxval must be 0-D, got shape \",\n                                        maxval.shape().DebugString()));\n\n    // Allocate output, and exit early if possible\n    Tensor* output;\n    OP_REQUIRES_OK(ctx, AllocateOutputWithShape(ctx, shape, 0, &output));\n    if (output->NumElements() == 0) return;\n\n    // Verify that minval < maxval.  This check intentionally happens after the\n    // early exit for empty output.  Zero impossible things are fine.\n    IntType lo = minval.scalar<IntType>()();\n    IntType hi = maxval.scalar<IntType>()();\n    OP_REQUIRES(\n        ctx, lo < hi,\n        errors::InvalidArgument(\"Need minval < maxval, got \", lo, \" >= \", hi));\n\n    // Build distribution\n    typedef random::UniformDistribution<random::PhiloxRandom, IntType>\n        Distribution;\n    Distribution dist(lo, hi);\n\n    auto output_flat = output->flat<IntType>();\n    functor::FillPhiloxRandom<Device, Distribution>()(\n        ctx, ctx->eigen_device<Device>(), /*key=*/nullptr, /*counter=*/nullptr,\n        // Multiplier 256 is the same as in FillPhiloxRandomTask; do not change\n        // it just here.\n        generator_.ReserveRandomOutputs(output_flat.size(), 256),\n        output_flat.data(), output_flat.size(), dist);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n};\n\n// Samples from one or more gamma distributions. All internal computations are\n// done with double precision for numerical stability.\ntemplate <typename T>\nclass RandomGammaOp : public OpKernel {\n public:\n  explicit RandomGammaOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, generator_.Init(context));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape_t = ctx->input(0);\n    const Tensor& alpha_t = ctx->input(1);\n\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(shape_t.shape()) &&\n                    (shape_t.dtype() == DataType::DT_INT32 ||\n                     shape_t.dtype() == DataType::DT_INT64),\n                errors::InvalidArgument(\n                    \"shape must be a vector of {int32,int64}, got shape: \",\n                    shape_t.DebugString()));\n    TensorShape samples_shape;\n    if (shape_t.dtype() == DataType::DT_INT32) {\n      auto vec = shape_t.flat<int32>();\n      OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),\n                                                      &samples_shape));\n    } else if (shape_t.dtype() == DataType::DT_INT64) {\n      auto vec = shape_t.flat<int64_t>();\n      OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),\n                                                      &samples_shape));\n    }\n    const int64_t samples_per_alpha = samples_shape.num_elements();\n\n    OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(alpha_t.shape()));\n    // Allocate output samples.\n    Tensor* samples_t = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));\n\n    if (samples_shape.num_elements() == 0) return;\n\n    using random::PhiloxRandom;\n\n    typedef random::NormalDistribution<PhiloxRandom, double> Normal;\n    typedef random::UniformDistribution<PhiloxRandom, double> Uniform;\n#define UNIFORM(X)                                    \\\n  if (uniform_remaining == 0) {                       \\\n    uniform_remaining = Uniform::kResultElementCount; \\\n    uniform_result = uniform(&gen);                   \\\n  }                                                   \\\n  uniform_remaining--;                                \\\n  double X = uniform_result[uniform_remaining]\n\n    // Each attempt is 95+% successful, and requires 1-2 normal + 1 uniform\n    static constexpr int kReservedSamplesPerOutput = 256;\n\n    const auto alpha_flat = alpha_t.flat<T>().data();\n    const int64_t num_alphas = alpha_t.NumElements();\n    OP_REQUIRES(ctx, num_alphas > 0,\n                errors::InvalidArgument(\n                    \"Input alpha should have non-zero element count, got: \",\n                    num_alphas));\n    auto samples_flat = samples_t->flat<T>().data();\n    PhiloxRandom rng = generator_.ReserveRandomOutputs(\n        samples_per_alpha * num_alphas, kReservedSamplesPerOutput);\n\n    // We partition work first across alphas then across samples-per-alpha to\n    // avoid a couple flops which can be done on a per-alpha basis.\n\n    auto DoWork = [samples_per_alpha, num_alphas, &rng, samples_flat,\n                   alpha_flat](int64_t start_output, int64_t limit_output) {\n      using Eigen::numext::exp;\n      using Eigen::numext::log;\n      using Eigen::numext::log1p;\n      using Eigen::numext::pow;\n\n      // Capturing \"rng\" by-value would only make a copy for the _shared_\n      // lambda.  Since we want to let each worker have its own copy, we pass\n      // \"rng\" by reference and explicitly do a copy assignment.\n\n      Normal normal;\n      Uniform uniform;\n      typename Normal::ResultType norm_result;\n      typename Uniform::ResultType uniform_result;\n      for (int64_t output_idx = start_output; output_idx < limit_output;\n           /* output_idx incremented within inner loop below */) {\n        int64_t alpha_idx = output_idx / samples_per_alpha;\n\n        // Instead of +alpha_idx for each sample, we offset the pointer once.\n        T* const samples_alpha_offset = samples_flat + alpha_idx;\n\n        // Several calculations can be done on a per-alpha basis.\n        const double alpha = static_cast<double>(alpha_flat[alpha_idx]);\n\n        DISABLE_FLOAT_EQUALITY_WARNING\n        if (alpha == static_cast<double>(1.0)) {\n          ENABLE_FLOAT_EQUALITY_WARNING\n          // Sample from an exponential distribution.\n          for (int64_t sample_idx = output_idx % samples_per_alpha;\n               sample_idx < samples_per_alpha && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            // As we want data stable regardless of sharding\n            // (including eventually on GPU), we skip on a per-sample basis.\n            PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16_t uniform_remaining = 0;\n            UNIFORM(u);\n            const double res = -log1p(-u);\n            samples_alpha_offset[sample_idx * num_alphas] = static_cast<T>(res);\n          }       // for (sample_idx)\n        } else {  // if alpha != 1.0\n          // Transformation-rejection from pairs of uniform and normal random\n          // variables. http://dl.acm.org/citation.cfm?id=358414\n          //\n          // The algorithm has an acceptance rate of ~95% for small alpha (~1),\n          // and higher accept rates for higher alpha, so runtime is\n          // O(NumAlphas * NumSamples * k) with k ~ 1 / 0.95.\n          //\n          // For alpha<1, we add one to d=alpha-1/3, and multiply the final\n          // result by uniform()^(1/alpha)\n          const bool alpha_less_than_one = alpha < 1;\n          const double d = alpha + (alpha_less_than_one ? 2.0 / 3 : -1.0 / 3);\n          const double c = 1.0 / 3 / sqrt(d);\n\n          // Compute the rest of the samples for the current alpha value.\n          for (int64_t sample_idx = output_idx % samples_per_alpha;\n               sample_idx < samples_per_alpha && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            // Since each sample may use a variable number of normal/uniform\n            // samples, and we want data stable regardless of sharding\n            // (including eventually on GPU), we skip on a per-sample basis.\n            PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16_t norm_remaining = 0;\n            int16_t uniform_remaining = 0;\n\n            // Keep trying until we don't reject a sample. In practice, we will\n            // only reject ~5% at worst, for low alpha near 1.\n            while (true) {\n              if (norm_remaining == 0) {\n                norm_remaining = Normal::kResultElementCount;\n                norm_result = normal(&gen);\n              }\n              norm_remaining--;\n              const double x = norm_result[norm_remaining];\n              double v = 1 + c * x;\n              if (v <= 0) {\n                continue;\n              }\n              v = v * v * v;\n              UNIFORM(u);\n              // The first option in the if is a \"squeeze\" short-circuit to\n              // dodge the two logs. Magic constant sourced from the paper\n              // linked above. Upward of .91 of the area covered by the log\n              // inequality is covered by the squeeze as well (larger coverage\n              // for smaller values of alpha).\n              if ((u < 1 - 0.0331 * (x * x) * (x * x)) ||\n                  (log(u) < 0.5 * x * x + d * (1 - v + log(v)))) {\n                double res = d * v;\n                if (alpha_less_than_one) {\n                  UNIFORM(b);\n                  res *= pow(b, 1 / alpha);\n                }\n                samples_alpha_offset[sample_idx * num_alphas] =\n                    static_cast<T>(res);\n                break;\n              }\n            }  // while: true\n          }    // for: sample_idx\n        }      // if (alpha == 1.0)\n      }        // for: output_idx\n    };         // DoWork\n#undef UNIFORM\n    // Two calls to log only occur for ~10% of samples reaching the log line.\n    //   2 x 100 (64-bit cycles per log) x 0.10 = ~20.\n    // Other ops: sqrt, +, *, /, %... something like 15 of these, at 3-6 cycles\n    // each = ~60.\n    // All of this /0.95 due to the rejection possibility = ~85.\n    static const int kElementCost = 85 + 2 * Normal::kElementCost +\n                                    Uniform::kElementCost +\n                                    3 * PhiloxRandom::kElementCost;\n    auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers,\n          num_alphas * samples_per_alpha, kElementCost, DoWork);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(RandomGammaOp);\n};\n\n}  // namespace\n\n#define REGISTER(TYPE)                                                         \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice, random::UniformDistribution<random::PhiloxRandom, TYPE>>;     \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice, random::NormalDistribution<random::PhiloxRandom, TYPE>>;      \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice,                                                               \\\n      random::TruncatedNormalDistribution<                                     \\\n          random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>;           \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomUniform\")                                                    \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<CPUDevice, random::UniformDistribution<                   \\\n                                    random::PhiloxRandom, TYPE>>);             \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomStandardNormal\")                                             \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<CPUDevice,                                                \\\n                     random::NormalDistribution<random::PhiloxRandom, TYPE>>); \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"TruncatedNormal\")                                                  \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<                                                          \\\n          CPUDevice,                                                           \\\n          random::TruncatedNormalDistribution<                                 \\\n              random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>);      \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomGamma\").Device(DEVICE_CPU).TypeConstraint<TYPE>(\"T\"),        \\\n      RandomGammaOp<TYPE>)\n\n#define REGISTER_FULL_INT(IntType)           \\\n  template struct functor::FillPhiloxRandom< \\\n      CPUDevice,                             \\\n      random::UniformFullIntDistribution<random::PhiloxRandom, IntType>>\n\n#define REGISTER_INT(IntType)                                                 \\\n  REGISTER_FULL_INT(IntType);                                                 \\\n  template struct functor::FillPhiloxRandom<                                  \\\n      CPUDevice, random::UniformDistribution<random::PhiloxRandom, IntType>>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomUniformInt\")                            \\\n                              .Device(DEVICE_CPU)                             \\\n                              .HostMemory(\"shape\")                            \\\n                              .HostMemory(\"minval\")                           \\\n                              .HostMemory(\"maxval\")                           \\\n                              .TypeConstraint<IntType>(\"Tout\"),               \\\n                          RandomUniformIntOp<CPUDevice, IntType>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_bfloat16(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\nTF_CALL_int32(REGISTER_INT);\nTF_CALL_int64(REGISTER_INT);\nTF_CALL_uint32(REGISTER_FULL_INT);\nTF_CALL_uint64(REGISTER_FULL_INT);\n\n#undef REGISTER\n#undef REGISTER_INT\n#undef REGISTER_FULL_INT\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER(TYPE)                                                         \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomUniform\")                                                    \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<GPUDevice, random::UniformDistribution<                   \\\n                                    random::PhiloxRandom, TYPE>>);             \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomStandardNormal\")                                             \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<GPUDevice,                                                \\\n                     random::NormalDistribution<random::PhiloxRandom, TYPE>>); \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"TruncatedNormal\")                                                  \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<                                                          \\\n          GPUDevice,                                                           \\\n          random::TruncatedNormalDistribution<                                 \\\n              random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>);\n\n#define REGISTER_FULL_INT(IntType)           \\\n  template struct functor::FillPhiloxRandom< \\\n      GPUDevice,                             \\\n      random::UniformFullIntDistribution<random::PhiloxRandom, IntType>>\n\n#define REGISTER_INT(IntType)                                                 \\\n  REGISTER_FULL_INT(IntType);                                                 \\\n  template struct functor::FillPhiloxRandom<                                  \\\n      GPUDevice, random::UniformDistribution<random::PhiloxRandom, IntType>>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomUniformInt\")                            \\\n                              .Device(DEVICE_GPU)                             \\\n                              .HostMemory(\"shape\")                            \\\n                              .HostMemory(\"minval\")                           \\\n                              .HostMemory(\"maxval\")                           \\\n                              .TypeConstraint<int32>(\"T\")                     \\\n                              .TypeConstraint<IntType>(\"Tout\"),               \\\n                          RandomUniformIntOp<GPUDevice, IntType>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\nTF_CALL_int32(REGISTER_INT);\nTF_CALL_int64(REGISTER_INT);\nTF_CALL_uint32(REGISTER_FULL_INT);\nTF_CALL_uint64(REGISTER_FULL_INT);\n\n#undef REGISTER\n#undef REGISTER_INT\n#undef REGISTER_FULL_INT\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\n}  // end namespace tensorflow\n", "/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/random_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/random_poisson_op.h\"\n\n#include <algorithm>\n#include <cmath>\n#include <limits>\n#include <memory>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/lib/random/random_distributions.h\"\n#include \"tensorflow/core/lib/random/simple_philox.h\"\n#include \"tensorflow/core/util/guarded_philox_random.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\n#if EIGEN_COMP_GNUC && __cplusplus > 199711L\n#define DISABLE_FLOAT_EQUALITY_WARNING \\\n  _Pragma(\"GCC diagnostic push\")       \\\n      _Pragma(\"GCC diagnostic ignored \\\"-Wfloat-equal\\\"\")\n#define ENABLE_FLOAT_EQUALITY_WARNING _Pragma(\"GCC diagnostic pop\")\n#else\n#define DISABLE_FLOAT_EQUALITY_WARNING\n#define ENABLE_FLOAT_EQUALITY_WARNING\n#endif\n\n#define UNIFORM(X)                                    \\\n  if (uniform_remaining == 0) {                       \\\n    uniform_remaining = Uniform::kResultElementCount; \\\n    uniform_result = uniform(&gen);                   \\\n  }                                                   \\\n  uniform_remaining--;                                \\\n  CT X = uniform_result[uniform_remaining]\n\nnamespace tensorflow {\nnamespace {\n\nstatic constexpr int kReservedSamplesPerOutput = 256;\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate <typename T>\nstruct PoissonComputeType {\n  typedef double ComputeType;\n};\n\n}  // namespace\n\nnamespace functor {\n\ntemplate <typename T, typename U>\nstruct PoissonFunctor<CPUDevice, T, U> {\n  void operator()(OpKernelContext* ctx, const CPUDevice& d, const T* rate_flat,\n                  int num_rate, int num_samples,\n                  const random::PhiloxRandom& rng, U* samples_flat) {\n    // Two different algorithms are employed, depending on the size of\n    // rate.\n    // If rate < 10, we use an algorithm attributed to Knuth:\n    // Seminumerical Algorithms. Art of Computer Programming, Volume 2.\n    //\n    // This algorithm runs in O(rate) time, and will require O(rate)\n    // uniform variates.\n    //\n    // If rate >= 10 we use a transformation-rejection algorithm from\n    // pairs of uniform random variables due to Hormann.\n    // http://www.sciencedirect.com/science/article/pii/0167668793909974\n    //\n    // The algorithm has an acceptance rate of ~89% for the smallest rate\n    // (~10),\n    // and higher accept rates for higher rate, so runtime is\n    // O(NumRate * NumSamples * k) with k ~ 1 / 0.89.\n    //\n    // We partition work first across rates then across\n    // samples-per-rate to\n    // avoid a couple flops which can be done on a per-rate basis.\n\n    typedef random::UniformDistribution<random::PhiloxRandom, CT> Uniform;\n\n    auto DoWork = [num_samples, num_rate, &rng, samples_flat, rate_flat](\n                      int64_t start_output, int64_t limit_output) {\n      // Capturing \"rng\" by value would only make a copy for the _shared_\n      // lambda.  Since we want to let each worker have its own copy, we pass\n      // \"rng\" by reference and explicitly do a copy assignment.\n\n      Uniform uniform;\n      typename Uniform::ResultType uniform_result;\n      for (int64_t output_idx = start_output; output_idx < limit_output;\n           /* output_idx incremented within inner loop below */) {\n        const int64_t rate_idx = output_idx / num_samples;\n\n        // Several calculations can be done on a per-rate basis.\n        const CT rate = CT(rate_flat[rate_idx]);\n\n        auto samples_rate_output = samples_flat + rate_idx;\n\n        if (rate < CT(10)) {\n          // Knuth's algorithm for generating Poisson random variates.\n          // Given a Poisson process, the time between events is exponentially\n          // distributed. If we have a Poisson process with rate lambda, then,\n          // the time between events is distributed Exp(lambda). If X ~\n          // Uniform(0, 1), then Y ~ Exp(lambda), where Y = -log(X) / lambda.\n          // Thus to simulate a Poisson draw, we can draw X_i ~ Exp(lambda),\n          // and N ~ Poisson(lambda), where N is the least number such that\n          // \\sum_i^N X_i > 1.\n          const CT exp_neg_rate = Eigen::numext::exp(-rate);\n\n          // Compute the rest of the samples for the current rate value.\n          for (int64_t sample_idx = output_idx % num_samples;\n               sample_idx < num_samples && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            random::PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16_t uniform_remaining = 0;\n\n            CT prod = 1;\n            CT x = 0;\n\n            // Keep trying until we surpass e^(-rate). This will take\n            // expected time proportional to rate.\n            while (true) {\n              UNIFORM(u);\n              prod = prod * u;\n              if (prod <= exp_neg_rate &&\n                  x <= CT(Eigen::NumTraits<U>::highest())) {\n                samples_rate_output[sample_idx * num_rate] = U(x);\n                break;\n              }\n              x += 1;\n            }\n          }\n          continue;\n        }\n        if (Eigen::numext::isinf(rate) && rate > CT(0)) {\n          // Fill the rest of the samples for the current rate value.\n          for (int64_t sample_idx = output_idx % num_samples;\n               sample_idx < num_samples && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            U k = Eigen::NumTraits<U>::infinity();\n            samples_rate_output[sample_idx * num_rate] = k;\n          }\n          continue;\n        }\n        // Transformed rejection due to Hormann.\n        //\n        // Given a CDF F(x), and G(x), a dominating distribution chosen such\n        // that it is close to the inverse CDF F^-1(x), compute the following\n        // steps:\n        //\n        // 1) Generate U and V, two independent random variates. Set U = U - 0.5\n        // (this step isn't strictly necessary, but is done to make some\n        // calculations symmetric and convenient. Henceforth, G is defined on\n        // [-0.5, 0.5]).\n        //\n        // 2) If V <= alpha * F'(G(U)) * G'(U), return floor(G(U)), else return\n        // to step 1. alpha is the acceptance probability of the rejection\n        // algorithm.\n        //\n        // For more details on transformed rejection, see:\n        // http://citeseer.ist.psu.edu/viewdoc/citations;jsessionid=1BEB35946CC807879F55D42512E5490C?doi=10.1.1.48.3054.\n        //\n        // The dominating distribution in this case:\n        //\n        // G(u) = (2 * a / (2 - |u|) + b) * u + c\n\n        using Eigen::numext::log;\n        const CT log_rate = log(rate);\n\n        // Constants used to define the dominating distribution. Names taken\n        // from Hormann's paper. Constants were chosen to define the tightest\n        // G(u) for the inverse Poisson CDF.\n        const CT b = CT(0.931) + CT(2.53) * Eigen::numext::sqrt(rate);\n        const CT a = CT(-0.059) + CT(0.02483) * b;\n\n        // This is the inverse acceptance rate. At a minimum (when rate = 10),\n        // this corresponds to ~75% acceptance. As the rate becomes larger, this\n        // approaches ~89%.\n        const CT inv_alpha = CT(1.1239) + CT(1.1328) / (b - CT(3.4));\n\n        // Compute the rest of the samples for the current rate value.\n        for (int64_t sample_idx = output_idx % num_samples;\n             sample_idx < num_samples && output_idx < limit_output;\n             sample_idx++, output_idx++) {\n          random::PhiloxRandom gen = rng;\n          gen.Skip(kReservedSamplesPerOutput * output_idx);\n          int16_t uniform_remaining = 0;\n\n          while (true) {\n            UNIFORM(u);\n            u -= CT(0.5);\n            UNIFORM(v);\n\n            CT u_shifted = CT(0.5) - Eigen::numext::abs(u);\n            CT k = Eigen::numext::floor((CT(2) * a / u_shifted + b) * u + rate +\n                                        CT(0.43));\n\n            if (k > CT(Eigen::NumTraits<U>::highest())) {\n              // retry in case of overflow.\n              continue;\n            }\n\n            // When alpha * f(G(U)) * G'(U) is close to 1, it is possible to\n            // find a rectangle (-u_r, u_r) x (0, v_r) under the curve, such\n            // that if v <= v_r and |u| <= u_r, then we can accept.\n            // Here v_r = 0.9227 - 3.6224 / (b - 2) and u_r = 0.43.\n            if (u_shifted >= CT(0.07) &&\n                v <= CT(0.9277) - CT(3.6224) / (b - CT(2))) {\n              samples_rate_output[sample_idx * num_rate] = U(k);\n              break;\n            }\n\n            if (k < 0 || (u_shifted < CT(0.013) && v > u_shifted)) {\n              continue;\n            }\n\n            // The expression below is equivalent to the computation of step 2)\n            // in transformed rejection (v <= alpha * F'(G(u)) * G'(u)).\n            CT s = log(v * inv_alpha / (a / (u_shifted * u_shifted) + b));\n            CT t = -rate + k * log_rate - Eigen::numext::lgamma(k + 1);\n            if (s <= t) {\n              samples_rate_output[sample_idx * num_rate] = U(k);\n              break;\n            }\n          }\n        }\n      }\n    };\n\n    // This will depend on rate.\n    // For rate < 10, on average, O(rate) calls to uniform are\n    // needed, with that\n    // many multiplies. ~10 uniform calls on average with ~25 cost op calls.\n    //\n    // Very roughly, for rate >= 10, the single call to log + call to\n    // lgamma\n    // occur for ~60 percent of samples.\n    // 2 x 100 (64-bit cycles per log) * 0.62 = ~124\n    // Additionally, there are ~10 other ops (+, *, /, ...) at 3-6 cycles each:\n    // 40 * .62  = ~25.\n    //\n    // Finally, there are several other ops that are done every loop along with\n    // 2 uniform generations along with 5 other ops at 3-6 cycles each.\n    // ~15 / .89 = ~16\n    //\n    // In total this should be ~165 + 2 * Uniform::kElementCost.\n    // We assume that half the tensor has rate < 10, so on average 6\n    // uniform's\n    // will be needed. We will upper bound the other op cost by the one for\n    // rate > 10.\n    static const int kElementCost = 165 + 6 * Uniform::kElementCost +\n                                    6 * random::PhiloxRandom::kElementCost;\n    auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers,\n          num_rate * num_samples, kElementCost, DoWork);\n  }\n\n private:\n  typedef typename PoissonComputeType<T>::ComputeType CT;\n};\n\n}  // namespace functor\n\nnamespace {\n\n// Samples from one or more Poisson distributions.\ntemplate <typename T, typename U>\nclass RandomPoissonOp : public OpKernel {\n public:\n  explicit RandomPoissonOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, generator_.Init(context));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape_t = ctx->input(0);\n    const Tensor& rate_t = ctx->input(1);\n\n    TensorShape samples_shape;\n    OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_t, &samples_shape));\n    const int64_t num_samples = samples_shape.num_elements();\n    OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(rate_t.shape()));\n\n    // Allocate output samples.\n    Tensor* samples_t = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));\n    if (num_samples == 0) return;\n\n    const auto rate_flat = rate_t.flat<T>().data();\n    const int64_t num_rate = rate_t.NumElements();\n    auto samples_flat = samples_t->flat<U>().data();\n    random::PhiloxRandom rng = generator_.ReserveRandomOutputs(\n        num_samples * num_rate, kReservedSamplesPerOutput);\n\n    functor::PoissonFunctor<CPUDevice, T, U>()(\n        ctx, ctx->eigen_device<CPUDevice>(), rate_flat, num_rate, num_samples,\n        rng, samples_flat);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(RandomPoissonOp);\n};\n}  // namespace\n\n#undef UNIFORM\n\n#define REGISTER(TYPE)                                                        \\\n  REGISTER_KERNEL_BUILDER(                                                    \\\n      Name(\"RandomPoisson\").Device(DEVICE_CPU).TypeConstraint<TYPE>(\"dtype\"), \\\n      RandomPoissonOp<TYPE, TYPE>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\n\n#define REGISTER_V2(RTYPE, OTYPE)                                   \\\n  template struct functor::PoissonFunctor<CPUDevice, RTYPE, OTYPE>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomPoissonV2\")                   \\\n                              .Device(DEVICE_CPU)                   \\\n                              .TypeConstraint<RTYPE>(\"R\")           \\\n                              .TypeConstraint<OTYPE>(\"dtype\"),      \\\n                          RandomPoissonOp<RTYPE, OTYPE>);\n\n#define REGISTER_ALL(RTYPE)        \\\n  REGISTER_V2(RTYPE, Eigen::half); \\\n  REGISTER_V2(RTYPE, float);       \\\n  REGISTER_V2(RTYPE, double);      \\\n  REGISTER_V2(RTYPE, int32);       \\\n  REGISTER_V2(RTYPE, int64_t);\n\nREGISTER_ALL(Eigen::half);\nREGISTER_ALL(float);\nREGISTER_ALL(double);\nREGISTER_ALL(int32);\nREGISTER_ALL(int64_t);\n\n#undef REGISTER_ALL\n#undef REGISTER_V2\n#undef REGISTER\n\n}  // end namespace tensorflow\n", "# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.ops.random_ops.random_gamma.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import random_seed\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.kernel_tests.random import util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.ops import random_ops\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.platform import tf_logging\n\n\nclass RandomGammaTest(test.TestCase):\n  \"\"\"This is a medium test due to the moments computation taking some time.\"\"\"\n\n  def setUp(self):\n    np.random.seed(137)\n    random_seed.set_random_seed(137)\n\n  def _Sampler(self, num, alpha, beta, dtype, use_gpu=True, seed=None):\n\n    def func():\n      with self.session(use_gpu=use_gpu, graph=ops.Graph()) as sess:\n        rng = random_ops.random_gamma(\n            [num], alpha, beta=beta, dtype=dtype, seed=seed)\n        ret = np.empty([10, num])\n        for i in range(10):\n          ret[i, :] = self.evaluate(rng)\n      return ret\n\n    return func\n\n  def testNpDtypes(self):\n    self.evaluate(random_ops.random_gamma(\n        [5], alpha=np.ones([2, 1, 3]), beta=np.ones([3]), dtype=np.float32))\n\n  def testEmptySamplingNoError(self):\n    self.evaluate(random_ops.random_gamma(\n        [5], alpha=np.ones([2, 0, 3]), beta=np.ones([3]), dtype=dtypes.float32))\n\n  @test_util.run_deprecated_v1\n  def testMomentsFloat32(self):\n    self._testMoments(dtypes.float32)\n\n  @test_util.run_deprecated_v1\n  def testMomentsFloat64(self):\n    self._testMoments(dtypes.float64)\n\n  def _testMoments(self, dt):\n    try:\n      from scipy import stats  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf_logging.warn(\"Cannot test moments: %s\" % e)\n      return\n\n    # The moments test is a z-value test.  This is the largest z-value\n    # we want to tolerate. Since the z-test approximates a unit normal\n    # distribution, it should almost definitely never exceed 6.\n    z_limit = 6.0\n\n    for stride in 0, 1, 4, 17:\n      alphas = [0.2, 1.0, 3.0]\n      if dt == dtypes.float64:\n        alphas = [0.01] + alphas\n      for alpha in alphas:\n        for scale in 9, 17:\n          # Gamma moments only defined for values less than the scale param.\n          max_moment = min(6, scale // 2)\n          sampler = self._Sampler(20000, alpha, 1 / scale, dt, seed=12345)\n          z_scores = util.test_moment_matching(\n              sampler(),\n              max_moment,\n              stats.gamma(alpha, scale=scale),\n              stride=stride,\n          )\n          self.assertAllLess(z_scores, z_limit)\n\n  def _testZeroDensity(self, alpha):\n    \"\"\"Zero isn't in the support of the gamma distribution.\n\n    But quantized floating point math has its limits.\n    TODO(bjp): Implement log-gamma sampler for small-shape distributions.\n\n    Args:\n      alpha: float shape value to test\n    \"\"\"\n    try:\n      from scipy import stats  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf_logging.warn(\"Cannot test zero density proportions: %s\" % e)\n      return\n    allowable_zeros = {\n        dtypes.float16: stats.gamma(alpha).cdf(np.finfo(np.float16).tiny),\n        dtypes.float32: stats.gamma(alpha).cdf(np.finfo(np.float32).tiny),\n        dtypes.float64: stats.gamma(alpha).cdf(np.finfo(np.float64).tiny)\n    }\n    failures = []\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sampler = self._Sampler(10000, alpha, 1.0, dt, seed=12345)\n      x = sampler()\n      allowable = allowable_zeros[dt] * x.size\n      allowable = allowable * 2 if allowable < 10 else allowable * 1.05\n      if np.sum(x <= 0) > allowable:\n        failures += [dt]\n    self.assertEqual([], failures)\n\n  def testNonZeroSmallShape(self):\n    self._testZeroDensity(0.01)\n\n  def testNonZeroSmallishShape(self):\n    self._testZeroDensity(0.35)\n\n  # Asserts that different trials (1000 samples per trial) is unlikely\n  # to see the same sequence of values. Will catch buggy\n  # implementations which uses the same random number seed.\n  def testDistinct(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sampler = self._Sampler(1000, 2.0, 1.0, dt)\n      x = sampler()\n      y = sampler()\n      # Number of different samples.\n      count = (x == y).sum()\n      count_limit = 20 if dt == dtypes.float16 else 10\n      self.assertLess(count, count_limit)\n\n  # Checks that the CPU and GPU implementation returns the same results,\n  # given the same random seed\n  @test_util.run_deprecated_v1\n  def testCPUGPUMatch(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      results = {}\n      for use_gpu in [False, True]:\n        sampler = self._Sampler(1000, 0.0, 1.0, dt, use_gpu=use_gpu, seed=12345)\n        results[use_gpu] = sampler()\n      if dt == dtypes.float16:\n        self.assertAllClose(results[False], results[True], rtol=1e-3, atol=1e-3)\n      else:\n        self.assertAllClose(results[False], results[True], rtol=1e-6, atol=1e-6)\n\n  def testSeed(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sx = self._Sampler(1000, 0.0, 1.0, dt, seed=345)\n      sy = self._Sampler(1000, 0.0, 1.0, dt, seed=345)\n      self.assertAllEqual(sx(), sy())\n\n  @test_util.run_deprecated_v1\n  def testNoCSE(self):\n    \"\"\"CSE = constant subexpression eliminator.\n\n    SetIsStateful() should prevent two identical random ops from getting\n    merged.\n    \"\"\"\n    for dtype in dtypes.float16, dtypes.float32, dtypes.float64:\n      with self.cached_session():\n        rnd1 = random_ops.random_gamma([24], 2.0, dtype=dtype)\n        rnd2 = random_ops.random_gamma([24], 2.0, dtype=dtype)\n        diff = rnd2 - rnd1\n        self.assertGreater(np.linalg.norm(diff.eval()), 0.1)\n\n  @test_util.run_deprecated_v1\n  def testShape(self):\n    # Fully known shape.\n    rnd = random_ops.random_gamma([150], 2.0)\n    self.assertEqual([150], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma([150], 2.0, beta=[3.0, 4.0])\n    self.assertEqual([150, 2], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma([150], array_ops.ones([1, 2, 3]))\n    self.assertEqual([150, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma([20, 30], array_ops.ones([1, 2, 3]))\n    self.assertEqual([20, 30, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma(\n        [123], array_ops.placeholder(\n            dtypes.float32, shape=(2,)))\n    self.assertEqual([123, 2], rnd.get_shape().as_list())\n    # Partially known shape.\n    rnd = random_ops.random_gamma(\n        array_ops.placeholder(\n            dtypes.int32, shape=(1,)), array_ops.ones([7, 3]))\n    self.assertEqual([None, 7, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_gamma(\n        array_ops.placeholder(\n            dtypes.int32, shape=(3,)), array_ops.ones([9, 6]))\n    self.assertEqual([None, None, None, 9, 6], rnd.get_shape().as_list())\n    # Unknown shape.\n    rnd = random_ops.random_gamma(\n        array_ops.placeholder(dtypes.int32),\n        array_ops.placeholder(dtypes.float32))\n    self.assertIs(None, rnd.get_shape().ndims)\n    rnd = random_ops.random_gamma([50], array_ops.placeholder(dtypes.float32))\n    self.assertIs(None, rnd.get_shape().ndims)\n\n  @test_util.run_deprecated_v1\n  def testPositive(self):\n    n = int(10e3)\n    for dt in [dtypes.float16, dtypes.float32, dtypes.float64]:\n      with self.cached_session():\n        x = random_ops.random_gamma(shape=[n], alpha=0.001, dtype=dt, seed=0)\n        self.assertEqual(0, math_ops.reduce_sum(math_ops.cast(\n            math_ops.less_equal(x, 0.), dtype=dtypes.int64)).eval())\n\n  def testSizeTooLarge(self):\n    # Grappler asserts on size overflow, so this error is only caught when\n    # running eagerly.\n    if context.executing_eagerly():\n      with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                  \"overflow\"):\n        rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))\n        self.evaluate(\n            random_ops.random_gamma(\n                shape=[46902, 51188, 34063, 59195], alpha=rate))\n\nif __name__ == \"__main__\":\n  test.main()\n", "# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.ops.random_ops.random_poisson.\"\"\"\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.kernel_tests.random import util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import random_ops\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.platform import tf_logging\n\n# All supported dtypes for random_poisson().\n_SUPPORTED_DTYPES = (dtypes.float16, dtypes.float32, dtypes.float64,\n                     dtypes.int32, dtypes.int64)\n\n\nclass RandomPoissonTest(test.TestCase):\n  \"\"\"This is a large test due to the moments computation taking some time.\"\"\"\n\n  def _Sampler(self, num, lam, dtype, use_gpu, seed=None):\n\n    def func():\n      with self.session(use_gpu=use_gpu, graph=ops.Graph()) as sess:\n        rng = random_ops.random_poisson(lam, [num], dtype=dtype, seed=seed)\n        ret = np.empty([10, num])\n        for i in range(10):\n          ret[i, :] = self.evaluate(rng)\n      return ret\n\n    return func\n\n  def testMoments(self):\n    try:\n      from scipy import stats  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf_logging.warn(\"Cannot test moments: %s\", e)\n      return\n\n    # The moments test is a z-value test.  This is the largest z-value\n    # we want to tolerate. Since the z-test approximates a unit normal\n    # distribution, it should almost definitely never exceed 6.\n    z_limit = 6.0\n    for dt in _SUPPORTED_DTYPES:\n      # Test when lam < 10 and when lam >= 10\n      for stride in 0, 4, 10:\n        for lam in (3., 20):\n          max_moment = 5\n          sampler = self._Sampler(10000, lam, dt, use_gpu=False, seed=12345)\n          z_scores = util.test_moment_matching(\n              sampler(),\n              max_moment,\n              stats.poisson(lam),\n              stride=stride,\n          )\n          self.assertAllLess(z_scores, z_limit)\n\n  # Checks that the CPU and GPU implementation returns the same results,\n  # given the same random seed\n  @test_util.run_deprecated_v1\n  def testCPUGPUMatch(self):\n    for dt in _SUPPORTED_DTYPES:\n      results = {}\n      for use_gpu in [False, True]:\n        sampler = self._Sampler(1000, 1.0, dt, use_gpu=use_gpu, seed=12345)\n        results[use_gpu] = sampler()\n      if dt == dtypes.float16:\n        self.assertAllClose(results[False], results[True], rtol=1e-3, atol=1e-3)\n      else:\n        self.assertAllClose(results[False], results[True], rtol=1e-6, atol=1e-6)\n\n  @test_util.run_deprecated_v1\n  def testSeed(self):\n    for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n      sx = self._Sampler(1000, 1.0, dt, use_gpu=True, seed=345)\n      sy = self._Sampler(1000, 1.0, dt, use_gpu=True, seed=345)\n      self.assertAllEqual(sx(), sy())\n\n  @test_util.run_deprecated_v1\n  def testNoCSE(self):\n    \"\"\"CSE = constant subexpression eliminator.\n\n    SetIsStateful() should prevent two identical random ops from getting\n    merged.\n    \"\"\"\n    for dtype in dtypes.float16, dtypes.float32, dtypes.float64:\n      with self.cached_session():\n        rnd1 = random_ops.random_poisson(2.0, [24], dtype=dtype)\n        rnd2 = random_ops.random_poisson(2.0, [24], dtype=dtype)\n        diff = rnd2 - rnd1\n        # Since these are all positive integers, the norm will\n        # be at least 1 if they are different.\n        self.assertGreaterEqual(np.linalg.norm(diff.eval()), 1)\n\n  def testZeroShape(self):\n    with self.cached_session():\n      rnd = random_ops.random_poisson([], [], seed=12345)\n      self.assertEqual([0], rnd.get_shape().as_list())\n      self.assertAllClose(np.array([], dtype=np.float32), self.evaluate(rnd))\n\n  @test_util.run_deprecated_v1\n  def testShape(self):\n    # Fully known shape\n    rnd = random_ops.random_poisson(2.0, [150], seed=12345)\n    self.assertEqual([150], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([1, 2, 3]),\n        shape=[150],\n        seed=12345)\n    self.assertEqual([150, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([1, 2, 3]),\n        shape=[20, 30],\n        seed=12345)\n    self.assertEqual([20, 30, 1, 2, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32, shape=(2,)),\n        shape=[12],\n        seed=12345)\n    self.assertEqual([12, 2], rnd.get_shape().as_list())\n    # Partially known shape.\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([7, 3]),\n        shape=array_ops.placeholder(dtypes.int32, shape=(1,)),\n        seed=12345)\n    self.assertEqual([None, 7, 3], rnd.get_shape().as_list())\n    rnd = random_ops.random_poisson(\n        lam=array_ops.ones([9, 6]),\n        shape=array_ops.placeholder(dtypes.int32, shape=(3,)),\n        seed=12345)\n    self.assertEqual([None, None, None, 9, 6], rnd.get_shape().as_list())\n    # Unknown shape.\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32),\n        shape=array_ops.placeholder(dtypes.int32),\n        seed=12345)\n    self.assertIs(None, rnd.get_shape().ndims)\n    rnd = random_ops.random_poisson(\n        lam=array_ops.placeholder(dtypes.float32),\n        shape=[50],\n        seed=12345)\n    self.assertIs(None, rnd.get_shape().ndims)\n\n  @test_util.run_deprecated_v1\n  def testDTypeCombinationsV2(self):\n    \"\"\"Tests random_poisson_v2() for all supported dtype combinations.\"\"\"\n    with self.cached_session():\n      for lam_dt in _SUPPORTED_DTYPES:\n        for out_dt in _SUPPORTED_DTYPES:\n          random_ops.random_poisson(\n              constant_op.constant([1], dtype=lam_dt), [10],\n              dtype=out_dt).eval()\n\n  @test_util.run_deprecated_v1\n  def testInfRate(self):\n    sample = random_ops.random_poisson(shape=[2], lam=np.inf)\n    self.assertAllEqual([np.inf, np.inf], self.evaluate(sample))\n\n  def testSizeTooLarge(self):\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                \"overflow\"):\n      rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))\n      self.evaluate(\n          random_ops.random_poisson(\n              shape=[46902, 51188, 34063, 59195], lam=rate))\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/random_op.cc", "tensorflow/core/kernels/random_poisson_op.cc", "tensorflow/python/kernel_tests/random/random_gamma_test.py", "tensorflow/python/kernel_tests/random/random_poisson_test.py"], "buggy_code_start_loc": [169, 299, 18, 19], "buggy_code_end_loc": [170, 301, 218, 173], "fixing_code_start_loc": [169, 299, 19, 20], "fixing_code_end_loc": [170, 301, 232, 183], "type": "CWE-617", "message": "TensorFlow is an open source platform for machine learning. When `tf.random.gamma` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit 552bfced6ce4809db5f3ca305f60ff80dd40c5a3. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-36004", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-16T23:15:10.880", "lastModified": "2022-09-20T14:42:28.777", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. When `tf.random.gamma` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit 552bfced6ce4809db5f3ca305f60ff80dd40c5a3. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. Cuando \"tf.random.gamma\" recibe una forma y tasas de entrada grandes, da un fallo de \"CHECK\" que puede desencadenar un ataque de denegaci\u00f3n de servicio. Hemos parcheado el problema en el commit 552bfced6ce4809db5f3ca305f60ff80dd40c5a3 de GitHub. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.10.0. Tambi\u00e9n seleccionaremos este compromiso en TensorFlow versi\u00f3n 2.9.1, TensorFlow versi\u00f3n 2.8.1, y TensorFlow versi\u00f3n 2.7.2, ya que estos tambi\u00e9n est\u00e1n afectados y todav\u00eda est\u00e1n en el rango admitido. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-617"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.2", "matchCriteriaId": "C6622D95-1C86-45C5-AB55-E6EEEA0996DF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.8.0", "versionEndExcluding": "2.8.1", "matchCriteriaId": "0F9D273D-02DC-441E-AA91-EAC8DEAA4B44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.9.0", "versionEndExcluding": "2.9.1", "matchCriteriaId": "FE4F8A81-6CC2-4F7F-9602-C170FDD926E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc0:*:*:*:*:*:*", "matchCriteriaId": "1DBFBCE2-0A01-4575-BE45-6775ABFB8B28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc1:*:*:*:*:*:*", "matchCriteriaId": "89806CF9-E423-4CA6-A01A-8175C260CB24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc2:*:*:*:*:*:*", "matchCriteriaId": "F2B80690-A257-4E16-BD27-9AE045BC56ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc3:*:*:*:*:*:*", "matchCriteriaId": "F335F9A4-5AB8-4E53-BC18-E01F7C653E5E"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3"}}