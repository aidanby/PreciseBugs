{"buggy_code": ["define([\n\t\"require\",\n\t\"dojo/_base/declare\", // declare\n\t\"dojo/dom-attr\", // domAttr.get\n\t\"dojo/keys\", // keys.ENTER\n\t\"dojo/_base/lang\", // lang.delegate lang.hitch lang.trim\n\t\"dojo/on\",\n\t\"dojo/sniff\", // has(\"ie\")\n\t\"dojo/query\", // query\n\t\"dojo/string\", // string.substitute\n\t\"../_Plugin\",\n\t\"../../form/DropDownButton\",\n\t\"../range\"\n], function(require, declare, domAttr, keys, lang, on, has, query, string,\n\t_Plugin, DropDownButton, rangeapi){\n\n\t// module:\n\t//\t\tdijit/_editor/plugins/LinkDialog\n\n\tvar LinkDialog = declare(\"dijit._editor.plugins.LinkDialog\", _Plugin, {\n\t\t// summary:\n\t\t//\t\tThis plugin provides the basis for an 'anchor' (link) dialog and an extension of it\n\t\t//\t\tprovides the image link dialog.\n\t\t// description:\n\t\t//\t\tThe command provided by this plugin is:\n\t\t//\n\t\t//\t\t- createLink\n\n\t\t// Override _Plugin.buttonClass.   This plugin is controlled by a DropDownButton\n\t\t// (which triggers a TooltipDialog).\n\t\tbuttonClass: DropDownButton,\n\n\t\t// Override _Plugin.useDefaultCommand... processing is handled by this plugin, not by dijit/Editor.\n\t\tuseDefaultCommand: false,\n\n\t\t// urlRegExp: [protected] String\n\t\t//\t\tUsed for validating input as correct URL.  While file:// urls are not terribly\n\t\t//\t\tuseful, they are technically valid.\n\t\turlRegExp: \"((https?|ftps?|file)\\\\://|\\./|\\.\\./|/|)(/[a-zA-Z]{1,1}:/|)(((?:(?:[\\\\da-zA-Z](?:[-\\\\da-zA-Z]{0,61}[\\\\da-zA-Z])?)\\\\.)*(?:[a-zA-Z](?:[-\\\\da-zA-Z]{0,80}[\\\\da-zA-Z])?)\\\\.?)|(((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.){3}(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])|(0[xX]0*[\\\\da-fA-F]?[\\\\da-fA-F]\\\\.){3}0[xX]0*[\\\\da-fA-F]?[\\\\da-fA-F]|(0+[0-3][0-7][0-7]\\\\.){3}0+[0-3][0-7][0-7]|(0|[1-9]\\\\d{0,8}|[1-3]\\\\d{9}|4[01]\\\\d{8}|42[0-8]\\\\d{7}|429[0-3]\\\\d{6}|4294[0-8]\\\\d{5}|42949[0-5]\\\\d{4}|429496[0-6]\\\\d{3}|4294967[01]\\\\d{2}|42949672[0-8]\\\\d|429496729[0-5])|0[xX]0*[\\\\da-fA-F]{1,8}|([\\\\da-fA-F]{1,4}\\\\:){7}[\\\\da-fA-F]{1,4}|([\\\\da-fA-F]{1,4}\\\\:){6}((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.){3}(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])))(\\\\:\\\\d+)?(/(?:[^?#\\\\s/]+/)*(?:[^?#\\\\s/]{0,}(?:\\\\?[^?#\\\\s/]*)?(?:#.*)?)?)?\",\n\n\t\t// emailRegExp: [protected] String\n\t\t//\t\tUsed for validating input as correct email address.  Taken from dojox.validate\n\t\temailRegExp: \"<?(mailto\\\\:)([!#-'*+\\\\-\\\\/-9=?A-Z^-~]+[.])*[!#-'*+\\\\-\\\\/-9=?A-Z^-~]+\" /*username*/ + \"@\" +\n\t\t\t\"((?:(?:[\\\\da-zA-Z](?:[-\\\\da-zA-Z]{0,61}[\\\\da-zA-Z])?)\\\\.)+(?:[a-zA-Z](?:[-\\\\da-zA-Z]{0,6}[\\\\da-zA-Z])?)\\\\.?)|localhost|^[^-][a-zA-Z0-9_-]*>?\", // host.\n\n\t\t// htmlTemplate: [protected] String\n\t\t//\t\tString used for templating the HTML to insert at the desired point.\n\t\thtmlTemplate: \"<a href=\\\"${urlInput}\\\" _djrealurl=\\\"${urlInput}\\\"\" +\n\t\t\t\" target=\\\"${targetSelect}\\\"\" +\n\t\t\t\">${textInput}</a>\",\n\n\t\t// tag: [protected] String\n\t\t//\t\tTag used for the link type.\n\t\ttag: \"a\",\n\n\t\t// _hostRxp [private] RegExp\n\t\t//\t\tRegular expression used to validate url fragments (ip address, hostname, etc)\n\t\t_hostRxp: /^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$/,\n\n\t\t// _userAtRxp [private] RegExp\n\t\t//\t\tRegular expression used to validate e-mail address fragment.\n\t\t_userAtRxp: /^([!#-'*+\\-\\/-9=?A-Z^-~]+[.])*[!#-'*+\\-\\/-9=?A-Z^-~]+@/i,\n\n\t\t// linkDialogTemplate: [protected] String\n\t\t//\t\tTemplate for contents of TooltipDialog to pick URL\n\t\tlinkDialogTemplate: [\n\t\t\t\"<table role='presentation'><tr><td>\",\n\t\t\t\"<label for='${id}_urlInput'>${url}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<input data-dojo-type='dijit.form.ValidationTextBox' required='true' \" +\n\t\t\t\t\"id='${id}_urlInput' name='urlInput' data-dojo-props='intermediateChanges:true'/>\",\n\t\t\t\"</td></tr><tr><td>\",\n\t\t\t\"<label for='${id}_textInput'>${text}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<input data-dojo-type='dijit.form.ValidationTextBox' required='true' id='${id}_textInput' \" +\n\t\t\t\t\"name='textInput' data-dojo-props='intermediateChanges:true'/>\",\n\t\t\t\"</td></tr><tr><td>\",\n\t\t\t\"<label for='${id}_targetSelect'>${target}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<select id='${id}_targetSelect' name='targetSelect' data-dojo-type='dijit.form.Select'>\",\n\t\t\t\"<option selected='selected' value='_self'>${currentWindow}</option>\",\n\t\t\t\"<option value='_blank'>${newWindow}</option>\",\n\t\t\t\"<option value='_top'>${topWindow}</option>\",\n\t\t\t\"<option value='_parent'>${parentWindow}</option>\",\n\t\t\t\"</select>\",\n\t\t\t\"</td></tr><tr><td colspan='2'>\",\n\t\t\t\"<button data-dojo-type='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>\",\n\t\t\t\"<button data-dojo-type='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>\",\n\t\t\t\"</td></tr></table>\"\n\t\t].join(\"\"),\n\n\t\t_initButton: function(){\n\t\t\tthis.inherited(arguments);\n\n\t\t\t// Setup to lazy create TooltipDialog first time the button is clicked\n\t\t\tthis.button.loadDropDown = lang.hitch(this, \"_loadDropDown\");\n\n\t\t\tthis._connectTagEvents();\n\t\t},\n\t\t_loadDropDown: function(callback){\n\t\t\t// Called the first time the button is pressed.  Initialize TooltipDialog.\n\t\t\trequire([\n\t\t\t\t\"dojo/i18n\", // i18n.getLocalization\n\t\t\t\t\"../../TooltipDialog\",\n\t\t\t\t\"../../registry\", // registry.byId, registry.getUniqueId\n\t\t\t\t\"../../form/Button\", // used by template\n\t\t\t\t\"../../form/Select\", // used by template\n\t\t\t\t\"../../form/ValidationTextBox\", // used by template\n\t\t\t\t\"dojo/i18n!../../nls/common\",\n\t\t\t\t\"dojo/i18n!../nls/LinkDialog\"\n\t\t\t], lang.hitch(this, function(i18n, TooltipDialog, registry){\n\t\t\t\tvar _this = this;\n\t\t\t\tthis.tag = this.command == 'insertImage' ? 'img' : 'a';\n\t\t\t\tvar messages = lang.delegate(i18n.getLocalization(\"dijit\", \"common\", this.lang),\n\t\t\t\t\ti18n.getLocalization(\"dijit._editor\", \"LinkDialog\", this.lang));\n\t\t\t\tvar dropDown = (this.dropDown = this.button.dropDown = new TooltipDialog({\n\t\t\t\t\ttitle: messages[this.command + \"Title\"],\n\t\t\t\t\townerDocument: this.editor.ownerDocument,\n\t\t\t\t\tdir: this.editor.dir,\n\t\t\t\t\texecute: lang.hitch(this, \"setValue\"),\n\t\t\t\t\tonOpen: function(){\n\t\t\t\t\t\t_this._onOpenDialog();\n\t\t\t\t\t\tTooltipDialog.prototype.onOpen.apply(this, arguments);\n\t\t\t\t\t},\n\t\t\t\t\tonCancel: function(){\n\t\t\t\t\t\tsetTimeout(lang.hitch(_this, \"_onCloseDialog\"), 0);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tmessages.urlRegExp = this.urlRegExp;\n\t\t\t\tmessages.id = registry.getUniqueId(this.editor.id);\n\t\t\t\tthis._uniqueId = messages.id;\n\t\t\t\tthis._setContent(dropDown.title +\n\t\t\t\t\t\"<div style='border-bottom: 1px black solid;padding-bottom:2pt;margin-bottom:4pt'></div>\" +\n\t\t\t\t\tstring.substitute(this.linkDialogTemplate, messages));\n\t\t\t\tdropDown.startup();\n\t\t\t\tthis._urlInput = registry.byId(this._uniqueId + \"_urlInput\");\n\t\t\t\tthis._textInput = registry.byId(this._uniqueId + \"_textInput\");\n\t\t\t\tthis._setButton = registry.byId(this._uniqueId + \"_setButton\");\n\t\t\t\tthis.own(registry.byId(this._uniqueId + \"_cancelButton\").on(\"click\", lang.hitch(this.dropDown, \"onCancel\")));\n\t\t\t\tif(this._urlInput){\n\t\t\t\t\tthis.own(this._urlInput.on(\"change\", lang.hitch(this, \"_checkAndFixInput\")));\n\t\t\t\t}\n\t\t\t\tif(this._textInput){\n\t\t\t\t\tthis.own(this._textInput.on(\"change\", lang.hitch(this, \"_checkAndFixInput\")));\n\t\t\t\t}\n\n\t\t\t\t// Build up the dual check for http/https/file:, and mailto formats.\n\t\t\t\tthis._urlRegExp = new RegExp(\"^\" + this.urlRegExp + \"$\", \"i\");\n\t\t\t\tthis._emailRegExp = new RegExp(\"^\" + this.emailRegExp + \"$\", \"i\");\n\t\t\t\tthis._urlInput.isValid = lang.hitch(this, function(){\n\t\t\t\t\t// Function over-ride of isValid to test if the input matches a url or a mailto style link.\n\t\t\t\t\tvar value = this._urlInput.get(\"value\");\n\t\t\t\t\treturn this._urlRegExp.test(value) || this._emailRegExp.test(value);\n\t\t\t\t});\n\n\t\t\t\t// Listen for enter and execute if valid.\n\t\t\t\tthis.own(on(dropDown.domNode, \"keydown\", lang.hitch(this, lang.hitch(this, function(e){\n\t\t\t\t\tif(e && e.keyCode == keys.ENTER && !e.shiftKey && !e.metaKey && !e.ctrlKey && !e.altKey){\n\t\t\t\t\t\tif(!this._setButton.get(\"disabled\")){\n\t\t\t\t\t\t\tdropDown.onExecute();\n\t\t\t\t\t\t\tdropDown.execute(dropDown.get('value'));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}))));\n\n\t\t\t\tcallback();\n\t\t\t}));\n\t\t},\n\n\t\t_checkAndFixInput: function(){\n\t\t\t// summary:\n\t\t\t//\t\tA function to listen for onChange events and test the input contents\n\t\t\t//\t\tfor valid information, such as valid urls with http/https/ftp and if\n\t\t\t//\t\tnot present, try and guess if the input url is relative or not, and if\n\t\t\t//\t\tnot, append http:// to it.  Also validates other fields as determined by\n\t\t\t//\t\tthe internal _isValid function.\n\t\t\tvar self = this;\n\t\t\tvar url = this._urlInput.get(\"value\");\n\t\t\tvar fixupUrl = function(url){\n\t\t\t\tvar appendHttp = false;\n\t\t\t\tvar appendMailto = false;\n\t\t\t\tif(url && url.length > 1){\n\t\t\t\t\turl = lang.trim(url);\n\t\t\t\t\tif(url.indexOf(\"mailto:\") !== 0){\n\t\t\t\t\t\tif(url.indexOf(\"/\") > 0){\n\t\t\t\t\t\t\tif(url.indexOf(\"://\") === -1){\n\t\t\t\t\t\t\t\t// Check that it doesn't start with /, ./, or ../, which would\n\t\t\t\t\t\t\t\t// imply 'target server relativeness'\n\t\t\t\t\t\t\t\tif(url.charAt(0) !== '/' && url.indexOf(\"./\") && url.indexOf(\"../\") !== 0){\n\t\t\t\t\t\t\t\t\tif(self._hostRxp.test(url)){\n\t\t\t\t\t\t\t\t\t\tappendHttp = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else if(self._userAtRxp.test(url)){\n\t\t\t\t\t\t\t// If it looks like a foo@, append a mailto.\n\t\t\t\t\t\t\tappendMailto = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(appendHttp){\n\t\t\t\t\tself._urlInput.set(\"value\", \"http://\" + url);\n\t\t\t\t}\n\t\t\t\tif(appendMailto){\n\t\t\t\t\tself._urlInput.set(\"value\", \"mailto:\" + url);\n\t\t\t\t}\n\t\t\t\tself._setButton.set(\"disabled\", !self._isValid());\n\t\t\t};\n\t\t\tif(this._delayedCheck){\n\t\t\t\tclearTimeout(this._delayedCheck);\n\t\t\t\tthis._delayedCheck = null;\n\t\t\t}\n\t\t\tthis._delayedCheck = setTimeout(function(){\n\t\t\t\tfixupUrl(url);\n\t\t\t}, 250);\n\t\t},\n\n\t\t_connectTagEvents: function(){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ridable function that connects tag specific events.\n\t\t\tthis.editor.onLoadDeferred.then(lang.hitch(this, function(){\n\t\t\t\tthis.own(on(this.editor.editNode, \"mouseup\", lang.hitch(this, \"_onMouseUp\")));\n\t\t\t\tthis.own(on(this.editor.editNode, \"dblclick\", lang.hitch(this, \"_onDblClick\")));\n\t\t\t}));\n\t\t},\n\n\t\t_isValid: function(){\n\t\t\t// summary:\n\t\t\t//\t\tInternal function to allow validating of the inputs\n\t\t\t//\t\tfor a link to determine if set should be disabled or not\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\treturn this._urlInput.isValid() && this._textInput.isValid();\n\t\t},\n\n\t\t_setContent: function(staticPanel){\n\t\t\t// summary:\n\t\t\t//\t\tHelper for _initButton above.   Not sure why it's a separate method.\n\t\t\tthis.dropDown.set({\n\t\t\t\tparserScope: \"dojo\", // make parser search for dojoType/data-dojo-type even if page is multi-version\n\t\t\t\tcontent: staticPanel\n\t\t\t});\n\t\t},\n\n\t\t_checkValues: function(args){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to check the values in args and 'fix' them up as needed.\n\t\t\t// args: Object\n\t\t\t//\t\tContent being set.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\tif(args && args.urlInput){\n\t\t\t\targs.urlInput = args.urlInput.replace(/\"/g, \"&quot;\");\n\t\t\t}\n\t\t\treturn args;\n\t\t},\n\n\t\t_createlinkEnabledImpl: function() {\n\t\t\t// summary:\n\t\t\t//\t\tThis function implements the test for if the create link\n\t\t\t//\t\tcommand should be enabled or not. This plugin supports\n\t\t\t//\t\tlink creation even without selected text.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\treturn true;\n\t\t},\n\n\t\tsetValue: function(args){\n\t\t\t// summary:\n\t\t\t//\t\tCallback from the dialog when user presses \"set\" button.\n\t\t\t// tags:\n\t\t\t//\t\tprivate\n\n\t\t\t// TODO: prevent closing popup if the text is empty\n\t\t\tthis._onCloseDialog();\n\t\t\tif(has(\"ie\") < 9){ //see #4151\n\t\t\t\tvar sel = rangeapi.getSelection(this.editor.window);\n\t\t\t\tvar range = sel.getRangeAt(0);\n\t\t\t\tvar a = range.endContainer;\n\t\t\t\tif(a.nodeType === 3){\n\t\t\t\t\t// Text node, may be the link contents, so check parent.\n\t\t\t\t\t// This plugin doesn't really support nested HTML elements\n\t\t\t\t\t// in the link, it assumes all link content is text.\n\t\t\t\t\ta = a.parentNode;\n\t\t\t\t}\n\t\t\t\tif(a && (a.nodeName && a.nodeName.toLowerCase() !== this.tag)){\n\t\t\t\t\t// Still nothing, one last thing to try on IE, as it might be 'img'\n\t\t\t\t\t// and thus considered a control.\n\t\t\t\t\ta = this.editor.selection.getSelectedElement(this.tag);\n\t\t\t\t}\n\t\t\t\tif(a && (a.nodeName && a.nodeName.toLowerCase() === this.tag)){\n\t\t\t\t\t// Okay, we do have a match.  IE, for some reason, sometimes pastes before\n\t\t\t\t\t// instead of removing the targeted paste-over element, so we unlink the\n\t\t\t\t\t// old one first.  If we do not the <a> tag remains, but it has no content,\n\t\t\t\t\t// so isn't readily visible (but is wrong for the action).\n\t\t\t\t\tif(this.editor.queryCommandEnabled(\"unlink\")){\n\t\t\t\t\t\t// Select all the link children, then unlink.  The following insert will\n\t\t\t\t\t\t// then replace the selected text.\n\t\t\t\t\t\tthis.editor.selection.selectElementChildren(a);\n\t\t\t\t\t\tthis.editor.execCommand(\"unlink\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// make sure values are properly escaped, etc.\n\t\t\targs = this._checkValues(args);\n\t\t\tthis.editor.execCommand('inserthtml',\n\t\t\t\tstring.substitute(this.htmlTemplate, args));\n\n\t\t\t// IE sometimes leaves a blank link, so we need to fix it up.\n\t\t\t// Go ahead and do this for everyone just to avoid blank links\n\t\t\t// in the page.\n\t\t\tquery(\"a\", this.editor.document).forEach(function(a){\n\t\t\t\tif(!a.innerHTML && !domAttr.has(a, \"name\")){\n\t\t\t\t\t// Remove empty anchors that do not have \"name\" set.\n\t\t\t\t\t// Empty ones with a name set could be a hidden hash\n\t\t\t\t\t// anchor.\n\t\t\t\t\ta.parentNode.removeChild(a);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\t_onCloseDialog: function(){\n\t\t\t// summary:\n\t\t\t//\t\tHandler for close event on the dialog\n\n\t\t\tif(this.editor.focused){\n\t\t\t\t// put focus back in the edit area, unless the dialog closed because the user clicked somewhere else\n\t\t\t\tthis.editor.focus();\n\t\t\t}\n\t\t},\n\n\t\t_getCurrentValues: function(a){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ride for getting the values to set in the dropdown.\n\t\t\t// a:\n\t\t\t//\t\tThe anchor/link to process for data for the dropdown.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\tvar url, text, target;\n\t\t\tif(a && a.tagName.toLowerCase() === this.tag){\n\t\t\t\turl = a.getAttribute('_djrealurl') || a.getAttribute('href');\n\t\t\t\ttarget = a.getAttribute('target') || \"_self\";\n\t\t\t\ttext = a.textContent || a.innerText;\n\t\t\t\tthis.editor.selection.selectElement(a, true);\n\t\t\t}else{\n\t\t\t\ttext = this.editor.selection.getSelectedText();\n\t\t\t}\n\t\t\treturn {urlInput: url || '', textInput: text || '', targetSelect: target || ''}; //Object;\n\t\t},\n\n\t\t_onOpenDialog: function(){\n\t\t\t// summary:\n\t\t\t//\t\tHandler for when the dialog is opened.\n\t\t\t//\t\tIf the caret is currently in a URL then populate the URL's info into the dialog.\n\t\t\tvar a, b, fc;\n\t\t\tif(has(\"ie\")){\n\t\t\t\t// IE, even IE10, is difficult to select the element in, using the range unified\n\t\t\t\t// API seems to work reasonably well.\n\t\t\t\tvar sel = rangeapi.getSelection(this.editor.window);\n\t\t\t\tif(sel.rangeCount){\n\t\t\t\t\tvar range = sel.getRangeAt(0);\n\t\t\t\t\ta = range.endContainer;\n\t\t\t\t\tif(a.nodeType === 3){\n\t\t\t\t\t\t// Text node, may be the link contents, so check parent.\n\t\t\t\t\t\t// This plugin doesn't really support nested HTML elements\n\t\t\t\t\t\t// in the link, it assumes all link content is text.\n\t\t\t\t\t\ta = a.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\tif(a && (a.nodeName && a.nodeName.toLowerCase() !== this.tag)){\n\t\t\t\t\t\t// Still nothing, one last thing to try on IE, as it might be 'img'\n\t\t\t\t\t\t// and thus considered a control.\n\t\t\t\t\t\ta = this.editor.selection.getSelectedElement(this.tag);\n\t\t\t\t\t}\n\t\t\t\t\tif(!a || (a.nodeName && a.nodeName.toLowerCase() !== this.tag)){\n\t\t\t\t\t\t// Try another lookup, IE's selection is just terrible.\n\t\t\t\t\t\tb = this.editor.selection.getAncestorElement(this.tag);\n\t\t\t\t\t\tif(b && (b.nodeName && b.nodeName.toLowerCase() == this.tag)){\n\t\t\t\t\t\t\t// Looks like we found an A tag, use it and make sure just it is\n\t\t\t\t\t\t\t// selected.\n\t\t\t\t\t\t\ta = b;\n\t\t\t\t\t\t\tthis.editor.selection.selectElement(a);\n\t\t\t\t\t\t}else if(range.startContainer === range.endContainer){\n\t\t\t\t\t\t\t// STILL nothing.  Trying one more thing.  Lets look at the first child.\n\t\t\t\t\t\t\t// It might be an anchor tag in a div by itself or the like.  If it is,\n\t\t\t\t\t\t\t// we'll use it otherwise we give up.  The selection is not easily\n\t\t\t\t\t\t\t// determinable to be on an existing anchor tag.\n\t\t\t\t\t\t\tfc = range.startContainer.firstChild;\n\t\t\t\t\t\t\tif(fc && (fc.nodeName && fc.nodeName.toLowerCase() == this.tag)){\n\t\t\t\t\t\t\t\ta = fc;\n\t\t\t\t\t\t\t\tthis.editor.selection.selectElement(a);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\ta = this.editor.selection.getAncestorElement(this.tag);\n\t\t\t}\n\t\t\tthis.dropDown.reset();\n\t\t\tthis._setButton.set(\"disabled\", true);\n\t\t\tthis.dropDown.set(\"value\", this._getCurrentValues(a));\n\t\t},\n\n\t\t_onDblClick: function(e){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to define a behavior on double clicks on the element\n\t\t\t//\t\ttype this dialog edits to select it and pop up the editor\n\t\t\t//\t\tdialog.\n\t\t\t// e: Object\n\t\t\t//\t\tThe double-click event.\n\t\t\t// tags:\n\t\t\t//\t\tprotected.\n\t\t\tif(e && e.target){\n\t\t\t\tvar t = e.target;\n\t\t\t\tvar tg = t.tagName ? t.tagName.toLowerCase() : \"\";\n\t\t\t\tif(tg === this.tag && domAttr.get(t, \"href\")){\n\t\t\t\t\tvar editor = this.editor;\n\n\t\t\t\t\tthis.editor.selection.selectElement(t);\n\t\t\t\t\teditor.onDisplayChanged();\n\n\t\t\t\t\t// Call onNormalizedDisplayChange() now, rather than on timer.\n\t\t\t\t\t// On IE, when focus goes to the first <input> in the TooltipDialog, the editor loses it's selection.\n\t\t\t\t\t// Later if onNormalizedDisplayChange() gets called via the timer it will disable the LinkDialog button\n\t\t\t\t\t// (actually, all the toolbar buttons), at which point clicking the <input> will close the dialog,\n\t\t\t\t\t// since (for unknown reasons) focus.js ignores disabled controls.\n\t\t\t\t\tif(editor._updateTimer){\n\t\t\t\t\t\teditor._updateTimer.remove();\n\t\t\t\t\t\tdelete editor._updateTimer;\n\t\t\t\t\t}\n\t\t\t\t\teditor.onNormalizedDisplayChanged();\n\n\t\t\t\t\tvar button = this.button;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t// Focus shift outside the event handler.\n\t\t\t\t\t\t// IE doesn't like focus changes in event handles.\n\t\t\t\t\t\tbutton.set(\"disabled\", false);\n\t\t\t\t\t\tbutton.loadAndOpenDropDown().then(function(){\n\t\t\t\t\t\t\tif(button.dropDown.focus){\n\t\t\t\t\t\t\t\tbutton.dropDown.focus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 10);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_onMouseUp: function(){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to define a behavior on mouse up on the element\n\t\t\t//\t\ttype this dialog edits to move the cursor just outside\n\t\t\t//\t\tanchor tags when clicking on their edges.\n\t\t\t// tags:\n\t\t\t//\t\tprotected.\n\t\t\tif(has('ff')){\n\t\t\t\tvar a = this.editor.selection.getAncestorElement(this.tag);\n\t\t\t\tif(a){\n\t\t\t\t\tvar selection = rangeapi.getSelection(this.editor.window);\n\t\t\t\t\tvar range = selection.getRangeAt(0);\n\t\t\t\t\tif(range.collapsed && a.childNodes.length){\n\t\t\t\t\t\tvar test = range.cloneRange();\n\t\t\t\t\t\ttest.selectNodeContents(a.childNodes[a.childNodes.length - 1]);\n\t\t\t\t\t\ttest.setStart(a.childNodes[0], 0);\n\t\t\t\t\t\tif(range.compareBoundaryPoints(test.START_TO_START, test) !== 1){\n\t\t\t\t\t\t\t// cursor is before or at the test start\n\t\t\t\t\t\t\trange.setStartBefore(a);\n\t\t\t\t\t\t}else if(range.compareBoundaryPoints(test.END_TO_START, test) !== -1){\n\t\t\t\t\t\t\t// cursor is before or at the test end\n\t\t\t\t\t\t\trange.setStartAfter(a);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar ImgLinkDialog = declare(\"dijit._editor.plugins.ImgLinkDialog\", [LinkDialog], {\n\t\t// summary:\n\t\t//\t\tThis plugin extends LinkDialog and adds in a plugin for handling image links.\n\t\t//\t\tprovides the image link dialog.\n\t\t// description:\n\t\t//\t\tThe command provided by this plugin is:\n\t\t//\n\t\t//\t\t- insertImage\n\n\t\t// linkDialogTemplate: [protected] String\n\t\t//\t\tOver-ride for template since img dialog doesn't need target that anchor tags may.\n\t\tlinkDialogTemplate: [\n\t\t\t\"<table role='presentation'><tr><td>\",\n\t\t\t\"<label for='${id}_urlInput'>${url}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<input dojoType='dijit.form.ValidationTextBox' regExp='${urlRegExp}' \" +\n\t\t\t\t\"required='true' id='${id}_urlInput' name='urlInput' data-dojo-props='intermediateChanges:true'/>\",\n\t\t\t\"</td></tr><tr><td>\",\n\t\t\t\"<label for='${id}_textInput'>${text}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<input data-dojo-type='dijit.form.ValidationTextBox' required='false' id='${id}_textInput' \" +\n\t\t\t\t\"name='textInput' data-dojo-props='intermediateChanges:true'/>\",\n\t\t\t\"</td></tr><tr><td>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"</td></tr><tr><td colspan='2'>\",\n\t\t\t\"<button data-dojo-type='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>\",\n\t\t\t\"<button data-dojo-type='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>\",\n\t\t\t\"</td></tr></table>\"\n\t\t].join(\"\"),\n\n\t\t// htmlTemplate: [protected] String\n\t\t//\t\tString used for templating the `<img>` HTML to insert at the desired point.\n\t\thtmlTemplate: \"<img src=\\\"${urlInput}\\\" _djrealurl=\\\"${urlInput}\\\" alt=\\\"${textInput}\\\" />\",\n\n\t\t// tag: [protected] String\n\t\t//\t\tTag used for the link type (img).\n\t\ttag: \"img\",\n\n\t\t_getCurrentValues: function(img){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ride for getting the values to set in the dropdown.\n\t\t\t// a:\n\t\t\t//\t\tThe anchor/link to process for data for the dropdown.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\tvar url, text;\n\t\t\tif(img && img.tagName.toLowerCase() === this.tag){\n\t\t\t\turl = img.getAttribute('_djrealurl') || img.getAttribute('src');\n\t\t\t\ttext = img.getAttribute('alt');\n\t\t\t\tthis.editor.selection.selectElement(img, true);\n\t\t\t}else{\n\t\t\t\ttext = this.editor.selection.getSelectedText();\n\t\t\t}\n\t\t\treturn {urlInput: url || '', textInput: text || ''}; //Object\n\t\t},\n\n\t\t_isValid: function(){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ride for images.  You can have alt text of blank, it is valid.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\treturn this._urlInput.isValid();\n\t\t},\n\n\t\t_connectTagEvents: function(){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ridable function that connects tag specific events.\n\t\t\tthis.inherited(arguments);\n\t\t\tthis.editor.onLoadDeferred.then(lang.hitch(this, function(){\n\t\t\t\t// Use onmousedown instead of onclick.  Seems that IE eats the first onclick\n\t\t\t\t// to wrap it in a selector box, then the second one acts as onclick.  See #10420\n\t\t\t\tthis.own(on(this.editor.editNode, \"mousedown\", lang.hitch(this, \"_selectTag\")));\n\t\t\t}));\n\t\t},\n\n\t\t_selectTag: function(e){\n\t\t\t// summary:\n\t\t\t//\t\tA simple event handler that lets me select an image if it is clicked on.\n\t\t\t//\t\tmakes it easier to select images in a standard way across browsers.  Otherwise\n\t\t\t//\t\tselecting an image for edit becomes difficult.\n\t\t\t// e: Event\n\t\t\t//\t\tThe mousedown event.\n\t\t\t// tags:\n\t\t\t//\t\tprivate\n\t\t\tif(e && e.target){\n\t\t\t\tvar t = e.target;\n\t\t\t\tvar tg = t.tagName ? t.tagName.toLowerCase() : \"\";\n\t\t\t\tif(tg === this.tag){\n\t\t\t\t\tthis.editor.selection.selectElement(t);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_checkValues: function(args){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to check the values in args and 'fix' them up as needed\n\t\t\t//\t\t(special characters in the url or alt text)\n\t\t\t// args: Object\n\t\t\t//\t\tContent being set.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\tif(args && args.urlInput){\n\t\t\t\targs.urlInput = args.urlInput.replace(/\"/g, \"&quot;\");\n\t\t\t}\n\t\t\tif(args && args.textInput){\n\t\t\t\targs.textInput = args.textInput.replace(/\"/g, \"&quot;\");\n\t\t\t}\n\t\t\treturn args;\n\t\t},\n\n\t\t_onDblClick: function(e){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to define a behavior on double clicks on the element\n\t\t\t//\t\ttype this dialog edits to select it and pop up the editor\n\t\t\t//\t\tdialog.\n\t\t\t// e: Object\n\t\t\t//\t\tThe double-click event.\n\t\t\t// tags:\n\t\t\t//\t\tprotected.\n\t\t\tif(e && e.target){\n\t\t\t\tvar t = e.target;\n\t\t\t\tvar tg = t.tagName ? t.tagName.toLowerCase() : \"\";\n\t\t\t\tif(tg === this.tag && domAttr.get(t, \"src\")){\n\t\t\t\t\tvar editor = this.editor;\n\n\t\t\t\t\tthis.editor.selection.selectElement(t);\n\t\t\t\t\teditor.onDisplayChanged();\n\n\t\t\t\t\t// Call onNormalizedDisplayChange() now, rather than on timer.\n\t\t\t\t\t// On IE, when focus goes to the first <input> in the TooltipDialog, the editor loses it's selection.\n\t\t\t\t\t// Later if onNormalizedDisplayChange() gets called via the timer it will disable the LinkDialog button\n\t\t\t\t\t// (actually, all the toolbar buttons), at which point clicking the <input> will close the dialog,\n\t\t\t\t\t// since (for unknown reasons) focus.js ignores disabled controls.\n\t\t\t\t\tif(editor._updateTimer){\n\t\t\t\t\t\teditor._updateTimer.remove();\n\t\t\t\t\t\tdelete editor._updateTimer;\n\t\t\t\t\t}\n\t\t\t\t\teditor.onNormalizedDisplayChanged();\n\n\t\t\t\t\tvar button = this.button;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t// Focus shift outside the event handler.\n\t\t\t\t\t\t// IE doesn't like focus changes in event handles.\n\t\t\t\t\t\tbutton.set(\"disabled\", false);\n\t\t\t\t\t\tbutton.loadAndOpenDropDown().then(function(){\n\t\t\t\t\t\t\tif(button.dropDown.focus){\n\t\t\t\t\t\t\t\tbutton.dropDown.focus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Register these plugins\n\t_Plugin.registry[\"createLink\"] = function(){\n\t\treturn new LinkDialog({command: \"createLink\"});\n\t};\n\t_Plugin.registry[\"insertImage\"] = function(){\n\t\treturn new ImgLinkDialog({command: \"insertImage\"});\n\t};\n\n\n\t// Export both LinkDialog and ImgLinkDialog\n\t// TODO for 2.0: either return both classes in a hash, or split this file into two separate files.\n\t// Then the documentation for the module can be applied to the hash, and will show up in the API doc.\n\tLinkDialog.ImgLinkDialog = ImgLinkDialog;\n\treturn LinkDialog;\n});\n", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">\n\t<title>Editor Test: LinkDialog Plugin</title>\n\n\t<script type=\"text/javascript\" src=\"../boilerplate.js\"></script>\n\n\t<script type=\"text/javascript\">\n\t\trequire([\n\t\t\t\"dojo/parser\",\n\t\t\t\"dijit/Editor\",\n\t\t\t\"dijit/_editor/plugins/LinkDialog\",\n\t\t\t\"dijit/_editor/plugins/ViewSource\",\n\t\t\t\"dojo/domReady!\"\n\t\t], function(parser){\n\t\t\tparser.parse();\n\t\t});\n\t</script>\n</head>\n<body class=\"claro\" role=\"main\">\n\t<div style=\"border: 1px dotted black;\">\n\t\t<div id=\"editor\" data-dojo-type=\"dijit/Editor\" data-dojo-props='\"aria-label\":\"editor\",extraPlugins:[\"createLink\", \"insertImage\", \"viewSource\"]'>\n\t\t\t<ol>\n\t\t\t\t<li>The LinkDialog plugin is an 'example' style plugin that shows how to insert basic web links as well as\n\t\t\t\timage tags.  This plugin is intended to guide users in writing their own, more complex, link and image handlers\n\t\t\t\twhile still providing useful function.</li>\n\t\t\t</ol>\n\t\t\t<br>\n\t\t\t<div><a href=\"http://www.example.com/example.html\" target=\"_top\" id=\"exampleLink\">This is an example link in the page.</a></div>\n\t\t\t<br>\n\t\t\t<br>\n\t\t\t<div><img src=\"./sample.jpg\" alt=\"Sample Image\" id=\"exampleImage\" /></div>\n\t\t\t<br>\n\t\t\t<br>\n\t\t</div>\n\t</div>\n\n\t<p>RTL Editor:</p>\n\t<div style=\"border: 1px dotted black;\">\n\t\t<div id=\"reditor\" data-dojo-type=\"dijit/Editor\" dir=\"rtl\" data-dojo-props='\"aria-label\":\"reditor\",extraPlugins:[\"createLink\", \"insertImage\"]'>\n\t\t\t<ol>\n\t\t\t\t<li>The LinkDialog plugin is an 'example' style plugin that shows how to insert basic web links as well as\n\t\t\t\timage tags.  This plugin is intended to guide users in writing their own, more complex, link and image handlers\n\t\t\t\twhile still providing useful function.</li>\n\t\t\t</ol>\n\t\t\t<br>\n\t\t\t<div><a href=\"http://www.example.com/example.html\" target=\"_top\" id=\"rexampleLink\">This is an example link in the page.</a></div>\n\t\t\t<br>\n\t\t\t<br>\n\t\t\t<div><img src=\"./sample.jpg\" alt=\"Sample Image\" id=\"rexampleImage\" /></div>\n\t\t\t<br>\n\t\t\t<br>\n\t\t</div>\n\t</div>\n</body>\n</html>\n"], "fixing_code": ["define([\n\t\"require\",\n\t\"dojo/_base/array\",\n\t\"dojo/_base/declare\", // declare\n\t\"dojo/dom-attr\", // domAttr.get\n\t\"dojo/keys\", // keys.ENTER\n\t\"dojo/_base/lang\", // lang.delegate lang.hitch lang.trim\n\t\"dojo/on\",\n\t\"dojo/sniff\", // has(\"ie\")\n\t\"dojo/query\", // query\n\t\"dojo/string\", // string.substitute\n\t\"../_Plugin\",\n\t\"../../form/DropDownButton\",\n\t\"../range\"\n], function(require, array, declare, domAttr, keys, lang, on, has, query, string,\n\t_Plugin, DropDownButton, rangeapi){\n\n\t// module:\n\t//\t\tdijit/_editor/plugins/LinkDialog\n\n\tvar LinkDialog = declare(\"dijit._editor.plugins.LinkDialog\", _Plugin, {\n\t\t// summary:\n\t\t//\t\tThis plugin provides the basis for an 'anchor' (link) dialog and an extension of it\n\t\t//\t\tprovides the image link dialog.\n\t\t// description:\n\t\t//\t\tThe command provided by this plugin is:\n\t\t//\n\t\t//\t\t- createLink\n\n\t\t// allowUnsafeHtml: boolean\n\t\t//\t\tIf false (default), the link description will be filtered to prevent HTML content.\n\t\t//\t\tIf true no filtering is done, allowing for HTML content within the link element.\n\t\t//\t\tThe filter can be specified with the 'linkFilter' option.\n\t\tallowUnsafeHtml: false,\n\n\t\t// linkFilter: function or array of replacement pairs\n\t\t//\t\tIf 'allowUnsafeHtml' is false then this filter will be applied to the link Description value.\n\t\t//\t\tfunction: the function will be invoked with the string value of the Description field and its\n\t\t//\t\t\treturn value will be used\n\t\t//\t\tarray: each array item should be an array of two values to pass to String#replace\n\t\tlinkFilter: [\n\t\t\t[/</g, \"&lt;\"]\n\t\t],\n\n\t\t// Override _Plugin.buttonClass.   This plugin is controlled by a DropDownButton\n\t\t// (which triggers a TooltipDialog).\n\t\tbuttonClass: DropDownButton,\n\n\t\t// Override _Plugin.useDefaultCommand... processing is handled by this plugin, not by dijit/Editor.\n\t\tuseDefaultCommand: false,\n\n\t\t// urlRegExp: [protected] String\n\t\t//\t\tUsed for validating input as correct URL.  While file:// urls are not terribly\n\t\t//\t\tuseful, they are technically valid.\n\t\turlRegExp: \"((https?|ftps?|file)\\\\://|\\./|\\.\\./|/|)(/[a-zA-Z]{1,1}:/|)(((?:(?:[\\\\da-zA-Z](?:[-\\\\da-zA-Z]{0,61}[\\\\da-zA-Z])?)\\\\.)*(?:[a-zA-Z](?:[-\\\\da-zA-Z]{0,80}[\\\\da-zA-Z])?)\\\\.?)|(((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.){3}(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])|(0[xX]0*[\\\\da-fA-F]?[\\\\da-fA-F]\\\\.){3}0[xX]0*[\\\\da-fA-F]?[\\\\da-fA-F]|(0+[0-3][0-7][0-7]\\\\.){3}0+[0-3][0-7][0-7]|(0|[1-9]\\\\d{0,8}|[1-3]\\\\d{9}|4[01]\\\\d{8}|42[0-8]\\\\d{7}|429[0-3]\\\\d{6}|4294[0-8]\\\\d{5}|42949[0-5]\\\\d{4}|429496[0-6]\\\\d{3}|4294967[01]\\\\d{2}|42949672[0-8]\\\\d|429496729[0-5])|0[xX]0*[\\\\da-fA-F]{1,8}|([\\\\da-fA-F]{1,4}\\\\:){7}[\\\\da-fA-F]{1,4}|([\\\\da-fA-F]{1,4}\\\\:){6}((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.){3}(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])))(\\\\:\\\\d+)?(/(?:[^?#\\\\s/]+/)*(?:[^?#\\\\s/]{0,}(?:\\\\?[^?#\\\\s/]*)?(?:#.*)?)?)?\",\n\n\t\t// emailRegExp: [protected] String\n\t\t//\t\tUsed for validating input as correct email address.  Taken from dojox.validate\n\t\temailRegExp: \"<?(mailto\\\\:)([!#-'*+\\\\-\\\\/-9=?A-Z^-~]+[.])*[!#-'*+\\\\-\\\\/-9=?A-Z^-~]+\" /*username*/ + \"@\" +\n\t\t\t\"((?:(?:[\\\\da-zA-Z](?:[-\\\\da-zA-Z]{0,61}[\\\\da-zA-Z])?)\\\\.)+(?:[a-zA-Z](?:[-\\\\da-zA-Z]{0,6}[\\\\da-zA-Z])?)\\\\.?)|localhost|^[^-][a-zA-Z0-9_-]*>?\", // host.\n\n\t\t// htmlTemplate: [protected] String\n\t\t//\t\tString used for templating the HTML to insert at the desired point.\n\t\thtmlTemplate: \"<a href=\\\"${urlInput}\\\" _djrealurl=\\\"${urlInput}\\\"\" +\n\t\t\t\" target=\\\"${targetSelect}\\\"\" +\n\t\t\t\">${textInput}</a>\",\n\n\t\t// tag: [protected] String\n\t\t//\t\tTag used for the link type.\n\t\ttag: \"a\",\n\n\t\t// _hostRxp [private] RegExp\n\t\t//\t\tRegular expression used to validate url fragments (ip address, hostname, etc)\n\t\t_hostRxp: /^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$/,\n\n\t\t// _userAtRxp [private] RegExp\n\t\t//\t\tRegular expression used to validate e-mail address fragment.\n\t\t_userAtRxp: /^([!#-'*+\\-\\/-9=?A-Z^-~]+[.])*[!#-'*+\\-\\/-9=?A-Z^-~]+@/i,\n\n\t\t// linkDialogTemplate: [protected] String\n\t\t//\t\tTemplate for contents of TooltipDialog to pick URL\n\t\tlinkDialogTemplate: [\n\t\t\t\"<table role='presentation'><tr><td>\",\n\t\t\t\"<label for='${id}_urlInput'>${url}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<input data-dojo-type='dijit.form.ValidationTextBox' required='true' \" +\n\t\t\t\t\"id='${id}_urlInput' name='urlInput' data-dojo-props='intermediateChanges:true'/>\",\n\t\t\t\"</td></tr><tr><td>\",\n\t\t\t\"<label for='${id}_textInput'>${text}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<input data-dojo-type='dijit.form.ValidationTextBox' required='true' id='${id}_textInput' \" +\n\t\t\t\t\"name='textInput' data-dojo-props='intermediateChanges:true'/>\",\n\t\t\t\"</td></tr><tr><td>\",\n\t\t\t\"<label for='${id}_targetSelect'>${target}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<select id='${id}_targetSelect' name='targetSelect' data-dojo-type='dijit.form.Select'>\",\n\t\t\t\"<option selected='selected' value='_self'>${currentWindow}</option>\",\n\t\t\t\"<option value='_blank'>${newWindow}</option>\",\n\t\t\t\"<option value='_top'>${topWindow}</option>\",\n\t\t\t\"<option value='_parent'>${parentWindow}</option>\",\n\t\t\t\"</select>\",\n\t\t\t\"</td></tr><tr><td colspan='2'>\",\n\t\t\t\"<button data-dojo-type='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>\",\n\t\t\t\"<button data-dojo-type='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>\",\n\t\t\t\"</td></tr></table>\"\n\t\t].join(\"\"),\n\n\t\t_initButton: function(){\n\t\t\tthis.inherited(arguments);\n\n\t\t\t// Setup to lazy create TooltipDialog first time the button is clicked\n\t\t\tthis.button.loadDropDown = lang.hitch(this, \"_loadDropDown\");\n\n\t\t\tthis._connectTagEvents();\n\t\t},\n\t\t_loadDropDown: function(callback){\n\t\t\t// Called the first time the button is pressed.  Initialize TooltipDialog.\n\t\t\trequire([\n\t\t\t\t\"dojo/i18n\", // i18n.getLocalization\n\t\t\t\t\"../../TooltipDialog\",\n\t\t\t\t\"../../registry\", // registry.byId, registry.getUniqueId\n\t\t\t\t\"../../form/Button\", // used by template\n\t\t\t\t\"../../form/Select\", // used by template\n\t\t\t\t\"../../form/ValidationTextBox\", // used by template\n\t\t\t\t\"dojo/i18n!../../nls/common\",\n\t\t\t\t\"dojo/i18n!../nls/LinkDialog\"\n\t\t\t], lang.hitch(this, function(i18n, TooltipDialog, registry){\n\t\t\t\tvar _this = this;\n\t\t\t\tthis.tag = this.command == 'insertImage' ? 'img' : 'a';\n\t\t\t\tvar messages = lang.delegate(i18n.getLocalization(\"dijit\", \"common\", this.lang),\n\t\t\t\t\ti18n.getLocalization(\"dijit._editor\", \"LinkDialog\", this.lang));\n\t\t\t\tvar dropDown = (this.dropDown = this.button.dropDown = new TooltipDialog({\n\t\t\t\t\ttitle: messages[this.command + \"Title\"],\n\t\t\t\t\townerDocument: this.editor.ownerDocument,\n\t\t\t\t\tdir: this.editor.dir,\n\t\t\t\t\texecute: lang.hitch(this, \"setValue\"),\n\t\t\t\t\tonOpen: function(){\n\t\t\t\t\t\t_this._onOpenDialog();\n\t\t\t\t\t\tTooltipDialog.prototype.onOpen.apply(this, arguments);\n\t\t\t\t\t},\n\t\t\t\t\tonCancel: function(){\n\t\t\t\t\t\tsetTimeout(lang.hitch(_this, \"_onCloseDialog\"), 0);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tmessages.urlRegExp = this.urlRegExp;\n\t\t\t\tmessages.id = registry.getUniqueId(this.editor.id);\n\t\t\t\tthis._uniqueId = messages.id;\n\t\t\t\tthis._setContent(dropDown.title +\n\t\t\t\t\t\"<div style='border-bottom: 1px black solid;padding-bottom:2pt;margin-bottom:4pt'></div>\" +\n\t\t\t\t\tstring.substitute(this.linkDialogTemplate, messages));\n\t\t\t\tdropDown.startup();\n\t\t\t\tthis._urlInput = registry.byId(this._uniqueId + \"_urlInput\");\n\t\t\t\tthis._textInput = registry.byId(this._uniqueId + \"_textInput\");\n\t\t\t\tthis._setButton = registry.byId(this._uniqueId + \"_setButton\");\n\t\t\t\tthis.own(registry.byId(this._uniqueId + \"_cancelButton\").on(\"click\", lang.hitch(this.dropDown, \"onCancel\")));\n\t\t\t\tif(this._urlInput){\n\t\t\t\t\tthis.own(this._urlInput.on(\"change\", lang.hitch(this, \"_checkAndFixInput\")));\n\t\t\t\t}\n\t\t\t\tif(this._textInput){\n\t\t\t\t\tthis.own(this._textInput.on(\"change\", lang.hitch(this, \"_checkAndFixInput\")));\n\t\t\t\t}\n\n\t\t\t\t// Build up the dual check for http/https/file:, and mailto formats.\n\t\t\t\tthis._urlRegExp = new RegExp(\"^\" + this.urlRegExp + \"$\", \"i\");\n\t\t\t\tthis._emailRegExp = new RegExp(\"^\" + this.emailRegExp + \"$\", \"i\");\n\t\t\t\tthis._urlInput.isValid = lang.hitch(this, function(){\n\t\t\t\t\t// Function over-ride of isValid to test if the input matches a url or a mailto style link.\n\t\t\t\t\tvar value = this._urlInput.get(\"value\");\n\t\t\t\t\treturn this._urlRegExp.test(value) || this._emailRegExp.test(value);\n\t\t\t\t});\n\n\t\t\t\t// Listen for enter and execute if valid.\n\t\t\t\tthis.own(on(dropDown.domNode, \"keydown\", lang.hitch(this, lang.hitch(this, function(e){\n\t\t\t\t\tif(e && e.keyCode == keys.ENTER && !e.shiftKey && !e.metaKey && !e.ctrlKey && !e.altKey){\n\t\t\t\t\t\tif(!this._setButton.get(\"disabled\")){\n\t\t\t\t\t\t\tdropDown.onExecute();\n\t\t\t\t\t\t\tdropDown.execute(dropDown.get('value'));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}))));\n\n\t\t\t\tcallback();\n\t\t\t}));\n\t\t},\n\n\t\t_checkAndFixInput: function(){\n\t\t\t// summary:\n\t\t\t//\t\tA function to listen for onChange events and test the input contents\n\t\t\t//\t\tfor valid information, such as valid urls with http/https/ftp and if\n\t\t\t//\t\tnot present, try and guess if the input url is relative or not, and if\n\t\t\t//\t\tnot, append http:// to it.  Also validates other fields as determined by\n\t\t\t//\t\tthe internal _isValid function.\n\t\t\tvar self = this;\n\t\t\tvar url = this._urlInput.get(\"value\");\n\t\t\tvar fixupUrl = function(url){\n\t\t\t\tvar appendHttp = false;\n\t\t\t\tvar appendMailto = false;\n\t\t\t\tif(url && url.length > 1){\n\t\t\t\t\turl = lang.trim(url);\n\t\t\t\t\tif(url.indexOf(\"mailto:\") !== 0){\n\t\t\t\t\t\tif(url.indexOf(\"/\") > 0){\n\t\t\t\t\t\t\tif(url.indexOf(\"://\") === -1){\n\t\t\t\t\t\t\t\t// Check that it doesn't start with /, ./, or ../, which would\n\t\t\t\t\t\t\t\t// imply 'target server relativeness'\n\t\t\t\t\t\t\t\tif(url.charAt(0) !== '/' && url.indexOf(\"./\") && url.indexOf(\"../\") !== 0){\n\t\t\t\t\t\t\t\t\tif(self._hostRxp.test(url)){\n\t\t\t\t\t\t\t\t\t\tappendHttp = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else if(self._userAtRxp.test(url)){\n\t\t\t\t\t\t\t// If it looks like a foo@, append a mailto.\n\t\t\t\t\t\t\tappendMailto = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(appendHttp){\n\t\t\t\t\tself._urlInput.set(\"value\", \"http://\" + url);\n\t\t\t\t}\n\t\t\t\tif(appendMailto){\n\t\t\t\t\tself._urlInput.set(\"value\", \"mailto:\" + url);\n\t\t\t\t}\n\t\t\t\tself._setButton.set(\"disabled\", !self._isValid());\n\t\t\t};\n\t\t\tif(this._delayedCheck){\n\t\t\t\tclearTimeout(this._delayedCheck);\n\t\t\t\tthis._delayedCheck = null;\n\t\t\t}\n\t\t\tthis._delayedCheck = setTimeout(function(){\n\t\t\t\tfixupUrl(url);\n\t\t\t}, 250);\n\t\t},\n\n\t\t_connectTagEvents: function(){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ridable function that connects tag specific events.\n\t\t\tthis.editor.onLoadDeferred.then(lang.hitch(this, function(){\n\t\t\t\tthis.own(on(this.editor.editNode, \"mouseup\", lang.hitch(this, \"_onMouseUp\")));\n\t\t\t\tthis.own(on(this.editor.editNode, \"dblclick\", lang.hitch(this, \"_onDblClick\")));\n\t\t\t}));\n\t\t},\n\n\t\t_isValid: function(){\n\t\t\t// summary:\n\t\t\t//\t\tInternal function to allow validating of the inputs\n\t\t\t//\t\tfor a link to determine if set should be disabled or not\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\treturn this._urlInput.isValid() && this._textInput.isValid();\n\t\t},\n\n\t\t_setContent: function(staticPanel){\n\t\t\t// summary:\n\t\t\t//\t\tHelper for _initButton above.   Not sure why it's a separate method.\n\t\t\tthis.dropDown.set({\n\t\t\t\tparserScope: \"dojo\", // make parser search for dojoType/data-dojo-type even if page is multi-version\n\t\t\t\tcontent: staticPanel\n\t\t\t});\n\t\t},\n\n\t\t_checkValues: function(args){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to check the values in args and 'fix' them up as needed.\n\t\t\t// args: Object\n\t\t\t//\t\tContent being set.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\tif(args && args.urlInput){\n\t\t\t\targs.urlInput = args.urlInput.replace(/\"/g, \"&quot;\");\n\t\t\t}\n\t\t\tif(!this.allowUnsafeHtml && args && args.textInput){\n\t\t\t\tif(typeof this.linkFilter === 'function'){\n\t\t\t\t\targs.textInput = this.linkFilter(args.textInput);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tarray.forEach(this.linkFilter, function (currentFilter) {\n\t\t\t\t\t\targs.textInput = args.textInput.replace(currentFilter[0], currentFilter[1]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn args;\n\t\t},\n\n\t\t_createlinkEnabledImpl: function() {\n\t\t\t// summary:\n\t\t\t//\t\tThis function implements the test for if the create link\n\t\t\t//\t\tcommand should be enabled or not. This plugin supports\n\t\t\t//\t\tlink creation even without selected text.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\treturn true;\n\t\t},\n\n\t\tsetValue: function(args){\n\t\t\t// summary:\n\t\t\t//\t\tCallback from the dialog when user presses \"set\" button.\n\t\t\t// tags:\n\t\t\t//\t\tprivate\n\n\t\t\t// TODO: prevent closing popup if the text is empty\n\t\t\tthis._onCloseDialog();\n\t\t\tif(has(\"ie\") < 9){ //see #4151\n\t\t\t\tvar sel = rangeapi.getSelection(this.editor.window);\n\t\t\t\tvar range = sel.getRangeAt(0);\n\t\t\t\tvar a = range.endContainer;\n\t\t\t\tif(a.nodeType === 3){\n\t\t\t\t\t// Text node, may be the link contents, so check parent.\n\t\t\t\t\t// This plugin doesn't really support nested HTML elements\n\t\t\t\t\t// in the link, it assumes all link content is text.\n\t\t\t\t\ta = a.parentNode;\n\t\t\t\t}\n\t\t\t\tif(a && (a.nodeName && a.nodeName.toLowerCase() !== this.tag)){\n\t\t\t\t\t// Still nothing, one last thing to try on IE, as it might be 'img'\n\t\t\t\t\t// and thus considered a control.\n\t\t\t\t\ta = this.editor.selection.getSelectedElement(this.tag);\n\t\t\t\t}\n\t\t\t\tif(a && (a.nodeName && a.nodeName.toLowerCase() === this.tag)){\n\t\t\t\t\t// Okay, we do have a match.  IE, for some reason, sometimes pastes before\n\t\t\t\t\t// instead of removing the targeted paste-over element, so we unlink the\n\t\t\t\t\t// old one first.  If we do not the <a> tag remains, but it has no content,\n\t\t\t\t\t// so isn't readily visible (but is wrong for the action).\n\t\t\t\t\tif(this.editor.queryCommandEnabled(\"unlink\")){\n\t\t\t\t\t\t// Select all the link children, then unlink.  The following insert will\n\t\t\t\t\t\t// then replace the selected text.\n\t\t\t\t\t\tthis.editor.selection.selectElementChildren(a);\n\t\t\t\t\t\tthis.editor.execCommand(\"unlink\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// make sure values are properly escaped, etc.\n\t\t\targs = this._checkValues(args);\n\t\t\tthis.editor.execCommand('inserthtml',\n\t\t\t\tstring.substitute(this.htmlTemplate, args));\n\n\t\t\t// IE sometimes leaves a blank link, so we need to fix it up.\n\t\t\t// Go ahead and do this for everyone just to avoid blank links\n\t\t\t// in the page.\n\t\t\tquery(\"a\", this.editor.document).forEach(function(a){\n\t\t\t\tif(!a.innerHTML && !domAttr.has(a, \"name\")){\n\t\t\t\t\t// Remove empty anchors that do not have \"name\" set.\n\t\t\t\t\t// Empty ones with a name set could be a hidden hash\n\t\t\t\t\t// anchor.\n\t\t\t\t\ta.parentNode.removeChild(a);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\t_onCloseDialog: function(){\n\t\t\t// summary:\n\t\t\t//\t\tHandler for close event on the dialog\n\n\t\t\tif(this.editor.focused){\n\t\t\t\t// put focus back in the edit area, unless the dialog closed because the user clicked somewhere else\n\t\t\t\tthis.editor.focus();\n\t\t\t}\n\t\t},\n\n\t\t_getCurrentValues: function(a){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ride for getting the values to set in the dropdown.\n\t\t\t// a:\n\t\t\t//\t\tThe anchor/link to process for data for the dropdown.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\tvar url, text, target;\n\t\t\tif(a && a.tagName.toLowerCase() === this.tag){\n\t\t\t\turl = a.getAttribute('_djrealurl') || a.getAttribute('href');\n\t\t\t\ttarget = a.getAttribute('target') || \"_self\";\n\t\t\t\ttext = a.textContent || a.innerText;\n\t\t\t\tthis.editor.selection.selectElement(a, true);\n\t\t\t}else{\n\t\t\t\ttext = this.editor.selection.getSelectedText();\n\t\t\t}\n\t\t\treturn {urlInput: url || '', textInput: text || '', targetSelect: target || ''}; //Object;\n\t\t},\n\n\t\t_onOpenDialog: function(){\n\t\t\t// summary:\n\t\t\t//\t\tHandler for when the dialog is opened.\n\t\t\t//\t\tIf the caret is currently in a URL then populate the URL's info into the dialog.\n\t\t\tvar a, b, fc;\n\t\t\tif(has(\"ie\")){\n\t\t\t\t// IE, even IE10, is difficult to select the element in, using the range unified\n\t\t\t\t// API seems to work reasonably well.\n\t\t\t\tvar sel = rangeapi.getSelection(this.editor.window);\n\t\t\t\tif(sel.rangeCount){\n\t\t\t\t\tvar range = sel.getRangeAt(0);\n\t\t\t\t\ta = range.endContainer;\n\t\t\t\t\tif(a.nodeType === 3){\n\t\t\t\t\t\t// Text node, may be the link contents, so check parent.\n\t\t\t\t\t\t// This plugin doesn't really support nested HTML elements\n\t\t\t\t\t\t// in the link, it assumes all link content is text.\n\t\t\t\t\t\ta = a.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\tif(a && (a.nodeName && a.nodeName.toLowerCase() !== this.tag)){\n\t\t\t\t\t\t// Still nothing, one last thing to try on IE, as it might be 'img'\n\t\t\t\t\t\t// and thus considered a control.\n\t\t\t\t\t\ta = this.editor.selection.getSelectedElement(this.tag);\n\t\t\t\t\t}\n\t\t\t\t\tif(!a || (a.nodeName && a.nodeName.toLowerCase() !== this.tag)){\n\t\t\t\t\t\t// Try another lookup, IE's selection is just terrible.\n\t\t\t\t\t\tb = this.editor.selection.getAncestorElement(this.tag);\n\t\t\t\t\t\tif(b && (b.nodeName && b.nodeName.toLowerCase() == this.tag)){\n\t\t\t\t\t\t\t// Looks like we found an A tag, use it and make sure just it is\n\t\t\t\t\t\t\t// selected.\n\t\t\t\t\t\t\ta = b;\n\t\t\t\t\t\t\tthis.editor.selection.selectElement(a);\n\t\t\t\t\t\t}else if(range.startContainer === range.endContainer){\n\t\t\t\t\t\t\t// STILL nothing.  Trying one more thing.  Lets look at the first child.\n\t\t\t\t\t\t\t// It might be an anchor tag in a div by itself or the like.  If it is,\n\t\t\t\t\t\t\t// we'll use it otherwise we give up.  The selection is not easily\n\t\t\t\t\t\t\t// determinable to be on an existing anchor tag.\n\t\t\t\t\t\t\tfc = range.startContainer.firstChild;\n\t\t\t\t\t\t\tif(fc && (fc.nodeName && fc.nodeName.toLowerCase() == this.tag)){\n\t\t\t\t\t\t\t\ta = fc;\n\t\t\t\t\t\t\t\tthis.editor.selection.selectElement(a);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\ta = this.editor.selection.getAncestorElement(this.tag);\n\t\t\t}\n\t\t\tthis.dropDown.reset();\n\t\t\tthis._setButton.set(\"disabled\", true);\n\t\t\tthis.dropDown.set(\"value\", this._getCurrentValues(a));\n\t\t},\n\n\t\t_onDblClick: function(e){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to define a behavior on double clicks on the element\n\t\t\t//\t\ttype this dialog edits to select it and pop up the editor\n\t\t\t//\t\tdialog.\n\t\t\t// e: Object\n\t\t\t//\t\tThe double-click event.\n\t\t\t// tags:\n\t\t\t//\t\tprotected.\n\t\t\tif(e && e.target){\n\t\t\t\tvar t = e.target;\n\t\t\t\tvar tg = t.tagName ? t.tagName.toLowerCase() : \"\";\n\t\t\t\tif(tg === this.tag && domAttr.get(t, \"href\")){\n\t\t\t\t\tvar editor = this.editor;\n\n\t\t\t\t\tthis.editor.selection.selectElement(t);\n\t\t\t\t\teditor.onDisplayChanged();\n\n\t\t\t\t\t// Call onNormalizedDisplayChange() now, rather than on timer.\n\t\t\t\t\t// On IE, when focus goes to the first <input> in the TooltipDialog, the editor loses it's selection.\n\t\t\t\t\t// Later if onNormalizedDisplayChange() gets called via the timer it will disable the LinkDialog button\n\t\t\t\t\t// (actually, all the toolbar buttons), at which point clicking the <input> will close the dialog,\n\t\t\t\t\t// since (for unknown reasons) focus.js ignores disabled controls.\n\t\t\t\t\tif(editor._updateTimer){\n\t\t\t\t\t\teditor._updateTimer.remove();\n\t\t\t\t\t\tdelete editor._updateTimer;\n\t\t\t\t\t}\n\t\t\t\t\teditor.onNormalizedDisplayChanged();\n\n\t\t\t\t\tvar button = this.button;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t// Focus shift outside the event handler.\n\t\t\t\t\t\t// IE doesn't like focus changes in event handles.\n\t\t\t\t\t\tbutton.set(\"disabled\", false);\n\t\t\t\t\t\tbutton.loadAndOpenDropDown().then(function(){\n\t\t\t\t\t\t\tif(button.dropDown.focus){\n\t\t\t\t\t\t\t\tbutton.dropDown.focus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 10);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_onMouseUp: function(){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to define a behavior on mouse up on the element\n\t\t\t//\t\ttype this dialog edits to move the cursor just outside\n\t\t\t//\t\tanchor tags when clicking on their edges.\n\t\t\t// tags:\n\t\t\t//\t\tprotected.\n\t\t\tif(has('ff')){\n\t\t\t\tvar a = this.editor.selection.getAncestorElement(this.tag);\n\t\t\t\tif(a){\n\t\t\t\t\tvar selection = rangeapi.getSelection(this.editor.window);\n\t\t\t\t\tvar range = selection.getRangeAt(0);\n\t\t\t\t\tif(range.collapsed && a.childNodes.length){\n\t\t\t\t\t\tvar test = range.cloneRange();\n\t\t\t\t\t\ttest.selectNodeContents(a.childNodes[a.childNodes.length - 1]);\n\t\t\t\t\t\ttest.setStart(a.childNodes[0], 0);\n\t\t\t\t\t\tif(range.compareBoundaryPoints(test.START_TO_START, test) !== 1){\n\t\t\t\t\t\t\t// cursor is before or at the test start\n\t\t\t\t\t\t\trange.setStartBefore(a);\n\t\t\t\t\t\t}else if(range.compareBoundaryPoints(test.END_TO_START, test) !== -1){\n\t\t\t\t\t\t\t// cursor is before or at the test end\n\t\t\t\t\t\t\trange.setStartAfter(a);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar ImgLinkDialog = declare(\"dijit._editor.plugins.ImgLinkDialog\", [LinkDialog], {\n\t\t// summary:\n\t\t//\t\tThis plugin extends LinkDialog and adds in a plugin for handling image links.\n\t\t//\t\tprovides the image link dialog.\n\t\t// description:\n\t\t//\t\tThe command provided by this plugin is:\n\t\t//\n\t\t//\t\t- insertImage\n\n\t\t// linkDialogTemplate: [protected] String\n\t\t//\t\tOver-ride for template since img dialog doesn't need target that anchor tags may.\n\t\tlinkDialogTemplate: [\n\t\t\t\"<table role='presentation'><tr><td>\",\n\t\t\t\"<label for='${id}_urlInput'>${url}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<input dojoType='dijit.form.ValidationTextBox' regExp='${urlRegExp}' \" +\n\t\t\t\t\"required='true' id='${id}_urlInput' name='urlInput' data-dojo-props='intermediateChanges:true'/>\",\n\t\t\t\"</td></tr><tr><td>\",\n\t\t\t\"<label for='${id}_textInput'>${text}</label>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"<input data-dojo-type='dijit.form.ValidationTextBox' required='false' id='${id}_textInput' \" +\n\t\t\t\t\"name='textInput' data-dojo-props='intermediateChanges:true'/>\",\n\t\t\t\"</td></tr><tr><td>\",\n\t\t\t\"</td><td>\",\n\t\t\t\"</td></tr><tr><td colspan='2'>\",\n\t\t\t\"<button data-dojo-type='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>\",\n\t\t\t\"<button data-dojo-type='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>\",\n\t\t\t\"</td></tr></table>\"\n\t\t].join(\"\"),\n\n\t\t// htmlTemplate: [protected] String\n\t\t//\t\tString used for templating the `<img>` HTML to insert at the desired point.\n\t\thtmlTemplate: \"<img src=\\\"${urlInput}\\\" _djrealurl=\\\"${urlInput}\\\" alt=\\\"${textInput}\\\" />\",\n\n\t\t// tag: [protected] String\n\t\t//\t\tTag used for the link type (img).\n\t\ttag: \"img\",\n\n\t\t_getCurrentValues: function(img){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ride for getting the values to set in the dropdown.\n\t\t\t// a:\n\t\t\t//\t\tThe anchor/link to process for data for the dropdown.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\tvar url, text;\n\t\t\tif(img && img.tagName.toLowerCase() === this.tag){\n\t\t\t\turl = img.getAttribute('_djrealurl') || img.getAttribute('src');\n\t\t\t\ttext = img.getAttribute('alt');\n\t\t\t\tthis.editor.selection.selectElement(img, true);\n\t\t\t}else{\n\t\t\t\ttext = this.editor.selection.getSelectedText();\n\t\t\t}\n\t\t\treturn {urlInput: url || '', textInput: text || ''}; //Object\n\t\t},\n\n\t\t_isValid: function(){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ride for images.  You can have alt text of blank, it is valid.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\treturn this._urlInput.isValid();\n\t\t},\n\n\t\t_connectTagEvents: function(){\n\t\t\t// summary:\n\t\t\t//\t\tOver-ridable function that connects tag specific events.\n\t\t\tthis.inherited(arguments);\n\t\t\tthis.editor.onLoadDeferred.then(lang.hitch(this, function(){\n\t\t\t\t// Use onmousedown instead of onclick.  Seems that IE eats the first onclick\n\t\t\t\t// to wrap it in a selector box, then the second one acts as onclick.  See #10420\n\t\t\t\tthis.own(on(this.editor.editNode, \"mousedown\", lang.hitch(this, \"_selectTag\")));\n\t\t\t}));\n\t\t},\n\n\t\t_selectTag: function(e){\n\t\t\t// summary:\n\t\t\t//\t\tA simple event handler that lets me select an image if it is clicked on.\n\t\t\t//\t\tmakes it easier to select images in a standard way across browsers.  Otherwise\n\t\t\t//\t\tselecting an image for edit becomes difficult.\n\t\t\t// e: Event\n\t\t\t//\t\tThe mousedown event.\n\t\t\t// tags:\n\t\t\t//\t\tprivate\n\t\t\tif(e && e.target){\n\t\t\t\tvar t = e.target;\n\t\t\t\tvar tg = t.tagName ? t.tagName.toLowerCase() : \"\";\n\t\t\t\tif(tg === this.tag){\n\t\t\t\t\tthis.editor.selection.selectElement(t);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_checkValues: function(args){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to check the values in args and 'fix' them up as needed\n\t\t\t//\t\t(special characters in the url or alt text)\n\t\t\t// args: Object\n\t\t\t//\t\tContent being set.\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t\tif(args && args.urlInput){\n\t\t\t\targs.urlInput = args.urlInput.replace(/\"/g, \"&quot;\");\n\t\t\t}\n\t\t\tif(args && args.textInput){\n\t\t\t\targs.textInput = args.textInput.replace(/\"/g, \"&quot;\");\n\t\t\t}\n\t\t\treturn args;\n\t\t},\n\n\t\t_onDblClick: function(e){\n\t\t\t// summary:\n\t\t\t//\t\tFunction to define a behavior on double clicks on the element\n\t\t\t//\t\ttype this dialog edits to select it and pop up the editor\n\t\t\t//\t\tdialog.\n\t\t\t// e: Object\n\t\t\t//\t\tThe double-click event.\n\t\t\t// tags:\n\t\t\t//\t\tprotected.\n\t\t\tif(e && e.target){\n\t\t\t\tvar t = e.target;\n\t\t\t\tvar tg = t.tagName ? t.tagName.toLowerCase() : \"\";\n\t\t\t\tif(tg === this.tag && domAttr.get(t, \"src\")){\n\t\t\t\t\tvar editor = this.editor;\n\n\t\t\t\t\tthis.editor.selection.selectElement(t);\n\t\t\t\t\teditor.onDisplayChanged();\n\n\t\t\t\t\t// Call onNormalizedDisplayChange() now, rather than on timer.\n\t\t\t\t\t// On IE, when focus goes to the first <input> in the TooltipDialog, the editor loses it's selection.\n\t\t\t\t\t// Later if onNormalizedDisplayChange() gets called via the timer it will disable the LinkDialog button\n\t\t\t\t\t// (actually, all the toolbar buttons), at which point clicking the <input> will close the dialog,\n\t\t\t\t\t// since (for unknown reasons) focus.js ignores disabled controls.\n\t\t\t\t\tif(editor._updateTimer){\n\t\t\t\t\t\teditor._updateTimer.remove();\n\t\t\t\t\t\tdelete editor._updateTimer;\n\t\t\t\t\t}\n\t\t\t\t\teditor.onNormalizedDisplayChanged();\n\n\t\t\t\t\tvar button = this.button;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t// Focus shift outside the event handler.\n\t\t\t\t\t\t// IE doesn't like focus changes in event handles.\n\t\t\t\t\t\tbutton.set(\"disabled\", false);\n\t\t\t\t\t\tbutton.loadAndOpenDropDown().then(function(){\n\t\t\t\t\t\t\tif(button.dropDown.focus){\n\t\t\t\t\t\t\t\tbutton.dropDown.focus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Register these plugins\n\t_Plugin.registry[\"createLink\"] = function(args){\n\t\tvar pluginOptions = {\n\t\t\tcommand: \"createLink\",\n\t\t\tallowUnsafeHtml: (\"allowUnsafeHtml\" in args) ? args.allowUnsafeHtml : false\n\t\t};\n\t\tif(\"linkFilter\" in args){\n\t\t\tpluginOptions.linkFilter = args.linkFilter;\n\t\t}\n\t\treturn new LinkDialog(pluginOptions);\n\t};\n\t_Plugin.registry[\"insertImage\"] = function(){\n\t\treturn new ImgLinkDialog({command: \"insertImage\"});\n\t};\n\n\n\t// Export both LinkDialog and ImgLinkDialog\n\t// TODO for 2.0: either return both classes in a hash, or split this file into two separate files.\n\t// Then the documentation for the module can be applied to the hash, and will show up in the API doc.\n\tLinkDialog.ImgLinkDialog = ImgLinkDialog;\n\treturn LinkDialog;\n});\n", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">\n\t<title>Editor Test: LinkDialog Plugin</title>\n\n\t<script type=\"text/javascript\" src=\"../boilerplate.js\"></script>\n\n\t<script type=\"text/javascript\">\n\t\tfunction filterLink () {\n\t\t\treturn 'Filtered Value';\n\t\t}\n\n\t\trequire([\n\t\t\t\"dojo/parser\",\n\t\t\t\"dijit/Editor\",\n\t\t\t\"dijit/_editor/plugins/LinkDialog\",\n\t\t\t\"dijit/_editor/plugins/ViewSource\",\n\t\t\t\"dojo/domReady!\"\n\t\t], function(parser){\n\t\t\tparser.parse();\n\t\t});\n\t</script>\n</head>\n<body class=\"claro\" role=\"main\">\n\t<div style=\"border: 1px dotted black;\">\n\t\t<div id=\"editor\" data-dojo-type=\"dijit/Editor\" data-dojo-props='\"aria-label\":\"editor\",extraPlugins:[\"createLink\", \"insertImage\", \"viewSource\"]'>\n\t\t\t<ol>\n\t\t\t\t<li>The LinkDialog plugin is an 'example' style plugin that shows how to insert basic web links as well as\n\t\t\t\timage tags.  This plugin is intended to guide users in writing their own, more complex, link and image handlers\n\t\t\t\twhile still providing useful function.</li>\n\t\t\t</ol>\n\t\t\t<br>\n\t\t\t<div><a href=\"http://www.example.com/example.html\" target=\"_top\" id=\"exampleLink\">This is an example link in the page.</a></div>\n\t\t\t<br>\n\t\t\t<br>\n\t\t\t<div><img src=\"./sample.jpg\" alt=\"Sample Image\" id=\"exampleImage\" /></div>\n\t\t\t<br>\n\t\t\t<br>\n\t\t</div>\n\t</div>\n\n\t<p>Editor with <code>allowUnsafeHtml</code> set to <code>true</code></p>\n\t<div style=\"border: 1px dotted black;\">\n\t\t<div id=\"editorUnsafe\" data-dojo-type=\"dijit/Editor\" data-dojo-props='\"aria-label\":\"editor\",extraPlugins:[{name: \"createLink\", allowUnsafeHtml: true}, \"insertImage\", \"viewSource\"]'>\n\t\t\t<p>This editor will allow unrestricted HTML in the Description field of links</p>\n\t\t\t<br>\n\t\t</div>\n\t</div>\n\n\t<p>Editor with custom <code>linkFilter</code> function</p>\n\t<div style=\"border: 1px dotted black;\">\n\t\t<div id=\"editorLinkFilter\" data-dojo-type=\"dijit/Editor\" data-dojo-props='\"aria-label\":\"editor\",extraPlugins:[{name: \"createLink\", linkFilter: filterLink}, \"insertImage\", \"viewSource\"]'>\n\t\t\t<p>Links created in this editor will always have a description of \"Filtered Value\", which is the value returned by the custom <code>linkFilter</code> function.</p>\n\t\t\t<br>\n\t\t</div>\n\t</div>\n\n\t<p>RTL Editor:</p>\n\t<div style=\"border: 1px dotted black;\">\n\t\t<div id=\"reditor\" data-dojo-type=\"dijit/Editor\" dir=\"rtl\" data-dojo-props='\"aria-label\":\"reditor\",extraPlugins:[\"createLink\", \"insertImage\"]'>\n\t\t\t<ol>\n\t\t\t\t<li>The LinkDialog plugin is an 'example' style plugin that shows how to insert basic web links as well as\n\t\t\t\timage tags.  This plugin is intended to guide users in writing their own, more complex, link and image handlers\n\t\t\t\twhile still providing useful function.</li>\n\t\t\t</ol>\n\t\t\t<br>\n\t\t\t<div><a href=\"http://www.example.com/example.html\" target=\"_top\" id=\"rexampleLink\">This is an example link in the page.</a></div>\n\t\t\t<br>\n\t\t\t<br>\n\t\t\t<div><img src=\"./sample.jpg\" alt=\"Sample Image\" id=\"rexampleImage\" /></div>\n\t\t\t<br>\n\t\t\t<br>\n\t\t</div>\n\t</div>\n</body>\n</html>\n"], "filenames": ["_editor/plugins/LinkDialog.js", "tests/editor/test_LinkDialog.html"], "buggy_code_start_loc": [2, 9], "buggy_code_end_loc": [634, 38], "fixing_code_start_loc": [3, 10], "fixing_code_end_loc": [667, 59], "type": "CWE-79", "message": "In Dijit before versions 1.11.11, and greater than or equal to 1.12.0 and less than 1.12.9, and greater than or equal to 1.13.0 and less than 1.13.8, and greater than or equal to 1.14.0 and less than 1.14.7, and greater than or equal to 1.15.0 and less than 1.15.4, and greater than or equal to 1.16.0 and less than 1.16.3, there is a cross-site scripting vulnerability in the Editor's LinkDialog plugin. This has been fixed in 1.11.11, 1.12.9, 1.13.8, 1.14.7, 1.15.4, 1.16.3.", "other": {"cve": {"id": "CVE-2020-4051", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-15T22:15:09.973", "lastModified": "2023-02-28T18:28:22.753", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Dijit before versions 1.11.11, and greater than or equal to 1.12.0 and less than 1.12.9, and greater than or equal to 1.13.0 and less than 1.13.8, and greater than or equal to 1.14.0 and less than 1.14.7, and greater than or equal to 1.15.0 and less than 1.15.4, and greater than or equal to 1.16.0 and less than 1.16.3, there is a cross-site scripting vulnerability in the Editor's LinkDialog plugin. This has been fixed in 1.11.11, 1.12.9, 1.13.8, 1.14.7, 1.15.4, 1.16.3."}, {"lang": "es", "value": "En Dijit versiones anteriores a 1.11.11, y superiores o igual a 1.12.0 y menores a 1.12.9, y superiores o igual a 1.13.0 y menores a 1.13.8, y superiores o igual a 1.14.0 y menores a 1.14.7, y superiores o igual a 1.15.0 y menores a 1.15.4, y superiores o igual a 1.16.0 y menores a 1.16.3, se presenta una vulnerabilidad de tipo cross-site scripting en el plugin LinkDialog de Editor. Esto se ha corregido en las versiones 1.11.11, 1.12.9, 1.13.8, 1.14.7, 1.15.4, 1.16.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.7, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openjsf:dijit:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.11.11", "matchCriteriaId": "46F93664-E517-48ED-B180-5E2E999EBA5C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openjsf:dijit:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.12.0", "versionEndExcluding": "1.12.9", "matchCriteriaId": "67DD93B2-1E25-4FDB-9499-26987FC1D07F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openjsf:dijit:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.13.0", "versionEndExcluding": "1.13.8", "matchCriteriaId": "758AFF76-DAB1-4B8E-A074-B2E814BD1E59"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openjsf:dijit:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.14.0", "versionEndExcluding": "1.14.7", "matchCriteriaId": "139AE4A9-5999-49A9-9DDF-3F4540EFCAAE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openjsf:dijit:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.15.0", "versionEndExcluding": "1.15.4", "matchCriteriaId": "D3AFE9AF-E601-4B24-B474-ADE8EC391650"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openjsf:dijit:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.16.0", "versionEndExcluding": "1.16.3", "matchCriteriaId": "DC964698-4018-46B8-BDAF-9AAA73859686"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:netapp:active_iq_unified_manager:-:*:*:*:*:vmware_vsphere:*:*", "matchCriteriaId": "3A756737-1CC4-42C2-A4DF-E1C893B4E2D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:active_iq_unified_manager:-:*:*:*:*:windows:*:*", "matchCriteriaId": "B55E8D50-99B4-47EC-86F9-699B67D473CE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:oncommand_insight:-:*:*:*:*:*:*:*", "matchCriteriaId": "F1BE6C1F-2565-4E97-92AA-16563E5660A5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:oncommand_workflow_automation:-:*:*:*:*:*:*:*", "matchCriteriaId": "5735E553-9731-4AAC-BCFF-989377F817B3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:snapcenter:-:*:*:*:*:*:*:*", "matchCriteriaId": "BDFB1169-41A0-4A86-8E4F-FDA9730B1E94"}]}]}], "references": [{"url": "https://github.com/dojo/dijit/commit/462bdcd60d0333315fe69ab4709c894d78f61301", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/dojo/dijit/security/advisories/GHSA-cxjc-r2fp-7mq6", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2023/01/msg00030.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20201023-0003/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2020.html", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dojo/dijit/commit/462bdcd60d0333315fe69ab4709c894d78f61301"}}