{"buggy_code": ["<?php\r\n\r\n/**\r\n * Simple function to replicate PHP 5 behaviour\r\n */\r\nif ( !function_exists( 'microtime_float' ) ) {\r\n\tfunction microtime_float()\r\n\t{\r\n\t    list($usec, $sec) = explode(\" \", microtime());\r\n\t    return ((float)$usec + (float)$sec);\r\n\t}\r\n}\r\n\r\nrequire BLC_DIRECTORY . '/includes/screen-options/screen-options.php';\r\nrequire BLC_DIRECTORY . '/includes/screen-meta-links.php';\r\nrequire BLC_DIRECTORY . '/includes/wp-mutex.php';\r\n\r\nif (!class_exists('wsBrokenLinkChecker')) {\r\n\r\nclass wsBrokenLinkChecker {\r\n    var $conf;\r\n    \r\n\tvar $loader;\r\n    var $my_basename = '';\t\r\n    \r\n    var $db_version; \t\t//The required version of the plugin's DB schema.\r\n    \r\n    var $execution_start_time; \t//Used for a simple internal execution timer in start_timer()/execution_time()\r\n\r\n\tprivate $is_textdomain_loaded = false;\r\n    \r\n  /**\r\n   * wsBrokenLinkChecker::wsBrokenLinkChecker()\r\n   * Class constructor\r\n   *\r\n   * @param string $loader The fully qualified filename of the loader script that WP identifies as the \"main\" plugin file.\r\n   * @param blcConfigurationManager $conf An instance of the configuration manager\r\n   * @return void\r\n   */\r\n    function wsBrokenLinkChecker ( $loader, $conf ) {\r\n\t\t$this->db_version = BLC_DATABASE_VERSION;\r\n        \r\n        $this->conf = $conf;\r\n        $this->loader = $loader;\r\n        $this->my_basename = plugin_basename( $this->loader );\r\n\r\n        $this->load_language();\r\n        \r\n        //Unlike the activation hook, the deactivation callback *can* be registered in this file\r\n        //because deactivation happens after this class has already been instantiated (durinng the \r\n\t\t//'init' action). \r\n        register_deactivation_hook($loader, array($this, 'deactivation'));\r\n        \r\n        add_action('admin_menu', array($this,'admin_menu'));\r\n\r\n\t\t//Load jQuery on Dashboard pages (probably redundant as WP already does that)\r\n        add_action('admin_print_scripts', array($this,'admin_print_scripts'));\r\n        \r\n        //The dashboard widget\r\n        add_action('wp_dashboard_setup', array($this, 'hook_wp_dashboard_setup'));\r\n\t\t\r\n        //AJAXy hooks\r\n        add_action( 'wp_ajax_blc_full_status', array($this,'ajax_full_status') );\r\n        add_action( 'wp_ajax_blc_dashboard_status', array($this,'ajax_dashboard_status') );\r\n        add_action( 'wp_ajax_blc_work', array($this,'ajax_work') );\r\n        add_action( 'wp_ajax_blc_discard', array($this,'ajax_discard') );\r\n        add_action( 'wp_ajax_blc_edit', array($this,'ajax_edit') );\r\n        add_action( 'wp_ajax_blc_link_details', array($this,'ajax_link_details') );\r\n        add_action( 'wp_ajax_blc_unlink', array($this,'ajax_unlink') );\r\n        add_action( 'wp_ajax_blc_recheck', array($this,'ajax_recheck') );\r\n        add_action( 'wp_ajax_blc_deredirect', array($this,'ajax_deredirect') );\r\n        add_action( 'wp_ajax_blc_current_load', array($this,'ajax_current_load') );\r\n\r\n\t    add_action( 'wp_ajax_blc_dismiss', array($this, 'ajax_dismiss') );\r\n\t    add_action( 'wp_ajax_blc_undismiss', array($this, 'ajax_undismiss') );\r\n        \r\n        //Add/remove Cron events\r\n        $this->setup_cron_events();\r\n        \r\n        //Set hooks that listen for our Cron actions\r\n    \tadd_action('blc_cron_email_notifications', array( $this, 'maybe_send_email_notifications' ));\r\n\t\tadd_action('blc_cron_check_links', array($this, 'cron_check_links'));\r\n\t\tadd_action('blc_cron_database_maintenance', array($this, 'database_maintenance'));\r\n\t\tadd_action('blc_cron_check_news', array($this, 'check_news'));\r\n\t\t\r\n        //Set the footer hook that will call the worker function via AJAX.\r\n        add_action('admin_footer', array($this,'admin_footer'));\r\n\t\t\r\n\t\t//Add a \"Screen Options\" panel to the \"Broken Links\" page\r\n\t\tadd_screen_options_panel(\r\n\t\t\t'blc-screen-options',\r\n\t\t\t'',\r\n\t\t\tarray($this, 'screen_options_html'),\r\n\t\t\t'tools_page_view-broken-links',\r\n\t\t\tarray($this, 'ajax_save_screen_options'),\r\n\t\t\ttrue\r\n\t\t);\r\n\r\n\t\t//Display an explanatory note on the \"Tools -> Broken Links -> Warnings\" page.\r\n\t\tadd_action('admin_notices', array($this, 'show_warnings_section_notice'));\r\n    }\r\n\r\n  /**\r\n   * Output the script that runs the link monitor while the Dashboard is open.\r\n   *\r\n   * @return void\r\n   */\r\n    function admin_footer(){\r\n    \tif ( !$this->conf->options['run_in_dashboard'] ){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$nonce = wp_create_nonce('blc_work');\r\n        ?>\r\n        <!-- wsblc admin footer -->\r\n        <script type='text/javascript'>\r\n        (function($){\r\n\t\t\t\t\r\n\t\t\t//(Re)starts the background worker thread \r\n\t\t\tfunction blcDoWork(){\r\n\t\t\t\t$.post(\r\n\t\t\t\t\t\"<?php echo admin_url('admin-ajax.php'); ?>\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'action' : 'blc_work',\r\n\t\t\t\t\t\t'_ajax_nonce' : '<?php echo esc_js($nonce); ?>'\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t//Call it the first time\r\n\t\t\tblcDoWork();\r\n\t\t\t\r\n\t\t\t//Then call it periodically every X seconds \r\n\t\t\tsetInterval(blcDoWork, <?php echo (intval($this->conf->options['max_execution_time']) + 1 )*1000; ?>);\r\n\t\t\t\r\n\t\t})(jQuery);\r\n        </script>\r\n        <!-- /wsblc admin footer -->\r\n        <?php\r\n    }\r\n    \r\n  /**\r\n   * Check if an URL matches the exclusion list.\r\n   *\r\n   * @param string $url\r\n   * @return bool\r\n   */\r\n    function is_excluded($url){\r\n        if (!is_array($this->conf->options['exclusion_list'])) return false;\r\n        foreach($this->conf->options['exclusion_list'] as $excluded_word){\r\n            if (stristr($url, $excluded_word)){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function dashboard_widget(){\r\n        ?>\r\n        <p id='wsblc_activity_box'><?php _e('Loading...', 'broken-link-checker');  ?></p>\r\n        <script type='text/javascript'>\r\n        \tjQuery( function($){\r\n        \t\tvar blc_was_autoexpanded = false;\r\n        \t\t\r\n\t\t\t\tfunction blcDashboardStatus(){\r\n\t\t\t\t\t$.getJSON(\r\n\t\t\t\t\t\t\"<?php echo admin_url('admin-ajax.php'); ?>\",\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'action' : 'blc_dashboard_status',\r\n\t\t\t\t\t\t\t'random' : Math.random()\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfunction (data){\r\n\t\t\t\t\t\t\tif ( data && ( typeof(data.text) != 'undefined' ) ) {\r\n\t\t\t\t\t\t\t\t$('#wsblc_activity_box').html(data.text); \r\n\t\t\t\t\t\t\t\t<?php if ( $this->conf->options['autoexpand_widget'] ) { ?>\r\n\t\t\t\t\t\t\t\t//Expand the widget if there are broken links.\r\n\t\t\t\t\t\t\t\t//Do this only once per pageload so as not to annoy the user.\r\n\t\t\t\t\t\t\t\tif ( !blc_was_autoexpanded && ( data.status.broken_links > 0 ) ){\r\n\t\t\t\t\t\t\t\t\t$('#blc_dashboard_widget.postbox').removeClass('closed');\r\n\t\t\t\t\t\t\t\t\tblc_was_autoexpanded = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t<?php } ?>\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t$('#wsblc_activity_box').html('<?php _e('[ Network error ]', 'broken-link-checker'); ?>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsetTimeout( blcDashboardStatus, 120*1000 ); //...update every two minutes\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tblcDashboardStatus();//Call it the first time\r\n\t\t\t\r\n\t\t\t} );\r\n        </script>\r\n        <?php\r\n    }\r\n\r\n    function dashboard_widget_control(\r\n\t\t/** @noinspection PhpUnusedParameterInspection */ $widget_id, $form_inputs = array()\r\n\t){\r\n\t\tif ( 'POST' == $_SERVER['REQUEST_METHOD'] && 'blc_dashboard_widget' == $_POST['widget_id'] ) {\r\n\t\t\t//It appears $form_inputs isn't used in the current WP version, so lets just use $_POST\r\n\t\t\t$this->conf->options['autoexpand_widget'] = !empty($_POST['blc-autoexpand']);\r\n\t\t\t$this->conf->save_options();\r\n\t\t}\r\n\t\r\n\t\t?>\r\n\t\t<p><label for=\"blc-autoexpand\">\r\n\t\t\t<input id=\"blc-autoexpand\" name=\"blc-autoexpand\" type=\"checkbox\" value=\"1\" <?php if ( $this->conf->options['autoexpand_widget'] ) echo 'checked=\"checked\"'; ?> />\r\n\t\t\t<?php _e('Automatically expand the widget if broken links have been detected', 'broken-link-checker'); ?>\r\n\t\t</label></p>\r\n\t\t<?php\r\n    }\r\n\r\n    function admin_print_scripts(){\r\n        //jQuery is used for triggering the link monitor via AJAX when any admin page is open.\r\n        wp_enqueue_script('jquery');\r\n    }\r\n    \r\n    function enqueue_settings_scripts(){\r\n    \t//jQuery UI is used on the settings page\r\n\t\twp_enqueue_script('jquery-ui-core');   //Used for background color animation\r\n        wp_enqueue_script('jquery-ui-dialog');\r\n        wp_enqueue_script('jquery-ui-tabs');\r\n        wp_enqueue_script('jquery-cookie', plugins_url('js/jquery.cookie.js', BLC_PLUGIN_FILE)); //Used for storing last widget states, etc\r\n\t}\r\n\t\r\n\tfunction enqueue_link_page_scripts(){\r\n\t\twp_enqueue_script('jquery-ui-core');\r\n        wp_enqueue_script('jquery-ui-dialog'); //Used for the search form\r\n\t\twp_enqueue_script('jquery-color');     //Used for background color animation\r\n        wp_enqueue_script('sprintf', plugins_url('js/sprintf.js', BLC_PLUGIN_FILE)); //Used in error messages\r\n\t}\r\n\t\r\n  /**\r\n   * Initiate a full recheck - reparse everything and check all links anew. \r\n   *\r\n   * @return void\r\n   */\r\n    function initiate_recheck(){\r\n    \tglobal $wpdb; /** @var wpdb $wpdb */\r\n\r\n    \t//Delete all discovered instances\r\n    \t$wpdb->query(\"TRUNCATE {$wpdb->prefix}blc_instances\");\r\n    \t\r\n    \t//Delete all discovered links\r\n    \t$wpdb->query(\"TRUNCATE {$wpdb->prefix}blc_links\");\r\n    \t\r\n    \t//Mark all posts, custom fields and bookmarks for processing.\r\n    \tblc_resynch(true);\r\n\t}\r\n\r\n  /**\r\n   * A hook executed when the plugin is deactivated.\r\n   *\r\n   * @return void\r\n   */\r\n    function deactivation(){\r\n    \t//Remove our Cron events\r\n\t\twp_clear_scheduled_hook('blc_cron_check_links');\r\n\t\twp_clear_scheduled_hook('blc_cron_email_notifications');\r\n\t\twp_clear_scheduled_hook('blc_cron_database_maintenance');\r\n\t\twp_clear_scheduled_hook('blc_cron_check_news');\r\n\t\t//Note the deactivation time for each module. This will help them \r\n\t\t//synch up propely if/when the plugin is reactivated.\r\n\t\t$moduleManager = blcModuleManager::getInstance();\r\n\t\t$the_time = current_time('timestamp');\r\n\t\tforeach($moduleManager->get_active_modules() as $module_id => $module){\r\n\t\t\t$this->conf->options['module_deactivated_when'][$module_id] = $the_time;\r\n\t\t}\r\n\t\t$this->conf->save_options();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform various database maintenance tasks on the plugin's tables.\r\n\t * \r\n\t * Removes records that reference disabled containers and parsers,\r\n\t * deletes invalid instances and links, optimizes tables, etc.\r\n\t * \r\n\t * @return void\r\n\t */\r\n\tfunction database_maintenance(){\r\n\t\tblcContainerHelper::cleanup_containers();\r\n\t\tblc_cleanup_instances();\r\n\t\tblc_cleanup_links();\r\n\t\t\r\n\t\tblcUtility::optimize_database();\r\n\t}\r\n\r\n    /**\r\n     * Create the plugin's menu items and enqueue their scripts and CSS.\r\n     * Callback for the 'admin_menu' action. \r\n     * \r\n     * @return void\r\n     */\r\n    function admin_menu(){\r\n    \tif (current_user_can('manage_options'))\r\n          add_filter('plugin_action_links', array($this, 'plugin_action_links'), 10, 2);\r\n    \t\r\n        $options_page_hook = add_options_page( \r\n\t\t\t__('Link Checker Settings', 'broken-link-checker'), \r\n\t\t\t__('Link Checker', 'broken-link-checker'), \r\n\t\t\t'manage_options',\r\n            'link-checker-settings',array($this, 'options_page')\r\n\t\t);\r\n\t\t\r\n\t\t$menu_title = __('Broken Links', 'broken-link-checker');\r\n\t\tif ( $this->conf->options['show_link_count_bubble'] ){\r\n\t\t\t//To make it easier to notice when broken links appear, display the current number of \r\n\t\t\t//broken links in a little bubble notification in the \"Broken Links\" menu.  \r\n\t\t\t//(Similar to how the number of plugin updates and unmoderated comments is displayed).\r\n\t\t\t$blc_link_query = blcLinkQuery::getInstance();\r\n\t\t\t$broken_links = $blc_link_query->get_filter_links('broken', array('count_only' => true));\r\n\t\t\tif ( $broken_links > 0 ){\r\n\t\t\t\t//TODO: Appropriating existing CSS classes for my own purposes is hacky. Fix eventually. \r\n\t\t\t\t$menu_title .= sprintf(\r\n\t\t\t\t\t' <span class=\"update-plugins\"><span class=\"update-count blc-menu-bubble\">%d</span></span>', \r\n\t\t\t\t\t$broken_links\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\t\t\r\n        $links_page_hook = add_management_page(\r\n\t\t\t__('View Broken Links', 'broken-link-checker'), \r\n\t\t\t$menu_title, \r\n\t\t\t'edit_others_posts',\r\n            'view-broken-links',array($this, 'links_page')\r\n\t\t);\r\n\t\t \r\n\t\t//Add plugin-specific scripts and CSS only to the it's own pages\r\n\t\tadd_action( 'admin_print_styles-' . $options_page_hook, array($this, 'options_page_css') );\r\n        add_action( 'admin_print_styles-' . $links_page_hook, array($this, 'links_page_css') );\r\n\t\tadd_action( 'admin_print_scripts-' . $options_page_hook, array($this, 'enqueue_settings_scripts') );\r\n        add_action( 'admin_print_scripts-' . $links_page_hook, array($this, 'enqueue_link_page_scripts') );\r\n        \r\n        //Add a \"Feedback\" button that links to the plugin's UserVoice forum\r\n        add_screen_meta_link(\r\n        \t'blc-feedback-widget',\r\n        \t__('Feedback', 'broken-link-checker'),\r\n        \t'http://whiteshadow.uservoice.com/forums/58400-broken-link-checker',\r\n        \tarray($options_page_hook, $links_page_hook)\r\n\t\t);\r\n\r\n\t    //Make the Settings page link to the link list\r\n\t\tadd_screen_meta_link(\r\n        \t'blc-links-page-link',\r\n\t\t\t__('Go to Broken Links', 'broken-link-checker'),\r\n\t\t\tadmin_url('tools.php?page=view-broken-links'),\r\n\t\t\t$options_page_hook,\r\n\t\t\tarray('style' => 'font-weight: bold;')\r\n\t\t);\r\n\t\t\r\n\t\t//Add a link to the latest blog post/whatever about this plugin, if any.\r\n\t\tif ( !$this->conf->get('user_has_donated') && isset($this->conf->options['plugin_news']) && !empty($this->conf->options['plugin_news']) ){\r\n\t\t\t$news = $this->conf->options['plugin_news'];\r\n\t        add_screen_meta_link(\r\n\t        \t'blc-plugin-news-link',\r\n\t        \t$news[0],\r\n\t        \t$news[1],\r\n\t        \tarray($options_page_hook, $links_page_hook)\r\n\t\t\t);\r\n\t\t}\r\n    }\r\n    \r\n  /**\r\n   * plugin_action_links()\r\n   * Handler for the 'plugin_action_links' hook. Adds a \"Settings\" link to this plugin's entry\r\n   * on the plugin list.\r\n   *\r\n   * @param array $links\r\n   * @param string $file\r\n   * @return array\r\n   */\r\n    function plugin_action_links($links, $file) {\r\n        if ($file == $this->my_basename)\r\n            $links[] = \"<a href='options-general.php?page=link-checker-settings'>\" . __('Settings') . \"</a>\";\r\n        return $links;\r\n    }\r\n\r\n    function options_page(){\r\n    \t$moduleManager = blcModuleManager::getInstance();\r\n\r\n\t    //Prior to 1.5.2 (released 2012-05-27), there was a bug that would cause the donation flag to be\r\n\t    //set incorrectly. So we'll unset the flag in that case.\r\n\t    $reset_donation_flag =\r\n\t    \t($this->conf->get('first_installation_timestamp', 0) < strtotime('2012-05-27 00:00')) &&\r\n\t    \t!$this->conf->get('donation_flag_fixed', false);\r\n\r\n\t    if ( $reset_donation_flag) {\r\n\t\t    $this->conf->set('user_has_donated', false);\r\n\t\t    $this->conf->set('donation_flag_fixed', true);\r\n\t\t    $this->conf->save_options();\r\n\t    }\r\n\r\n        if (isset($_POST['recheck']) && !empty($_POST['recheck']) ){\r\n            $this->initiate_recheck();\r\n            \r\n            //Redirect back to the settings page\r\n\t\t\t$base_url = remove_query_arg( array('_wpnonce', 'noheader', 'updated', 'error', 'action', 'message') );\r\n\t\t\twp_redirect( add_query_arg( array( 'recheck-initiated' => true), $base_url ) );\r\n\t\t\tdie();\r\n        }\r\n\r\n\t\t$available_link_actions = array(\r\n\t\t\t'edit'               => __('Edit URL' , 'broken-link-checker'),\r\n\t\t\t'delete'             => __('Unlink', 'broken-link-checker'),\r\n\t\t\t'blc-discard-action' => __('Not broken', 'broken-link-checker'),\r\n\t\t\t'blc-dismiss-action' => __('Dismiss', 'broken-link-checker'),\r\n\t\t\t'blc-recheck-action' => __('Recheck', 'broken-link-checker'),\r\n\t\t\t'blc-deredirect-action' => _x('Fix redirect', 'link action; replace one redirect with a direct link', 'broken-link-checker')\r\n\t\t);\r\n        \r\n        if(isset($_POST['submit'])) {\r\n\t\t\tcheck_admin_referer('link-checker-options');\r\n\r\n\t\t\t$cleanPost = $_POST;\r\n\t\t\tif ( function_exists('wp_magic_quotes') ){\r\n\t\t\t\t$cleanPost = stripslashes_deep($cleanPost); //Ceterum censeo, WP shouldn't mangle superglobals.\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Activate/deactivate modules\r\n\t\t\tif ( !empty($_POST['module']) ){\r\n\t\t\t\t$active = array_keys($_POST['module']);\r\n\t\t\t\t$moduleManager->set_active_modules($active);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Only post statuses that actually exist can be selected\r\n\t\t\tif ( isset($_POST['enabled_post_statuses']) && is_array($_POST['enabled_post_statuses']) ){\r\n\t\t\t\t$available_statuses = get_post_stati();\r\n\t\t\t\t$enabled_post_statuses = array_intersect($_POST['enabled_post_statuses'], $available_statuses); \r\n\t\t\t} else {\r\n\t\t\t\t$enabled_post_statuses = array();\r\n\t\t\t}\r\n\t\t\t//At least one status must be enabled; defaults to \"Published\".\r\n\t\t\tif ( empty($enabled_post_statuses) ){\r\n\t\t\t\t$enabled_post_statuses = array('publish');\r\n\t\t\t}\r\n\r\n\t\t\t//Did the user add/remove any post statuses?\r\n\t\t\t$same_statuses = array_intersect($enabled_post_statuses, $this->conf->options['enabled_post_statuses']);\r\n\t\t\t$post_statuses_changed = (count($same_statuses) != count($enabled_post_statuses))\r\n\t\t\t\t|| (count($same_statuses) !== count($this->conf->options['enabled_post_statuses']));\r\n\r\n\t\t\t$this->conf->options['enabled_post_statuses'] = $enabled_post_statuses;\r\n\r\n\t\t\t//The execution time limit must be above zero\r\n            $new_execution_time = intval($_POST['max_execution_time']);\r\n            if( $new_execution_time > 0 ){\r\n                $this->conf->options['max_execution_time'] = $new_execution_time;\r\n            }\r\n\r\n\t\t\t//The check threshold also must be > 0\r\n            $new_check_threshold=intval($_POST['check_threshold']);\r\n            if( $new_check_threshold > 0 ){\r\n                $this->conf->options['check_threshold'] = $new_check_threshold;\r\n            }\r\n            \r\n            $this->conf->options['mark_broken_links'] = !empty($_POST['mark_broken_links']);\r\n            $new_broken_link_css = trim($cleanPost['broken_link_css']);\r\n            $this->conf->options['broken_link_css'] = $new_broken_link_css;\r\n            \r\n            $this->conf->options['mark_removed_links'] = !empty($_POST['mark_removed_links']);\r\n            $new_removed_link_css = trim($cleanPost['removed_link_css']);\r\n            $this->conf->options['removed_link_css'] = $new_removed_link_css;\r\n            \r\n            $this->conf->options['nofollow_broken_links'] = !empty($_POST['nofollow_broken_links']);\r\n\t\t\t\r\n            $this->conf->options['suggestions_enabled'] = !empty($_POST['suggestions_enabled']);\r\n\r\n            $this->conf->options['exclusion_list'] = array_filter(\r\n\t\t\t\tpreg_split( \r\n\t\t\t\t\t'/[\\s\\r\\n]+/',\t\t\t\t//split on newlines and whitespace \r\n\t\t\t\t\t$cleanPost['exclusion_list'],\r\n\t\t\t\t\t-1,\r\n\t\t\t\t\tPREG_SPLIT_NO_EMPTY\t\t\t//skip empty values\r\n\t\t\t\t) \r\n\t\t\t);\r\n                \r\n            //Parse the custom field list\r\n            $new_custom_fields = array_filter( \r\n\t\t\t\tpreg_split( '/[\\r\\n]+/', $cleanPost['blc_custom_fields'], -1, PREG_SPLIT_NO_EMPTY )\r\n\t\t\t);\r\n            \r\n\t\t\t//Calculate the difference between the old custom field list and the new one (used later)\r\n            $diff1 = array_diff( $new_custom_fields, $this->conf->options['custom_fields'] );\r\n            $diff2 = array_diff( $this->conf->options['custom_fields'], $new_custom_fields );\r\n            $this->conf->options['custom_fields'] = $new_custom_fields;\r\n\r\n\t\t\t//Turning off warnings turns existing warnings into \"broken\" links.\r\n\t\t\t$warnings_enabled = !empty($_POST['warnings_enabled']);\r\n\t\t\tif ( $this->conf->get('warnings_enabled') && !$warnings_enabled ) {\r\n\t\t\t\t$this->promote_warnings_to_broken();\r\n\t\t\t}\r\n\t\t\t$this->conf->options['warnings_enabled'] = $warnings_enabled;\r\n\r\n\t\t\t//HTTP timeout\r\n            $new_timeout = intval($_POST['timeout']);\r\n            if( $new_timeout > 0 ){\r\n                $this->conf->options['timeout'] = $new_timeout ;\r\n            }\r\n            \r\n            //Server load limit \r\n            if ( isset($_POST['server_load_limit']) ){\r\n            \t$this->conf->options['server_load_limit'] = floatval($_POST['server_load_limit']);\r\n            \tif ( $this->conf->options['server_load_limit'] < 0 ){\r\n\t\t\t\t\t$this->conf->options['server_load_limit'] = 0;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$this->conf->options['enable_load_limit'] = $this->conf->options['server_load_limit'] > 0;\r\n            }\r\n\r\n\t\t\t//Target resource usage (1% to 100%)\r\n\t\t\tif ( isset($_POST['target_resource_usage']) ) {\r\n\t\t\t\t$usage = floatval($_POST['target_resource_usage']);\r\n\t\t\t\t$usage = max(min($usage / 100, 1), 0.01);\r\n\t\t\t\t$this->conf->options['target_resource_usage'] = $usage;\r\n\t\t\t}\r\n            \r\n            //When to run the checker\r\n            $this->conf->options['run_in_dashboard'] = !empty($_POST['run_in_dashboard']);\r\n            $this->conf->options['run_via_cron'] = !empty($_POST['run_via_cron']);\r\n            \r\n            //Email notifications on/off\r\n            $email_notifications = !empty($_POST['send_email_notifications']);\r\n\t        $send_authors_email_notifications = !empty($_POST['send_authors_email_notifications']);\r\n\r\n            if (\r\n\t              ($email_notifications && !$this->conf->options['send_email_notifications'])\r\n\t           || ($send_authors_email_notifications && !$this->conf->options['send_authors_email_notifications'])\r\n            ){\r\n            \t/*\r\n            \tThe plugin should only send notifications about links that have become broken\r\n\t\t\t\tsince the time when email notifications were turned on. If we don't do this,\r\n\t\t\t\tthe first email notification will be sent nigh-immediately and list *all* broken\r\n\t\t\t\tlinks that the plugin currently knows about.\r\n\t\t\t\t*/\r\n\t\t\t\t$this->conf->options['last_notification_sent'] = time();\r\n\t\t\t}\r\n            $this->conf->options['send_email_notifications'] = $email_notifications;\r\n\t        $this->conf->options['send_authors_email_notifications'] = $send_authors_email_notifications;\r\n\r\n\t\t\t$this->conf->options['notification_email_address'] = strval($_POST['notification_email_address']);\r\n\t\t\tif ( !filter_var($this->conf->options['notification_email_address'], FILTER_VALIDATE_EMAIL)) {\r\n\t\t\t\t$this->conf->options['notification_email_address'] = '';\r\n\t\t\t}\r\n\r\n\t        $widget_cap = strval($_POST['dashboard_widget_capability']);\r\n\t        if ( !empty($widget_cap) ) {\r\n\t\t        $this->conf->options['dashboard_widget_capability'] = $widget_cap;\r\n\t        }\r\n\r\n\t\t\t//Link actions. The user can hide some of them to reduce UI clutter.\r\n\t\t\t$show_link_actions = array();\r\n\t\t\tforeach(array_keys($available_link_actions) as $action) {\r\n\t\t\t\t$show_link_actions[$action] = isset($_POST['show_link_actions']) &&\r\n\t\t\t\t\t!empty($_POST['show_link_actions'][$action]);\r\n\t\t\t}\r\n\t\t\t$this->conf->set('show_link_actions', $show_link_actions);\r\n\r\n\t\t\t//Logging. The plugin can log various events and results for debugging purposes.\r\n\t\t\t$this->conf->options['logging_enabled'] = !empty($_POST['logging_enabled']);\r\n\t\t\t$this->conf->options['custom_log_file_enabled'] = !empty($_POST['custom_log_file_enabled']);\r\n\r\n\t\t\tif ( $this->conf->options['logging_enabled'] ) {\r\n\t\t\t\tif ( $this->conf->options['custom_log_file_enabled'] ) {\r\n\t\t\t\t\t$log_file = strval($cleanPost['log_file']);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//Default log file is /wp-content/uploads/broken-link-checker/blc-log.txt\r\n\t\t\t\t\t$log_directory = self::get_default_log_directory();\r\n\t\t\t\t\t$log_file = $log_directory . '/' . self::get_default_log_basename();\r\n\r\n\t\t\t\t\t//Attempt to create the log directory.\r\n\t\t\t\t\tif ( !is_dir($log_directory) ) {\r\n\t\t\t\t\t\tif ( mkdir($log_directory, 0750) ) {\r\n\t\t\t\t\t\t\t//Add a .htaccess to hide the log file from site visitors.\r\n\t\t\t\t\t\t\tfile_put_contents($log_directory . '/.htaccess', 'Deny from all');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$this->conf->options['log_file'] = $log_file;\r\n\r\n\t\t\t\t//Attempt to create the log file if not already there.\r\n\t\t\t\tif ( !is_file($log_file) ) {\r\n\t\t\t\t\tfile_put_contents($log_file, '');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//The log file must be writable.\r\n\t\t\t\tif ( !is_writable($log_file) || !is_file($log_file) ) {\r\n\t\t\t\t\t$this->conf->options['logging_enabled'] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//Make settings that affect our Cron events take effect immediately\r\n\t\t\t$this->setup_cron_events();\r\n\t\t\t\r\n            $this->conf->save_options();\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t If the list of custom fields was modified then we MUST resynchronize or\r\n\t\t\t custom fields linked with existing posts may not be detected. This is somewhat\r\n\t\t\t inefficient.  \r\n\t\t\t */\r\n\t\t\tif ( ( count($diff1) > 0 ) || ( count($diff2) > 0 ) ){\r\n\t\t\t\t$manager = blcContainerHelper::get_manager('custom_field');\r\n\t\t\t\tif ( !is_null($manager) ){\r\n\t\t\t\t\t$manager->resynch();\r\n\t\t\t\t\tblc_got_unsynched_items();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//Resynchronize posts when the user enables or disables post statuses.\r\n\t\t\tif ( $post_statuses_changed ) {\r\n\t\t\t\t$overlord = blcPostTypeOverlord::getInstance();\r\n\t\t\t\t$overlord->enabled_post_statuses = $this->conf->get('enabled_post_statuses', array());\r\n\t\t\t\t$overlord->resynch('wsh_status_resynch_trigger');\r\n\r\n\t\t\t\tblc_got_unsynched_items();\r\n\t\t\t\tblc_cleanup_instances();\r\n\t\t\t\tblc_cleanup_links();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Redirect back to the settings page\r\n\t\t\t$base_url = remove_query_arg( array('_wpnonce', 'noheader', 'updated', 'error', 'action', 'message') );\r\n\t\t\twp_redirect( add_query_arg( array( 'settings-updated' => true), $base_url ) );\r\n        }\r\n        \r\n        //Show a confirmation message when settings are saved. \r\n        if ( !empty($_GET['settings-updated']) ){\r\n        \techo '<div id=\"message\" class=\"updated fade\"><p><strong>',__('Settings saved.', 'broken-link-checker'), '</strong></p></div>';\r\n        \t\r\n        }\r\n        \r\n        //Show a thank-you message when a donation is made.\r\n        if ( !empty($_GET['donated']) ){\r\n        \techo '<div id=\"message\" class=\"updated fade\"><p><strong>',__('Thank you for your donation!', 'broken-link-checker'), '</strong></p></div>';\r\n        \t$this->conf->set('user_has_donated', true);\r\n\t        $this->conf->save_options();\r\n        }\r\n        \r\n        //Show one when recheck is started, too. \r\n        if ( !empty($_GET['recheck-initiated']) ){\r\n        \techo '<div id=\"message\" class=\"updated fade\"><p><strong>',\r\n\t\t\t     \t__('Complete site recheck started.', 'broken-link-checker'), // -- Yoda \r\n\t\t\t     '</strong></p></div>';\r\n        }\r\n        \r\n        //Cull invalid and missing modules\r\n        $moduleManager->validate_active_modules();\r\n        \r\n\t\t$debug = $this->get_debug_info();\r\n\t\t\r\n\t\tadd_filter('blc-module-settings-custom_field', array($this, 'make_custom_field_input'), 10, 2);\r\n\t\t\r\n\t\t//Translate and markup-ify module headers for display\r\n\t\t$modules = $moduleManager->get_modules_by_category('', true, true);\r\n\t\t\r\n\t\t//Output the custom broken link/removed link styles for example links\r\n\t\tprintf(\r\n\t\t\t'<style type=\"text/css\">%s %s</style>', \r\n\t\t\t$this->conf->options['broken_link_css'],\r\n\t\t\t$this->conf->options['removed_link_css']\r\n\t\t);\r\n\t\t\r\n\t\t$section_names = array(\r\n\t\t\t'general' =>  __('General', 'broken-link-checker'),\r\n\t\t\t'where' =>    __('Look For Links In', 'broken-link-checker'),\r\n\t\t\t'which' =>    __('Which Links To Check', 'broken-link-checker'),\r\n\t\t\t'how' =>      __('Protocols & APIs', 'broken-link-checker'),\r\n\t\t\t'advanced' => __('Advanced', 'broken-link-checker'),\r\n\t\t);\r\n\t\t?>\r\n\t\t\r\n\t\t<!--[if lte IE 7]>\r\n\t\t<style type=\"text/css\">\r\n\t\t/* Simulate inline-block in IE7 */\r\n\t\tul.ui-tabs-nav li {\r\n\t\t\tdisplay: inline; \r\n\t\t\tzoom: 1;\r\n\t\t}\r\n\t\t</style>\r\n\t\t<![endif]-->\r\n\t\t\r\n        <div class=\"wrap\" id=\"blc-settings-wrap\">\r\n\t\t<h2><?php _e('Broken Link Checker Options', 'broken-link-checker'); ?></h2>\r\n\t\t\r\n\t\t\r\n        <div id=\"blc-sidebar\">\r\n\t\t\t<div class=\"metabox-holder\">\r\n\t\t\t\t<?php include BLC_DIRECTORY . '/includes/admin/sidebar.php'; ?>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n        \r\n        <div id=\"blc-admin-content\">\r\n\t\t\r\n        <form name=\"link_checker_options\" id=\"link_checker_options\" method=\"post\" action=\"<?php \r\n\t\t\techo admin_url('options-general.php?page=link-checker-settings&noheader=1'); \r\n\t\t?>\">\r\n        <?php \r\n\t\t\twp_nonce_field('link-checker-options');\r\n\t\t?>\r\n\t\t\r\n\t\t<div id=\"blc-tabs\">\r\n\t\t\r\n\t\t<ul class=\"hide-if-no-js\">\r\n\t\t\t<?php\r\n\t\t\t\tforeach($section_names as $section_id => $section_name){\r\n\t\t\t\t\tprintf(\r\n\t\t\t\t\t\t'<li id=\"tab-button-%s\"><a href=\"#section-%s\" title=\"%s\">%s</a></li>',\r\n\t\t\t\t\t\tesc_attr($section_id), \r\n\t\t\t\t\t\tesc_attr($section_id),\r\n\t\t\t\t\t\tesc_attr($section_name), \r\n\t\t\t\t\t\t$section_name\r\n\t\t\t\t\t);\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t?>\r\n\t\t</ul>\r\n\r\n\t\t<div id=\"section-general\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['general']; ?></h3>\r\n\t\t\r\n        <table class=\"form-table\">\r\n\r\n        <tr valign=\"top\">\r\n        <th scope=\"row\">\r\n\t\t\t<?php _e('Status','broken-link-checker'); ?>\r\n\t\t\t<br>\r\n\t\t\t<a href=\"javascript:void(0)\" id=\"blc-debug-info-toggle\"><?php _e('Show debug info', 'broken-link-checker'); ?></a>\r\n\t\t</th>\r\n        <td>\r\n\r\n        <div id='wsblc_full_status'>\r\n            <br/><br/><br/>\r\n        </div>\r\n        \r\n        <table id=\"blc-debug-info\">\r\n        <?php\r\n        \r\n        //Output the debug info in a table\r\n\t\tforeach( $debug as $key => $value ){\r\n\t\t\tprintf (\r\n\t\t\t\t'<tr valign=\"top\" class=\"blc-debug-item-%s\"><th scope=\"row\">%s</th><td>%s<div class=\"blc-debug-message\">%s</div></td></tr>',\r\n\t\t\t\t$value['state'],\r\n\t\t\t\t$key,\r\n\t\t\t\t$value['value'], \r\n\t\t\t\t( array_key_exists('message', $value)?$value['message']:'')\r\n\t\t\t);\r\n\t\t}\r\n        ?>\r\n        </table>\r\n        \r\n        </td>\r\n        </tr>\r\n\r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Check each link','broken-link-checker'); ?></th>\r\n        <td>\r\n\r\n\t\t<?php\r\n\t\t\tprintf( \r\n\t\t\t\t__('Every %s hours','broken-link-checker'),\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t'<input type=\"text\" name=\"check_threshold\" id=\"check_threshold\" value=\"%d\" size=\"5\" maxlength=\"5\" />',\r\n\t\t\t\t\t$this->conf->options['check_threshold']\r\n\t\t\t\t)\r\n\t\t\t ); \r\n\t\t?>\r\n        <br/>\r\n        <span class=\"description\">\r\n        <?php _e('Existing links will be checked this often. New links will usually be checked ASAP.', 'broken-link-checker'); ?>\r\n        </span>\r\n\r\n        </td>\r\n        </tr>\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('E-mail notifications', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        \t<p style=\"margin-top: 0;\">\r\n        \t<label for='send_email_notifications'>\r\n        \t\t<input type=\"checkbox\" name=\"send_email_notifications\" id=\"send_email_notifications\"\r\n            \t<?php if ($this->conf->options['send_email_notifications']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Send me e-mail notifications about newly detected broken links', 'broken-link-checker'); ?>\r\n\t\t\t</label><br />\r\n\t\t\t</p>\r\n\r\n\t        <p>\r\n        \t<label for='send_authors_email_notifications'>\r\n        \t\t<input type=\"checkbox\" name=\"send_authors_email_notifications\" id=\"send_authors_email_notifications\"\r\n            \t<?php if ($this->conf->options['send_authors_email_notifications']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Send authors e-mail notifications about broken links in their posts', 'broken-link-checker'); ?>\r\n\t\t\t</label><br />\r\n\t\t\t</p>\r\n        </td>\r\n        </tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php echo __('Notification e-mail address', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\t\t\t\t<p>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"notification_email_address\"\r\n\t\t\t\t\t\tid=\"notification_email_address\"\r\n\t\t\t\t\t\tvalue=\"<?php echo esc_attr($this->conf->get('notification_email_address', '')); ?>\"\r\n\t\t\t\t\t\tclass=\"regular-text ltr\">\r\n\t\t\t\t</label><br>\r\n\t\t\t\t<span class=\"description\">\r\n\t\t\t\t\t<?php echo __('Leave empty to use the e-mail address specified in Settings &rarr; General.', 'broken-link-checker'); ?>\r\n\t\t\t\t</span>\r\n\t\t\t\t</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Link tweaks','broken-link-checker'); ?></th>\r\n        <td>\r\n        \t<p style=\"margin-top: 0; margin-bottom: 0.5em;\">\r\n        \t<label for='mark_broken_links'>\r\n        \t\t<input type=\"checkbox\" name=\"mark_broken_links\" id=\"mark_broken_links\"\r\n            \t<?php if ($this->conf->options['mark_broken_links']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Apply custom formatting to broken links', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t|\r\n\t\t\t<a id=\"toggle-broken-link-css-editor\" href=\"#\" class=\"blc-toggle-link\"><?php\r\n\t\t\t\t_e('Edit CSS', 'broken-link-checker');\r\n\t\t\t?></a>\r\n\t\t\t</p>\r\n\t\t\t\r\n\t\t\t<div id=\"broken-link-css-wrap\"<?php \r\n\t\t\t\tif ( !blcUtility::get_cookie('broken-link-css-wrap', false) ){\r\n\t\t\t\t\techo ' class=\"hidden\"';\r\n\t\t\t\t} \r\n\t\t\t?>>\r\n\t\t        <textarea name=\"broken_link_css\" id=\"broken_link_css\" cols='45' rows='4'><?php\r\n\t\t            if( isset($this->conf->options['broken_link_css']) ) {\r\n\t\t\t\t\t\techo $this->conf->options['broken_link_css'];\r\n\t\t\t\t\t}\r\n\t\t        ?></textarea>\r\n\t\t        <p class=\"description\"><?php\r\n\t\t\t\t\tprintf(\r\n\t\t\t\t\t\t__('Example : Lorem ipsum <a %s>broken link</a>, dolor sit amet.', 'broken-link-checker'),\r\n\t\t\t\t\t\t' href=\"#\" class=\"broken_link\" onclick=\"return false;\"'\r\n\t\t\t\t\t);\r\n\t\t\t\t\techo ' ', __('Click \"Save Changes\" to update example output.', 'broken-link-checker');\r\n\t\t\t\t?></p>\r\n        \t</div>\r\n        \t\r\n        \t<p style=\"margin-bottom: 0.5em;\">\r\n        \t<label for='mark_removed_links'>\r\n        \t\t<input type=\"checkbox\" name=\"mark_removed_links\" id=\"mark_removed_links\"\r\n            \t<?php if ($this->conf->options['mark_removed_links']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Apply custom formatting to removed links', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t|\r\n\t\t\t<a id=\"toggle-removed-link-css-editor\" href=\"#\" class=\"blc-toggle-link\"><?php\r\n\t\t\t\t_e('Edit CSS', 'broken-link-checker');\r\n\t\t\t?></a>\r\n\t\t\t</p>\r\n\t\t\t\r\n\t\t\t<div id=\"removed-link-css-wrap\" <?php \r\n\t\t\t\tif ( !blcUtility::get_cookie('removed-link-css-wrap', false) ){\r\n\t\t\t\t\techo ' class=\"hidden\"';\r\n\t\t\t\t} \r\n\t\t\t?>>\r\n\t\t        <textarea name=\"removed_link_css\" id=\"removed_link_css\" cols='45' rows='4'><?php\r\n\t\t            if( isset($this->conf->options['removed_link_css']) )\r\n\t\t                echo $this->conf->options['removed_link_css'];\r\n\t\t        ?></textarea>\r\n\t\t        \r\n\t\t        <p class=\"description\"><?php\r\n\t\t\t    printf(\r\n\t\t\t        __('Example : Lorem ipsum <span %s>removed link</span>, dolor sit amet.', 'broken-link-checker'),\r\n\t\t\t        ' class=\"removed_link\"'\r\n\t\t        );\r\n\t\t\t\techo ' ', __('Click \"Save Changes\" to update example output.', 'broken-link-checker');\r\n\t\t\t\t?>\r\n\r\n\t\t\t\t</p>\r\n        \t</div>\r\n        \r\n        \t<p>\r\n        \t<label for='nofollow_broken_links'>\r\n        \t\t<input type=\"checkbox\" name=\"nofollow_broken_links\" id=\"nofollow_broken_links\"\r\n            \t<?php if ($this->conf->options['nofollow_broken_links']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Stop search engines from following broken links', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t</p>\r\n\r\n\t\t\t<p class=\"description\">\r\n\t\t\t\t<?php\r\n\t\t\t\techo _x(\r\n\t\t\t\t\t'These settings only apply to the content of posts, not comments or custom fields.',\r\n\t\t\t\t\t'\"Link tweaks\" settings',\r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t);\r\n\t\t\t\t?>\r\n\t\t\t</p>\r\n        </td>\r\n        </tr>\r\n\r\n\t\t\t<tr valign=\"top\">\r\n\t\t\t\t<th scope=\"row\"><?php echo _x('Suggestions', 'settings page', 'broken-link-checker'); ?></th>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"suggestions_enabled\" id=\"suggestions_enabled\"\r\n\t\t\t\t\t\t\t<?php checked($this->conf->options['suggestions_enabled']); ?>/>\r\n\t\t\t\t\t\t<?php _e('Suggest alternatives to broken links', 'broken-link-checker'); ?>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\r\n\t\t\t<tr valign=\"top\">\r\n\t\t\t\t<th scope=\"row\"><?php echo _x('Warnings', 'settings page', 'broken-link-checker'); ?></th>\r\n\t\t\t\t<td id=\"blc_warning_settings\">\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"warnings_enabled\" id=\"warnings_enabled\"\r\n\t\t\t\t\t\t\t<?php checked($this->conf->options['warnings_enabled']); ?>/>\r\n\t\t\t\t\t\t<?php _e('Show uncertain or minor problems as \"warnings\" instead of \"broken\"', 'broken-link-checker'); ?>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<p class=\"description\"><?php\r\n\t\t\t\t\t\t_e('Turning off this option will make the plugin report all problems as broken links.', 'broken-link-checker');\r\n\t\t\t\t\t?></p>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\r\n        </table>\r\n        \r\n        </div>\r\n        \r\n        <div id=\"section-where\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['where']; ?></h3>\r\n        \r\n        <table class=\"form-table\">\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Look for links in', 'broken-link-checker'); ?></th>\r\n        <td>\r\n    \t<?php\r\n    \tif ( !empty($modules['container']) ){\r\n    \t\tuasort($modules['container'], create_function('$a, $b', 'return strcasecmp($a[\"Name\"], $b[\"Name\"]);'));\r\n    \t\t$this->print_module_list($modules['container'], $this->conf->options);\r\n    \t}    \t\r\n    \t?>\r\n    \t</td></tr>\r\n    \t\r\n    \t<tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Post statuses', 'broken-link-checker'); ?></th>\r\n        <td>\r\n    \t<?php\r\n    \t    $available_statuses = get_post_stati(array('internal' => false), 'objects');\r\n    \t    \r\n    \t    if ( isset($this->conf->options['enabled_post_statuses']) ){\r\n    \t    \t$enabled_post_statuses = $this->conf->options['enabled_post_statuses'];\r\n    \t    } else {\r\n    \t    \t$enabled_post_statuses = array();\r\n    \t    }\r\n    \t    \r\n\t\t\tforeach($available_statuses as $status => $status_object){\r\n\t\t\t\tprintf(\r\n\t\t\t\t\t'<p><label><input type=\"checkbox\" name=\"enabled_post_statuses[]\" value=\"%s\"%s> %s</label></p>',\r\n\t\t\t\t\tesc_attr($status),\r\n\t\t\t\t\tin_array($status, $enabled_post_statuses)?' checked=\"checked\"':'',\r\n\t\t\t\t\t$status_object->label\r\n\t\t\t\t);\r\n\t\t\t}\r\n    \t?>\r\n    \t</td></tr>\r\n    \t\r\n        </table>\r\n        \r\n        </div>\r\n        \r\n        \r\n        <div id=\"section-which\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['which']; ?></h3>\r\n\t\t\r\n        <table class=\"form-table\">\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Link types', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        <?php\r\n        if ( !empty($modules['parser']) ){\r\n        \t$this->print_module_list($modules['parser'], $this->conf->options);\r\n        } else {\r\n        \techo __('Error : All link parsers missing!', 'broken-link-checker');\r\n        }\r\n    \t?>\r\n    \t</td>\r\n\t\t</tr>\r\n    \t\r\n    \t<tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Exclusion list', 'broken-link-checker'); ?></th>\r\n        <td><?php _e(\"Don't check links where the URL contains any of these words (one per line) :\", 'broken-link-checker'); ?><br/>\r\n        <textarea name=\"exclusion_list\" id=\"exclusion_list\" cols='45' rows='4'><?php\r\n            if( isset($this->conf->options['exclusion_list']) )\r\n                echo esc_textarea(implode(\"\\n\", $this->conf->options['exclusion_list']));\r\n        ?></textarea>\r\n\r\n        </td>\r\n        </tr>\r\n        \r\n        </table>\r\n        </div>\r\n        \r\n        <div id=\"section-how\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['how']; ?></h3>\r\n\t\t\r\n        <table class=\"form-table\">\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Check links using', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        <?php\r\n    \tif ( !empty($modules['checker']) ){\r\n    \t\t$modules['checker'] = array_reverse($modules['checker']);\r\n        \t$this->print_module_list($modules['checker'], $this->conf->options);\r\n        }\r\n    \t?>\r\n    \t</td></tr>\r\n        \r\n        </table>\r\n        </div>\r\n        \r\n        <div id=\"section-advanced\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['advanced']; ?></h3>\r\n        \r\n        <table class=\"form-table\">\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Timeout', 'broken-link-checker'); ?></th>\r\n        <td>\r\n\r\n\t\t<?php\r\n\t\t\r\n\t\tprintf(\r\n\t\t\t__('%s seconds', 'broken-link-checker'),\r\n\t\t\tsprintf(\r\n\t\t\t\t'<input type=\"text\" name=\"timeout\" id=\"blc_timeout\" value=\"%d\" size=\"5\" maxlength=\"3\" />', \r\n\t\t\t\t$this->conf->options['timeout']\r\n\t\t\t)\r\n\t\t);\r\n\t\t\r\n\t\t?>\r\n        <br/><span class=\"description\">\r\n        <?php _e('Links that take longer than this to load will be marked as broken.','broken-link-checker'); ?> \r\n\t\t</span>\r\n\r\n        </td>\r\n        </tr>\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Link monitor', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        \r\n        \t<p>\r\n\t\t\t<label for='run_in_dashboard'>\r\n\t\t\t\t\r\n\t        \t\t<input type=\"checkbox\" name=\"run_in_dashboard\" id=\"run_in_dashboard\"\r\n\t            \t<?php if ($this->conf->options['run_in_dashboard']) echo ' checked=\"checked\"'; ?>/>\r\n\t            \t<?php _e('Run continuously while the Dashboard is open', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t</p>\r\n\t\t\t\r\n\t\t\t<p>\r\n\t\t\t<label for='run_via_cron'>\r\n\t        \t\t<input type=\"checkbox\" name=\"run_via_cron\" id=\"run_via_cron\"\r\n\t            \t<?php if ($this->conf->options['run_via_cron']) echo ' checked=\"checked\"'; ?>/>\r\n\t            \t<?php _e('Run hourly in the background', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t</p>\t\t\r\n\r\n        </td>\r\n        </tr>\r\n\r\n        <tr valign=\"top\">\r\n\t        <th scope=\"row\"><?php _e('Show the dashboard widget for', 'broken-link-checker'); ?></th>\r\n\t        <td>\r\n\r\n\t\t        <?php\r\n\t\t\t\t$widget_caps = array(\r\n\t\t\t\t\t_x('Administrator', 'dashboard widget visibility', 'broken-link-checker') => 'manage_options',\r\n\t\t\t\t\t_x('Editor and above', 'dashboard widget visibility', 'broken-link-checker') => 'edit_others_posts',\r\n\t\t\t\t\t_x('Nobody (disables the widget)', 'dashboard widget visibility', 'broken-link-checker') => 'do_not_allow',\r\n\t\t\t\t);\r\n\r\n\t\t        foreach($widget_caps as $title => $capability) {\r\n\t\t\t        printf(\r\n\t\t\t\t        '<p><label><input type=\"radio\" name=\"dashboard_widget_capability\" value=\"%s\"%s> %s</label></p>',\r\n\t\t\t\t        esc_attr($capability),\r\n\t\t\t\t        checked($capability, $this->conf->get('dashboard_widget_capability'), false),\r\n\t\t\t\t        $title\r\n\t\t\t        );\r\n\t\t        }\r\n\t\t        ?>\r\n\t        </td>\r\n        </tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php echo _x('Show link actions', 'settings page', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\t\t\t\t<?php\r\n\t\t\t\t$show_link_actions = $this->conf->get('show_link_actions', array());\r\n\t\t\t\tforeach($available_link_actions as $action => $text) {\r\n\t\t\t\t\t$enabled = isset($show_link_actions[$action]) ? (bool)($show_link_actions[$action]) : true;\r\n\t\t\t\t\tprintf(\r\n\t\t\t\t\t\t'<p><label><input type=\"checkbox\" name=\"show_link_actions[%1$s]\" %3$s> %2$s</label></p>',\r\n\t\t\t\t\t\t$action,\r\n\t\t\t\t\t\t$text,\r\n\t\t\t\t\t\tchecked($enabled, true, false)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t?>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Max. execution time', 'broken-link-checker'); ?></th>\r\n        <td>\r\n\r\n\t\t<?php\r\n\t\t\r\n\t\tprintf(\r\n\t\t\t__('%s seconds', 'broken-link-checker'),\r\n\t\t\tsprintf(\r\n\t\t\t\t'<input type=\"text\" name=\"max_execution_time\" id=\"max_execution_time\" value=\"%d\" size=\"5\" maxlength=\"5\" />', \r\n\t\t\t\t$this->conf->options['max_execution_time']\r\n\t\t\t)\r\n\t\t);\r\n\t\t\r\n\t\t?> \r\n        <br/><span class=\"description\">\r\n        <?php\r\n        \r\n        _e('The plugin works by periodically launching a background job that parses your posts for links, checks the discovered URLs, and performs other time-consuming tasks. Here you can set for how long, at most, the link monitor may run each time before stopping.', 'broken-link-checker');\r\n\t\t\r\n\t\t?> \r\n\t\t</span>\r\n\r\n        </td>\r\n        </tr>\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Server load limit', 'broken-link-checker'); ?></th>\r\n        <td>\r\n\t\t<?php\r\n\t\t\r\n\t\t$load = blcUtility::get_server_load();\r\n\t\t$available = !empty($load);\r\n\r\n\t\tif ( $available ){\r\n\t\t\t$value = !empty($this->conf->options['server_load_limit'])?sprintf('%.2f', $this->conf->options['server_load_limit']):'';\r\n\t\t\tprintf(\r\n\t\t\t\t'<input type=\"text\" name=\"server_load_limit\" id=\"server_load_limit\" value=\"%s\" size=\"5\" maxlength=\"5\"/> ',\r\n\t\t\t\t$value\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tprintf(\r\n\t\t\t\t__('Current load : %s', 'broken-link-checker'),\r\n\t\t\t\t'<span id=\"wsblc_current_load\">...</span>'\r\n\t\t\t);\r\n\t\t\techo '<br/><span class=\"description\">';\r\n\t        printf(\r\n\t        \t__(\r\n\t\t\t\t\t'Link checking will be suspended if the average <a href=\"%s\">server load</a> rises above this number. Leave this field blank to disable load limiting.', \r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t'http://en.wikipedia.org/wiki/Load_(computing)'\r\n\t        );\r\n\t        echo '</span>';\r\n        \r\n        } else {\r\n        \techo '<input type=\"text\" disabled=\"disabled\" value=\"', esc_attr(__('Not available', 'broken-link-checker')), '\" size=\"13\"/><br>';\r\n        \techo '<span class=\"description\">';\r\n\t\t\t_e('Load limiting only works on Linux-like systems where <code>/proc/loadavg</code> is present and accessible.', 'broken-link-checker');\r\n\t\t\techo '</span>';\r\n\t\t}\r\n\t\t?> \r\n        </td>\r\n        </tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php _e('Target resource usage', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\t\t\t\t<?php\r\n\t\t\t\t$target_resource_usage = $this->conf->get('target_resource_usage', 0.25);\r\n\t\t\t\tprintf(\r\n\t\t\t\t\t'<input name=\"target_resource_usage\" value=\"%d\"\r\n\t\t\t\t\t\ttype=\"range\" min=\"1\" max=\"100\" id=\"target_resource_usage\">',\r\n\t\t\t\t\t$target_resource_usage * 100\r\n\t\t\t\t);\r\n\t\t\t\t?>\r\n\r\n\t\t\t\t<span id=\"target_resource_usage_percent\"><?php\r\n\t\t\t\t\techo sprintf('%.0f%%', $target_resource_usage * 100);\r\n\t\t\t\t?></span>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php _e('Logging', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label for='logging_enabled'>\r\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"logging_enabled\" id=\"logging_enabled\"\r\n\t\t\t\t\t\t\t<?php checked($this->conf->options['logging_enabled']); ?>/>\r\n\t\t\t\t\t\t<?php _e('Enable logging', 'broken-link-checker'); ?>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php _e('Log file location', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\r\n\t\t\t\t<div id=\"blc-logging-options\">\r\n\r\n\t\t\t\t<p>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input type=\"radio\" name=\"custom_log_file_enabled\" value=\"\"\r\n\t\t\t\t\t\t<?php checked(!$this->conf->options['custom_log_file_enabled']); ?>>\r\n\t\t\t\t\t<?php echo _x('Default', 'log file location', 'broken-link-checker'); ?>\r\n\t\t\t\t</label>\r\n\t\t\t\t<br>\r\n\t\t\t\t\t<span class=\"description\">\r\n\t\t\t\t\t\t<code><?php\r\n\t\t\t\t\t\t\techo self::get_default_log_directory(), '/', self::get_default_log_basename();\r\n\t\t\t\t\t\t?></code>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</p>\r\n\r\n\t\t\t\t<p>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input type=\"radio\" name=\"custom_log_file_enabled\" value=\"1\"\r\n\t\t\t\t\t\t<?php checked($this->conf->options['custom_log_file_enabled']); ?>>\r\n\t\t\t\t\t<?php echo _x('Custom', 'log file location', 'broken-link-checker'); ?>\r\n\t\t\t\t</label>\r\n\t\t\t\t<br><input type=\"text\" name=\"log_file\" id=\"log_file\" size=\"90\"\r\n\t\t\t\t\t\t   value=\"<?php echo esc_attr($this->conf->options['log_file']); ?>\">\r\n\t\t\t\t</p>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Forced recheck', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        \t<input class=\"button\" type=\"button\" name=\"start-recheck\" id=\"start-recheck\" \r\n\t\t\t\t  value=\"<?php _e('Re-check all pages', 'broken-link-checker'); ?>\"  />\r\n  \t\t\t<input type=\"hidden\" name=\"recheck\" value=\"\" id=\"recheck\" />\r\n\t\t\t<br />\r\n  \t\t\t<span class=\"description\"><?php\r\n\t\t\t  _e('The \"Nuclear Option\". Click this button to make the plugin empty its link database and recheck the entire site from scratch.', 'broken-link-checker');\r\n\t\t\t     \r\n\t  \t\t?></span>\r\n\t\t</td>\r\n\t\t</tr>\r\n        \r\n        </table>\r\n        </div>\r\n        \r\n        </div>\r\n        \r\n        <p class=\"submit\"><input type=\"submit\" name=\"submit\" class='button-primary' value=\"<?php _e('Save Changes') ?>\" /></p>\r\n        </form>\r\n        \r\n        </div> <!-- First postbox-container -->\r\n        \r\n        \r\n        </div>\r\n        \r\n        \r\n        \r\n        <?php\r\n        //The various JS for this page is stored in a separate file for the purposes readability.\r\n        include dirname($this->loader) . '/includes/admin/options-page-js.php';\r\n    }\r\n    \r\n    /**\r\n     * Output a list of modules and their settings.\r\n\t *  \r\n     * Each list entry will contain a checkbox that is checked if the module is \r\n     * currently active. \r\n     * \r\n     * @param array $modules Array of modules to display\r\n     * @param array $current_settings\r\n     * @return void\r\n     */\r\n    function print_module_list($modules, $current_settings){\r\n    \t$moduleManager = blcModuleManager::getInstance();\r\n    \t\r\n    \tforeach($modules as $module_id => $module_data){\r\n\t\t\t$module_id = $module_data['ModuleID'];\r\n\t\t\t\r\n\t\t\t$style = $module_data['ModuleHidden']?' style=\"display:none;\"':'';\r\n\t\t\t\r\n    \t\tprintf(\r\n    \t\t\t'<div class=\"module-container\" id=\"module-container-%s\"%s>',\r\n\t\t   \t\t$module_id,\r\n   \t\t\t\t$style\r\n\t\t\t);\r\n\t\t\t$this->print_module_checkbox($module_id, $module_data, $moduleManager->is_active($module_id));\r\n\t\t\t\r\n\t\t\t$extra_settings = apply_filters(\r\n\t\t\t\t'blc-module-settings-'.$module_id,\r\n\t\t\t\t'',\r\n\t\t\t\t$current_settings\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tif ( !empty($extra_settings) ){\r\n\t\t\t\t\r\n\t\t\t\tprintf(\r\n\t\t\t\t\t' | <a class=\"blc-toggle-link toggle-module-settings\" id=\"toggle-module-settings-%s\" href=\"#\">%s</a>',\r\n\t\t\t\t\t$module_id,\r\n\t\t\t\t\t__('Configure', 'broken-link-checker')\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t\t//The plugin remembers the last open/closed state of module configuration boxes\r\n\t\t\t\t$box_id = 'module-extra-settings-' . $module_id;\t\t\r\n\t\t\t\t$show = blcUtility::get_cookie(\r\n\t\t\t\t\t$box_id,\r\n\t\t\t\t\t$moduleManager->is_active($module_id)\r\n\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tprintf(\r\n\t\t\t\t\t'<div class=\"module-extra-settings%s\" id=\"%s\">%s</div>',\r\n\t\t\t\t\t$show?'':' hidden',\r\n\t\t\t\t\t$box_id,\r\n\t\t\t\t\t$extra_settings\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\techo '</div>';\r\n    \t}\r\n    }\r\n    \r\n    /**\r\n     * Output a checkbox for a module.\r\n     * \r\n     * Generates a simple checkbox that can be used to mark a module as active/inactive.\r\n     * If the specified module can't be deactivated (ModuleAlwaysActive = true), the checkbox\r\n\t * will be displayed in a disabled state and a hidden field will be created to make\r\n\t * form submissions work correctly.\r\n     * \r\n     * @param string $module_id Module ID.\r\n     * @param array $module_data Associative array of module data.\r\n     * @param bool $active If true, the newly created checkbox will start out checked.\r\n     * @return void\r\n     */\r\n    function print_module_checkbox($module_id, $module_data, $active = false){\r\n    \t$disabled = false;\r\n    \t$name_prefix = 'module';\r\n    \t$label_class = '';\r\n    \t$active = $active || $module_data['ModuleAlwaysActive'];\r\n    \t\r\n\t\tif ( $module_data['ModuleAlwaysActive'] ){\r\n\t\t\t$disabled = true;\r\n\t\t\t$name_prefix = 'module-always-active';\r\n\t\t}\r\n\t\t\r\n\t\t$checked = $active ? ' checked=\"checked\"':'';\r\n\t\tif ( $disabled ){\r\n\t\t\t$checked .= ' disabled=\"disabled\"';\r\n\t\t}\r\n\t\t\r\n\t\tprintf(\r\n\t\t\t'<label class=\"%s\">\r\n\t\t\t\t<input type=\"checkbox\" name=\"%s[%s]\" id=\"module-checkbox-%s\"%s /> %s\r\n\t\t\t</label>',\r\n\t\t\tesc_attr($label_class),\r\n\t\t\t$name_prefix,\r\n\t   \t\tesc_attr($module_id),\r\n\t\t\tesc_attr($module_id),\r\n\t\t\t$checked,\r\n\t\t\t$module_data['Name']\r\n\t\t);\r\n\t\t\r\n\t\tif ( $module_data['ModuleAlwaysActive'] ){\r\n\t\t\tprintf(\r\n\t\t\t\t'<input type=\"hidden\" name=\"module[%s]\" value=\"on\">',\r\n\t\t\t\tesc_attr($module_id)\r\n\t\t\t);\r\n\t\t}\r\n    }\r\n    \r\n    /**\r\n     * Add extra settings to the \"Custom fields\" entry on the plugin's config. page.\r\n\t * \r\n\t * Callback for the 'blc-module-settings-custom_field' filter.  \r\n     * \r\n     * @param string $html Current extra HTML\r\n     * @param array $current_settings The current plugin configuration.\r\n     * @return string New extra HTML.\r\n     */\r\n    function make_custom_field_input($html, $current_settings){\r\n    \t$html .= '<span class=\"description\">' . \r\n\t\t\t\t\t__(\r\n\t\t\t\t\t\t'Enter the names of custom fields you want to check (one per line). If a field contains HTML code, prefix its name with <code>html:</code>. For example, <code>html:field_name</code>.',\r\n\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t) .\r\n\t\t\t\t '</span>';\r\n    \t$html .= '<br><textarea name=\"blc_custom_fields\" id=\"blc_custom_fields\" cols=\"45\" rows=\"4\">';\r\n        if( isset($current_settings['custom_fields']) )\r\n            $html .= esc_textarea(implode(\"\\n\", $current_settings['custom_fields']));\r\n        $html .= '</textarea>';\r\n        \r\n        return $html;\r\n    }\r\n    \r\n    /**\r\n     * Enqueue CSS file for the plugin's Settings page.\r\n     * \r\n     * @return void\r\n     */\r\n    function options_page_css(){\r\n    \twp_enqueue_style('blc-options-page', plugins_url('css/options-page.css', BLC_PLUGIN_FILE), array(), '20141113');\r\n    \twp_enqueue_style('dashboard');\r\n\t}\r\n\t\r\n\r\n    /**\r\n     * Display the \"Broken Links\" page, listing links detected by the plugin and their status.\r\n     * \r\n     * @return void\r\n     */\r\n    function links_page(){\r\n        global $wpdb; /* @var wpdb $wpdb */\r\n        \r\n        $blc_link_query = blcLinkQuery::getInstance();\r\n\r\n\t\t//Cull invalid and missing modules so that we don't get dummy links/instances showing up.\r\n        $moduleManager = blcModuleManager::getInstance();\r\n        $moduleManager->validate_active_modules();\r\n        \r\n        if ( defined('BLC_DEBUG') && constant('BLC_DEBUG') ){\r\n        \t//Make module headers translatable. They need to be formatted corrrectly and \r\n        \t//placed in a .php file to be visible to the script(s) that generate .pot files.\r\n        \t$code = $moduleManager->_build_header_translation_code();\r\n        \tfile_put_contents( dirname($this->loader) . '/includes/extra-strings.php', $code );\r\n        }\r\n        \r\n        $action = !empty($_POST['action'])?$_POST['action']:'';\r\n        if ( intval($action) == -1 ){\r\n        \t//Try the second bulk actions box\r\n\t\t\t$action = !empty($_POST['action2'])?$_POST['action2']:'';\r\n\t\t}\r\n        \r\n        //Get the list of link IDs selected via checkboxes\r\n        $selected_links = array();\r\n\t\tif ( isset($_POST['selected_links']) && is_array($_POST['selected_links']) ){\r\n\t\t\t//Convert all link IDs to integers (non-numeric entries are converted to zero)\r\n\t\t\t$selected_links = array_map('intval', $_POST['selected_links']);\r\n\t\t\t//Remove all zeroes\r\n\t\t\t$selected_links = array_filter($selected_links);\r\n\t\t}\r\n        \r\n        $message = '';\r\n        $msg_class = 'updated';\r\n        \r\n        //Run the selected bulk action, if any\r\n        $force_delete = false;\r\n        switch ( $action ){\r\n        \tcase 'create-custom-filter':\r\n        \t\tlist($message, $msg_class) = $this->do_create_custom_filter();\r\n\t\t\t\tbreak;\r\n\t\t\t\t \r\n\t\t\tcase 'delete-custom-filter':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_delete_custom_filter();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t/** @noinspection PhpMissingBreakStatementInspection Deliberate fall-through. */\r\n\t\t\tcase 'bulk-delete-sources':\r\n\t\t\t\t$force_delete = true;\r\n\t\t\tcase 'bulk-trash-sources':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_delete_sources($selected_links, $force_delete);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'bulk-unlink':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_unlink($selected_links);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'bulk-deredirect':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_deredirect($selected_links);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'bulk-recheck':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_recheck($selected_links);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'bulk-not-broken':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_discard($selected_links);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'bulk-dismiss':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_dismiss($selected_links);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'bulk-edit':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_edit($selected_links);\r\n\t\t\t\tbreak;\r\n        }\r\n        \r\n\t\t\r\n\t\tif ( !empty($message) ){\r\n\t\t\techo '<div id=\"message\" class=\"'.$msg_class.' fade\"><p>'.$message.'</p></div>';\r\n\t\t}\r\n\t\t\r\n\t\t$start_time = microtime_float();\r\n\t\t\r\n        //Load custom filters, if any\r\n        $blc_link_query->load_custom_filters();\r\n\t\t\r\n\t\t//Calculate the number of links matching each filter\r\n\t\t$blc_link_query->count_filter_results();\r\n\t\t\r\n\t\t//Run the selected filter (defaults to displaying broken links)\r\n\t\t$selected_filter_id = isset($_GET['filter_id'])?$_GET['filter_id']:'broken';\r\n\t\t$current_filter = $blc_link_query->exec_filter(\r\n\t\t\t$selected_filter_id,\r\n\t\t\tisset($_GET['paged']) ? intval($_GET['paged']) : 1,\r\n\t\t\t$this->conf->options['table_links_per_page'], \r\n\t\t\t'broken',\r\n\t\t\tisset($_GET['orderby']) ? $_GET['orderby'] : '',\r\n\t\t\tisset($_GET['order']) ? $_GET['order'] : ''\r\n\t\t);\r\n\r\n\t\t//exec_filter() returns an array with filter data, including the actual filter ID that was used.\r\n\t\t$filter_id = $current_filter['filter_id'];\r\n\r\n\t\t//Error?\t\t\r\n\t\tif ( empty($current_filter['links']) && !empty($wpdb->last_error) ){\r\n\t\t\tprintf( __('Database error : %s', 'broken-link-checker'), $wpdb->last_error);\r\n\t\t}\r\n        ?>\r\n        \r\n<script type='text/javascript'>\r\n\tvar blc_current_filter = '<?php echo $filter_id; ?>';\r\n\tvar blc_is_broken_filter = <?php echo $current_filter['is_broken_filter'] ? 'true' : 'false'; ?>;\r\n\tvar blc_current_base_filter = '<?php echo esc_js($current_filter['base_filter']); ?>';\r\n\tvar blc_suggestions_enabled = <?php echo $this->conf->options['suggestions_enabled'] ? 'true' : 'false'; ?>;\r\n</script>\r\n        \r\n<div class=\"wrap\">\r\n\t<?php\r\n\t\t$blc_link_query->print_filter_heading($current_filter);\r\n\t\t$blc_link_query->print_filter_menu($filter_id);\r\n\t\t\r\n\t\t//Display the \"Search\" form and associated buttons.\r\n\t\t//The form requires the $filter_id and $current_filter variables to be set.\r\n\t\tinclude dirname($this->loader) . '/includes/admin/search-form.php';\r\n\t\t\r\n\t\t//If the user has decided to switch the table to a different mode (compact/full), \r\n\t\t//save the new setting.\r\n\t\tif ( isset($_GET['compact']) ){\r\n\t\t\t$this->conf->options['table_compact'] = (bool)$_GET['compact'];\r\n\t\t\t$this->conf->save_options();\r\n\t\t}\r\n\r\n\t\t//Display the links, if any\r\n        if( $current_filter['links'] && ( count($current_filter['links']) > 0 ) ) {\r\n        \t\r\n\t\t\tinclude dirname($this->loader) . '/includes/admin/table-printer.php';\r\n\t\t\t$table = new blcTablePrinter($this);\r\n\t\t\t$table->print_table(\r\n\t\t\t\t$current_filter,\r\n\t\t\t\t$this->conf->options['table_layout'], \r\n\t\t\t\t$this->conf->options['table_visible_columns'],\r\n\t\t\t\t$this->conf->options['table_compact']\r\n\t\t\t);\r\n\r\n        };\r\n\t\tprintf('<!-- Total elapsed : %.4f seconds -->', microtime_float() - $start_time); \r\n        \r\n\t\t//Load assorted JS event handlers and other shinies\r\n\t\tinclude dirname($this->loader) . '/includes/admin/links-page-js.php';\r\n\t\t\r\n\t\t?></div><?php\r\n    }\r\n    \r\n  /**\r\n   * Create a custom link filter using params passed in $_POST.\r\n   *\r\n   * @uses $_POST\r\n   * @uses $_GET to replace the current filter ID (if any) with that of the newly created filter.   \r\n   *\r\n   * @return array Message and the CSS class to apply to the message.  \r\n   */\r\n    function do_create_custom_filter(){\r\n\t    global $wpdb;\r\n\r\n\t\t//Create a custom filter!\r\n    \tcheck_admin_referer( 'create-custom-filter' );\r\n    \t$msg_class = 'updated';\r\n\r\n    \t//Filter name must be set\r\n\t\tif ( empty($_POST['name']) ){\r\n\t\t\t$message = __(\"You must enter a filter name!\", 'broken-link-checker');\r\n\t\t\t$msg_class = 'error';\r\n\t\t//Filter parameters (a search query) must also be set\r\n\t\t} elseif ( empty($_POST['params']) ){\r\n\t\t\t$message = __(\"Invalid search query.\", 'broken-link-checker');\r\n\t\t\t$msg_class = 'error';\r\n\t\t} else {\r\n\t\t\t//Save the new filter\r\n\t\t\t$name = strip_tags(strval($_POST['name']));\r\n\t\t\t$blc_link_query = blcLinkQuery::getInstance();\r\n\t\t\t$filter_id = $blc_link_query->create_custom_filter($name, $_POST['params']);\r\n\t\t\t\r\n\t\t\tif ( $filter_id ){\r\n\t\t\t\t//Saved\r\n\t\t\t\t$message = sprintf( __('Filter \"%s\" created', 'broken-link-checker'), $name);\r\n\t\t\t\t//A little hack to make the filter active immediately\r\n\t\t\t\t$_GET['filter_id'] = $filter_id;\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t//Error\r\n\t\t\t\t$message = sprintf( __(\"Database error : %s\", 'broken-link-checker'), $wpdb->last_error);\r\n\t\t\t\t$msg_class = 'error';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Delete a custom link filter.\r\n   *\r\n   * @uses $_POST\r\n   *\r\n   * @return array Message and a CSS class to apply to the message. \r\n   */\r\n\tfunction do_delete_custom_filter(){\r\n\t\t//Delete an existing custom filter!\r\n\t\tcheck_admin_referer( 'delete-custom-filter' );\r\n\t\t$msg_class = 'updated';\r\n\t\t\r\n\t\t//Filter ID must be set\r\n\t\tif ( empty($_POST['filter_id']) ){\r\n\t\t\t$message = __(\"Filter ID not specified.\", 'broken-link-checker');\r\n\t\t\t$msg_class = 'error';\r\n\t\t} else {\r\n\t\t\t//Try to delete the filter\r\n\t\t\t$blc_link_query = blcLinkQuery::getInstance();\r\n\t\t\tif ( $blc_link_query->delete_custom_filter($_POST['filter_id']) ){\r\n\t\t\t\t//Success\r\n\t\t\t\t$message = __('Filter deleted', 'broken-link-checker');\r\n\t\t\t} else {\r\n\t\t\t\t//Either the ID is wrong or there was some other error\r\n\t\t\t\t$message = __('Database error : %s', 'broken-link-checker');\r\n\t\t\t\t$msg_class = 'error';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Modify multiple links to point to their target URLs.\r\n   *\r\n   * @param array $selected_links\r\n   * @return array The message to display and its CSS class.\r\n   */\r\n\tfunction do_bulk_deredirect($selected_links){\r\n\t\t//For all selected links, replace the URL with the final URL that it redirects to.\r\n\t\t\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\t\t\t\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ) {\t\r\n\t\t\t//Fetch all the selected links\r\n\t\t\t$links = blc_get_links(array(\r\n\t\t\t\t'link_ids' => $selected_links,\r\n\t\t\t\t'purpose' => BLC_FOR_EDITING,\r\n\t\t\t));\r\n\t\t\t\r\n\t\t\tif ( count($links) > 0 ) {\r\n\t\t\t\t$processed_links = 0;\r\n\t\t\t\t$failed_links = 0;\r\n\t\t\t\t\r\n\t\t\t\t//Deredirect all selected links\r\n\t\t\t\tforeach($links as $link){\r\n\t\t\t\t\t$rez = $link->deredirect();\r\n\t\t\t\t\tif ( !is_wp_error($rez) && empty($rez['errors'] )){\r\n\t\t\t\t\t\t$processed_links++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$failed_links++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\t$message = sprintf(\r\n\t\t\t\t\t_n(\r\n\t\t\t\t\t\t'Replaced %d redirect with a direct link',\r\n\t\t\t\t\t\t'Replaced %d redirects with direct links',\r\n\t\t\t\t\t\t$processed_links, \r\n\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t),\r\n\t\t\t\t\t$processed_links\r\n\t\t\t\t);\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif ( $failed_links > 0 ) {\r\n\t\t\t\t\t$message .= '<br>' . sprintf(\r\n\t\t\t\t\t\t_n(\r\n\t\t\t\t\t\t\t'Failed to fix %d redirect', \r\n\t\t\t\t\t\t\t'Failed to fix %d redirects',\r\n\t\t\t\t\t\t\t$failed_links,\r\n\t\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t$failed_links\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$message = __('None of the selected links are redirects!', 'broken-link-checker');\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Edit multiple links in one go.\r\n   *\r\n   * @param array $selected_links\r\n   * @return array The message to display and its CSS class.\r\n   */\r\n\tfunction do_bulk_edit($selected_links){\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\t\t\t\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\t$post = $_POST;\r\n\t\tif ( function_exists('wp_magic_quotes') ){\r\n\t\t\t$post = stripslashes_deep($post); //Ceterum censeo, WP shouldn't mangle superglobals.\r\n\t\t}\r\n\t\t\r\n\t\t$search = isset($post['search']) ? $post['search'] : '';\r\n\t\t$replace = isset($post['replace']) ? $post['replace'] : ''; \r\n\t\t$use_regex = !empty($post['regex']);\r\n\t\t$case_sensitive = !empty($post['case_sensitive']);\r\n\t\t\r\n\t\t$delimiter = '`'; //Pick a char that's uncommon in URLs so that escaping won't usually be a problem\r\n\t\tif ( $use_regex ){\r\n\t\t\t$search = $delimiter . $this->escape_regex_delimiter($search, $delimiter) . $delimiter;\r\n\t\t\tif ( !$case_sensitive ){\r\n\t\t\t\t$search .= 'i';\r\n\t\t\t}\r\n\t\t} elseif ( !$case_sensitive ) {\r\n\t\t\t//str_ireplace() would be more appropriate for case-insensitive, non-regexp replacement,\r\n\t\t\t//but that's only available in PHP5.\r\n\t\t\t$search = $delimiter . preg_quote($search, $delimiter) . $delimiter . 'i';\r\n\t\t\t$use_regex = true;\r\n\t\t}\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ) {\t\r\n\t\t\tset_time_limit(300); //In case the user decides to edit hundreds of links at once\r\n\t\t\t\r\n\t\t\t//Fetch all the selected links\r\n\t\t\t$links = blc_get_links(array(\r\n\t\t\t\t'link_ids' => $selected_links,\r\n\t\t\t\t'purpose' => BLC_FOR_EDITING,\r\n\t\t\t));\r\n\t\t\t\r\n\t\t\tif ( count($links) > 0 ) {\r\n\t\t\t\t$processed_links = 0;\r\n\t\t\t\t$failed_links = 0;\r\n\t\t\t\t$skipped_links = 0;\r\n\t\t\t\t\r\n\t\t\t\t//Edit the links\r\n\t\t\t\tforeach($links as $link){\r\n\t\t\t\t\tif ( $use_regex ){\r\n\t\t\t\t\t\t$new_url = preg_replace($search, $replace, $link->url);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$new_url = str_replace($search, $replace, $link->url);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ( $new_url == $link->url ){\r\n\t\t\t\t\t\t$skipped_links++;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t$rez = $link->edit($new_url);\r\n\t\t\t\t\tif ( !is_wp_error($rez) && empty($rez['errors'] )){\r\n\t\t\t\t\t\t$processed_links++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$failed_links++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\t$message .= sprintf(\r\n\t\t\t\t\t_n(\r\n\t\t\t\t\t\t'%d link updated.',\r\n\t\t\t\t\t\t'%d links updated.',\r\n\t\t\t\t\t\t$processed_links, \r\n\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t),\r\n\t\t\t\t\t$processed_links\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t\tif ( $failed_links > 0 ) {\r\n\t\t\t\t\t$message .= '<br>' . sprintf(\r\n\t\t\t\t\t\t_n(\r\n\t\t\t\t\t\t\t'Failed to update %d link.', \r\n\t\t\t\t\t\t\t'Failed to update %d links.',\r\n\t\t\t\t\t\t\t$failed_links,\r\n\t\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t$failed_links\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\r\n\t/**\r\n\t * Escape all instances of the $delimiter character with a backslash (unless already escaped).\r\n\t *\r\n\t * @param string $pattern\r\n\t * @param string $delimiter\r\n\t * @return string\r\n\t */\r\n\tprivate function escape_regex_delimiter($pattern, $delimiter) {\r\n\t\tif ( empty($pattern) ) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\t$output = '';\r\n\t\t$length = strlen($pattern);\r\n\t\t$escaped = false;\r\n\r\n\t\tfor ($i = 0; $i < $length; $i++) {\r\n\t\t\t$char = $pattern[$i];\r\n\r\n\t\t\tif ( $escaped ) {\r\n\t\t\t\t$escaped = false;\r\n\t\t\t} else {\r\n\t\t\t\tif ( $char == '\\\\' ) {\r\n\t\t\t\t\t$escaped = true;\r\n\t\t\t\t} else if ( $char == $delimiter ) {\r\n\t\t\t\t\t$char = '\\\\' . $char;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$output .= $char;\r\n\t\t}\r\n\r\n\t\treturn $output;\r\n\t}\r\n\t\r\n  /**\r\n   * Unlink multiple links.\r\n   *\r\n   * @param array $selected_links\r\n   * @return array Message and a CSS classname.\r\n   */\r\n\tfunction do_bulk_unlink($selected_links){\r\n\t\t//Unlink all selected links.\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\t\t\t\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ) {\t\r\n\t\t\t\r\n\t\t\t//Fetch all the selected links\r\n\t\t\t$links = blc_get_links(array(\r\n\t\t\t\t'link_ids' => $selected_links,\r\n\t\t\t\t'purpose' => BLC_FOR_EDITING,\r\n\t\t\t));\r\n\t\t\t\r\n\t\t\tif ( count($links) > 0 ) {\r\n\t\t\t\t$processed_links = 0;\r\n\t\t\t\t$failed_links = 0;\r\n\t\t\t\t\r\n\t\t\t\t//Unlink (delete) each one\r\n\t\t\t\tforeach($links as $link){\r\n\t\t\t\t\t$rez = $link->unlink();\r\n\t\t\t\t\tif ( ($rez == false) || is_wp_error($rez) ){\r\n\t\t\t\t\t\t$failed_links++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$processed_links++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\t//This message is slightly misleading - it doesn't account for the fact that \r\n\t\t\t\t//a link can be present in more than one post.\r\n\t\t\t\t$message = sprintf(\r\n\t\t\t\t\t_n(\r\n\t\t\t\t\t\t'%d link removed',\r\n\t\t\t\t\t\t'%d links removed',\r\n\t\t\t\t\t\t$processed_links, \r\n\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t),\r\n\t\t\t\t\t$processed_links\r\n\t\t\t\t);\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif ( $failed_links > 0 ) {\r\n\t\t\t\t\t$message .= '<br>' . sprintf(\r\n\t\t\t\t\t\t_n(\r\n\t\t\t\t\t\t\t'Failed to remove %d link', \r\n\t\t\t\t\t\t\t'Failed to remove %d links',\r\n\t\t\t\t\t\t\t$failed_links,\r\n\t\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t$failed_links\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Delete or trash posts, bookmarks and other items that contain any of the specified links.\r\n   * \r\n   * Will prefer moving stuff to trash to permanent deletion. If it encounters an item that \r\n   * can't be moved to the trash, it will skip that item by default.\r\n   *\r\n   * @param array $selected_links An array of link IDs\r\n   * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.\r\n   * @return array Confirmation message and its CSS class.\r\n   */\r\n\tfunction do_bulk_delete_sources($selected_links, $force_delete = false){\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\t\t\r\n\t\t//Delete posts, blogroll entries and any other link containers that contain any of the selected links.\r\n\t\t//\r\n\t\t//Note that once all containers containing a particular link have been deleted,\r\n\t\t//there is no need to explicitly delete the link record itself. The hooks attached to \r\n\t\t//the actions that execute when something is deleted (e.g. \"post_deleted\") will \r\n\t\t//take care of that. \r\n\t\t\t\t\t\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ) {\t\r\n\t\t\t$messages = array();\r\n\t\t\t\r\n\t\t\t//Fetch all the selected links\r\n\t\t\t$links = blc_get_links(array(\r\n\t\t\t\t'link_ids' => $selected_links,\r\n\t\t\t\t'load_instances' => true,\r\n\t\t\t));\r\n\t\t\t\r\n\t\t\t//Make a list of all containers associated with these links, with each container\r\n\t\t\t//listed only once.\r\n\t\t\t$containers = array();\r\n\t\t\tforeach($links as $link){ /* @var blcLink $link */\r\n\t\t\t\t$instances = $link->get_instances();\r\n\t\t\t\tforeach($instances as $instance){ /* @var blcLinkInstance $instance */\r\n\t\t\t\t\t$key = $instance->container_type . '|' . $instance->container_id;\r\n\t\t\t\t\t$containers[$key] = array($instance->container_type, $instance->container_id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Instantiate the containers\r\n\t\t\t$containers = blcContainerHelper::get_containers($containers);\r\n\r\n\t\t\t//Delete/trash their associated entities\r\n\t\t\t$deleted = array();\r\n\t\t\t$skipped = array();\r\n\t\t\tforeach($containers as $container){ /* @var blcContainer $container */\r\n\t\t\t\tif ( !$container->current_user_can_delete() ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif ( $force_delete ){\r\n\t\t\t\t\t$rez = $container->delete_wrapped_object();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif ( $container->can_be_trashed() ){\r\n\t\t\t\t\t\t$rez = $container->trash_wrapped_object();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$skipped[] = $container; \r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif ( is_wp_error($rez) ){ /* @var WP_Error $rez */\r\n\t\t\t\t\t//Record error messages for later display\r\n\t\t\t\t\t$messages[] = $rez->get_error_message();\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//Keep track of how many of each type were deleted.\r\n\t\t\t\t\t$container_type = $container->container_type;\r\n\t\t\t\t\tif ( isset($deleted[$container_type]) ){\r\n\t\t\t\t\t\t$deleted[$container_type]++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$deleted[$container_type] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Generate delete confirmation messages\r\n\t\t\tforeach($deleted as $container_type => $number){\r\n\t\t\t\tif ( $force_delete ){\r\n\t\t\t\t\t$messages[] = blcContainerHelper::ui_bulk_delete_message($container_type, $number);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$messages[] = blcContainerHelper::ui_bulk_trash_message($container_type, $number);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//If some items couldn't be trashed, let the user know\r\n\t\t\tif ( count($skipped) > 0 ){\r\n\t\t\t\t$message = sprintf(\r\n\t\t\t\t\t_n(\r\n\t\t\t\t\t\t\"%d item was skipped because it can't be moved to the Trash. You need to delete it manually.\",\r\n\t\t\t\t\t\t\"%d items were skipped because they can't be moved to the Trash. You need to delete them manually.\",\r\n\t\t\t\t\t\tcount($skipped)\r\n\t\t\t\t\t),\r\n\t\t\t\t\tcount($skipped)\r\n\t\t\t\t);\r\n\t\t\t\t$message .= '<br><ul>';\r\n\t\t\t\tforeach($skipped as $container){\r\n\t\t\t\t\t$message .= sprintf(\r\n\t\t\t\t\t\t'<li>%s</li>',\r\n\t\t\t\t\t\t$container->ui_get_source('')\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t$message .= '</ul>';\r\n\t\t\t\t\r\n\t\t\t\t$messages[] = $message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( count($messages) > 0 ){\r\n\t\t\t\t$message = implode('<p>', $messages);\r\n\t\t\t} else {\r\n\t\t\t\t$message = __(\"Didn't find anything to delete!\", 'broken-link-checker');\r\n\t\t\t\t$msg_class = 'error';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Mark multiple links as unchecked.\r\n   *\r\n   * @param array $selected_links An array of link IDs\r\n   * @return array Confirmation nessage and the CSS class to use with that message.\r\n   */\r\n\tfunction do_bulk_recheck($selected_links){\r\n\t\t/** @var wpdb $wpdb */\r\n\t\tglobal $wpdb;\r\n\t\t\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\r\n\t\tcheck_admin_referer('bulk-action');\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ){\r\n\t\t\t$q = \"UPDATE {$wpdb->prefix}blc_links \r\n\t\t\t\t  SET last_check_attempt = '0000-00-00 00:00:00' \r\n\t\t\t\t  WHERE link_id IN (\".implode(', ', $selected_links).\")\";\r\n\t\t\t$changes = $wpdb->query($q);\r\n\t\t\t\r\n\t\t\t$message = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t\"%d link scheduled for rechecking\",\r\n\t\t\t\t\t\"%d links scheduled for rechecking\",\r\n\t\t\t\t\t$changes, \r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t$changes\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Mark multiple links as not broken.\r\n\t * \r\n\t * @param array $selected_links An array of link IDs\r\n\t * @return array Confirmation nessage and the CSS class to use with that message.\r\n\t */\r\n\tfunction do_bulk_discard($selected_links){\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\t$messages = array();\r\n\t\t$msg_class = 'updated';\r\n\t\t$processed_links = 0;\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ){\r\n\t\t\tforeach($selected_links as $link_id){\r\n\t\t\t\t//Load the link\r\n\t\t\t\t$link = new blcLink( intval($link_id) );\r\n\t\t\t\t\r\n\t\t\t\t//Skip links that don't actually exist\r\n\t\t\t\tif ( !$link->valid() ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Skip links that weren't actually detected as broken\r\n\t\t\t\tif ( !$link->broken && !$link->warning ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Make it appear \"not broken\"\r\n\t\t\t\t$link->broken = false;\r\n\t\t\t\t$link->warning = false;\r\n\t\t\t\t$link->false_positive = true;\r\n\t\t\t\t$link->last_check_attempt = time();\r\n\t\t\t\t$link->log = __(\"This link was manually marked as working by the user.\", 'broken-link-checker');\r\n\t\t\t\t\r\n\t\t\t\t//Save the changes\r\n\t\t\t\tif ( $link->save() ){\r\n\t\t\t\t\t$processed_links++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$messages[] = sprintf(\r\n\t\t\t\t\t\t__(\"Couldn't modify link %d\", 'broken-link-checker'),\r\n\t\t\t\t\t\t$link_id\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif ( $processed_links > 0 ){\r\n\t\t\t$messages[] = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t'%d link marked as not broken',\r\n\t\t\t\t\t'%d links marked as not broken',\r\n\t\t\t\t\t$processed_links, \r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t$processed_links\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn array(implode('<br>', $messages), $msg_class);\r\n\t}\r\n\r\n\t/**\r\n\t * Dismiss multiple links.\r\n\t *\r\n\t * @param array $selected_links An array of link IDs\r\n\t * @return array Confirmation message and the CSS class to use with that message.\r\n\t */\r\n\tfunction do_bulk_dismiss($selected_links){\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\r\n\t\t$messages = array();\r\n\t\t$msg_class = 'updated';\r\n\t\t$processed_links = 0;\r\n\r\n\t\tif ( count($selected_links) > 0 ){\r\n\t\t\tforeach($selected_links as $link_id){\r\n\t\t\t\t//Load the link\r\n\t\t\t\t$link = new blcLink( intval($link_id) );\r\n\r\n\t\t\t\t//Skip links that don't actually exist\r\n\t\t\t\tif ( !$link->valid() ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//We can only dismiss broken links and redirects.\r\n\t\t\t\tif ( !($link->broken || $link->warning || ($link->redirect_count > 0)) ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$link->dismissed = true;\r\n\r\n\t\t\t\t//Save the changes\r\n\t\t\t\tif ( $link->save() ){\r\n\t\t\t\t\t$processed_links++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$messages[] = sprintf(\r\n\t\t\t\t\t\t__(\"Couldn't modify link %d\", 'broken-link-checker'),\r\n\t\t\t\t\t\t$link_id\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( $processed_links > 0 ){\r\n\t\t\t$messages[] = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t'%d link dismissed',\r\n\t\t\t\t\t'%d links dismissed',\r\n\t\t\t\t\t$processed_links,\r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t$processed_links\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn array(implode('<br>', $messages), $msg_class);\r\n\t}\r\n\t\r\n    \r\n\t/**\r\n\t * Enqueue CSS files for the \"Broken Links\" page\r\n\t * \r\n\t * @return void\r\n\t */\r\n\tfunction links_page_css(){\r\n\t\twp_enqueue_style('blc-links-page', plugins_url('css/links-page.css', $this->loader), array(), '20141113-2');\r\n\t}\r\n\r\n\t/**\r\n\t * Show an admin notice that explains what the \"Warnings\" section under \"Tools -> Broken Links\" does.\r\n\t * The user can hide the notice.\r\n\t */\r\n\tpublic function show_warnings_section_notice() {\r\n\t\t$is_warnings_section = isset($_GET['filter_id'])\r\n\t\t\t&& ($_GET['filter_id'] === 'warnings')\r\n\t\t\t&& isset($_GET['page'])\r\n\t\t\t&& ($_GET['page'] === 'view-broken-links');\r\n\r\n\t\tif ( !($is_warnings_section && current_user_can('edit_others_posts')) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Let the user hide the notice.\r\n\t\t$conf = blc_get_configuration();\r\n\t\t$notice_name = 'show_warnings_section_hint';\r\n\r\n\t\tif ( isset($_GET[$notice_name]) && is_numeric($_GET[$notice_name]) ) {\r\n\t\t\t$conf->set($notice_name, (bool)$_GET[$notice_name]);\r\n\t\t\t$conf->save_options();\r\n\t\t}\r\n\t\tif ( !$conf->get($notice_name, true) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tprintf(\r\n\t\t\t'<div class=\"updated\">\r\n\t\t\t\t\t<p>%1$s</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<a href=\"%2$s\">%3$s</a> |\r\n\t\t\t\t\t\t<a href=\"%4$s\">%5$s</a>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t</div>',\r\n\t\t\t__(\r\n\t\t\t\t'The \"Warnings\" page lists problems that are probably temporary or suspected to be false positives.<br> Warnings that persist for a long time will usually be reclassified as broken links.',\r\n\t\t\t\t'broken-link-checker'\r\n\t\t\t),\r\n\t\t\tadd_query_arg($notice_name, '0'),\r\n\t\t\t_x(\r\n\t\t\t\t'Hide notice',\r\n\t\t\t\t'admin notice under Tools - Broken links - Warnings',\r\n\t\t\t\t'broken-link-checker'\r\n\t\t\t),\r\n\t\t\tadmin_url('options-general.php?page=link-checker-settings#blc_warning_settings'),\r\n\t\t\t_x(\r\n\t\t\t\t'Change warning settings',\r\n\t\t\t\t'a link from the admin notice under Tools - Broken links - Warnings',\r\n\t\t\t\t'broken-link-checker'\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Generate the HTML for the plugin's Screen Options panel.\r\n\t * \r\n\t * @return string\r\n\t */\r\n\tfunction screen_options_html(){\r\n\t\t//Update the links-per-page setting when \"Apply\" is clicked\r\n\t\tif ( isset($_POST['per_page']) && is_numeric($_POST['per_page']) ) {\r\n\t\t\tcheck_admin_referer( 'screen-options-nonce', 'screenoptionnonce' );\r\n\t\t\t$per_page = intval($_POST['per_page']);\r\n\t\t\tif ( ($per_page >= 1) && ($per_page <= 500) ){\r\n\t\t\t\t$this->conf->options['table_links_per_page'] = $per_page;\r\n\t\t\t\t$this->conf->save_options();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//Let the user show/hide individual table columns\r\n\t\t$html = '<h5>' . __('Table columns', 'broken-link-checker') . '</h5>';\r\n\t\t\r\n\t\tinclude dirname($this->loader) . '/includes/admin/table-printer.php';\r\n\t\t$table = new blcTablePrinter($this);\r\n\t\t$available_columns = $table->get_layout_columns($this->conf->options['table_layout']);\r\n\t\t\r\n\t\t$html .= '<div id=\"blc-column-selector\" class=\"metabox-prefs\">';\r\n\t\t\r\n\t\tforeach( $available_columns as $column_id => $data ){\r\n\t\t\t$html .= sprintf(\r\n\t\t\t\t'<label><input type=\"checkbox\" name=\"visible_columns[%s]\"%s>%s</label>',\r\n\t\t\t\tesc_attr($column_id),\r\n\t\t\t\tin_array($column_id, $this->conf->options['table_visible_columns']) ? ' checked=\"checked\"' : '',\r\n\t\t\t\t$data['heading']\r\n\t\t\t);\r\n\t\t} \r\n\t\t\r\n\t\t$html .= '</div>';\r\n\t\t\r\n\t\t$html .= '<h5>' . __('Show on screen') . '</h5>';\r\n\t\t$html .= '<div class=\"screen-options\">';\r\n\t\t$html .= sprintf(\r\n\t\t\t'<input type=\"text\" name=\"per_page\" maxlength=\"3\" value=\"%d\" class=\"screen-per-page\" id=\"blc_links_per_page\" />\r\n\t\t\t<label for=\"blc_links_per_page\">%s</label>\r\n\t\t\t<input type=\"button\" class=\"button\" value=\"%s\" id=\"blc-per-page-apply-button\" /><br />',\r\n\t\t\t$this->conf->options['table_links_per_page'],\r\n\t\t\t__('links', 'broken-link-checker'),\r\n\t\t\t__('Apply')\r\n\t\t);\r\n\t\t$html .= '</div>';\r\n\t\t\r\n\t\t$html .= '<h5>' . __('Misc', 'broken-link-checker') . '</h5>';\r\n\t\t$html .= '<div class=\"screen-options\">';\r\n\t\t/*\r\n\t\tDisplay a checkbox in \"Screen Options\" that lets the user highlight links that \r\n\t\thave been broken for at least X days.  \r\n\t\t*/\r\n\t\t$html .= sprintf(\r\n\t\t\t'<label><input type=\"checkbox\" id=\"highlight_permanent_failures\" name=\"highlight_permanent_failures\"%s> ',\r\n\t\t\t$this->conf->options['highlight_permanent_failures'] ? ' checked=\"checked\"' : ''\r\n\t\t);\r\n\t\t$input_box = sprintf(\r\n        \t'</label><input type=\"text\" name=\"failure_duration_threshold\" id=\"failure_duration_threshold\" value=\"%d\" size=\"2\"><label for=\"highlight_permanent_failures\">',\r\n        \t$this->conf->options['failure_duration_threshold']\r\n\t\t);\r\n        $html .= sprintf(\r\n\t\t\t__('Highlight links broken for at least %s days', 'broken-link-checker'),\r\n\t\t\t$input_box\r\n\t\t);\r\n\t\t$html .= '</label>';\r\n\t\t\r\n\t\t//Display a checkbox for turning colourful link status messages on/off\r\n\t\t$html .= sprintf(\r\n\t\t\t'<br/><label><input type=\"checkbox\" id=\"table_color_code_status\" name=\"table_color_code_status\"%s> %s</label>',\r\n\t\t\t$this->conf->options['table_color_code_status'] ? ' checked=\"checked\"' : '',\r\n\t\t\t__('Color-code status codes', 'broken-link-checker')\r\n\t\t);\r\n\t\t\r\n\t\t$html .= '</div>';\r\n\t\t\r\n\t\treturn $html;\r\n\t}\r\n\t\r\n\t/**\r\n\t * AJAX callback for saving the \"Screen Options\" panel settings\r\n\t * \r\n\t * @param array $form\r\n\t * @return void\r\n\t */\r\n\tfunction ajax_save_screen_options($form){\r\n\t\tif ( !current_user_can('edit_others_posts') ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker') \r\n\t\t\t )));\r\n\t\t}\r\n\t\t\r\n\t\t$this->conf->options['highlight_permanent_failures'] = !empty($form['highlight_permanent_failures']);\r\n\t\t$this->conf->options['table_color_code_status'] = !empty($form['table_color_code_status']);\r\n\t\t\r\n\t\t$failure_duration_threshold = intval($form['failure_duration_threshold']);\r\n\t\tif ( $failure_duration_threshold >=1 ){\r\n\t\t\t$this->conf->options['failure_duration_threshold'] = $failure_duration_threshold;\r\n\t\t}\r\n\t\t\r\n\t\tif ( isset($form['visible_columns']) && is_array($form['visible_columns']) ){\r\n\t\t\t$this->conf->options['table_visible_columns'] = array_keys($form['visible_columns']);\r\n\t\t}\r\n\t\t\r\n\t\t$this->conf->save_options();\r\n\t\tdie('1');\r\n\t}\r\n\t\r\n\tfunction start_timer(){\r\n\t\t$this->execution_start_time = microtime_float();\r\n\t}\r\n\t\r\n\tfunction execution_time(){\r\n\t\treturn microtime_float() - $this->execution_start_time;\r\n\t}\r\n\t\r\n  /**\r\n   * The main worker function that does all kinds of things.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction work(){\r\n\t\tglobal $blclog;\r\n\r\n\t\t//Close the session to prevent lock-ups.\r\n\t\t//PHP sessions are blocking. session_start() will wait until all other scripts that are using the same session\r\n\t\t//are finished. As a result, a long-running script that unintentionally keeps the session open can cause\r\n\t\t//the entire site to \"lock up\" for the current user/browser. WordPress itself doesn't use sessions, but some\r\n\t\t//plugins do, so we should explicitly close the session (if any) before starting the worker.\r\n\t\tif ( session_id() != '' ) {\r\n\t\t\tsession_write_close();\r\n\t\t}\r\n\t\t\r\n\t\tif ( !$this->acquire_lock() ){\r\n\t\t\t//FB::warn(\"Another instance of BLC is already working. Stop.\");\r\n\t\t\t$blclog->info('Another instance of BLC is already working. Stop.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( $this->server_too_busy() ){\r\n\t\t\t//FB::warn(\"Server is too busy. Stop.\");\r\n\t\t\t$blclog->warn('Server load is too high, stopping.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t$this->start_timer();\r\n\t\t$blclog->info('work() starts');\r\n\r\n\t\t$max_execution_time = $this->conf->options['max_execution_time'];\r\n\t\r\n\t\t/*****************************************\r\n\t\t\t\t\t\tPreparation\r\n\t\t******************************************/\r\n\t\t// Check for safe mode\r\n\t\tif( blcUtility::is_safe_mode() ){\r\n\t\t    // Do it the safe mode way - obey the existing max_execution_time setting\r\n\t\t    $t = ini_get('max_execution_time');\r\n\t\t    if ($t && ($t < $max_execution_time)) \r\n\t\t    \t$max_execution_time = $t-1;\r\n\t\t} else {\r\n\t\t    // Do it the regular way\r\n\t\t    @set_time_limit( $max_execution_time * 2 ); //x2 should be plenty, running any longer would mean a glitch.\r\n\t\t}\r\n\t\t\r\n\t\t//Don't stop the script when the connection is closed\r\n\t\tignore_user_abort( true );\r\n\r\n\t\t//Close the connection as per http://www.php.net/manual/en/features.connection-handling.php#71172\r\n\t\t//This reduces resource usage.\r\n\t\t//(Disable when debugging or you won't get the FirePHP output)\r\n\t\tif (\r\n\t\t\t!headers_sent()\r\n\t\t\t&& (defined('DOING_AJAX') && constant('DOING_AJAX'))\r\n\t\t\t&& (!defined('BLC_DEBUG') || !constant('BLC_DEBUG'))\r\n\t\t){\r\n\t\t\t@ob_end_clean(); //Discard the existing buffer, if any\r\n\t \t\theader(\"Connection: close\");\r\n\t\t\tob_start();\r\n\t\t\techo ('Connection closed'); //This could be anything\r\n\t\t\t$size = ob_get_length();\r\n\t\t\theader(\"Content-Length: $size\");\r\n\t \t\tob_end_flush(); // Strange behaviour, will not work\r\n\t \t\tflush();        // Unless both are called !\r\n \t\t}\r\n \t\t\r\n \t\t//Load modules for this context\r\n \t\t$moduleManager = blcModuleManager::getInstance();\r\n \t\t$moduleManager->load_modules('work');\r\n\r\n\t\t$target_usage_fraction = $this->conf->get('target_resource_usage', 0.25);\r\n\t\t//Target usage must be between 1% and 100%.\r\n\t\t$target_usage_fraction = max(min($target_usage_fraction, 1), 0.01);\r\n \t\t\r\n \t\t\r\n\t\t/*****************************************\r\n\t\t\t\tParse posts and bookmarks\r\n\t\t******************************************/\r\n\t\t\r\n\t\t$orphans_possible = false;\r\n\t\t$still_need_resynch = $this->conf->options['need_resynch'];\r\n\t\t\r\n\t\tif ( $still_need_resynch ) {\r\n\r\n\t\t\t//FB::log(\"Looking for containers that need parsing...\");\r\n\t\t\t$max_containers_per_query = 50;\r\n\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$containers = blcContainerHelper::get_unsynched_containers($max_containers_per_query);\r\n\t\t\t$get_containers_time = microtime(true) - $start;\r\n\r\n\t\t\twhile( !empty($containers) ){\r\n\t\t\t\t//FB::log($containers, 'Found containers');\r\n\t\t\t\t$this->sleep_to_maintain_ratio($get_containers_time, $target_usage_fraction);\r\n\t\t\t\t\r\n\t\t\t\tforeach($containers as $container){\r\n\t\t\t\t\t$synch_start_time = microtime(true);\r\n\r\n\t\t\t\t\t//FB::log($container, \"Parsing container\");\r\n\t\t\t\t\t$container->synch();\r\n\r\n\t\t\t\t\t$synch_elapsed_time = microtime(true) - $synch_start_time;\r\n\t\t\t\t\t$blclog->info(sprintf(\r\n\t\t\t\t\t\t'Parsed container %s[%s] in %.2f ms',\r\n\t\t\t\t\t\t$container->container_type,\r\n\t\t\t\t\t\t$container->container_id,\r\n\t\t\t\t\t\t$synch_elapsed_time * 1000\r\n\t\t\t\t\t));\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Check if we still have some execution time left\r\n\t\t\t\t\tif( $this->execution_time() > $max_execution_time ){\r\n\t\t\t\t\t\t//FB::log('The allotted execution time has run out');\r\n\t\t\t\t\t\tblc_cleanup_links();\r\n\t\t\t\t\t\t$this->release_lock();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Check if the server isn't overloaded\r\n\t\t\t\t\tif ( $this->server_too_busy() ){\r\n\t\t\t\t\t\t//FB::log('Server overloaded, bailing out.');\r\n\t\t\t\t\t\tblc_cleanup_links();\r\n\t\t\t\t\t\t$this->release_lock();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//Intentionally slow down parsing to reduce the load on the server. Basically,\r\n\t\t\t\t\t//we work $target_usage_fraction of the time and sleep the rest of the time.\r\n\t\t\t\t\t$this->sleep_to_maintain_ratio($synch_elapsed_time, $target_usage_fraction);\r\n\t\t\t\t}\r\n\t\t\t\t$orphans_possible = true;\r\n\r\n\t\t\t\t$start = microtime(true);\r\n\t\t\t\t$containers = blcContainerHelper::get_unsynched_containers($max_containers_per_query);\r\n\t\t\t\t$get_containers_time = microtime(true) - $start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//FB::log('No unparsed items found.');\r\n\t\t\t$still_need_resynch = false;\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\t//FB::log('Resynch not required.');\r\n\t\t}\r\n\t\t\r\n\t\t/******************************************\r\n\t\t\t\t    Resynch done?\r\n\t\t*******************************************/\r\n\t\tif ( $this->conf->options['need_resynch'] && !$still_need_resynch ){\r\n\t\t\t$this->conf->options['need_resynch']  = $still_need_resynch;\r\n\t\t\t$this->conf->save_options();\r\n\t\t}\r\n\t\t\r\n\t\t/******************************************\r\n\t\t\t\t    Remove orphaned links\r\n\t\t*******************************************/\r\n\t\t\r\n\t\tif ( $orphans_possible ) {\r\n\t\t\t$start = microtime(true);\r\n\r\n\t\t\t$blclog->info('Removing orphaned links.');\r\n\t\t\tblc_cleanup_links();\r\n\r\n\t\t\t$get_links_time = microtime(true) - $start;\r\n\t\t\t$this->sleep_to_maintain_ratio($get_links_time, $target_usage_fraction);\r\n\t\t}\r\n\t\t\r\n\t\t//Check if we still have some execution time left\r\n\t\tif( $this->execution_time() > $max_execution_time ){\r\n\t\t\t//FB::log('The allotted execution time has run out');\r\n\t\t\t$blclog->info('The allotted execution time has run out.');\r\n\t\t\t$this->release_lock();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( $this->server_too_busy() ){\r\n\t\t\t//FB::log('Server overloaded, bailing out.');\r\n\t\t\t$blclog->info('Server load too high, stopping.');\r\n\t\t\t$this->release_lock();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t/*****************************************\r\n\t\t\t\t\t\tCheck links\r\n\t\t******************************************/\r\n\t\t$max_links_per_query = 30;\r\n\r\n\t\t$start = microtime(true);\r\n\t\t$links = $this->get_links_to_check($max_links_per_query);\r\n\t\t$get_links_time = microtime(true) - $start;\r\n\r\n\t\twhile ( $links ){\r\n\t\t\t$this->sleep_to_maintain_ratio($get_links_time, $target_usage_fraction);\r\n\t\t\r\n\t\t\t//Some unchecked links found\r\n\t\t\t//FB::log(\"Checking \".count($links).\" link(s)\");\r\n\t\t\t$blclog->info(\"Checking \".count($links).\" link(s)\");\r\n\r\n\t\t\t//Randomizing the array reduces the chances that we'll get several links to the same domain in a row.\r\n\t\t\tshuffle($links);\r\n\t\t\t\r\n\t\t\tforeach ($links as $link) {\r\n\t\t\t\t//Does this link need to be checked? Excluded links aren't checked, but their URLs are still\r\n\t\t\t\t//tested periodically to see if they're still on the exclusion list.\r\n        \t\tif ( !$this->is_excluded( $link->url ) ) {\r\n        \t\t\t//Check the link.\r\n        \t\t\t//FB::log($link->url, \"Checking link {$link->link_id}\");\r\n\t\t\t\t\t$link->check( true );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//FB::info(\"The URL {$link->url} is excluded, skipping link {$link->link_id}.\");\r\n\t\t\t\t\t$link->last_check_attempt = time();\r\n\t\t\t\t\t$link->save();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Check if we still have some execution time left\r\n\t\t\t\tif( $this->execution_time() > $max_execution_time ){\r\n\t\t\t\t\t//FB::log('The allotted execution time has run out');\r\n\t\t\t\t\t$blclog->info('The allotted execution time has run out.');\r\n\t\t\t\t\t$this->release_lock();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Check if the server isn't overloaded\r\n\t\t\t\tif ( $this->server_too_busy() ){\r\n\t\t\t\t\t//FB::log('Server overloaded, bailing out.');\r\n\t\t\t\t\t$blclog->info('Server load too high, stopping.');\r\n\t\t\t\t\t$this->release_lock();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$links = $this->get_links_to_check($max_links_per_query);\r\n\t\t\t$get_links_time = microtime(true) - $start;\r\n\t\t}\r\n\t\t//FB::log('No links need to be checked right now.');\r\n\t\t\r\n\t\t$this->release_lock();\r\n\t\t$blclog->info('work(): All done.');\r\n\t\t//FB::log('All done.');\r\n\t}\r\n\r\n\t/**\r\n\t * Sleep long enough to maintain the required $ratio between $elapsed_time and total runtime.\r\n\t *\r\n\t * For example, if $ratio is 0.25 and $elapsed_time is 1 second, this method will sleep for 3 seconds.\r\n\t * Total runtime = 1 + 3 = 4, ratio = 1 / 4 = 0.25.\r\n\t *\r\n\t * @param float $elapsed_time\r\n\t * @param float $ratio\r\n\t */\r\n\tprivate function sleep_to_maintain_ratio($elapsed_time, $ratio) {\r\n\t\tif ( ($ratio <= 0) || ($ratio > 1) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$sleep_time = $elapsed_time * ((1 / $ratio) - 1);\r\n\t\tif ($sleep_time > 0.0001) {\r\n\t\t\t/*global $blclog;\r\n\t\t\t$blclog->debug(sprintf(\r\n\t\t\t\t'Task took %.2f ms, sleeping for %.2f ms',\r\n\t\t\t\t$elapsed_time * 1000,\r\n\t\t\t\t$sleep_time * 1000\r\n\t\t\t));*/\r\n\t\t\tusleep($sleep_time * 1000000);\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * This function is called when the plugin's cron hook executes.\r\n   * Its only purpose is to invoke the worker function.\r\n   *\r\n   * @uses wsBrokenLinkChecker::work() \r\n   *\r\n   * @return void\r\n   */\r\n\tfunction cron_check_links(){\r\n\t\t$this->work();\r\n\t}\r\n\t\r\n  /**\r\n   * Retrieve links that need to be checked or re-checked.\r\n   *\r\n   * @param integer $max_results The maximum number of links to return. Defaults to 0 = no limit.\r\n   * @param bool $count_only If true, only the number of found links will be returned, not the links themselves. \r\n   * @return int|blcLink[]\r\n   */\r\n\tfunction get_links_to_check($max_results = 0, $count_only = false){\r\n\t\tglobal $wpdb; /* @var wpdb $wpdb */\r\n\t\t\r\n\t\t$check_threshold = date('Y-m-d H:i:s', strtotime('-'.$this->conf->options['check_threshold'].' hours'));\r\n\t\t$recheck_threshold = date('Y-m-d H:i:s', time() - $this->conf->options['recheck_threshold']);\r\n\t\t\r\n\t\t//FB::log('Looking for links to check (threshold : '.$check_threshold.', recheck_threshold : '.$recheck_threshold.')...');\r\n\t\t\r\n\t\t//Select some links that haven't been checked for a long time or\r\n\t\t//that are broken and need to be re-checked again. Links that are\r\n\t\t//marked as \"being checked\" and have been that way for several minutes\r\n\t\t//can also be considered broken/buggy, so those will be selected \r\n\t\t//as well.\r\n\t\t\r\n\t\t//Only check links that have at least one valid instance (i.e. an instance exists and \r\n\t\t//it corresponds to one of the currently loaded container/parser types).\r\n\t\t$manager = blcModuleManager::getInstance();\r\n\t\t$loaded_containers = $manager->get_escaped_ids('container');\r\n\t\t$loaded_parsers = $manager->get_escaped_ids('parser');\r\n\t\t\r\n\t\t//Note : This is a slow query, but AFAIK there is no way to speed it up.\r\n\t\t//I could put an index on last_check_attempt, but that value is almost \r\n\t\t//certainly unique for each row so it wouldn't be much better than a full table scan.\r\n\t\tif ( $count_only ){\r\n\t\t\t$q = \"SELECT COUNT(links.link_id)\\n\";\r\n\t\t} else {\r\n\t\t\t$q = \"SELECT links.*\\n\";\r\n\t\t}\r\n\t\t$q .= \"FROM {$wpdb->prefix}blc_links AS links\r\n\t\t      WHERE \r\n\t\t      \t(\r\n\t\t\t\t  \t( last_check_attempt < %s ) \r\n\t\t\t\t\tOR \r\n\t\t\t \t  \t( \r\n\t\t\t\t\t\t(broken = 1 OR being_checked = 1) \r\n\t\t\t\t\t\tAND may_recheck = 1\r\n\t\t\t\t\t\tAND check_count < %d \r\n\t\t\t\t\t\tAND last_check_attempt < %s \r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tAND EXISTS (\r\n\t\t\t\t\tSELECT 1 FROM {$wpdb->prefix}blc_instances AS instances\r\n\t\t\t\t\tWHERE \r\n\t\t\t\t\t\tinstances.link_id = links.link_id\r\n\t\t\t\t\t\tAND ( instances.container_type IN ({$loaded_containers}) )\r\n\t\t\t\t\t\tAND ( instances.parser_type IN ({$loaded_parsers}) )\r\n\t\t\t\t)\r\n\t\t\t\";\r\n\t\tif ( !$count_only ){\r\n\t\t\t$q .= \"\\nORDER BY last_check_attempt ASC\\n\";\r\n\t\t\tif ( !empty($max_results) ){\r\n\t\t\t\t$q .= \"LIMIT \" . intval($max_results);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t$link_q = $wpdb->prepare(\r\n\t\t\t$q, \r\n\t\t\t$check_threshold, \r\n\t\t\t$this->conf->options['recheck_count'], \r\n\t\t\t$recheck_threshold\r\n\t\t);\r\n\t\t//FB::log($link_q, \"Find links to check\");\r\n\t\t//$blclog->debug(\"Find links to check: \\n\" . $link_q);\r\n\t\r\n\t\t//If we just need the number of links, retrieve it and return\r\n\t\tif ( $count_only ){\r\n\t\t\treturn $wpdb->get_var($link_q);\r\n\t\t}\r\n\t\t\r\n\t\t//Fetch the link data\r\n\t\t$link_data = $wpdb->get_results($link_q, ARRAY_A);\r\n\t\tif ( empty($link_data) ){\r\n\t\t\treturn array();\r\n\t\t}\r\n\t\t\r\n\t\t//Instantiate blcLink objects for all fetched links\r\n\t\t$links = array();\r\n\t\tforeach($link_data as $data){\r\n\t\t\t$links[] = new blcLink($data);\r\n\t\t}\r\n\t\t\r\n\t\treturn $links;\r\n\t}\r\n\t\r\n  /**\r\n   * Output the current link checker status in JSON format.\r\n   * Ajax hook for the 'blc_full_status' action.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_full_status( ){\r\n\t\t$status = $this->get_status();\r\n\t\t$text = $this->status_text( $status );\r\n\t\t\r\n\t\techo json_encode( array(\r\n\t\t\t'text' => $text,\r\n\t\t\t'status' => $status, \r\n\t\t ) );\r\n\t\t\r\n\t\tdie();\r\n\t}\r\n\t\r\n  /**\r\n   * Generates a status message based on the status info in $status\r\n   *\r\n   * @param array $status\r\n   * @return string\r\n   */\r\n\tfunction status_text( $status ){\r\n\t\t$text = '';\r\n\t\r\n\t\tif( $status['broken_links'] > 0 ){\r\n\t\t\t$text .= sprintf( \r\n\t\t\t\t\"<a href='%s' title='\" . __('View broken links', 'broken-link-checker') . \"'><strong>\". \r\n\t\t\t\t\t_n('Found %d broken link', 'Found %d broken links', $status['broken_links'], 'broken-link-checker') .\r\n\t\t\t\t\"</strong></a>\",\r\n\t\t\t  \tadmin_url('tools.php?page=view-broken-links'), \r\n\t\t\t\t$status['broken_links']\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$text .= __(\"No broken links found.\", 'broken-link-checker');\r\n\t\t}\r\n\t\t\r\n\t\t$text .= \"<br/>\";\r\n\t\t\r\n\t\tif( $status['unchecked_links'] > 0) {\r\n\t\t\t$text .= sprintf( \r\n\t\t\t\t_n('%d URL in the work queue', '%d URLs in the work queue', $status['unchecked_links'], 'broken-link-checker'), \r\n\t\t\t\t$status['unchecked_links'] );\r\n\t\t} else {\r\n\t\t\t$text .= __(\"No URLs in the work queue.\", 'broken-link-checker');\r\n\t\t}\r\n\t\t\r\n\t\t$text .= \"<br/>\";\r\n\t\tif ( $status['known_links'] > 0 ){\r\n\t\t\t$url_count = sprintf(\r\n\t\t\t\t_nx('%d unique URL', '%d unique URLs', $status['known_links'], 'for the \"Detected X unique URLs in Y links\" message', 'broken-link-checker'),\r\n\t\t\t\t$status['known_links']\r\n\t\t\t);\r\n\t\t\t$link_count = sprintf(\r\n\t\t\t\t_nx('%d link', '%d links', $status['known_instances'], 'for the \"Detected X unique URLs in Y links\" message', 'broken-link-checker'),\r\n\t\t\t\t$status['known_instances']\r\n\t\t\t);\r\n\r\n\t\t\tif ($this->conf->options['need_resynch']){\r\n\t\t\t\t$text .= sprintf(\r\n\t\t\t\t\t__('Detected %1$s in %2$s and still searching...', 'broken-link-checker'),\r\n\t\t\t\t\t$url_count,\r\n\t\t\t\t\t$link_count\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\t$text .= sprintf(\r\n\t\t\t\t\t__('Detected %1$s in %2$s.', 'broken-link-checker'),\r\n\t\t\t\t\t$url_count,\r\n\t\t\t\t\t$link_count\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif ($this->conf->options['need_resynch']){\r\n\t\t\t\t$text .= __('Searching your blog for links...', 'broken-link-checker');\r\n\t\t\t} else {\r\n\t\t\t\t$text .= __('No links detected.', 'broken-link-checker');\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn $text;\r\n\t}\r\n\t\r\n  /**\r\n   * @uses wsBrokenLinkChecker::ajax_full_status() \r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_dashboard_status(){\r\n\t\t//Just display the full status.\r\n\t\t$this->ajax_full_status();\r\n\t}\r\n\t\r\n  /**\r\n   * Output the current average server load (over the last one-minute period).\r\n   * Called via AJAX.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_current_load(){\r\n\t\t$load = blcUtility::get_server_load();\r\n\t\tif ( empty($load) ){\r\n\t\t\tdie( _x('Unknown', 'current load', 'broken-link-checker') );\r\n\t\t}\r\n\t\t\r\n\t\t$one_minute = reset($load);\r\n\t\tprintf('%.2f', $one_minute);\r\n\t\tdie();\r\n\t}\r\n\t\r\n  /**\r\n   * Returns an array with various status information about the plugin. Array key reference: \r\n   *\tcheck_threshold \t- date/time; links checked before this threshold should be checked again.\r\n   *\trecheck_threshold \t- date/time; broken links checked before this threshold should be re-checked.\r\n   *\tknown_links \t\t- the number of detected unique URLs (a misleading name, yes).\r\n   *\tknown_instances \t- the number of detected link instances, i.e. actual link elements in posts and other places.\r\n   *\tbroken_links\t\t- the number of detected broken links.\t\r\n   *\tunchecked_links\t\t- the number of URLs that need to be checked ASAP; based on check_threshold and recheck_threshold.\r\n   *\r\n   * @return array\r\n   */\r\n\tfunction get_status(){\r\n\t\t$blc_link_query = blcLinkQuery::getInstance();\r\n\t\t\r\n\t\t$check_threshold=date('Y-m-d H:i:s', strtotime('-'.$this->conf->options['check_threshold'].' hours'));\r\n\t\t$recheck_threshold=date('Y-m-d H:i:s', time() - $this->conf->options['recheck_threshold']);\r\n\t\t\r\n\t\t$known_links = blc_get_links(array('count_only' => true));\r\n\t\t$known_instances = blc_get_usable_instance_count();\r\n\t\t\r\n\t\t$broken_links = $blc_link_query->get_filter_links('broken', array('count_only' => true));\r\n\t\t\r\n\t\t$unchecked_links = $this->get_links_to_check(0, true);\r\n\t\t\r\n\t\treturn array(\r\n\t\t\t'check_threshold' => $check_threshold,\r\n\t\t\t'recheck_threshold' => $recheck_threshold,\r\n\t\t\t'known_links' => $known_links,\r\n\t\t\t'known_instances' => $known_instances,\r\n\t\t\t'broken_links' => $broken_links,\r\n\t\t\t'unchecked_links' => $unchecked_links,\r\n\t\t );\r\n\t}\r\n\t\r\n\tfunction ajax_work(){\r\n\t\tcheck_ajax_referer('blc_work');\r\n\r\n\t\t//Run the worker function \r\n\t\t$this->work();\r\n\t\tdie();\r\n\t}\r\n\t\r\n  /**\r\n   * AJAX hook for the \"Not broken\" button. Marks a link as broken and as a likely false positive.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_discard(){\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer('blc_discard', false, false)){\r\n\t\t\tdie( __(\"You're not allowed to do that!\", 'broken-link-checker') );\r\n\t\t}\r\n\t\t\r\n\t\tif ( isset($_POST['link_id']) ){\r\n\t\t\t//Load the link\r\n\t\t\t$link = new blcLink( intval($_POST['link_id']) );\r\n\t\t\t\r\n\t\t\tif ( !$link->valid() ){\r\n\t\t\t\tprintf( __(\"Oops, I can't find the link %d\", 'broken-link-checker'), intval($_POST['link_id']) );\r\n\t\t\t\tdie();\r\n\t\t\t}\r\n\t\t\t//Make it appear \"not broken\"\r\n\t\t\t$link->broken = false;  \r\n\t\t\t$link->warning = false;\r\n\t\t\t$link->false_positive = true;\r\n\t\t\t$link->last_check_attempt = time();\r\n\t\t\t$link->log = __(\"This link was manually marked as working by the user.\", 'broken-link-checker');\r\n\t\t\t\r\n\t\t\t//Save the changes\r\n\t\t\tif ( $link->save() ){\r\n\t\t\t\tdie( \"OK\" );\r\n\t\t\t} else {\r\n\t\t\t\tdie( __(\"Oops, couldn't modify the link!\", 'broken-link-checker') ) ;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdie( __(\"Error : link_id not specified\", 'broken-link-checker') );\r\n\t\t}\r\n\t}\r\n\r\n\tpublic function ajax_dismiss(){\r\n\t\t$this->ajax_set_link_dismissed(true);\r\n\t}\r\n\r\n\tpublic function ajax_undismiss(){\r\n\t\t$this->ajax_set_link_dismissed(false);\r\n\t}\r\n\r\n\tprivate function ajax_set_link_dismissed($dismiss){\r\n\t\t$action = $dismiss ? 'blc_dismiss' : 'blc_undismiss';\r\n\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer($action, false, false)){\r\n\t\t\tdie( __(\"You're not allowed to do that!\", 'broken-link-checker') );\r\n\t\t}\r\n\r\n\t\tif ( isset($_POST['link_id']) ){\r\n\t\t\t//Load the link\r\n\t\t\t$link = new blcLink( intval($_POST['link_id']) );\r\n\r\n\t\t\tif ( !$link->valid() ){\r\n\t\t\t\tprintf( __(\"Oops, I can't find the link %d\", 'broken-link-checker'), intval($_POST['link_id']) );\r\n\t\t\t\tdie();\r\n\t\t\t}\r\n\r\n\t\t\t$link->dismissed = $dismiss;\r\n\r\n\t\t\t//Save the changes\r\n\t\t\tif ( $link->save() ){\r\n\t\t\t\tdie( \"OK\" );\r\n\t\t\t} else {\r\n\t\t\t\tdie( __(\"Oops, couldn't modify the link!\", 'broken-link-checker') ) ;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdie( __(\"Error : link_id not specified\", 'broken-link-checker') );\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * AJAX hook for the inline link editor on Tools -> Broken Links. \r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_edit(){\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer('blc_edit', false, false)){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker') \r\n\t\t\t\t )));\r\n\t\t}\r\n\r\n\t\tif ( empty($_POST['link_id']) || empty($_POST['new_url']) || !is_numeric($_POST['link_id']) ) {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"Error : link_id or new_url not specified\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t//Load the link\r\n\t\t$link = new blcLink( intval($_POST['link_id']) );\r\n\r\n\t\tif ( !$link->valid() ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => sprintf( __(\"Oops, I can't find the link %d\", 'broken-link-checker'), intval($_POST['link_id']) )\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t//Validate the new URL.\r\n\t\t$new_url = stripslashes($_POST['new_url']);\r\n\t\t$parsed = @parse_url($new_url);\r\n\t\tif ( !$parsed ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"Oops, the new URL is invalid!\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\tif ( !current_user_can('unfiltered_html') ) {\r\n\t\t\t//Disallow potentially dangerous URLs like \"javascript:...\".\r\n\t\t\t$protocols = wp_allowed_protocols();\r\n\t\t\t$good_protocol_url = wp_kses_bad_protocol($new_url, $protocols);\r\n\t\t\tif ( $new_url != $good_protocol_url ) {\r\n\t\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"Oops, the new URL is invalid!\", 'broken-link-checker')\r\n\t\t\t\t)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$new_text = (isset($_POST['new_text']) && is_string($_POST['new_text'])) ? stripslashes($_POST['new_text']) : null;\r\n\t\tif ( $new_text === '' ) {\r\n\t\t\t$new_text = null;\r\n\t\t}\r\n\t\tif ( !empty($new_text) && !current_user_can('unfiltered_html') ) {\r\n\t\t\t$new_text = stripslashes(wp_filter_post_kses(addslashes($new_text))); //wp_filter_post_kses expects slashed data.\r\n\t\t}\r\n\r\n\t\t$rez = $link->edit($new_url, $new_text);\r\n\t\tif ( $rez === false ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"An unexpected error occurred!\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t} else {\r\n\t\t\t$new_link = $rez['new_link']; /** @var blcLink $new_link */\r\n\t\t\t$new_status = $new_link->analyse_status();\r\n\t\t\t$ui_link_text = null;\r\n\t\t\tif ( isset($new_text) ) {\r\n\t\t\t\t$instances = $new_link->get_instances();\r\n\t\t\t\tif ( !empty($instances) ) {\r\n\t\t\t\t\t$first_instance = reset($instances);\r\n\t\t\t\t\t$ui_link_text = $first_instance->ui_get_link_text();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$response = array(\r\n\t\t\t\t'new_link_id' => $rez['new_link_id'],\r\n\t\t\t\t'cnt_okay' => $rez['cnt_okay'],\r\n\t\t\t\t'cnt_error' => $rez['cnt_error'],\r\n\r\n\t\t\t\t'status_text' => $new_status['text'],\r\n\t\t\t\t'status_code' => $new_status['code'],\r\n\t\t\t\t'http_code'   => empty($new_link->http_code) ? '' : $new_link->http_code,\r\n\t\t\t\t'redirect_count' => $new_link->redirect_count,\r\n\r\n\t\t\t\t'url' => $new_link->url,\r\n\t\t\t\t'escaped_url' => esc_url_raw($new_link->url),\r\n\t\t\t\t'final_url' => $new_link->final_url,\r\n\t\t\t\t'link_text' => isset($new_text) ? $new_text : null,\r\n\t\t\t\t'ui_link_text' => isset($new_text) ? $ui_link_text : null,\r\n\r\n\t\t\t\t'errors' => array(),\r\n\t\t\t);\r\n\t\t\t//url, status text, status code, link text, editable link text\r\n\r\n\r\n\t\t\tforeach($rez['errors'] as $error){ /** @var $error WP_Error */\r\n\t\t\t\tarray_push( $response['errors'], implode(', ', $error->get_error_messages()) );\r\n\t\t\t}\r\n\t\t\tdie( json_encode($response) );\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * AJAX hook for the \"Unlink\" action links in Tools -> Broken Links. \r\n   * Removes the specified link from all posts and other supported items.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_unlink(){\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer('blc_unlink', false, false)){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker') \r\n\t\t\t\t )));\r\n\t\t}\r\n\t\t\r\n\t\tif ( isset($_POST['link_id']) ){\r\n\t\t\t//Load the link\r\n\t\t\t$link = new blcLink( intval($_POST['link_id']) );\r\n\t\t\t\r\n\t\t\tif ( !$link->valid() ){\r\n\t\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => sprintf( __(\"Oops, I can't find the link %d\", 'broken-link-checker'), intval($_POST['link_id']) ) \r\n\t\t\t\t )));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Try and unlink it\r\n\t\t\t$rez = $link->unlink();\r\n\t\t\t\r\n\t\t\tif ( $rez === false ){\r\n\t\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"An unexpected error occured!\", 'broken-link-checker')\r\n\t\t\t\t )));\r\n\t\t\t} else {\r\n\t\t\t\t$response = array(\r\n\t\t\t\t\t'cnt_okay' => $rez['cnt_okay'],\r\n\t\t\t\t\t'cnt_error' => $rez['cnt_error'],\r\n\t\t\t\t\t'errors' => array(),\r\n\t\t\t\t);\r\n\t\t\t\tforeach($rez['errors'] as $error){ /** @var WP_Error $error */\r\n\t\t\t\t\tarray_push( $response['errors'], implode(', ', $error->get_error_messages()) );\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tdie( json_encode($response) );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"Error : link_id not specified\", 'broken-link-checker') \r\n\t\t\t\t )));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic function ajax_deredirect() {\r\n\t\tif ( !current_user_can('edit_others_posts') || !check_ajax_referer('blc_deredirect', false, false) ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\tif ( !isset($_POST['link_id']) || !is_numeric($_POST['link_id']) ) {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"Error : link_id not specified\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t$id = intval($_POST['link_id']);\r\n\t\t$link = new blcLink($id);\r\n\r\n\t\tif ( !$link->valid() ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => sprintf(__(\"Oops, I can't find the link %d\", 'broken-link-checker'), $id)\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t//The actual task is simple; it's error handling that's complicated.\r\n\t\t$result = $link->deredirect();\r\n\t\tif ( is_wp_error($result) ) {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => sprintf('%s [%s]', $result->get_error_message(), $result->get_error_code())\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t$link = $result['new_link'] /** @var blcLink $link */;\r\n\r\n\t\t$status = $link->analyse_status();\r\n\t\t$response = array(\r\n\t\t\t'url' => $link->url,\r\n\t\t\t'escaped_url' => esc_url_raw($link->url),\r\n\t\t\t'new_link_id' => $result['new_link_id'],\r\n\r\n\t\t\t'status_text' => $status['text'],\r\n\t\t\t'status_code' => $status['code'],\r\n\t\t\t'http_code'   => empty($link->http_code) ? '' : $link->http_code,\r\n\t\t\t'redirect_count' => $link->redirect_count,\r\n\t\t\t'final_url' => $link->final_url,\r\n\r\n\t\t\t'cnt_okay' => $result['cnt_okay'],\r\n\t\t\t'cnt_error' => $result['cnt_error'],\r\n\t\t\t'errors' => array(),\r\n\t\t);\r\n\r\n\t\t//Convert WP_Error's to simple strings.\r\n\t\tif ( !empty($result['errors']) ) {\r\n\t\t\tforeach($result['errors'] as $error) { /** @var WP_Error $error */\r\n\t\t\t\t$response['errors'][] = $error->get_error_message();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdie(json_encode($response));\r\n\t}\r\n\r\n\t/**\r\n\t * AJAX hook for the \"Recheck\" action.\r\n\t */\r\n\tpublic function ajax_recheck() {\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer('blc_recheck', false, false)){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\tif ( !isset($_POST['link_id']) || !is_numeric($_POST['link_id']) ) {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"Error : link_id not specified\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t$id = intval($_POST['link_id']);\r\n\t\t$link = new blcLink($id);\r\n\r\n\t\tif ( !$link->valid() ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => sprintf(__(\"Oops, I can't find the link %d\", 'broken-link-checker'), $id)\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t//In case the immediate check fails, this will ensure the link is checked during the next work() run.\r\n\t\t$link->last_check_attempt = 0;\r\n\t\t$link->save();\r\n\r\n\t\t//Check the link and save the results.\r\n\t\t$link->check(true);\r\n\r\n\t\t$status = $link->analyse_status();\r\n\t\t$response = array(\r\n\t\t\t'status_text' => $status['text'],\r\n\t\t\t'status_code' => $status['code'],\r\n\t\t\t'http_code'   => empty($link->http_code) ? '' : $link->http_code,\r\n\t\t\t'redirect_count' => $link->redirect_count,\r\n\t\t\t'final_url' => $link->final_url,\r\n\t\t);\r\n\r\n\t\tdie(json_encode($response));\r\n\t}\r\n\t\r\n\tfunction ajax_link_details(){\r\n\t\tglobal $wpdb; /* @var wpdb $wpdb */\r\n\t\t\r\n\t\tif (!current_user_can('edit_others_posts')){\r\n\t\t\tdie( __(\"You don't have sufficient privileges to access this information!\", 'broken-link-checker') );\r\n\t\t}\r\n\t\t\r\n\t\t//FB::log(\"Loading link details via AJAX\");\r\n\t\t\r\n\t\tif ( isset($_GET['link_id']) ){\r\n\t\t\t//FB::info(\"Link ID found in GET\");\r\n\t\t\t$link_id = intval($_GET['link_id']);\r\n\t\t} else if ( isset($_POST['link_id']) ){\r\n\t\t\t//FB::info(\"Link ID found in POST\");\r\n\t\t\t$link_id = intval($_POST['link_id']);\r\n\t\t} else {\r\n\t\t\t//FB::error('Link ID not specified, you hacking bastard.');\r\n\t\t\tdie( __('Error : link ID not specified', 'broken-link-checker') );\r\n\t\t}\r\n\t\t\r\n\t\t//Load the link. \r\n\t\t$link = new blcLink($link_id);\r\n\t\t\r\n\t\tif ( !$link->is_new ){\r\n\t\t\t//FB::info($link, 'Link loaded');\r\n\t\t\tif ( !class_exists('blcTablePrinter') ){\r\n\t\t\t\trequire dirname($this->loader) . '/includes/admin/table-printer.php';\r\n\t\t\t}\r\n\t\t\tblcTablePrinter::details_row_contents($link);\r\n\t\t\tdie();\r\n\t\t} else {\r\n\t\t\tprintf( __('Failed to load link details (%s)', 'broken-link-checker'), $wpdb->last_error );\r\n\t\t\tdie();\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * Acquire an exclusive lock.\r\n   * If we already hold a lock, it will be released and a new one will be acquired.\r\n   *\r\n   * @return bool\r\n   */\r\n\tfunction acquire_lock(){\r\n\t\treturn WPMutex::acquire('blc_lock');\r\n\t}\r\n\t\r\n  /**\r\n   * Relese our exclusive lock. \r\n   * Does nothing if the lock has already been released.\r\n   *\r\n   * @return bool\r\n   */\r\n\tfunction release_lock(){\r\n\t\treturn WPMutex::release('blc_lock');\r\n\t}\r\n\t\r\n  /**\r\n   * Check if server is currently too overloaded to run the link checker.\r\n   *\r\n   * @return bool\r\n   */\r\n\tfunction server_too_busy(){\r\n\t\tif ( !$this->conf->options['enable_load_limit'] || !isset($this->conf->options['server_load_limit']) ){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\t$loads = blcUtility::get_server_load();\r\n\t\tif ( empty($loads) ){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t$one_minute = floatval(reset($loads));\r\n\t\t\r\n\t\treturn $one_minute > $this->conf->options['server_load_limit'];\r\n\t}\r\n\t\r\n\t/**\r\n\t * Register BLC's Dashboard widget\r\n\t * \r\n\t * @return void\r\n\t */\r\n\tfunction hook_wp_dashboard_setup(){\r\n\t\t$show_widget = current_user_can($this->conf->get('dashboard_widget_capability', 'edit_others_posts'));\r\n\t\tif ( function_exists( 'wp_add_dashboard_widget' ) && $show_widget ) {\r\n\t\t\twp_add_dashboard_widget(\r\n\t\t\t\t'blc_dashboard_widget', \r\n\t\t\t\t__('Broken Link Checker', 'broken-link-checker'), \r\n\t\t\t\tarray( $this, 'dashboard_widget' ),\r\n\t\t\t\tarray( $this, 'dashboard_widget_control' )\r\n\t\t\t );\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * Collect various debugging information and return it in an associative array\r\n   *\r\n   * @return array\r\n   */\r\n\tfunction get_debug_info(){\r\n\t\t/** @var wpdb $wpdb */\r\n\t\tglobal $wpdb;\r\n\r\n\t\t//Collect some information that's useful for debugging \r\n\t\t$debug = array();\r\n\t\t\r\n\t\t//PHP version. Any one is fine as long as WP supports it.\r\n\t\t$debug[ __('PHP version', 'broken-link-checker') ] = array(\r\n\t\t\t'state' => 'ok',\r\n\t\t\t'value' => phpversion(), \r\n\t\t);\r\n\t\t\r\n\t\t//MySQL version\r\n\t\t$debug[ __('MySQL version', 'broken-link-checker') ] = array(\r\n\t\t\t'state' => 'ok',\r\n\t\t\t'value' => $wpdb->db_version(),\r\n\t\t);\r\n\t\t\r\n\t\t//CURL presence and version\r\n\t\tif ( function_exists('curl_version') ){\r\n\t\t\t$version = curl_version();\r\n\t\t\t\r\n\t\t\tif ( version_compare( $version['version'], '7.16.0', '<=' ) ){\r\n\t\t\t\t$data = array(\r\n\t\t\t\t\t'state' => 'warning', \r\n\t\t\t\t\t'value' => $version['version'],\r\n\t\t\t\t\t'message' => __('You have an old version of CURL. Redirect detection may not work properly.', 'broken-link-checker'),\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\t$data = array(\r\n\t\t\t\t\t'state' => 'ok', \r\n\t\t\t\t\t'value' => $version['version'],\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\t$data = array(\r\n\t\t\t\t'state' => 'warning', \r\n\t\t\t\t'value' => __('Not installed', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t}\r\n\t\t$debug[ __('CURL version', 'broken-link-checker') ] = $data;\r\n\t\t\r\n\t\t//Snoopy presence\r\n\t\tif ( class_exists('Snoopy') || file_exists(ABSPATH. WPINC . '/class-snoopy.php') ){\r\n\t\t\t$data = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => __('Installed', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t//No Snoopy? This should never happen, but if it does we *must* have CURL. \r\n\t\t\tif ( function_exists('curl_init') ){\r\n\t\t\t\t$data = array(\r\n\t\t\t\t\t'state' => 'ok',\r\n\t\t\t\t\t'value' => __('Not installed', 'broken-link-checker'),\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\t$data = array(\r\n\t\t\t\t\t'state' => 'error',\r\n\t\t\t\t\t'value' => __('Not installed', 'broken-link-checker'),\r\n\t\t\t\t\t'message' => __('You must have either CURL or Snoopy installed for the plugin to work!', 'broken-link-checker'),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t$debug['Snoopy'] = $data;\r\n\t\t\r\n\t\t//Safe_mode status\r\n\t\tif ( blcUtility::is_safe_mode() ){\r\n\t\t\t$debug['Safe mode'] = array(\r\n\t\t\t\t'state' => 'warning',\r\n\t\t\t\t'value' => __('On', 'broken-link-checker'),\r\n\t\t\t\t'message' => __('Redirects may be detected as broken links when safe_mode is on.', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$debug['Safe mode'] = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => __('Off', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t//Open_basedir status\r\n\t\tif ( blcUtility::is_open_basedir() ){\r\n\t\t\t$debug['open_basedir'] = array(\r\n\t\t\t\t'state' => 'warning',\r\n\t\t\t\t'value' => sprintf( __('On ( %s )', 'broken-link-checker'), ini_get('open_basedir') ),\r\n\t\t\t\t'message' => __('Redirects may be detected as broken links when open_basedir is on.', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$debug['open_basedir'] = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => __('Off', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t//Default PHP execution time limit\r\n\t \t$debug['Default PHP execution time limit'] = array(\r\n\t \t\t'state' => 'ok',\r\n\t \t\t'value' => sprintf(__('%s seconds'), ini_get('max_execution_time')),\r\n\t\t);\r\n\r\n\t\t//Database character set. Usually it's UTF-8. Setting it to something else can cause problems\r\n\t\t//unless the site owner really knows what they're doing.\r\n\t\t$charset = $wpdb->get_charset_collate();\r\n\t\t$debug[ __('Database character set', 'broken-link-checker') ] = array(\r\n\t\t\t'state' => 'ok',\r\n\t\t\t'value' => !empty($charset) ? $charset : '-',\r\n\t\t);\r\n\r\n\t\t//Resynch flag.\r\n\t\t$debug['Resynch. flag'] = array(\r\n\t \t\t'state' => 'ok',\r\n\t \t\t'value' => sprintf('%d', $this->conf->options['need_resynch'] ? '1 (resynch. required)' : '0 (resynch. not required)'),\r\n\t\t);\r\n\t\t\r\n\t\t//Synch records\r\n\t\t$synch_records = intval($wpdb->get_var(\"SELECT COUNT(*) FROM {$wpdb->prefix}blc_synch\"));\r\n\t\t$data = array(\r\n\t \t\t'state' => 'ok',\r\n\t \t\t'value' => sprintf('%d', $synch_records),\r\n\t\t);\r\n\t\tif ( $synch_records == 0 ){\r\n\t\t\t$data['state'] = 'warning';\r\n\t\t\t$data['message'] = __('If this value is zero even after several page reloads you have probably encountered a bug.', 'broken-link-checker');\r\n\t\t}\r\n\t\t$debug['Synch. records'] = $data;\r\n\t\t\r\n\t\t//Total links and instances (including invalid ones)\r\n\t\t$all_links = intval($wpdb->get_var(\"SELECT COUNT(*) FROM {$wpdb->prefix}blc_links\"));\r\n\t\t$all_instances = intval($wpdb->get_var(\"SELECT COUNT(*) FROM {$wpdb->prefix}blc_instances\"));\r\n\t\t\r\n\t\t//Show the number of unparsed containers. Useful for debugging. For performance, \r\n\t\t//this is only shown when we have no links/instances yet.\r\n\t\tif( ($all_links == 0) && ($all_instances == 0) ){\r\n\t\t\t$unparsed_items = intval($wpdb->get_var(\"SELECT COUNT(*) FROM {$wpdb->prefix}blc_synch WHERE synched=0\"));\r\n\t\t\t$debug['Unparsed items'] = array(\r\n\t\t\t\t'state' => 'warning', \r\n\t\t\t\t'value' => $unparsed_items,\r\n\t\t\t);\r\n\t\t} \r\n\t\t\r\n\t\t//Links & instances\r\n\t\tif ( ($all_links > 0) && ($all_instances > 0) ){\r\n\t\t\t$debug['Link records'] = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => sprintf('%d (%d)', $all_links, $all_instances),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$debug['Link records'] = array(\r\n\t\t\t\t'state' => 'warning',\r\n\t\t\t\t'value' => sprintf('%d (%d)', $all_links, $all_instances),\r\n\t\t\t);\r\n\t\t}\t\t\r\n\r\n\t\t//Email notifications.\r\n\t\tif ( $this->conf->options['last_notification_sent'] ) {\r\n\t\t\t$notificationDebug = array(\r\n\t\t\t\t'value' => date('Y-m-d H:i:s T', $this->conf->options['last_notification_sent']),\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$notificationDebug = array(\r\n\t\t\t\t'value' => 'Never',\r\n\t\t\t\t'state' => $this->conf->options['send_email_notifications'] ? 'ok' : 'warning',\r\n\t\t\t);\r\n\t\t}\r\n\t\t$debug['Last email notification'] = $notificationDebug;\r\n\r\n\t\tif ( isset($this->conf->options['last_email']) ) {\r\n\t\t\t$email = $this->conf->options['last_email'];\r\n\t\t\t$debug['Last email sent'] = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => sprintf(\r\n\t\t\t\t\t'\"%s\" on %s (%s)',\r\n\t\t\t\t\thtmlentities($email['subject']),\r\n\t\t\t\t\tdate('Y-m-d H:i:s T', $email['timestamp']),\r\n\t\t\t\t\t$email['success'] ? 'success' : 'failure'\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\r\n\t\t//Installation log\r\n\t\t$logger = new blcCachedOptionLogger('blc_installation_log');\r\n\t\t$installation_log = $logger->get_messages();\r\n\t\tif ( !empty($installation_log) ){\r\n\t\t\t$debug['Installation log'] = array(\r\n\t\t\t\t'state' => $this->conf->options['installation_complete'] ? 'ok' : 'error',\r\n\t\t\t\t'value' => implode(\"<br>\\n\", $installation_log),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$debug['Installation log'] = array(\r\n\t\t\t\t'state' => 'warning',\r\n\t\t\t\t'value' => 'No installation log found found.',\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn $debug;\r\n\t}\r\n\r\n\tfunction maybe_send_email_notifications() {\r\n\t\tglobal $wpdb; /** @var wpdb $wpdb */\r\n\r\n\t\tif ( !($this->conf->options['send_email_notifications'] || $this->conf->options['send_authors_email_notifications']) ){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Find links that have been detected as broken since the last sent notification.\r\n\t\t$last_notification = date('Y-m-d H:i:s', $this->conf->options['last_notification_sent']);\r\n\t\t$where = $wpdb->prepare('( first_failure >= %s )', $last_notification);\r\n\r\n\t\t$links = blc_get_links(array(\r\n\t\t\t's_filter' => 'broken',\r\n\t\t\t'where_expr' => $where,\r\n\t\t\t'load_instances' => true,\r\n\t\t\t'load_containers' => true,\r\n\t\t\t'load_wrapped_objects' => $this->conf->options['send_authors_email_notifications'],\r\n\t\t\t'max_results' => 0,\r\n\t\t));\r\n\r\n\t\tif ( empty($links) ){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Send the admin/maintainer an email notification.\r\n\t\t$email = $this->conf->get('notification_email_address');\r\n\t\tif ( empty($email) ) {\r\n\t\t\t//Default to the admin email.\r\n\t\t\t$email = get_option('admin_email');\r\n\t\t}\r\n\t\tif ( $this->conf->options['send_email_notifications'] && !empty($email) ) {\r\n\t\t\t$this->send_admin_notification($links, $email);\r\n\t\t}\r\n\r\n\t\t//Send notifications to post authors\r\n\t\tif ( $this->conf->options['send_authors_email_notifications'] ) {\r\n\t\t\t$this->send_authors_notifications($links);\r\n\t\t}\r\n\r\n\t\t$this->conf->options['last_notification_sent'] = time();\r\n\t\t$this->conf->save_options();\r\n\t}\r\n\r\n\tfunction send_admin_notification($links, $email) {\r\n\t\t//Prepare email message\r\n\t\t$subject = sprintf(\r\n\t\t\t__(\"[%s] Broken links detected\", 'broken-link-checker'),\r\n\t\t\thtml_entity_decode(get_option('blogname'), ENT_QUOTES)\r\n\t\t);\r\n\r\n\t\t$body = sprintf(\r\n\t\t\t_n(\r\n\t\t\t\t\"Broken Link Checker has detected %d new broken link on your site.\",\r\n\t\t\t\t\"Broken Link Checker has detected %d new broken links on your site.\",\r\n\t\t\t\tcount($links),\r\n\t\t\t\t'broken-link-checker'\r\n\t\t\t),\r\n\t\t\tcount($links)\r\n\t\t);\r\n\t\t$body .= \"<br>\";\r\n\r\n\t\t$instances = array();\r\n\t\tforeach($links as $link) { /* @var blcLink $link */\r\n\t\t\t$instances = array_merge($instances, $link->get_instances());\r\n\t\t}\r\n\t\t$body .= $this->build_instance_list_for_email($instances);\r\n\r\n\t\tif ( $this->is_textdomain_loaded && is_rtl() ) {\r\n\t\t\t$body = '<div dir=\"rtl\">' . $body . '</div>';\r\n\t\t}\r\n\r\n\t\t$this->send_html_email($email, $subject, $body);\r\n\t}\r\n\r\n\tfunction build_instance_list_for_email($instances, $max_displayed_links = 5, $add_admin_link = true){\r\n\t\tif ( $max_displayed_links === null ) {\r\n\t\t\t$max_displayed_links = 5;\r\n\t\t}\r\n\r\n\t\t$result = '';\r\n\t\tif ( count($instances) > $max_displayed_links ){\r\n\t\t\t$line = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t\"Here's a list of the first %d broken links:\",\r\n\t\t\t\t\t\"Here's a list of the first %d broken links:\",\r\n\t\t\t\t\t$max_displayed_links,\r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t$max_displayed_links\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$line = __(\"Here's a list of the new broken links: \", 'broken-link-checker');\r\n\t\t}\r\n\r\n\t\t$result .= \"<p>$line</p>\";\r\n\r\n\t\t//Show up to $max_displayed_links broken link instances right in the email.\r\n\t\t$displayed = 0;\r\n\t\tforeach($instances as $instance){ /* @var blcLinkInstance $instance */\r\n\t\t\t$pieces = array(\r\n\t\t\t\tsprintf( __('Link text : %s', 'broken-link-checker'), $instance->ui_get_link_text('email') ),\r\n\t\t\t\tsprintf( __('Link URL : <a href=\"%s\">%s</a>', 'broken-link-checker'), htmlentities($instance->get_url()), blcUtility::truncate($instance->get_url(), 70, '') ),\r\n\t\t\t\tsprintf( __('Source : %s', 'broken-link-checker'), $instance->ui_get_source('email') ),\r\n\t\t\t);\r\n\r\n\t\t\t$link_entry = implode(\"<br>\", $pieces);\r\n\t\t\t$result .= \"$link_entry<br><br>\";\r\n\r\n\t\t\t$displayed++;\r\n\t\t\tif ( $displayed >= $max_displayed_links ){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Add a link to the \"Broken Links\" tab.\r\n\t\tif ( $add_admin_link ) {\r\n\t\t\t$result .= __(\"You can see all broken links here:\", 'broken-link-checker') . \"<br>\";\r\n\t\t\t$result .= sprintf('<a href=\"%1$s\">%1$s</a>', admin_url('tools.php?page=view-broken-links'));\r\n\t\t}\r\n\r\n\t\treturn $result;\r\n\t}\r\n\r\n\tfunction send_html_email($email_address, $subject, $body) {\r\n\t\t//Need to override the default 'text/plain' content type to send a HTML email.\r\n\t\tadd_filter('wp_mail_content_type', array($this, 'override_mail_content_type'));\r\n\r\n\t\t//Let auto-responders and similar software know this is an auto-generated email\r\n\t\t//that they shouldn't respond to.\r\n\t\t$headers = array('Auto-Submitted: auto-generated');\r\n\r\n\t\t$success = wp_mail($email_address, $subject, $body, $headers);\r\n\r\n\t\t//Remove the override so that it doesn't interfere with other plugins that might\r\n\t\t//want to send normal plaintext emails.\r\n\t\tremove_filter('wp_mail_content_type', array($this, 'override_mail_content_type'));\r\n\r\n\t\t$this->conf->options['last_email'] = array(\r\n\t\t\t'subject' => $subject,\r\n\t\t\t'timestamp' => time(),\r\n\t\t\t'success'    => $success,\r\n\t\t);\r\n\t\t$this->conf->save_options();\r\n\r\n\t\treturn $success;\r\n\t}\r\n\r\n\tfunction send_authors_notifications($links) {\r\n\t\t$authorInstances = array();\r\n\t\tforeach($links as $link){ /* @var blcLink $link */\r\n\t\t\tforeach($link->get_instances() as $instance){ /* @var blcLinkInstance $instance */\r\n\t\t\t\t$container = $instance->get_container(); /** @var blcContainer $container */\r\n\t\t\t\tif ( empty($container) || !($container instanceof blcAnyPostContainer) ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t$post = $container->get_wrapped_object(); /** @var StdClass $post */\r\n\t\t\t\tif ( !array_key_exists($post->post_author, $authorInstances) ) {\r\n\t\t\t\t\t$authorInstances[$post->post_author] = array();\r\n\t\t\t\t}\r\n\t\t\t\t$authorInstances[$post->post_author][] = $instance;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tforeach($authorInstances as $author_id => $instances) {\r\n\t\t\t$subject = sprintf(\r\n\t\t\t\t__(\"[%s] Broken links detected\", 'broken-link-checker'),\r\n\t\t\t\thtml_entity_decode(get_option('blogname'), ENT_QUOTES)\r\n\t\t\t);\r\n\r\n\t\t\t$body = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t\"Broken Link Checker has detected %d new broken link in your posts.\",\r\n\t\t\t\t\t\"Broken Link Checker has detected %d new broken links in your posts.\",\r\n\t\t\t\t\tcount($instances),\r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\tcount($instances)\r\n\t\t\t);\r\n\t\t\t$body .= \"<br>\";\r\n\r\n\t\t\t$author = get_user_by('id', $author_id); /** @var WP_User $author */\r\n\t\t\t$body .= $this->build_instance_list_for_email($instances, null, $author->has_cap('edit_others_posts'));\r\n\r\n\t\t\tif ( $this->is_textdomain_loaded && is_rtl() ) {\r\n\t\t\t\t$body = '<div dir=\"rtl\">' . $body . '</div>';\r\n\t\t\t}\r\n\r\n\t\t\t$this->send_html_email($author->user_email, $subject, $body);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction override_mail_content_type(/** @noinspection PhpUnusedParameterInspection */ $content_type){\r\n\t\treturn 'text/html';\r\n\t}\r\n\r\n\t/**\r\n\t * Promote all links with the \"warning\" status to \"broken\".\r\n\t */\r\n\tprivate function promote_warnings_to_broken() {\r\n\t\tglobal $wpdb; /** @var wpdb $wpdb */\r\n\t\t$wpdb->update(\r\n\t\t\t$wpdb->prefix . 'blc_links',\r\n\t\t\tarray(\r\n\t\t\t\t'broken'  => 1,\r\n\t\t\t\t'warning' => 0,\r\n\t\t\t),\r\n\t\t\tarray(\r\n\t\t\t\t'warning' => 1,\r\n\t\t\t),\r\n\t\t\t'%d'\r\n\t\t);\r\n\t}\r\n\t\r\n  /**\r\n   * Install or uninstall the plugin's Cron events based on current settings.\r\n   *\r\n   * @uses wsBrokenLinkChecker::$conf Uses $conf->options to determine if events need to be (un)installed.  \r\n   *\r\n   * @return void\r\n   */\r\n\tfunction setup_cron_events(){\r\n\t\t//Link monitor\r\n        if ( $this->conf->options['run_via_cron'] ){\r\n            if (!wp_next_scheduled('blc_cron_check_links')) {\r\n\t\t\t\twp_schedule_event( time(), 'hourly', 'blc_cron_check_links' );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\twp_clear_scheduled_hook('blc_cron_check_links');\r\n\t\t}\r\n\t\t\r\n\t\t//Email notifications about broken links\r\n\t\tif ( $this->conf->options['send_email_notifications'] || $this->conf->options['send_authors_email_notifications'] ){\r\n\t\t\tif ( !wp_next_scheduled('blc_cron_email_notifications') ){\r\n\t\t\t\twp_schedule_event(time(), $this->conf->options['notification_schedule'], 'blc_cron_email_notifications');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\twp_clear_scheduled_hook('blc_cron_email_notifications');\r\n\t\t}\r\n\t\t\r\n\t\t//Run database maintenance every two weeks or so\r\n\t\tif ( !wp_next_scheduled('blc_cron_database_maintenance') ){\r\n\t\t\twp_schedule_event(time(), 'bimonthly', 'blc_cron_database_maintenance');\r\n\t\t}\r\n\t\t\r\n\t\t//Check for news notices related to this plugin\r\n\t\tif ( !wp_next_scheduled('blc_cron_check_news') ){\r\n\t\t\twp_schedule_event(time(), 'daily', 'blc_cron_check_news');\r\n\t\t}\r\n\t} \r\n\t\r\n  /**\r\n   * Load the plugin's textdomain.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction load_language(){\r\n\t\t$this->is_textdomain_loaded = load_plugin_textdomain( 'broken-link-checker', false, basename(dirname($this->loader)) . '/languages' );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if there's a \"news\" link to display on the plugin's pages.\r\n\t * \r\n\t * @return void\r\n\t */\r\n\tfunction check_news(){\r\n\t\t$url = 'http://w-shadow.com/plugin-news/broken-link-checker-news.txt';\r\n\t\t\r\n\t\t//Retrieve the appropriate \"news\" file\r\n\t\t$res = wp_remote_get($url);\r\n\t\tif ( is_wp_error($res) ){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t//Anything there?\r\n\t\tif ( isset($res['response']['code']) && ($res['response']['code'] == 200) && isset($res['body']) ) {\r\n\t\t\t//The file should contain two lines - a title and an URL\r\n\t\t\t$news = explode(\"\\n\", trim($res['body']));\r\n\t\t\tif ( count($news) == 2 ){\r\n\t\t\t\t//Save for later. \r\n\t\t\t\t$this->conf->options['plugin_news'] = $news;\r\n\t\t\t} else {\r\n\t\t\t\t$this->conf->options['plugin_news'] = null;\r\n\t\t\t}\r\n\t\t\t$this->conf->save_options();\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tprotected static function get_default_log_directory() {\r\n\t\t$uploads = wp_upload_dir();\r\n\t\treturn $uploads['basedir'] . '/broken-link-checker';\r\n\t}\r\n\r\n\tprotected static function get_default_log_basename() {\r\n\t\treturn 'blc-log.txt';\r\n\t}\r\n\r\n}//class ends here\r\n\r\n} // if class_exists...\r\n", "<?php\r\n\r\n/**\r\n * The manager to rule all (post) managers.\r\n * \r\n * This class dynamically registers container modules for the available post types\r\n * (including custom post types) and does stuff that pertain to all of them, such \r\n * as handling save/delete hooks and (re)creating synch records.\r\n * \r\n * @package Broken Link Checker\r\n * @author Janis Elsts\r\n * @access private\r\n */\r\nclass blcPostTypeOverlord {\r\n\tpublic $enabled_post_types = array();  //Post types currently selected for link checking\r\n\tpublic $enabled_post_statuses = array('publish'); //Only posts that have one of these statuses shall be checked\r\n\t \r\n\tvar $plugin_conf;  \r\n\tvar $resynch_already_done = false;\r\n\t\r\n  /**\r\n   * Class \"constructor\". Can't use an actual constructor due to how PHP4 handles object references.\r\n   * \r\n   * Specifically, this class is a singleton. The function needs to pass $this to several other \r\n   * functions (to set up hooks), which will store the reference for later use. However, it appears \r\n   * that in PHP4 the actual value of $this is thrown away right after the constructor finishes, and\r\n   * `new` returns a *copy* of $this. The result is that getInstance() won't be returning a ref.\r\n   * to the same object as is used for hook callbacks. And that's horrible.   \r\n   * \r\n   * Sets up hooks that monitor added/modified/deleted posts and registers\r\n   * virtual modules for all post types.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction init(){\r\n \t\t$this->plugin_conf = blc_get_configuration();\r\n \t\t\r\n \t\tif ( isset($this->plugin_conf->options['enabled_post_statuses']) ){\r\n \t\t\t$this->enabled_post_statuses = $this->plugin_conf->options['enabled_post_statuses'];\r\n \t\t}\r\n\t\t\r\n\t\t//Register a virtual container module for each enabled post type\r\n\t\t$module_manager = blcModuleManager::getInstance();\r\n\t\t\r\n\t\t$post_types = get_post_types(array(), 'objects');\r\n\t\t$exceptions = array('revision', 'nav_menu_item', 'attachment');\r\n\r\n\t\tforeach($post_types as $data){\r\n\t\t\t$post_type = $data->name;\r\n\t\t\t\r\n\t\t\tif ( in_array($post_type, $exceptions) ){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$module_manager->register_virtual_module(\r\n\t\t\t\t$post_type,\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'Name' => $data->labels->name,\r\n\t\t\t\t\t'ModuleCategory' => 'container',\r\n\t\t\t\t\t'ModuleContext' => 'all',\r\n\t\t\t\t\t'ModuleClassName' => 'blcAnyPostContainerManager',\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\t\r\n\t\t\r\n\t\t//These hooks update the synch & instance records when posts are added, deleted or modified.\r\n\t\tadd_action('delete_post', array(&$this,'post_deleted'));\r\n        add_action('save_post', array(&$this,'post_saved'));\r\n        //We also treat post trashing/untrashing as delete/save. \r\n        add_action('trash_post', array(&$this,'post_deleted'));\r\n        add_action('untrash_post', array(&$this,'post_saved'));\r\n        \r\n        //Highlight and nofollow broken links in posts & pages\r\n        if ( $this->plugin_conf->options['mark_broken_links'] || $this->plugin_conf->options['nofollow_broken_links'] ){\r\n        \tadd_filter( 'the_content', array(&$this, 'hook_the_content') );\r\n        \tif ( $this->plugin_conf->options['mark_broken_links'] && !empty( $this->plugin_conf->options['broken_link_css'] ) ){\r\n\t            add_action( 'wp_head', array(&$this,'hook_wp_head') );\r\n\t\t\t}\r\n        }\r\n\t}\t\r\n\t\r\n\t/**\r\n\t * Retrieve an instance of the overlord class.\r\n\t * \r\n\t * @return blcPostTypeOverlord\r\n\t */\r\n\tstatic function getInstance(){\r\n\t\tstatic $instance = null;\r\n\t\tif ( is_null($instance) ){\r\n\t\t\t$instance = new blcPostTypeOverlord;\r\n\t\t\t$instance->init();\r\n\t\t}\r\n\t\treturn $instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Notify the overlord that a post type is active.\r\n\t * \r\n\t * Called by individual instances of blcAnyPostContainerManager to let \r\n\t * the overlord know that they've been created. Since a module instance \r\n\t * is only created if the module is active, this event indicates that\r\n\t * the user has enabled the corresponding post type for link checking.\r\n\t * \r\n\t * @param string $post_type\r\n\t * @return void\r\n\t */\r\n\tfunction post_type_enabled($post_type){\r\n\t\tif ( !in_array($post_type, $this->enabled_post_types) ){\r\n\t\t\t$this->enabled_post_types[] = $post_type;\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * Remove the synch. record and link instances associated with a post when it's deleted \r\n   *\r\n   * @param int $post_id\r\n   * @return void\r\n   */\r\n\tfunction post_deleted($post_id){\r\n\t\t//Get the container type matching the type of the deleted post\r\n\t\t$post = get_post($post_id);\r\n\t\tif ( !$post ){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//Get the associated container object\r\n\t\t$post_container = blcContainerHelper::get_container( array($post->post_type, intval($post_id)) );\r\n\t\t\r\n\t\tif ( $post_container ){\r\n\t\t\t//Delete it\r\n\t\t\t$post_container->delete();\r\n\t\t\t//Clean up any dangling links\r\n\t\t\tblc_cleanup_links();\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * When a post is saved or modified, mark it as unparsed.\r\n   * \r\n   * @param int $post_id\r\n   * @return void\r\n   */\r\n\tfunction post_saved($post_id){\r\n\t\t//Get the container type matching the type of the deleted post\r\n\t\t$post = get_post($post_id);\r\n\t\tif ( !$post ){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n        //Only check links in currently enabled post types\r\n        if ( !in_array($post->post_type, $this->enabled_post_types) ) return;\r\n\t\t\r\n        //Only check posts that have one of the allowed statuses\r\n        if ( !in_array($post->post_status, $this->enabled_post_statuses) ) return;\r\n        \r\n    \t//Get the container & mark it as unparsed\r\n\t\t$args = array($post->post_type, intval($post_id));\r\n\t\t$post_container = blcContainerHelper::get_container( $args );\r\n\r\n        $post_container->mark_as_unsynched();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Create or update synchronization records for all posts.\r\n\t *\r\n\t * @param string $container_type\r\n\t * @param bool $forced If true, assume that all synch. records are gone and will need to be recreated from scratch.\r\n\t * @return void\r\n\t */\r\n\tfunction resynch($container_type = '', $forced = false){\r\n\t\tglobal $wpdb; /** @var wpdb $wpdb */\r\n\t\tglobal $blclog;\r\n\t\t\r\n\t\t//Resynch is expensive in terms of DB performance. Thus we only do it once, processing\r\n\t\t//all post types in one go and ignoring any further resynch requests during this pageload.\r\n\t\t//BUG: This might be a problem if there ever is an actual need to run resynch twice or \r\n\t\t//more per pageload.\r\n\t\tif ( $this->resynch_already_done ){\r\n\t\t\t$blclog->log(sprintf('...... Skipping \"%s\" resyncyh since all post types were already synched.', $container_type));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( empty($this->enabled_post_types) ){\r\n\t\t\t$blclog->warn(sprintf('...... Skipping \"%s\" resyncyh since no post types are enabled.', $container_type));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t$escaped_post_types = array_map('esc_sql', $this->enabled_post_types);\r\n\t\t$escaped_post_statuses = array_map('esc_sql', $this->enabled_post_statuses);\r\n\t\t\r\n\t\tif ( $forced ){\r\n\t\t\t//Create new synchronization records for all posts. \r\n\t\t\t$blclog->log('...... Creating synch records for these post types: '.implode(', ', $escaped_post_types) . ' that have one of these statuses: ' . implode(', ', $escaped_post_statuses));\r\n\t\t\t$start = microtime(true);\r\n\t    \t$q = \"INSERT INTO {$wpdb->prefix}blc_synch(container_id, container_type, synched)\r\n\t\t\t\t  SELECT posts.id, posts.post_type, 0\r\n\t\t\t\t  FROM {$wpdb->posts} AS posts\r\n\t\t\t\t  WHERE\r\n\t\t\t\t  \tposts.post_status IN (%s)\r\n\t \t\t\t\tAND posts.post_type IN (%s)\";\r\n\t\t\t$q = sprintf(\r\n\t\t\t\t$q,\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_statuses) . \"'\",\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_types) . \"'\"\r\n\t\t\t);\r\n\t \t\t$wpdb->query( $q );\r\n\t \t\t$blclog->log(sprintf('...... %d rows inserted in %.3f seconds', $wpdb->rows_affected, microtime(true) - $start));\r\n \t\t} else {\r\n \t\t\t//Delete synch records corresponding to posts that no longer exist.\r\n \t\t\t$blclog->log('...... Deleting synch records for removed posts');\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$q = \"DELETE synch.*\r\n\t\t\t\t  FROM \r\n\t\t\t\t\t {$wpdb->prefix}blc_synch AS synch LEFT JOIN {$wpdb->posts} AS posts\r\n\t\t\t\t\t ON posts.ID = synch.container_id\r\n\t\t\t\t  WHERE \r\n\t\t\t\t\t synch.container_type IN (%s) AND posts.ID IS NULL\";\r\n\t\t\t$q = sprintf(\r\n\t\t\t\t$q,\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_types) . \"'\"\r\n\t\t\t);\r\n\t\t\t$wpdb->query( $q );\r\n\t\t\t$elapsed = microtime(true) - $start;\r\n\t\t\t$blclog->debug($q);\r\n\t\t\t$blclog->log(sprintf('...... %d rows deleted in %.3f seconds', $wpdb->rows_affected, $elapsed));\r\n\r\n\t\t\t//Delete records where the post status is not one of the enabled statuses.\r\n\t\t\t$blclog->log('...... Deleting synch records for posts that have a disallowed status');\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$q = \"DELETE synch.*\r\n\t\t\t\t  FROM\r\n\t\t\t\t\t {$wpdb->prefix}blc_synch AS synch\r\n\t\t\t\t\t LEFT JOIN {$wpdb->posts} AS posts\r\n\t\t\t\t\t ON (synch.container_id = posts.ID and synch.container_type = posts.post_type)\r\n\t\t\t\t  WHERE\r\n\t\t\t\t\t posts.post_status NOT IN (%s)\";\r\n\t\t\t$q = sprintf(\r\n\t\t\t\t$q,\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_statuses) . \"'\"\r\n\t\t\t);\r\n\t\t\t$wpdb->query( $q );\r\n\t\t\t$elapsed = microtime(true) - $start;\r\n\t\t\t$blclog->debug($q);\r\n\t\t\t$blclog->log(sprintf('...... %d rows deleted in %.3f seconds', $wpdb->rows_affected, $elapsed));\r\n\r\n\t\t\t//Remove the 'synched' flag from all posts that have been updated\r\n\t\t\t//since the last time they were parsed/synchronized.\r\n\t\t\t$blclog->log('...... Marking changed posts as unsynched');\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$q = \"UPDATE\r\n\t\t\t\t\t{$wpdb->prefix}blc_synch AS synch\r\n\t\t\t\t\tJOIN {$wpdb->posts} AS posts ON (synch.container_id = posts.ID and synch.container_type=posts.post_type)\r\n\t\t\t\t  SET \r\n\t\t\t\t\tsynched = 0\r\n\t\t\t\t  WHERE\r\n\t\t\t\t\tsynch.last_synch < posts.post_modified\";\r\n\t\t\t$wpdb->query( $q );\r\n\t\t\t$elapsed = microtime(true) - $start;\r\n\t\t\t$blclog->debug($q);\r\n\t\t\t$blclog->log(sprintf('...... %d rows updated in %.3f seconds', $wpdb->rows_affected, $elapsed));\r\n\t\t\t\r\n\t\t\t//Create synch. records for posts that don't have them.\r\n\t\t\t$blclog->log('...... Creating synch records for new posts');\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$q = \"INSERT INTO {$wpdb->prefix}blc_synch(container_id, container_type, synched)\r\n\t\t\t\t  SELECT posts.id, posts.post_type, 0\r\n\t\t\t\t  FROM \r\n\t\t\t\t    {$wpdb->posts} AS posts LEFT JOIN {$wpdb->prefix}blc_synch AS synch\r\n\t\t\t\t\tON (synch.container_id = posts.ID and synch.container_type=posts.post_type)  \r\n\t\t\t\t  WHERE\r\n\t\t\t\t  \tposts.post_status IN (%s)\r\n\t \t\t\t\tAND posts.post_type IN (%s)\r\n\t\t\t\t\tAND synch.container_id IS NULL\";\r\n\t\t\t$q = sprintf(\r\n\t\t\t\t$q,\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_statuses) . \"'\",\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_types) . \"'\"\r\n\t\t\t);\r\n\t\t\t$wpdb->query($q);\r\n\t\t\t$elapsed = microtime(true) - $start;\r\n\t\t\t$blclog->debug($q);\r\n\t\t\t$blclog->log(sprintf('...... %d rows inserted in %.3f seconds', $wpdb->rows_affected, $elapsed));\r\n\t\t}\r\n\t\t\r\n\t\t$this->resynch_already_done = true;\r\n\t}\r\n\t\r\n  /**\r\n   * Hook for the 'the_content' filter. Scans the current post and adds the 'broken_link' \r\n   * CSS class to all links that are known to be broken. Currently works only on standard\r\n   * HTML links (i.e. the '<a href=...' kind). \r\n   *\r\n   * @param string $content Post content\r\n   * @return string Modified post content.\r\n   */\r\n\tfunction hook_the_content($content){\r\n\t\tglobal $post, $wpdb; /** @var wpdb $wpdb */\r\n        if ( empty($post) || !in_array($post->post_type, $this->enabled_post_types)) {\r\n        \treturn $content;\r\n       \t}\r\n        \r\n        //Retrieve info about all occurrences of broken links in the current post\r\n        $q = \"\r\n\t\t\tSELECT instances.raw_url\r\n\t\t\tFROM {$wpdb->prefix}blc_instances AS instances JOIN {$wpdb->prefix}blc_links AS links \r\n\t\t\t\tON instances.link_id = links.link_id\r\n\t\t\tWHERE \r\n\t\t\t\tinstances.container_type = %s\r\n\t\t\t\tAND instances.container_id = %d\r\n\t\t\t\tAND links.broken = 1\r\n\t\t\t\tAND parser_type = 'link' \r\n\t\t\";\r\n\t\t$q = $wpdb->prepare($q, $post->post_type, $post->ID);\r\n\t\t$links = $wpdb->get_results($q, ARRAY_A);\r\n\t\t\r\n\t\t//Return the content unmodified if there are no broken links in this post.\r\n\t\tif ( empty($links) || !is_array($links) ){\r\n\t\t\treturn $content;\r\n\t\t}\r\n\t\t\t\t\r\n\t\t//Put the broken link URLs in an array\r\n\t\t$broken_link_urls = array();\r\n\t\tforeach($links as $link){\r\n\t\t\t$broken_link_urls[] = $link['raw_url'];\r\n\t\t}\r\n\t\t\r\n        //Iterate over all HTML links and modify the broken ones\r\n\t\tif ( $parser = blcParserHelper::get_parser('link') ){\r\n\t\t\t$content = $parser->multi_edit($content, array(&$this, 'highlight_broken_link'), $broken_link_urls);\r\n\t\t}\r\n\t\t\r\n\t\treturn $content;\r\n\t}\r\n\t\r\n  /**\r\n   * Analyse a link and add 'broken_link' CSS class if the link is broken.\r\n   *\r\n   * @see blcHtmlLink::multi_edit() \r\n   *\r\n   * @param array $link Associative array of link data.\r\n   * @param array $broken_link_urls List of broken link URLs present in the current post.\r\n   * @return array|string The modified link\r\n   */\r\n\tfunction highlight_broken_link($link, $broken_link_urls){\r\n\t\tif ( !in_array($link['href'], $broken_link_urls) ){\r\n\t\t\t//Link not broken = return the original link tag\r\n\t\t\treturn $link['#raw'];\r\n\t\t}\r\n\t\t\r\n\t\t//Add 'broken_link' to the 'class' attribute (unless already present).\r\n\t\tif ( $this->plugin_conf->options['mark_broken_links'] ){\r\n\t\t\tif ( isset($link['class']) ){\r\n\t\t\t\t$classes = explode(' ', $link['class']);\r\n\t\t\t\tif ( !in_array('broken_link', $classes) ){\r\n\t\t\t\t\t$classes[] = 'broken_link';\r\n\t\t\t\t\t$link['class'] = implode(' ', $classes);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$link['class'] = 'broken_link';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//Nofollow the link (unless it's already nofollow'ed)\r\n\t\tif ( $this->plugin_conf->options['nofollow_broken_links'] ){\r\n\t\t\tif ( isset($link['rel']) ){\r\n\t\t\t\t$relations = explode(' ', $link['rel']);\r\n\t\t\t\tif ( !in_array('nofollow', $relations) ){\r\n\t\t\t\t\t$relations[] = 'nofollow';\r\n\t\t\t\t\t$link['rel'] = implode(' ', $relations);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$link['rel'] = 'nofollow';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn $link;\r\n\t}\r\n\t\r\n  /**\r\n   * A hook for the 'wp_head' action. Outputs the user-defined broken link CSS.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction hook_wp_head(){\r\n\t\techo '<style type=\"text/css\">',$this->plugin_conf->options['broken_link_css'],'</style>';\r\n\t}\r\n}\r\n\r\n//Start up the post overlord\r\nblcPostTypeOverlord::getInstance();\r\n\r\n\r\n/**\r\n * Universal container item class used for all post types.\r\n * \r\n * @package Broken Link Checker\r\n * @author Janis Elsts\r\n * @access public\r\n */\r\nclass blcAnyPostContainer extends blcContainer {\r\n\tvar $default_field = 'post_content';\r\n\t\r\n  /**\r\n   * Get action links for this post.\r\n   *\r\n   * @param string $container_field Ignored.\r\n   * @return array of action link HTML.\r\n   */\r\n\tfunction ui_get_action_links($container_field = ''){\r\n\t\t$actions = array();\r\n\t\t\r\n\t\t//Fetch the post (it should be cached already)\r\n\t\t$post = $this->get_wrapped_object();\r\n\t\tif ( !$post ){\r\n\t\t\treturn $actions;\r\n\t\t}\r\n\t\t\r\n\t\t$post_type_object = get_post_type_object($post->post_type);\r\n\t\t\r\n\t\t//Each post type can have its own cap requirements\r\n\t\tif ( current_user_can( $post_type_object->cap->edit_post, $this->container_id ) ){\r\n\t\t\t$actions['edit'] = sprintf(\r\n\t\t\t\t'<span class=\"edit\"><a href=\"%s\" title=\"%s\">%s</a>',\r\n\t\t\t\t$this->get_edit_url(),\r\n\t\t\t\t$post_type_object->labels->edit_item,\r\n\t\t\t\t__('Edit')\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t//Trash/Delete link\r\n\t\t\tif ( current_user_can( $post_type_object->cap->delete_post, $this->container_id ) ){\r\n\t\t\t\tif ( $this->can_be_trashed() ) { \r\n\t\t\t\t\t$actions['trash'] = sprintf(\r\n\t\t\t\t\t\t\"<span class='trash'><a class='submitdelete' title='%s' href='%s'>%s</a>\",\r\n\t\t\t\t\t\tesc_attr(__('Move this item to the Trash')),\r\n\t\t\t\t\t\tget_delete_post_link($this->container_id, '', false),\r\n\t\t\t\t\t\t__('Trash')\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$actions['delete'] = sprintf(\r\n\t\t\t\t\t\t\"<span><a class='submitdelete' title='%s' href='%s'>%s</a>\",\r\n\t\t\t\t\t\tesc_attr(__('Delete this item permanently')),\r\n\t\t\t\t\t\tget_delete_post_link($this->container_id, '', true),\r\n\t\t\t\t\t\t__('Delete')\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//View/Preview link\r\n\t\t$title = get_the_title($this->container_id);\r\n\t\tif ( in_array($post->post_status, array('pending', 'draft')) ) {\r\n\t\t\tif ( current_user_can($post_type_object->cap->edit_post, $this->container_id) ){\r\n\t\t\t\t$actions['view'] = sprintf(\r\n\t\t\t\t\t'<span class=\"view\"><a href=\"%s\" title=\"%s\" rel=\"permalink\">%s</a>',\r\n\t\t\t\t\tesc_url( add_query_arg( 'preview', 'true', get_permalink($this->container_id) ) ),\r\n\t\t\t\t\tesc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)),\r\n\t\t\t\t\t__('Preview')\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} elseif ( 'trash' != $post->post_status ) {\r\n\t\t\t$actions['view'] = sprintf(\r\n\t\t\t\t'<span class=\"view\"><a href=\"%s\" title=\"%s\" rel=\"permalink\">%s</a>',\r\n\t\t\t\tesc_url( get_permalink($this->container_id) ),\r\n\t\t\t\tesc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)),\r\n\t\t\t\t__('View')\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn $actions;\r\n\t}\r\n\t\r\n  /**\r\n   * Get the HTML for displaying the post title in the \"Source\" column.\r\n   *\r\n   * @param string $container_field Ignored.\r\n   * @param string $context How to filter the output. Optional, defaults to 'display'. \r\n   * @return string HTML\r\n   */\r\n\tfunction ui_get_source($container_field = '', $context = 'display'){\r\n\t\t$source = '<a class=\"row-title\" href=\"%s\" title=\"%s\">%s</a>';\r\n\t\t$source = sprintf(\r\n\t\t\t$source,\r\n\t\t\t$this->get_edit_url(),\r\n\t\t\tesc_attr(__('Edit this item')),\r\n\t\t\tget_the_title($this->container_id)\r\n\t\t);\r\n\t\t\r\n\t\treturn $source;\r\n\t}\r\n\t\r\n  /**\r\n   * Get edit URL for this container. Returns the URL of the Dashboard page where the item \r\n   * associated with this container can be edited.\r\n   *\r\n   * @access protected   \r\n   *\r\n   * @return string\r\n   */\r\n\tfunction get_edit_url(){\r\n\t\t/*\r\n\t\tThe below is a near-exact copy of the get_post_edit_link() function.  \r\n\t\tUnfortunately we can't just call that function because it has a hardcoded \r\n\t\tcaps-check which fails when called from the email notification script \r\n\t\texecuted by Cron.\r\n\t\t*/ \r\n\t\t\r\n\t\tif ( !$post = $this->get_wrapped_object() ){\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\t\r\n\t\t$context = 'display';\r\n\t\t$action = '&amp;action=edit';\r\n\t\t\t\r\n\t\t$post_type_object = get_post_type_object( $post->post_type );\r\n\t\tif ( !$post_type_object ){\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\t\r\n\t\treturn apply_filters( 'get_edit_post_link', admin_url( sprintf($post_type_object->_edit_link . $action, $post->ID) ), $post->ID, $context );\r\n\t}\r\n\t\r\n  /**\r\n   * Retrieve the post associated with this container. \r\n   *\r\n   * @access protected\r\n   *\r\n   * @param bool $ensure_consistency Set this to true to ignore the cached $wrapped_object value and retrieve an up-to-date copy of the wrapped object from the DB (or WP's internal cache).\r\n   * @return object Post data.\r\n   */\r\n\tfunction get_wrapped_object($ensure_consistency = false){\r\n\t\tif( $ensure_consistency || is_null($this->wrapped_object) ){\r\n\t\t\t$this->wrapped_object = get_post($this->container_id);\r\n\t\t}\t\t\r\n\t\treturn $this->wrapped_object;\r\n\t}\r\n\r\n  /**\r\n   * Update the post associated with this container.\r\n   *\r\n   * @access protected\r\n   *\r\n   * @return bool|WP_Error True on success, an error if something went wrong.\r\n   */\r\n\tfunction update_wrapped_object(){\r\n\t\tif ( is_null($this->wrapped_object) ){\r\n\t\t\treturn new WP_Error(\r\n\t\t\t\t'no_wrapped_object',\r\n\t\t\t\t__('Nothing to update', 'broken-link-checker')\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t$post_id = wp_update_post($this->wrapped_object, true);\r\n\t\tif ( is_wp_error($post_id) ) {\r\n\t\t\treturn $post_id;\r\n\t\t} else if ( $post_id == 0 ){\r\n\t\t\treturn new WP_Error(\r\n\t\t\t\t'update_failed',\r\n\t\t\t\tsprintf(__('Updating post %d failed', 'broken-link-checker'), $this->container_id)\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * Get the base URL of the container. For posts, the post permalink is used\r\n   * as the base URL when normalizing relative links.\r\n   *\r\n   * @return string\r\n   */\r\n\tfunction base_url(){\r\n\t\treturn get_permalink($this->container_id);\r\n\t}\r\n\t\r\n  /**\r\n   * Delete or trash the post corresponding to this container.\r\n   * Will always move to trash instead of deleting if trash is enabled.\r\n   *\r\n   * @return bool|WP_error\r\n   */\r\n\tfunction delete_wrapped_object(){\r\n\t\t//Note that we don't need to delete the synch record and instances here - \r\n\t\t//wp_delete_post()/wp_trash_post() will run the post_delete/trash hook, \r\n\t\t//which will be caught by blcPostContainerManager, which will in turn \r\n\t\t//delete anything that needs to be deleted.\r\n\t\tif ( EMPTY_TRASH_DAYS ){\r\n\t\t\treturn $this->trash_wrapped_object();\r\n\t\t} else {\r\n\t\t\tif ( wp_delete_post($this->container_id, true) ){\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn new WP_Error(\r\n\t\t\t\t\t'delete_failed',\r\n\t\t\t\t\tsprintf(\r\n\t\t\t\t\t\t__('Failed to delete post \"%s\" (%d)', 'broken-link-checker'),\r\n\t\t\t\t\t\tget_the_title($this->container_id),\r\n\t\t\t\t\t\t$this->container_id\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Move the post corresponding to this container to the Trash.\r\n\t * \r\n\t * @return bool|WP_Error\r\n\t */\r\n\tfunction trash_wrapped_object(){\r\n\t\tif ( !EMPTY_TRASH_DAYS ){\r\n\t\t\treturn new WP_Error(\r\n\t\t\t\t'trash_disabled',\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t__('Can\\'t move post \"%s\" (%d) to the trash because the trash feature is disabled', 'broken-link-checker'),\r\n\t\t\t\t\tget_the_title($this->container_id),\r\n\t\t\t\t\t$this->container_id\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t$post = get_post($this->container_id);\r\n\t\tif ( $post->post_status == 'trash' ){\r\n\t\t\t//Prevent conflicts between post and custom field containers trying to trash the same post.\r\n\t\t\t//BUG: Post and custom field containers shouldn't wrap the same object\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif ( wp_trash_post($this->container_id) ){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn new WP_Error(\r\n\t\t\t\t'trash_failed',\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t__('Failed to move post \"%s\" (%d) to the trash', 'broken-link-checker'),\r\n\t\t\t\t\tget_the_title($this->container_id),\r\n\t\t\t\t\t$this->container_id\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if the current user can delete/trash this post.\r\n\t * \r\n\t * @return bool\r\n\t */\r\n\tfunction current_user_can_delete(){\r\n\t\t$post = $this->get_wrapped_object();\r\n\t\t$post_type_object = get_post_type_object($post->post_type);\r\n\t\treturn current_user_can( $post_type_object->cap->delete_post, $this->container_id );\r\n\t}\r\n\t\r\n\tfunction can_be_trashed(){\r\n\t\treturn defined('EMPTY_TRASH_DAYS') && EMPTY_TRASH_DAYS;\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Universal manager usable for most post types.\r\n * \r\n * @package Broken Link Checker\r\n * @access public\r\n */\r\nclass blcAnyPostContainerManager extends blcContainerManager {\r\n\tvar $container_class_name = 'blcAnyPostContainer';\r\n\tvar $fields = array('post_content' => 'html');\r\n\t\r\n\tfunction init(){\r\n\t\tparent::init();\r\n\r\n\t\t//Notify the overlord that the post/container type that this instance is \r\n\t\t//responsible for is enabled.\r\n\t\t$overlord = blcPostTypeOverlord::getInstance();\r\n\t\t$overlord->post_type_enabled($this->container_type); \r\n\t}\r\n\t\r\n  /**\r\n   * Instantiate multiple containers of the container type managed by this class.\r\n   *\r\n   * @param array $containers Array of assoc. arrays containing container data.\r\n   * @param string $purpose An optional code indicating how the retrieved containers will be used.\r\n   * @param bool $load_wrapped_objects Preload wrapped objects regardless of purpose. \r\n   * \r\n   * @return array of blcPostContainer indexed by \"container_type|container_id\"\r\n   */\r\n\tfunction get_containers($containers, $purpose = '', $load_wrapped_objects = false){\r\n\t\t$containers = $this->make_containers($containers);\r\n\t\t\r\n\t\t//Preload post data if it is likely to be useful later\r\n\t\t$preload = $load_wrapped_objects || in_array($purpose, array(BLC_FOR_DISPLAY, BLC_FOR_PARSING));\r\n\t\tif ( $preload ){\r\n\t\t\t$post_ids = array();\r\n\t\t\tforeach($containers as $container){\r\n\t\t\t\t$post_ids[] = $container->container_id;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$args = array('include' => implode(',', $post_ids));\r\n\t\t\t$posts = get_posts($args);\r\n\t\t\t\r\n\t\t\tforeach($posts as $post){\r\n\t\t\t\t$key = $this->container_type . '|' . $post->ID;\r\n\t\t\t\tif ( isset($containers[$key]) ){\r\n\t\t\t\t\t$containers[$key]->wrapped_object = $post;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn $containers;\r\n\t}\r\n\t\r\n  /**\r\n   * Create or update synchronization records for all posts.\r\n   *\r\n   * @param bool $forced If true, assume that all synch. records are gone and will need to be recreated from scratch. \r\n   * @return void\r\n   */\r\n\tfunction resynch($forced = false){\r\n\t\t$overlord = blcPostTypeOverlord::getInstance();\r\n\t\t$overlord->resynch($this->container_type, $forced);\r\n\t}\r\n\t\r\n  /**\r\n   * Get the message to display after $n posts have been deleted.\r\n   *\r\n   * @param int $n Number of deleted posts.\r\n   * @return string A delete confirmation message, e.g. \"5 posts were moved deleted\"\r\n   */\r\n\tfunction ui_bulk_delete_message($n){\r\n\t\t//Since the \"Trash\" feature has been introduced, calling wp_delete_post\r\n\t\t//doesn't actually delete the post (unless you set force_delete to True), \r\n\t\t//just moves it to the trash. So we pick the message accordingly. \r\n\t\t//(If possible, BLC *always* moves to trash instead of deleting permanently.)\r\n\t\tif ( function_exists('wp_trash_post') && EMPTY_TRASH_DAYS ){\r\n\t\t\treturn blcAnyPostContainerManager::ui_bulk_trash_message($n);\r\n\t\t} else {\r\n\t\t\t$post_type_object = get_post_type_object($this->container_type);\r\n\t\t\t$type_name = '';\r\n\t\t\t\r\n\t\t\tif ( $this->container_type == 'post' || is_null($post_type_object) ){\r\n\t\t\t\t$delete_msg = _n(\"%d post deleted.\", \"%d posts deleted.\", $n, 'broken-link-checker');\r\n\t\t\t} elseif ( $this->container_type == 'page' ){\r\n\t\t\t\t$delete_msg = _n(\"%d page deleted.\", \"%d pages deleted.\", $n, 'broken-link-checker');\r\n\t\t\t} else {\r\n\t\t\t\t$delete_msg = _n('%d \"%s\" deleted.', '%d \"%s\" deleted.', $n, 'broken-link-checker');\r\n\t\t\t\t$type_name = ($n == 1 ? $post_type_object->labels->singular_name : $post_type_object->labels->name); \r\n\t\t\t}\r\n\t\t\treturn sprintf($delete_msg, $n, $type_name);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\t\r\n  /**\r\n   * Get the message to display after $n posts have been trashed.\r\n   *\r\n   * @param int $n Number of deleted posts.\r\n   * @return string A confirmation message, e.g. \"5 posts were moved to trash\"\r\n   */\r\n\tfunction ui_bulk_trash_message($n){\r\n\t\t$post_type_object = get_post_type_object($this->container_type);\r\n\t\t$type_name = '';\r\n\t\t\r\n\t\tif ( $this->container_type == 'post' || is_null($post_type_object) ){\r\n\t\t\t$delete_msg = _n(\"%d post moved to the Trash.\", \"%d posts moved to the Trash.\", $n, 'broken-link-checker');\r\n\t\t} elseif ( $this->container_type == 'page' ){\r\n\t\t\t$delete_msg = _n(\"%d page moved to the Trash.\", \"%d pages moved to the Trash.\", $n, 'broken-link-checker');\r\n\t\t} else {\r\n\t\t\t$delete_msg = _n('%d \"%s\" moved to the Trash.', '%d \"%s\" moved to the Trash.', $n, 'broken-link-checker');\r\n\t\t\t$type_name = ($n == 1 ? $post_type_object->labels->singular_name : $post_type_object->labels->name); \r\n\t\t}\r\n\t\treturn sprintf($delete_msg, $n, $type_name);\r\n\t}\r\n}\r\n", "=== Broken Link Checker ===\r\nContributors: whiteshadow\r\nDonate link: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=A6P9S6CE3SRSW\r\nTags: links, broken, maintenance, blogroll, custom fields, admin, comments, posts\r\nRequires at least: 3.2\r\nTested up to: 4.2-beta\r\nStable tag: 1.10.5\r\n\r\nThis plugin will check your posts, comments and other content for broken links and missing images, and notify you if any are found. \r\n\r\n== Description ==\r\nThis plugin will monitor your blog looking for broken links and let you know if any are found.\r\n\r\n**Features**\r\n\r\n* Monitors links in your posts, pages, comments, the blogroll, and custom fields (optional).\r\n* Detects links that don't work, missing images and redirects.\r\n* Notifies you either via the Dashboard or by email.\r\n* Makes broken links display differently in posts (optional).\r\n* Prevents search engines from following broken links (optional).\r\n* You can search and filter links by URL, anchor text and so on.\r\n* Links can be edited directly from the plugin's page, without manually updating each post.\r\n* Highly configurable.\r\n\r\n[Suggest new features and improvements here](http://feedback.w-shadow.com/forums/58400-broken-link-checker)\r\n\r\n**Basic Usage**\r\n\r\nOnce installed, the plugin will begin parsing your posts, bookmarks (AKA blogroll) and other content and looking for links. Depending on the size of your site this can take from a few minutes up to an hour or more. When parsing is complete, the plugin will start checking each link to see if it works. Again, how long this takes depends on how big your site is and how many links there are. You can monitor the progress and tweak various link checking options in *Settings -> Link Checker*.\r\n\r\nThe broken links, if any are found, will show up in a new tab of the WP admin panel - *Tools -> Broken Links*. A notification will also appear in the \"Broken Link Checker\" widget on the Dashboard. To save display space, you can keep the widget closed and configure it to expand automatically when problematic links are detected. E-mail notifications need to be enabled separately (in *Settings -> Link Checker*).\r\n\r\nThe \"Broken Links\" tab will by default display a list of broken links that have been detected so far. However, you can use the links on that page to view redirects or see a listing of all links - working or not - instead. You can also create new link filters by performing a search and clicking the \"Create Custom Filter\" button. For example, this can be used to create a filter that only shows comment links.\r\n\r\nThere are several actions associated with each link. They show up when you move your mouse over to one of the links listed the aforementioned tab -\r\n\r\n* \"Edit URL\" lets you change the URL of that link. If the link is present in more than one place (e.g. both in a post and in the blogroll), all occurrences of that URL will be changed.\r\n* \"Unlink\" removes the link but leaves the link text intact.\r\n* \"Not broken\" lets you manually mark a \"broken\" link as working. This is useful if you know it was incorrectly detected as broken due to a network glitch or a bug. The marked link will still be checked periodically, but the plugin won't consider it broken unless it gets a new result.\r\n* \"Dismiss\" hides the link from the \"Broken Links\" and \"Redirects\" views. It will still be checked as normal and get the normal link styles (e.g. a strike-through effect for broken links), but won't be reported again unless its status changes. Useful if you want to acknowledge a link as broken/redirected and just leave as it is.\r\n\r\nYou can also click on the contents of the \"Status\" or \"Link Text\" columns to get more info about the status of each link.\r\n\r\n**Translations**\r\n\r\n* Arabic - Yaser Maadan\r\n* Belorussian - [M. Comfi](http://www.comfi.com/)\r\n* Chinese Simplified - Kaijia Feng\r\n* Chinese Traditional - [YILIN](http://sh2153.com)\r\n* Czech - [Lelkoun](http://lelkoun.cz/)\r\n* Danish - [Georg S. Adamsen](http://wordpress.blogos.dk/)\r\n* Dutch - [Robin Roelofsen](http://www.dreamdesignsolutions.nl/)\r\n* Finnish - [Jani Alha](http://www.wysiwyg.fi)\r\n* French - [Whiler](http://blogs.wittwer.fr/whiler/), Luc Capronnier, [Guillaume Boda](http://www.michtoblog.com/)\r\n* German - [Ivan Graf](http://blog.bildergallery.com/)\r\n* Hebrew - [Ahrale](http://atar4u.com/), [Eitan Caspi](http://caspi.org.il/)\r\n* Hindi - [Outshine Solutions](http://outshinesolutions.com/)\r\n* Hungarian - [Language Connect](http://www.languageconnect.net/)\r\n* Irish - [Ray Gren](http://letsbefamous.com/)\r\n* Italian - [Gianni Diurno](http://gidibao.net/index.php/portfolio/) and [Giacomo Ross](http://www.luxemozione.com/) (alternative)\r\n* Japanese - [Shohei Tanak](http://artisanworkshop.biz/)\r\n* Korean - [MinHyeong Lim](http://ssamture.net/)\r\n* Persian - [Omid Sheerkavand](http://qanal.ir/)\r\n* Polish - [http://positionmaker.pl](http://positionmaker.pl/)\r\n* Portuguese - [mowster](http://wordpress.mowster.net/)\r\n* Brazilian Portuguese - [Paulino Michelazzo](http://www.michelazzo.com.br/)\r\n* Romanian - [Ovidiu](http://www.jibo.ro)\r\n* Russian - [Anna Ozeritskaya](http://hweia.ru/)\r\n* Serbo-Croatian - [Borisa Djuraskovic](http://www.webhostinghub.com)\r\n* Slovakian - [Patrik \u017dec](http://patwist.com/)\r\n* Spanish - [Neoshinji](http://blog.tuayudainformatica.com/traducciones-de-plugins-wordpress/)\r\n* Turkish - [Murat Durgun](http://www.lanwifi.net/)\r\n* Ukrainian - [Stas Mykhajlyuk](http://www.kosivart.com/)\r\n* Vietnamese - [Biz.O](http://bizover.net/)\r\n\r\n*Note: Some translations are not entirely up to date with the latest release, so parts of the interface may appear untranslated.*\r\n\r\n**Other Credits**\r\n\r\nThis plugin uses some icons from the [Font Awesome icon font](http://fortawesome.github.io/Font-Awesome/). Font Awesome is licensed under SIL OFL 1.1.\r\n\r\n== Installation ==\r\n\r\nTo do a new installation of the plugin, please follow these steps\r\n\r\n1. Download the broken-link-checker.zip file to your computer.\r\n1. Unzip the file \r\n1. Upload `broken-link-checker` folder to the `/wp-content/plugins/` directory\r\n1. Activate the plugin through the 'Plugins' menu in WordPress\r\n\r\nTo enable/disable various features and tweak the plugin's configuration go to *Settings -> Link Checker*.\r\n\r\nTo upgrade your installation\r\n\r\n1. Deactivate the plugin\r\n1. Retrieve and upload the new files (do steps 1. - 3. from \"new installation\" instructions)\r\n1. Reactivate the plugin. Your settings will be retained from the previous version.\r\n\r\n== Changelog ==\r\n\r\n= 1.10.6 =\r\n* Switched to YouTube API v3. The old API version will be shut down on April 20, so the plugin needs to be updated to continue checking links to YouTube videos.\r\n* Fixed long URLs overflowing into adjacent table columns.\r\n* Fixed a few minor PHP strict-mode notices.\r\n* Added database character set to the \"Show debug info\" table.\r\n\r\n= 1.10.5 =\r\n* Security: Fixed an XSS vulnerability that could be used by Editors and Administrators to inject arbitrary HTML/JS code in the \"Tools -> Broken Links\" page.\r\n* Other minor security fixes.\r\n* Tested on WordPress 4.2 beta.\r\n\r\n= 1.10.4 =\r\n* Tested on WordPress 4.1.\r\n* Fixed a \"Use of undefined constant ENT_HTML401\" notice showing up on sites running PHP 5.3 or older.\r\n* Fixed a double-escaping bug that could cause some link URLs to be displayed incorrectly.\r\n* Updated French translation.\r\n* Updated Dutch translation.\r\n\r\n= 1.10.3 =\r\n * Security: Filter link URLs before displaying them on the \"Broken Links\" page.\r\n * Security: Prevent Editors and Administrators who don't have the \"unfiltered_html\" capability from creating \"javascript:\" URLs by editing existing links.\r\n\r\n= 1.10.2 =\r\n* Fixed an XSS vulnerability on the link checker settings page.\r\n* Fixed old YouTube embed code parsing - now it should pick up self-closing embed tags without an `<object>` wrapper.\r\n* Updated German translation.\r\n* Updated Simplified Chinese translation.\r\n* Link actions will now wrap properly on small screens.\r\n\r\n= 1.10.1 =\r\n* Fixed a database versioning issue that would cause multiple errors when upgrading from 1.9.5 to 1.10.\r\n\r\n= 1.10 =\r\n* Added a way to hide individual link actions like \"Dismiss\" and \"Unlink\".\r\n* Added a \"Fix redirect\" link action. It replaces a redirect with a direct link. It is hidden by default and can be enabled through the settings page.\r\n* Added a \"Recheck\" link action. Unlike the bulk action by the same name, it checks a link immediately and displays the results without having to refresh the page. \r\n* Added a \"Dismiss\" bulk action.\r\n* Added a note below the \"link tweaks\" settings explaining that they only apply to the contents of posts (and pages, and CPTs), not comments or custom fields.\r\n* Made the \"Redirect URL\" column sortable.\r\n* Added a \"Details\" link to the \"Status\" column.\r\n* Added a \"Warnings\" section to Tools -> Broken Links. It shows problems that might be temporary or false positives. Warnings can be disabled through the settings page.\r\n* Fixed a conflict with plugins that use PHP sessions.\r\n* Fixed the \"post statuses\" option. Now disabling a post status (e.g. \"Draft\") should take effect immediately.\r\n* Fixed the Mediafire link checker.\r\n* Fixed the text in the \"Status\" column being slightly offset vertically when compared to other columns.\r\n* Fixed search box position in WP 4.1-alpha.\r\n* Added a few workarounds for situations where a custom post type is removed without first removing the posts.\r\n* Removed the screen icon. WordPress has deprecated it.\r\n* Other minor fixes.\r\n\r\n= 1.9.5 =\r\n* Fixed missing YouTube videos not being detected when the video URL starts with https instead of http.\r\n* Enabled the YouTube video checker by default on new installations.\r\n* Made the \"dismiss link\" option more permanent. Instead of restoring a dismissed link if the redirect URL changes even a little bit, the plugin will now ignore query string changes. This should fix many of the reports about dismissed links reappearing for no apparent reason.\r\n* Updated Portuguese, German and Dutch translations.\r\n* Other minor fixes.\r\n\r\n= 1.9.4.2 =\r\n* Updated Dutch translation again.\r\n* Removed Bulgarian translation because it was poor quality and outdated.\r\n\r\n= 1.9.4.1 =\r\n* Updated Dutch translation.\r\n* Updated POT file.\r\n\r\n= 1.9.4 =\r\n* Tested on WP 4.0 beta.\r\n* Added a Serbo-Croatian translation.\r\n* Added a Slovakian translation.\r\n* Replaced the old Japanese translation with a new and more up-to-date version from a different translator.\r\n* Updated Dutch, German, Polish, Hebrew and other translations.\r\n* Fixed a notice about undefined index \"status_text\".\r\n* Fixed a \"doing it wrong\" warning related to screen options.\r\n* Fixed spurious false positives on links copied from Word or similar editors.\r\n* Fixed view switcher appearance in WP 4.0.\r\n* Replaced the deprecated like_esc() function with $wpdb->esc_like() where available.\r\n* Fixed plaintext URLs not being detected if they're the very first thing in a post.\r\n* Fixed a bug that caused quotes and other special characters in the broken link CSS and removed link CSS fields to be auto-escaped with a slash, potentially breaking the CSS.\r\n* Fixed a bug that caused the \"check custom fields\" feature work inconsistently or not at all on custom post types.\r\n* Fixed duplicate custom field links showing up when the user creates a revision with different field values.\r\n* Fixed a specific type of false positive where some links would get flagged as \"Unknown Error\" and the log message would be \"Empty reply from server\".\r\n* Fixed a bug where only the first enabled post type would be resynchronized during plugin activation.\r\n* Added more logging.\r\n* Removed Megavideo and MegaUpload modules. These sites no longer exist.\r\n\r\n= 1.9.3 =\r\n* Tested on WP 3.8.1 and WP 3.9-beta2.\r\n* Added an option to sort links by link text. May produce unexpected results for links that have multiple copies with different anchor text.\r\n* Added a Vietnamese translation.\r\n* Added file-based logging for debugging purposes. Logging can be enabled in the \"Advanced\" section of the plugin settings page.\r\n* Added a \"Auto-Submitted: auto-generated\" header to notification emails sent by the plugin. This should prevent \"out-of-office\" auto-responders and similar software from responding to these emails.\r\n* Added domain-based rate limiting to the HTTP checker module.\r\n* Throttled background parsing by about 40% to reduce overall resource usage.\r\n* Fixed (probably) a long-standing bug related to encoding international characters in link URLs.\r\n* Fixed a typo in the Polish translation.\r\n* Made the error message that's displayed when trying to network-activate the plugin more useful.\r\n\r\n= 1.9.2 =\r\n* Fixed several UI/layout issues related to the new WP 3.8 admin style.\r\n* Fixed HTML entity codes showing up in confirmation messages in when running a localized version of WP (only affects some languages).\r\n* Fixed the \"dismiss this notice\" link URL not being HTML-escaped.\r\n* Fixed a couple of cross-site scripting vulnerabilities related to the sort direction query argument not being properly validated and the bulk action form not escaping the current URL.\r\n* Updated Hebrew translation.\r\n* Updated French translation.\r\n* When you dismiss a link, the dismissed link counter is now updated right away instead of on page reload.\r\n\r\n= 1.9.1 =\r\n* Updated Dutch, German, Chinese and Portuguese translations.\r\n* Fixed suggestions not working on sites that force HTTPS in the WordPress admin.\r\n* Tested on WordPress 3.7.\r\n\r\n= 1.9 =\r\n* Added the ability to edit link text from inside the plugin. This features is only available for certain types of links.\r\n* Added a \"suggestions\" feature. When you go to edit a broken link, the plugin will now suggest replacing it with an archived page from the Wayback Machine (if available). You can disable suggestions in Settings -> Link Checker -> General.\r\n* Added a Hebrew translation.\r\n* Added support for HTML code in custom fields. To make the plugin treat a field as HTML, prefix its name with \"html:\" in BLC settings. For example, if you have a custom field named \"foo\" that contains HTML, enter it as \"html:foo\".\r\n* Fixed: The \"Status\" column is now properly updated when editing a link.\r\n* Fixed: Visual feedback when a link is successfully edited. Basically, it briefly changes the row background to green.\r\n* Fixed: Email notifications will only include the \"see all broken links here\" link if the recipient can actually access that link.\r\n* Fixed some UI labels not being localizable.\r\n* The \"Undismiss\" action is now displayed in all views instead of only the \"Dismissed\" view. This way you can tell if a broken link has been dismissed without having to search the \"Dismissed\" list.\r\n* Added information about the last email notification sent to debug info. It's accessible by clicking \"show debug info\" on the plugin settings page.\r\n\r\n= 1.8.3 =\r\n* Added a Hungarian translation.\r\n* Fixed a bunch of \"deprecated function\" notices that showed up due to wpdb::escape() becoming deprecated in WP 3.6.\r\n* Fixed a vulnerability that would allow users with the ability to bulk-edit links to execute arbitrary PHP code by using a specially crafted regex as the search string.\r\n* Updated German translation.\r\n* Replaced the old Dutch translation with a new and more complete translation by Robin Roelofsen.\r\n\r\n= 1.8.2 =\r\n* Removed one of the translator credits links because Google flagged it as \"suspicious\".\r\n* Updated French translation.\r\n* Updated Polish translation.\r\n* Fixed several field size and layout issues that made the search form display incorrectly in Firefox.\r\n\r\n= 1.8.1 =\r\n* Updated the Polish and Simplified Chinese translations.\r\n* Updated the German translation.\r\n* Added translation strings for two modules that were missing them.\r\n* Replaced a number of icons with GPL-compatible alternatives from Font Awesome.\r\n* Removed some unused images.\r\n\r\n= 1.8 =\r\n* Added an option to only show the dashboard widget for users with the Administrator role, or to disable it completely.\r\n* Added a way to change the notification email address.\r\n* Added support for Smart YouTube \"httpv://\" links.\r\n* Added support for protocol-relative URLs (for example, \"//example.com/\").\r\n* Added support for checking YouTube playlists.\r\n* Added a Brazilian Portuguese (pt-BR) translation.\r\n* Updated Chinese (Traditional) translation.\r\n* Switched over to storing plugin settings as JSON instead of serialized PHP arrays.\r\n* Improved error reporting in situations where the plugin can not load settings from the database.\r\n* Fixed: Display a more specific error message than just \"update failed\" when the plugin fails to modify a post. This only applies to WP 3.5+.\r\n* Fixed: Display the right URL for embedded YouTube playlists. Previously the plugin would show the same (incorrect) URL for all playlists.\r\n\r\n= 1.7.1 =\r\n* Added an Arabic translation.\r\n* Updated Portuguese translation.\r\n* Updated French translation.\r\n* Fixed MySQL errors caused by the plugin converting table names to lowercase.\r\n* Fixed a bug where the plugin would sometimes report broken Twitter links as working.\r\n* Fixed the plugin author URL.\r\n\r\n= 1.7 =\r\n* Added support for youtu.be shortlinks.\r\n* Added a Finnish translation.\r\n* Fixed a graphical bug where the currently selected settings tab would not be highlighted in WordPress 3.5.\r\n* Removed the \"Blogroll items\" module from the list of link containers enabled by default. The WordPress developer team is planning to remove Link Manager from core, and the \"Links\" menu will be hidden by default in new WP 3.5 installs.\r\n* Removed the Admin Menu Editor Pro ad from the \"Settings -> Link Checker\" and the \"Tools -> Broken Links\" pages. \r\n* Disabled the news link (if any) for users who have donated.\r\n* Removed support for pre-WP 2.9 post meta actions.\r\n* Minor styling changes of screen meta links.\r\n* Updated Danish, Germa, Italian, French and Simplified Chinese translations.\r\n* Tested on WordPress 3.5.\r\n\r\n= 1.6.2 =\r\n* Another attempt to fix the \"database not up to date\" that some users are still experiencing even with 1.6.1.\r\n\r\n= 1.6.1 =\r\n* Fixed the \"database not up to date\" bug. Now the plugin should properly upgrade the DB.\r\n\r\n= 1.6 =\r\n* Added a way to dismiss links. Dismissed links don't show up in the \"Broken\" and \"Redirects\" lists, but are still checked as normal and get the normal link styles (e.g. strike-through for broken links). Useful if you want to, for example, acknowledge that a link is broken and leave it be.\r\n* Added a \"Redirect URL\" column. For redirects this will display the URL that the link redirects to. For normal, non-redirected links, it will be empty. This column is hidden by default. You can enable it in the \"Screen Options\" panel.\r\n* Updated French translation.\r\n* Tested on WP 3.4.1.\r\n* Replace the \"More plugins...\" link on the \"Broken Links\" page with a link to the Admin Menu Editor page. This link will be hidden for users who have donated.\r\n* A number of minor fixes.\r\n\r\n= 1.5.5 =\r\n* Fix broken image on the settings page.\r\n\r\n= 1.5.3 =\r\n* Fixed a bug that would cause the donation flag to be recorded incorrectly. Apologies to everyone who donated.\r\n\r\n= 1.5.2 =\r\n* A few minor comment fixes.\r\n* Move certain styles to a separate CSS file, which is where they belong.\r\n* Replace the ThemeFuse banner with one from ManageWP (will go live on June 5).\r\n* Instead of displaying several plugins in the \"More plugins by Janis Elsts\" box, sometimes display just one plugin (AME).\r\n\r\n= 1.5.1 =\r\n* Updated Portuguese translation.\r\n* Updated German translation.\r\n* Fixed the donation link to properly return to the Dashboard upon completion.\r\n* Do not display ads to users who have donated.\r\n\r\n= 1.5 =\r\n* Added a FileServe checker.\r\n* Added Turkish translation.\r\n* Added GoogleVideo and Megavideo embed support.\r\n* Fixed Megaupload links being reported with an \"Unknown error\" message when it should be \"Not found\".\r\n* Fixed a couple of bugs in the Rapidshare and MediaFire checkers.\r\n* Updated German translation.\r\n* Updated Italian translation.\r\n* Updated Portuguese translation.\r\n* The explanatory text for the broken link CSS and removed link CSS inputs can now be translated.\r\n* Tested on WP 3.4-alpha-20291.\r\n\r\n= 1.4 =\r\n* Added an option to send post authors notifications about broken links in their posts.\r\n* Added the ability to sort links by URL (click the column header).\r\n* Added YouTube API throttling to avoid going over the request quota, which could result in false positives on blogs with lots of YouTube videos.\r\n* Added a Bulgarian translation.\r\n* Updated Italian, German and Persian translations.\r\n* Fixed a bug where the \"Feedback\" and other screen meta links wouldn't show up in WP 3.3.\r\n* Fixed the tab CSS for the plugin settings page. Now they should be the right size and look the same in all modern browsers (tested in IE, Firefox, Chrome and Opera).\r\n* Fixed drop-down arrows showing up on meta links that don't actually have dropdowns.\r\n* Tested on WP 3.3 (RC2).\r\n\r\n= 1.3.1 =\r\n* Added support for the new YouTube embed code style. It needs to be explicitly enabled in options.\r\n* Added credits link for the Persian language translator.\r\n* Updated Portuguese translation.\r\n* Updated German translation.\r\n* Partial fix for Mediafire checker failing with a fatal error in some situations.\r\n\r\n= 1.3 =\r\n* Dropped PHP 4 support.\r\n* Fixed a whole lot of PHP 5 related notices and strict-mode warnings.\r\n* Fixed some inconsistent method declarations.\r\n* Fixed a long-standing bug in the ver. 0.9.5 upgrade routine.\r\n* Fixed the look and behavior of the \"Feedback\" and \"Go to Broken Links/Go to Settings\" links to be consistent with other WP screen meta links.\r\n* Updated Chinese (TW) translation.\r\n* Updated Portuguese translation.\r\n* Updated Italian translation (minor fix).\r\n* Replaced the link to FindBroken with a short list of (some of) my other plugins.\r\n\r\n= 1.2.5 =\r\n* Added Irish translation.\r\n* Added Persian translation.\r\n* Added Korean translation.\r\n* Added Chinese Traditional translation.\r\n* Updated German translation.\r\n* Fixed (probably) missing diacritics in the Romanian translation.\r\n* Fixed a crash bug caused by class-json.php no longer being present in the latest WP. Luckily, the plugin only really needed that class for backwards compatibility.\r\n* Made the \"database not up to date\" error message a bit more helpful.\r\n* Shortcodes in image URLs should work now.\r\n* The Dashboard widget is no longer visible to non-privileged users.\r\n* Replaced multiple instances of get_option('home') and get_option('siteurl') - both now deprecated - with home_url().\r\n\r\n= 1.2.4 =\r\n* Fixed a very stupid bug where links would be checked very slowly or not at all.\r\n* Fixed the display of the news link.\r\n* Updated Italian translation.\r\n\r\n= 1.2.3 =\r\n* Updated Portuguese translation.\r\n* Updated German translation.\r\n* Switched to a simpler, MySQL-based locking mechanism. Note: This may cause trouble for people who've hacked their WP install to use persistent database connections.\r\n* Added a poll asking for feedback on a new BLC-related web application idea.\r\n* Minor wording change in the debug info table.\r\n\r\n= 1.2.2 = \r\n* All Pro features now included in the free version!\r\n* Updated Japanese translation.\r\n* Updated Polish translation.\r\n* Updated Portuguese translation.\r\n* Added Romanian translation.\r\n* Fixed a tab layout bug in IE 7.\r\n* Fixed UTF-8 characters outside the domain name being encoded incorrectly (may only work with Curl).\r\n* Fixed a missing translation in email notifications.\r\n* Fixed a rare \"only variables can be returned by reference\" notice.\r\n* Added a donation button and a MaxCDN ad to the Settings page.\r\n* Added a \"Go to Settings\" button to the Broken Links page, and a \"Go to Broken Links\" button to the Settings page.\r\n* Settings page now looks better on small screens.\r\n* Email notifications are now enabled by default.\r\n* \"Link status\" in the search form no longer defaults to the currently displayed filter/view.\r\n* Made the \"installation failed\" message a bit more helpful.\r\n\r\n= 0.9.7.2 =\r\n* Added Polish translation.\r\n* Updated Danish translation.\r\n* Updated Italian translation.\r\n* Fixed an uncommon \"Cannot break/continue 1 level\" error. \r\n* Added a new user feedback survey (the link only shows up after you've used this version for at least two weeks).\r\n\r\n= 0.9.7.1 =\r\n* Updated German translation and fixed the corresponding credits link.\r\n\r\n= 0.9.7 =\r\n* Allow custom field names with spaces.\r\n* Updated German translation.\r\n* Updated Portuguese translation\r\n* Made the \"Current load\" label localizeable.\r\n* Fixed a translation-related bug where the various checkboxes in the \"Link types\" and \"Look for links in\" sections would appear in English even when a valid translation was available.\r\n* Fixed non-ASCII URLs being mangled when links are automatically marked with the \"broken_link\" CSS class.\r\n* Fixed blog names that include quotes being displayed incorrectly in email notifications.\r\n* When removing a link via the \"Unlink\" action, add the old URL as the title attribute of the now-unlinked anchor text.\r\n* When resolving relative URLs posted in comments, use the comment's permalink as the base (previously the blog's homepage URL was used).\r\n\r\n= 0.9.6 =\r\n* Updated Danish translation.\r\n* Updated Italian translation.\r\n* Updated Portuguese translation\r\n* Fixed incorrect parsing of relative URLs that consist solely of a query string or \\#fragment.\r\n* Fixed superfluous resynchronization requests being issued when the plugin is re-activated.\r\n* Fixed only one of character set and collation being specified for the plugin's tables.\r\n* Added default status text for HTTP codes 509 and 510.\r\n* Added the installation log to debug info output.\r\n* Added lots of logging to routines called on activation.\r\n* Added an \"Upgrade to Pro\" button to the plugin's pages.\r\n* Removed the highlight on the \"Feedback\" button.\r\n* Fail fast if trying to activate on an unsupported version of WordPress.\r\n* Ensure PHP and browser timeouts don't prematurely terminate the installation/upgrade script.\r\n* Plugin JavaScript and CSS files are now loaded using HTTPS when FORCE_ADMIN_SSL is on.\r\n\r\n= 0.9.5 =\r\n* Added the ability to check scheduled, draft and private posts.\r\n* Added a way to individually enable/disable the monitoring of posts, pages, comments, the blogroll, and so on.\r\n* New \"Status\" column in the \"Broken Links\" table.\r\n* Visible table columns and the number of links per page can now be selected in the \"Screen Options\" panel.\r\n* Replaced the \"Delete sources\" action with \"Move sources to Trash\" (except on blogs where Trash is disabled).\r\n* New URL editor interface, now more consistent with the look-n-feel of the inline editor for posts.\r\n* New status icon to help distinguish \"maybe broken\" and \"definitely broken\" links.\r\n* Tweaked table layout - links first, posts/etc last.\r\n* Added \"Compact\" and \"Detailed\" table views (for now, the differences are quite minor).\r\n* Split the settings page into several tabs.\r\n* Removed the \"Details\" links as redundant. To display link details, click the contents of the \"Status\" or \"Link text\" columns instead.\r\n* Added a way to individually enable/disable the monitoring of various link types, e.g. HTML links, images, etc.\r\n\r\n= 0.9.4.4 =\r\n* Fixed \"Edit URL\" and \"Unlink\" not working on PHP4 servers.\r\n\r\n= 0.9.4.3 =\r\n* Another PHP 4 fix. Considering dropping support for PHP4 in light of the counterintuitive workarounds required to make perfectly valid PHP5 code work in that ghastly thing.\r\n* Added a partial workaround for sites that have use strange DB\\_CHARSET settings.\r\n\r\n= 0.9.4.2 =\r\n* Added more debugging data to the \"Show debug info\" table.\r\n* Added missing indexes to the instance table.\r\n* Yet more PHP4 compatibility fixes.\r\n* Added a notification bubble with the current number of broken links to the Tools -> Broken Links menu item.\r\n\r\n= 0.9.4.1 =\r\n* Fixed PHP 4 incompatibilities introduced in the previous release.\r\n* Fixed bulk unlink.\r\n* Updated Italian translation.\r\n* Updated Danish translation.\r\n\r\n= 0.9.4 =\r\n* Fixed missing post and comment edit links in email notifications.\r\n* Updated Danish translation.\r\n* Added Japanese translation.\r\n* Added a Hindi translation.\r\n* Added a Portuguese translation.\r\n* Slightly improved DB error reporting.\r\n* Added the ability to disable comment link checking.\r\n* Fixed a couple of minor bugs that made some of the UI text impossible to translate.\r\n* The plugin's tables are now created with the same character set and collation settings as native WP tables (previously they used the database defaults instead).\r\n* Automatically clean up and optimize the plugin's tables twice per month.\r\n* Instead of displaying a zero response time for timed out links, now it shows how long the plugin waited before assuming that the link has timed out.\r\n* Added the default PHP script execution time limit to the \"Debug info\" table.\r\n* Added a \"Mark as not broken\" bulk action.\r\n* Links that make the plugin crash are no longer assumed to be broken.\r\n\r\n= 0.9.3 =\r\n* Fixed a JS error that only happened in IE by removing a superfluous comma from an object literal.\r\n* Fixed load limiting not being completely disabled on servers that don't support it.\r\n* Fixed a mishandling of new comments that would occur when CAPTCHA verification was enabled and someone entered an incorrect code.\r\n* Added installation/update logging.\r\n* Fixed a crash that would occur when the user tried to permanently delete a trashed post that has comments.\r\n\r\n= 0.9.2 =\r\n* In Tools -> Broken Links, highlight links that have been broken for a long time (off by default).\r\n* Fixed an invalid parameter bug in the HTTP link checking routine.\r\n* Added nofollow to broken links (optional, only works for links in posts).\r\n* Fixed some PHP notices and a bunch of deprecated function calls.\r\n* Fixed \"Trash\" links for comments.\r\n\r\n= 0.9.1 =\r\n* Fixed the \"syntax error: unexpected $end\" problem caused by a unintentional PHP shorttag.\r\n* Eliminated a bunch of false positives by adding a workaround for buggy servers that incorrectly respond with 404 to HEAD requests.\r\n* Increased the default server load limit to 4.0 to prevent the plugin from idling endlessly on weakling servers.\r\n\r\n= 0.9 =\r\n* Masquerade as IE 7 when using the Snoopy library to check links. Should prevent some false positives.\r\n* Fixed relative URL handling (yet again). It'll work this time, honest ;)\r\n* Fixed post titles being displayed incorrectly on multilingual blogs (props Konstanin Zhilenko)\r\n* Misc fixes/comments.\r\n* \"Unlink\" works properly now.\r\n* Additional source code comments.\r\n* Don't try to display icons in email notifications. It didn't work anyway.\r\n* Use AJAX nonces for additional security.\r\n* General code cleanup.\r\n* Email notifications about broken links.\r\n* \"Recheck\" bulk action.\r\n* Check comment links.\r\n* Suspend checking if the server is overloaded (on by default).\r\n* Icons for broken links and redirects.\r\n* Fixed some UI glitches.\r\n* \"Discard\" gone, replaced by \"Not broken\".\r\n* \"Exclude\" gone from action links.\r\n* Better handling of false positives.\r\n* FTP, mailto:, javascript: and other links with unsupported protocols now show up in the \ufffdAll links\ufffd list.\r\n\r\n= 0.8.1 =\r\n* Updated Italian translation.\r\n* Removed the survey link.\r\n\r\n= 0.8 =\r\n* Initial support for performing some action on multiple links at once.\r\n* Added a \"Delete sources\" bulk action that lets you delete all posts (or blogroll entries) that contain any of the selected links. Doing this in WP 2.9 and up this will instead move the posts to the trash, not delete them permanently.\r\n* New bulk action : Unlink. Removes all selected links from all posts.\r\n* New bulk action : Fix redirects. Analyzes the selected links and replaces any redirects with direct links.\r\n* Added a notice asking the user to take the feedback survey.\r\n* Update the .POT file with new i18n strings.\r\n\r\n= 0.7.4 =\r\n* Fixed a minor bug where the plugin would display an incorrect number of links in the \"Displaying x-y of z\" label when the user moves to a different page of the results.\r\n* Added Ukrainian translation.\r\n\r\n= 0.7.3 =\r\n* Reverted to the old access-checking algorithm + some error suppression.\r\n\r\n= 0.7.2 =\r\n* Only use the custom access rights detection routine if open\\_basedir is set.\r\n\r\n= 0.7.1 =\r\n* Updated Russian translation.\r\n* Yet another modification of the algorithm that tries to detect a usable directory for the lockfile.\r\n\r\n= 0.7 =\r\n* Added a Search function and the ability to save searches as custom filters\r\n* Added a Spanish translation\r\n* Added a Belorussian translation\r\n* Added an option to add a removed\\_link CSS class to unlinked links\r\n* Slight layout changes\r\n* Added localized date display (where applicable)\r\n* The background worker thread that is started up via AJAX will now close the connection almost immediately after it starts running. This will reduce resource usage slightly. May also solve the rare and mysterious slowdown some users have experienced when activating the plugin.\r\n* Updated Italian translation\r\n* Fixed an unlocalized string on the \"Broken Links\" page\r\n\r\n= 0.6.5 =\r\n* Added Russian translation.\r\n\r\n= 0.6.4 =\r\n* Added French translation.\r\n* Updated Italian translation.\r\n\r\n= 0.6.3 =\r\n* Added a German translation.\r\n\r\n= 0.6.2 =\r\n* Added an Italian translation.\r\n* Added a Danish translation.\r\n* Added a Chinese (Simplified) translation.\r\n* Added a Dutch translation.\r\n\r\n= 0.6.1 =\r\n* Some translation-related fixes.\r\n\r\n= 0.6 =\r\n* Initial localization support.\r\n\r\n= 0.5.18 =\r\n* Added a workaround for auto-enclosures. The plugin should now parse the \"enclosure\" custom field correctly.\r\n* Let people use Enter and Esc as shortcuts for \"Save URL\" and \"Cancel\" (respectively) when editing a link.\r\n\r\n= 0.5.17 =\r\n* Added a redirect detection workaround for users that have safe\\_mode or open\\_basedir enabled.\r\n\r\n= 0.5.16.1 =\r\n* Be more careful when parsing safe\\_mode and open\\_basedir settings.\r\n\r\n= 0.5.16 =\r\n* Also try the upload directory when looking for places where to put the lockfile.\r\n\r\n= 0.5.15 =\r\n* Editing links with relative URLs via the plugin's interface should now work properly. Previously the plugin would just fail silently and behave as if the link was edited, even if it wasn't.\r\n\r\n= 0.5.14 =\r\n* Made the timeout value used when checking links user-configurable.\r\n* The plugin will now report an error instead of failing silently when it can't create the necessary database tables.\r\n* Added a table listing assorted debug info to the settings page. Click the small \"Show debug info\" link to display it.\r\n* Cleaned up some redundant/useless code.\r\n\r\n= 0.5.13 =\r\n* Fixed the bug where the plugin would ignore FORCE\\_ADMIN\\_SSL setting and always use plain HTTP for it's forms and AJAX.\r\n\r\n= 0.5.12 =\r\n* Let the user set a custom temporary directory, if the default one is not accessible for some reason.\r\n\r\n= 0.5.11 =\r\n* Use absolute paths when loading includes. Apparently using the relative path could cause issues in some server configurations.\r\n\r\n= 0.5.10.1 =\r\n* Fix a stupid typo\r\n\r\n= 0.5.10 =\r\n* Separated the user-side functions from the admin-side code so that the plugin only loads what's required.\r\n* Changed some internal flags yet again.\r\n* Changed the algorithm for finding the server's temp directory.\r\n* Fixed the URL extraction regexp again; turns out backreferences inside character classes don't work.\r\n* Process shortcodes in URLs.\r\n* If the plugin can't find a usable directory for temporary files, try wp-content.\r\n* Don't remove <pre> tags before parsing the post. Turns out they can actually contain valid links (oops).\r\n\r\n= 0.5.9 =\r\n* Added an autogenerated changelog.\r\n* Added a workaround to make this plugin compatible with the SimplePress forum.\r\n* Fixed <pre> block parsing, again.\r\n* Fixed a bug where URLs that only differ in character case would be treated as equivalent.\r\n* Improved the database upgrade routine.\r\n\r\n= 0.5.8.1 =\r\n* Added partial proxy support when CURL is available. Proxies will be fully supported in a later version.\r\n\r\n= 0.5.8 =\r\n* Fixed links that are currently in the process of being checked showing up in the \"Broken links\" table.\r\n* The post parser no longer looks for links inside <pre></pre> blocks.\r\n\r\n= 0.5.7 =\r\n* Slightly changed the dashboard widget's layout/look as per a user's request.\r\n\r\n= 0.5.6 =\r\n* Improved relative URL parsing. The plugin now uses the permalink as the base URL when processing posts.\r\n\r\n= 0.5.5 =\r\n* Minor bugfixes\r\n* URLs with spaces (and some other special characters) are now handled better and won't get marked as \"broken\" all the time.\r\n* Links that contain quote characters are parsed properly.\r\n\r\n= 0.5.4 =\r\n* Fixed the uninstaller not deleting DB tables.\r\n* Other uninstallation logic fixes.\r\n\r\n= 0.5.3 =\r\n* Improved timeout detection/handling when using Snoopy.\r\n* Set the max download size to 5 KB when using Snoopy.\r\n* Fixed a rare bug where the settings page would redirect to the login screen when saving settings.\r\n* Removed some stale, unused code (some still remains).\r\n\r\n= 0.5.2 =\r\n* Fixed a SQL query that had the table prefix hard-coded as \"wp\\_\". This would previously make the plugin detect zero links on sites that have a different table prefix.\r\n\r\n= 0.5.1 =\r\n* Fix a bug when the plugin creates a DB table with the wrong prefix.\r\n\r\n= 0.5 =\r\n* This is a near-complete rewrite with a lot of new features. \r\n* See \ufffdhttp://w-shadow.com/blog/2009/05/22/broken-link-checker-05/ for details.\r\n\r\n= 0.4.14 =\r\n* Fix false positives when the URL contains an #anchor\r\n\r\n= 0.4.13 =\r\n* (Hopefully) fix join() failure when Snoopy doesn't return any HTTP headers.\r\n\r\n= 0.4.12 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.4.11 =\r\n* Set the Referer header to blog's home address when checking a link. This should help deal with some bot traps.\r\n* I know, I know - there haven't been any major updates for a while. But there will be eventually :)\r\n* Fix SQL error when a post is deleted.\r\n\r\n= 0.4.10 =\r\n* Changed required access caps for \"Manage -> Broken Links\" from manage\\_options to edit\\_ohers\\_posts. This will allow editor users to access that page and it's functions.\r\n\r\n= 0.4.9 =\r\n* Link sorting, somewhat experimental.\r\n* JavaScript sorting feature for the broken link list.\r\n\r\n= 0.4.8 =\r\n* CURL isn't required anymore. Snoopy is used when CURL isn't available.\r\n* Post title in broken link list is now a link to the post (permalink). Consequently, removed \"View\" button.\r\n* Added a \"Details\" link. Clicking it will show/hide more info about the reported link.\r\n* \"Unlink\" and \"Edit\" now work for images, too. \"Unlink\" simply removes the image.\r\n* Database modifications to enable the changes described above.\r\n* Moved the URL checking function from wsblc\\_ajax.php to broken-link-checker.php; made it more flexible.\r\n* New and improved (TM) regexps for finding links and images.\r\n* A \"Settings\" link added to plugin's action links.\r\n* And probably other stuff I forgot!\r\n* Grr :P\r\n\r\n= 0.4.7 =\r\n* Minor enhancements : \r\n* Autoselect link URL after the user clicks \"Edit\".\r\n* Make sure only HTTP and HTTPS links are checked.\r\n* More substantive improvements will hopefully follow next week.\r\n\r\n= 0.4.6 =\r\n* Minor compatibility enhancement in wsblc\\_ajax.php - don't load wpdb if it's already loaded.\r\n\r\n= 0.4.5 =\r\n* Bugfixes. Nothing more, nothing less.\r\n* Revisions don't get added to the work queue anymore.\r\n* Workaround for rare cURL timeout bug.\r\n* Improved WP 2.6 compatibility.\r\n* Correctly handle URLs containing a single quote '.\r\n\r\n= 0.4.4 =\r\n* Consider a HTTP 401 response OK. Such links won't be marked as broken anymore.\r\n\r\n= 0.4.3 =\r\n* Fix : Don't check links in revisions, only posts/pages.\r\n\r\n= 0.4.2 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.4.1 =\r\n* Split translated version from the previous code. Was causing weird problems.\r\n\r\n= 0.4-i8n =\r\n* *There are no release notes for this version*\r\n\r\n= 0.4 =\r\n* Added localization support (may be buggy).\r\n\r\n= 0.3.9 =\r\n* Fix : Use get\\_permalink to get the \"View\" link. Old behavior was to use the GUID.\r\n\r\n= 0.3.8 =\r\n* Edit broken links @ Manage -> Broken Links (experimental)\r\n\r\n= 0.3.7 =\r\n* Change: A bit more verbose DB error reporting for the \"unlink\" feature.\r\n\r\n= 0.3.6 =\r\n* Switch from wp\\_print\\_scripts() to wp\\_enqueue\\_script()\r\n* Wp\\_enqueue\\_script()\r\n\r\n= 0.3.5 =\r\n* New: \"Delete Post\" option.\r\n* New: Increase the compatibility number.\r\n* Change: Default options are now handled in the class constructor.\r\n\r\n= 0.3.4 =\r\n* Ignore mailto: links\r\n* Ignore links inside <code> blocks\r\n\r\n= 0.3.3 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.3.2 =\r\n* Fix Unlink button not working, some other random fixes\r\n\r\n= 0.3.1 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.3 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.2.5 =\r\n* Applied a small patch @ 347\r\n* Fix some omissions\r\n* Lots of new features in version 0.3\r\n\r\n= 0.2.4 =\r\n* Bigfix - use GET when HEAD fails\r\n\r\n= 0.2.3 =\r\n* MySQL 4.0 compatibility + recheck\\_all\\_posts function\r\n\r\n= 0.2.2.1 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.2.2 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.2 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.1 =\r\n* *There are no release notes for this version*\r\n\r\n== Upgrade Notice ==\r\n\r\n= 1.10.5 =\r\nFixes a significant security issue.\r\n\r\n= 1.9.2 =\r\nFixes UI issues related to the new WP 3.8 admin style and a few security vulnerabilities.\r\n\r\n= 1.6.2 =\r\nAttempts to fix the \"database not up to date\" bug that some users are still experiencing with 1.6.1. If you have not encountered this bug, you can skip this update.\r\n\r\n= 1.4 =\r\nAdds an option to send post authors notifications about broken links in their posts and the the ability to sort links by URL, as well as a number of other updates and fixes.\r\n\r\n= 0.9.4.2 =\r\nFixes a major PHP4 compatibility problem introduced in version 0.9.4 and adds a notification bubble with the current broken link count to the \"Broken Links\" menu."], "fixing_code": ["<?php\r\n\r\n/**\r\n * Simple function to replicate PHP 5 behaviour\r\n */\r\nif ( !function_exists( 'microtime_float' ) ) {\r\n\tfunction microtime_float()\r\n\t{\r\n\t    list($usec, $sec) = explode(\" \", microtime());\r\n\t    return ((float)$usec + (float)$sec);\r\n\t}\r\n}\r\n\r\nrequire BLC_DIRECTORY . '/includes/screen-options/screen-options.php';\r\nrequire BLC_DIRECTORY . '/includes/screen-meta-links.php';\r\nrequire BLC_DIRECTORY . '/includes/wp-mutex.php';\r\n\r\nif (!class_exists('wsBrokenLinkChecker')) {\r\n\r\nclass wsBrokenLinkChecker {\r\n    var $conf;\r\n    \r\n\tvar $loader;\r\n    var $my_basename = '';\t\r\n    \r\n    var $db_version; \t\t//The required version of the plugin's DB schema.\r\n    \r\n    var $execution_start_time; \t//Used for a simple internal execution timer in start_timer()/execution_time()\r\n\r\n\tprivate $is_textdomain_loaded = false;\r\n    \r\n  /**\r\n   * wsBrokenLinkChecker::wsBrokenLinkChecker()\r\n   * Class constructor\r\n   *\r\n   * @param string $loader The fully qualified filename of the loader script that WP identifies as the \"main\" plugin file.\r\n   * @param blcConfigurationManager $conf An instance of the configuration manager\r\n   * @return void\r\n   */\r\n    function wsBrokenLinkChecker ( $loader, $conf ) {\r\n\t\t$this->db_version = BLC_DATABASE_VERSION;\r\n        \r\n        $this->conf = $conf;\r\n        $this->loader = $loader;\r\n        $this->my_basename = plugin_basename( $this->loader );\r\n\r\n        $this->load_language();\r\n        \r\n        //Unlike the activation hook, the deactivation callback *can* be registered in this file\r\n        //because deactivation happens after this class has already been instantiated (durinng the \r\n\t\t//'init' action). \r\n        register_deactivation_hook($loader, array($this, 'deactivation'));\r\n        \r\n        add_action('admin_menu', array($this,'admin_menu'));\r\n\r\n\t\t//Load jQuery on Dashboard pages (probably redundant as WP already does that)\r\n        add_action('admin_print_scripts', array($this,'admin_print_scripts'));\r\n        \r\n        //The dashboard widget\r\n        add_action('wp_dashboard_setup', array($this, 'hook_wp_dashboard_setup'));\r\n\t\t\r\n        //AJAXy hooks\r\n        add_action( 'wp_ajax_blc_full_status', array($this,'ajax_full_status') );\r\n        add_action( 'wp_ajax_blc_dashboard_status', array($this,'ajax_dashboard_status') );\r\n        add_action( 'wp_ajax_blc_work', array($this,'ajax_work') );\r\n        add_action( 'wp_ajax_blc_discard', array($this,'ajax_discard') );\r\n        add_action( 'wp_ajax_blc_edit', array($this,'ajax_edit') );\r\n        add_action( 'wp_ajax_blc_link_details', array($this,'ajax_link_details') );\r\n        add_action( 'wp_ajax_blc_unlink', array($this,'ajax_unlink') );\r\n        add_action( 'wp_ajax_blc_recheck', array($this,'ajax_recheck') );\r\n        add_action( 'wp_ajax_blc_deredirect', array($this,'ajax_deredirect') );\r\n        add_action( 'wp_ajax_blc_current_load', array($this,'ajax_current_load') );\r\n\r\n\t    add_action( 'wp_ajax_blc_dismiss', array($this, 'ajax_dismiss') );\r\n\t    add_action( 'wp_ajax_blc_undismiss', array($this, 'ajax_undismiss') );\r\n        \r\n        //Add/remove Cron events\r\n        $this->setup_cron_events();\r\n        \r\n        //Set hooks that listen for our Cron actions\r\n    \tadd_action('blc_cron_email_notifications', array( $this, 'maybe_send_email_notifications' ));\r\n\t\tadd_action('blc_cron_check_links', array($this, 'cron_check_links'));\r\n\t\tadd_action('blc_cron_database_maintenance', array($this, 'database_maintenance'));\r\n\t\tadd_action('blc_cron_check_news', array($this, 'check_news'));\r\n\t\t\r\n        //Set the footer hook that will call the worker function via AJAX.\r\n        add_action('admin_footer', array($this,'admin_footer'));\r\n\t\t\r\n\t\t//Add a \"Screen Options\" panel to the \"Broken Links\" page\r\n\t\tadd_screen_options_panel(\r\n\t\t\t'blc-screen-options',\r\n\t\t\t'',\r\n\t\t\tarray($this, 'screen_options_html'),\r\n\t\t\t'tools_page_view-broken-links',\r\n\t\t\tarray($this, 'ajax_save_screen_options'),\r\n\t\t\ttrue\r\n\t\t);\r\n\r\n\t\t//Display an explanatory note on the \"Tools -> Broken Links -> Warnings\" page.\r\n\t\tadd_action('admin_notices', array($this, 'show_warnings_section_notice'));\r\n    }\r\n\r\n  /**\r\n   * Output the script that runs the link monitor while the Dashboard is open.\r\n   *\r\n   * @return void\r\n   */\r\n    function admin_footer(){\r\n    \tif ( !$this->conf->options['run_in_dashboard'] ){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$nonce = wp_create_nonce('blc_work');\r\n        ?>\r\n        <!-- wsblc admin footer -->\r\n        <script type='text/javascript'>\r\n        (function($){\r\n\t\t\t\t\r\n\t\t\t//(Re)starts the background worker thread \r\n\t\t\tfunction blcDoWork(){\r\n\t\t\t\t$.post(\r\n\t\t\t\t\t\"<?php echo admin_url('admin-ajax.php'); ?>\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'action' : 'blc_work',\r\n\t\t\t\t\t\t'_ajax_nonce' : '<?php echo esc_js($nonce); ?>'\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t//Call it the first time\r\n\t\t\tblcDoWork();\r\n\t\t\t\r\n\t\t\t//Then call it periodically every X seconds \r\n\t\t\tsetInterval(blcDoWork, <?php echo (intval($this->conf->options['max_execution_time']) + 1 )*1000; ?>);\r\n\t\t\t\r\n\t\t})(jQuery);\r\n        </script>\r\n        <!-- /wsblc admin footer -->\r\n        <?php\r\n    }\r\n    \r\n  /**\r\n   * Check if an URL matches the exclusion list.\r\n   *\r\n   * @param string $url\r\n   * @return bool\r\n   */\r\n    function is_excluded($url){\r\n        if (!is_array($this->conf->options['exclusion_list'])) return false;\r\n        foreach($this->conf->options['exclusion_list'] as $excluded_word){\r\n            if (stristr($url, $excluded_word)){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function dashboard_widget(){\r\n        ?>\r\n        <p id='wsblc_activity_box'><?php _e('Loading...', 'broken-link-checker');  ?></p>\r\n        <script type='text/javascript'>\r\n        \tjQuery( function($){\r\n        \t\tvar blc_was_autoexpanded = false;\r\n        \t\t\r\n\t\t\t\tfunction blcDashboardStatus(){\r\n\t\t\t\t\t$.getJSON(\r\n\t\t\t\t\t\t\"<?php echo admin_url('admin-ajax.php'); ?>\",\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'action' : 'blc_dashboard_status',\r\n\t\t\t\t\t\t\t'random' : Math.random()\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfunction (data){\r\n\t\t\t\t\t\t\tif ( data && ( typeof(data.text) != 'undefined' ) ) {\r\n\t\t\t\t\t\t\t\t$('#wsblc_activity_box').html(data.text); \r\n\t\t\t\t\t\t\t\t<?php if ( $this->conf->options['autoexpand_widget'] ) { ?>\r\n\t\t\t\t\t\t\t\t//Expand the widget if there are broken links.\r\n\t\t\t\t\t\t\t\t//Do this only once per pageload so as not to annoy the user.\r\n\t\t\t\t\t\t\t\tif ( !blc_was_autoexpanded && ( data.status.broken_links > 0 ) ){\r\n\t\t\t\t\t\t\t\t\t$('#blc_dashboard_widget.postbox').removeClass('closed');\r\n\t\t\t\t\t\t\t\t\tblc_was_autoexpanded = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t<?php } ?>\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t$('#wsblc_activity_box').html('<?php _e('[ Network error ]', 'broken-link-checker'); ?>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsetTimeout( blcDashboardStatus, 120*1000 ); //...update every two minutes\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tblcDashboardStatus();//Call it the first time\r\n\t\t\t\r\n\t\t\t} );\r\n        </script>\r\n        <?php\r\n    }\r\n\r\n    function dashboard_widget_control(\r\n\t\t/** @noinspection PhpUnusedParameterInspection */ $widget_id, $form_inputs = array()\r\n\t){\r\n\t\tif ( 'POST' == $_SERVER['REQUEST_METHOD'] && 'blc_dashboard_widget' == $_POST['widget_id'] ) {\r\n\t\t\t//It appears $form_inputs isn't used in the current WP version, so lets just use $_POST\r\n\t\t\t$this->conf->options['autoexpand_widget'] = !empty($_POST['blc-autoexpand']);\r\n\t\t\t$this->conf->save_options();\r\n\t\t}\r\n\t\r\n\t\t?>\r\n\t\t<p><label for=\"blc-autoexpand\">\r\n\t\t\t<input id=\"blc-autoexpand\" name=\"blc-autoexpand\" type=\"checkbox\" value=\"1\" <?php if ( $this->conf->options['autoexpand_widget'] ) echo 'checked=\"checked\"'; ?> />\r\n\t\t\t<?php _e('Automatically expand the widget if broken links have been detected', 'broken-link-checker'); ?>\r\n\t\t</label></p>\r\n\t\t<?php\r\n    }\r\n\r\n    function admin_print_scripts(){\r\n        //jQuery is used for triggering the link monitor via AJAX when any admin page is open.\r\n        wp_enqueue_script('jquery');\r\n    }\r\n    \r\n    function enqueue_settings_scripts(){\r\n    \t//jQuery UI is used on the settings page\r\n\t\twp_enqueue_script('jquery-ui-core');   //Used for background color animation\r\n        wp_enqueue_script('jquery-ui-dialog');\r\n        wp_enqueue_script('jquery-ui-tabs');\r\n        wp_enqueue_script('jquery-cookie', plugins_url('js/jquery.cookie.js', BLC_PLUGIN_FILE)); //Used for storing last widget states, etc\r\n\t}\r\n\t\r\n\tfunction enqueue_link_page_scripts(){\r\n\t\twp_enqueue_script('jquery-ui-core');\r\n        wp_enqueue_script('jquery-ui-dialog'); //Used for the search form\r\n\t\twp_enqueue_script('jquery-color');     //Used for background color animation\r\n        wp_enqueue_script('sprintf', plugins_url('js/sprintf.js', BLC_PLUGIN_FILE)); //Used in error messages\r\n\t}\r\n\t\r\n  /**\r\n   * Initiate a full recheck - reparse everything and check all links anew. \r\n   *\r\n   * @return void\r\n   */\r\n    function initiate_recheck(){\r\n    \tglobal $wpdb; /** @var wpdb $wpdb */\r\n\r\n    \t//Delete all discovered instances\r\n    \t$wpdb->query(\"TRUNCATE {$wpdb->prefix}blc_instances\");\r\n    \t\r\n    \t//Delete all discovered links\r\n    \t$wpdb->query(\"TRUNCATE {$wpdb->prefix}blc_links\");\r\n    \t\r\n    \t//Mark all posts, custom fields and bookmarks for processing.\r\n    \tblc_resynch(true);\r\n\t}\r\n\r\n  /**\r\n   * A hook executed when the plugin is deactivated.\r\n   *\r\n   * @return void\r\n   */\r\n    function deactivation(){\r\n    \t//Remove our Cron events\r\n\t\twp_clear_scheduled_hook('blc_cron_check_links');\r\n\t\twp_clear_scheduled_hook('blc_cron_email_notifications');\r\n\t\twp_clear_scheduled_hook('blc_cron_database_maintenance');\r\n\t\twp_clear_scheduled_hook('blc_cron_check_news');\r\n\t\t//Note the deactivation time for each module. This will help them \r\n\t\t//synch up propely if/when the plugin is reactivated.\r\n\t\t$moduleManager = blcModuleManager::getInstance();\r\n\t\t$the_time = current_time('timestamp');\r\n\t\tforeach($moduleManager->get_active_modules() as $module_id => $module){\r\n\t\t\t$this->conf->options['module_deactivated_when'][$module_id] = $the_time;\r\n\t\t}\r\n\t\t$this->conf->save_options();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform various database maintenance tasks on the plugin's tables.\r\n\t * \r\n\t * Removes records that reference disabled containers and parsers,\r\n\t * deletes invalid instances and links, optimizes tables, etc.\r\n\t * \r\n\t * @return void\r\n\t */\r\n\tfunction database_maintenance(){\r\n\t\tblcContainerHelper::cleanup_containers();\r\n\t\tblc_cleanup_instances();\r\n\t\tblc_cleanup_links();\r\n\t\t\r\n\t\tblcUtility::optimize_database();\r\n\t}\r\n\r\n    /**\r\n     * Create the plugin's menu items and enqueue their scripts and CSS.\r\n     * Callback for the 'admin_menu' action. \r\n     * \r\n     * @return void\r\n     */\r\n    function admin_menu(){\r\n    \tif (current_user_can('manage_options'))\r\n          add_filter('plugin_action_links', array($this, 'plugin_action_links'), 10, 2);\r\n    \t\r\n        $options_page_hook = add_options_page( \r\n\t\t\t__('Link Checker Settings', 'broken-link-checker'), \r\n\t\t\t__('Link Checker', 'broken-link-checker'), \r\n\t\t\t'manage_options',\r\n            'link-checker-settings',array($this, 'options_page')\r\n\t\t);\r\n\t\t\r\n\t\t$menu_title = __('Broken Links', 'broken-link-checker');\r\n\t\tif ( $this->conf->options['show_link_count_bubble'] ){\r\n\t\t\t//To make it easier to notice when broken links appear, display the current number of \r\n\t\t\t//broken links in a little bubble notification in the \"Broken Links\" menu.  \r\n\t\t\t//(Similar to how the number of plugin updates and unmoderated comments is displayed).\r\n\t\t\t$blc_link_query = blcLinkQuery::getInstance();\r\n\t\t\t$broken_links = $blc_link_query->get_filter_links('broken', array('count_only' => true));\r\n\t\t\tif ( $broken_links > 0 ){\r\n\t\t\t\t//TODO: Appropriating existing CSS classes for my own purposes is hacky. Fix eventually. \r\n\t\t\t\t$menu_title .= sprintf(\r\n\t\t\t\t\t' <span class=\"update-plugins\"><span class=\"update-count blc-menu-bubble\">%d</span></span>', \r\n\t\t\t\t\t$broken_links\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\t\t\r\n        $links_page_hook = add_management_page(\r\n\t\t\t__('View Broken Links', 'broken-link-checker'), \r\n\t\t\t$menu_title, \r\n\t\t\t'edit_others_posts',\r\n            'view-broken-links',array($this, 'links_page')\r\n\t\t);\r\n\t\t \r\n\t\t//Add plugin-specific scripts and CSS only to the it's own pages\r\n\t\tadd_action( 'admin_print_styles-' . $options_page_hook, array($this, 'options_page_css') );\r\n        add_action( 'admin_print_styles-' . $links_page_hook, array($this, 'links_page_css') );\r\n\t\tadd_action( 'admin_print_scripts-' . $options_page_hook, array($this, 'enqueue_settings_scripts') );\r\n        add_action( 'admin_print_scripts-' . $links_page_hook, array($this, 'enqueue_link_page_scripts') );\r\n        \r\n        //Add a \"Feedback\" button that links to the plugin's UserVoice forum\r\n        add_screen_meta_link(\r\n        \t'blc-feedback-widget',\r\n        \t__('Feedback', 'broken-link-checker'),\r\n        \t'http://whiteshadow.uservoice.com/forums/58400-broken-link-checker',\r\n        \tarray($options_page_hook, $links_page_hook)\r\n\t\t);\r\n\r\n\t    //Make the Settings page link to the link list\r\n\t\tadd_screen_meta_link(\r\n        \t'blc-links-page-link',\r\n\t\t\t__('Go to Broken Links', 'broken-link-checker'),\r\n\t\t\tadmin_url('tools.php?page=view-broken-links'),\r\n\t\t\t$options_page_hook,\r\n\t\t\tarray('style' => 'font-weight: bold;')\r\n\t\t);\r\n\t\t\r\n\t\t//Add a link to the latest blog post/whatever about this plugin, if any.\r\n\t\tif ( !$this->conf->get('user_has_donated') && isset($this->conf->options['plugin_news']) && !empty($this->conf->options['plugin_news']) ){\r\n\t\t\t$news = $this->conf->options['plugin_news'];\r\n\t        add_screen_meta_link(\r\n\t        \t'blc-plugin-news-link',\r\n\t        \t$news[0],\r\n\t        \t$news[1],\r\n\t        \tarray($options_page_hook, $links_page_hook)\r\n\t\t\t);\r\n\t\t}\r\n    }\r\n    \r\n  /**\r\n   * plugin_action_links()\r\n   * Handler for the 'plugin_action_links' hook. Adds a \"Settings\" link to this plugin's entry\r\n   * on the plugin list.\r\n   *\r\n   * @param array $links\r\n   * @param string $file\r\n   * @return array\r\n   */\r\n    function plugin_action_links($links, $file) {\r\n        if ($file == $this->my_basename)\r\n            $links[] = \"<a href='options-general.php?page=link-checker-settings'>\" . __('Settings') . \"</a>\";\r\n        return $links;\r\n    }\r\n\r\n    function options_page(){\r\n    \t$moduleManager = blcModuleManager::getInstance();\r\n\r\n\t    //Prior to 1.5.2 (released 2012-05-27), there was a bug that would cause the donation flag to be\r\n\t    //set incorrectly. So we'll unset the flag in that case.\r\n\t    $reset_donation_flag =\r\n\t    \t($this->conf->get('first_installation_timestamp', 0) < strtotime('2012-05-27 00:00')) &&\r\n\t    \t!$this->conf->get('donation_flag_fixed', false);\r\n\r\n\t    if ( $reset_donation_flag) {\r\n\t\t    $this->conf->set('user_has_donated', false);\r\n\t\t    $this->conf->set('donation_flag_fixed', true);\r\n\t\t    $this->conf->save_options();\r\n\t    }\r\n\r\n        if (isset($_POST['recheck']) && !empty($_POST['recheck']) ){\r\n            $this->initiate_recheck();\r\n            \r\n            //Redirect back to the settings page\r\n\t\t\t$base_url = remove_query_arg( array('_wpnonce', 'noheader', 'updated', 'error', 'action', 'message') );\r\n\t\t\twp_redirect( add_query_arg( array( 'recheck-initiated' => true), $base_url ) );\r\n\t\t\tdie();\r\n        }\r\n\r\n\t\t$available_link_actions = array(\r\n\t\t\t'edit'               => __('Edit URL' , 'broken-link-checker'),\r\n\t\t\t'delete'             => __('Unlink', 'broken-link-checker'),\r\n\t\t\t'blc-discard-action' => __('Not broken', 'broken-link-checker'),\r\n\t\t\t'blc-dismiss-action' => __('Dismiss', 'broken-link-checker'),\r\n\t\t\t'blc-recheck-action' => __('Recheck', 'broken-link-checker'),\r\n\t\t\t'blc-deredirect-action' => _x('Fix redirect', 'link action; replace one redirect with a direct link', 'broken-link-checker')\r\n\t\t);\r\n        \r\n        if(isset($_POST['submit'])) {\r\n\t\t\tcheck_admin_referer('link-checker-options');\r\n\r\n\t\t\t$cleanPost = $_POST;\r\n\t\t\tif ( function_exists('wp_magic_quotes') ){\r\n\t\t\t\t$cleanPost = stripslashes_deep($cleanPost); //Ceterum censeo, WP shouldn't mangle superglobals.\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Activate/deactivate modules\r\n\t\t\tif ( !empty($_POST['module']) ){\r\n\t\t\t\t$active = array_keys($_POST['module']);\r\n\t\t\t\t$moduleManager->set_active_modules($active);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Only post statuses that actually exist can be selected\r\n\t\t\tif ( isset($_POST['enabled_post_statuses']) && is_array($_POST['enabled_post_statuses']) ){\r\n\t\t\t\t$available_statuses = get_post_stati();\r\n\t\t\t\t$enabled_post_statuses = array_intersect($_POST['enabled_post_statuses'], $available_statuses); \r\n\t\t\t} else {\r\n\t\t\t\t$enabled_post_statuses = array();\r\n\t\t\t}\r\n\t\t\t//At least one status must be enabled; defaults to \"Published\".\r\n\t\t\tif ( empty($enabled_post_statuses) ){\r\n\t\t\t\t$enabled_post_statuses = array('publish');\r\n\t\t\t}\r\n\r\n\t\t\t//Did the user add/remove any post statuses?\r\n\t\t\t$same_statuses = array_intersect($enabled_post_statuses, $this->conf->options['enabled_post_statuses']);\r\n\t\t\t$post_statuses_changed = (count($same_statuses) != count($enabled_post_statuses))\r\n\t\t\t\t|| (count($same_statuses) !== count($this->conf->options['enabled_post_statuses']));\r\n\r\n\t\t\t$this->conf->options['enabled_post_statuses'] = $enabled_post_statuses;\r\n\r\n\t\t\t//The execution time limit must be above zero\r\n            $new_execution_time = intval($_POST['max_execution_time']);\r\n            if( $new_execution_time > 0 ){\r\n                $this->conf->options['max_execution_time'] = $new_execution_time;\r\n            }\r\n\r\n\t\t\t//The check threshold also must be > 0\r\n            $new_check_threshold=intval($_POST['check_threshold']);\r\n            if( $new_check_threshold > 0 ){\r\n                $this->conf->options['check_threshold'] = $new_check_threshold;\r\n            }\r\n            \r\n            $this->conf->options['mark_broken_links'] = !empty($_POST['mark_broken_links']);\r\n            $new_broken_link_css = trim($cleanPost['broken_link_css']);\r\n            $this->conf->options['broken_link_css'] = $new_broken_link_css;\r\n            \r\n            $this->conf->options['mark_removed_links'] = !empty($_POST['mark_removed_links']);\r\n            $new_removed_link_css = trim($cleanPost['removed_link_css']);\r\n            $this->conf->options['removed_link_css'] = $new_removed_link_css;\r\n            \r\n            $this->conf->options['nofollow_broken_links'] = !empty($_POST['nofollow_broken_links']);\r\n\t\t\t\r\n            $this->conf->options['suggestions_enabled'] = !empty($_POST['suggestions_enabled']);\r\n\r\n            $this->conf->options['exclusion_list'] = array_filter(\r\n\t\t\t\tpreg_split( \r\n\t\t\t\t\t'/[\\s\\r\\n]+/',\t\t\t\t//split on newlines and whitespace \r\n\t\t\t\t\t$cleanPost['exclusion_list'],\r\n\t\t\t\t\t-1,\r\n\t\t\t\t\tPREG_SPLIT_NO_EMPTY\t\t\t//skip empty values\r\n\t\t\t\t) \r\n\t\t\t);\r\n                \r\n            //Parse the custom field list\r\n            $new_custom_fields = array_filter( \r\n\t\t\t\tpreg_split( '/[\\r\\n]+/', $cleanPost['blc_custom_fields'], -1, PREG_SPLIT_NO_EMPTY )\r\n\t\t\t);\r\n            \r\n\t\t\t//Calculate the difference between the old custom field list and the new one (used later)\r\n            $diff1 = array_diff( $new_custom_fields, $this->conf->options['custom_fields'] );\r\n            $diff2 = array_diff( $this->conf->options['custom_fields'], $new_custom_fields );\r\n            $this->conf->options['custom_fields'] = $new_custom_fields;\r\n\r\n\t\t\t//Turning off warnings turns existing warnings into \"broken\" links.\r\n\t\t\t$warnings_enabled = !empty($_POST['warnings_enabled']);\r\n\t\t\tif ( $this->conf->get('warnings_enabled') && !$warnings_enabled ) {\r\n\t\t\t\t$this->promote_warnings_to_broken();\r\n\t\t\t}\r\n\t\t\t$this->conf->options['warnings_enabled'] = $warnings_enabled;\r\n\r\n\t\t\t//HTTP timeout\r\n            $new_timeout = intval($_POST['timeout']);\r\n            if( $new_timeout > 0 ){\r\n                $this->conf->options['timeout'] = $new_timeout ;\r\n            }\r\n            \r\n            //Server load limit \r\n            if ( isset($_POST['server_load_limit']) ){\r\n            \t$this->conf->options['server_load_limit'] = floatval($_POST['server_load_limit']);\r\n            \tif ( $this->conf->options['server_load_limit'] < 0 ){\r\n\t\t\t\t\t$this->conf->options['server_load_limit'] = 0;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$this->conf->options['enable_load_limit'] = $this->conf->options['server_load_limit'] > 0;\r\n            }\r\n\r\n\t\t\t//Target resource usage (1% to 100%)\r\n\t\t\tif ( isset($_POST['target_resource_usage']) ) {\r\n\t\t\t\t$usage = floatval($_POST['target_resource_usage']);\r\n\t\t\t\t$usage = max(min($usage / 100, 1), 0.01);\r\n\t\t\t\t$this->conf->options['target_resource_usage'] = $usage;\r\n\t\t\t}\r\n            \r\n            //When to run the checker\r\n            $this->conf->options['run_in_dashboard'] = !empty($_POST['run_in_dashboard']);\r\n            $this->conf->options['run_via_cron'] = !empty($_POST['run_via_cron']);\r\n            \r\n            //Email notifications on/off\r\n            $email_notifications = !empty($_POST['send_email_notifications']);\r\n\t        $send_authors_email_notifications = !empty($_POST['send_authors_email_notifications']);\r\n\r\n            if (\r\n\t              ($email_notifications && !$this->conf->options['send_email_notifications'])\r\n\t           || ($send_authors_email_notifications && !$this->conf->options['send_authors_email_notifications'])\r\n            ){\r\n            \t/*\r\n            \tThe plugin should only send notifications about links that have become broken\r\n\t\t\t\tsince the time when email notifications were turned on. If we don't do this,\r\n\t\t\t\tthe first email notification will be sent nigh-immediately and list *all* broken\r\n\t\t\t\tlinks that the plugin currently knows about.\r\n\t\t\t\t*/\r\n\t\t\t\t$this->conf->options['last_notification_sent'] = time();\r\n\t\t\t}\r\n            $this->conf->options['send_email_notifications'] = $email_notifications;\r\n\t        $this->conf->options['send_authors_email_notifications'] = $send_authors_email_notifications;\r\n\r\n\t\t\t$this->conf->options['notification_email_address'] = strval($_POST['notification_email_address']);\r\n\t\t\tif ( !filter_var($this->conf->options['notification_email_address'], FILTER_VALIDATE_EMAIL)) {\r\n\t\t\t\t$this->conf->options['notification_email_address'] = '';\r\n\t\t\t}\r\n\r\n\t        $widget_cap = strval($_POST['dashboard_widget_capability']);\r\n\t        if ( !empty($widget_cap) ) {\r\n\t\t        $this->conf->options['dashboard_widget_capability'] = $widget_cap;\r\n\t        }\r\n\r\n\t\t\t//Link actions. The user can hide some of them to reduce UI clutter.\r\n\t\t\t$show_link_actions = array();\r\n\t\t\tforeach(array_keys($available_link_actions) as $action) {\r\n\t\t\t\t$show_link_actions[$action] = isset($_POST['show_link_actions']) &&\r\n\t\t\t\t\t!empty($_POST['show_link_actions'][$action]);\r\n\t\t\t}\r\n\t\t\t$this->conf->set('show_link_actions', $show_link_actions);\r\n\r\n\t\t\t//Logging. The plugin can log various events and results for debugging purposes.\r\n\t\t\t$this->conf->options['logging_enabled'] = !empty($_POST['logging_enabled']);\r\n\t\t\t$this->conf->options['custom_log_file_enabled'] = !empty($_POST['custom_log_file_enabled']);\r\n\r\n\t\t\tif ( $this->conf->options['logging_enabled'] ) {\r\n\t\t\t\tif ( $this->conf->options['custom_log_file_enabled'] ) {\r\n\t\t\t\t\t$log_file = strval($cleanPost['log_file']);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//Default log file is /wp-content/uploads/broken-link-checker/blc-log.txt\r\n\t\t\t\t\t$log_directory = self::get_default_log_directory();\r\n\t\t\t\t\t$log_file = $log_directory . '/' . self::get_default_log_basename();\r\n\r\n\t\t\t\t\t//Attempt to create the log directory.\r\n\t\t\t\t\tif ( !is_dir($log_directory) ) {\r\n\t\t\t\t\t\tif ( mkdir($log_directory, 0750) ) {\r\n\t\t\t\t\t\t\t//Add a .htaccess to hide the log file from site visitors.\r\n\t\t\t\t\t\t\tfile_put_contents($log_directory . '/.htaccess', 'Deny from all');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$this->conf->options['log_file'] = $log_file;\r\n\r\n\t\t\t\t//Attempt to create the log file if not already there.\r\n\t\t\t\tif ( !is_file($log_file) ) {\r\n\t\t\t\t\tfile_put_contents($log_file, '');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//The log file must be writable.\r\n\t\t\t\tif ( !is_writable($log_file) || !is_file($log_file) ) {\r\n\t\t\t\t\t$this->conf->options['logging_enabled'] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//Make settings that affect our Cron events take effect immediately\r\n\t\t\t$this->setup_cron_events();\r\n\t\t\t\r\n            $this->conf->save_options();\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t If the list of custom fields was modified then we MUST resynchronize or\r\n\t\t\t custom fields linked with existing posts may not be detected. This is somewhat\r\n\t\t\t inefficient.  \r\n\t\t\t */\r\n\t\t\tif ( ( count($diff1) > 0 ) || ( count($diff2) > 0 ) ){\r\n\t\t\t\t$manager = blcContainerHelper::get_manager('custom_field');\r\n\t\t\t\tif ( !is_null($manager) ){\r\n\t\t\t\t\t$manager->resynch();\r\n\t\t\t\t\tblc_got_unsynched_items();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//Resynchronize posts when the user enables or disables post statuses.\r\n\t\t\tif ( $post_statuses_changed ) {\r\n\t\t\t\t$overlord = blcPostTypeOverlord::getInstance();\r\n\t\t\t\t$overlord->enabled_post_statuses = $this->conf->get('enabled_post_statuses', array());\r\n\t\t\t\t$overlord->resynch('wsh_status_resynch_trigger');\r\n\r\n\t\t\t\tblc_got_unsynched_items();\r\n\t\t\t\tblc_cleanup_instances();\r\n\t\t\t\tblc_cleanup_links();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Redirect back to the settings page\r\n\t\t\t$base_url = remove_query_arg( array('_wpnonce', 'noheader', 'updated', 'error', 'action', 'message') );\r\n\t\t\twp_redirect( add_query_arg( array( 'settings-updated' => true), $base_url ) );\r\n        }\r\n        \r\n        //Show a confirmation message when settings are saved. \r\n        if ( !empty($_GET['settings-updated']) ){\r\n        \techo '<div id=\"message\" class=\"updated fade\"><p><strong>',__('Settings saved.', 'broken-link-checker'), '</strong></p></div>';\r\n        \t\r\n        }\r\n        \r\n        //Show a thank-you message when a donation is made.\r\n        if ( !empty($_GET['donated']) ){\r\n        \techo '<div id=\"message\" class=\"updated fade\"><p><strong>',__('Thank you for your donation!', 'broken-link-checker'), '</strong></p></div>';\r\n        \t$this->conf->set('user_has_donated', true);\r\n\t        $this->conf->save_options();\r\n        }\r\n        \r\n        //Show one when recheck is started, too. \r\n        if ( !empty($_GET['recheck-initiated']) ){\r\n        \techo '<div id=\"message\" class=\"updated fade\"><p><strong>',\r\n\t\t\t     \t__('Complete site recheck started.', 'broken-link-checker'), // -- Yoda \r\n\t\t\t     '</strong></p></div>';\r\n        }\r\n        \r\n        //Cull invalid and missing modules\r\n        $moduleManager->validate_active_modules();\r\n        \r\n\t\t$debug = $this->get_debug_info();\r\n\t\t\r\n\t\tadd_filter('blc-module-settings-custom_field', array($this, 'make_custom_field_input'), 10, 2);\r\n\t\t\r\n\t\t//Translate and markup-ify module headers for display\r\n\t\t$modules = $moduleManager->get_modules_by_category('', true, true);\r\n\t\t\r\n\t\t//Output the custom broken link/removed link styles for example links\r\n\t\tprintf(\r\n\t\t\t'<style type=\"text/css\">%s %s</style>', \r\n\t\t\t$this->conf->options['broken_link_css'],\r\n\t\t\t$this->conf->options['removed_link_css']\r\n\t\t);\r\n\t\t\r\n\t\t$section_names = array(\r\n\t\t\t'general' =>  __('General', 'broken-link-checker'),\r\n\t\t\t'where' =>    __('Look For Links In', 'broken-link-checker'),\r\n\t\t\t'which' =>    __('Which Links To Check', 'broken-link-checker'),\r\n\t\t\t'how' =>      __('Protocols & APIs', 'broken-link-checker'),\r\n\t\t\t'advanced' => __('Advanced', 'broken-link-checker'),\r\n\t\t);\r\n\t\t?>\r\n\t\t\r\n\t\t<!--[if lte IE 7]>\r\n\t\t<style type=\"text/css\">\r\n\t\t/* Simulate inline-block in IE7 */\r\n\t\tul.ui-tabs-nav li {\r\n\t\t\tdisplay: inline; \r\n\t\t\tzoom: 1;\r\n\t\t}\r\n\t\t</style>\r\n\t\t<![endif]-->\r\n\t\t\r\n        <div class=\"wrap\" id=\"blc-settings-wrap\">\r\n\t\t<h2><?php _e('Broken Link Checker Options', 'broken-link-checker'); ?></h2>\r\n\t\t\r\n\t\t\r\n        <div id=\"blc-sidebar\">\r\n\t\t\t<div class=\"metabox-holder\">\r\n\t\t\t\t<?php include BLC_DIRECTORY . '/includes/admin/sidebar.php'; ?>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n        \r\n        <div id=\"blc-admin-content\">\r\n\t\t\r\n        <form name=\"link_checker_options\" id=\"link_checker_options\" method=\"post\" action=\"<?php \r\n\t\t\techo admin_url('options-general.php?page=link-checker-settings&noheader=1'); \r\n\t\t?>\">\r\n        <?php \r\n\t\t\twp_nonce_field('link-checker-options');\r\n\t\t?>\r\n\t\t\r\n\t\t<div id=\"blc-tabs\">\r\n\t\t\r\n\t\t<ul class=\"hide-if-no-js\">\r\n\t\t\t<?php\r\n\t\t\t\tforeach($section_names as $section_id => $section_name){\r\n\t\t\t\t\tprintf(\r\n\t\t\t\t\t\t'<li id=\"tab-button-%s\"><a href=\"#section-%s\" title=\"%s\">%s</a></li>',\r\n\t\t\t\t\t\tesc_attr($section_id), \r\n\t\t\t\t\t\tesc_attr($section_id),\r\n\t\t\t\t\t\tesc_attr($section_name), \r\n\t\t\t\t\t\t$section_name\r\n\t\t\t\t\t);\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t?>\r\n\t\t</ul>\r\n\r\n\t\t<div id=\"section-general\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['general']; ?></h3>\r\n\t\t\r\n        <table class=\"form-table\">\r\n\r\n        <tr valign=\"top\">\r\n        <th scope=\"row\">\r\n\t\t\t<?php _e('Status','broken-link-checker'); ?>\r\n\t\t\t<br>\r\n\t\t\t<a href=\"javascript:void(0)\" id=\"blc-debug-info-toggle\"><?php _e('Show debug info', 'broken-link-checker'); ?></a>\r\n\t\t</th>\r\n        <td>\r\n\r\n        <div id='wsblc_full_status'>\r\n            <br/><br/><br/>\r\n        </div>\r\n        \r\n        <table id=\"blc-debug-info\">\r\n        <?php\r\n        \r\n        //Output the debug info in a table\r\n\t\tforeach( $debug as $key => $value ){\r\n\t\t\tprintf (\r\n\t\t\t\t'<tr valign=\"top\" class=\"blc-debug-item-%s\"><th scope=\"row\">%s</th><td>%s<div class=\"blc-debug-message\">%s</div></td></tr>',\r\n\t\t\t\t$value['state'],\r\n\t\t\t\t$key,\r\n\t\t\t\t$value['value'], \r\n\t\t\t\t( array_key_exists('message', $value)?$value['message']:'')\r\n\t\t\t);\r\n\t\t}\r\n        ?>\r\n        </table>\r\n        \r\n        </td>\r\n        </tr>\r\n\r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Check each link','broken-link-checker'); ?></th>\r\n        <td>\r\n\r\n\t\t<?php\r\n\t\t\tprintf( \r\n\t\t\t\t__('Every %s hours','broken-link-checker'),\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t'<input type=\"text\" name=\"check_threshold\" id=\"check_threshold\" value=\"%d\" size=\"5\" maxlength=\"5\" />',\r\n\t\t\t\t\t$this->conf->options['check_threshold']\r\n\t\t\t\t)\r\n\t\t\t ); \r\n\t\t?>\r\n        <br/>\r\n        <span class=\"description\">\r\n        <?php _e('Existing links will be checked this often. New links will usually be checked ASAP.', 'broken-link-checker'); ?>\r\n        </span>\r\n\r\n        </td>\r\n        </tr>\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('E-mail notifications', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        \t<p style=\"margin-top: 0;\">\r\n        \t<label for='send_email_notifications'>\r\n        \t\t<input type=\"checkbox\" name=\"send_email_notifications\" id=\"send_email_notifications\"\r\n            \t<?php if ($this->conf->options['send_email_notifications']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Send me e-mail notifications about newly detected broken links', 'broken-link-checker'); ?>\r\n\t\t\t</label><br />\r\n\t\t\t</p>\r\n\r\n\t        <p>\r\n        \t<label for='send_authors_email_notifications'>\r\n        \t\t<input type=\"checkbox\" name=\"send_authors_email_notifications\" id=\"send_authors_email_notifications\"\r\n            \t<?php if ($this->conf->options['send_authors_email_notifications']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Send authors e-mail notifications about broken links in their posts', 'broken-link-checker'); ?>\r\n\t\t\t</label><br />\r\n\t\t\t</p>\r\n        </td>\r\n        </tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php echo __('Notification e-mail address', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\t\t\t\t<p>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"notification_email_address\"\r\n\t\t\t\t\t\tid=\"notification_email_address\"\r\n\t\t\t\t\t\tvalue=\"<?php echo esc_attr($this->conf->get('notification_email_address', '')); ?>\"\r\n\t\t\t\t\t\tclass=\"regular-text ltr\">\r\n\t\t\t\t</label><br>\r\n\t\t\t\t<span class=\"description\">\r\n\t\t\t\t\t<?php echo __('Leave empty to use the e-mail address specified in Settings &rarr; General.', 'broken-link-checker'); ?>\r\n\t\t\t\t</span>\r\n\t\t\t\t</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Link tweaks','broken-link-checker'); ?></th>\r\n        <td>\r\n        \t<p style=\"margin-top: 0; margin-bottom: 0.5em;\">\r\n        \t<label for='mark_broken_links'>\r\n        \t\t<input type=\"checkbox\" name=\"mark_broken_links\" id=\"mark_broken_links\"\r\n            \t<?php if ($this->conf->options['mark_broken_links']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Apply custom formatting to broken links', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t|\r\n\t\t\t<a id=\"toggle-broken-link-css-editor\" href=\"#\" class=\"blc-toggle-link\"><?php\r\n\t\t\t\t_e('Edit CSS', 'broken-link-checker');\r\n\t\t\t?></a>\r\n\t\t\t</p>\r\n\t\t\t\r\n\t\t\t<div id=\"broken-link-css-wrap\"<?php \r\n\t\t\t\tif ( !blcUtility::get_cookie('broken-link-css-wrap', false) ){\r\n\t\t\t\t\techo ' class=\"hidden\"';\r\n\t\t\t\t} \r\n\t\t\t?>>\r\n\t\t        <textarea name=\"broken_link_css\" id=\"broken_link_css\" cols='45' rows='4'><?php\r\n\t\t            if( isset($this->conf->options['broken_link_css']) ) {\r\n\t\t\t\t\t\techo $this->conf->options['broken_link_css'];\r\n\t\t\t\t\t}\r\n\t\t        ?></textarea>\r\n\t\t        <p class=\"description\"><?php\r\n\t\t\t\t\tprintf(\r\n\t\t\t\t\t\t__('Example : Lorem ipsum <a %s>broken link</a>, dolor sit amet.', 'broken-link-checker'),\r\n\t\t\t\t\t\t' href=\"#\" class=\"broken_link\" onclick=\"return false;\"'\r\n\t\t\t\t\t);\r\n\t\t\t\t\techo ' ', __('Click \"Save Changes\" to update example output.', 'broken-link-checker');\r\n\t\t\t\t?></p>\r\n        \t</div>\r\n        \t\r\n        \t<p style=\"margin-bottom: 0.5em;\">\r\n        \t<label for='mark_removed_links'>\r\n        \t\t<input type=\"checkbox\" name=\"mark_removed_links\" id=\"mark_removed_links\"\r\n            \t<?php if ($this->conf->options['mark_removed_links']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Apply custom formatting to removed links', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t|\r\n\t\t\t<a id=\"toggle-removed-link-css-editor\" href=\"#\" class=\"blc-toggle-link\"><?php\r\n\t\t\t\t_e('Edit CSS', 'broken-link-checker');\r\n\t\t\t?></a>\r\n\t\t\t</p>\r\n\t\t\t\r\n\t\t\t<div id=\"removed-link-css-wrap\" <?php \r\n\t\t\t\tif ( !blcUtility::get_cookie('removed-link-css-wrap', false) ){\r\n\t\t\t\t\techo ' class=\"hidden\"';\r\n\t\t\t\t} \r\n\t\t\t?>>\r\n\t\t        <textarea name=\"removed_link_css\" id=\"removed_link_css\" cols='45' rows='4'><?php\r\n\t\t            if( isset($this->conf->options['removed_link_css']) )\r\n\t\t                echo $this->conf->options['removed_link_css'];\r\n\t\t        ?></textarea>\r\n\t\t        \r\n\t\t        <p class=\"description\"><?php\r\n\t\t\t    printf(\r\n\t\t\t        __('Example : Lorem ipsum <span %s>removed link</span>, dolor sit amet.', 'broken-link-checker'),\r\n\t\t\t        ' class=\"removed_link\"'\r\n\t\t        );\r\n\t\t\t\techo ' ', __('Click \"Save Changes\" to update example output.', 'broken-link-checker');\r\n\t\t\t\t?>\r\n\r\n\t\t\t\t</p>\r\n        \t</div>\r\n        \r\n        \t<p>\r\n        \t<label for='nofollow_broken_links'>\r\n        \t\t<input type=\"checkbox\" name=\"nofollow_broken_links\" id=\"nofollow_broken_links\"\r\n            \t<?php if ($this->conf->options['nofollow_broken_links']) echo ' checked=\"checked\"'; ?>/>\r\n            \t<?php _e('Stop search engines from following broken links', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t</p>\r\n\r\n\t\t\t<p class=\"description\">\r\n\t\t\t\t<?php\r\n\t\t\t\techo _x(\r\n\t\t\t\t\t'These settings only apply to the content of posts, not comments or custom fields.',\r\n\t\t\t\t\t'\"Link tweaks\" settings',\r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t);\r\n\t\t\t\t?>\r\n\t\t\t</p>\r\n        </td>\r\n        </tr>\r\n\r\n\t\t\t<tr valign=\"top\">\r\n\t\t\t\t<th scope=\"row\"><?php echo _x('Suggestions', 'settings page', 'broken-link-checker'); ?></th>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"suggestions_enabled\" id=\"suggestions_enabled\"\r\n\t\t\t\t\t\t\t<?php checked($this->conf->options['suggestions_enabled']); ?>/>\r\n\t\t\t\t\t\t<?php _e('Suggest alternatives to broken links', 'broken-link-checker'); ?>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\r\n\t\t\t<tr valign=\"top\">\r\n\t\t\t\t<th scope=\"row\"><?php echo _x('Warnings', 'settings page', 'broken-link-checker'); ?></th>\r\n\t\t\t\t<td id=\"blc_warning_settings\">\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"warnings_enabled\" id=\"warnings_enabled\"\r\n\t\t\t\t\t\t\t<?php checked($this->conf->options['warnings_enabled']); ?>/>\r\n\t\t\t\t\t\t<?php _e('Show uncertain or minor problems as \"warnings\" instead of \"broken\"', 'broken-link-checker'); ?>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<p class=\"description\"><?php\r\n\t\t\t\t\t\t_e('Turning off this option will make the plugin report all problems as broken links.', 'broken-link-checker');\r\n\t\t\t\t\t?></p>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\r\n        </table>\r\n        \r\n        </div>\r\n        \r\n        <div id=\"section-where\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['where']; ?></h3>\r\n        \r\n        <table class=\"form-table\">\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Look for links in', 'broken-link-checker'); ?></th>\r\n        <td>\r\n    \t<?php\r\n    \tif ( !empty($modules['container']) ){\r\n    \t\tuasort($modules['container'], create_function('$a, $b', 'return strcasecmp($a[\"Name\"], $b[\"Name\"]);'));\r\n    \t\t$this->print_module_list($modules['container'], $this->conf->options);\r\n    \t}    \t\r\n    \t?>\r\n    \t</td></tr>\r\n    \t\r\n    \t<tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Post statuses', 'broken-link-checker'); ?></th>\r\n        <td>\r\n    \t<?php\r\n    \t    $available_statuses = get_post_stati(array('internal' => false), 'objects');\r\n    \t    \r\n    \t    if ( isset($this->conf->options['enabled_post_statuses']) ){\r\n    \t    \t$enabled_post_statuses = $this->conf->options['enabled_post_statuses'];\r\n    \t    } else {\r\n    \t    \t$enabled_post_statuses = array();\r\n    \t    }\r\n    \t    \r\n\t\t\tforeach($available_statuses as $status => $status_object){\r\n\t\t\t\tprintf(\r\n\t\t\t\t\t'<p><label><input type=\"checkbox\" name=\"enabled_post_statuses[]\" value=\"%s\"%s> %s</label></p>',\r\n\t\t\t\t\tesc_attr($status),\r\n\t\t\t\t\tin_array($status, $enabled_post_statuses)?' checked=\"checked\"':'',\r\n\t\t\t\t\t$status_object->label\r\n\t\t\t\t);\r\n\t\t\t}\r\n    \t?>\r\n    \t</td></tr>\r\n    \t\r\n        </table>\r\n        \r\n        </div>\r\n        \r\n        \r\n        <div id=\"section-which\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['which']; ?></h3>\r\n\t\t\r\n        <table class=\"form-table\">\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Link types', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        <?php\r\n        if ( !empty($modules['parser']) ){\r\n        \t$this->print_module_list($modules['parser'], $this->conf->options);\r\n        } else {\r\n        \techo __('Error : All link parsers missing!', 'broken-link-checker');\r\n        }\r\n    \t?>\r\n    \t</td>\r\n\t\t</tr>\r\n    \t\r\n    \t<tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Exclusion list', 'broken-link-checker'); ?></th>\r\n        <td><?php _e(\"Don't check links where the URL contains any of these words (one per line) :\", 'broken-link-checker'); ?><br/>\r\n        <textarea name=\"exclusion_list\" id=\"exclusion_list\" cols='45' rows='4'><?php\r\n            if( isset($this->conf->options['exclusion_list']) )\r\n                echo esc_textarea(implode(\"\\n\", $this->conf->options['exclusion_list']));\r\n        ?></textarea>\r\n\r\n        </td>\r\n        </tr>\r\n        \r\n        </table>\r\n        </div>\r\n        \r\n        <div id=\"section-how\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['how']; ?></h3>\r\n\t\t\r\n        <table class=\"form-table\">\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Check links using', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        <?php\r\n    \tif ( !empty($modules['checker']) ){\r\n    \t\t$modules['checker'] = array_reverse($modules['checker']);\r\n        \t$this->print_module_list($modules['checker'], $this->conf->options);\r\n        }\r\n    \t?>\r\n    \t</td></tr>\r\n        \r\n        </table>\r\n        </div>\r\n        \r\n        <div id=\"section-advanced\" class=\"blc-section\">\r\n\t\t<h3 class=\"hide-if-js\"><?php echo $section_names['advanced']; ?></h3>\r\n        \r\n        <table class=\"form-table\">\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Timeout', 'broken-link-checker'); ?></th>\r\n        <td>\r\n\r\n\t\t<?php\r\n\t\t\r\n\t\tprintf(\r\n\t\t\t__('%s seconds', 'broken-link-checker'),\r\n\t\t\tsprintf(\r\n\t\t\t\t'<input type=\"text\" name=\"timeout\" id=\"blc_timeout\" value=\"%d\" size=\"5\" maxlength=\"3\" />', \r\n\t\t\t\t$this->conf->options['timeout']\r\n\t\t\t)\r\n\t\t);\r\n\t\t\r\n\t\t?>\r\n        <br/><span class=\"description\">\r\n        <?php _e('Links that take longer than this to load will be marked as broken.','broken-link-checker'); ?> \r\n\t\t</span>\r\n\r\n        </td>\r\n        </tr>\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Link monitor', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        \r\n        \t<p>\r\n\t\t\t<label for='run_in_dashboard'>\r\n\t\t\t\t\r\n\t        \t\t<input type=\"checkbox\" name=\"run_in_dashboard\" id=\"run_in_dashboard\"\r\n\t            \t<?php if ($this->conf->options['run_in_dashboard']) echo ' checked=\"checked\"'; ?>/>\r\n\t            \t<?php _e('Run continuously while the Dashboard is open', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t</p>\r\n\t\t\t\r\n\t\t\t<p>\r\n\t\t\t<label for='run_via_cron'>\r\n\t        \t\t<input type=\"checkbox\" name=\"run_via_cron\" id=\"run_via_cron\"\r\n\t            \t<?php if ($this->conf->options['run_via_cron']) echo ' checked=\"checked\"'; ?>/>\r\n\t            \t<?php _e('Run hourly in the background', 'broken-link-checker'); ?>\r\n\t\t\t</label>\r\n\t\t\t</p>\t\t\r\n\r\n        </td>\r\n        </tr>\r\n\r\n        <tr valign=\"top\">\r\n\t        <th scope=\"row\"><?php _e('Show the dashboard widget for', 'broken-link-checker'); ?></th>\r\n\t        <td>\r\n\r\n\t\t        <?php\r\n\t\t\t\t$widget_caps = array(\r\n\t\t\t\t\t_x('Administrator', 'dashboard widget visibility', 'broken-link-checker') => 'manage_options',\r\n\t\t\t\t\t_x('Editor and above', 'dashboard widget visibility', 'broken-link-checker') => 'edit_others_posts',\r\n\t\t\t\t\t_x('Nobody (disables the widget)', 'dashboard widget visibility', 'broken-link-checker') => 'do_not_allow',\r\n\t\t\t\t);\r\n\r\n\t\t        foreach($widget_caps as $title => $capability) {\r\n\t\t\t        printf(\r\n\t\t\t\t        '<p><label><input type=\"radio\" name=\"dashboard_widget_capability\" value=\"%s\"%s> %s</label></p>',\r\n\t\t\t\t        esc_attr($capability),\r\n\t\t\t\t        checked($capability, $this->conf->get('dashboard_widget_capability'), false),\r\n\t\t\t\t        $title\r\n\t\t\t        );\r\n\t\t        }\r\n\t\t        ?>\r\n\t        </td>\r\n        </tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php echo _x('Show link actions', 'settings page', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\t\t\t\t<?php\r\n\t\t\t\t$show_link_actions = $this->conf->get('show_link_actions', array());\r\n\t\t\t\tforeach($available_link_actions as $action => $text) {\r\n\t\t\t\t\t$enabled = isset($show_link_actions[$action]) ? (bool)($show_link_actions[$action]) : true;\r\n\t\t\t\t\tprintf(\r\n\t\t\t\t\t\t'<p><label><input type=\"checkbox\" name=\"show_link_actions[%1$s]\" %3$s> %2$s</label></p>',\r\n\t\t\t\t\t\t$action,\r\n\t\t\t\t\t\t$text,\r\n\t\t\t\t\t\tchecked($enabled, true, false)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t?>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Max. execution time', 'broken-link-checker'); ?></th>\r\n        <td>\r\n\r\n\t\t<?php\r\n\t\t\r\n\t\tprintf(\r\n\t\t\t__('%s seconds', 'broken-link-checker'),\r\n\t\t\tsprintf(\r\n\t\t\t\t'<input type=\"text\" name=\"max_execution_time\" id=\"max_execution_time\" value=\"%d\" size=\"5\" maxlength=\"5\" />', \r\n\t\t\t\t$this->conf->options['max_execution_time']\r\n\t\t\t)\r\n\t\t);\r\n\t\t\r\n\t\t?> \r\n        <br/><span class=\"description\">\r\n        <?php\r\n        \r\n        _e('The plugin works by periodically launching a background job that parses your posts for links, checks the discovered URLs, and performs other time-consuming tasks. Here you can set for how long, at most, the link monitor may run each time before stopping.', 'broken-link-checker');\r\n\t\t\r\n\t\t?> \r\n\t\t</span>\r\n\r\n        </td>\r\n        </tr>\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Server load limit', 'broken-link-checker'); ?></th>\r\n        <td>\r\n\t\t<?php\r\n\t\t\r\n\t\t$load = blcUtility::get_server_load();\r\n\t\t$available = !empty($load);\r\n\r\n\t\tif ( $available ){\r\n\t\t\t$value = !empty($this->conf->options['server_load_limit'])?sprintf('%.2f', $this->conf->options['server_load_limit']):'';\r\n\t\t\tprintf(\r\n\t\t\t\t'<input type=\"text\" name=\"server_load_limit\" id=\"server_load_limit\" value=\"%s\" size=\"5\" maxlength=\"5\"/> ',\r\n\t\t\t\t$value\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tprintf(\r\n\t\t\t\t__('Current load : %s', 'broken-link-checker'),\r\n\t\t\t\t'<span id=\"wsblc_current_load\">...</span>'\r\n\t\t\t);\r\n\t\t\techo '<br/><span class=\"description\">';\r\n\t        printf(\r\n\t        \t__(\r\n\t\t\t\t\t'Link checking will be suspended if the average <a href=\"%s\">server load</a> rises above this number. Leave this field blank to disable load limiting.', \r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t'http://en.wikipedia.org/wiki/Load_(computing)'\r\n\t        );\r\n\t        echo '</span>';\r\n        \r\n        } else {\r\n        \techo '<input type=\"text\" disabled=\"disabled\" value=\"', esc_attr(__('Not available', 'broken-link-checker')), '\" size=\"13\"/><br>';\r\n        \techo '<span class=\"description\">';\r\n\t\t\t_e('Load limiting only works on Linux-like systems where <code>/proc/loadavg</code> is present and accessible.', 'broken-link-checker');\r\n\t\t\techo '</span>';\r\n\t\t}\r\n\t\t?> \r\n        </td>\r\n        </tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php _e('Target resource usage', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\t\t\t\t<?php\r\n\t\t\t\t$target_resource_usage = $this->conf->get('target_resource_usage', 0.25);\r\n\t\t\t\tprintf(\r\n\t\t\t\t\t'<input name=\"target_resource_usage\" value=\"%d\"\r\n\t\t\t\t\t\ttype=\"range\" min=\"1\" max=\"100\" id=\"target_resource_usage\">',\r\n\t\t\t\t\t$target_resource_usage * 100\r\n\t\t\t\t);\r\n\t\t\t\t?>\r\n\r\n\t\t\t\t<span id=\"target_resource_usage_percent\"><?php\r\n\t\t\t\t\techo sprintf('%.0f%%', $target_resource_usage * 100);\r\n\t\t\t\t?></span>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php _e('Logging', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label for='logging_enabled'>\r\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"logging_enabled\" id=\"logging_enabled\"\r\n\t\t\t\t\t\t\t<?php checked($this->conf->options['logging_enabled']); ?>/>\r\n\t\t\t\t\t\t<?php _e('Enable logging', 'broken-link-checker'); ?>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\r\n\t\t<tr valign=\"top\">\r\n\t\t\t<th scope=\"row\"><?php _e('Log file location', 'broken-link-checker'); ?></th>\r\n\t\t\t<td>\r\n\r\n\t\t\t\t<div id=\"blc-logging-options\">\r\n\r\n\t\t\t\t<p>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input type=\"radio\" name=\"custom_log_file_enabled\" value=\"\"\r\n\t\t\t\t\t\t<?php checked(!$this->conf->options['custom_log_file_enabled']); ?>>\r\n\t\t\t\t\t<?php echo _x('Default', 'log file location', 'broken-link-checker'); ?>\r\n\t\t\t\t</label>\r\n\t\t\t\t<br>\r\n\t\t\t\t\t<span class=\"description\">\r\n\t\t\t\t\t\t<code><?php\r\n\t\t\t\t\t\t\techo self::get_default_log_directory(), '/', self::get_default_log_basename();\r\n\t\t\t\t\t\t?></code>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</p>\r\n\r\n\t\t\t\t<p>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input type=\"radio\" name=\"custom_log_file_enabled\" value=\"1\"\r\n\t\t\t\t\t\t<?php checked($this->conf->options['custom_log_file_enabled']); ?>>\r\n\t\t\t\t\t<?php echo _x('Custom', 'log file location', 'broken-link-checker'); ?>\r\n\t\t\t\t</label>\r\n\t\t\t\t<br><input type=\"text\" name=\"log_file\" id=\"log_file\" size=\"90\"\r\n\t\t\t\t\t\t   value=\"<?php echo esc_attr($this->conf->options['log_file']); ?>\">\r\n\t\t\t\t</p>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\r\n        \r\n        <tr valign=\"top\">\r\n        <th scope=\"row\"><?php _e('Forced recheck', 'broken-link-checker'); ?></th>\r\n        <td>\r\n        \t<input class=\"button\" type=\"button\" name=\"start-recheck\" id=\"start-recheck\" \r\n\t\t\t\t  value=\"<?php _e('Re-check all pages', 'broken-link-checker'); ?>\"  />\r\n  \t\t\t<input type=\"hidden\" name=\"recheck\" value=\"\" id=\"recheck\" />\r\n\t\t\t<br />\r\n  \t\t\t<span class=\"description\"><?php\r\n\t\t\t  _e('The \"Nuclear Option\". Click this button to make the plugin empty its link database and recheck the entire site from scratch.', 'broken-link-checker');\r\n\t\t\t     \r\n\t  \t\t?></span>\r\n\t\t</td>\r\n\t\t</tr>\r\n        \r\n        </table>\r\n        </div>\r\n        \r\n        </div>\r\n        \r\n        <p class=\"submit\"><input type=\"submit\" name=\"submit\" class='button-primary' value=\"<?php _e('Save Changes') ?>\" /></p>\r\n        </form>\r\n        \r\n        </div> <!-- First postbox-container -->\r\n        \r\n        \r\n        </div>\r\n        \r\n        \r\n        \r\n        <?php\r\n        //The various JS for this page is stored in a separate file for the purposes readability.\r\n        include dirname($this->loader) . '/includes/admin/options-page-js.php';\r\n    }\r\n    \r\n    /**\r\n     * Output a list of modules and their settings.\r\n\t *  \r\n     * Each list entry will contain a checkbox that is checked if the module is \r\n     * currently active. \r\n     * \r\n     * @param array $modules Array of modules to display\r\n     * @param array $current_settings\r\n     * @return void\r\n     */\r\n    function print_module_list($modules, $current_settings){\r\n    \t$moduleManager = blcModuleManager::getInstance();\r\n    \t\r\n    \tforeach($modules as $module_id => $module_data){\r\n\t\t\t$module_id = $module_data['ModuleID'];\r\n\t\t\t\r\n\t\t\t$style = $module_data['ModuleHidden']?' style=\"display:none;\"':'';\r\n\t\t\t\r\n    \t\tprintf(\r\n    \t\t\t'<div class=\"module-container\" id=\"module-container-%s\"%s>',\r\n\t\t   \t\t$module_id,\r\n   \t\t\t\t$style\r\n\t\t\t);\r\n\t\t\t$this->print_module_checkbox($module_id, $module_data, $moduleManager->is_active($module_id));\r\n\t\t\t\r\n\t\t\t$extra_settings = apply_filters(\r\n\t\t\t\t'blc-module-settings-'.$module_id,\r\n\t\t\t\t'',\r\n\t\t\t\t$current_settings\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tif ( !empty($extra_settings) ){\r\n\t\t\t\t\r\n\t\t\t\tprintf(\r\n\t\t\t\t\t' | <a class=\"blc-toggle-link toggle-module-settings\" id=\"toggle-module-settings-%s\" href=\"#\">%s</a>',\r\n\t\t\t\t\tesc_attr($module_id),\r\n\t\t\t\t\t__('Configure', 'broken-link-checker')\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t\t//The plugin remembers the last open/closed state of module configuration boxes\r\n\t\t\t\t$box_id = 'module-extra-settings-' . $module_id;\t\t\r\n\t\t\t\t$show = blcUtility::get_cookie(\r\n\t\t\t\t\t$box_id,\r\n\t\t\t\t\t$moduleManager->is_active($module_id)\r\n\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tprintf(\r\n\t\t\t\t\t'<div class=\"module-extra-settings%s\" id=\"%s\">%s</div>',\r\n\t\t\t\t\t$show?'':' hidden',\r\n\t\t\t\t\t$box_id,\r\n\t\t\t\t\t$extra_settings\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\techo '</div>';\r\n    \t}\r\n    }\r\n    \r\n    /**\r\n     * Output a checkbox for a module.\r\n     * \r\n     * Generates a simple checkbox that can be used to mark a module as active/inactive.\r\n     * If the specified module can't be deactivated (ModuleAlwaysActive = true), the checkbox\r\n\t * will be displayed in a disabled state and a hidden field will be created to make\r\n\t * form submissions work correctly.\r\n     * \r\n     * @param string $module_id Module ID.\r\n     * @param array $module_data Associative array of module data.\r\n     * @param bool $active If true, the newly created checkbox will start out checked.\r\n     * @return void\r\n     */\r\n    function print_module_checkbox($module_id, $module_data, $active = false){\r\n    \t$disabled = false;\r\n    \t$name_prefix = 'module';\r\n    \t$label_class = '';\r\n    \t$active = $active || $module_data['ModuleAlwaysActive'];\r\n    \t\r\n\t\tif ( $module_data['ModuleAlwaysActive'] ){\r\n\t\t\t$disabled = true;\r\n\t\t\t$name_prefix = 'module-always-active';\r\n\t\t}\r\n\t\t\r\n\t\t$checked = $active ? ' checked=\"checked\"':'';\r\n\t\tif ( $disabled ){\r\n\t\t\t$checked .= ' disabled=\"disabled\"';\r\n\t\t}\r\n\t\t\r\n\t\tprintf(\r\n\t\t\t'<label class=\"%s\">\r\n\t\t\t\t<input type=\"checkbox\" name=\"%s[%s]\" id=\"module-checkbox-%s\"%s /> %s\r\n\t\t\t</label>',\r\n\t\t\tesc_attr($label_class),\r\n\t\t\t$name_prefix,\r\n\t   \t\tesc_attr($module_id),\r\n\t\t\tesc_attr($module_id),\r\n\t\t\t$checked,\r\n\t\t\t$module_data['Name']\r\n\t\t);\r\n\t\t\r\n\t\tif ( $module_data['ModuleAlwaysActive'] ){\r\n\t\t\tprintf(\r\n\t\t\t\t'<input type=\"hidden\" name=\"module[%s]\" value=\"on\">',\r\n\t\t\t\tesc_attr($module_id)\r\n\t\t\t);\r\n\t\t}\r\n    }\r\n    \r\n    /**\r\n     * Add extra settings to the \"Custom fields\" entry on the plugin's config. page.\r\n\t * \r\n\t * Callback for the 'blc-module-settings-custom_field' filter.  \r\n     * \r\n     * @param string $html Current extra HTML\r\n     * @param array $current_settings The current plugin configuration.\r\n     * @return string New extra HTML.\r\n     */\r\n    function make_custom_field_input($html, $current_settings){\r\n    \t$html .= '<span class=\"description\">' . \r\n\t\t\t\t\t__(\r\n\t\t\t\t\t\t'Enter the names of custom fields you want to check (one per line). If a field contains HTML code, prefix its name with <code>html:</code>. For example, <code>html:field_name</code>.',\r\n\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t) .\r\n\t\t\t\t '</span>';\r\n    \t$html .= '<br><textarea name=\"blc_custom_fields\" id=\"blc_custom_fields\" cols=\"45\" rows=\"4\">';\r\n        if( isset($current_settings['custom_fields']) )\r\n            $html .= esc_textarea(implode(\"\\n\", $current_settings['custom_fields']));\r\n        $html .= '</textarea>';\r\n        \r\n        return $html;\r\n    }\r\n    \r\n    /**\r\n     * Enqueue CSS file for the plugin's Settings page.\r\n     * \r\n     * @return void\r\n     */\r\n    function options_page_css(){\r\n    \twp_enqueue_style('blc-options-page', plugins_url('css/options-page.css', BLC_PLUGIN_FILE), array(), '20141113');\r\n    \twp_enqueue_style('dashboard');\r\n\t}\r\n\t\r\n\r\n    /**\r\n     * Display the \"Broken Links\" page, listing links detected by the plugin and their status.\r\n     * \r\n     * @return void\r\n     */\r\n    function links_page(){\r\n        global $wpdb; /* @var wpdb $wpdb */\r\n        \r\n        $blc_link_query = blcLinkQuery::getInstance();\r\n\r\n\t\t//Cull invalid and missing modules so that we don't get dummy links/instances showing up.\r\n        $moduleManager = blcModuleManager::getInstance();\r\n        $moduleManager->validate_active_modules();\r\n        \r\n        if ( defined('BLC_DEBUG') && constant('BLC_DEBUG') ){\r\n        \t//Make module headers translatable. They need to be formatted corrrectly and \r\n        \t//placed in a .php file to be visible to the script(s) that generate .pot files.\r\n        \t$code = $moduleManager->_build_header_translation_code();\r\n        \tfile_put_contents( dirname($this->loader) . '/includes/extra-strings.php', $code );\r\n        }\r\n        \r\n        $action = !empty($_POST['action'])?$_POST['action']:'';\r\n        if ( intval($action) == -1 ){\r\n        \t//Try the second bulk actions box\r\n\t\t\t$action = !empty($_POST['action2'])?$_POST['action2']:'';\r\n\t\t}\r\n        \r\n        //Get the list of link IDs selected via checkboxes\r\n        $selected_links = array();\r\n\t\tif ( isset($_POST['selected_links']) && is_array($_POST['selected_links']) ){\r\n\t\t\t//Convert all link IDs to integers (non-numeric entries are converted to zero)\r\n\t\t\t$selected_links = array_map('intval', $_POST['selected_links']);\r\n\t\t\t//Remove all zeroes\r\n\t\t\t$selected_links = array_filter($selected_links);\r\n\t\t}\r\n        \r\n        $message = '';\r\n        $msg_class = 'updated';\r\n        \r\n        //Run the selected bulk action, if any\r\n        $force_delete = false;\r\n        switch ( $action ){\r\n        \tcase 'create-custom-filter':\r\n        \t\tlist($message, $msg_class) = $this->do_create_custom_filter();\r\n\t\t\t\tbreak;\r\n\t\t\t\t \r\n\t\t\tcase 'delete-custom-filter':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_delete_custom_filter();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t/** @noinspection PhpMissingBreakStatementInspection Deliberate fall-through. */\r\n\t\t\tcase 'bulk-delete-sources':\r\n\t\t\t\t$force_delete = true;\r\n\t\t\tcase 'bulk-trash-sources':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_delete_sources($selected_links, $force_delete);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'bulk-unlink':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_unlink($selected_links);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'bulk-deredirect':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_deredirect($selected_links);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'bulk-recheck':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_recheck($selected_links);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'bulk-not-broken':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_discard($selected_links);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'bulk-dismiss':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_dismiss($selected_links);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'bulk-edit':\r\n\t\t\t\tlist($message, $msg_class) = $this->do_bulk_edit($selected_links);\r\n\t\t\t\tbreak;\r\n        }\r\n        \r\n\t\t\r\n\t\tif ( !empty($message) ){\r\n\t\t\techo '<div id=\"message\" class=\"'.$msg_class.' fade\"><p>'.$message.'</p></div>';\r\n\t\t}\r\n\t\t\r\n\t\t$start_time = microtime_float();\r\n\t\t\r\n        //Load custom filters, if any\r\n        $blc_link_query->load_custom_filters();\r\n\t\t\r\n\t\t//Calculate the number of links matching each filter\r\n\t\t$blc_link_query->count_filter_results();\r\n\t\t\r\n\t\t//Run the selected filter (defaults to displaying broken links)\r\n\t\t$selected_filter_id = isset($_GET['filter_id'])?$_GET['filter_id']:'broken';\r\n\t\t$current_filter = $blc_link_query->exec_filter(\r\n\t\t\t$selected_filter_id,\r\n\t\t\tisset($_GET['paged']) ? intval($_GET['paged']) : 1,\r\n\t\t\t$this->conf->options['table_links_per_page'], \r\n\t\t\t'broken',\r\n\t\t\tisset($_GET['orderby']) ? $_GET['orderby'] : '',\r\n\t\t\tisset($_GET['order']) ? $_GET['order'] : ''\r\n\t\t);\r\n\r\n\t\t//exec_filter() returns an array with filter data, including the actual filter ID that was used.\r\n\t\t$filter_id = $current_filter['filter_id'];\r\n\r\n\t\t//Error?\t\t\r\n\t\tif ( empty($current_filter['links']) && !empty($wpdb->last_error) ){\r\n\t\t\tprintf( __('Database error : %s', 'broken-link-checker'), $wpdb->last_error);\r\n\t\t}\r\n        ?>\r\n        \r\n<script type='text/javascript'>\r\n\tvar blc_current_filter = '<?php echo $filter_id; ?>';\r\n\tvar blc_is_broken_filter = <?php echo $current_filter['is_broken_filter'] ? 'true' : 'false'; ?>;\r\n\tvar blc_current_base_filter = '<?php echo esc_js($current_filter['base_filter']); ?>';\r\n\tvar blc_suggestions_enabled = <?php echo $this->conf->options['suggestions_enabled'] ? 'true' : 'false'; ?>;\r\n</script>\r\n        \r\n<div class=\"wrap\">\r\n\t<?php\r\n\t\t$blc_link_query->print_filter_heading($current_filter);\r\n\t\t$blc_link_query->print_filter_menu($filter_id);\r\n\t\t\r\n\t\t//Display the \"Search\" form and associated buttons.\r\n\t\t//The form requires the $filter_id and $current_filter variables to be set.\r\n\t\tinclude dirname($this->loader) . '/includes/admin/search-form.php';\r\n\t\t\r\n\t\t//If the user has decided to switch the table to a different mode (compact/full), \r\n\t\t//save the new setting.\r\n\t\tif ( isset($_GET['compact']) ){\r\n\t\t\t$this->conf->options['table_compact'] = (bool)$_GET['compact'];\r\n\t\t\t$this->conf->save_options();\r\n\t\t}\r\n\r\n\t\t//Display the links, if any\r\n        if( $current_filter['links'] && ( count($current_filter['links']) > 0 ) ) {\r\n        \t\r\n\t\t\tinclude dirname($this->loader) . '/includes/admin/table-printer.php';\r\n\t\t\t$table = new blcTablePrinter($this);\r\n\t\t\t$table->print_table(\r\n\t\t\t\t$current_filter,\r\n\t\t\t\t$this->conf->options['table_layout'], \r\n\t\t\t\t$this->conf->options['table_visible_columns'],\r\n\t\t\t\t$this->conf->options['table_compact']\r\n\t\t\t);\r\n\r\n        };\r\n\t\tprintf('<!-- Total elapsed : %.4f seconds -->', microtime_float() - $start_time); \r\n        \r\n\t\t//Load assorted JS event handlers and other shinies\r\n\t\tinclude dirname($this->loader) . '/includes/admin/links-page-js.php';\r\n\t\t\r\n\t\t?></div><?php\r\n    }\r\n    \r\n  /**\r\n   * Create a custom link filter using params passed in $_POST.\r\n   *\r\n   * @uses $_POST\r\n   * @uses $_GET to replace the current filter ID (if any) with that of the newly created filter.   \r\n   *\r\n   * @return array Message and the CSS class to apply to the message.  \r\n   */\r\n    function do_create_custom_filter(){\r\n\t    global $wpdb;\r\n\r\n\t\t//Create a custom filter!\r\n    \tcheck_admin_referer( 'create-custom-filter' );\r\n    \t$msg_class = 'updated';\r\n\r\n    \t//Filter name must be set\r\n\t\tif ( empty($_POST['name']) ){\r\n\t\t\t$message = __(\"You must enter a filter name!\", 'broken-link-checker');\r\n\t\t\t$msg_class = 'error';\r\n\t\t//Filter parameters (a search query) must also be set\r\n\t\t} elseif ( empty($_POST['params']) ){\r\n\t\t\t$message = __(\"Invalid search query.\", 'broken-link-checker');\r\n\t\t\t$msg_class = 'error';\r\n\t\t} else {\r\n\t\t\t//Save the new filter\r\n\t\t\t$name = strip_tags(strval($_POST['name']));\r\n\t\t\t$blc_link_query = blcLinkQuery::getInstance();\r\n\t\t\t$filter_id = $blc_link_query->create_custom_filter($name, $_POST['params']);\r\n\t\t\t\r\n\t\t\tif ( $filter_id ){\r\n\t\t\t\t//Saved\r\n\t\t\t\t$message = sprintf( __('Filter \"%s\" created', 'broken-link-checker'), $name);\r\n\t\t\t\t//A little hack to make the filter active immediately\r\n\t\t\t\t$_GET['filter_id'] = $filter_id;\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t//Error\r\n\t\t\t\t$message = sprintf( __(\"Database error : %s\", 'broken-link-checker'), $wpdb->last_error);\r\n\t\t\t\t$msg_class = 'error';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Delete a custom link filter.\r\n   *\r\n   * @uses $_POST\r\n   *\r\n   * @return array Message and a CSS class to apply to the message. \r\n   */\r\n\tfunction do_delete_custom_filter(){\r\n\t\t//Delete an existing custom filter!\r\n\t\tcheck_admin_referer( 'delete-custom-filter' );\r\n\t\t$msg_class = 'updated';\r\n\t\t\r\n\t\t//Filter ID must be set\r\n\t\tif ( empty($_POST['filter_id']) ){\r\n\t\t\t$message = __(\"Filter ID not specified.\", 'broken-link-checker');\r\n\t\t\t$msg_class = 'error';\r\n\t\t} else {\r\n\t\t\t//Try to delete the filter\r\n\t\t\t$blc_link_query = blcLinkQuery::getInstance();\r\n\t\t\tif ( $blc_link_query->delete_custom_filter($_POST['filter_id']) ){\r\n\t\t\t\t//Success\r\n\t\t\t\t$message = __('Filter deleted', 'broken-link-checker');\r\n\t\t\t} else {\r\n\t\t\t\t//Either the ID is wrong or there was some other error\r\n\t\t\t\t$message = __('Database error : %s', 'broken-link-checker');\r\n\t\t\t\t$msg_class = 'error';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Modify multiple links to point to their target URLs.\r\n   *\r\n   * @param array $selected_links\r\n   * @return array The message to display and its CSS class.\r\n   */\r\n\tfunction do_bulk_deredirect($selected_links){\r\n\t\t//For all selected links, replace the URL with the final URL that it redirects to.\r\n\t\t\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\t\t\t\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ) {\t\r\n\t\t\t//Fetch all the selected links\r\n\t\t\t$links = blc_get_links(array(\r\n\t\t\t\t'link_ids' => $selected_links,\r\n\t\t\t\t'purpose' => BLC_FOR_EDITING,\r\n\t\t\t));\r\n\t\t\t\r\n\t\t\tif ( count($links) > 0 ) {\r\n\t\t\t\t$processed_links = 0;\r\n\t\t\t\t$failed_links = 0;\r\n\t\t\t\t\r\n\t\t\t\t//Deredirect all selected links\r\n\t\t\t\tforeach($links as $link){\r\n\t\t\t\t\t$rez = $link->deredirect();\r\n\t\t\t\t\tif ( !is_wp_error($rez) && empty($rez['errors'] )){\r\n\t\t\t\t\t\t$processed_links++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$failed_links++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\t$message = sprintf(\r\n\t\t\t\t\t_n(\r\n\t\t\t\t\t\t'Replaced %d redirect with a direct link',\r\n\t\t\t\t\t\t'Replaced %d redirects with direct links',\r\n\t\t\t\t\t\t$processed_links, \r\n\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t),\r\n\t\t\t\t\t$processed_links\r\n\t\t\t\t);\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif ( $failed_links > 0 ) {\r\n\t\t\t\t\t$message .= '<br>' . sprintf(\r\n\t\t\t\t\t\t_n(\r\n\t\t\t\t\t\t\t'Failed to fix %d redirect', \r\n\t\t\t\t\t\t\t'Failed to fix %d redirects',\r\n\t\t\t\t\t\t\t$failed_links,\r\n\t\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t$failed_links\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$message = __('None of the selected links are redirects!', 'broken-link-checker');\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Edit multiple links in one go.\r\n   *\r\n   * @param array $selected_links\r\n   * @return array The message to display and its CSS class.\r\n   */\r\n\tfunction do_bulk_edit($selected_links){\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\t\t\t\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\t$post = $_POST;\r\n\t\tif ( function_exists('wp_magic_quotes') ){\r\n\t\t\t$post = stripslashes_deep($post); //Ceterum censeo, WP shouldn't mangle superglobals.\r\n\t\t}\r\n\t\t\r\n\t\t$search = isset($post['search']) ? $post['search'] : '';\r\n\t\t$replace = isset($post['replace']) ? $post['replace'] : ''; \r\n\t\t$use_regex = !empty($post['regex']);\r\n\t\t$case_sensitive = !empty($post['case_sensitive']);\r\n\t\t\r\n\t\t$delimiter = '`'; //Pick a char that's uncommon in URLs so that escaping won't usually be a problem\r\n\t\tif ( $use_regex ){\r\n\t\t\t$search = $delimiter . $this->escape_regex_delimiter($search, $delimiter) . $delimiter;\r\n\t\t\tif ( !$case_sensitive ){\r\n\t\t\t\t$search .= 'i';\r\n\t\t\t}\r\n\t\t} elseif ( !$case_sensitive ) {\r\n\t\t\t//str_ireplace() would be more appropriate for case-insensitive, non-regexp replacement,\r\n\t\t\t//but that's only available in PHP5.\r\n\t\t\t$search = $delimiter . preg_quote($search, $delimiter) . $delimiter . 'i';\r\n\t\t\t$use_regex = true;\r\n\t\t}\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ) {\t\r\n\t\t\tset_time_limit(300); //In case the user decides to edit hundreds of links at once\r\n\t\t\t\r\n\t\t\t//Fetch all the selected links\r\n\t\t\t$links = blc_get_links(array(\r\n\t\t\t\t'link_ids' => $selected_links,\r\n\t\t\t\t'purpose' => BLC_FOR_EDITING,\r\n\t\t\t));\r\n\t\t\t\r\n\t\t\tif ( count($links) > 0 ) {\r\n\t\t\t\t$processed_links = 0;\r\n\t\t\t\t$failed_links = 0;\r\n\t\t\t\t$skipped_links = 0;\r\n\t\t\t\t\r\n\t\t\t\t//Edit the links\r\n\t\t\t\tforeach($links as $link){\r\n\t\t\t\t\tif ( $use_regex ){\r\n\t\t\t\t\t\t$new_url = preg_replace($search, $replace, $link->url);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$new_url = str_replace($search, $replace, $link->url);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ( $new_url == $link->url ){\r\n\t\t\t\t\t\t$skipped_links++;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t$rez = $link->edit($new_url);\r\n\t\t\t\t\tif ( !is_wp_error($rez) && empty($rez['errors'] )){\r\n\t\t\t\t\t\t$processed_links++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$failed_links++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\t$message .= sprintf(\r\n\t\t\t\t\t_n(\r\n\t\t\t\t\t\t'%d link updated.',\r\n\t\t\t\t\t\t'%d links updated.',\r\n\t\t\t\t\t\t$processed_links, \r\n\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t),\r\n\t\t\t\t\t$processed_links\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t\tif ( $failed_links > 0 ) {\r\n\t\t\t\t\t$message .= '<br>' . sprintf(\r\n\t\t\t\t\t\t_n(\r\n\t\t\t\t\t\t\t'Failed to update %d link.', \r\n\t\t\t\t\t\t\t'Failed to update %d links.',\r\n\t\t\t\t\t\t\t$failed_links,\r\n\t\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t$failed_links\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\r\n\t/**\r\n\t * Escape all instances of the $delimiter character with a backslash (unless already escaped).\r\n\t *\r\n\t * @param string $pattern\r\n\t * @param string $delimiter\r\n\t * @return string\r\n\t */\r\n\tprivate function escape_regex_delimiter($pattern, $delimiter) {\r\n\t\tif ( empty($pattern) ) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\t$output = '';\r\n\t\t$length = strlen($pattern);\r\n\t\t$escaped = false;\r\n\r\n\t\tfor ($i = 0; $i < $length; $i++) {\r\n\t\t\t$char = $pattern[$i];\r\n\r\n\t\t\tif ( $escaped ) {\r\n\t\t\t\t$escaped = false;\r\n\t\t\t} else {\r\n\t\t\t\tif ( $char == '\\\\' ) {\r\n\t\t\t\t\t$escaped = true;\r\n\t\t\t\t} else if ( $char == $delimiter ) {\r\n\t\t\t\t\t$char = '\\\\' . $char;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$output .= $char;\r\n\t\t}\r\n\r\n\t\treturn $output;\r\n\t}\r\n\t\r\n  /**\r\n   * Unlink multiple links.\r\n   *\r\n   * @param array $selected_links\r\n   * @return array Message and a CSS classname.\r\n   */\r\n\tfunction do_bulk_unlink($selected_links){\r\n\t\t//Unlink all selected links.\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\t\t\t\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ) {\t\r\n\t\t\t\r\n\t\t\t//Fetch all the selected links\r\n\t\t\t$links = blc_get_links(array(\r\n\t\t\t\t'link_ids' => $selected_links,\r\n\t\t\t\t'purpose' => BLC_FOR_EDITING,\r\n\t\t\t));\r\n\t\t\t\r\n\t\t\tif ( count($links) > 0 ) {\r\n\t\t\t\t$processed_links = 0;\r\n\t\t\t\t$failed_links = 0;\r\n\t\t\t\t\r\n\t\t\t\t//Unlink (delete) each one\r\n\t\t\t\tforeach($links as $link){\r\n\t\t\t\t\t$rez = $link->unlink();\r\n\t\t\t\t\tif ( ($rez == false) || is_wp_error($rez) ){\r\n\t\t\t\t\t\t$failed_links++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$processed_links++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\t//This message is slightly misleading - it doesn't account for the fact that \r\n\t\t\t\t//a link can be present in more than one post.\r\n\t\t\t\t$message = sprintf(\r\n\t\t\t\t\t_n(\r\n\t\t\t\t\t\t'%d link removed',\r\n\t\t\t\t\t\t'%d links removed',\r\n\t\t\t\t\t\t$processed_links, \r\n\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t),\r\n\t\t\t\t\t$processed_links\r\n\t\t\t\t);\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif ( $failed_links > 0 ) {\r\n\t\t\t\t\t$message .= '<br>' . sprintf(\r\n\t\t\t\t\t\t_n(\r\n\t\t\t\t\t\t\t'Failed to remove %d link', \r\n\t\t\t\t\t\t\t'Failed to remove %d links',\r\n\t\t\t\t\t\t\t$failed_links,\r\n\t\t\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t$failed_links\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Delete or trash posts, bookmarks and other items that contain any of the specified links.\r\n   * \r\n   * Will prefer moving stuff to trash to permanent deletion. If it encounters an item that \r\n   * can't be moved to the trash, it will skip that item by default.\r\n   *\r\n   * @param array $selected_links An array of link IDs\r\n   * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.\r\n   * @return array Confirmation message and its CSS class.\r\n   */\r\n\tfunction do_bulk_delete_sources($selected_links, $force_delete = false){\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\t\t\r\n\t\t//Delete posts, blogroll entries and any other link containers that contain any of the selected links.\r\n\t\t//\r\n\t\t//Note that once all containers containing a particular link have been deleted,\r\n\t\t//there is no need to explicitly delete the link record itself. The hooks attached to \r\n\t\t//the actions that execute when something is deleted (e.g. \"post_deleted\") will \r\n\t\t//take care of that. \r\n\t\t\t\t\t\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ) {\t\r\n\t\t\t$messages = array();\r\n\t\t\t\r\n\t\t\t//Fetch all the selected links\r\n\t\t\t$links = blc_get_links(array(\r\n\t\t\t\t'link_ids' => $selected_links,\r\n\t\t\t\t'load_instances' => true,\r\n\t\t\t));\r\n\t\t\t\r\n\t\t\t//Make a list of all containers associated with these links, with each container\r\n\t\t\t//listed only once.\r\n\t\t\t$containers = array();\r\n\t\t\tforeach($links as $link){ /* @var blcLink $link */\r\n\t\t\t\t$instances = $link->get_instances();\r\n\t\t\t\tforeach($instances as $instance){ /* @var blcLinkInstance $instance */\r\n\t\t\t\t\t$key = $instance->container_type . '|' . $instance->container_id;\r\n\t\t\t\t\t$containers[$key] = array($instance->container_type, $instance->container_id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Instantiate the containers\r\n\t\t\t$containers = blcContainerHelper::get_containers($containers);\r\n\r\n\t\t\t//Delete/trash their associated entities\r\n\t\t\t$deleted = array();\r\n\t\t\t$skipped = array();\r\n\t\t\tforeach($containers as $container){ /* @var blcContainer $container */\r\n\t\t\t\tif ( !$container->current_user_can_delete() ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif ( $force_delete ){\r\n\t\t\t\t\t$rez = $container->delete_wrapped_object();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif ( $container->can_be_trashed() ){\r\n\t\t\t\t\t\t$rez = $container->trash_wrapped_object();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$skipped[] = $container; \r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif ( is_wp_error($rez) ){ /* @var WP_Error $rez */\r\n\t\t\t\t\t//Record error messages for later display\r\n\t\t\t\t\t$messages[] = $rez->get_error_message();\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//Keep track of how many of each type were deleted.\r\n\t\t\t\t\t$container_type = $container->container_type;\r\n\t\t\t\t\tif ( isset($deleted[$container_type]) ){\r\n\t\t\t\t\t\t$deleted[$container_type]++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$deleted[$container_type] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Generate delete confirmation messages\r\n\t\t\tforeach($deleted as $container_type => $number){\r\n\t\t\t\tif ( $force_delete ){\r\n\t\t\t\t\t$messages[] = blcContainerHelper::ui_bulk_delete_message($container_type, $number);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$messages[] = blcContainerHelper::ui_bulk_trash_message($container_type, $number);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//If some items couldn't be trashed, let the user know\r\n\t\t\tif ( count($skipped) > 0 ){\r\n\t\t\t\t$message = sprintf(\r\n\t\t\t\t\t_n(\r\n\t\t\t\t\t\t\"%d item was skipped because it can't be moved to the Trash. You need to delete it manually.\",\r\n\t\t\t\t\t\t\"%d items were skipped because they can't be moved to the Trash. You need to delete them manually.\",\r\n\t\t\t\t\t\tcount($skipped)\r\n\t\t\t\t\t),\r\n\t\t\t\t\tcount($skipped)\r\n\t\t\t\t);\r\n\t\t\t\t$message .= '<br><ul>';\r\n\t\t\t\tforeach($skipped as $container){\r\n\t\t\t\t\t$message .= sprintf(\r\n\t\t\t\t\t\t'<li>%s</li>',\r\n\t\t\t\t\t\t$container->ui_get_source('')\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t$message .= '</ul>';\r\n\t\t\t\t\r\n\t\t\t\t$messages[] = $message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( count($messages) > 0 ){\r\n\t\t\t\t$message = implode('<p>', $messages);\r\n\t\t\t} else {\r\n\t\t\t\t$message = __(\"Didn't find anything to delete!\", 'broken-link-checker');\r\n\t\t\t\t$msg_class = 'error';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n  /**\r\n   * Mark multiple links as unchecked.\r\n   *\r\n   * @param array $selected_links An array of link IDs\r\n   * @return array Confirmation nessage and the CSS class to use with that message.\r\n   */\r\n\tfunction do_bulk_recheck($selected_links){\r\n\t\t/** @var wpdb $wpdb */\r\n\t\tglobal $wpdb;\r\n\t\t\r\n\t\t$message = '';\r\n\t\t$msg_class = 'updated';\r\n\r\n\t\tcheck_admin_referer('bulk-action');\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ){\r\n\t\t\t$q = \"UPDATE {$wpdb->prefix}blc_links \r\n\t\t\t\t  SET last_check_attempt = '0000-00-00 00:00:00' \r\n\t\t\t\t  WHERE link_id IN (\".implode(', ', $selected_links).\")\";\r\n\t\t\t$changes = $wpdb->query($q);\r\n\t\t\t\r\n\t\t\t$message = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t\"%d link scheduled for rechecking\",\r\n\t\t\t\t\t\"%d links scheduled for rechecking\",\r\n\t\t\t\t\t$changes, \r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t$changes\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn array($message, $msg_class);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Mark multiple links as not broken.\r\n\t * \r\n\t * @param array $selected_links An array of link IDs\r\n\t * @return array Confirmation nessage and the CSS class to use with that message.\r\n\t */\r\n\tfunction do_bulk_discard($selected_links){\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\t\t\r\n\t\t$messages = array();\r\n\t\t$msg_class = 'updated';\r\n\t\t$processed_links = 0;\r\n\t\t\r\n\t\tif ( count($selected_links) > 0 ){\r\n\t\t\tforeach($selected_links as $link_id){\r\n\t\t\t\t//Load the link\r\n\t\t\t\t$link = new blcLink( intval($link_id) );\r\n\t\t\t\t\r\n\t\t\t\t//Skip links that don't actually exist\r\n\t\t\t\tif ( !$link->valid() ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Skip links that weren't actually detected as broken\r\n\t\t\t\tif ( !$link->broken && !$link->warning ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Make it appear \"not broken\"\r\n\t\t\t\t$link->broken = false;\r\n\t\t\t\t$link->warning = false;\r\n\t\t\t\t$link->false_positive = true;\r\n\t\t\t\t$link->last_check_attempt = time();\r\n\t\t\t\t$link->log = __(\"This link was manually marked as working by the user.\", 'broken-link-checker');\r\n\t\t\t\t\r\n\t\t\t\t//Save the changes\r\n\t\t\t\tif ( $link->save() ){\r\n\t\t\t\t\t$processed_links++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$messages[] = sprintf(\r\n\t\t\t\t\t\t__(\"Couldn't modify link %d\", 'broken-link-checker'),\r\n\t\t\t\t\t\t$link_id\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif ( $processed_links > 0 ){\r\n\t\t\t$messages[] = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t'%d link marked as not broken',\r\n\t\t\t\t\t'%d links marked as not broken',\r\n\t\t\t\t\t$processed_links, \r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t$processed_links\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn array(implode('<br>', $messages), $msg_class);\r\n\t}\r\n\r\n\t/**\r\n\t * Dismiss multiple links.\r\n\t *\r\n\t * @param array $selected_links An array of link IDs\r\n\t * @return array Confirmation message and the CSS class to use with that message.\r\n\t */\r\n\tfunction do_bulk_dismiss($selected_links){\r\n\t\tcheck_admin_referer( 'bulk-action' );\r\n\r\n\t\t$messages = array();\r\n\t\t$msg_class = 'updated';\r\n\t\t$processed_links = 0;\r\n\r\n\t\tif ( count($selected_links) > 0 ){\r\n\t\t\tforeach($selected_links as $link_id){\r\n\t\t\t\t//Load the link\r\n\t\t\t\t$link = new blcLink( intval($link_id) );\r\n\r\n\t\t\t\t//Skip links that don't actually exist\r\n\t\t\t\tif ( !$link->valid() ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//We can only dismiss broken links and redirects.\r\n\t\t\t\tif ( !($link->broken || $link->warning || ($link->redirect_count > 0)) ){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$link->dismissed = true;\r\n\r\n\t\t\t\t//Save the changes\r\n\t\t\t\tif ( $link->save() ){\r\n\t\t\t\t\t$processed_links++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$messages[] = sprintf(\r\n\t\t\t\t\t\t__(\"Couldn't modify link %d\", 'broken-link-checker'),\r\n\t\t\t\t\t\t$link_id\r\n\t\t\t\t\t);\r\n\t\t\t\t\t$msg_class = 'error';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( $processed_links > 0 ){\r\n\t\t\t$messages[] = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t'%d link dismissed',\r\n\t\t\t\t\t'%d links dismissed',\r\n\t\t\t\t\t$processed_links,\r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t$processed_links\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn array(implode('<br>', $messages), $msg_class);\r\n\t}\r\n\t\r\n    \r\n\t/**\r\n\t * Enqueue CSS files for the \"Broken Links\" page\r\n\t * \r\n\t * @return void\r\n\t */\r\n\tfunction links_page_css(){\r\n\t\twp_enqueue_style('blc-links-page', plugins_url('css/links-page.css', $this->loader), array(), '20141113-2');\r\n\t}\r\n\r\n\t/**\r\n\t * Show an admin notice that explains what the \"Warnings\" section under \"Tools -> Broken Links\" does.\r\n\t * The user can hide the notice.\r\n\t */\r\n\tpublic function show_warnings_section_notice() {\r\n\t\t$is_warnings_section = isset($_GET['filter_id'])\r\n\t\t\t&& ($_GET['filter_id'] === 'warnings')\r\n\t\t\t&& isset($_GET['page'])\r\n\t\t\t&& ($_GET['page'] === 'view-broken-links');\r\n\r\n\t\tif ( !($is_warnings_section && current_user_can('edit_others_posts')) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Let the user hide the notice.\r\n\t\t$conf = blc_get_configuration();\r\n\t\t$notice_name = 'show_warnings_section_hint';\r\n\r\n\t\tif ( isset($_GET[$notice_name]) && is_numeric($_GET[$notice_name]) ) {\r\n\t\t\t$conf->set($notice_name, (bool)$_GET[$notice_name]);\r\n\t\t\t$conf->save_options();\r\n\t\t}\r\n\t\tif ( !$conf->get($notice_name, true) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tprintf(\r\n\t\t\t'<div class=\"updated\">\r\n\t\t\t\t\t<p>%1$s</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<a href=\"%2$s\">%3$s</a> |\r\n\t\t\t\t\t\t<a href=\"%4$s\">%5$s</a>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t</div>',\r\n\t\t\t__(\r\n\t\t\t\t'The \"Warnings\" page lists problems that are probably temporary or suspected to be false positives.<br> Warnings that persist for a long time will usually be reclassified as broken links.',\r\n\t\t\t\t'broken-link-checker'\r\n\t\t\t),\r\n\t\t\tesc_attr(add_query_arg($notice_name, '0')),\r\n\t\t\t_x(\r\n\t\t\t\t'Hide notice',\r\n\t\t\t\t'admin notice under Tools - Broken links - Warnings',\r\n\t\t\t\t'broken-link-checker'\r\n\t\t\t),\r\n\t\t\tesc_attr(admin_url('options-general.php?page=link-checker-settings#blc_warning_settings')),\r\n\t\t\t_x(\r\n\t\t\t\t'Change warning settings',\r\n\t\t\t\t'a link from the admin notice under Tools - Broken links - Warnings',\r\n\t\t\t\t'broken-link-checker'\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Generate the HTML for the plugin's Screen Options panel.\r\n\t * \r\n\t * @return string\r\n\t */\r\n\tfunction screen_options_html(){\r\n\t\t//Update the links-per-page setting when \"Apply\" is clicked\r\n\t\tif ( isset($_POST['per_page']) && is_numeric($_POST['per_page']) ) {\r\n\t\t\tcheck_admin_referer( 'screen-options-nonce', 'screenoptionnonce' );\r\n\t\t\t$per_page = intval($_POST['per_page']);\r\n\t\t\tif ( ($per_page >= 1) && ($per_page <= 500) ){\r\n\t\t\t\t$this->conf->options['table_links_per_page'] = $per_page;\r\n\t\t\t\t$this->conf->save_options();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//Let the user show/hide individual table columns\r\n\t\t$html = '<h5>' . __('Table columns', 'broken-link-checker') . '</h5>';\r\n\t\t\r\n\t\tinclude dirname($this->loader) . '/includes/admin/table-printer.php';\r\n\t\t$table = new blcTablePrinter($this);\r\n\t\t$available_columns = $table->get_layout_columns($this->conf->options['table_layout']);\r\n\t\t\r\n\t\t$html .= '<div id=\"blc-column-selector\" class=\"metabox-prefs\">';\r\n\t\t\r\n\t\tforeach( $available_columns as $column_id => $data ){\r\n\t\t\t$html .= sprintf(\r\n\t\t\t\t'<label><input type=\"checkbox\" name=\"visible_columns[%s]\"%s>%s</label>',\r\n\t\t\t\tesc_attr($column_id),\r\n\t\t\t\tin_array($column_id, $this->conf->options['table_visible_columns']) ? ' checked=\"checked\"' : '',\r\n\t\t\t\t$data['heading']\r\n\t\t\t);\r\n\t\t} \r\n\t\t\r\n\t\t$html .= '</div>';\r\n\t\t\r\n\t\t$html .= '<h5>' . __('Show on screen') . '</h5>';\r\n\t\t$html .= '<div class=\"screen-options\">';\r\n\t\t$html .= sprintf(\r\n\t\t\t'<input type=\"text\" name=\"per_page\" maxlength=\"3\" value=\"%d\" class=\"screen-per-page\" id=\"blc_links_per_page\" />\r\n\t\t\t<label for=\"blc_links_per_page\">%s</label>\r\n\t\t\t<input type=\"button\" class=\"button\" value=\"%s\" id=\"blc-per-page-apply-button\" /><br />',\r\n\t\t\t$this->conf->options['table_links_per_page'],\r\n\t\t\t__('links', 'broken-link-checker'),\r\n\t\t\t__('Apply')\r\n\t\t);\r\n\t\t$html .= '</div>';\r\n\t\t\r\n\t\t$html .= '<h5>' . __('Misc', 'broken-link-checker') . '</h5>';\r\n\t\t$html .= '<div class=\"screen-options\">';\r\n\t\t/*\r\n\t\tDisplay a checkbox in \"Screen Options\" that lets the user highlight links that \r\n\t\thave been broken for at least X days.  \r\n\t\t*/\r\n\t\t$html .= sprintf(\r\n\t\t\t'<label><input type=\"checkbox\" id=\"highlight_permanent_failures\" name=\"highlight_permanent_failures\"%s> ',\r\n\t\t\t$this->conf->options['highlight_permanent_failures'] ? ' checked=\"checked\"' : ''\r\n\t\t);\r\n\t\t$input_box = sprintf(\r\n        \t'</label><input type=\"text\" name=\"failure_duration_threshold\" id=\"failure_duration_threshold\" value=\"%d\" size=\"2\"><label for=\"highlight_permanent_failures\">',\r\n        \t$this->conf->options['failure_duration_threshold']\r\n\t\t);\r\n        $html .= sprintf(\r\n\t\t\t__('Highlight links broken for at least %s days', 'broken-link-checker'),\r\n\t\t\t$input_box\r\n\t\t);\r\n\t\t$html .= '</label>';\r\n\t\t\r\n\t\t//Display a checkbox for turning colourful link status messages on/off\r\n\t\t$html .= sprintf(\r\n\t\t\t'<br/><label><input type=\"checkbox\" id=\"table_color_code_status\" name=\"table_color_code_status\"%s> %s</label>',\r\n\t\t\t$this->conf->options['table_color_code_status'] ? ' checked=\"checked\"' : '',\r\n\t\t\t__('Color-code status codes', 'broken-link-checker')\r\n\t\t);\r\n\t\t\r\n\t\t$html .= '</div>';\r\n\t\t\r\n\t\treturn $html;\r\n\t}\r\n\t\r\n\t/**\r\n\t * AJAX callback for saving the \"Screen Options\" panel settings\r\n\t * \r\n\t * @param array $form\r\n\t * @return void\r\n\t */\r\n\tfunction ajax_save_screen_options($form){\r\n\t\tif ( !current_user_can('edit_others_posts') ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker') \r\n\t\t\t )));\r\n\t\t}\r\n\t\t\r\n\t\t$this->conf->options['highlight_permanent_failures'] = !empty($form['highlight_permanent_failures']);\r\n\t\t$this->conf->options['table_color_code_status'] = !empty($form['table_color_code_status']);\r\n\t\t\r\n\t\t$failure_duration_threshold = intval($form['failure_duration_threshold']);\r\n\t\tif ( $failure_duration_threshold >=1 ){\r\n\t\t\t$this->conf->options['failure_duration_threshold'] = $failure_duration_threshold;\r\n\t\t}\r\n\t\t\r\n\t\tif ( isset($form['visible_columns']) && is_array($form['visible_columns']) ){\r\n\t\t\t$this->conf->options['table_visible_columns'] = array_keys($form['visible_columns']);\r\n\t\t}\r\n\t\t\r\n\t\t$this->conf->save_options();\r\n\t\tdie('1');\r\n\t}\r\n\t\r\n\tfunction start_timer(){\r\n\t\t$this->execution_start_time = microtime_float();\r\n\t}\r\n\t\r\n\tfunction execution_time(){\r\n\t\treturn microtime_float() - $this->execution_start_time;\r\n\t}\r\n\t\r\n  /**\r\n   * The main worker function that does all kinds of things.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction work(){\r\n\t\tglobal $blclog;\r\n\r\n\t\t//Close the session to prevent lock-ups.\r\n\t\t//PHP sessions are blocking. session_start() will wait until all other scripts that are using the same session\r\n\t\t//are finished. As a result, a long-running script that unintentionally keeps the session open can cause\r\n\t\t//the entire site to \"lock up\" for the current user/browser. WordPress itself doesn't use sessions, but some\r\n\t\t//plugins do, so we should explicitly close the session (if any) before starting the worker.\r\n\t\tif ( session_id() != '' ) {\r\n\t\t\tsession_write_close();\r\n\t\t}\r\n\t\t\r\n\t\tif ( !$this->acquire_lock() ){\r\n\t\t\t//FB::warn(\"Another instance of BLC is already working. Stop.\");\r\n\t\t\t$blclog->info('Another instance of BLC is already working. Stop.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( $this->server_too_busy() ){\r\n\t\t\t//FB::warn(\"Server is too busy. Stop.\");\r\n\t\t\t$blclog->warn('Server load is too high, stopping.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t$this->start_timer();\r\n\t\t$blclog->info('work() starts');\r\n\r\n\t\t$max_execution_time = $this->conf->options['max_execution_time'];\r\n\t\r\n\t\t/*****************************************\r\n\t\t\t\t\t\tPreparation\r\n\t\t******************************************/\r\n\t\t// Check for safe mode\r\n\t\tif( blcUtility::is_safe_mode() ){\r\n\t\t    // Do it the safe mode way - obey the existing max_execution_time setting\r\n\t\t    $t = ini_get('max_execution_time');\r\n\t\t    if ($t && ($t < $max_execution_time)) \r\n\t\t    \t$max_execution_time = $t-1;\r\n\t\t} else {\r\n\t\t    // Do it the regular way\r\n\t\t    @set_time_limit( $max_execution_time * 2 ); //x2 should be plenty, running any longer would mean a glitch.\r\n\t\t}\r\n\t\t\r\n\t\t//Don't stop the script when the connection is closed\r\n\t\tignore_user_abort( true );\r\n\r\n\t\t//Close the connection as per http://www.php.net/manual/en/features.connection-handling.php#71172\r\n\t\t//This reduces resource usage.\r\n\t\t//(Disable when debugging or you won't get the FirePHP output)\r\n\t\tif (\r\n\t\t\t!headers_sent()\r\n\t\t\t&& (defined('DOING_AJAX') && constant('DOING_AJAX'))\r\n\t\t\t&& (!defined('BLC_DEBUG') || !constant('BLC_DEBUG'))\r\n\t\t){\r\n\t\t\t@ob_end_clean(); //Discard the existing buffer, if any\r\n\t \t\theader(\"Connection: close\");\r\n\t\t\tob_start();\r\n\t\t\techo ('Connection closed'); //This could be anything\r\n\t\t\t$size = ob_get_length();\r\n\t\t\theader(\"Content-Length: $size\");\r\n\t \t\tob_end_flush(); // Strange behaviour, will not work\r\n\t \t\tflush();        // Unless both are called !\r\n \t\t}\r\n \t\t\r\n \t\t//Load modules for this context\r\n \t\t$moduleManager = blcModuleManager::getInstance();\r\n \t\t$moduleManager->load_modules('work');\r\n\r\n\t\t$target_usage_fraction = $this->conf->get('target_resource_usage', 0.25);\r\n\t\t//Target usage must be between 1% and 100%.\r\n\t\t$target_usage_fraction = max(min($target_usage_fraction, 1), 0.01);\r\n \t\t\r\n \t\t\r\n\t\t/*****************************************\r\n\t\t\t\tParse posts and bookmarks\r\n\t\t******************************************/\r\n\t\t\r\n\t\t$orphans_possible = false;\r\n\t\t$still_need_resynch = $this->conf->options['need_resynch'];\r\n\t\t\r\n\t\tif ( $still_need_resynch ) {\r\n\r\n\t\t\t//FB::log(\"Looking for containers that need parsing...\");\r\n\t\t\t$max_containers_per_query = 50;\r\n\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$containers = blcContainerHelper::get_unsynched_containers($max_containers_per_query);\r\n\t\t\t$get_containers_time = microtime(true) - $start;\r\n\r\n\t\t\twhile( !empty($containers) ){\r\n\t\t\t\t//FB::log($containers, 'Found containers');\r\n\t\t\t\t$this->sleep_to_maintain_ratio($get_containers_time, $target_usage_fraction);\r\n\t\t\t\t\r\n\t\t\t\tforeach($containers as $container){\r\n\t\t\t\t\t$synch_start_time = microtime(true);\r\n\r\n\t\t\t\t\t//FB::log($container, \"Parsing container\");\r\n\t\t\t\t\t$container->synch();\r\n\r\n\t\t\t\t\t$synch_elapsed_time = microtime(true) - $synch_start_time;\r\n\t\t\t\t\t$blclog->info(sprintf(\r\n\t\t\t\t\t\t'Parsed container %s[%s] in %.2f ms',\r\n\t\t\t\t\t\t$container->container_type,\r\n\t\t\t\t\t\t$container->container_id,\r\n\t\t\t\t\t\t$synch_elapsed_time * 1000\r\n\t\t\t\t\t));\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Check if we still have some execution time left\r\n\t\t\t\t\tif( $this->execution_time() > $max_execution_time ){\r\n\t\t\t\t\t\t//FB::log('The allotted execution time has run out');\r\n\t\t\t\t\t\tblc_cleanup_links();\r\n\t\t\t\t\t\t$this->release_lock();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Check if the server isn't overloaded\r\n\t\t\t\t\tif ( $this->server_too_busy() ){\r\n\t\t\t\t\t\t//FB::log('Server overloaded, bailing out.');\r\n\t\t\t\t\t\tblc_cleanup_links();\r\n\t\t\t\t\t\t$this->release_lock();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//Intentionally slow down parsing to reduce the load on the server. Basically,\r\n\t\t\t\t\t//we work $target_usage_fraction of the time and sleep the rest of the time.\r\n\t\t\t\t\t$this->sleep_to_maintain_ratio($synch_elapsed_time, $target_usage_fraction);\r\n\t\t\t\t}\r\n\t\t\t\t$orphans_possible = true;\r\n\r\n\t\t\t\t$start = microtime(true);\r\n\t\t\t\t$containers = blcContainerHelper::get_unsynched_containers($max_containers_per_query);\r\n\t\t\t\t$get_containers_time = microtime(true) - $start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//FB::log('No unparsed items found.');\r\n\t\t\t$still_need_resynch = false;\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\t//FB::log('Resynch not required.');\r\n\t\t}\r\n\t\t\r\n\t\t/******************************************\r\n\t\t\t\t    Resynch done?\r\n\t\t*******************************************/\r\n\t\tif ( $this->conf->options['need_resynch'] && !$still_need_resynch ){\r\n\t\t\t$this->conf->options['need_resynch']  = $still_need_resynch;\r\n\t\t\t$this->conf->save_options();\r\n\t\t}\r\n\t\t\r\n\t\t/******************************************\r\n\t\t\t\t    Remove orphaned links\r\n\t\t*******************************************/\r\n\t\t\r\n\t\tif ( $orphans_possible ) {\r\n\t\t\t$start = microtime(true);\r\n\r\n\t\t\t$blclog->info('Removing orphaned links.');\r\n\t\t\tblc_cleanup_links();\r\n\r\n\t\t\t$get_links_time = microtime(true) - $start;\r\n\t\t\t$this->sleep_to_maintain_ratio($get_links_time, $target_usage_fraction);\r\n\t\t}\r\n\t\t\r\n\t\t//Check if we still have some execution time left\r\n\t\tif( $this->execution_time() > $max_execution_time ){\r\n\t\t\t//FB::log('The allotted execution time has run out');\r\n\t\t\t$blclog->info('The allotted execution time has run out.');\r\n\t\t\t$this->release_lock();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( $this->server_too_busy() ){\r\n\t\t\t//FB::log('Server overloaded, bailing out.');\r\n\t\t\t$blclog->info('Server load too high, stopping.');\r\n\t\t\t$this->release_lock();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t/*****************************************\r\n\t\t\t\t\t\tCheck links\r\n\t\t******************************************/\r\n\t\t$max_links_per_query = 30;\r\n\r\n\t\t$start = microtime(true);\r\n\t\t$links = $this->get_links_to_check($max_links_per_query);\r\n\t\t$get_links_time = microtime(true) - $start;\r\n\r\n\t\twhile ( $links ){\r\n\t\t\t$this->sleep_to_maintain_ratio($get_links_time, $target_usage_fraction);\r\n\t\t\r\n\t\t\t//Some unchecked links found\r\n\t\t\t//FB::log(\"Checking \".count($links).\" link(s)\");\r\n\t\t\t$blclog->info(\"Checking \".count($links).\" link(s)\");\r\n\r\n\t\t\t//Randomizing the array reduces the chances that we'll get several links to the same domain in a row.\r\n\t\t\tshuffle($links);\r\n\t\t\t\r\n\t\t\tforeach ($links as $link) {\r\n\t\t\t\t//Does this link need to be checked? Excluded links aren't checked, but their URLs are still\r\n\t\t\t\t//tested periodically to see if they're still on the exclusion list.\r\n        \t\tif ( !$this->is_excluded( $link->url ) ) {\r\n        \t\t\t//Check the link.\r\n        \t\t\t//FB::log($link->url, \"Checking link {$link->link_id}\");\r\n\t\t\t\t\t$link->check( true );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//FB::info(\"The URL {$link->url} is excluded, skipping link {$link->link_id}.\");\r\n\t\t\t\t\t$link->last_check_attempt = time();\r\n\t\t\t\t\t$link->save();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Check if we still have some execution time left\r\n\t\t\t\tif( $this->execution_time() > $max_execution_time ){\r\n\t\t\t\t\t//FB::log('The allotted execution time has run out');\r\n\t\t\t\t\t$blclog->info('The allotted execution time has run out.');\r\n\t\t\t\t\t$this->release_lock();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Check if the server isn't overloaded\r\n\t\t\t\tif ( $this->server_too_busy() ){\r\n\t\t\t\t\t//FB::log('Server overloaded, bailing out.');\r\n\t\t\t\t\t$blclog->info('Server load too high, stopping.');\r\n\t\t\t\t\t$this->release_lock();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$links = $this->get_links_to_check($max_links_per_query);\r\n\t\t\t$get_links_time = microtime(true) - $start;\r\n\t\t}\r\n\t\t//FB::log('No links need to be checked right now.');\r\n\t\t\r\n\t\t$this->release_lock();\r\n\t\t$blclog->info('work(): All done.');\r\n\t\t//FB::log('All done.');\r\n\t}\r\n\r\n\t/**\r\n\t * Sleep long enough to maintain the required $ratio between $elapsed_time and total runtime.\r\n\t *\r\n\t * For example, if $ratio is 0.25 and $elapsed_time is 1 second, this method will sleep for 3 seconds.\r\n\t * Total runtime = 1 + 3 = 4, ratio = 1 / 4 = 0.25.\r\n\t *\r\n\t * @param float $elapsed_time\r\n\t * @param float $ratio\r\n\t */\r\n\tprivate function sleep_to_maintain_ratio($elapsed_time, $ratio) {\r\n\t\tif ( ($ratio <= 0) || ($ratio > 1) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$sleep_time = $elapsed_time * ((1 / $ratio) - 1);\r\n\t\tif ($sleep_time > 0.0001) {\r\n\t\t\t/*global $blclog;\r\n\t\t\t$blclog->debug(sprintf(\r\n\t\t\t\t'Task took %.2f ms, sleeping for %.2f ms',\r\n\t\t\t\t$elapsed_time * 1000,\r\n\t\t\t\t$sleep_time * 1000\r\n\t\t\t));*/\r\n\t\t\tusleep($sleep_time * 1000000);\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * This function is called when the plugin's cron hook executes.\r\n   * Its only purpose is to invoke the worker function.\r\n   *\r\n   * @uses wsBrokenLinkChecker::work() \r\n   *\r\n   * @return void\r\n   */\r\n\tfunction cron_check_links(){\r\n\t\t$this->work();\r\n\t}\r\n\t\r\n  /**\r\n   * Retrieve links that need to be checked or re-checked.\r\n   *\r\n   * @param integer $max_results The maximum number of links to return. Defaults to 0 = no limit.\r\n   * @param bool $count_only If true, only the number of found links will be returned, not the links themselves. \r\n   * @return int|blcLink[]\r\n   */\r\n\tfunction get_links_to_check($max_results = 0, $count_only = false){\r\n\t\tglobal $wpdb; /* @var wpdb $wpdb */\r\n\t\t\r\n\t\t$check_threshold = date('Y-m-d H:i:s', strtotime('-'.$this->conf->options['check_threshold'].' hours'));\r\n\t\t$recheck_threshold = date('Y-m-d H:i:s', time() - $this->conf->options['recheck_threshold']);\r\n\t\t\r\n\t\t//FB::log('Looking for links to check (threshold : '.$check_threshold.', recheck_threshold : '.$recheck_threshold.')...');\r\n\t\t\r\n\t\t//Select some links that haven't been checked for a long time or\r\n\t\t//that are broken and need to be re-checked again. Links that are\r\n\t\t//marked as \"being checked\" and have been that way for several minutes\r\n\t\t//can also be considered broken/buggy, so those will be selected \r\n\t\t//as well.\r\n\t\t\r\n\t\t//Only check links that have at least one valid instance (i.e. an instance exists and \r\n\t\t//it corresponds to one of the currently loaded container/parser types).\r\n\t\t$manager = blcModuleManager::getInstance();\r\n\t\t$loaded_containers = $manager->get_escaped_ids('container');\r\n\t\t$loaded_parsers = $manager->get_escaped_ids('parser');\r\n\t\t\r\n\t\t//Note : This is a slow query, but AFAIK there is no way to speed it up.\r\n\t\t//I could put an index on last_check_attempt, but that value is almost \r\n\t\t//certainly unique for each row so it wouldn't be much better than a full table scan.\r\n\t\tif ( $count_only ){\r\n\t\t\t$q = \"SELECT COUNT(links.link_id)\\n\";\r\n\t\t} else {\r\n\t\t\t$q = \"SELECT links.*\\n\";\r\n\t\t}\r\n\t\t$q .= \"FROM {$wpdb->prefix}blc_links AS links\r\n\t\t      WHERE \r\n\t\t      \t(\r\n\t\t\t\t  \t( last_check_attempt < %s ) \r\n\t\t\t\t\tOR \r\n\t\t\t \t  \t( \r\n\t\t\t\t\t\t(broken = 1 OR being_checked = 1) \r\n\t\t\t\t\t\tAND may_recheck = 1\r\n\t\t\t\t\t\tAND check_count < %d \r\n\t\t\t\t\t\tAND last_check_attempt < %s \r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tAND EXISTS (\r\n\t\t\t\t\tSELECT 1 FROM {$wpdb->prefix}blc_instances AS instances\r\n\t\t\t\t\tWHERE \r\n\t\t\t\t\t\tinstances.link_id = links.link_id\r\n\t\t\t\t\t\tAND ( instances.container_type IN ({$loaded_containers}) )\r\n\t\t\t\t\t\tAND ( instances.parser_type IN ({$loaded_parsers}) )\r\n\t\t\t\t)\r\n\t\t\t\";\r\n\t\tif ( !$count_only ){\r\n\t\t\t$q .= \"\\nORDER BY last_check_attempt ASC\\n\";\r\n\t\t\tif ( !empty($max_results) ){\r\n\t\t\t\t$q .= \"LIMIT \" . intval($max_results);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t$link_q = $wpdb->prepare(\r\n\t\t\t$q, \r\n\t\t\t$check_threshold, \r\n\t\t\t$this->conf->options['recheck_count'], \r\n\t\t\t$recheck_threshold\r\n\t\t);\r\n\t\t//FB::log($link_q, \"Find links to check\");\r\n\t\t//$blclog->debug(\"Find links to check: \\n\" . $link_q);\r\n\t\r\n\t\t//If we just need the number of links, retrieve it and return\r\n\t\tif ( $count_only ){\r\n\t\t\treturn $wpdb->get_var($link_q);\r\n\t\t}\r\n\t\t\r\n\t\t//Fetch the link data\r\n\t\t$link_data = $wpdb->get_results($link_q, ARRAY_A);\r\n\t\tif ( empty($link_data) ){\r\n\t\t\treturn array();\r\n\t\t}\r\n\t\t\r\n\t\t//Instantiate blcLink objects for all fetched links\r\n\t\t$links = array();\r\n\t\tforeach($link_data as $data){\r\n\t\t\t$links[] = new blcLink($data);\r\n\t\t}\r\n\t\t\r\n\t\treturn $links;\r\n\t}\r\n\t\r\n  /**\r\n   * Output the current link checker status in JSON format.\r\n   * Ajax hook for the 'blc_full_status' action.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_full_status( ){\r\n\t\t$status = $this->get_status();\r\n\t\t$text = $this->status_text( $status );\r\n\t\t\r\n\t\techo json_encode( array(\r\n\t\t\t'text' => $text,\r\n\t\t\t'status' => $status, \r\n\t\t ) );\r\n\t\t\r\n\t\tdie();\r\n\t}\r\n\t\r\n  /**\r\n   * Generates a status message based on the status info in $status\r\n   *\r\n   * @param array $status\r\n   * @return string\r\n   */\r\n\tfunction status_text( $status ){\r\n\t\t$text = '';\r\n\t\r\n\t\tif( $status['broken_links'] > 0 ){\r\n\t\t\t$text .= sprintf( \r\n\t\t\t\t\"<a href='%s' title='\" . __('View broken links', 'broken-link-checker') . \"'><strong>\". \r\n\t\t\t\t\t_n('Found %d broken link', 'Found %d broken links', $status['broken_links'], 'broken-link-checker') .\r\n\t\t\t\t\"</strong></a>\",\r\n\t\t\t  \tesc_attr(admin_url('tools.php?page=view-broken-links')),\r\n\t\t\t\t$status['broken_links']\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$text .= __(\"No broken links found.\", 'broken-link-checker');\r\n\t\t}\r\n\t\t\r\n\t\t$text .= \"<br/>\";\r\n\t\t\r\n\t\tif( $status['unchecked_links'] > 0) {\r\n\t\t\t$text .= sprintf( \r\n\t\t\t\t_n('%d URL in the work queue', '%d URLs in the work queue', $status['unchecked_links'], 'broken-link-checker'), \r\n\t\t\t\t$status['unchecked_links'] );\r\n\t\t} else {\r\n\t\t\t$text .= __(\"No URLs in the work queue.\", 'broken-link-checker');\r\n\t\t}\r\n\t\t\r\n\t\t$text .= \"<br/>\";\r\n\t\tif ( $status['known_links'] > 0 ){\r\n\t\t\t$url_count = sprintf(\r\n\t\t\t\t_nx('%d unique URL', '%d unique URLs', $status['known_links'], 'for the \"Detected X unique URLs in Y links\" message', 'broken-link-checker'),\r\n\t\t\t\t$status['known_links']\r\n\t\t\t);\r\n\t\t\t$link_count = sprintf(\r\n\t\t\t\t_nx('%d link', '%d links', $status['known_instances'], 'for the \"Detected X unique URLs in Y links\" message', 'broken-link-checker'),\r\n\t\t\t\t$status['known_instances']\r\n\t\t\t);\r\n\r\n\t\t\tif ($this->conf->options['need_resynch']){\r\n\t\t\t\t$text .= sprintf(\r\n\t\t\t\t\t__('Detected %1$s in %2$s and still searching...', 'broken-link-checker'),\r\n\t\t\t\t\t$url_count,\r\n\t\t\t\t\t$link_count\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\t$text .= sprintf(\r\n\t\t\t\t\t__('Detected %1$s in %2$s.', 'broken-link-checker'),\r\n\t\t\t\t\t$url_count,\r\n\t\t\t\t\t$link_count\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif ($this->conf->options['need_resynch']){\r\n\t\t\t\t$text .= __('Searching your blog for links...', 'broken-link-checker');\r\n\t\t\t} else {\r\n\t\t\t\t$text .= __('No links detected.', 'broken-link-checker');\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn $text;\r\n\t}\r\n\t\r\n  /**\r\n   * @uses wsBrokenLinkChecker::ajax_full_status() \r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_dashboard_status(){\r\n\t\t//Just display the full status.\r\n\t\t$this->ajax_full_status();\r\n\t}\r\n\t\r\n  /**\r\n   * Output the current average server load (over the last one-minute period).\r\n   * Called via AJAX.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_current_load(){\r\n\t\t$load = blcUtility::get_server_load();\r\n\t\tif ( empty($load) ){\r\n\t\t\tdie( _x('Unknown', 'current load', 'broken-link-checker') );\r\n\t\t}\r\n\t\t\r\n\t\t$one_minute = reset($load);\r\n\t\tprintf('%.2f', $one_minute);\r\n\t\tdie();\r\n\t}\r\n\t\r\n  /**\r\n   * Returns an array with various status information about the plugin. Array key reference: \r\n   *\tcheck_threshold \t- date/time; links checked before this threshold should be checked again.\r\n   *\trecheck_threshold \t- date/time; broken links checked before this threshold should be re-checked.\r\n   *\tknown_links \t\t- the number of detected unique URLs (a misleading name, yes).\r\n   *\tknown_instances \t- the number of detected link instances, i.e. actual link elements in posts and other places.\r\n   *\tbroken_links\t\t- the number of detected broken links.\t\r\n   *\tunchecked_links\t\t- the number of URLs that need to be checked ASAP; based on check_threshold and recheck_threshold.\r\n   *\r\n   * @return array\r\n   */\r\n\tfunction get_status(){\r\n\t\t$blc_link_query = blcLinkQuery::getInstance();\r\n\t\t\r\n\t\t$check_threshold=date('Y-m-d H:i:s', strtotime('-'.$this->conf->options['check_threshold'].' hours'));\r\n\t\t$recheck_threshold=date('Y-m-d H:i:s', time() - $this->conf->options['recheck_threshold']);\r\n\t\t\r\n\t\t$known_links = blc_get_links(array('count_only' => true));\r\n\t\t$known_instances = blc_get_usable_instance_count();\r\n\t\t\r\n\t\t$broken_links = $blc_link_query->get_filter_links('broken', array('count_only' => true));\r\n\t\t\r\n\t\t$unchecked_links = $this->get_links_to_check(0, true);\r\n\t\t\r\n\t\treturn array(\r\n\t\t\t'check_threshold' => $check_threshold,\r\n\t\t\t'recheck_threshold' => $recheck_threshold,\r\n\t\t\t'known_links' => $known_links,\r\n\t\t\t'known_instances' => $known_instances,\r\n\t\t\t'broken_links' => $broken_links,\r\n\t\t\t'unchecked_links' => $unchecked_links,\r\n\t\t );\r\n\t}\r\n\t\r\n\tfunction ajax_work(){\r\n\t\tcheck_ajax_referer('blc_work');\r\n\r\n\t\t//Run the worker function \r\n\t\t$this->work();\r\n\t\tdie();\r\n\t}\r\n\t\r\n  /**\r\n   * AJAX hook for the \"Not broken\" button. Marks a link as broken and as a likely false positive.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_discard(){\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer('blc_discard', false, false)){\r\n\t\t\tdie( __(\"You're not allowed to do that!\", 'broken-link-checker') );\r\n\t\t}\r\n\t\t\r\n\t\tif ( isset($_POST['link_id']) ){\r\n\t\t\t//Load the link\r\n\t\t\t$link = new blcLink( intval($_POST['link_id']) );\r\n\t\t\t\r\n\t\t\tif ( !$link->valid() ){\r\n\t\t\t\tprintf( __(\"Oops, I can't find the link %d\", 'broken-link-checker'), intval($_POST['link_id']) );\r\n\t\t\t\tdie();\r\n\t\t\t}\r\n\t\t\t//Make it appear \"not broken\"\r\n\t\t\t$link->broken = false;  \r\n\t\t\t$link->warning = false;\r\n\t\t\t$link->false_positive = true;\r\n\t\t\t$link->last_check_attempt = time();\r\n\t\t\t$link->log = __(\"This link was manually marked as working by the user.\", 'broken-link-checker');\r\n\t\t\t\r\n\t\t\t//Save the changes\r\n\t\t\tif ( $link->save() ){\r\n\t\t\t\tdie( \"OK\" );\r\n\t\t\t} else {\r\n\t\t\t\tdie( __(\"Oops, couldn't modify the link!\", 'broken-link-checker') ) ;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdie( __(\"Error : link_id not specified\", 'broken-link-checker') );\r\n\t\t}\r\n\t}\r\n\r\n\tpublic function ajax_dismiss(){\r\n\t\t$this->ajax_set_link_dismissed(true);\r\n\t}\r\n\r\n\tpublic function ajax_undismiss(){\r\n\t\t$this->ajax_set_link_dismissed(false);\r\n\t}\r\n\r\n\tprivate function ajax_set_link_dismissed($dismiss){\r\n\t\t$action = $dismiss ? 'blc_dismiss' : 'blc_undismiss';\r\n\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer($action, false, false)){\r\n\t\t\tdie( __(\"You're not allowed to do that!\", 'broken-link-checker') );\r\n\t\t}\r\n\r\n\t\tif ( isset($_POST['link_id']) ){\r\n\t\t\t//Load the link\r\n\t\t\t$link = new blcLink( intval($_POST['link_id']) );\r\n\r\n\t\t\tif ( !$link->valid() ){\r\n\t\t\t\tprintf( __(\"Oops, I can't find the link %d\", 'broken-link-checker'), intval($_POST['link_id']) );\r\n\t\t\t\tdie();\r\n\t\t\t}\r\n\r\n\t\t\t$link->dismissed = $dismiss;\r\n\r\n\t\t\t//Save the changes\r\n\t\t\tif ( $link->save() ){\r\n\t\t\t\tdie( \"OK\" );\r\n\t\t\t} else {\r\n\t\t\t\tdie( __(\"Oops, couldn't modify the link!\", 'broken-link-checker') ) ;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdie( __(\"Error : link_id not specified\", 'broken-link-checker') );\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * AJAX hook for the inline link editor on Tools -> Broken Links. \r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_edit(){\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer('blc_edit', false, false)){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker') \r\n\t\t\t\t )));\r\n\t\t}\r\n\r\n\t\tif ( empty($_POST['link_id']) || empty($_POST['new_url']) || !is_numeric($_POST['link_id']) ) {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"Error : link_id or new_url not specified\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t//Load the link\r\n\t\t$link = new blcLink( intval($_POST['link_id']) );\r\n\r\n\t\tif ( !$link->valid() ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => sprintf( __(\"Oops, I can't find the link %d\", 'broken-link-checker'), intval($_POST['link_id']) )\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t//Validate the new URL.\r\n\t\t$new_url = stripslashes($_POST['new_url']);\r\n\t\t$parsed = @parse_url($new_url);\r\n\t\tif ( !$parsed ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"Oops, the new URL is invalid!\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\tif ( !current_user_can('unfiltered_html') ) {\r\n\t\t\t//Disallow potentially dangerous URLs like \"javascript:...\".\r\n\t\t\t$protocols = wp_allowed_protocols();\r\n\t\t\t$good_protocol_url = wp_kses_bad_protocol($new_url, $protocols);\r\n\t\t\tif ( $new_url != $good_protocol_url ) {\r\n\t\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"Oops, the new URL is invalid!\", 'broken-link-checker')\r\n\t\t\t\t)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$new_text = (isset($_POST['new_text']) && is_string($_POST['new_text'])) ? stripslashes($_POST['new_text']) : null;\r\n\t\tif ( $new_text === '' ) {\r\n\t\t\t$new_text = null;\r\n\t\t}\r\n\t\tif ( !empty($new_text) && !current_user_can('unfiltered_html') ) {\r\n\t\t\t$new_text = stripslashes(wp_filter_post_kses(addslashes($new_text))); //wp_filter_post_kses expects slashed data.\r\n\t\t}\r\n\r\n\t\t$rez = $link->edit($new_url, $new_text);\r\n\t\tif ( $rez === false ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"An unexpected error occurred!\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t} else {\r\n\t\t\t$new_link = $rez['new_link']; /** @var blcLink $new_link */\r\n\t\t\t$new_status = $new_link->analyse_status();\r\n\t\t\t$ui_link_text = null;\r\n\t\t\tif ( isset($new_text) ) {\r\n\t\t\t\t$instances = $new_link->get_instances();\r\n\t\t\t\tif ( !empty($instances) ) {\r\n\t\t\t\t\t$first_instance = reset($instances);\r\n\t\t\t\t\t$ui_link_text = $first_instance->ui_get_link_text();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$response = array(\r\n\t\t\t\t'new_link_id' => $rez['new_link_id'],\r\n\t\t\t\t'cnt_okay' => $rez['cnt_okay'],\r\n\t\t\t\t'cnt_error' => $rez['cnt_error'],\r\n\r\n\t\t\t\t'status_text' => $new_status['text'],\r\n\t\t\t\t'status_code' => $new_status['code'],\r\n\t\t\t\t'http_code'   => empty($new_link->http_code) ? '' : $new_link->http_code,\r\n\t\t\t\t'redirect_count' => $new_link->redirect_count,\r\n\r\n\t\t\t\t'url' => $new_link->url,\r\n\t\t\t\t'escaped_url' => esc_url_raw($new_link->url),\r\n\t\t\t\t'final_url' => $new_link->final_url,\r\n\t\t\t\t'link_text' => isset($new_text) ? $new_text : null,\r\n\t\t\t\t'ui_link_text' => isset($new_text) ? $ui_link_text : null,\r\n\r\n\t\t\t\t'errors' => array(),\r\n\t\t\t);\r\n\t\t\t//url, status text, status code, link text, editable link text\r\n\r\n\r\n\t\t\tforeach($rez['errors'] as $error){ /** @var $error WP_Error */\r\n\t\t\t\tarray_push( $response['errors'], implode(', ', $error->get_error_messages()) );\r\n\t\t\t}\r\n\t\t\tdie( json_encode($response) );\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * AJAX hook for the \"Unlink\" action links in Tools -> Broken Links. \r\n   * Removes the specified link from all posts and other supported items.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction ajax_unlink(){\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer('blc_unlink', false, false)){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker') \r\n\t\t\t\t )));\r\n\t\t}\r\n\t\t\r\n\t\tif ( isset($_POST['link_id']) ){\r\n\t\t\t//Load the link\r\n\t\t\t$link = new blcLink( intval($_POST['link_id']) );\r\n\t\t\t\r\n\t\t\tif ( !$link->valid() ){\r\n\t\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => sprintf( __(\"Oops, I can't find the link %d\", 'broken-link-checker'), intval($_POST['link_id']) ) \r\n\t\t\t\t )));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Try and unlink it\r\n\t\t\t$rez = $link->unlink();\r\n\t\t\t\r\n\t\t\tif ( $rez === false ){\r\n\t\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"An unexpected error occured!\", 'broken-link-checker')\r\n\t\t\t\t )));\r\n\t\t\t} else {\r\n\t\t\t\t$response = array(\r\n\t\t\t\t\t'cnt_okay' => $rez['cnt_okay'],\r\n\t\t\t\t\t'cnt_error' => $rez['cnt_error'],\r\n\t\t\t\t\t'errors' => array(),\r\n\t\t\t\t);\r\n\t\t\t\tforeach($rez['errors'] as $error){ /** @var WP_Error $error */\r\n\t\t\t\t\tarray_push( $response['errors'], implode(', ', $error->get_error_messages()) );\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tdie( json_encode($response) );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t\t'error' => __(\"Error : link_id not specified\", 'broken-link-checker') \r\n\t\t\t\t )));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic function ajax_deredirect() {\r\n\t\tif ( !current_user_can('edit_others_posts') || !check_ajax_referer('blc_deredirect', false, false) ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\tif ( !isset($_POST['link_id']) || !is_numeric($_POST['link_id']) ) {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"Error : link_id not specified\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t$id = intval($_POST['link_id']);\r\n\t\t$link = new blcLink($id);\r\n\r\n\t\tif ( !$link->valid() ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => sprintf(__(\"Oops, I can't find the link %d\", 'broken-link-checker'), $id)\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t//The actual task is simple; it's error handling that's complicated.\r\n\t\t$result = $link->deredirect();\r\n\t\tif ( is_wp_error($result) ) {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => sprintf('%s [%s]', $result->get_error_message(), $result->get_error_code())\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t$link = $result['new_link'] /** @var blcLink $link */;\r\n\r\n\t\t$status = $link->analyse_status();\r\n\t\t$response = array(\r\n\t\t\t'url' => $link->url,\r\n\t\t\t'escaped_url' => esc_url_raw($link->url),\r\n\t\t\t'new_link_id' => $result['new_link_id'],\r\n\r\n\t\t\t'status_text' => $status['text'],\r\n\t\t\t'status_code' => $status['code'],\r\n\t\t\t'http_code'   => empty($link->http_code) ? '' : $link->http_code,\r\n\t\t\t'redirect_count' => $link->redirect_count,\r\n\t\t\t'final_url' => $link->final_url,\r\n\r\n\t\t\t'cnt_okay' => $result['cnt_okay'],\r\n\t\t\t'cnt_error' => $result['cnt_error'],\r\n\t\t\t'errors' => array(),\r\n\t\t);\r\n\r\n\t\t//Convert WP_Error's to simple strings.\r\n\t\tif ( !empty($result['errors']) ) {\r\n\t\t\tforeach($result['errors'] as $error) { /** @var WP_Error $error */\r\n\t\t\t\t$response['errors'][] = $error->get_error_message();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdie(json_encode($response));\r\n\t}\r\n\r\n\t/**\r\n\t * AJAX hook for the \"Recheck\" action.\r\n\t */\r\n\tpublic function ajax_recheck() {\r\n\t\tif (!current_user_can('edit_others_posts') || !check_ajax_referer('blc_recheck', false, false)){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"You're not allowed to do that!\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\tif ( !isset($_POST['link_id']) || !is_numeric($_POST['link_id']) ) {\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => __(\"Error : link_id not specified\", 'broken-link-checker')\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t$id = intval($_POST['link_id']);\r\n\t\t$link = new blcLink($id);\r\n\r\n\t\tif ( !$link->valid() ){\r\n\t\t\tdie( json_encode( array(\r\n\t\t\t\t'error' => sprintf(__(\"Oops, I can't find the link %d\", 'broken-link-checker'), $id)\r\n\t\t\t)));\r\n\t\t}\r\n\r\n\t\t//In case the immediate check fails, this will ensure the link is checked during the next work() run.\r\n\t\t$link->last_check_attempt = 0;\r\n\t\t$link->save();\r\n\r\n\t\t//Check the link and save the results.\r\n\t\t$link->check(true);\r\n\r\n\t\t$status = $link->analyse_status();\r\n\t\t$response = array(\r\n\t\t\t'status_text' => $status['text'],\r\n\t\t\t'status_code' => $status['code'],\r\n\t\t\t'http_code'   => empty($link->http_code) ? '' : $link->http_code,\r\n\t\t\t'redirect_count' => $link->redirect_count,\r\n\t\t\t'final_url' => $link->final_url,\r\n\t\t);\r\n\r\n\t\tdie(json_encode($response));\r\n\t}\r\n\t\r\n\tfunction ajax_link_details(){\r\n\t\tglobal $wpdb; /* @var wpdb $wpdb */\r\n\t\t\r\n\t\tif (!current_user_can('edit_others_posts')){\r\n\t\t\tdie( __(\"You don't have sufficient privileges to access this information!\", 'broken-link-checker') );\r\n\t\t}\r\n\t\t\r\n\t\t//FB::log(\"Loading link details via AJAX\");\r\n\t\t\r\n\t\tif ( isset($_GET['link_id']) ){\r\n\t\t\t//FB::info(\"Link ID found in GET\");\r\n\t\t\t$link_id = intval($_GET['link_id']);\r\n\t\t} else if ( isset($_POST['link_id']) ){\r\n\t\t\t//FB::info(\"Link ID found in POST\");\r\n\t\t\t$link_id = intval($_POST['link_id']);\r\n\t\t} else {\r\n\t\t\t//FB::error('Link ID not specified, you hacking bastard.');\r\n\t\t\tdie( __('Error : link ID not specified', 'broken-link-checker') );\r\n\t\t}\r\n\t\t\r\n\t\t//Load the link. \r\n\t\t$link = new blcLink($link_id);\r\n\t\t\r\n\t\tif ( !$link->is_new ){\r\n\t\t\t//FB::info($link, 'Link loaded');\r\n\t\t\tif ( !class_exists('blcTablePrinter') ){\r\n\t\t\t\trequire dirname($this->loader) . '/includes/admin/table-printer.php';\r\n\t\t\t}\r\n\t\t\tblcTablePrinter::details_row_contents($link);\r\n\t\t\tdie();\r\n\t\t} else {\r\n\t\t\tprintf( __('Failed to load link details (%s)', 'broken-link-checker'), $wpdb->last_error );\r\n\t\t\tdie();\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * Acquire an exclusive lock.\r\n   * If we already hold a lock, it will be released and a new one will be acquired.\r\n   *\r\n   * @return bool\r\n   */\r\n\tfunction acquire_lock(){\r\n\t\treturn WPMutex::acquire('blc_lock');\r\n\t}\r\n\t\r\n  /**\r\n   * Relese our exclusive lock. \r\n   * Does nothing if the lock has already been released.\r\n   *\r\n   * @return bool\r\n   */\r\n\tfunction release_lock(){\r\n\t\treturn WPMutex::release('blc_lock');\r\n\t}\r\n\t\r\n  /**\r\n   * Check if server is currently too overloaded to run the link checker.\r\n   *\r\n   * @return bool\r\n   */\r\n\tfunction server_too_busy(){\r\n\t\tif ( !$this->conf->options['enable_load_limit'] || !isset($this->conf->options['server_load_limit']) ){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\t$loads = blcUtility::get_server_load();\r\n\t\tif ( empty($loads) ){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t$one_minute = floatval(reset($loads));\r\n\t\t\r\n\t\treturn $one_minute > $this->conf->options['server_load_limit'];\r\n\t}\r\n\t\r\n\t/**\r\n\t * Register BLC's Dashboard widget\r\n\t * \r\n\t * @return void\r\n\t */\r\n\tfunction hook_wp_dashboard_setup(){\r\n\t\t$show_widget = current_user_can($this->conf->get('dashboard_widget_capability', 'edit_others_posts'));\r\n\t\tif ( function_exists( 'wp_add_dashboard_widget' ) && $show_widget ) {\r\n\t\t\twp_add_dashboard_widget(\r\n\t\t\t\t'blc_dashboard_widget', \r\n\t\t\t\t__('Broken Link Checker', 'broken-link-checker'), \r\n\t\t\t\tarray( $this, 'dashboard_widget' ),\r\n\t\t\t\tarray( $this, 'dashboard_widget_control' )\r\n\t\t\t );\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * Collect various debugging information and return it in an associative array\r\n   *\r\n   * @return array\r\n   */\r\n\tfunction get_debug_info(){\r\n\t\t/** @var wpdb $wpdb */\r\n\t\tglobal $wpdb;\r\n\r\n\t\t//Collect some information that's useful for debugging \r\n\t\t$debug = array();\r\n\t\t\r\n\t\t//PHP version. Any one is fine as long as WP supports it.\r\n\t\t$debug[ __('PHP version', 'broken-link-checker') ] = array(\r\n\t\t\t'state' => 'ok',\r\n\t\t\t'value' => phpversion(), \r\n\t\t);\r\n\t\t\r\n\t\t//MySQL version\r\n\t\t$debug[ __('MySQL version', 'broken-link-checker') ] = array(\r\n\t\t\t'state' => 'ok',\r\n\t\t\t'value' => $wpdb->db_version(),\r\n\t\t);\r\n\t\t\r\n\t\t//CURL presence and version\r\n\t\tif ( function_exists('curl_version') ){\r\n\t\t\t$version = curl_version();\r\n\t\t\t\r\n\t\t\tif ( version_compare( $version['version'], '7.16.0', '<=' ) ){\r\n\t\t\t\t$data = array(\r\n\t\t\t\t\t'state' => 'warning', \r\n\t\t\t\t\t'value' => $version['version'],\r\n\t\t\t\t\t'message' => __('You have an old version of CURL. Redirect detection may not work properly.', 'broken-link-checker'),\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\t$data = array(\r\n\t\t\t\t\t'state' => 'ok', \r\n\t\t\t\t\t'value' => $version['version'],\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\t$data = array(\r\n\t\t\t\t'state' => 'warning', \r\n\t\t\t\t'value' => __('Not installed', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t}\r\n\t\t$debug[ __('CURL version', 'broken-link-checker') ] = $data;\r\n\t\t\r\n\t\t//Snoopy presence\r\n\t\tif ( class_exists('Snoopy') || file_exists(ABSPATH. WPINC . '/class-snoopy.php') ){\r\n\t\t\t$data = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => __('Installed', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t//No Snoopy? This should never happen, but if it does we *must* have CURL. \r\n\t\t\tif ( function_exists('curl_init') ){\r\n\t\t\t\t$data = array(\r\n\t\t\t\t\t'state' => 'ok',\r\n\t\t\t\t\t'value' => __('Not installed', 'broken-link-checker'),\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\t$data = array(\r\n\t\t\t\t\t'state' => 'error',\r\n\t\t\t\t\t'value' => __('Not installed', 'broken-link-checker'),\r\n\t\t\t\t\t'message' => __('You must have either CURL or Snoopy installed for the plugin to work!', 'broken-link-checker'),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t$debug['Snoopy'] = $data;\r\n\t\t\r\n\t\t//Safe_mode status\r\n\t\tif ( blcUtility::is_safe_mode() ){\r\n\t\t\t$debug['Safe mode'] = array(\r\n\t\t\t\t'state' => 'warning',\r\n\t\t\t\t'value' => __('On', 'broken-link-checker'),\r\n\t\t\t\t'message' => __('Redirects may be detected as broken links when safe_mode is on.', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$debug['Safe mode'] = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => __('Off', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t//Open_basedir status\r\n\t\tif ( blcUtility::is_open_basedir() ){\r\n\t\t\t$debug['open_basedir'] = array(\r\n\t\t\t\t'state' => 'warning',\r\n\t\t\t\t'value' => sprintf( __('On ( %s )', 'broken-link-checker'), ini_get('open_basedir') ),\r\n\t\t\t\t'message' => __('Redirects may be detected as broken links when open_basedir is on.', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$debug['open_basedir'] = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => __('Off', 'broken-link-checker'),\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t//Default PHP execution time limit\r\n\t \t$debug['Default PHP execution time limit'] = array(\r\n\t \t\t'state' => 'ok',\r\n\t \t\t'value' => sprintf(__('%s seconds'), ini_get('max_execution_time')),\r\n\t\t);\r\n\r\n\t\t//Database character set. Usually it's UTF-8. Setting it to something else can cause problems\r\n\t\t//unless the site owner really knows what they're doing.\r\n\t\t$charset = $wpdb->get_charset_collate();\r\n\t\t$debug[ __('Database character set', 'broken-link-checker') ] = array(\r\n\t\t\t'state' => 'ok',\r\n\t\t\t'value' => !empty($charset) ? $charset : '-',\r\n\t\t);\r\n\r\n\t\t//Resynch flag.\r\n\t\t$debug['Resynch. flag'] = array(\r\n\t \t\t'state' => 'ok',\r\n\t \t\t'value' => sprintf('%d', $this->conf->options['need_resynch'] ? '1 (resynch. required)' : '0 (resynch. not required)'),\r\n\t\t);\r\n\t\t\r\n\t\t//Synch records\r\n\t\t$synch_records = intval($wpdb->get_var(\"SELECT COUNT(*) FROM {$wpdb->prefix}blc_synch\"));\r\n\t\t$data = array(\r\n\t \t\t'state' => 'ok',\r\n\t \t\t'value' => sprintf('%d', $synch_records),\r\n\t\t);\r\n\t\tif ( $synch_records == 0 ){\r\n\t\t\t$data['state'] = 'warning';\r\n\t\t\t$data['message'] = __('If this value is zero even after several page reloads you have probably encountered a bug.', 'broken-link-checker');\r\n\t\t}\r\n\t\t$debug['Synch. records'] = $data;\r\n\t\t\r\n\t\t//Total links and instances (including invalid ones)\r\n\t\t$all_links = intval($wpdb->get_var(\"SELECT COUNT(*) FROM {$wpdb->prefix}blc_links\"));\r\n\t\t$all_instances = intval($wpdb->get_var(\"SELECT COUNT(*) FROM {$wpdb->prefix}blc_instances\"));\r\n\t\t\r\n\t\t//Show the number of unparsed containers. Useful for debugging. For performance, \r\n\t\t//this is only shown when we have no links/instances yet.\r\n\t\tif( ($all_links == 0) && ($all_instances == 0) ){\r\n\t\t\t$unparsed_items = intval($wpdb->get_var(\"SELECT COUNT(*) FROM {$wpdb->prefix}blc_synch WHERE synched=0\"));\r\n\t\t\t$debug['Unparsed items'] = array(\r\n\t\t\t\t'state' => 'warning', \r\n\t\t\t\t'value' => $unparsed_items,\r\n\t\t\t);\r\n\t\t} \r\n\t\t\r\n\t\t//Links & instances\r\n\t\tif ( ($all_links > 0) && ($all_instances > 0) ){\r\n\t\t\t$debug['Link records'] = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => sprintf('%d (%d)', $all_links, $all_instances),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$debug['Link records'] = array(\r\n\t\t\t\t'state' => 'warning',\r\n\t\t\t\t'value' => sprintf('%d (%d)', $all_links, $all_instances),\r\n\t\t\t);\r\n\t\t}\t\t\r\n\r\n\t\t//Email notifications.\r\n\t\tif ( $this->conf->options['last_notification_sent'] ) {\r\n\t\t\t$notificationDebug = array(\r\n\t\t\t\t'value' => date('Y-m-d H:i:s T', $this->conf->options['last_notification_sent']),\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$notificationDebug = array(\r\n\t\t\t\t'value' => 'Never',\r\n\t\t\t\t'state' => $this->conf->options['send_email_notifications'] ? 'ok' : 'warning',\r\n\t\t\t);\r\n\t\t}\r\n\t\t$debug['Last email notification'] = $notificationDebug;\r\n\r\n\t\tif ( isset($this->conf->options['last_email']) ) {\r\n\t\t\t$email = $this->conf->options['last_email'];\r\n\t\t\t$debug['Last email sent'] = array(\r\n\t\t\t\t'state' => 'ok',\r\n\t\t\t\t'value' => sprintf(\r\n\t\t\t\t\t'\"%s\" on %s (%s)',\r\n\t\t\t\t\thtmlentities($email['subject']),\r\n\t\t\t\t\tdate('Y-m-d H:i:s T', $email['timestamp']),\r\n\t\t\t\t\t$email['success'] ? 'success' : 'failure'\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\r\n\t\t//Installation log\r\n\t\t$logger = new blcCachedOptionLogger('blc_installation_log');\r\n\t\t$installation_log = $logger->get_messages();\r\n\t\tif ( !empty($installation_log) ){\r\n\t\t\t$debug['Installation log'] = array(\r\n\t\t\t\t'state' => $this->conf->options['installation_complete'] ? 'ok' : 'error',\r\n\t\t\t\t'value' => implode(\"<br>\\n\", $installation_log),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$debug['Installation log'] = array(\r\n\t\t\t\t'state' => 'warning',\r\n\t\t\t\t'value' => 'No installation log found found.',\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn $debug;\r\n\t}\r\n\r\n\tfunction maybe_send_email_notifications() {\r\n\t\tglobal $wpdb; /** @var wpdb $wpdb */\r\n\r\n\t\tif ( !($this->conf->options['send_email_notifications'] || $this->conf->options['send_authors_email_notifications']) ){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Find links that have been detected as broken since the last sent notification.\r\n\t\t$last_notification = date('Y-m-d H:i:s', $this->conf->options['last_notification_sent']);\r\n\t\t$where = $wpdb->prepare('( first_failure >= %s )', $last_notification);\r\n\r\n\t\t$links = blc_get_links(array(\r\n\t\t\t's_filter' => 'broken',\r\n\t\t\t'where_expr' => $where,\r\n\t\t\t'load_instances' => true,\r\n\t\t\t'load_containers' => true,\r\n\t\t\t'load_wrapped_objects' => $this->conf->options['send_authors_email_notifications'],\r\n\t\t\t'max_results' => 0,\r\n\t\t));\r\n\r\n\t\tif ( empty($links) ){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Send the admin/maintainer an email notification.\r\n\t\t$email = $this->conf->get('notification_email_address');\r\n\t\tif ( empty($email) ) {\r\n\t\t\t//Default to the admin email.\r\n\t\t\t$email = get_option('admin_email');\r\n\t\t}\r\n\t\tif ( $this->conf->options['send_email_notifications'] && !empty($email) ) {\r\n\t\t\t$this->send_admin_notification($links, $email);\r\n\t\t}\r\n\r\n\t\t//Send notifications to post authors\r\n\t\tif ( $this->conf->options['send_authors_email_notifications'] ) {\r\n\t\t\t$this->send_authors_notifications($links);\r\n\t\t}\r\n\r\n\t\t$this->conf->options['last_notification_sent'] = time();\r\n\t\t$this->conf->save_options();\r\n\t}\r\n\r\n\tfunction send_admin_notification($links, $email) {\r\n\t\t//Prepare email message\r\n\t\t$subject = sprintf(\r\n\t\t\t__(\"[%s] Broken links detected\", 'broken-link-checker'),\r\n\t\t\thtml_entity_decode(get_option('blogname'), ENT_QUOTES)\r\n\t\t);\r\n\r\n\t\t$body = sprintf(\r\n\t\t\t_n(\r\n\t\t\t\t\"Broken Link Checker has detected %d new broken link on your site.\",\r\n\t\t\t\t\"Broken Link Checker has detected %d new broken links on your site.\",\r\n\t\t\t\tcount($links),\r\n\t\t\t\t'broken-link-checker'\r\n\t\t\t),\r\n\t\t\tcount($links)\r\n\t\t);\r\n\t\t$body .= \"<br>\";\r\n\r\n\t\t$instances = array();\r\n\t\tforeach($links as $link) { /* @var blcLink $link */\r\n\t\t\t$instances = array_merge($instances, $link->get_instances());\r\n\t\t}\r\n\t\t$body .= $this->build_instance_list_for_email($instances);\r\n\r\n\t\tif ( $this->is_textdomain_loaded && is_rtl() ) {\r\n\t\t\t$body = '<div dir=\"rtl\">' . $body . '</div>';\r\n\t\t}\r\n\r\n\t\t$this->send_html_email($email, $subject, $body);\r\n\t}\r\n\r\n\tfunction build_instance_list_for_email($instances, $max_displayed_links = 5, $add_admin_link = true){\r\n\t\tif ( $max_displayed_links === null ) {\r\n\t\t\t$max_displayed_links = 5;\r\n\t\t}\r\n\r\n\t\t$result = '';\r\n\t\tif ( count($instances) > $max_displayed_links ){\r\n\t\t\t$line = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t\"Here's a list of the first %d broken links:\",\r\n\t\t\t\t\t\"Here's a list of the first %d broken links:\",\r\n\t\t\t\t\t$max_displayed_links,\r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\t$max_displayed_links\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$line = __(\"Here's a list of the new broken links: \", 'broken-link-checker');\r\n\t\t}\r\n\r\n\t\t$result .= \"<p>$line</p>\";\r\n\r\n\t\t//Show up to $max_displayed_links broken link instances right in the email.\r\n\t\t$displayed = 0;\r\n\t\tforeach($instances as $instance){ /* @var blcLinkInstance $instance */\r\n\t\t\t$pieces = array(\r\n\t\t\t\tsprintf( __('Link text : %s', 'broken-link-checker'), $instance->ui_get_link_text('email') ),\r\n\t\t\t\tsprintf( __('Link URL : <a href=\"%s\">%s</a>', 'broken-link-checker'), htmlentities($instance->get_url()), blcUtility::truncate($instance->get_url(), 70, '') ),\r\n\t\t\t\tsprintf( __('Source : %s', 'broken-link-checker'), $instance->ui_get_source('email') ),\r\n\t\t\t);\r\n\r\n\t\t\t$link_entry = implode(\"<br>\", $pieces);\r\n\t\t\t$result .= \"$link_entry<br><br>\";\r\n\r\n\t\t\t$displayed++;\r\n\t\t\tif ( $displayed >= $max_displayed_links ){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Add a link to the \"Broken Links\" tab.\r\n\t\tif ( $add_admin_link ) {\r\n\t\t\t$result .= __(\"You can see all broken links here:\", 'broken-link-checker') . \"<br>\";\r\n\t\t\t$result .= sprintf('<a href=\"%1$s\">%1$s</a>', admin_url('tools.php?page=view-broken-links'));\r\n\t\t}\r\n\r\n\t\treturn $result;\r\n\t}\r\n\r\n\tfunction send_html_email($email_address, $subject, $body) {\r\n\t\t//Need to override the default 'text/plain' content type to send a HTML email.\r\n\t\tadd_filter('wp_mail_content_type', array($this, 'override_mail_content_type'));\r\n\r\n\t\t//Let auto-responders and similar software know this is an auto-generated email\r\n\t\t//that they shouldn't respond to.\r\n\t\t$headers = array('Auto-Submitted: auto-generated');\r\n\r\n\t\t$success = wp_mail($email_address, $subject, $body, $headers);\r\n\r\n\t\t//Remove the override so that it doesn't interfere with other plugins that might\r\n\t\t//want to send normal plaintext emails.\r\n\t\tremove_filter('wp_mail_content_type', array($this, 'override_mail_content_type'));\r\n\r\n\t\t$this->conf->options['last_email'] = array(\r\n\t\t\t'subject' => $subject,\r\n\t\t\t'timestamp' => time(),\r\n\t\t\t'success'    => $success,\r\n\t\t);\r\n\t\t$this->conf->save_options();\r\n\r\n\t\treturn $success;\r\n\t}\r\n\r\n\tfunction send_authors_notifications($links) {\r\n\t\t$authorInstances = array();\r\n\t\tforeach($links as $link){ /* @var blcLink $link */\r\n\t\t\tforeach($link->get_instances() as $instance){ /* @var blcLinkInstance $instance */\r\n\t\t\t\t$container = $instance->get_container(); /** @var blcContainer $container */\r\n\t\t\t\tif ( empty($container) || !($container instanceof blcAnyPostContainer) ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t$post = $container->get_wrapped_object(); /** @var StdClass $post */\r\n\t\t\t\tif ( !array_key_exists($post->post_author, $authorInstances) ) {\r\n\t\t\t\t\t$authorInstances[$post->post_author] = array();\r\n\t\t\t\t}\r\n\t\t\t\t$authorInstances[$post->post_author][] = $instance;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tforeach($authorInstances as $author_id => $instances) {\r\n\t\t\t$subject = sprintf(\r\n\t\t\t\t__(\"[%s] Broken links detected\", 'broken-link-checker'),\r\n\t\t\t\thtml_entity_decode(get_option('blogname'), ENT_QUOTES)\r\n\t\t\t);\r\n\r\n\t\t\t$body = sprintf(\r\n\t\t\t\t_n(\r\n\t\t\t\t\t\"Broken Link Checker has detected %d new broken link in your posts.\",\r\n\t\t\t\t\t\"Broken Link Checker has detected %d new broken links in your posts.\",\r\n\t\t\t\t\tcount($instances),\r\n\t\t\t\t\t'broken-link-checker'\r\n\t\t\t\t),\r\n\t\t\t\tcount($instances)\r\n\t\t\t);\r\n\t\t\t$body .= \"<br>\";\r\n\r\n\t\t\t$author = get_user_by('id', $author_id); /** @var WP_User $author */\r\n\t\t\t$body .= $this->build_instance_list_for_email($instances, null, $author->has_cap('edit_others_posts'));\r\n\r\n\t\t\tif ( $this->is_textdomain_loaded && is_rtl() ) {\r\n\t\t\t\t$body = '<div dir=\"rtl\">' . $body . '</div>';\r\n\t\t\t}\r\n\r\n\t\t\t$this->send_html_email($author->user_email, $subject, $body);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction override_mail_content_type(/** @noinspection PhpUnusedParameterInspection */ $content_type){\r\n\t\treturn 'text/html';\r\n\t}\r\n\r\n\t/**\r\n\t * Promote all links with the \"warning\" status to \"broken\".\r\n\t */\r\n\tprivate function promote_warnings_to_broken() {\r\n\t\tglobal $wpdb; /** @var wpdb $wpdb */\r\n\t\t$wpdb->update(\r\n\t\t\t$wpdb->prefix . 'blc_links',\r\n\t\t\tarray(\r\n\t\t\t\t'broken'  => 1,\r\n\t\t\t\t'warning' => 0,\r\n\t\t\t),\r\n\t\t\tarray(\r\n\t\t\t\t'warning' => 1,\r\n\t\t\t),\r\n\t\t\t'%d'\r\n\t\t);\r\n\t}\r\n\t\r\n  /**\r\n   * Install or uninstall the plugin's Cron events based on current settings.\r\n   *\r\n   * @uses wsBrokenLinkChecker::$conf Uses $conf->options to determine if events need to be (un)installed.  \r\n   *\r\n   * @return void\r\n   */\r\n\tfunction setup_cron_events(){\r\n\t\t//Link monitor\r\n        if ( $this->conf->options['run_via_cron'] ){\r\n            if (!wp_next_scheduled('blc_cron_check_links')) {\r\n\t\t\t\twp_schedule_event( time(), 'hourly', 'blc_cron_check_links' );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\twp_clear_scheduled_hook('blc_cron_check_links');\r\n\t\t}\r\n\t\t\r\n\t\t//Email notifications about broken links\r\n\t\tif ( $this->conf->options['send_email_notifications'] || $this->conf->options['send_authors_email_notifications'] ){\r\n\t\t\tif ( !wp_next_scheduled('blc_cron_email_notifications') ){\r\n\t\t\t\twp_schedule_event(time(), $this->conf->options['notification_schedule'], 'blc_cron_email_notifications');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\twp_clear_scheduled_hook('blc_cron_email_notifications');\r\n\t\t}\r\n\t\t\r\n\t\t//Run database maintenance every two weeks or so\r\n\t\tif ( !wp_next_scheduled('blc_cron_database_maintenance') ){\r\n\t\t\twp_schedule_event(time(), 'bimonthly', 'blc_cron_database_maintenance');\r\n\t\t}\r\n\t\t\r\n\t\t//Check for news notices related to this plugin\r\n\t\tif ( !wp_next_scheduled('blc_cron_check_news') ){\r\n\t\t\twp_schedule_event(time(), 'daily', 'blc_cron_check_news');\r\n\t\t}\r\n\t} \r\n\t\r\n  /**\r\n   * Load the plugin's textdomain.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction load_language(){\r\n\t\t$this->is_textdomain_loaded = load_plugin_textdomain( 'broken-link-checker', false, basename(dirname($this->loader)) . '/languages' );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if there's a \"news\" link to display on the plugin's pages.\r\n\t * \r\n\t * @return void\r\n\t */\r\n\tfunction check_news(){\r\n\t\t$url = 'http://w-shadow.com/plugin-news/broken-link-checker-news.txt';\r\n\t\t\r\n\t\t//Retrieve the appropriate \"news\" file\r\n\t\t$res = wp_remote_get($url);\r\n\t\tif ( is_wp_error($res) ){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t//Anything there?\r\n\t\tif ( isset($res['response']['code']) && ($res['response']['code'] == 200) && isset($res['body']) ) {\r\n\t\t\t//The file should contain two lines - a title and an URL\r\n\t\t\t$news = explode(\"\\n\", trim($res['body']));\r\n\t\t\tif ( count($news) == 2 ){\r\n\t\t\t\t//Save for later. \r\n\t\t\t\t$this->conf->options['plugin_news'] = $news;\r\n\t\t\t} else {\r\n\t\t\t\t$this->conf->options['plugin_news'] = null;\r\n\t\t\t}\r\n\t\t\t$this->conf->save_options();\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tprotected static function get_default_log_directory() {\r\n\t\t$uploads = wp_upload_dir();\r\n\t\treturn $uploads['basedir'] . '/broken-link-checker';\r\n\t}\r\n\r\n\tprotected static function get_default_log_basename() {\r\n\t\treturn 'blc-log.txt';\r\n\t}\r\n\r\n}//class ends here\r\n\r\n} // if class_exists...\r\n", "<?php\r\n\r\n/**\r\n * The manager to rule all (post) managers.\r\n * \r\n * This class dynamically registers container modules for the available post types\r\n * (including custom post types) and does stuff that pertain to all of them, such \r\n * as handling save/delete hooks and (re)creating synch records.\r\n * \r\n * @package Broken Link Checker\r\n * @author Janis Elsts\r\n * @access private\r\n */\r\nclass blcPostTypeOverlord {\r\n\tpublic $enabled_post_types = array();  //Post types currently selected for link checking\r\n\tpublic $enabled_post_statuses = array('publish'); //Only posts that have one of these statuses shall be checked\r\n\t \r\n\tvar $plugin_conf;  \r\n\tvar $resynch_already_done = false;\r\n\t\r\n  /**\r\n   * Class \"constructor\". Can't use an actual constructor due to how PHP4 handles object references.\r\n   * \r\n   * Specifically, this class is a singleton. The function needs to pass $this to several other \r\n   * functions (to set up hooks), which will store the reference for later use. However, it appears \r\n   * that in PHP4 the actual value of $this is thrown away right after the constructor finishes, and\r\n   * `new` returns a *copy* of $this. The result is that getInstance() won't be returning a ref.\r\n   * to the same object as is used for hook callbacks. And that's horrible.   \r\n   * \r\n   * Sets up hooks that monitor added/modified/deleted posts and registers\r\n   * virtual modules for all post types.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction init(){\r\n \t\t$this->plugin_conf = blc_get_configuration();\r\n \t\t\r\n \t\tif ( isset($this->plugin_conf->options['enabled_post_statuses']) ){\r\n \t\t\t$this->enabled_post_statuses = $this->plugin_conf->options['enabled_post_statuses'];\r\n \t\t}\r\n\t\t\r\n\t\t//Register a virtual container module for each enabled post type\r\n\t\t$module_manager = blcModuleManager::getInstance();\r\n\t\t\r\n\t\t$post_types = get_post_types(array(), 'objects');\r\n\t\t$exceptions = array('revision', 'nav_menu_item', 'attachment');\r\n\r\n\t\tforeach($post_types as $data){\r\n\t\t\t$post_type = $data->name;\r\n\t\t\t\r\n\t\t\tif ( in_array($post_type, $exceptions) ){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$module_manager->register_virtual_module(\r\n\t\t\t\t$post_type,\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'Name' => $data->labels->name,\r\n\t\t\t\t\t'ModuleCategory' => 'container',\r\n\t\t\t\t\t'ModuleContext' => 'all',\r\n\t\t\t\t\t'ModuleClassName' => 'blcAnyPostContainerManager',\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\t\r\n\t\t\r\n\t\t//These hooks update the synch & instance records when posts are added, deleted or modified.\r\n\t\tadd_action('delete_post', array(&$this,'post_deleted'));\r\n        add_action('save_post', array(&$this,'post_saved'));\r\n        //We also treat post trashing/untrashing as delete/save. \r\n        add_action('trash_post', array(&$this,'post_deleted'));\r\n        add_action('untrash_post', array(&$this,'post_saved'));\r\n        \r\n        //Highlight and nofollow broken links in posts & pages\r\n        if ( $this->plugin_conf->options['mark_broken_links'] || $this->plugin_conf->options['nofollow_broken_links'] ){\r\n        \tadd_filter( 'the_content', array(&$this, 'hook_the_content') );\r\n        \tif ( $this->plugin_conf->options['mark_broken_links'] && !empty( $this->plugin_conf->options['broken_link_css'] ) ){\r\n\t            add_action( 'wp_head', array(&$this,'hook_wp_head') );\r\n\t\t\t}\r\n        }\r\n\t}\t\r\n\t\r\n\t/**\r\n\t * Retrieve an instance of the overlord class.\r\n\t * \r\n\t * @return blcPostTypeOverlord\r\n\t */\r\n\tstatic function getInstance(){\r\n\t\tstatic $instance = null;\r\n\t\tif ( is_null($instance) ){\r\n\t\t\t$instance = new blcPostTypeOverlord;\r\n\t\t\t$instance->init();\r\n\t\t}\r\n\t\treturn $instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Notify the overlord that a post type is active.\r\n\t * \r\n\t * Called by individual instances of blcAnyPostContainerManager to let \r\n\t * the overlord know that they've been created. Since a module instance \r\n\t * is only created if the module is active, this event indicates that\r\n\t * the user has enabled the corresponding post type for link checking.\r\n\t * \r\n\t * @param string $post_type\r\n\t * @return void\r\n\t */\r\n\tfunction post_type_enabled($post_type){\r\n\t\tif ( !in_array($post_type, $this->enabled_post_types) ){\r\n\t\t\t$this->enabled_post_types[] = $post_type;\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * Remove the synch. record and link instances associated with a post when it's deleted \r\n   *\r\n   * @param int $post_id\r\n   * @return void\r\n   */\r\n\tfunction post_deleted($post_id){\r\n\t\t//Get the container type matching the type of the deleted post\r\n\t\t$post = get_post($post_id);\r\n\t\tif ( !$post ){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//Get the associated container object\r\n\t\t$post_container = blcContainerHelper::get_container( array($post->post_type, intval($post_id)) );\r\n\t\t\r\n\t\tif ( $post_container ){\r\n\t\t\t//Delete it\r\n\t\t\t$post_container->delete();\r\n\t\t\t//Clean up any dangling links\r\n\t\t\tblc_cleanup_links();\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * When a post is saved or modified, mark it as unparsed.\r\n   * \r\n   * @param int $post_id\r\n   * @return void\r\n   */\r\n\tfunction post_saved($post_id){\r\n\t\t//Get the container type matching the type of the deleted post\r\n\t\t$post = get_post($post_id);\r\n\t\tif ( !$post ){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n        //Only check links in currently enabled post types\r\n        if ( !in_array($post->post_type, $this->enabled_post_types) ) return;\r\n\t\t\r\n        //Only check posts that have one of the allowed statuses\r\n        if ( !in_array($post->post_status, $this->enabled_post_statuses) ) return;\r\n        \r\n    \t//Get the container & mark it as unparsed\r\n\t\t$args = array($post->post_type, intval($post_id));\r\n\t\t$post_container = blcContainerHelper::get_container( $args );\r\n\r\n        $post_container->mark_as_unsynched();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Create or update synchronization records for all posts.\r\n\t *\r\n\t * @param string $container_type\r\n\t * @param bool $forced If true, assume that all synch. records are gone and will need to be recreated from scratch.\r\n\t * @return void\r\n\t */\r\n\tfunction resynch($container_type = '', $forced = false){\r\n\t\tglobal $wpdb; /** @var wpdb $wpdb */\r\n\t\tglobal $blclog;\r\n\t\t\r\n\t\t//Resynch is expensive in terms of DB performance. Thus we only do it once, processing\r\n\t\t//all post types in one go and ignoring any further resynch requests during this pageload.\r\n\t\t//BUG: This might be a problem if there ever is an actual need to run resynch twice or \r\n\t\t//more per pageload.\r\n\t\tif ( $this->resynch_already_done ){\r\n\t\t\t$blclog->log(sprintf('...... Skipping \"%s\" resyncyh since all post types were already synched.', $container_type));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( empty($this->enabled_post_types) ){\r\n\t\t\t$blclog->warn(sprintf('...... Skipping \"%s\" resyncyh since no post types are enabled.', $container_type));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t$escaped_post_types = array_map('esc_sql', $this->enabled_post_types);\r\n\t\t$escaped_post_statuses = array_map('esc_sql', $this->enabled_post_statuses);\r\n\t\t\r\n\t\tif ( $forced ){\r\n\t\t\t//Create new synchronization records for all posts. \r\n\t\t\t$blclog->log('...... Creating synch records for these post types: '.implode(', ', $escaped_post_types) . ' that have one of these statuses: ' . implode(', ', $escaped_post_statuses));\r\n\t\t\t$start = microtime(true);\r\n\t    \t$q = \"INSERT INTO {$wpdb->prefix}blc_synch(container_id, container_type, synched)\r\n\t\t\t\t  SELECT posts.id, posts.post_type, 0\r\n\t\t\t\t  FROM {$wpdb->posts} AS posts\r\n\t\t\t\t  WHERE\r\n\t\t\t\t  \tposts.post_status IN (%s)\r\n\t \t\t\t\tAND posts.post_type IN (%s)\";\r\n\t\t\t$q = sprintf(\r\n\t\t\t\t$q,\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_statuses) . \"'\",\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_types) . \"'\"\r\n\t\t\t);\r\n\t \t\t$wpdb->query( $q );\r\n\t \t\t$blclog->log(sprintf('...... %d rows inserted in %.3f seconds', $wpdb->rows_affected, microtime(true) - $start));\r\n \t\t} else {\r\n \t\t\t//Delete synch records corresponding to posts that no longer exist.\r\n \t\t\t$blclog->log('...... Deleting synch records for removed posts');\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$q = \"DELETE synch.*\r\n\t\t\t\t  FROM \r\n\t\t\t\t\t {$wpdb->prefix}blc_synch AS synch LEFT JOIN {$wpdb->posts} AS posts\r\n\t\t\t\t\t ON posts.ID = synch.container_id\r\n\t\t\t\t  WHERE \r\n\t\t\t\t\t synch.container_type IN (%s) AND posts.ID IS NULL\";\r\n\t\t\t$q = sprintf(\r\n\t\t\t\t$q,\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_types) . \"'\"\r\n\t\t\t);\r\n\t\t\t$wpdb->query( $q );\r\n\t\t\t$elapsed = microtime(true) - $start;\r\n\t\t\t$blclog->debug($q);\r\n\t\t\t$blclog->log(sprintf('...... %d rows deleted in %.3f seconds', $wpdb->rows_affected, $elapsed));\r\n\r\n\t\t\t//Delete records where the post status is not one of the enabled statuses.\r\n\t\t\t$blclog->log('...... Deleting synch records for posts that have a disallowed status');\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$q = \"DELETE synch.*\r\n\t\t\t\t  FROM\r\n\t\t\t\t\t {$wpdb->prefix}blc_synch AS synch\r\n\t\t\t\t\t LEFT JOIN {$wpdb->posts} AS posts\r\n\t\t\t\t\t ON (synch.container_id = posts.ID and synch.container_type = posts.post_type)\r\n\t\t\t\t  WHERE\r\n\t\t\t\t\t posts.post_status NOT IN (%s)\";\r\n\t\t\t$q = sprintf(\r\n\t\t\t\t$q,\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_statuses) . \"'\"\r\n\t\t\t);\r\n\t\t\t$wpdb->query( $q );\r\n\t\t\t$elapsed = microtime(true) - $start;\r\n\t\t\t$blclog->debug($q);\r\n\t\t\t$blclog->log(sprintf('...... %d rows deleted in %.3f seconds', $wpdb->rows_affected, $elapsed));\r\n\r\n\t\t\t//Remove the 'synched' flag from all posts that have been updated\r\n\t\t\t//since the last time they were parsed/synchronized.\r\n\t\t\t$blclog->log('...... Marking changed posts as unsynched');\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$q = \"UPDATE\r\n\t\t\t\t\t{$wpdb->prefix}blc_synch AS synch\r\n\t\t\t\t\tJOIN {$wpdb->posts} AS posts ON (synch.container_id = posts.ID and synch.container_type=posts.post_type)\r\n\t\t\t\t  SET \r\n\t\t\t\t\tsynched = 0\r\n\t\t\t\t  WHERE\r\n\t\t\t\t\tsynch.last_synch < posts.post_modified\";\r\n\t\t\t$wpdb->query( $q );\r\n\t\t\t$elapsed = microtime(true) - $start;\r\n\t\t\t$blclog->debug($q);\r\n\t\t\t$blclog->log(sprintf('...... %d rows updated in %.3f seconds', $wpdb->rows_affected, $elapsed));\r\n\t\t\t\r\n\t\t\t//Create synch. records for posts that don't have them.\r\n\t\t\t$blclog->log('...... Creating synch records for new posts');\r\n\t\t\t$start = microtime(true);\r\n\t\t\t$q = \"INSERT INTO {$wpdb->prefix}blc_synch(container_id, container_type, synched)\r\n\t\t\t\t  SELECT posts.id, posts.post_type, 0\r\n\t\t\t\t  FROM \r\n\t\t\t\t    {$wpdb->posts} AS posts LEFT JOIN {$wpdb->prefix}blc_synch AS synch\r\n\t\t\t\t\tON (synch.container_id = posts.ID and synch.container_type=posts.post_type)  \r\n\t\t\t\t  WHERE\r\n\t\t\t\t  \tposts.post_status IN (%s)\r\n\t \t\t\t\tAND posts.post_type IN (%s)\r\n\t\t\t\t\tAND synch.container_id IS NULL\";\r\n\t\t\t$q = sprintf(\r\n\t\t\t\t$q,\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_statuses) . \"'\",\r\n\t\t\t\t\"'\" . implode(\"', '\", $escaped_post_types) . \"'\"\r\n\t\t\t);\r\n\t\t\t$wpdb->query($q);\r\n\t\t\t$elapsed = microtime(true) - $start;\r\n\t\t\t$blclog->debug($q);\r\n\t\t\t$blclog->log(sprintf('...... %d rows inserted in %.3f seconds', $wpdb->rows_affected, $elapsed));\r\n\t\t}\r\n\t\t\r\n\t\t$this->resynch_already_done = true;\r\n\t}\r\n\t\r\n  /**\r\n   * Hook for the 'the_content' filter. Scans the current post and adds the 'broken_link' \r\n   * CSS class to all links that are known to be broken. Currently works only on standard\r\n   * HTML links (i.e. the '<a href=...' kind). \r\n   *\r\n   * @param string $content Post content\r\n   * @return string Modified post content.\r\n   */\r\n\tfunction hook_the_content($content){\r\n\t\tglobal $post, $wpdb; /** @var wpdb $wpdb */\r\n        if ( empty($post) || !in_array($post->post_type, $this->enabled_post_types)) {\r\n        \treturn $content;\r\n       \t}\r\n        \r\n        //Retrieve info about all occurrences of broken links in the current post\r\n        $q = \"\r\n\t\t\tSELECT instances.raw_url\r\n\t\t\tFROM {$wpdb->prefix}blc_instances AS instances JOIN {$wpdb->prefix}blc_links AS links \r\n\t\t\t\tON instances.link_id = links.link_id\r\n\t\t\tWHERE \r\n\t\t\t\tinstances.container_type = %s\r\n\t\t\t\tAND instances.container_id = %d\r\n\t\t\t\tAND links.broken = 1\r\n\t\t\t\tAND parser_type = 'link' \r\n\t\t\";\r\n\t\t$q = $wpdb->prepare($q, $post->post_type, $post->ID);\r\n\t\t$links = $wpdb->get_results($q, ARRAY_A);\r\n\t\t\r\n\t\t//Return the content unmodified if there are no broken links in this post.\r\n\t\tif ( empty($links) || !is_array($links) ){\r\n\t\t\treturn $content;\r\n\t\t}\r\n\t\t\t\t\r\n\t\t//Put the broken link URLs in an array\r\n\t\t$broken_link_urls = array();\r\n\t\tforeach($links as $link){\r\n\t\t\t$broken_link_urls[] = $link['raw_url'];\r\n\t\t}\r\n\t\t\r\n        //Iterate over all HTML links and modify the broken ones\r\n\t\tif ( $parser = blcParserHelper::get_parser('link') ){\r\n\t\t\t$content = $parser->multi_edit($content, array(&$this, 'highlight_broken_link'), $broken_link_urls);\r\n\t\t}\r\n\t\t\r\n\t\treturn $content;\r\n\t}\r\n\t\r\n  /**\r\n   * Analyse a link and add 'broken_link' CSS class if the link is broken.\r\n   *\r\n   * @see blcHtmlLink::multi_edit() \r\n   *\r\n   * @param array $link Associative array of link data.\r\n   * @param array $broken_link_urls List of broken link URLs present in the current post.\r\n   * @return array|string The modified link\r\n   */\r\n\tfunction highlight_broken_link($link, $broken_link_urls){\r\n\t\tif ( !in_array($link['href'], $broken_link_urls) ){\r\n\t\t\t//Link not broken = return the original link tag\r\n\t\t\treturn $link['#raw'];\r\n\t\t}\r\n\t\t\r\n\t\t//Add 'broken_link' to the 'class' attribute (unless already present).\r\n\t\tif ( $this->plugin_conf->options['mark_broken_links'] ){\r\n\t\t\tif ( isset($link['class']) ){\r\n\t\t\t\t$classes = explode(' ', $link['class']);\r\n\t\t\t\tif ( !in_array('broken_link', $classes) ){\r\n\t\t\t\t\t$classes[] = 'broken_link';\r\n\t\t\t\t\t$link['class'] = implode(' ', $classes);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$link['class'] = 'broken_link';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//Nofollow the link (unless it's already nofollow'ed)\r\n\t\tif ( $this->plugin_conf->options['nofollow_broken_links'] ){\r\n\t\t\tif ( isset($link['rel']) ){\r\n\t\t\t\t$relations = explode(' ', $link['rel']);\r\n\t\t\t\tif ( !in_array('nofollow', $relations) ){\r\n\t\t\t\t\t$relations[] = 'nofollow';\r\n\t\t\t\t\t$link['rel'] = implode(' ', $relations);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$link['rel'] = 'nofollow';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn $link;\r\n\t}\r\n\t\r\n  /**\r\n   * A hook for the 'wp_head' action. Outputs the user-defined broken link CSS.\r\n   *\r\n   * @return void\r\n   */\r\n\tfunction hook_wp_head(){\r\n\t\techo '<style type=\"text/css\">',$this->plugin_conf->options['broken_link_css'],'</style>';\r\n\t}\r\n}\r\n\r\n//Start up the post overlord\r\nblcPostTypeOverlord::getInstance();\r\n\r\n\r\n/**\r\n * Universal container item class used for all post types.\r\n * \r\n * @package Broken Link Checker\r\n * @author Janis Elsts\r\n * @access public\r\n */\r\nclass blcAnyPostContainer extends blcContainer {\r\n\tvar $default_field = 'post_content';\r\n\t\r\n  /**\r\n   * Get action links for this post.\r\n   *\r\n   * @param string $container_field Ignored.\r\n   * @return array of action link HTML.\r\n   */\r\n\tfunction ui_get_action_links($container_field = ''){\r\n\t\t$actions = array();\r\n\t\t\r\n\t\t//Fetch the post (it should be cached already)\r\n\t\t$post = $this->get_wrapped_object();\r\n\t\tif ( !$post ){\r\n\t\t\treturn $actions;\r\n\t\t}\r\n\t\t\r\n\t\t$post_type_object = get_post_type_object($post->post_type);\r\n\t\t\r\n\t\t//Each post type can have its own cap requirements\r\n\t\tif ( current_user_can( $post_type_object->cap->edit_post, $this->container_id ) ){\r\n\t\t\t$actions['edit'] = sprintf(\r\n\t\t\t\t'<span class=\"edit\"><a href=\"%s\" title=\"%s\">%s</a>',\r\n\t\t\t\t$this->get_edit_url(),\r\n\t\t\t\t$post_type_object->labels->edit_item,\r\n\t\t\t\t__('Edit')\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t//Trash/Delete link\r\n\t\t\tif ( current_user_can( $post_type_object->cap->delete_post, $this->container_id ) ){\r\n\t\t\t\tif ( $this->can_be_trashed() ) { \r\n\t\t\t\t\t$actions['trash'] = sprintf(\r\n\t\t\t\t\t\t\"<span class='trash'><a class='submitdelete' title='%s' href='%s'>%s</a>\",\r\n\t\t\t\t\t\tesc_attr(__('Move this item to the Trash')),\r\n\t\t\t\t\t\tesc_attr(get_delete_post_link($this->container_id, '', false)),\r\n\t\t\t\t\t\t__('Trash')\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$actions['delete'] = sprintf(\r\n\t\t\t\t\t\t\"<span><a class='submitdelete' title='%s' href='%s'>%s</a>\",\r\n\t\t\t\t\t\tesc_attr(__('Delete this item permanently')),\r\n\t\t\t\t\t\tesc_attr(get_delete_post_link($this->container_id, '', true)),\r\n\t\t\t\t\t\t__('Delete')\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//View/Preview link\r\n\t\t$title = get_the_title($this->container_id);\r\n\t\tif ( in_array($post->post_status, array('pending', 'draft')) ) {\r\n\t\t\tif ( current_user_can($post_type_object->cap->edit_post, $this->container_id) ){\r\n\t\t\t\t$actions['view'] = sprintf(\r\n\t\t\t\t\t'<span class=\"view\"><a href=\"%s\" title=\"%s\" rel=\"permalink\">%s</a>',\r\n\t\t\t\t\tesc_url( add_query_arg( 'preview', 'true', get_permalink($this->container_id) ) ),\r\n\t\t\t\t\tesc_attr(sprintf(__('Preview &#8220;%s&#8221;'), $title)),\r\n\t\t\t\t\t__('Preview')\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} elseif ( 'trash' != $post->post_status ) {\r\n\t\t\t$actions['view'] = sprintf(\r\n\t\t\t\t'<span class=\"view\"><a href=\"%s\" title=\"%s\" rel=\"permalink\">%s</a>',\r\n\t\t\t\tesc_url( get_permalink($this->container_id) ),\r\n\t\t\t\tesc_attr(sprintf(__('View &#8220;%s&#8221;'), $title)),\r\n\t\t\t\t__('View')\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn $actions;\r\n\t}\r\n\t\r\n  /**\r\n   * Get the HTML for displaying the post title in the \"Source\" column.\r\n   *\r\n   * @param string $container_field Ignored.\r\n   * @param string $context How to filter the output. Optional, defaults to 'display'. \r\n   * @return string HTML\r\n   */\r\n\tfunction ui_get_source($container_field = '', $context = 'display'){\r\n\t\t$source = '<a class=\"row-title\" href=\"%s\" title=\"%s\">%s</a>';\r\n\t\t$source = sprintf(\r\n\t\t\t$source,\r\n\t\t\t$this->get_edit_url(),\r\n\t\t\tesc_attr(__('Edit this item')),\r\n\t\t\tget_the_title($this->container_id)\r\n\t\t);\r\n\t\t\r\n\t\treturn $source;\r\n\t}\r\n\t\r\n  /**\r\n   * Get edit URL for this container. Returns the URL of the Dashboard page where the item \r\n   * associated with this container can be edited.\r\n   *\r\n   * @access protected   \r\n   *\r\n   * @return string\r\n   */\r\n\tfunction get_edit_url(){\r\n\t\t/*\r\n\t\tThe below is a near-exact copy of the get_post_edit_link() function.  \r\n\t\tUnfortunately we can't just call that function because it has a hardcoded \r\n\t\tcaps-check which fails when called from the email notification script \r\n\t\texecuted by Cron.\r\n\t\t*/ \r\n\t\t\r\n\t\tif ( !$post = $this->get_wrapped_object() ){\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\t\r\n\t\t$context = 'display';\r\n\t\t$action = '&amp;action=edit';\r\n\t\t\t\r\n\t\t$post_type_object = get_post_type_object( $post->post_type );\r\n\t\tif ( !$post_type_object ){\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\t\r\n\t\treturn apply_filters( 'get_edit_post_link', admin_url( sprintf($post_type_object->_edit_link . $action, $post->ID) ), $post->ID, $context );\r\n\t}\r\n\t\r\n  /**\r\n   * Retrieve the post associated with this container. \r\n   *\r\n   * @access protected\r\n   *\r\n   * @param bool $ensure_consistency Set this to true to ignore the cached $wrapped_object value and retrieve an up-to-date copy of the wrapped object from the DB (or WP's internal cache).\r\n   * @return object Post data.\r\n   */\r\n\tfunction get_wrapped_object($ensure_consistency = false){\r\n\t\tif( $ensure_consistency || is_null($this->wrapped_object) ){\r\n\t\t\t$this->wrapped_object = get_post($this->container_id);\r\n\t\t}\t\t\r\n\t\treturn $this->wrapped_object;\r\n\t}\r\n\r\n  /**\r\n   * Update the post associated with this container.\r\n   *\r\n   * @access protected\r\n   *\r\n   * @return bool|WP_Error True on success, an error if something went wrong.\r\n   */\r\n\tfunction update_wrapped_object(){\r\n\t\tif ( is_null($this->wrapped_object) ){\r\n\t\t\treturn new WP_Error(\r\n\t\t\t\t'no_wrapped_object',\r\n\t\t\t\t__('Nothing to update', 'broken-link-checker')\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t$post_id = wp_update_post($this->wrapped_object, true);\r\n\t\tif ( is_wp_error($post_id) ) {\r\n\t\t\treturn $post_id;\r\n\t\t} else if ( $post_id == 0 ){\r\n\t\t\treturn new WP_Error(\r\n\t\t\t\t'update_failed',\r\n\t\t\t\tsprintf(__('Updating post %d failed', 'broken-link-checker'), $this->container_id)\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n  /**\r\n   * Get the base URL of the container. For posts, the post permalink is used\r\n   * as the base URL when normalizing relative links.\r\n   *\r\n   * @return string\r\n   */\r\n\tfunction base_url(){\r\n\t\treturn get_permalink($this->container_id);\r\n\t}\r\n\t\r\n  /**\r\n   * Delete or trash the post corresponding to this container.\r\n   * Will always move to trash instead of deleting if trash is enabled.\r\n   *\r\n   * @return bool|WP_error\r\n   */\r\n\tfunction delete_wrapped_object(){\r\n\t\t//Note that we don't need to delete the synch record and instances here - \r\n\t\t//wp_delete_post()/wp_trash_post() will run the post_delete/trash hook, \r\n\t\t//which will be caught by blcPostContainerManager, which will in turn \r\n\t\t//delete anything that needs to be deleted.\r\n\t\tif ( EMPTY_TRASH_DAYS ){\r\n\t\t\treturn $this->trash_wrapped_object();\r\n\t\t} else {\r\n\t\t\tif ( wp_delete_post($this->container_id, true) ){\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn new WP_Error(\r\n\t\t\t\t\t'delete_failed',\r\n\t\t\t\t\tsprintf(\r\n\t\t\t\t\t\t__('Failed to delete post \"%s\" (%d)', 'broken-link-checker'),\r\n\t\t\t\t\t\tget_the_title($this->container_id),\r\n\t\t\t\t\t\t$this->container_id\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Move the post corresponding to this container to the Trash.\r\n\t * \r\n\t * @return bool|WP_Error\r\n\t */\r\n\tfunction trash_wrapped_object(){\r\n\t\tif ( !EMPTY_TRASH_DAYS ){\r\n\t\t\treturn new WP_Error(\r\n\t\t\t\t'trash_disabled',\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t__('Can\\'t move post \"%s\" (%d) to the trash because the trash feature is disabled', 'broken-link-checker'),\r\n\t\t\t\t\tget_the_title($this->container_id),\r\n\t\t\t\t\t$this->container_id\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t$post = get_post($this->container_id);\r\n\t\tif ( $post->post_status == 'trash' ){\r\n\t\t\t//Prevent conflicts between post and custom field containers trying to trash the same post.\r\n\t\t\t//BUG: Post and custom field containers shouldn't wrap the same object\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif ( wp_trash_post($this->container_id) ){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn new WP_Error(\r\n\t\t\t\t'trash_failed',\r\n\t\t\t\tsprintf(\r\n\t\t\t\t\t__('Failed to move post \"%s\" (%d) to the trash', 'broken-link-checker'),\r\n\t\t\t\t\tget_the_title($this->container_id),\r\n\t\t\t\t\t$this->container_id\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if the current user can delete/trash this post.\r\n\t * \r\n\t * @return bool\r\n\t */\r\n\tfunction current_user_can_delete(){\r\n\t\t$post = $this->get_wrapped_object();\r\n\t\t$post_type_object = get_post_type_object($post->post_type);\r\n\t\treturn current_user_can( $post_type_object->cap->delete_post, $this->container_id );\r\n\t}\r\n\t\r\n\tfunction can_be_trashed(){\r\n\t\treturn defined('EMPTY_TRASH_DAYS') && EMPTY_TRASH_DAYS;\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Universal manager usable for most post types.\r\n * \r\n * @package Broken Link Checker\r\n * @access public\r\n */\r\nclass blcAnyPostContainerManager extends blcContainerManager {\r\n\tvar $container_class_name = 'blcAnyPostContainer';\r\n\tvar $fields = array('post_content' => 'html');\r\n\t\r\n\tfunction init(){\r\n\t\tparent::init();\r\n\r\n\t\t//Notify the overlord that the post/container type that this instance is \r\n\t\t//responsible for is enabled.\r\n\t\t$overlord = blcPostTypeOverlord::getInstance();\r\n\t\t$overlord->post_type_enabled($this->container_type); \r\n\t}\r\n\t\r\n  /**\r\n   * Instantiate multiple containers of the container type managed by this class.\r\n   *\r\n   * @param array $containers Array of assoc. arrays containing container data.\r\n   * @param string $purpose An optional code indicating how the retrieved containers will be used.\r\n   * @param bool $load_wrapped_objects Preload wrapped objects regardless of purpose. \r\n   * \r\n   * @return array of blcPostContainer indexed by \"container_type|container_id\"\r\n   */\r\n\tfunction get_containers($containers, $purpose = '', $load_wrapped_objects = false){\r\n\t\t$containers = $this->make_containers($containers);\r\n\t\t\r\n\t\t//Preload post data if it is likely to be useful later\r\n\t\t$preload = $load_wrapped_objects || in_array($purpose, array(BLC_FOR_DISPLAY, BLC_FOR_PARSING));\r\n\t\tif ( $preload ){\r\n\t\t\t$post_ids = array();\r\n\t\t\tforeach($containers as $container){\r\n\t\t\t\t$post_ids[] = $container->container_id;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$args = array('include' => implode(',', $post_ids));\r\n\t\t\t$posts = get_posts($args);\r\n\t\t\t\r\n\t\t\tforeach($posts as $post){\r\n\t\t\t\t$key = $this->container_type . '|' . $post->ID;\r\n\t\t\t\tif ( isset($containers[$key]) ){\r\n\t\t\t\t\t$containers[$key]->wrapped_object = $post;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn $containers;\r\n\t}\r\n\t\r\n  /**\r\n   * Create or update synchronization records for all posts.\r\n   *\r\n   * @param bool $forced If true, assume that all synch. records are gone and will need to be recreated from scratch. \r\n   * @return void\r\n   */\r\n\tfunction resynch($forced = false){\r\n\t\t$overlord = blcPostTypeOverlord::getInstance();\r\n\t\t$overlord->resynch($this->container_type, $forced);\r\n\t}\r\n\t\r\n  /**\r\n   * Get the message to display after $n posts have been deleted.\r\n   *\r\n   * @param int $n Number of deleted posts.\r\n   * @return string A delete confirmation message, e.g. \"5 posts were moved deleted\"\r\n   */\r\n\tfunction ui_bulk_delete_message($n){\r\n\t\t//Since the \"Trash\" feature has been introduced, calling wp_delete_post\r\n\t\t//doesn't actually delete the post (unless you set force_delete to True), \r\n\t\t//just moves it to the trash. So we pick the message accordingly. \r\n\t\t//(If possible, BLC *always* moves to trash instead of deleting permanently.)\r\n\t\tif ( function_exists('wp_trash_post') && EMPTY_TRASH_DAYS ){\r\n\t\t\treturn blcAnyPostContainerManager::ui_bulk_trash_message($n);\r\n\t\t} else {\r\n\t\t\t$post_type_object = get_post_type_object($this->container_type);\r\n\t\t\t$type_name = '';\r\n\t\t\t\r\n\t\t\tif ( $this->container_type == 'post' || is_null($post_type_object) ){\r\n\t\t\t\t$delete_msg = _n(\"%d post deleted.\", \"%d posts deleted.\", $n, 'broken-link-checker');\r\n\t\t\t} elseif ( $this->container_type == 'page' ){\r\n\t\t\t\t$delete_msg = _n(\"%d page deleted.\", \"%d pages deleted.\", $n, 'broken-link-checker');\r\n\t\t\t} else {\r\n\t\t\t\t$delete_msg = _n('%d \"%s\" deleted.', '%d \"%s\" deleted.', $n, 'broken-link-checker');\r\n\t\t\t\t$type_name = ($n == 1 ? $post_type_object->labels->singular_name : $post_type_object->labels->name); \r\n\t\t\t}\r\n\t\t\treturn sprintf($delete_msg, $n, $type_name);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\t\r\n  /**\r\n   * Get the message to display after $n posts have been trashed.\r\n   *\r\n   * @param int $n Number of deleted posts.\r\n   * @return string A confirmation message, e.g. \"5 posts were moved to trash\"\r\n   */\r\n\tfunction ui_bulk_trash_message($n){\r\n\t\t$post_type_object = get_post_type_object($this->container_type);\r\n\t\t$type_name = '';\r\n\t\t\r\n\t\tif ( $this->container_type == 'post' || is_null($post_type_object) ){\r\n\t\t\t$delete_msg = _n(\"%d post moved to the Trash.\", \"%d posts moved to the Trash.\", $n, 'broken-link-checker');\r\n\t\t} elseif ( $this->container_type == 'page' ){\r\n\t\t\t$delete_msg = _n(\"%d page moved to the Trash.\", \"%d pages moved to the Trash.\", $n, 'broken-link-checker');\r\n\t\t} else {\r\n\t\t\t$delete_msg = _n('%d \"%s\" moved to the Trash.', '%d \"%s\" moved to the Trash.', $n, 'broken-link-checker');\r\n\t\t\t$type_name = ($n == 1 ? $post_type_object->labels->singular_name : $post_type_object->labels->name); \r\n\t\t}\r\n\t\treturn sprintf($delete_msg, $n, $type_name);\r\n\t}\r\n}\r\n", "=== Broken Link Checker ===\r\nContributors: whiteshadow\r\nDonate link: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=A6P9S6CE3SRSW\r\nTags: links, broken, maintenance, blogroll, custom fields, admin, comments, posts\r\nRequires at least: 3.2\r\nTested up to: 4.2-beta\r\nStable tag: 1.10.6\r\n\r\nThis plugin will check your posts, comments and other content for broken links and missing images, and notify you if any are found. \r\n\r\n== Description ==\r\nThis plugin will monitor your blog looking for broken links and let you know if any are found.\r\n\r\n**Features**\r\n\r\n* Monitors links in your posts, pages, comments, the blogroll, and custom fields (optional).\r\n* Detects links that don't work, missing images and redirects.\r\n* Notifies you either via the Dashboard or by email.\r\n* Makes broken links display differently in posts (optional).\r\n* Prevents search engines from following broken links (optional).\r\n* You can search and filter links by URL, anchor text and so on.\r\n* Links can be edited directly from the plugin's page, without manually updating each post.\r\n* Highly configurable.\r\n\r\n[Suggest new features and improvements here](http://feedback.w-shadow.com/forums/58400-broken-link-checker)\r\n\r\n**Basic Usage**\r\n\r\nOnce installed, the plugin will begin parsing your posts, bookmarks (AKA blogroll) and other content and looking for links. Depending on the size of your site this can take from a few minutes up to an hour or more. When parsing is complete, the plugin will start checking each link to see if it works. Again, how long this takes depends on how big your site is and how many links there are. You can monitor the progress and tweak various link checking options in *Settings -> Link Checker*.\r\n\r\nThe broken links, if any are found, will show up in a new tab of the WP admin panel - *Tools -> Broken Links*. A notification will also appear in the \"Broken Link Checker\" widget on the Dashboard. To save display space, you can keep the widget closed and configure it to expand automatically when problematic links are detected. E-mail notifications need to be enabled separately (in *Settings -> Link Checker*).\r\n\r\nThe \"Broken Links\" tab will by default display a list of broken links that have been detected so far. However, you can use the links on that page to view redirects or see a listing of all links - working or not - instead. You can also create new link filters by performing a search and clicking the \"Create Custom Filter\" button. For example, this can be used to create a filter that only shows comment links.\r\n\r\nThere are several actions associated with each link. They show up when you move your mouse over to one of the links listed the aforementioned tab -\r\n\r\n* \"Edit URL\" lets you change the URL of that link. If the link is present in more than one place (e.g. both in a post and in the blogroll), all occurrences of that URL will be changed.\r\n* \"Unlink\" removes the link but leaves the link text intact.\r\n* \"Not broken\" lets you manually mark a \"broken\" link as working. This is useful if you know it was incorrectly detected as broken due to a network glitch or a bug. The marked link will still be checked periodically, but the plugin won't consider it broken unless it gets a new result.\r\n* \"Dismiss\" hides the link from the \"Broken Links\" and \"Redirects\" views. It will still be checked as normal and get the normal link styles (e.g. a strike-through effect for broken links), but won't be reported again unless its status changes. Useful if you want to acknowledge a link as broken/redirected and just leave as it is.\r\n\r\nYou can also click on the contents of the \"Status\" or \"Link Text\" columns to get more info about the status of each link.\r\n\r\n**Translations**\r\n\r\n* Arabic - Yaser Maadan\r\n* Belorussian - [M. Comfi](http://www.comfi.com/)\r\n* Chinese Simplified - Kaijia Feng\r\n* Chinese Traditional - [YILIN](http://sh2153.com)\r\n* Czech - [Lelkoun](http://lelkoun.cz/)\r\n* Danish - [Georg S. Adamsen](http://wordpress.blogos.dk/)\r\n* Dutch - [Robin Roelofsen](http://www.dreamdesignsolutions.nl/)\r\n* Finnish - [Jani Alha](http://www.wysiwyg.fi)\r\n* French - [Whiler](http://blogs.wittwer.fr/whiler/), Luc Capronnier, [Guillaume Boda](http://www.michtoblog.com/)\r\n* German - [Ivan Graf](http://blog.bildergallery.com/)\r\n* Hebrew - [Ahrale](http://atar4u.com/), [Eitan Caspi](http://caspi.org.il/)\r\n* Hindi - [Outshine Solutions](http://outshinesolutions.com/)\r\n* Hungarian - [Language Connect](http://www.languageconnect.net/)\r\n* Irish - [Ray Gren](http://letsbefamous.com/)\r\n* Italian - [Gianni Diurno](http://gidibao.net/index.php/portfolio/) and [Giacomo Ross](http://www.luxemozione.com/) (alternative)\r\n* Japanese - [Shohei Tanak](http://artisanworkshop.biz/)\r\n* Korean - [MinHyeong Lim](http://ssamture.net/)\r\n* Persian - [Omid Sheerkavand](http://qanal.ir/)\r\n* Polish - [http://positionmaker.pl](http://positionmaker.pl/)\r\n* Portuguese - [mowster](http://wordpress.mowster.net/)\r\n* Brazilian Portuguese - [Paulino Michelazzo](http://www.michelazzo.com.br/)\r\n* Romanian - [Ovidiu](http://www.jibo.ro)\r\n* Russian - [Anna Ozeritskaya](http://hweia.ru/)\r\n* Serbo-Croatian - [Borisa Djuraskovic](http://www.webhostinghub.com)\r\n* Slovakian - [Patrik \u017dec](http://patwist.com/)\r\n* Spanish - [Neoshinji](http://blog.tuayudainformatica.com/traducciones-de-plugins-wordpress/)\r\n* Turkish - [Murat Durgun](http://www.lanwifi.net/)\r\n* Ukrainian - [Stas Mykhajlyuk](http://www.kosivart.com/)\r\n* Vietnamese - [Biz.O](http://bizover.net/)\r\n\r\n*Note: Some translations are not entirely up to date with the latest release, so parts of the interface may appear untranslated.*\r\n\r\n**Other Credits**\r\n\r\nThis plugin uses some icons from the [Font Awesome icon font](http://fortawesome.github.io/Font-Awesome/). Font Awesome is licensed under SIL OFL 1.1.\r\n\r\n== Installation ==\r\n\r\nTo do a new installation of the plugin, please follow these steps\r\n\r\n1. Download the broken-link-checker.zip file to your computer.\r\n1. Unzip the file \r\n1. Upload `broken-link-checker` folder to the `/wp-content/plugins/` directory\r\n1. Activate the plugin through the 'Plugins' menu in WordPress\r\n\r\nTo enable/disable various features and tweak the plugin's configuration go to *Settings -> Link Checker*.\r\n\r\nTo upgrade your installation\r\n\r\n1. Deactivate the plugin\r\n1. Retrieve and upload the new files (do steps 1. - 3. from \"new installation\" instructions)\r\n1. Reactivate the plugin. Your settings will be retained from the previous version.\r\n\r\n== Changelog ==\r\n\r\n= 1.10.6 =\r\n* Fixed a serious CSRF/XSS vulnerability.\r\n* Switched to YouTube API v3. The old API version will be shut down on April 20, so the plugin needs to be updated to continue checking links to YouTube videos.\r\n* Fixed long URLs overflowing into adjacent table columns.\r\n* Fixed a few minor PHP strict-mode notices.\r\n* Added database character set to the \"Show debug info\" table.\r\n\r\n= 1.10.5 =\r\n* Security: Fixed an XSS vulnerability that could be used by Editors and Administrators to inject arbitrary HTML/JS code in the \"Tools -> Broken Links\" page.\r\n* Other minor security fixes.\r\n* Tested on WordPress 4.2 beta.\r\n\r\n= 1.10.4 =\r\n* Tested on WordPress 4.1.\r\n* Fixed a \"Use of undefined constant ENT_HTML401\" notice showing up on sites running PHP 5.3 or older.\r\n* Fixed a double-escaping bug that could cause some link URLs to be displayed incorrectly.\r\n* Updated French translation.\r\n* Updated Dutch translation.\r\n\r\n= 1.10.3 =\r\n * Security: Filter link URLs before displaying them on the \"Broken Links\" page.\r\n * Security: Prevent Editors and Administrators who don't have the \"unfiltered_html\" capability from creating \"javascript:\" URLs by editing existing links.\r\n\r\n= 1.10.2 =\r\n* Fixed an XSS vulnerability on the link checker settings page.\r\n* Fixed old YouTube embed code parsing - now it should pick up self-closing embed tags without an `<object>` wrapper.\r\n* Updated German translation.\r\n* Updated Simplified Chinese translation.\r\n* Link actions will now wrap properly on small screens.\r\n\r\n= 1.10.1 =\r\n* Fixed a database versioning issue that would cause multiple errors when upgrading from 1.9.5 to 1.10.\r\n\r\n= 1.10 =\r\n* Added a way to hide individual link actions like \"Dismiss\" and \"Unlink\".\r\n* Added a \"Fix redirect\" link action. It replaces a redirect with a direct link. It is hidden by default and can be enabled through the settings page.\r\n* Added a \"Recheck\" link action. Unlike the bulk action by the same name, it checks a link immediately and displays the results without having to refresh the page. \r\n* Added a \"Dismiss\" bulk action.\r\n* Added a note below the \"link tweaks\" settings explaining that they only apply to the contents of posts (and pages, and CPTs), not comments or custom fields.\r\n* Made the \"Redirect URL\" column sortable.\r\n* Added a \"Details\" link to the \"Status\" column.\r\n* Added a \"Warnings\" section to Tools -> Broken Links. It shows problems that might be temporary or false positives. Warnings can be disabled through the settings page.\r\n* Fixed a conflict with plugins that use PHP sessions.\r\n* Fixed the \"post statuses\" option. Now disabling a post status (e.g. \"Draft\") should take effect immediately.\r\n* Fixed the Mediafire link checker.\r\n* Fixed the text in the \"Status\" column being slightly offset vertically when compared to other columns.\r\n* Fixed search box position in WP 4.1-alpha.\r\n* Added a few workarounds for situations where a custom post type is removed without first removing the posts.\r\n* Removed the screen icon. WordPress has deprecated it.\r\n* Other minor fixes.\r\n\r\n= 1.9.5 =\r\n* Fixed missing YouTube videos not being detected when the video URL starts with https instead of http.\r\n* Enabled the YouTube video checker by default on new installations.\r\n* Made the \"dismiss link\" option more permanent. Instead of restoring a dismissed link if the redirect URL changes even a little bit, the plugin will now ignore query string changes. This should fix many of the reports about dismissed links reappearing for no apparent reason.\r\n* Updated Portuguese, German and Dutch translations.\r\n* Other minor fixes.\r\n\r\n= 1.9.4.2 =\r\n* Updated Dutch translation again.\r\n* Removed Bulgarian translation because it was poor quality and outdated.\r\n\r\n= 1.9.4.1 =\r\n* Updated Dutch translation.\r\n* Updated POT file.\r\n\r\n= 1.9.4 =\r\n* Tested on WP 4.0 beta.\r\n* Added a Serbo-Croatian translation.\r\n* Added a Slovakian translation.\r\n* Replaced the old Japanese translation with a new and more up-to-date version from a different translator.\r\n* Updated Dutch, German, Polish, Hebrew and other translations.\r\n* Fixed a notice about undefined index \"status_text\".\r\n* Fixed a \"doing it wrong\" warning related to screen options.\r\n* Fixed spurious false positives on links copied from Word or similar editors.\r\n* Fixed view switcher appearance in WP 4.0.\r\n* Replaced the deprecated like_esc() function with $wpdb->esc_like() where available.\r\n* Fixed plaintext URLs not being detected if they're the very first thing in a post.\r\n* Fixed a bug that caused quotes and other special characters in the broken link CSS and removed link CSS fields to be auto-escaped with a slash, potentially breaking the CSS.\r\n* Fixed a bug that caused the \"check custom fields\" feature work inconsistently or not at all on custom post types.\r\n* Fixed duplicate custom field links showing up when the user creates a revision with different field values.\r\n* Fixed a specific type of false positive where some links would get flagged as \"Unknown Error\" and the log message would be \"Empty reply from server\".\r\n* Fixed a bug where only the first enabled post type would be resynchronized during plugin activation.\r\n* Added more logging.\r\n* Removed Megavideo and MegaUpload modules. These sites no longer exist.\r\n\r\n= 1.9.3 =\r\n* Tested on WP 3.8.1 and WP 3.9-beta2.\r\n* Added an option to sort links by link text. May produce unexpected results for links that have multiple copies with different anchor text.\r\n* Added a Vietnamese translation.\r\n* Added file-based logging for debugging purposes. Logging can be enabled in the \"Advanced\" section of the plugin settings page.\r\n* Added a \"Auto-Submitted: auto-generated\" header to notification emails sent by the plugin. This should prevent \"out-of-office\" auto-responders and similar software from responding to these emails.\r\n* Added domain-based rate limiting to the HTTP checker module.\r\n* Throttled background parsing by about 40% to reduce overall resource usage.\r\n* Fixed (probably) a long-standing bug related to encoding international characters in link URLs.\r\n* Fixed a typo in the Polish translation.\r\n* Made the error message that's displayed when trying to network-activate the plugin more useful.\r\n\r\n= 1.9.2 =\r\n* Fixed several UI/layout issues related to the new WP 3.8 admin style.\r\n* Fixed HTML entity codes showing up in confirmation messages in when running a localized version of WP (only affects some languages).\r\n* Fixed the \"dismiss this notice\" link URL not being HTML-escaped.\r\n* Fixed a couple of cross-site scripting vulnerabilities related to the sort direction query argument not being properly validated and the bulk action form not escaping the current URL.\r\n* Updated Hebrew translation.\r\n* Updated French translation.\r\n* When you dismiss a link, the dismissed link counter is now updated right away instead of on page reload.\r\n\r\n= 1.9.1 =\r\n* Updated Dutch, German, Chinese and Portuguese translations.\r\n* Fixed suggestions not working on sites that force HTTPS in the WordPress admin.\r\n* Tested on WordPress 3.7.\r\n\r\n= 1.9 =\r\n* Added the ability to edit link text from inside the plugin. This features is only available for certain types of links.\r\n* Added a \"suggestions\" feature. When you go to edit a broken link, the plugin will now suggest replacing it with an archived page from the Wayback Machine (if available). You can disable suggestions in Settings -> Link Checker -> General.\r\n* Added a Hebrew translation.\r\n* Added support for HTML code in custom fields. To make the plugin treat a field as HTML, prefix its name with \"html:\" in BLC settings. For example, if you have a custom field named \"foo\" that contains HTML, enter it as \"html:foo\".\r\n* Fixed: The \"Status\" column is now properly updated when editing a link.\r\n* Fixed: Visual feedback when a link is successfully edited. Basically, it briefly changes the row background to green.\r\n* Fixed: Email notifications will only include the \"see all broken links here\" link if the recipient can actually access that link.\r\n* Fixed some UI labels not being localizable.\r\n* The \"Undismiss\" action is now displayed in all views instead of only the \"Dismissed\" view. This way you can tell if a broken link has been dismissed without having to search the \"Dismissed\" list.\r\n* Added information about the last email notification sent to debug info. It's accessible by clicking \"show debug info\" on the plugin settings page.\r\n\r\n= 1.8.3 =\r\n* Added a Hungarian translation.\r\n* Fixed a bunch of \"deprecated function\" notices that showed up due to wpdb::escape() becoming deprecated in WP 3.6.\r\n* Fixed a vulnerability that would allow users with the ability to bulk-edit links to execute arbitrary PHP code by using a specially crafted regex as the search string.\r\n* Updated German translation.\r\n* Replaced the old Dutch translation with a new and more complete translation by Robin Roelofsen.\r\n\r\n= 1.8.2 =\r\n* Removed one of the translator credits links because Google flagged it as \"suspicious\".\r\n* Updated French translation.\r\n* Updated Polish translation.\r\n* Fixed several field size and layout issues that made the search form display incorrectly in Firefox.\r\n\r\n= 1.8.1 =\r\n* Updated the Polish and Simplified Chinese translations.\r\n* Updated the German translation.\r\n* Added translation strings for two modules that were missing them.\r\n* Replaced a number of icons with GPL-compatible alternatives from Font Awesome.\r\n* Removed some unused images.\r\n\r\n= 1.8 =\r\n* Added an option to only show the dashboard widget for users with the Administrator role, or to disable it completely.\r\n* Added a way to change the notification email address.\r\n* Added support for Smart YouTube \"httpv://\" links.\r\n* Added support for protocol-relative URLs (for example, \"//example.com/\").\r\n* Added support for checking YouTube playlists.\r\n* Added a Brazilian Portuguese (pt-BR) translation.\r\n* Updated Chinese (Traditional) translation.\r\n* Switched over to storing plugin settings as JSON instead of serialized PHP arrays.\r\n* Improved error reporting in situations where the plugin can not load settings from the database.\r\n* Fixed: Display a more specific error message than just \"update failed\" when the plugin fails to modify a post. This only applies to WP 3.5+.\r\n* Fixed: Display the right URL for embedded YouTube playlists. Previously the plugin would show the same (incorrect) URL for all playlists.\r\n\r\n= 1.7.1 =\r\n* Added an Arabic translation.\r\n* Updated Portuguese translation.\r\n* Updated French translation.\r\n* Fixed MySQL errors caused by the plugin converting table names to lowercase.\r\n* Fixed a bug where the plugin would sometimes report broken Twitter links as working.\r\n* Fixed the plugin author URL.\r\n\r\n= 1.7 =\r\n* Added support for youtu.be shortlinks.\r\n* Added a Finnish translation.\r\n* Fixed a graphical bug where the currently selected settings tab would not be highlighted in WordPress 3.5.\r\n* Removed the \"Blogroll items\" module from the list of link containers enabled by default. The WordPress developer team is planning to remove Link Manager from core, and the \"Links\" menu will be hidden by default in new WP 3.5 installs.\r\n* Removed the Admin Menu Editor Pro ad from the \"Settings -> Link Checker\" and the \"Tools -> Broken Links\" pages. \r\n* Disabled the news link (if any) for users who have donated.\r\n* Removed support for pre-WP 2.9 post meta actions.\r\n* Minor styling changes of screen meta links.\r\n* Updated Danish, Germa, Italian, French and Simplified Chinese translations.\r\n* Tested on WordPress 3.5.\r\n\r\n= 1.6.2 =\r\n* Another attempt to fix the \"database not up to date\" that some users are still experiencing even with 1.6.1.\r\n\r\n= 1.6.1 =\r\n* Fixed the \"database not up to date\" bug. Now the plugin should properly upgrade the DB.\r\n\r\n= 1.6 =\r\n* Added a way to dismiss links. Dismissed links don't show up in the \"Broken\" and \"Redirects\" lists, but are still checked as normal and get the normal link styles (e.g. strike-through for broken links). Useful if you want to, for example, acknowledge that a link is broken and leave it be.\r\n* Added a \"Redirect URL\" column. For redirects this will display the URL that the link redirects to. For normal, non-redirected links, it will be empty. This column is hidden by default. You can enable it in the \"Screen Options\" panel.\r\n* Updated French translation.\r\n* Tested on WP 3.4.1.\r\n* Replace the \"More plugins...\" link on the \"Broken Links\" page with a link to the Admin Menu Editor page. This link will be hidden for users who have donated.\r\n* A number of minor fixes.\r\n\r\n= 1.5.5 =\r\n* Fix broken image on the settings page.\r\n\r\n= 1.5.3 =\r\n* Fixed a bug that would cause the donation flag to be recorded incorrectly. Apologies to everyone who donated.\r\n\r\n= 1.5.2 =\r\n* A few minor comment fixes.\r\n* Move certain styles to a separate CSS file, which is where they belong.\r\n* Replace the ThemeFuse banner with one from ManageWP (will go live on June 5).\r\n* Instead of displaying several plugins in the \"More plugins by Janis Elsts\" box, sometimes display just one plugin (AME).\r\n\r\n= 1.5.1 =\r\n* Updated Portuguese translation.\r\n* Updated German translation.\r\n* Fixed the donation link to properly return to the Dashboard upon completion.\r\n* Do not display ads to users who have donated.\r\n\r\n= 1.5 =\r\n* Added a FileServe checker.\r\n* Added Turkish translation.\r\n* Added GoogleVideo and Megavideo embed support.\r\n* Fixed Megaupload links being reported with an \"Unknown error\" message when it should be \"Not found\".\r\n* Fixed a couple of bugs in the Rapidshare and MediaFire checkers.\r\n* Updated German translation.\r\n* Updated Italian translation.\r\n* Updated Portuguese translation.\r\n* The explanatory text for the broken link CSS and removed link CSS inputs can now be translated.\r\n* Tested on WP 3.4-alpha-20291.\r\n\r\n= 1.4 =\r\n* Added an option to send post authors notifications about broken links in their posts.\r\n* Added the ability to sort links by URL (click the column header).\r\n* Added YouTube API throttling to avoid going over the request quota, which could result in false positives on blogs with lots of YouTube videos.\r\n* Added a Bulgarian translation.\r\n* Updated Italian, German and Persian translations.\r\n* Fixed a bug where the \"Feedback\" and other screen meta links wouldn't show up in WP 3.3.\r\n* Fixed the tab CSS for the plugin settings page. Now they should be the right size and look the same in all modern browsers (tested in IE, Firefox, Chrome and Opera).\r\n* Fixed drop-down arrows showing up on meta links that don't actually have dropdowns.\r\n* Tested on WP 3.3 (RC2).\r\n\r\n= 1.3.1 =\r\n* Added support for the new YouTube embed code style. It needs to be explicitly enabled in options.\r\n* Added credits link for the Persian language translator.\r\n* Updated Portuguese translation.\r\n* Updated German translation.\r\n* Partial fix for Mediafire checker failing with a fatal error in some situations.\r\n\r\n= 1.3 =\r\n* Dropped PHP 4 support.\r\n* Fixed a whole lot of PHP 5 related notices and strict-mode warnings.\r\n* Fixed some inconsistent method declarations.\r\n* Fixed a long-standing bug in the ver. 0.9.5 upgrade routine.\r\n* Fixed the look and behavior of the \"Feedback\" and \"Go to Broken Links/Go to Settings\" links to be consistent with other WP screen meta links.\r\n* Updated Chinese (TW) translation.\r\n* Updated Portuguese translation.\r\n* Updated Italian translation (minor fix).\r\n* Replaced the link to FindBroken with a short list of (some of) my other plugins.\r\n\r\n= 1.2.5 =\r\n* Added Irish translation.\r\n* Added Persian translation.\r\n* Added Korean translation.\r\n* Added Chinese Traditional translation.\r\n* Updated German translation.\r\n* Fixed (probably) missing diacritics in the Romanian translation.\r\n* Fixed a crash bug caused by class-json.php no longer being present in the latest WP. Luckily, the plugin only really needed that class for backwards compatibility.\r\n* Made the \"database not up to date\" error message a bit more helpful.\r\n* Shortcodes in image URLs should work now.\r\n* The Dashboard widget is no longer visible to non-privileged users.\r\n* Replaced multiple instances of get_option('home') and get_option('siteurl') - both now deprecated - with home_url().\r\n\r\n= 1.2.4 =\r\n* Fixed a very stupid bug where links would be checked very slowly or not at all.\r\n* Fixed the display of the news link.\r\n* Updated Italian translation.\r\n\r\n= 1.2.3 =\r\n* Updated Portuguese translation.\r\n* Updated German translation.\r\n* Switched to a simpler, MySQL-based locking mechanism. Note: This may cause trouble for people who've hacked their WP install to use persistent database connections.\r\n* Added a poll asking for feedback on a new BLC-related web application idea.\r\n* Minor wording change in the debug info table.\r\n\r\n= 1.2.2 = \r\n* All Pro features now included in the free version!\r\n* Updated Japanese translation.\r\n* Updated Polish translation.\r\n* Updated Portuguese translation.\r\n* Added Romanian translation.\r\n* Fixed a tab layout bug in IE 7.\r\n* Fixed UTF-8 characters outside the domain name being encoded incorrectly (may only work with Curl).\r\n* Fixed a missing translation in email notifications.\r\n* Fixed a rare \"only variables can be returned by reference\" notice.\r\n* Added a donation button and a MaxCDN ad to the Settings page.\r\n* Added a \"Go to Settings\" button to the Broken Links page, and a \"Go to Broken Links\" button to the Settings page.\r\n* Settings page now looks better on small screens.\r\n* Email notifications are now enabled by default.\r\n* \"Link status\" in the search form no longer defaults to the currently displayed filter/view.\r\n* Made the \"installation failed\" message a bit more helpful.\r\n\r\n= 0.9.7.2 =\r\n* Added Polish translation.\r\n* Updated Danish translation.\r\n* Updated Italian translation.\r\n* Fixed an uncommon \"Cannot break/continue 1 level\" error. \r\n* Added a new user feedback survey (the link only shows up after you've used this version for at least two weeks).\r\n\r\n= 0.9.7.1 =\r\n* Updated German translation and fixed the corresponding credits link.\r\n\r\n= 0.9.7 =\r\n* Allow custom field names with spaces.\r\n* Updated German translation.\r\n* Updated Portuguese translation\r\n* Made the \"Current load\" label localizeable.\r\n* Fixed a translation-related bug where the various checkboxes in the \"Link types\" and \"Look for links in\" sections would appear in English even when a valid translation was available.\r\n* Fixed non-ASCII URLs being mangled when links are automatically marked with the \"broken_link\" CSS class.\r\n* Fixed blog names that include quotes being displayed incorrectly in email notifications.\r\n* When removing a link via the \"Unlink\" action, add the old URL as the title attribute of the now-unlinked anchor text.\r\n* When resolving relative URLs posted in comments, use the comment's permalink as the base (previously the blog's homepage URL was used).\r\n\r\n= 0.9.6 =\r\n* Updated Danish translation.\r\n* Updated Italian translation.\r\n* Updated Portuguese translation\r\n* Fixed incorrect parsing of relative URLs that consist solely of a query string or \\#fragment.\r\n* Fixed superfluous resynchronization requests being issued when the plugin is re-activated.\r\n* Fixed only one of character set and collation being specified for the plugin's tables.\r\n* Added default status text for HTTP codes 509 and 510.\r\n* Added the installation log to debug info output.\r\n* Added lots of logging to routines called on activation.\r\n* Added an \"Upgrade to Pro\" button to the plugin's pages.\r\n* Removed the highlight on the \"Feedback\" button.\r\n* Fail fast if trying to activate on an unsupported version of WordPress.\r\n* Ensure PHP and browser timeouts don't prematurely terminate the installation/upgrade script.\r\n* Plugin JavaScript and CSS files are now loaded using HTTPS when FORCE_ADMIN_SSL is on.\r\n\r\n= 0.9.5 =\r\n* Added the ability to check scheduled, draft and private posts.\r\n* Added a way to individually enable/disable the monitoring of posts, pages, comments, the blogroll, and so on.\r\n* New \"Status\" column in the \"Broken Links\" table.\r\n* Visible table columns and the number of links per page can now be selected in the \"Screen Options\" panel.\r\n* Replaced the \"Delete sources\" action with \"Move sources to Trash\" (except on blogs where Trash is disabled).\r\n* New URL editor interface, now more consistent with the look-n-feel of the inline editor for posts.\r\n* New status icon to help distinguish \"maybe broken\" and \"definitely broken\" links.\r\n* Tweaked table layout - links first, posts/etc last.\r\n* Added \"Compact\" and \"Detailed\" table views (for now, the differences are quite minor).\r\n* Split the settings page into several tabs.\r\n* Removed the \"Details\" links as redundant. To display link details, click the contents of the \"Status\" or \"Link text\" columns instead.\r\n* Added a way to individually enable/disable the monitoring of various link types, e.g. HTML links, images, etc.\r\n\r\n= 0.9.4.4 =\r\n* Fixed \"Edit URL\" and \"Unlink\" not working on PHP4 servers.\r\n\r\n= 0.9.4.3 =\r\n* Another PHP 4 fix. Considering dropping support for PHP4 in light of the counterintuitive workarounds required to make perfectly valid PHP5 code work in that ghastly thing.\r\n* Added a partial workaround for sites that have use strange DB\\_CHARSET settings.\r\n\r\n= 0.9.4.2 =\r\n* Added more debugging data to the \"Show debug info\" table.\r\n* Added missing indexes to the instance table.\r\n* Yet more PHP4 compatibility fixes.\r\n* Added a notification bubble with the current number of broken links to the Tools -> Broken Links menu item.\r\n\r\n= 0.9.4.1 =\r\n* Fixed PHP 4 incompatibilities introduced in the previous release.\r\n* Fixed bulk unlink.\r\n* Updated Italian translation.\r\n* Updated Danish translation.\r\n\r\n= 0.9.4 =\r\n* Fixed missing post and comment edit links in email notifications.\r\n* Updated Danish translation.\r\n* Added Japanese translation.\r\n* Added a Hindi translation.\r\n* Added a Portuguese translation.\r\n* Slightly improved DB error reporting.\r\n* Added the ability to disable comment link checking.\r\n* Fixed a couple of minor bugs that made some of the UI text impossible to translate.\r\n* The plugin's tables are now created with the same character set and collation settings as native WP tables (previously they used the database defaults instead).\r\n* Automatically clean up and optimize the plugin's tables twice per month.\r\n* Instead of displaying a zero response time for timed out links, now it shows how long the plugin waited before assuming that the link has timed out.\r\n* Added the default PHP script execution time limit to the \"Debug info\" table.\r\n* Added a \"Mark as not broken\" bulk action.\r\n* Links that make the plugin crash are no longer assumed to be broken.\r\n\r\n= 0.9.3 =\r\n* Fixed a JS error that only happened in IE by removing a superfluous comma from an object literal.\r\n* Fixed load limiting not being completely disabled on servers that don't support it.\r\n* Fixed a mishandling of new comments that would occur when CAPTCHA verification was enabled and someone entered an incorrect code.\r\n* Added installation/update logging.\r\n* Fixed a crash that would occur when the user tried to permanently delete a trashed post that has comments.\r\n\r\n= 0.9.2 =\r\n* In Tools -> Broken Links, highlight links that have been broken for a long time (off by default).\r\n* Fixed an invalid parameter bug in the HTTP link checking routine.\r\n* Added nofollow to broken links (optional, only works for links in posts).\r\n* Fixed some PHP notices and a bunch of deprecated function calls.\r\n* Fixed \"Trash\" links for comments.\r\n\r\n= 0.9.1 =\r\n* Fixed the \"syntax error: unexpected $end\" problem caused by a unintentional PHP shorttag.\r\n* Eliminated a bunch of false positives by adding a workaround for buggy servers that incorrectly respond with 404 to HEAD requests.\r\n* Increased the default server load limit to 4.0 to prevent the plugin from idling endlessly on weakling servers.\r\n\r\n= 0.9 =\r\n* Masquerade as IE 7 when using the Snoopy library to check links. Should prevent some false positives.\r\n* Fixed relative URL handling (yet again). It'll work this time, honest ;)\r\n* Fixed post titles being displayed incorrectly on multilingual blogs (props Konstanin Zhilenko)\r\n* Misc fixes/comments.\r\n* \"Unlink\" works properly now.\r\n* Additional source code comments.\r\n* Don't try to display icons in email notifications. It didn't work anyway.\r\n* Use AJAX nonces for additional security.\r\n* General code cleanup.\r\n* Email notifications about broken links.\r\n* \"Recheck\" bulk action.\r\n* Check comment links.\r\n* Suspend checking if the server is overloaded (on by default).\r\n* Icons for broken links and redirects.\r\n* Fixed some UI glitches.\r\n* \"Discard\" gone, replaced by \"Not broken\".\r\n* \"Exclude\" gone from action links.\r\n* Better handling of false positives.\r\n* FTP, mailto:, javascript: and other links with unsupported protocols now show up in the \ufffdAll links\ufffd list.\r\n\r\n= 0.8.1 =\r\n* Updated Italian translation.\r\n* Removed the survey link.\r\n\r\n= 0.8 =\r\n* Initial support for performing some action on multiple links at once.\r\n* Added a \"Delete sources\" bulk action that lets you delete all posts (or blogroll entries) that contain any of the selected links. Doing this in WP 2.9 and up this will instead move the posts to the trash, not delete them permanently.\r\n* New bulk action : Unlink. Removes all selected links from all posts.\r\n* New bulk action : Fix redirects. Analyzes the selected links and replaces any redirects with direct links.\r\n* Added a notice asking the user to take the feedback survey.\r\n* Update the .POT file with new i18n strings.\r\n\r\n= 0.7.4 =\r\n* Fixed a minor bug where the plugin would display an incorrect number of links in the \"Displaying x-y of z\" label when the user moves to a different page of the results.\r\n* Added Ukrainian translation.\r\n\r\n= 0.7.3 =\r\n* Reverted to the old access-checking algorithm + some error suppression.\r\n\r\n= 0.7.2 =\r\n* Only use the custom access rights detection routine if open\\_basedir is set.\r\n\r\n= 0.7.1 =\r\n* Updated Russian translation.\r\n* Yet another modification of the algorithm that tries to detect a usable directory for the lockfile.\r\n\r\n= 0.7 =\r\n* Added a Search function and the ability to save searches as custom filters\r\n* Added a Spanish translation\r\n* Added a Belorussian translation\r\n* Added an option to add a removed\\_link CSS class to unlinked links\r\n* Slight layout changes\r\n* Added localized date display (where applicable)\r\n* The background worker thread that is started up via AJAX will now close the connection almost immediately after it starts running. This will reduce resource usage slightly. May also solve the rare and mysterious slowdown some users have experienced when activating the plugin.\r\n* Updated Italian translation\r\n* Fixed an unlocalized string on the \"Broken Links\" page\r\n\r\n= 0.6.5 =\r\n* Added Russian translation.\r\n\r\n= 0.6.4 =\r\n* Added French translation.\r\n* Updated Italian translation.\r\n\r\n= 0.6.3 =\r\n* Added a German translation.\r\n\r\n= 0.6.2 =\r\n* Added an Italian translation.\r\n* Added a Danish translation.\r\n* Added a Chinese (Simplified) translation.\r\n* Added a Dutch translation.\r\n\r\n= 0.6.1 =\r\n* Some translation-related fixes.\r\n\r\n= 0.6 =\r\n* Initial localization support.\r\n\r\n= 0.5.18 =\r\n* Added a workaround for auto-enclosures. The plugin should now parse the \"enclosure\" custom field correctly.\r\n* Let people use Enter and Esc as shortcuts for \"Save URL\" and \"Cancel\" (respectively) when editing a link.\r\n\r\n= 0.5.17 =\r\n* Added a redirect detection workaround for users that have safe\\_mode or open\\_basedir enabled.\r\n\r\n= 0.5.16.1 =\r\n* Be more careful when parsing safe\\_mode and open\\_basedir settings.\r\n\r\n= 0.5.16 =\r\n* Also try the upload directory when looking for places where to put the lockfile.\r\n\r\n= 0.5.15 =\r\n* Editing links with relative URLs via the plugin's interface should now work properly. Previously the plugin would just fail silently and behave as if the link was edited, even if it wasn't.\r\n\r\n= 0.5.14 =\r\n* Made the timeout value used when checking links user-configurable.\r\n* The plugin will now report an error instead of failing silently when it can't create the necessary database tables.\r\n* Added a table listing assorted debug info to the settings page. Click the small \"Show debug info\" link to display it.\r\n* Cleaned up some redundant/useless code.\r\n\r\n= 0.5.13 =\r\n* Fixed the bug where the plugin would ignore FORCE\\_ADMIN\\_SSL setting and always use plain HTTP for it's forms and AJAX.\r\n\r\n= 0.5.12 =\r\n* Let the user set a custom temporary directory, if the default one is not accessible for some reason.\r\n\r\n= 0.5.11 =\r\n* Use absolute paths when loading includes. Apparently using the relative path could cause issues in some server configurations.\r\n\r\n= 0.5.10.1 =\r\n* Fix a stupid typo\r\n\r\n= 0.5.10 =\r\n* Separated the user-side functions from the admin-side code so that the plugin only loads what's required.\r\n* Changed some internal flags yet again.\r\n* Changed the algorithm for finding the server's temp directory.\r\n* Fixed the URL extraction regexp again; turns out backreferences inside character classes don't work.\r\n* Process shortcodes in URLs.\r\n* If the plugin can't find a usable directory for temporary files, try wp-content.\r\n* Don't remove <pre> tags before parsing the post. Turns out they can actually contain valid links (oops).\r\n\r\n= 0.5.9 =\r\n* Added an autogenerated changelog.\r\n* Added a workaround to make this plugin compatible with the SimplePress forum.\r\n* Fixed <pre> block parsing, again.\r\n* Fixed a bug where URLs that only differ in character case would be treated as equivalent.\r\n* Improved the database upgrade routine.\r\n\r\n= 0.5.8.1 =\r\n* Added partial proxy support when CURL is available. Proxies will be fully supported in a later version.\r\n\r\n= 0.5.8 =\r\n* Fixed links that are currently in the process of being checked showing up in the \"Broken links\" table.\r\n* The post parser no longer looks for links inside <pre></pre> blocks.\r\n\r\n= 0.5.7 =\r\n* Slightly changed the dashboard widget's layout/look as per a user's request.\r\n\r\n= 0.5.6 =\r\n* Improved relative URL parsing. The plugin now uses the permalink as the base URL when processing posts.\r\n\r\n= 0.5.5 =\r\n* Minor bugfixes\r\n* URLs with spaces (and some other special characters) are now handled better and won't get marked as \"broken\" all the time.\r\n* Links that contain quote characters are parsed properly.\r\n\r\n= 0.5.4 =\r\n* Fixed the uninstaller not deleting DB tables.\r\n* Other uninstallation logic fixes.\r\n\r\n= 0.5.3 =\r\n* Improved timeout detection/handling when using Snoopy.\r\n* Set the max download size to 5 KB when using Snoopy.\r\n* Fixed a rare bug where the settings page would redirect to the login screen when saving settings.\r\n* Removed some stale, unused code (some still remains).\r\n\r\n= 0.5.2 =\r\n* Fixed a SQL query that had the table prefix hard-coded as \"wp\\_\". This would previously make the plugin detect zero links on sites that have a different table prefix.\r\n\r\n= 0.5.1 =\r\n* Fix a bug when the plugin creates a DB table with the wrong prefix.\r\n\r\n= 0.5 =\r\n* This is a near-complete rewrite with a lot of new features. \r\n* See \ufffdhttp://w-shadow.com/blog/2009/05/22/broken-link-checker-05/ for details.\r\n\r\n= 0.4.14 =\r\n* Fix false positives when the URL contains an #anchor\r\n\r\n= 0.4.13 =\r\n* (Hopefully) fix join() failure when Snoopy doesn't return any HTTP headers.\r\n\r\n= 0.4.12 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.4.11 =\r\n* Set the Referer header to blog's home address when checking a link. This should help deal with some bot traps.\r\n* I know, I know - there haven't been any major updates for a while. But there will be eventually :)\r\n* Fix SQL error when a post is deleted.\r\n\r\n= 0.4.10 =\r\n* Changed required access caps for \"Manage -> Broken Links\" from manage\\_options to edit\\_ohers\\_posts. This will allow editor users to access that page and it's functions.\r\n\r\n= 0.4.9 =\r\n* Link sorting, somewhat experimental.\r\n* JavaScript sorting feature for the broken link list.\r\n\r\n= 0.4.8 =\r\n* CURL isn't required anymore. Snoopy is used when CURL isn't available.\r\n* Post title in broken link list is now a link to the post (permalink). Consequently, removed \"View\" button.\r\n* Added a \"Details\" link. Clicking it will show/hide more info about the reported link.\r\n* \"Unlink\" and \"Edit\" now work for images, too. \"Unlink\" simply removes the image.\r\n* Database modifications to enable the changes described above.\r\n* Moved the URL checking function from wsblc\\_ajax.php to broken-link-checker.php; made it more flexible.\r\n* New and improved (TM) regexps for finding links and images.\r\n* A \"Settings\" link added to plugin's action links.\r\n* And probably other stuff I forgot!\r\n* Grr :P\r\n\r\n= 0.4.7 =\r\n* Minor enhancements : \r\n* Autoselect link URL after the user clicks \"Edit\".\r\n* Make sure only HTTP and HTTPS links are checked.\r\n* More substantive improvements will hopefully follow next week.\r\n\r\n= 0.4.6 =\r\n* Minor compatibility enhancement in wsblc\\_ajax.php - don't load wpdb if it's already loaded.\r\n\r\n= 0.4.5 =\r\n* Bugfixes. Nothing more, nothing less.\r\n* Revisions don't get added to the work queue anymore.\r\n* Workaround for rare cURL timeout bug.\r\n* Improved WP 2.6 compatibility.\r\n* Correctly handle URLs containing a single quote '.\r\n\r\n= 0.4.4 =\r\n* Consider a HTTP 401 response OK. Such links won't be marked as broken anymore.\r\n\r\n= 0.4.3 =\r\n* Fix : Don't check links in revisions, only posts/pages.\r\n\r\n= 0.4.2 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.4.1 =\r\n* Split translated version from the previous code. Was causing weird problems.\r\n\r\n= 0.4-i8n =\r\n* *There are no release notes for this version*\r\n\r\n= 0.4 =\r\n* Added localization support (may be buggy).\r\n\r\n= 0.3.9 =\r\n* Fix : Use get\\_permalink to get the \"View\" link. Old behavior was to use the GUID.\r\n\r\n= 0.3.8 =\r\n* Edit broken links @ Manage -> Broken Links (experimental)\r\n\r\n= 0.3.7 =\r\n* Change: A bit more verbose DB error reporting for the \"unlink\" feature.\r\n\r\n= 0.3.6 =\r\n* Switch from wp\\_print\\_scripts() to wp\\_enqueue\\_script()\r\n* Wp\\_enqueue\\_script()\r\n\r\n= 0.3.5 =\r\n* New: \"Delete Post\" option.\r\n* New: Increase the compatibility number.\r\n* Change: Default options are now handled in the class constructor.\r\n\r\n= 0.3.4 =\r\n* Ignore mailto: links\r\n* Ignore links inside <code> blocks\r\n\r\n= 0.3.3 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.3.2 =\r\n* Fix Unlink button not working, some other random fixes\r\n\r\n= 0.3.1 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.3 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.2.5 =\r\n* Applied a small patch @ 347\r\n* Fix some omissions\r\n* Lots of new features in version 0.3\r\n\r\n= 0.2.4 =\r\n* Bigfix - use GET when HEAD fails\r\n\r\n= 0.2.3 =\r\n* MySQL 4.0 compatibility + recheck\\_all\\_posts function\r\n\r\n= 0.2.2.1 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.2.2 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.2 =\r\n* *There are no release notes for this version*\r\n\r\n= 0.1 =\r\n* *There are no release notes for this version*\r\n\r\n== Upgrade Notice ==\r\n\r\n= 1.10.5 =\r\nFixes a significant security issue.\r\n\r\n= 1.9.2 =\r\nFixes UI issues related to the new WP 3.8 admin style and a few security vulnerabilities.\r\n\r\n= 1.6.2 =\r\nAttempts to fix the \"database not up to date\" bug that some users are still experiencing with 1.6.1. If you have not encountered this bug, you can skip this update.\r\n\r\n= 1.4 =\r\nAdds an option to send post authors notifications about broken links in their posts and the the ability to sort links by URL, as well as a number of other updates and fixes.\r\n\r\n= 0.9.4.2 =\r\nFixes a major PHP4 compatibility problem introduced in version 0.9.4 and adds a notification bubble with the current broken link count to the \"Broken Links\" menu."], "filenames": ["core/core.php", "includes/any-post.php", "readme.txt"], "buggy_code_start_loc": [1318, 435, 7], "buggy_code_end_loc": [2787, 443, 101], "fixing_code_start_loc": [1318, 435, 7], "fixing_code_end_loc": [2787, 443, 103], "type": "CWE-79", "message": "A vulnerability was found in Broken Link Checker Plugin up to 1.10.5. It has been rated as problematic. Affected by this issue is the function print_module_list/show_warnings_section_notice/status_text/ui_get_action_links. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.10.6 is able to address this issue. The name of the patch is f30638869e281461b87548e40b517738b4350e47. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-225152.", "other": {"cve": {"id": "CVE-2015-10098", "sourceIdentifier": "cna@vuldb.com", "published": "2023-04-08T09:15:07.470", "lastModified": "2023-04-17T13:43:35.650", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Broken Link Checker Plugin up to 1.10.5. It has been rated as problematic. Affected by this issue is the function print_module_list/show_warnings_section_notice/status_text/ui_get_action_links. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.10.6 is able to address this issue. The name of the patch is f30638869e281461b87548e40b517738b4350e47. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-225152."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wpmudev:broken_link_checker:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.10.6", "matchCriteriaId": "4EA9453A-7FA0-47BA-A0B8-6E36EF66C8FD"}]}]}], "references": [{"url": "https://github.com/wp-plugins/broken-link-checker/commit/f30638869e281461b87548e40b517738b4350e47", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/wp-plugins/broken-link-checker/releases/tag/1.10.6", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.225152", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.225152", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-plugins/broken-link-checker/commit/f30638869e281461b87548e40b517738b4350e47"}}