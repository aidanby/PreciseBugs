{"buggy_code": ["<?php\nnamespace PFBC;\n\nabstract class Base {\n\tpublic function configure(array $properties = null) {\n        if(!empty($properties)) {\n\t\t\t$class = get_class($this);\n\n\t\t\t/*The property_reference lookup array is created so that properties can be set\n\t\t\tcase-insensitively.*/\n            $available = array_keys(get_class_vars($class));\n            $property_reference = array();\n            foreach($available as $property)\n                $property_reference[strtolower($property)] = $property;\n\n\t\t\t/*The method reference lookup array is created so that \"set\" methods can be called\n\t\t\tcase-insensitively.*/\n            $available = get_class_methods($class);\n            $method_reference = array();\n            foreach($available as $method)\n                $method_reference[strtolower($method)] = $method;\n\t\t\t\n            foreach($properties as $property => $value) {\n\t\t\t\t$property = strtolower($property);\n\t\t\t\t/*The attributes property cannot be set directly.*/\n\t\t\t\tif($property != \"attributes\") {\n\t\t\t\t\t/*If the appropriate class has a \"set\" method for the property provided, then\n\t\t\t\t\tit is called instead or setting the property directly.*/\n\t\t\t\t\tif(isset($method_reference[\"set\" . $property]))\n\t\t\t\t\t\t$this->$method_reference[\"set\" . $property]($value);\n\t\t\t\t\telseif(isset($property_reference[$property]))\n\t\t\t\t\t\t$this->$property_reference[$property] = $value;\n\t\t\t\t\t/*Entries that don't match an available class property are stored in the attributes\n\t\t\t\t\tproperty if applicable.  Typically, these entries will be element attributes such as\n\t\t\t\t\tclass, value, onkeyup, etc.*/\n\t\t\t\t\telseif(isset($property_reference[\"attributes\"]))\n\t\t\t\t\t\t$this->attributes[$property] = $value;\n\t\t\t\t}\n            }\n        }\n        return $this;\n    }\n\n\t/*This method can be used to view a class' state.*/\n\tpublic function debug() {\n\t\techo \"<pre>\", print_r($this, true), \"</pre>\";\n\t}\n\n\t/*This method prevents double/single quotes in html attributes from breaking the markup.*/\n\tprotected function filter($str) {\n\t\treturn str_replace('\"', '&quot;', $str);\n\t}\n\n\t/*This method is used by the Form class and all Element classes to return a string of html\n\tattributes.  There is an ignore parameter that allows special attributes from being included.*/\n\tpublic function getAttributes($ignore = \"\") {\n        $str = \"\";\n\t\tif(!empty($this->attributes)) {\n\t\t\tif(!is_array($ignore))\n\t\t\t\t$ignore = array($ignore);\n\t\t\t$attributes = array_diff(array_keys($this->attributes), $ignore);\n\t\t\tforeach($attributes as $attribute) {\n\t\t\t\t$str .= ' ' . $attribute;\n\t\t\t\tif($this->attributes[$attribute] !== \"\")\n\t\t\t\t\t$str .= '=\"' . $this->filter($this->attributes[$attribute]) . '\"';\n\t\t\t}\t\n\t\t}\t\n        return $str;\n    }\n}\n?>\n", "<?php\nnamespace PFBC\\Element;\n\nclass Textarea extends \\PFBC\\Element {\n\tprotected $attributes = array(\"rows\" => \"5\");\n\n\tpublic function render() {\n        echo \"<textarea\", $this->getAttributes(\"value\"), \">\";\n        if(!empty($this->attributes[\"value\"]))\n            echo $this->attributes[\"value\"];\n        echo \"</textarea>\";\n    }\n}\n"], "fixing_code": ["<?php\nnamespace PFBC;\n\nabstract class Base {\n\tpublic function configure(array $properties = null) {\n        if(!empty($properties)) {\n\t\t\t$class = get_class($this);\n\n\t\t\t/*The property_reference lookup array is created so that properties can be set\n\t\t\tcase-insensitively.*/\n            $available = array_keys(get_class_vars($class));\n            $property_reference = array();\n            foreach($available as $property)\n                $property_reference[strtolower($property)] = $property;\n\n\t\t\t/*The method reference lookup array is created so that \"set\" methods can be called\n\t\t\tcase-insensitively.*/\n            $available = get_class_methods($class);\n            $method_reference = array();\n            foreach($available as $method)\n                $method_reference[strtolower($method)] = $method;\n\t\t\t\n            foreach($properties as $property => $value) {\n\t\t\t\t$property = strtolower($property);\n\t\t\t\t/*The attributes property cannot be set directly.*/\n\t\t\t\tif($property != \"attributes\") {\n\t\t\t\t\t/*If the appropriate class has a \"set\" method for the property provided, then\n\t\t\t\t\tit is called instead or setting the property directly.*/\n\t\t\t\t\tif(isset($method_reference[\"set\" . $property]))\n\t\t\t\t\t\t$this->$method_reference[\"set\" . $property]($value);\n\t\t\t\t\telseif(isset($property_reference[$property]))\n\t\t\t\t\t\t$this->$property_reference[$property] = $value;\n\t\t\t\t\t/*Entries that don't match an available class property are stored in the attributes\n\t\t\t\t\tproperty if applicable.  Typically, these entries will be element attributes such as\n\t\t\t\t\tclass, value, onkeyup, etc.*/\n\t\t\t\t\telseif(isset($property_reference[\"attributes\"]))\n\t\t\t\t\t\t$this->attributes[$property] = $value;\n\t\t\t\t}\n            }\n        }\n        return $this;\n    }\n\n\t/*This method can be used to view a class' state.*/\n\tpublic function debug() {\n\t\techo \"<pre>\", print_r($this, true), \"</pre>\";\n\t}\n\n\t/*This method prevents double/single quotes in html attributes from breaking the markup.*/\n\tprotected function filter($str) {\n\t\treturn htmlspecialchars($str);\n\t}\n\n\t/*This method is used by the Form class and all Element classes to return a string of html\n\tattributes.  There is an ignore parameter that allows special attributes from being included.*/\n\tpublic function getAttributes($ignore = \"\") {\n        $str = \"\";\n\t\tif(!empty($this->attributes)) {\n\t\t\tif(!is_array($ignore))\n\t\t\t\t$ignore = array($ignore);\n\t\t\t$attributes = array_diff(array_keys($this->attributes), $ignore);\n\t\t\tforeach($attributes as $attribute) {\n\t\t\t\t$str .= ' ' . $attribute;\n\t\t\t\tif($this->attributes[$attribute] !== \"\")\n\t\t\t\t\t$str .= '=\"' . $this->filter($this->attributes[$attribute]) . '\"';\n\t\t\t}\t\n\t\t}\t\n        return $str;\n    }\n}\n?>\n", "<?php\nnamespace PFBC\\Element;\n\nclass Textarea extends \\PFBC\\Element {\n\tprotected $attributes = array(\"rows\" => \"5\");\n\n\tpublic function render() {\n        echo \"<textarea\", $this->getAttributes(\"value\"), \">\";\n        if(!empty($this->attributes[\"value\"]))\n            echo $this->filter($this->attributes[\"value\"]);\n        echo \"</textarea>\";\n    }\n}\n"], "filenames": ["PFBC/Base.php", "PFBC/Element/Textarea.php"], "buggy_code_start_loc": [51, 10], "buggy_code_end_loc": [52, 11], "fixing_code_start_loc": [51, 10], "fixing_code_end_loc": [52, 11], "type": "CWE-79", "message": "A vulnerability has been found in manikandan170890 php-form-builder-class and classified as problematic. Affected by this vulnerability is an unknown functionality of the file PFBC/Element/Textarea.php of the component Textarea Handler. The manipulation of the argument value leads to cross site scripting. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 74897993818d826595fd5857038e6703456a594a. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218155.", "other": {"cve": {"id": "CVE-2012-10005", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-12T16:15:09.257", "lastModified": "2023-01-20T20:10:42.567", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in manikandan170890 php-form-builder-class and classified as problematic. Affected by this vulnerability is an unknown functionality of the file PFBC/Element/Textarea.php of the component Textarea Handler. The manipulation of the argument value leads to cross site scripting. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 74897993818d826595fd5857038e6703456a594a. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218155."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php-form-builder-class_project:php-form-builder-class:*:*:*:*:*:*:*:*", "versionEndExcluding": "2012-11-22", "matchCriteriaId": "B6319B4F-2112-4469-A599-72FEB25A7E26"}]}]}], "references": [{"url": "https://code.google.com/archive/p/php-form-builder-class/issues/184", "source": "cna@vuldb.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/manikandan170890/php-form-builder-class/commit/74897993818d826595fd5857038e6703456a594a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218155", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218155", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/manikandan170890/php-form-builder-class/commit/74897993818d826595fd5857038e6703456a594a"}}