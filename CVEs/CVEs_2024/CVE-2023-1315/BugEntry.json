{"buggy_code": ["<?php\n/*********************************************************************\n    ajax.search.php\n\n    AJAX interface for searches, queue management, etc.\n\n    Jared Hancock <jared@osticket.com>\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2014 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nif(!defined('INCLUDE_DIR')) die('403');\n\ninclude_once(INCLUDE_DIR.'class.ticket.php');\nrequire_once(INCLUDE_DIR.'class.ajax.php');\n\nclass SearchAjaxAPI extends AjaxController {\n\n    function getAdvancedSearchDialog($key=false, $context='advsearch') {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login required');\n\n        $search = new AdhocSearch(array(\n            'root' => 'T',\n            'staff_id' => $thisstaff->getId(),\n            'parent_id' => @$_GET['parent_id'] ?: 0,\n        ));\n        if ($search->parent_id) {\n            $search->flags |= SavedSearch::FLAG_INHERIT_COLUMNS;\n        }\n\n        if (isset($_SESSION[$context]) && $key && $_SESSION[$context][$key])\n            $search->config = $_SESSION[$context][$key];\n\n        $this->_tryAgain($search);\n    }\n\n    function editSearch($id) {\n        global $thisstaff;\n\n        $search = SavedSearch::lookup($id);\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$search || !$search->checkAccess($thisstaff))\n            Http::response(404, 'No such saved search');\n\n        $this->_tryAgain($search);\n    }\n\n    function addField($name) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login required');\n\n        $search = new SavedSearch(array(\n                    'root'=>'T'\n                    ));\n        $searchable = $search->getSupportedMatches();\n        if (!($F = $searchable[$name]))\n            Http::response(404, 'No such field: ', print_r($name, true));\n\n        $fields = SavedSearch::getSearchField($F, $name);\n        $form = new AdvancedSearchForm($fields);\n        // Check the box to search the field by default\n        if ($F = $form->getField(\"{$name}+search\"))\n            $F->value = true;\n\n        ob_start();\n        include STAFFINC_DIR . 'templates/advanced-search-field.tmpl.php';\n        $html = ob_get_clean();\n\n        return $this->encode(array(\n            'success' => true,\n            'html' => $html,\n        ));\n    }\n\n    function doSearch() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        $search = new AdhocSearch(array(\n                    'root' => 'T',\n                    'staff_id' => $thisstaff->getId()));\n\n        $form = $search->getForm($_POST);\n        if (false === $this->_setupSearch($search, $form)) {\n            return;\n        }\n\n        Http::response(200, $this->encode(array(\n            'redirect' => 'tickets.php?queue=adhoc',\n        )));\n    }\n\n    function _hasErrors(SavedSearch $search, $form) {\n        if (!$form->isValid()) {\n            $this->_tryAgain($search, $form);\n            return true;\n        }\n    }\n\n    function _setupSearch(SavedSearch $search, $form, $key='advsearch') {\n        if ($this->_hasErrors($search, $form))\n            return false;\n\n        if ($key) {\n            $keep = array();\n            // Add in new search to the list of recent searches\n            $criteria = $search->isolateCriteria($form->getClean());\n            $token = $this->_hashCriteria($criteria);\n            $keep[$token] = $criteria;\n            // Keep the last 5 recent searches looking from the beginning of\n            // the recent search list\n            if (isset($_SESSION[$key])) {\n                reset($_SESSION[$key]);\n                for ($i = 0; $i < 5; $i++) {\n                    $k = key($_SESSION[$key]);\n                    $v = current($_SESSION[$key]);\n                    if (!$k)\n                        break;\n                    $keep[$k] = $v;\n                }\n            }\n            $_SESSION[$key] = $keep;\n        }\n    }\n\n    function _hashCriteria($criteria, $size=10) {\n        $parts = array();\n        foreach ($criteria as $C) {\n            list($name, $method, $value) = $C;\n            if (is_array($value))\n                $value = implode('+', $value);\n            $parts[] = \"{$name} {$method} {$value}\";\n        }\n        $hash = sha1(implode(' ', $parts), true);\n        return substr(\n            str_replace(array('+','/','='), '', base64_encode($hash)),\n            -$size);\n    }\n\n    function _tryAgain($search, $form=null, $errors=array(), $info=array()) {\n        if (!$form)\n            $form = $search->getForm();\n        include STAFFINC_DIR . 'templates/advanced-search.tmpl.php';\n    }\n\n    function createSearch() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n\n        $search = SavedSearch::create(array(\n                    'title' => __('Add Queue'),\n                    'root' => 'T',\n                    'staff_id' => $thisstaff->getId(),\n                    'parent_id' =>  $_GET['pid'],\n                    ));\n        $this->_tryAgain($search);\n    }\n\n    function saveSearch($id=0) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        if ($id) { //  update\n            if (!($search = SavedSearch::lookup($id))\n                    || !$search->checkAccess($thisstaff))\n                Http::response(404, 'No such saved search');\n        } else { // new search\n            $search = SavedSearch::create(array(\n                        'root' => 'T',\n                        'staff_id' => $thisstaff->getId()\n                        ));\n        }\n\n        if (false === $this->_saveSearch($search))\n            return;\n\n        $info = array(\n                'msg' => sprintf('%s %s %s',\n                    __('Search'),\n                    $id ? __('updated') : __('created'),\n                    __('successfully')),\n                );\n        $this->_tryAgain($search, null, null, $info);\n    }\n\n    function _saveSearch(SavedSearch $search) {\n        $_POST['queue-name'] = Format::htmlchars($_POST['queue-name']);\n\n        // Validate the form.\n        $form = $search->getForm($_POST);\n        if ($this->_hasErrors($search, $form))\n            return false;\n\n        $errors = array();\n        if (!$search->update($_POST, $errors)\n                || !$search->save(true)) {\n\n            $form->addError(sprintf(\n                        __('Unable to update %s. Correct error(s) below and try again.'),\n                        __('queue')));\n            $this->_tryAgain($search, $form, $errors);\n            return false;\n        }\n\n        if (false === $this->_setupSearch($search, $form)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function editColumn($column_id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!($column = QueueColumn::lookup($column_id))) {\n            Http::response(404, 'No such queue');\n        }\n\n        if ($_POST) {\n            $data_form = $column->getDataConfigForm($_POST);\n            if ($data_form->isValid()) {\n                $column->update($_POST, 'Ticket');\n                if ($column->save())\n                    Http::response(201, 'Successfully updated');\n            }\n        }\n\n        $root = 'Ticket';\n        include STAFFINC_DIR . 'templates/queue-column-edit.tmpl.php';\n    }\n\n    function editSort($sort_id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!($sort = QueueSort::lookup($sort_id))) {\n            Http::response(404, 'No such queue sort');\n        }\n\n        $data_form = $sort->getDataConfigForm($_POST ?: false);\n        if ($_POST) {\n            if ($data_form->isValid()) {\n                $sort->update($data_form->getClean() + $_POST);\n                if ($sort->save())\n                    Http::response(201, 'Successfully updated');\n            }\n        }\n\n        include STAFFINC_DIR . 'templates/queue-sorting-edit.tmpl.php';\n    }\n\n    function getQueue($id) {\n        global $thisstaff;\n\n        $queue = SavedSearch::lookup($id);\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$queue || !$queue->checkAccess($thisstaff))\n            Http::response(404, 'No such queue');\n\n        Http::response(200, $this->encode(array(\n            'name' => $queue->getName(),\n            'criteria' => nl2br(Format::htmlchars($queue->describeCriteria())),\n        )));\n    }\n\n    function deleteQueue($id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        if ($id && (!($queue = CustomQueue::lookup($id)))) {\n            Http::response(404, 'No such queue');\n        }\n        if (!$queue || !$queue->checkAccess($thisstaff)) {\n            Http::response(404, 'No such queue');\n        }\n        if ($_POST) {\n            if (!$queue->delete()) {\n                Http::response(500, 'Unable to delete queue');\n            }\n            Http::response(201, 'Have a nice day');\n           $_SESSION['::sysmsgs']['msg'] = sprintf(__( 'Successfully deleted%s.'),\n                       $queue->getName());\n        }\n\n       $info = array(\n               ':action' => sprintf('#queue/%s/delete', $queue->getId()),\n               ':title' => sprintf('%s %s', __('Please Confirm'), __('Queue Deletion')),\n               'warn' => __('Deleted Queues cannot be recovered'),\n               ':message' => sprintf('Are you sure you want to delete %s queue?', $queue->getName()),\n               ':confirm' => 'Yes, Delete!'\n               );\n\n        include STAFFINC_DIR . 'templates/confirm.tmpl.php';\n    }\n\n    function previewQueue($id=false) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        if ($id && (!($queue = CustomQueue::lookup($id)))) {\n            Http::response(404, 'No such queue');\n        }\n\n        if (!$queue) {\n            $queue = CustomQueue::create();\n        }\n\n        $queue->update($_POST);\n\n        $form = $queue->getForm($_POST);\n        $tickets = $queue->getQuery($form);\n        $count = 10; // count($queue->getBasicQuery($form));\n\n        include STAFFINC_DIR . 'templates/queue-preview.tmpl.php';\n    }\n\n    function addCondition() {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!isset($_GET['field']) || !isset($_GET['id'])\n            || !isset($_GET['object_id'])\n        ) {\n            Http::response(400, '`field`, `id`, and `object_id` parameters required');\n        }\n        elseif (!is_numeric($_GET['object_id'])) {\n            Http::response(400, '`object_id` should be an integer');\n        }\n        $fields = SavedSearch::getSearchableFields('Ticket');\n        if (!isset($fields[$_GET['field']])) {\n            Http::response(400, sprintf('%s: No such searchable field'),\n                Format::htmlchars($_GET['field']));\n        }\n\n        list($label, $field) = $fields[$_GET['field']];\n        // Ensure `name` is preserved\n        $field_name = $_GET['field'];\n        $id = $_GET['id'];\n        $object_id = $_GET['object_id'];\n        $condition = new QueueColumnCondition(array());\n        include STAFFINC_DIR . 'templates/queue-column-condition.tmpl.php';\n    }\n\n    function addConditionProperty() {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!isset($_GET['prop']) || !isset($_GET['condition'])) {\n            Http::response(400, '`prop` and `condition` parameters required');\n        }\n\n        $prop = $_GET['prop'];\n        $id = $_GET['condition'];\n        include STAFFINC_DIR . 'templates/queue-column-condition-prop.tmpl.php';\n    }\n\n    function collectQueueCounts($ids=null) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        $criteria = array();\n        if ($ids && is_array($ids))\n            $criteria = array('id__in' => $ids);\n        $counts = SavedQueue::counts($thisstaff, true, $criteria);\n        Http::response(200, false, 'application/json');\n        return $this->encode(Format::number($counts));\n    }\n}\n", "<?php\nglobal $thisstaff;\n\n$parent_id = (isset($_REQUEST['parent_id']) && is_numeric($_REQUEST['parent_id']))\n        ? $_REQUEST['parent_id']\n        : $search->parent_id;\nif ($parent_id\n    && is_numeric($parent_id)\n    && (!($parent = SavedQueue::lookup($parent_id)))\n) {\n    $parent_id = 0;\n}\n\n$editable = $search->checkOwnership($thisstaff);\n$queues = array();\nforeach (CustomQueue::queues() as  $q)\n    $queues[$q->id] = $q->getFullName();\nasort($queues);\n$queues = array(0 => ('\u2014'.__(\"My Searches\").'\u2014')) + $queues;\n$queue = $search;\n$qname = $search->getName() ?:  __('Advanced Ticket Search');\n?>\n<div id=\"advanced-search\" class=\"advanced-search\">\n<h3 class=\"drag-handle\"><?php echo Format::htmlchars($qname); ?></h3>\n<a class=\"close\" href=\"\"><i class=\"icon-remove-circle\"></i></a>\n<hr/>\n<?php\n$info['error'] = $info['error'] ?: $errors['err'];\nif ($info['error']) {\n    echo sprintf('<p id=\"msg_error\">%s</p>', $info['error']);\n} elseif ($info['warn']) {\n    echo sprintf('<p id=\"msg_warning\">%s</p>', $info['warn']);\n} elseif ($info['msg']) {\n    echo sprintf('<p id=\"msg_notice\">%s</p>', $info['msg']);\n}\n\n// Form action\n$action = '#tickets/search';\nif ($search->isSaved() && $search->getId())\n    $action .= sprintf('/%s/save', $search->getId());\nelseif (!$search instanceof AdhocSearch)\n    $action .= '/save';\n?>\n<form action=\"<?php echo $action; ?>\" method=\"post\" name=\"search\" id=\"advsearch\"\n    class=\"<?php echo ($search->isSaved() || $parent) ? 'savedsearch' : 'adhocsearch'; ?>\">\n  <input type=\"hidden\" name=\"id\" value=\"<?php echo $search->getId(); ?>\">\n<?php\nif ($editable) {\n    ?>\n  <div class=\"flex row\">\n    <div class=\"span12\">\n      <select id=\"parent\" name=\"parent_id\" >\n          <?php\nforeach ($queues as $id => $name) {\n    ?>\n          <option value=\"<?php echo $id; ?>\"\n              <?php if ($parent_id == $id) echo 'selected=\"selected\"'; ?>\n              ><?php echo $name; ?></option>\n<?php       } ?>\n      </select>\n    </div>\n   </div>\n<?php\n} ?>\n<ul class=\"clean tabs\">\n    <li class=\"active\"><a href=\"#criteria\"><i class=\"icon-search\"></i> <?php echo __('Criteria'); ?></a></li>\n    <li><a href=\"#columns\"><i class=\"icon-columns\"></i> <?php echo __('Columns'); ?></a></li>\n    <?php\n    if ($search->isSaved()) { ?>\n    <li><a href=\"#settings\"><i class=\"icon-cog\"></i> <?php echo __('Settings'); ?></a></li>\n    <?php\n    } ?>\n</ul>\n\n<div class=\"tab_content\" id=\"criteria\">\n  <div class=\"flex row\">\n    <div class=\"span12\" style=\"overflow-y: auto; height:auto;\">\n      <div class=\"error\"><?php echo Format::htmlchars($errors['criteria']); ?></div>\n      <div class=\"faded <?php echo $parent ? ' ': 'hidden'; ?>\"\n            id=\"inherited-parent\" style=\"margin-bottom: 1em\">\n\n      <div>\n        <strong><a href=\"#\" id=\"parent-info\"><i class=\"icon-caret-right\"></i>&nbsp;<?php\n            echo sprintf('%s (<span id=\"parent-name\">%s</span>)',\n                __('Inherited Criteria'),\n                $parent ? $parent->getName() : '');\n      ?></a></strong>\n      </div>\n      <div id=\"parent-criteria\" class=\"hidden\">\n        <?php echo $parent ? nl2br(Format::htmlchars($parent->describeCriteria())) : ''; ?>\n      </div>\n      </div>\n      <input type=\"hidden\" name=\"a\" value=\"search\">\n     <?php\n        include STAFFINC_DIR . 'templates/advanced-search-criteria.tmpl.php';\n     ?>\n    </div>\n  </div>\n\n</div>\n\n<div class=\"tab_content hidden\" id=\"columns\">\n    <?php\n    include STAFFINC_DIR . \"templates/queue-columns.tmpl.php\";\n    ?>\n</div>\n<?php\nif ($search->isSaved()) { ?>\n<div class=\"tab_content hidden\" id=\"settings\">\n    <?php\n    include STAFFINC_DIR . \"templates/savedqueue-settings.tmpl.php\";\n    ?>\n</div>\n<?php\n} else { // Not saved.\n    $save = (($parent && !$search->isSaved()) || isset($_POST['queue-name']));\n?>\n<div>\n  <div style=\"margin-top:10px;\"><a href=\"#\"\n    id=\"save\"><i class=\"icon-caret-<?php echo $save ? 'down' : 'right';\n    ?>\"></i>&nbsp;<span><?php echo __('Save Search'); ?></span></a></div>\n  <div id=\"save-changes\" class=\"<?php echo $save ? '' : 'hidden'; ?>\" style=\"padding:5px; border-top: 1px dotted #777;\">\n      <?php if ($parent_id) { ?>\n        <input type=\"hidden\" name=\"parent_id\" value=\"<?php echo $parent_id; ?>\">\n      <?php } ?>\n      <div><input name=\"queue-name\" type=\"text\" size=\"40\"\n        value=\"<?php echo Format::htmlchars($search->isSaved() ? $search->getName() :\n        $_POST['queue-name']); ?>\"\n        placeholder=\"<?php echo __('Search Title'); ?>\">\n        <?php\n        if ($search instanceof AdhocSearch && !$search->isSaved()) { ?>\n        <span class=\"buttons\">\n             <button class=\"save button\" type=\"button\"  name=\"save-search\"\n             value=\"save\"><i class=\"icon-save\"></i>  <?php echo $search->id\n             ? __('Save Changes') : __('Save'); ?></button>\n        </span>\n        <?php\n        } ?>\n        </div>\n      <div class=\"error\" id=\"name-error\"><?php echo\n      Format::htmlchars($errors['queue-name']); ?></div>\n  </div>\n </div>\n<?php\n} ?>\n  <hr/>\n <div>\n  <p class=\"full-width\">\n    <span class=\"buttons pull-left\">\n        <input type=\"button\"  name=\"cancel\"  class=\"close\" value=\"<?php echo __('Cancel'); ?>\">\n        <?php\n        if ($search->isSaved()) { ?>\n        <input type=\"button\" name=\"done\" class=\"done\" value=\"<?php echo\n            __('Done'); ?>\" >\n        <?php\n        } ?>\n    </span>\n    <span class=\"buttons pull-right\">\n      <?php\n      if (!$search instanceof AdhocSearch) { ?>\n      <button class=\"save button\" type=\"submit\" name=\"save\" value=\"save\"\n        id=\"do_save\"><i class=\"icon-save\"></i>\n        <?php echo __('Save'); ?></button>\n      <?php\n      } else { ?>\n      <button class=\"button\" type=\"submit\" name=\"submit\" value=\"search\"\n        id=\"do_search\"><i class=\"icon-search\"></i>\n        <?php echo __('Search'); ?></button>\n      <?php\n      } ?>\n    </span>\n   </p>\n </div>\n</form>\n\n<script>\n+function() {\n   // Return a helper with preserved width of cells\n   var fixHelper = function(e, ui) {\n      ui.children().each(function() {\n          $(this).width($(this).width());\n      });\n      return ui;\n   };\n   // Sortable tables for dynamic forms objects\n   $('.sortable-rows').sortable({\n       'helper': fixHelper,\n       'cursor': 'move',\n       'stop': function(e, ui) {\n           var attr = ui.item.parent('tbody').data('sort'),\n               offset = parseInt($('#sort-offset').val(), 10) || 0;\n           warnOnLeave(ui.item);\n           $('input[name^='+attr+']', ui.item.parent('tbody')).each(function(i, el) {\n               $(el).val(i + 1 + offset);\n           });\n       }\n    });\n\n    $('a#parent-info').click(function() {\n        var $this = $(this);\n        $('#parent-criteria').slideToggle('fast', function(){\n           if ($(this).is(\":hidden\"))\n            $this.find('i').removeClass('icon-caret-down').addClass('icon-caret-right');\n           else\n            $this.find('i').removeClass('icon-caret-right').addClass('icon-caret-down');\n        });\n        return false;\n    });\n\n    $('form select#parent').change(function() {\n        var form = $(this).closest('form');\n        var qid = parseInt($(this).val(), 10) || 0;\n\n        if (qid > 0) {\n            $.ajax({\n                type: \"GET\",\n                url: 'ajax.php/queue/'+qid,\n                dataType: 'json',\n                success: function(queue) {\n                    $('#parent-name', form).html(queue.name);\n                    $('#parent-criteria', form).html(queue.criteria);\n                    $('#inherited-parent', form).fadeIn();\n                    }\n                })\n                .done(function() { })\n                .fail(function() { });\n        } else {\n            $('#inherited-parent', form).fadeOut();\n        }\n    });\n\n    $('a#save').click(function() {\n        var $this = $(this);\n        $('#save-changes').slideToggle('fast', function(){\n           if ($(this).is(\":hidden\"))\n            $this.find('i').removeClass('icon-caret-down').addClass('icon-caret-right');\n           else\n            $this.find('i').removeClass('icon-caret-right').addClass('icon-caret-down');\n        });\n        return false;\n    });\n\n    $('form#advsearch').on('keyup change paste', 'input, select, textarea', function() {\n\n        var form = $(this).closest('form');\n        $this = $('#save-changes', form);\n        $('button.save', form).addClass('save pending');\n        $('div.error, div.error-banner', form).html('').hide();\n     });\n\n    $(document).on('click', 'form#advsearch input#reset', function(e) {\n        var f = $(this).closest('form');\n        $('button.save', f).removeClass('save pending');\n        $('div#save-changes', f).hide();\n    });\n\n    $('button[name=save-search]').click(function() {\n        var $form = $(this).closest('form');\n        var id = parseInt($('input[name=id]', $form).val(), 10) || 0;\n        var name = $('input[name=queue-name]', $form).val();\n        if (name.length) {\n            var action = '#tickets/search';\n            if (id > 0)\n                action = action + '/'+id;\n            $form.prop('action', action+'/save');\n            $form.submit();\n        } else {\n            $('div#name-error', $form).html('<?php echo __('Name required');\n                    ?>').show();\n        }\n\n        return false;\n    });\n\n    $('input.done').click(function() {\n        var $form = $(this).closest('form');\n        var id = parseInt($('input[name=id]', $form).val(), 10) || 0;\n        if ($('button.save', $form).hasClass('pending'))\n            alert('Unsaved Changes - save or cancel to discard!');\n        else\n            window.location.href = 'tickets.php?queue='+id;\n    });\n}();\n</script>\n"], "fixing_code": ["<?php\n/*********************************************************************\n    ajax.search.php\n\n    AJAX interface for searches, queue management, etc.\n\n    Jared Hancock <jared@osticket.com>\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2014 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nif(!defined('INCLUDE_DIR')) die('403');\n\ninclude_once(INCLUDE_DIR.'class.ticket.php');\nrequire_once(INCLUDE_DIR.'class.ajax.php');\n\nclass SearchAjaxAPI extends AjaxController {\n\n    function getAdvancedSearchDialog($key=false, $context='advsearch') {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login required');\n\n        $search = new AdhocSearch(array(\n            'root' => 'T',\n            'staff_id' => $thisstaff->getId(),\n            'parent_id' => (int) @$_GET['parent_id'] ?: 0,\n        ));\n        if ($search->parent_id) {\n            $search->flags |= SavedSearch::FLAG_INHERIT_COLUMNS;\n        }\n\n        if (isset($_SESSION[$context]) && $key && $_SESSION[$context][$key])\n            $search->config = $_SESSION[$context][$key];\n\n        $this->_tryAgain($search);\n    }\n\n    function editSearch($id) {\n        global $thisstaff;\n\n        $search = SavedSearch::lookup($id);\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$search || !$search->checkAccess($thisstaff))\n            Http::response(404, 'No such saved search');\n\n        $this->_tryAgain($search);\n    }\n\n    function addField($name) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login required');\n\n        $search = new SavedSearch(array(\n                    'root'=>'T'\n                    ));\n        $searchable = $search->getSupportedMatches();\n        if (!($F = $searchable[$name]))\n            Http::response(404, 'No such field: ', print_r($name, true));\n\n        $fields = SavedSearch::getSearchField($F, $name);\n        $form = new AdvancedSearchForm($fields);\n        // Check the box to search the field by default\n        if ($F = $form->getField(\"{$name}+search\"))\n            $F->value = true;\n\n        ob_start();\n        include STAFFINC_DIR . 'templates/advanced-search-field.tmpl.php';\n        $html = ob_get_clean();\n\n        return $this->encode(array(\n            'success' => true,\n            'html' => $html,\n        ));\n    }\n\n    function doSearch() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        $search = new AdhocSearch(array(\n                    'root' => 'T',\n                    'staff_id' => $thisstaff->getId()));\n\n        $form = $search->getForm($_POST);\n        if (false === $this->_setupSearch($search, $form)) {\n            return;\n        }\n\n        Http::response(200, $this->encode(array(\n            'redirect' => 'tickets.php?queue=adhoc',\n        )));\n    }\n\n    function _hasErrors(SavedSearch $search, $form) {\n        if (!$form->isValid()) {\n            $this->_tryAgain($search, $form);\n            return true;\n        }\n    }\n\n    function _setupSearch(SavedSearch $search, $form, $key='advsearch') {\n        if ($this->_hasErrors($search, $form))\n            return false;\n\n        if ($key) {\n            $keep = array();\n            // Add in new search to the list of recent searches\n            $criteria = $search->isolateCriteria($form->getClean());\n            $token = $this->_hashCriteria($criteria);\n            $keep[$token] = $criteria;\n            // Keep the last 5 recent searches looking from the beginning of\n            // the recent search list\n            if (isset($_SESSION[$key])) {\n                reset($_SESSION[$key]);\n                for ($i = 0; $i < 5; $i++) {\n                    $k = key($_SESSION[$key]);\n                    $v = current($_SESSION[$key]);\n                    if (!$k)\n                        break;\n                    $keep[$k] = $v;\n                }\n            }\n            $_SESSION[$key] = $keep;\n        }\n    }\n\n    function _hashCriteria($criteria, $size=10) {\n        $parts = array();\n        foreach ($criteria as $C) {\n            list($name, $method, $value) = $C;\n            if (is_array($value))\n                $value = implode('+', $value);\n            $parts[] = \"{$name} {$method} {$value}\";\n        }\n        $hash = sha1(implode(' ', $parts), true);\n        return substr(\n            str_replace(array('+','/','='), '', base64_encode($hash)),\n            -$size);\n    }\n\n    function _tryAgain($search, $form=null, $errors=array(), $info=array()) {\n        if (!$form)\n            $form = $search->getForm();\n        include STAFFINC_DIR . 'templates/advanced-search.tmpl.php';\n    }\n\n    function createSearch() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n\n        $search = SavedSearch::create(array(\n                    'title' => __('Add Queue'),\n                    'root' => 'T',\n                    'staff_id' => $thisstaff->getId(),\n                    'parent_id' => (int) $_GET['pid'],\n                    ));\n        $this->_tryAgain($search);\n    }\n\n    function saveSearch($id=0) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        if ($id) { //  update\n            if (!($search = SavedSearch::lookup($id))\n                    || !$search->checkAccess($thisstaff))\n                Http::response(404, 'No such saved search');\n        } else { // new search\n            $search = SavedSearch::create(array(\n                        'root' => 'T',\n                        'staff_id' => $thisstaff->getId()\n                        ));\n        }\n\n        if (false === $this->_saveSearch($search))\n            return;\n\n        $info = array(\n                'msg' => sprintf('%s %s %s',\n                    __('Search'),\n                    $id ? __('updated') : __('created'),\n                    __('successfully')),\n                );\n        $this->_tryAgain($search, null, null, $info);\n    }\n\n    function _saveSearch(SavedSearch $search) {\n        $_POST['queue-name'] = Format::htmlchars($_POST['queue-name']);\n\n        // Validate the form.\n        $form = $search->getForm($_POST);\n        if ($this->_hasErrors($search, $form))\n            return false;\n\n        $errors = array();\n        if (!$search->update($_POST, $errors)\n                || !$search->save(true)) {\n\n            $form->addError(sprintf(\n                        __('Unable to update %s. Correct error(s) below and try again.'),\n                        __('queue')));\n            $this->_tryAgain($search, $form, $errors);\n            return false;\n        }\n\n        if (false === $this->_setupSearch($search, $form)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function editColumn($column_id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!($column = QueueColumn::lookup($column_id))) {\n            Http::response(404, 'No such queue');\n        }\n\n        if ($_POST) {\n            $data_form = $column->getDataConfigForm($_POST);\n            if ($data_form->isValid()) {\n                $column->update($_POST, 'Ticket');\n                if ($column->save())\n                    Http::response(201, 'Successfully updated');\n            }\n        }\n\n        $root = 'Ticket';\n        include STAFFINC_DIR . 'templates/queue-column-edit.tmpl.php';\n    }\n\n    function editSort($sort_id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!($sort = QueueSort::lookup($sort_id))) {\n            Http::response(404, 'No such queue sort');\n        }\n\n        $data_form = $sort->getDataConfigForm($_POST ?: false);\n        if ($_POST) {\n            if ($data_form->isValid()) {\n                $sort->update($data_form->getClean() + $_POST);\n                if ($sort->save())\n                    Http::response(201, 'Successfully updated');\n            }\n        }\n\n        include STAFFINC_DIR . 'templates/queue-sorting-edit.tmpl.php';\n    }\n\n    function getQueue($id) {\n        global $thisstaff;\n\n        $queue = SavedSearch::lookup($id);\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$queue || !$queue->checkAccess($thisstaff))\n            Http::response(404, 'No such queue');\n\n        Http::response(200, $this->encode(array(\n            'name' => $queue->getName(),\n            'criteria' => nl2br(Format::htmlchars($queue->describeCriteria())),\n        )));\n    }\n\n    function deleteQueue($id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        if ($id && (!($queue = CustomQueue::lookup($id)))) {\n            Http::response(404, 'No such queue');\n        }\n        if (!$queue || !$queue->checkAccess($thisstaff)) {\n            Http::response(404, 'No such queue');\n        }\n        if ($_POST) {\n            if (!$queue->delete()) {\n                Http::response(500, 'Unable to delete queue');\n            }\n            Http::response(201, 'Have a nice day');\n           $_SESSION['::sysmsgs']['msg'] = sprintf(__( 'Successfully deleted%s.'),\n                       $queue->getName());\n        }\n\n       $info = array(\n               ':action' => sprintf('#queue/%s/delete', $queue->getId()),\n               ':title' => sprintf('%s %s', __('Please Confirm'), __('Queue Deletion')),\n               'warn' => __('Deleted Queues cannot be recovered'),\n               ':message' => sprintf('Are you sure you want to delete %s queue?', $queue->getName()),\n               ':confirm' => 'Yes, Delete!'\n               );\n\n        include STAFFINC_DIR . 'templates/confirm.tmpl.php';\n    }\n\n    function previewQueue($id=false) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        if ($id && (!($queue = CustomQueue::lookup($id)))) {\n            Http::response(404, 'No such queue');\n        }\n\n        if (!$queue) {\n            $queue = CustomQueue::create();\n        }\n\n        $queue->update($_POST);\n\n        $form = $queue->getForm($_POST);\n        $tickets = $queue->getQuery($form);\n        $count = 10; // count($queue->getBasicQuery($form));\n\n        include STAFFINC_DIR . 'templates/queue-preview.tmpl.php';\n    }\n\n    function addCondition() {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!isset($_GET['field']) || !isset($_GET['id'])\n            || !isset($_GET['object_id'])\n        ) {\n            Http::response(400, '`field`, `id`, and `object_id` parameters required');\n        }\n        elseif (!is_numeric($_GET['object_id'])) {\n            Http::response(400, '`object_id` should be an integer');\n        }\n        $fields = SavedSearch::getSearchableFields('Ticket');\n        if (!isset($fields[$_GET['field']])) {\n            Http::response(400, sprintf('%s: No such searchable field'),\n                Format::htmlchars($_GET['field']));\n        }\n\n        list($label, $field) = $fields[$_GET['field']];\n        // Ensure `name` is preserved\n        $field_name = $_GET['field'];\n        $id = $_GET['id'];\n        $object_id = $_GET['object_id'];\n        $condition = new QueueColumnCondition(array());\n        include STAFFINC_DIR . 'templates/queue-column-condition.tmpl.php';\n    }\n\n    function addConditionProperty() {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!isset($_GET['prop']) || !isset($_GET['condition'])) {\n            Http::response(400, '`prop` and `condition` parameters required');\n        }\n\n        $prop = $_GET['prop'];\n        $id = $_GET['condition'];\n        include STAFFINC_DIR . 'templates/queue-column-condition-prop.tmpl.php';\n    }\n\n    function collectQueueCounts($ids=null) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        $criteria = array();\n        if ($ids && is_array($ids))\n            $criteria = array('id__in' => $ids);\n        $counts = SavedQueue::counts($thisstaff, true, $criteria);\n        Http::response(200, false, 'application/json');\n        return $this->encode(Format::number($counts));\n    }\n}\n", "<?php\nglobal $thisstaff;\n\n$parent_id = (int) ((isset($_REQUEST['parent_id']) && is_numeric($_REQUEST['parent_id']))\n        ? $_REQUEST['parent_id']\n        : $search->parent_id);\nif ($parent_id\n    && is_numeric($parent_id)\n    && (!($parent = SavedQueue::lookup($parent_id)))\n) {\n    $parent_id = 0;\n}\n\n$editable = $search->checkOwnership($thisstaff);\n$queues = array();\nforeach (CustomQueue::queues() as  $q)\n    $queues[$q->id] = $q->getFullName();\nasort($queues);\n$queues = array(0 => ('\u2014'.__(\"My Searches\").'\u2014')) + $queues;\n$queue = $search;\n$qname = $search->getName() ?:  __('Advanced Ticket Search');\n?>\n<div id=\"advanced-search\" class=\"advanced-search\">\n<h3 class=\"drag-handle\"><?php echo Format::htmlchars($qname); ?></h3>\n<a class=\"close\" href=\"\"><i class=\"icon-remove-circle\"></i></a>\n<hr/>\n<?php\n$info['error'] = $info['error'] ?: $errors['err'];\nif ($info['error']) {\n    echo sprintf('<p id=\"msg_error\">%s</p>', $info['error']);\n} elseif ($info['warn']) {\n    echo sprintf('<p id=\"msg_warning\">%s</p>', $info['warn']);\n} elseif ($info['msg']) {\n    echo sprintf('<p id=\"msg_notice\">%s</p>', $info['msg']);\n}\n\n// Form action\n$action = '#tickets/search';\nif ($search->isSaved() && $search->getId())\n    $action .= sprintf('/%s/save', $search->getId());\nelseif (!$search instanceof AdhocSearch)\n    $action .= '/save';\n?>\n<form action=\"<?php echo $action; ?>\" method=\"post\" name=\"search\" id=\"advsearch\"\n    class=\"<?php echo ($search->isSaved() || $parent) ? 'savedsearch' : 'adhocsearch'; ?>\">\n  <input type=\"hidden\" name=\"id\" value=\"<?php echo $search->getId(); ?>\">\n<?php\nif ($editable) {\n    ?>\n  <div class=\"flex row\">\n    <div class=\"span12\">\n      <select id=\"parent\" name=\"parent_id\" >\n          <?php\nforeach ($queues as $id => $name) {\n    ?>\n          <option value=\"<?php echo $id; ?>\"\n              <?php if ($parent_id == $id) echo 'selected=\"selected\"'; ?>\n              ><?php echo $name; ?></option>\n<?php       } ?>\n      </select>\n    </div>\n   </div>\n<?php\n} ?>\n<ul class=\"clean tabs\">\n    <li class=\"active\"><a href=\"#criteria\"><i class=\"icon-search\"></i> <?php echo __('Criteria'); ?></a></li>\n    <li><a href=\"#columns\"><i class=\"icon-columns\"></i> <?php echo __('Columns'); ?></a></li>\n    <?php\n    if ($search->isSaved()) { ?>\n    <li><a href=\"#settings\"><i class=\"icon-cog\"></i> <?php echo __('Settings'); ?></a></li>\n    <?php\n    } ?>\n</ul>\n\n<div class=\"tab_content\" id=\"criteria\">\n  <div class=\"flex row\">\n    <div class=\"span12\" style=\"overflow-y: auto; height:auto;\">\n      <div class=\"error\"><?php echo Format::htmlchars($errors['criteria']); ?></div>\n      <div class=\"faded <?php echo $parent ? ' ': 'hidden'; ?>\"\n            id=\"inherited-parent\" style=\"margin-bottom: 1em\">\n\n      <div>\n        <strong><a href=\"#\" id=\"parent-info\"><i class=\"icon-caret-right\"></i>&nbsp;<?php\n            echo sprintf('%s (<span id=\"parent-name\">%s</span>)',\n                __('Inherited Criteria'),\n                $parent ? $parent->getName() : '');\n      ?></a></strong>\n      </div>\n      <div id=\"parent-criteria\" class=\"hidden\">\n        <?php echo $parent ? nl2br(Format::htmlchars($parent->describeCriteria())) : ''; ?>\n      </div>\n      </div>\n      <input type=\"hidden\" name=\"a\" value=\"search\">\n     <?php\n        include STAFFINC_DIR . 'templates/advanced-search-criteria.tmpl.php';\n     ?>\n    </div>\n  </div>\n\n</div>\n\n<div class=\"tab_content hidden\" id=\"columns\">\n    <?php\n    include STAFFINC_DIR . \"templates/queue-columns.tmpl.php\";\n    ?>\n</div>\n<?php\nif ($search->isSaved()) { ?>\n<div class=\"tab_content hidden\" id=\"settings\">\n    <?php\n    include STAFFINC_DIR . \"templates/savedqueue-settings.tmpl.php\";\n    ?>\n</div>\n<?php\n} else { // Not saved.\n    $save = (($parent && !$search->isSaved()) || isset($_POST['queue-name']));\n?>\n<div>\n  <div style=\"margin-top:10px;\"><a href=\"#\"\n    id=\"save\"><i class=\"icon-caret-<?php echo $save ? 'down' : 'right';\n    ?>\"></i>&nbsp;<span><?php echo __('Save Search'); ?></span></a></div>\n  <div id=\"save-changes\" class=\"<?php echo $save ? '' : 'hidden'; ?>\" style=\"padding:5px; border-top: 1px dotted #777;\">\n      <?php if ($parent_id) { ?>\n        <input type=\"hidden\" name=\"parent_id\" value=\"<?php echo $parent_id; ?>\">\n      <?php } ?>\n      <div><input name=\"queue-name\" type=\"text\" size=\"40\"\n        value=\"<?php echo Format::htmlchars($search->isSaved() ? $search->getName() :\n        $_POST['queue-name']); ?>\"\n        placeholder=\"<?php echo __('Search Title'); ?>\">\n        <?php\n        if ($search instanceof AdhocSearch && !$search->isSaved()) { ?>\n        <span class=\"buttons\">\n             <button class=\"save button\" type=\"button\"  name=\"save-search\"\n             value=\"save\"><i class=\"icon-save\"></i>  <?php echo $search->id\n             ? __('Save Changes') : __('Save'); ?></button>\n        </span>\n        <?php\n        } ?>\n        </div>\n      <div class=\"error\" id=\"name-error\"><?php echo\n      Format::htmlchars($errors['queue-name']); ?></div>\n  </div>\n </div>\n<?php\n} ?>\n  <hr/>\n <div>\n  <p class=\"full-width\">\n    <span class=\"buttons pull-left\">\n        <input type=\"button\"  name=\"cancel\"  class=\"close\" value=\"<?php echo __('Cancel'); ?>\">\n        <?php\n        if ($search->isSaved()) { ?>\n        <input type=\"button\" name=\"done\" class=\"done\" value=\"<?php echo\n            __('Done'); ?>\" >\n        <?php\n        } ?>\n    </span>\n    <span class=\"buttons pull-right\">\n      <?php\n      if (!$search instanceof AdhocSearch) { ?>\n      <button class=\"save button\" type=\"submit\" name=\"save\" value=\"save\"\n        id=\"do_save\"><i class=\"icon-save\"></i>\n        <?php echo __('Save'); ?></button>\n      <?php\n      } else { ?>\n      <button class=\"button\" type=\"submit\" name=\"submit\" value=\"search\"\n        id=\"do_search\"><i class=\"icon-search\"></i>\n        <?php echo __('Search'); ?></button>\n      <?php\n      } ?>\n    </span>\n   </p>\n </div>\n</form>\n\n<script>\n+function() {\n   // Return a helper with preserved width of cells\n   var fixHelper = function(e, ui) {\n      ui.children().each(function() {\n          $(this).width($(this).width());\n      });\n      return ui;\n   };\n   // Sortable tables for dynamic forms objects\n   $('.sortable-rows').sortable({\n       'helper': fixHelper,\n       'cursor': 'move',\n       'stop': function(e, ui) {\n           var attr = ui.item.parent('tbody').data('sort'),\n               offset = parseInt($('#sort-offset').val(), 10) || 0;\n           warnOnLeave(ui.item);\n           $('input[name^='+attr+']', ui.item.parent('tbody')).each(function(i, el) {\n               $(el).val(i + 1 + offset);\n           });\n       }\n    });\n\n    $('a#parent-info').click(function() {\n        var $this = $(this);\n        $('#parent-criteria').slideToggle('fast', function(){\n           if ($(this).is(\":hidden\"))\n            $this.find('i').removeClass('icon-caret-down').addClass('icon-caret-right');\n           else\n            $this.find('i').removeClass('icon-caret-right').addClass('icon-caret-down');\n        });\n        return false;\n    });\n\n    $('form select#parent').change(function() {\n        var form = $(this).closest('form');\n        var qid = parseInt($(this).val(), 10) || 0;\n\n        if (qid > 0) {\n            $.ajax({\n                type: \"GET\",\n                url: 'ajax.php/queue/'+qid,\n                dataType: 'json',\n                success: function(queue) {\n                    $('#parent-name', form).html(queue.name);\n                    $('#parent-criteria', form).html(queue.criteria);\n                    $('#inherited-parent', form).fadeIn();\n                    }\n                })\n                .done(function() { })\n                .fail(function() { });\n        } else {\n            $('#inherited-parent', form).fadeOut();\n        }\n    });\n\n    $('a#save').click(function() {\n        var $this = $(this);\n        $('#save-changes').slideToggle('fast', function(){\n           if ($(this).is(\":hidden\"))\n            $this.find('i').removeClass('icon-caret-down').addClass('icon-caret-right');\n           else\n            $this.find('i').removeClass('icon-caret-right').addClass('icon-caret-down');\n        });\n        return false;\n    });\n\n    $('form#advsearch').on('keyup change paste', 'input, select, textarea', function() {\n\n        var form = $(this).closest('form');\n        $this = $('#save-changes', form);\n        $('button.save', form).addClass('save pending');\n        $('div.error, div.error-banner', form).html('').hide();\n     });\n\n    $(document).on('click', 'form#advsearch input#reset', function(e) {\n        var f = $(this).closest('form');\n        $('button.save', f).removeClass('save pending');\n        $('div#save-changes', f).hide();\n    });\n\n    $('button[name=save-search]').click(function() {\n        var $form = $(this).closest('form');\n        var id = parseInt($('input[name=id]', $form).val(), 10) || 0;\n        var name = $('input[name=queue-name]', $form).val();\n        if (name.length) {\n            var action = '#tickets/search';\n            if (id > 0)\n                action = action + '/'+id;\n            $form.prop('action', action+'/save');\n            $form.submit();\n        } else {\n            $('div#name-error', $form).html('<?php echo __('Name required');\n                    ?>').show();\n        }\n\n        return false;\n    });\n\n    $('input.done').click(function() {\n        var $form = $(this).closest('form');\n        var id = parseInt($('input[name=id]', $form).val(), 10) || 0;\n        if ($('button.save', $form).hasClass('pending'))\n            alert('Unsaved Changes - save or cancel to discard!');\n        else\n            window.location.href = 'tickets.php?queue='+id;\n    });\n}();\n</script>\n"], "filenames": ["include/ajax.search.php", "include/staff/templates/advanced-search.tmpl.php"], "buggy_code_start_loc": [34, 4], "buggy_code_end_loc": [172, 7], "fixing_code_start_loc": [34, 4], "fixing_code_end_loc": [172, 7], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository osticket/osticket prior to v1.16.6.", "other": {"cve": {"id": "CVE-2023-1315", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-10T16:15:10.623", "lastModified": "2023-03-13T03:46:02.247", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository osticket/osticket prior to v1.16.6."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enhancesoft:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.6", "matchCriteriaId": "2B613AD0-4A4B-4AE9-8971-66464AEE67B6"}]}]}], "references": [{"url": "https://github.com/osticket/osticket/commit/ec6043935b4e30b5c0dfa544e256717182808a2e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/70a7fd8c-7e6f-4a43-9f8c-163b8967b16e", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osticket/osticket/commit/ec6043935b4e30b5c0dfa544e256717182808a2e"}}