{"buggy_code": ["<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Class UserCredentialController\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass UserCredentialController extends BaseController\n{\n    /**\n     * Password modification form\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function changePassword(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        return $this->response->html($this->helper->layout->user('user_credential/password', array(\n            'values' => $values + array('id' => $user['id']),\n            'errors' => $errors,\n            'user' => $user,\n        )));\n    }\n\n    /**\n     * Save new password\n     *\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function savePassword()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues();\n\n        list($valid, $errors) = $this->userValidator->validatePasswordModification($values);\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('Password modified successfully.'));\n                $this->userLockingModel->resetFailedLogin($user['username']);\n                $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to change the password.'));\n            }\n        }\n\n        $this->changePassword($values, $errors);\n    }\n\n    /**\n     * Display a form to edit authentication\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function changeAuthentication(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        if (empty($values)) {\n            $values = $user;\n            unset($values['password']);\n        }\n\n        return $this->response->html($this->helper->layout->user('user_credential/authentication', array(\n            'values' => $values,\n            'errors' => $errors,\n            'user' => $user,\n        )));\n    }\n\n    /**\n     * Save authentication\n     *\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function saveAuthentication()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues() + array('disable_login_form' => 0, 'is_ldap_user' => 0);\n        list($valid, $errors) = $this->userValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('User updated successfully.'));\n                $this->response->redirect($this->helper->url->to('UserCredentialController', 'changeAuthentication', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update this user.'));\n            }\n        }\n\n        $this->changeAuthentication($values, $errors);\n    }\n\n    /**\n     * Unlock user\n     */\n    public function unlock()\n    {\n        $user = $this->getUser();\n        $this->checkCSRFParam();\n\n        if ($this->userLockingModel->resetFailedLogin($user['username'])) {\n            $this->flash->success(t('User unlocked successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to unlock the user.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Validator;\n\nuse SimpleValidator\\Validator;\nuse SimpleValidator\\Validators;\nuse Kanboard\\Model\\UserModel;\n\n/**\n * User Validator\n *\n * @package  Kanboard\\Validator\n * @author   Frederic Guillot\n */\nclass UserValidator extends BaseValidator\n{\n    /**\n     * Common validation rules\n     *\n     * @access protected\n     * @return array\n     */\n    protected function commonValidationRules()\n    {\n        return array(\n            new Validators\\MaxLength('role', t('The maximum length is %d characters', 25), 25),\n            new Validators\\MaxLength('username', t('The maximum length is %d characters', 50), 50),\n            new Validators\\Unique('username', t('This username is already taken'), $this->db->getConnection(), UserModel::TABLE, 'id'),\n            new Validators\\Email('email', t('Email address invalid')),\n            new Validators\\Integer('is_ldap_user', t('This value must be an integer')),\n        );\n    }\n\n    /**\n     * Validate user creation\n     *\n     * @access public\n     * @param  array   $values           Form values\n     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors\n     */\n    public function validateCreation(array $values)\n    {\n        $rules = array(\n            new Validators\\Required('username', t('The username is required')),\n        );\n\n        if (isset($values['is_ldap_user']) && $values['is_ldap_user'] == 1) {\n            $v = new Validator($values, array_merge($rules, $this->commonValidationRules()));\n        } else {\n            $v = new Validator($values, array_merge($rules, $this->commonValidationRules(), $this->commonPasswordValidationRules()));\n        }\n\n        return array(\n            $v->execute(),\n            $v->getErrors()\n        );\n    }\n\n    /**\n     * Validate user modification\n     *\n     * @access public\n     * @param  array   $values           Form values\n     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors\n     */\n    public function validateModification(array $values)\n    {\n        $rules = array(\n            new Validators\\Required('id', t('The user id is required')),\n            new Validators\\Required('username', t('The username is required')),\n        );\n\n        $v = new Validator($values, array_merge($rules, $this->commonValidationRules()));\n\n        return array(\n            $v->execute(),\n            $v->getErrors()\n        );\n    }\n\n    /**\n     * Validate user API modification\n     *\n     * @access public\n     * @param  array   $values           Form values\n     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors\n     */\n    public function validateApiModification(array $values)\n    {\n        $rules = array(\n            new Validators\\Required('id', t('The user id is required')),\n        );\n\n        $v = new Validator($values, array_merge($rules, $this->commonValidationRules()));\n\n        return array(\n            $v->execute(),\n            $v->getErrors()\n        );\n    }\n\n    /**\n     * Validate password modification\n     *\n     * @access public\n     * @param  array   $values           Form values\n     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors\n     */\n    public function validatePasswordModification(array $values)\n    {\n        $rules = array(\n            new Validators\\Required('id', t('The user id is required')),\n            new Validators\\Required('current_password', t('The current password is required')),\n        );\n\n        $v = new Validator($values, array_merge($rules, $this->commonPasswordValidationRules()));\n\n        if ($v->execute()) {\n            if ($this->authenticationManager->passwordAuthentication($this->userSession->getUsername(), $values['current_password'], false)) {\n                return array(true, array());\n            } else {\n                return array(false, array('current_password' => array(t('Wrong password'))));\n            }\n        }\n\n        return array(false, $v->getErrors());\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Class UserCredentialController\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass UserCredentialController extends BaseController\n{\n    /**\n     * Password modification form\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function changePassword(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        return $this->response->html($this->helper->layout->user('user_credential/password', array(\n            'values' => $values + array('id' => $user['id']),\n            'errors' => $errors,\n            'user' => $user,\n        )));\n    }\n\n    /**\n     * Save new password\n     *\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function savePassword()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues();\n\n        list($valid, $errors) = $this->userValidator->validatePasswordModification($values);\n\n        if (! $this->userSession->isAdmin()) {\n            $values['id'] = $this->userSession->getId();\n        }\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('Password modified successfully.'));\n                $this->userLockingModel->resetFailedLogin($user['username']);\n                $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to change the password.'));\n            }\n        }\n\n        $this->changePassword($values, $errors);\n    }\n\n    /**\n     * Display a form to edit authentication\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function changeAuthentication(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        if (empty($values)) {\n            $values = $user;\n            unset($values['password']);\n        }\n\n        return $this->response->html($this->helper->layout->user('user_credential/authentication', array(\n            'values' => $values,\n            'errors' => $errors,\n            'user' => $user,\n        )));\n    }\n\n    /**\n     * Save authentication\n     *\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function saveAuthentication()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues() + array('disable_login_form' => 0, 'is_ldap_user' => 0);\n        list($valid, $errors) = $this->userValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('User updated successfully.'));\n                $this->response->redirect($this->helper->url->to('UserCredentialController', 'changeAuthentication', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update this user.'));\n            }\n        }\n\n        $this->changeAuthentication($values, $errors);\n    }\n\n    /**\n     * Unlock user\n     */\n    public function unlock()\n    {\n        $user = $this->getUser();\n        $this->checkCSRFParam();\n\n        if ($this->userLockingModel->resetFailedLogin($user['username'])) {\n            $this->flash->success(t('User unlocked successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to unlock the user.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Validator;\n\nuse SimpleValidator\\Validator;\nuse SimpleValidator\\Validators;\nuse Kanboard\\Model\\UserModel;\n\n/**\n * User Validator\n *\n * @package  Kanboard\\Validator\n * @author   Frederic Guillot\n */\nclass UserValidator extends BaseValidator\n{\n    /**\n     * Common validation rules\n     *\n     * @access protected\n     * @return array\n     */\n    protected function commonValidationRules()\n    {\n        return array(\n            new Validators\\MaxLength('role', t('The maximum length is %d characters', 25), 25),\n            new Validators\\MaxLength('username', t('The maximum length is %d characters', 50), 50),\n            new Validators\\Unique('username', t('This username is already taken'), $this->db->getConnection(), UserModel::TABLE, 'id'),\n            new Validators\\Email('email', t('Email address invalid')),\n            new Validators\\Integer('is_ldap_user', t('This value must be an integer')),\n        );\n    }\n\n    /**\n     * Validate user creation\n     *\n     * @access public\n     * @param  array   $values           Form values\n     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors\n     */\n    public function validateCreation(array $values)\n    {\n        $rules = array(\n            new Validators\\Required('username', t('The username is required')),\n        );\n\n        if (isset($values['is_ldap_user']) && $values['is_ldap_user'] == 1) {\n            $v = new Validator($values, array_merge($rules, $this->commonValidationRules()));\n        } else {\n            $v = new Validator($values, array_merge($rules, $this->commonValidationRules(), $this->commonPasswordValidationRules()));\n        }\n\n        return array(\n            $v->execute(),\n            $v->getErrors()\n        );\n    }\n\n    /**\n     * Validate user modification\n     *\n     * @access public\n     * @param  array   $values           Form values\n     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors\n     */\n    public function validateModification(array $values)\n    {\n        $rules = array(\n            new Validators\\Required('id', t('The user id is required')),\n            new Validators\\Required('username', t('The username is required')),\n        );\n\n        $v = new Validator($values, array_merge($rules, $this->commonValidationRules()));\n\n        return array(\n            $v->execute(),\n            $v->getErrors()\n        );\n    }\n\n    /**\n     * Validate user API modification\n     *\n     * @access public\n     * @param  array   $values           Form values\n     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors\n     */\n    public function validateApiModification(array $values)\n    {\n        $rules = array(\n            new Validators\\Required('id', t('The user id is required')),\n        );\n\n        $v = new Validator($values, array_merge($rules, $this->commonValidationRules()));\n\n        return array(\n            $v->execute(),\n            $v->getErrors()\n        );\n    }\n\n    /**\n     * Validate password modification\n     *\n     * @access public\n     * @param  array   $values           Form values\n     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors\n     */\n    public function validatePasswordModification(array $values)\n    {\n        $rules = array(\n            new Validators\\Required('id', t('The user id is required')),\n            new Validators\\Required('current_password', t('The current password is required')),\n        );\n\n        $v = new Validator($values, array_merge($rules, $this->commonPasswordValidationRules()));\n\n        if ($v->execute()) {\n            if (! $this->userSession->isAdmin() && $values['id'] != $this->userSession->getId()) {\n                return array(false, array('current_password' => array('Invalid User ID')));\n            }\n\n            if ($this->authenticationManager->passwordAuthentication($this->userSession->getUsername(), $values['current_password'], false)) {\n                return array(true, array());\n            } else {\n                return array(false, array('current_password' => array(t('Wrong password'))));\n            }\n        }\n\n        return array(false, $v->getErrors());\n    }\n}\n"], "filenames": ["app/Controller/UserCredentialController.php", "app/Validator/UserValidator.php"], "buggy_code_start_loc": [44, 118], "buggy_code_end_loc": [44, 118], "fixing_code_start_loc": [45, 119], "fixing_code_end_loc": [49, 123], "type": "CWE-640", "message": "An authenticated standard user could reset the password of other users (including the admin) by altering form data. Affects kanboard before 1.0.46.", "other": {"cve": {"id": "CVE-2017-12850", "sourceIdentifier": "cve@mitre.org", "published": "2017-08-14T20:29:00.183", "lastModified": "2017-08-24T15:51:40.963", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An authenticated standard user could reset the password of other users (including the admin) by altering form data. Affects kanboard before 1.0.46."}, {"lang": "es", "value": "Un usuario est\u00e1ndar autenticado podr\u00eda resetear la contrase\u00f1a de otros usuarios (incluyendo al administrador) alterando los datos del formulario. Afecta a kanboard en versiones anteriores a la 1.0.46."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-640"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.0.45", "matchCriteriaId": "BF0BD9E9-7C97-4DAD-842F-0D05D1EF2EF9"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/100352", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/kanboard/kanboard/commit/88dd6abbf3f519897f2f6280e95c9eec9123a4ae", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kanboard/kanboard/commit/88dd6abbf3f519897f2f6280e95c9eec9123a4ae"}}