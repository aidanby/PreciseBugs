{"buggy_code": ["# Addressable 2.8.0\n- no longer replaces `+` with spaces in queries for non-http(s) schemes\n- fixed encoding ipv6 literals\n- the `:compacted` flag for `normalized_query` now dedupes parameters\n- fix broken `escape_component` alias\n- dropping support for Ruby 2.0 and 2.1\n- adding Ruby 3.0 compatibility for development tasks\n- drop support for `rack-mount` and remove Addressable::Template#generate\n- performance improvements\n- switch CI/CD to GitHub Actions\n\n# Addressable 2.7.0\n- added `:compacted` flag to `normalized_query`\n- `heuristic_parse` handles `mailto:` more intuitively\n- dropped explicit support for JRuby 9.0.5.0\n- compatibility w/ public_suffix 4.x\n- performance improvements\n\n# Addressable 2.6.0\n- added `tld=` method to allow assignment to the public suffix\n- most `heuristic_parse` patterns are now case-insensitive\n- `heuristic_parse` handles more `file://` URI variations\n- fixes bug in `heuristic_parse` when uri starts with digit\n- fixes bug in `request_uri=` with query strings\n- fixes template issues with `nil` and `?` operator\n- `frozen_string_literal` pragmas added\n- minor performance improvements in regexps\n- fixes to eliminate warnings\n\n# Addressable 2.5.2\n- better support for frozen string literals\n- fixed bug w/ uppercase characters in scheme\n- IDNA errors w/ emoji URLs\n- compatibility w/ public_suffix 3.x\n\n# Addressable 2.5.1\n- allow unicode normalization to be disabled for URI Template expansion\n- removed duplicate test\n\n# Addressable 2.5.0\n- dropping support for Ruby 1.9\n- adding support for Ruby 2.4 preview\n- add support for public suffixes and tld; first runtime dependency\n- hostname escaping should match RFC; underscores in hostnames no longer escaped\n- paths beginning with // and missing an authority are now considered invalid\n- validation now also takes place after setting a path\n- handle backslashes in authority more like a browser for `heuristic_parse`\n- unescaped backslashes in host now raise an `InvalidURIError`\n- `merge!`, `join!`, `omit!` and `normalize!` don't disable deferred validation\n- `heuristic_parse` now trims whitespace before parsing\n- host parts longer than 63 bytes will be ignored and not passed to libidn\n- normalized values always encoded as UTF-8\n\n# Addressable 2.4.0\n- support for 1.8.x dropped\n- double quotes in a host now raises an error\n- newlines in host will no longer get unescaped during normalization\n- stricter handling of bogus scheme values\n- stricter handling of encoded port values\n- calling `require 'addressable'` will now load both the URI and Template files\n- assigning to the `hostname` component with an `IPAddr` object is now supported\n- assigning to the `origin` component is now supported\n- fixed minor bug where an exception would be thrown for a missing ACE suffix\n- better partial expansion of URI templates\n\n# Addressable 2.3.8\n- fix warnings\n- update dependency gems\n- support for 1.8.x officially deprecated\n\n# Addressable 2.3.7\n- fix scenario in which invalid URIs don't get an exception until inspected\n- handle hostnames with two adjacent periods correctly\n- upgrade of RSpec\n\n# Addressable 2.3.6\n- normalization drops empty query string\n- better handling in template extract for missing values\n- template modifier for `'?'` now treated as optional\n- fixed issue where character class parameters were modified\n- templates can now be tested for equality\n- added `:sorted` option to normalization of query strings\n- fixed issue with normalization of hosts given in `'example.com.'` form\n\n# Addressable 2.3.5\n- added Addressable::URI#empty? method\n- Addressable::URI#hostname methods now strip square brackets from IPv6 hosts\n- compatibility with Net::HTTP in Ruby 2.0.0\n- Addressable::URI#route_from should always give relative URIs\n\n# Addressable 2.3.4\n- fixed issue with encoding altering its inputs\n- query string normalization now leaves ';' characters alone\n- FakeFS is detected before attempting to load unicode tables\n- additional testing to ensure frozen objects don't cause problems\n\n# Addressable 2.3.3\n- fixed issue with converting common primitives during template expansion\n- fixed port encoding issue\n- removed a few warnings\n- normalize should now ignore %2B in query strings\n- the IDNA logic should now be handled by libidn in Ruby 1.9\n- no template match should now result in nil instead of an empty MatchData\n- added license information to gemspec\n\n# Addressable 2.3.2\n- added Addressable::URI#default_port method\n- fixed issue with Marshalling Unicode data on Windows\n- improved heuristic parsing to better handle IPv4 addresses\n\n# Addressable 2.3.1\n- fixed missing unicode data file\n\n# Addressable 2.3.0\n- updated Addressable::Template to use RFC 6570, level 4\n- fixed compatibility problems with some versions of Ruby\n- moved unicode tables into a data file for performance reasons\n- removing support for multiple query value notations\n\n# Addressable 2.2.8\n- fixed issues with dot segment removal code\n- form encoding can now handle multiple values per key\n- updated development environment\n\n# Addressable 2.2.7\n- fixed issues related to Addressable::URI#query_values=\n- the Addressable::URI.parse method is now polymorphic\n\n# Addressable 2.2.6\n- changed the way ambiguous paths are handled\n- fixed bug with frozen URIs\n- https supported in heuristic parsing\n\n# Addressable 2.2.5\n- 'parsing' a pre-parsed URI object is now a dup operation\n- introduced conditional support for libidn\n- fixed normalization issue on ampersands in query strings\n- added additional tests around handling of query strings\n\n# Addressable 2.2.4\n- added origin support from draft-ietf-websec-origin-00\n- resolved issue with attempting to navigate below root\n- fixed bug with string splitting in query strings\n\n# Addressable 2.2.3\n- added :flat_array notation for query strings\n\n# Addressable 2.2.2\n- fixed issue with percent escaping of '+' character in query strings\n\n# Addressable 2.2.1\n- added support for application/x-www-form-urlencoded.\n\n# Addressable 2.2.0\n- added site methods\n- improved documentation\n\n# Addressable 2.1.2\n- added HTTP request URI methods\n- better handling of Windows file paths\n- validation_deferred boolean replaced with defer_validation block\n- normalization of percent-encoded paths should now be correct\n- fixed issue with constructing URIs with relative paths\n- fixed warnings\n\n# Addressable 2.1.1\n- more type checking changes\n- fixed issue with unicode normalization\n- added method to find template defaults\n- symbolic keys are now allowed in template mappings\n- numeric values and symbolic values are now allowed in template mappings\n\n# Addressable 2.1.0\n- refactored URI template support out into its own class\n- removed extract method due to being useless and unreliable\n- removed Addressable::URI.expand_template\n- removed Addressable::URI#extract_mapping\n- added partial template expansion\n- fixed minor bugs in the parse and heuristic_parse methods\n- fixed incompatibility with Ruby 1.9.1\n- fixed bottleneck in Addressable::URI#hash and Addressable::URI#to_s\n- fixed unicode normalization exception\n- updated query_values methods to better handle subscript notation\n- worked around issue with freezing URIs\n- improved specs\n\n# Addressable 2.0.2\n- fixed issue with URI template expansion\n- fixed issue with percent escaping characters 0-15\n\n# Addressable 2.0.1\n- fixed issue with query string assignment\n- fixed issue with improperly encoded components\n\n# Addressable 2.0.0\n- the initialize method now takes an options hash as its only parameter\n- added query_values method to URI class\n- completely replaced IDNA implementation with pure Ruby\n- renamed Addressable::ADDRESSABLE_VERSION to Addressable::VERSION\n- completely reworked the Rakefile\n- changed the behavior of the port method significantly\n- Addressable::URI.encode_segment, Addressable::URI.unencode_segment renamed\n- documentation is now in YARD format\n- more rigorous type checking\n- to_str method implemented, implicit conversion to Strings now allowed\n- Addressable::URI#omit method added, Addressable::URI#merge method replaced\n- updated URI Template code to match v 03 of the draft spec\n- added a bunch of new specifications\n\n# Addressable 1.0.4\n- switched to using RSpec's pending system for specs that rely on IDN\n- fixed issue with creating URIs with paths that are not prefixed with '/'\n\n# Addressable 1.0.3\n- implemented a hash method\n\n# Addressable 1.0.2\n- fixed minor bug with the extract_mapping method\n\n# Addressable 1.0.1\n- fixed minor bug with the extract_mapping method\n\n# Addressable 1.0.0\n- heuristic parse method added\n- parsing is slightly more strict\n- replaced to_h with to_hash\n- fixed routing methods\n- improved specifications\n- improved heckle rake task\n- no surviving heckle mutations\n\n# Addressable 0.1.2\n- improved normalization\n- fixed bug in joining algorithm\n- updated specifications\n\n# Addressable 0.1.1\n- updated documentation\n- added URI Template variable extraction\n\n# Addressable 0.1.0\n- initial release\n- implementation based on RFC 3986, 3987\n- support for IRIs via libidn\n- support for the URI Template draft spec\n"], "fixing_code": ["# Addressable 2.8.0\n- fixes ReDoS vulnerability in Addressable::Template#match\n- no longer replaces `+` with spaces in queries for non-http(s) schemes\n- fixed encoding ipv6 literals\n- the `:compacted` flag for `normalized_query` now dedupes parameters\n- fix broken `escape_component` alias\n- dropping support for Ruby 2.0 and 2.1\n- adding Ruby 3.0 compatibility for development tasks\n- drop support for `rack-mount` and remove Addressable::Template#generate\n- performance improvements\n- switch CI/CD to GitHub Actions\n\n# Addressable 2.7.0\n- added `:compacted` flag to `normalized_query`\n- `heuristic_parse` handles `mailto:` more intuitively\n- dropped explicit support for JRuby 9.0.5.0\n- compatibility w/ public_suffix 4.x\n- performance improvements\n\n# Addressable 2.6.0\n- added `tld=` method to allow assignment to the public suffix\n- most `heuristic_parse` patterns are now case-insensitive\n- `heuristic_parse` handles more `file://` URI variations\n- fixes bug in `heuristic_parse` when uri starts with digit\n- fixes bug in `request_uri=` with query strings\n- fixes template issues with `nil` and `?` operator\n- `frozen_string_literal` pragmas added\n- minor performance improvements in regexps\n- fixes to eliminate warnings\n\n# Addressable 2.5.2\n- better support for frozen string literals\n- fixed bug w/ uppercase characters in scheme\n- IDNA errors w/ emoji URLs\n- compatibility w/ public_suffix 3.x\n\n# Addressable 2.5.1\n- allow unicode normalization to be disabled for URI Template expansion\n- removed duplicate test\n\n# Addressable 2.5.0\n- dropping support for Ruby 1.9\n- adding support for Ruby 2.4 preview\n- add support for public suffixes and tld; first runtime dependency\n- hostname escaping should match RFC; underscores in hostnames no longer escaped\n- paths beginning with // and missing an authority are now considered invalid\n- validation now also takes place after setting a path\n- handle backslashes in authority more like a browser for `heuristic_parse`\n- unescaped backslashes in host now raise an `InvalidURIError`\n- `merge!`, `join!`, `omit!` and `normalize!` don't disable deferred validation\n- `heuristic_parse` now trims whitespace before parsing\n- host parts longer than 63 bytes will be ignored and not passed to libidn\n- normalized values always encoded as UTF-8\n\n# Addressable 2.4.0\n- support for 1.8.x dropped\n- double quotes in a host now raises an error\n- newlines in host will no longer get unescaped during normalization\n- stricter handling of bogus scheme values\n- stricter handling of encoded port values\n- calling `require 'addressable'` will now load both the URI and Template files\n- assigning to the `hostname` component with an `IPAddr` object is now supported\n- assigning to the `origin` component is now supported\n- fixed minor bug where an exception would be thrown for a missing ACE suffix\n- better partial expansion of URI templates\n\n# Addressable 2.3.8\n- fix warnings\n- update dependency gems\n- support for 1.8.x officially deprecated\n\n# Addressable 2.3.7\n- fix scenario in which invalid URIs don't get an exception until inspected\n- handle hostnames with two adjacent periods correctly\n- upgrade of RSpec\n\n# Addressable 2.3.6\n- normalization drops empty query string\n- better handling in template extract for missing values\n- template modifier for `'?'` now treated as optional\n- fixed issue where character class parameters were modified\n- templates can now be tested for equality\n- added `:sorted` option to normalization of query strings\n- fixed issue with normalization of hosts given in `'example.com.'` form\n\n# Addressable 2.3.5\n- added Addressable::URI#empty? method\n- Addressable::URI#hostname methods now strip square brackets from IPv6 hosts\n- compatibility with Net::HTTP in Ruby 2.0.0\n- Addressable::URI#route_from should always give relative URIs\n\n# Addressable 2.3.4\n- fixed issue with encoding altering its inputs\n- query string normalization now leaves ';' characters alone\n- FakeFS is detected before attempting to load unicode tables\n- additional testing to ensure frozen objects don't cause problems\n\n# Addressable 2.3.3\n- fixed issue with converting common primitives during template expansion\n- fixed port encoding issue\n- removed a few warnings\n- normalize should now ignore %2B in query strings\n- the IDNA logic should now be handled by libidn in Ruby 1.9\n- no template match should now result in nil instead of an empty MatchData\n- added license information to gemspec\n\n# Addressable 2.3.2\n- added Addressable::URI#default_port method\n- fixed issue with Marshalling Unicode data on Windows\n- improved heuristic parsing to better handle IPv4 addresses\n\n# Addressable 2.3.1\n- fixed missing unicode data file\n\n# Addressable 2.3.0\n- updated Addressable::Template to use RFC 6570, level 4\n- fixed compatibility problems with some versions of Ruby\n- moved unicode tables into a data file for performance reasons\n- removing support for multiple query value notations\n\n# Addressable 2.2.8\n- fixed issues with dot segment removal code\n- form encoding can now handle multiple values per key\n- updated development environment\n\n# Addressable 2.2.7\n- fixed issues related to Addressable::URI#query_values=\n- the Addressable::URI.parse method is now polymorphic\n\n# Addressable 2.2.6\n- changed the way ambiguous paths are handled\n- fixed bug with frozen URIs\n- https supported in heuristic parsing\n\n# Addressable 2.2.5\n- 'parsing' a pre-parsed URI object is now a dup operation\n- introduced conditional support for libidn\n- fixed normalization issue on ampersands in query strings\n- added additional tests around handling of query strings\n\n# Addressable 2.2.4\n- added origin support from draft-ietf-websec-origin-00\n- resolved issue with attempting to navigate below root\n- fixed bug with string splitting in query strings\n\n# Addressable 2.2.3\n- added :flat_array notation for query strings\n\n# Addressable 2.2.2\n- fixed issue with percent escaping of '+' character in query strings\n\n# Addressable 2.2.1\n- added support for application/x-www-form-urlencoded.\n\n# Addressable 2.2.0\n- added site methods\n- improved documentation\n\n# Addressable 2.1.2\n- added HTTP request URI methods\n- better handling of Windows file paths\n- validation_deferred boolean replaced with defer_validation block\n- normalization of percent-encoded paths should now be correct\n- fixed issue with constructing URIs with relative paths\n- fixed warnings\n\n# Addressable 2.1.1\n- more type checking changes\n- fixed issue with unicode normalization\n- added method to find template defaults\n- symbolic keys are now allowed in template mappings\n- numeric values and symbolic values are now allowed in template mappings\n\n# Addressable 2.1.0\n- refactored URI template support out into its own class\n- removed extract method due to being useless and unreliable\n- removed Addressable::URI.expand_template\n- removed Addressable::URI#extract_mapping\n- added partial template expansion\n- fixed minor bugs in the parse and heuristic_parse methods\n- fixed incompatibility with Ruby 1.9.1\n- fixed bottleneck in Addressable::URI#hash and Addressable::URI#to_s\n- fixed unicode normalization exception\n- updated query_values methods to better handle subscript notation\n- worked around issue with freezing URIs\n- improved specs\n\n# Addressable 2.0.2\n- fixed issue with URI template expansion\n- fixed issue with percent escaping characters 0-15\n\n# Addressable 2.0.1\n- fixed issue with query string assignment\n- fixed issue with improperly encoded components\n\n# Addressable 2.0.0\n- the initialize method now takes an options hash as its only parameter\n- added query_values method to URI class\n- completely replaced IDNA implementation with pure Ruby\n- renamed Addressable::ADDRESSABLE_VERSION to Addressable::VERSION\n- completely reworked the Rakefile\n- changed the behavior of the port method significantly\n- Addressable::URI.encode_segment, Addressable::URI.unencode_segment renamed\n- documentation is now in YARD format\n- more rigorous type checking\n- to_str method implemented, implicit conversion to Strings now allowed\n- Addressable::URI#omit method added, Addressable::URI#merge method replaced\n- updated URI Template code to match v 03 of the draft spec\n- added a bunch of new specifications\n\n# Addressable 1.0.4\n- switched to using RSpec's pending system for specs that rely on IDN\n- fixed issue with creating URIs with paths that are not prefixed with '/'\n\n# Addressable 1.0.3\n- implemented a hash method\n\n# Addressable 1.0.2\n- fixed minor bug with the extract_mapping method\n\n# Addressable 1.0.1\n- fixed minor bug with the extract_mapping method\n\n# Addressable 1.0.0\n- heuristic parse method added\n- parsing is slightly more strict\n- replaced to_h with to_hash\n- fixed routing methods\n- improved specifications\n- improved heckle rake task\n- no surviving heckle mutations\n\n# Addressable 0.1.2\n- improved normalization\n- fixed bug in joining algorithm\n- updated specifications\n\n# Addressable 0.1.1\n- updated documentation\n- added URI Template variable extraction\n\n# Addressable 0.1.0\n- initial release\n- implementation based on RFC 3986, 3987\n- support for IRIs via libidn\n- support for the URI Template draft spec\n"], "filenames": ["CHANGELOG.md"], "buggy_code_start_loc": [1], "buggy_code_end_loc": [1], "fixing_code_start_loc": [2], "fixing_code_end_loc": [3], "type": "CWE-400", "message": "Addressable is an alternative implementation to the URI implementation that is part of Ruby's standard library. An uncontrolled resource consumption vulnerability exists after version 2.3.0 through version 2.7.0. Within the URI template implementation in Addressable, a maliciously crafted template may result in uncontrolled resource consumption, leading to denial of service when matched against a URI. In typical usage, templates would not normally be read from untrusted user input, but nonetheless, no previous security advisory for Addressable has cautioned against doing this. Users of the parsing capabilities in Addressable but not the URI template capabilities are unaffected. The vulnerability is patched in version 2.8.0. As a workaround, only create Template objects from trusted sources that have been validated not to produce catastrophic backtracking.", "other": {"cve": {"id": "CVE-2021-32740", "sourceIdentifier": "security-advisories@github.com", "published": "2021-07-06T15:15:07.647", "lastModified": "2021-09-21T18:18:37.570", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Addressable is an alternative implementation to the URI implementation that is part of Ruby's standard library. An uncontrolled resource consumption vulnerability exists after version 2.3.0 through version 2.7.0. Within the URI template implementation in Addressable, a maliciously crafted template may result in uncontrolled resource consumption, leading to denial of service when matched against a URI. In typical usage, templates would not normally be read from untrusted user input, but nonetheless, no previous security advisory for Addressable has cautioned against doing this. Users of the parsing capabilities in Addressable but not the URI template capabilities are unaffected. The vulnerability is patched in version 2.8.0. As a workaround, only create Template objects from trusted sources that have been validated not to produce catastrophic backtracking."}, {"lang": "es", "value": "Addressable es una implementaci\u00f3n alternativa a la implementaci\u00f3n URI que forma parte de la biblioteca est\u00e1ndar de Ruby. Se presenta una vulnerabilidad de consumo de recursos no controlados despu\u00e9s de la versi\u00f3n 2.3.0 hasta la versi\u00f3n 2.7.0. Dentro de la implementaci\u00f3n de plantillas URI en Addressable, una plantilla dise\u00f1ada maliciosamente puede resultar en un consumo no controlado de recursos, conllevando a una denegaci\u00f3n de servicio cuando se compara con una URI. En el uso t\u00edpico, las plantillas no se leer\u00edan normalmente de la entrada de un usuario no fiable, pero sin embargo, ning\u00fan aviso de seguridad anterior para Addressable ha sido advertido en contra esto. Unos usuarios de las capacidades de an\u00e1lisis de Addressable, pero no de las capacidades de plantillas URI, no est\u00e1n afectados. La vulnerabilidad est\u00e1 parcheada en la versi\u00f3n 2.8.0. Como soluci\u00f3n, s\u00f3lo cree objetos de Plantilla desde fuentes confiables que hayan sido comprobadas para no producir retrocesos catastr\u00f3ficos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:addressable_project:addressable:*:*:*:*:*:ruby:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.8.0", "matchCriteriaId": "191A63ED-0569-4464-8354-7C78720CCCC5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:33:*:*:*:*:*:*:*", "matchCriteriaId": "E460AA51-FCDA-46B9-AE97-E6676AA5E194"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}]}]}], "references": [{"url": "https://github.com/sporkmonger/addressable/commit/0d8a3127e35886ce9284810a7f2438bff6b43cbc", "source": "security-advisories@github.com", "tags": ["Patch", "Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/sporkmonger/addressable/security/advisories/GHSA-jxhc-q857-3j6g", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SDFQM2NHNAZ3NNUQZEJTYECYZYXV4UDS/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WYPVOOQU7UB277UUERJMCNQLRCXRCIQ5/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sporkmonger/addressable/commit/0d8a3127e35886ce9284810a7f2438bff6b43cbc"}}