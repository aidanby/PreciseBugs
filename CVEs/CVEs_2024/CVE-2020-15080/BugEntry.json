{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Composer\\CaBundle\\CaBundle;\nuse PrestaShop\\PrestaShop\\Adapter\\ContainerFinder;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Exception\\LocalizationException;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Locale\\Repository as LocaleRepository;\nuse PHPSQLParser\\PHPSQLParser;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Filesystem\\FileSystem as PsFileSystem;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Locale;\n\nclass ToolsCore\n{\n    const CACERT_LOCATION = 'https://curl.haxx.se/ca/cacert.pem';\n    const SERVICE_LOCALE_REPOSITORY = 'prestashop.core.localization.locale.repository';\n\n    protected static $file_exists_cache = array();\n    protected static $_forceCompile;\n    protected static $_caching;\n    protected static $_user_plateform;\n    protected static $_user_browser;\n    protected static $request;\n    protected static $cldr_cache = [];\n\n    public static $round_mode = null;\n\n    public function __construct(Request $request = null)\n    {\n        if ($request) {\n            self::$request = $request;\n        }\n    }\n\n    /**\n     * Properly clean static cache\n     */\n    public static function resetStaticCache()\n    {\n        static::$cldr_cache = [];\n    }\n\n    /**\n     * Reset the request set during the first new Tools($request) call.\n     */\n    public static function resetRequest()\n    {\n        self::$request = null;\n    }\n\n    /**\n     * Random password generator.\n     *\n     * @param int $length Desired length (optional)\n     * @param string $flag Output type (NUMERIC, ALPHANUMERIC, NO_NUMERIC, RANDOM)\n     *\n     * @return bool|string Password\n     */\n    public static function passwdGen($length = 8, $flag = 'ALPHANUMERIC')\n    {\n        $length = (int) $length;\n\n        if ($length <= 0) {\n            return false;\n        }\n\n        switch ($flag) {\n            case 'NUMERIC':\n                $str = '0123456789';\n\n                break;\n            case 'NO_NUMERIC':\n                $str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n                break;\n            case 'RANDOM':\n                $num_bytes = ceil($length * 0.75);\n                $bytes = self::getBytes($num_bytes);\n\n                return substr(rtrim(base64_encode($bytes), '='), 0, $length);\n            case 'ALPHANUMERIC':\n            default:\n                $str = 'abcdefghijkmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n                break;\n        }\n\n        $bytes = Tools::getBytes($length);\n        $position = 0;\n        $result = '';\n\n        for ($i = 0; $i < $length; ++$i) {\n            $position = ($position + ord($bytes[$i])) % strlen($str);\n            $result .= $str[$position];\n        }\n\n        return $result;\n    }\n\n    /**\n     * Random bytes generator.\n     *\n     * Limited to OpenSSL since 1.7.0.0\n     *\n     * @param int $length Desired length of random bytes\n     *\n     * @return bool|string Random bytes\n     */\n    public static function getBytes($length)\n    {\n        $length = (int) $length;\n\n        if ($length <= 0) {\n            return false;\n        }\n\n        $bytes = openssl_random_pseudo_bytes($length, $cryptoStrong);\n\n        if ($cryptoStrong === true) {\n            return $bytes;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replace text within a portion of a string.\n     *\n     * Replaces a string matching a search, (optionally) string from a certain position\n     *\n     * @param string $search The string to search in the input string\n     * @param string $replace The replacement string\n     * @param string $subject The input string\n     * @param int $cur Starting position cursor for the search\n     *\n     * @return string the result string is returned\n     */\n    public static function strReplaceFirst($search, $replace, $subject, $cur = 0)\n    {\n        $strPos = strpos($subject, $search, $cur);\n\n        return $strPos !== false ? substr_replace($subject, $replace, (int) $strPos, strlen($search)) : $subject;\n    }\n\n    /**\n     * Redirect user to another page.\n     *\n     * @param string $url Desired URL\n     * @param string $base_uri Base URI (optional)\n     * @param Link $link\n     * @param string|array $headers A list of headers to send before redirection\n     */\n    public static function redirect($url, $base_uri = __PS_BASE_URI__, Link $link = null, $headers = null)\n    {\n        if (!$link) {\n            $link = Context::getContext()->link;\n        }\n\n        if (strpos($url, 'http://') === false && strpos($url, 'https://') === false && $link) {\n            if (strpos($url, $base_uri) === 0) {\n                $url = substr($url, strlen($base_uri));\n            }\n            if (strpos($url, 'index.php?controller=') !== false && strpos($url, 'index.php/') == 0) {\n                $url = substr($url, strlen('index.php?controller='));\n                if (Configuration::get('PS_REWRITING_SETTINGS')) {\n                    $url = Tools::strReplaceFirst('&', '?', $url);\n                }\n            }\n\n            $explode = explode('?', $url);\n            // don't use ssl if url is home page\n            // used when logout for example\n            $use_ssl = !empty($url);\n            $url = $link->getPageLink($explode[0], $use_ssl);\n            if (isset($explode[1])) {\n                $url .= '?' . $explode[1];\n            }\n        }\n\n        // Send additional headers\n        if ($headers) {\n            if (!is_array($headers)) {\n                $headers = array($headers);\n            }\n\n            foreach ($headers as $header) {\n                header($header);\n            }\n        }\n\n        header('Location: ' . $url);\n        exit;\n    }\n\n    /**\n     * Redirect URLs already containing PS_BASE_URI.\n     *\n     * @param string $url Desired URL\n     */\n    public static function redirectLink($url)\n    {\n        if (!preg_match('@^https?://@i', $url)) {\n            if (strpos($url, __PS_BASE_URI__) !== false && strpos($url, __PS_BASE_URI__) == 0) {\n                $url = substr($url, strlen(__PS_BASE_URI__));\n            }\n            if (strpos($url, 'index.php?controller=') !== false && strpos($url, 'index.php/') == 0) {\n                $url = substr($url, strlen('index.php?controller='));\n            }\n            $explode = explode('?', $url);\n            $url = Context::getContext()->link->getPageLink($explode[0]);\n            if (isset($explode[1])) {\n                $url .= '?' . $explode[1];\n            }\n        }\n        header('Location: ' . $url);\n        exit;\n    }\n\n    /**\n     * Redirect user to another admin page.\n     *\n     * @param string $url Desired URL\n     */\n    public static function redirectAdmin($url)\n    {\n        header('Location: ' . $url);\n        exit;\n    }\n\n    /**\n     * getShopProtocol return the available protocol for the current shop in use\n     * SSL if Configuration is set on and available for the server.\n     *\n     * @return string\n     */\n    public static function getShopProtocol()\n    {\n        $protocol = (Configuration::get('PS_SSL_ENABLED') || (!empty($_SERVER['HTTPS'])\n            && Tools::strtolower($_SERVER['HTTPS']) != 'off')) ? 'https://' : 'http://';\n\n        return $protocol;\n    }\n\n    /**\n     * getProtocol return the set protocol according to configuration (http[s]).\n     *\n     * @param bool $use_ssl true if require ssl\n     *\n     * @return string (http|https)\n     */\n    public static function getProtocol($use_ssl = null)\n    {\n        return null !== $use_ssl && $use_ssl ? 'https://' : 'http://';\n    }\n\n    /**\n     * getHttpHost return the <b>current</b> host used, with the protocol (http or https) if $http is true\n     * This function should not be used to choose http or https domain name.\n     * Use Tools::getShopDomain() or Tools::getShopDomainSsl instead.\n     *\n     * @param bool $http\n     * @param bool $entities\n     *\n     * @return string host\n     */\n    public static function getHttpHost($http = false, $entities = false, $ignore_port = false)\n    {\n        $httpHost = '';\n        if (array_key_exists('HTTP_HOST', $_SERVER)) {\n            $httpHost = $_SERVER['HTTP_HOST'];\n        }\n\n        $host = (isset($_SERVER['HTTP_X_FORWARDED_HOST']) ? $_SERVER['HTTP_X_FORWARDED_HOST'] : $httpHost);\n        if ($ignore_port && $pos = strpos($host, ':')) {\n            $host = substr($host, 0, $pos);\n        }\n        if ($entities) {\n            $host = htmlspecialchars($host, ENT_COMPAT, 'UTF-8');\n        }\n        if ($http) {\n            $host = (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://') . $host;\n        }\n\n        return $host;\n    }\n\n    /**\n     * getShopDomain returns domain name according to configuration and ignoring ssl.\n     *\n     * @param bool $http if true, return domain name with protocol\n     * @param bool $entities if true, convert special chars to HTML entities\n     *\n     * @return string domain\n     */\n    public static function getShopDomain($http = false, $entities = false)\n    {\n        if (!$domain = ShopUrl::getMainShopDomain()) {\n            $domain = Tools::getHttpHost();\n        }\n        if ($entities) {\n            $domain = htmlspecialchars($domain, ENT_COMPAT, 'UTF-8');\n        }\n        if ($http) {\n            $domain = 'http://' . $domain;\n        }\n\n        return $domain;\n    }\n\n    /**\n     * getShopDomainSsl returns domain name according to configuration and depending on ssl activation.\n     *\n     * @param bool $http if true, return domain name with protocol\n     * @param bool $entities if true, convert special chars to HTML entities\n     *\n     * @return string domain\n     */\n    public static function getShopDomainSsl($http = false, $entities = false)\n    {\n        if (!$domain = ShopUrl::getMainShopDomainSSL()) {\n            $domain = Tools::getHttpHost();\n        }\n        if ($entities) {\n            $domain = htmlspecialchars($domain, ENT_COMPAT, 'UTF-8');\n        }\n        if ($http) {\n            $domain = (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://') . $domain;\n        }\n\n        return $domain;\n    }\n\n    /**\n     * Get the server variable SERVER_NAME.\n     *\n     * @return string server name\n     */\n    public static function getServerName()\n    {\n        if (isset($_SERVER['HTTP_X_FORWARDED_SERVER']) && $_SERVER['HTTP_X_FORWARDED_SERVER']) {\n            return $_SERVER['HTTP_X_FORWARDED_SERVER'];\n        }\n\n        return $_SERVER['SERVER_NAME'];\n    }\n\n    /**\n     * Get the server variable REMOTE_ADDR, or the first ip of HTTP_X_FORWARDED_FOR (when using proxy).\n     *\n     * @return string $remote_addr ip of client\n     */\n    public static function getRemoteAddr()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-For', $headers)) {\n            $_SERVER['HTTP_X_FORWARDED_FOR'] = $headers['X-Forwarded-For'];\n        }\n\n        if (isset($_SERVER['HTTP_X_FORWARDED_FOR']) && $_SERVER['HTTP_X_FORWARDED_FOR'] && (!isset($_SERVER['REMOTE_ADDR'])\n            || preg_match('/^127\\..*/i', trim($_SERVER['REMOTE_ADDR'])) || preg_match('/^172\\.16.*/i', trim($_SERVER['REMOTE_ADDR']))\n            || preg_match('/^192\\.168\\.*/i', trim($_SERVER['REMOTE_ADDR'])) || preg_match('/^10\\..*/i', trim($_SERVER['REMOTE_ADDR'])))) {\n            if (strpos($_SERVER['HTTP_X_FORWARDED_FOR'], ',')) {\n                $ips = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);\n\n                return $ips[0];\n            } else {\n                return $_SERVER['HTTP_X_FORWARDED_FOR'];\n            }\n        } else {\n            return $_SERVER['REMOTE_ADDR'];\n        }\n    }\n\n    /**\n     * Check if the current page use SSL connection on not.\n     *\n     * @return bool uses SSL\n     */\n    public static function usingSecureMode()\n    {\n        if (isset($_SERVER['HTTPS'])) {\n            return in_array(Tools::strtolower($_SERVER['HTTPS']), array(1, 'on'));\n        }\n        // $_SERVER['SSL'] exists only in some specific configuration\n        if (isset($_SERVER['SSL'])) {\n            return in_array(Tools::strtolower($_SERVER['SSL']), array(1, 'on'));\n        }\n        // $_SERVER['REDIRECT_HTTPS'] exists only in some specific configuration\n        if (isset($_SERVER['REDIRECT_HTTPS'])) {\n            return in_array(Tools::strtolower($_SERVER['REDIRECT_HTTPS']), array(1, 'on'));\n        }\n        if (isset($_SERVER['HTTP_SSL'])) {\n            return in_array(Tools::strtolower($_SERVER['HTTP_SSL']), array(1, 'on'));\n        }\n        if (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) {\n            return Tools::strtolower($_SERVER['HTTP_X_FORWARDED_PROTO']) == 'https';\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the current url prefix protocol (https/http).\n     *\n     * @return string protocol\n     */\n    public static function getCurrentUrlProtocolPrefix()\n    {\n        if (Tools::usingSecureMode()) {\n            return 'https://';\n        } else {\n            return 'http://';\n        }\n    }\n\n    /**\n     * Returns a safe URL referrer.\n     *\n     * @param string $referrer URL referrer\n     *\n     * @return string secured referrer\n     */\n    public static function secureReferrer($referrer)\n    {\n        if (static::urlBelongsToShop($referrer)) {\n            return $referrer;\n        }\n\n        return __PS_BASE_URI__;\n    }\n\n    /**\n     * Indicates if the provided URL belongs to this shop (relative urls count as belonging to the shop).\n     *\n     * @param string $url\n     *\n     * @return bool\n     */\n    public static function urlBelongsToShop($url)\n    {\n        $urlHost = Tools::extractHost($url);\n\n        return empty($urlHost) || $urlHost === Tools::getServerName();\n    }\n\n    /**\n     * Safely extracts the host part from an URL.\n     *\n     * @param string $url\n     *\n     * @return string\n     */\n    public static function extractHost($url)\n    {\n        if (PHP_VERSION_ID >= 50628) {\n            $parsed = parse_url($url);\n            if (!is_array($parsed)) {\n                return $url;\n            }\n            if (empty($parsed['host']) || empty($parsed['scheme'])) {\n                return '';\n            }\n\n            return $parsed['host'];\n        }\n\n        // big workaround needed\n        // @see: https://bugs.php.net/bug.php?id=73192\n        // @see: https://3v4l.org/nFYJh\n\n        $matches = [];\n        if (!preg_match('/^[\\w]+:\\/\\/(?<authority>[^\\/?#$]+)/ui', $url, $matches)) {\n            // relative url\n            return '';\n        }\n        $authority = $matches['authority'];\n\n        if (!preg_match('/(?:(?<user>.+):(?<pass>.+)@)?(?<domain>[\\w.-]+)(?::(?<port>\\d+))?/ui', $authority, $matches)) {\n            return '';\n        }\n\n        return $matches['domain'];\n    }\n\n    /**\n     * Get a value from $_POST / $_GET\n     * if unavailable, take a default value.\n     *\n     * @param string $key Value key\n     * @param mixed $default_value (optional)\n     *\n     * @return mixed Value\n     */\n    public static function getValue($key, $default_value = false)\n    {\n        if (empty($key) || !is_string($key)) {\n            return false;\n        }\n\n        if (getenv('kernel.environment') === 'test' && self::$request instanceof Request) {\n            $value = self::$request->request->get($key, self::$request->query->get($key, $default_value));\n        } else {\n            $value = (isset($_POST[$key]) ? $_POST[$key] : (isset($_GET[$key]) ? $_GET[$key] : $default_value));\n        }\n\n        if (is_string($value)) {\n            return urldecode(preg_replace('/((\\%5C0+)|(\\%00+))/i', '', urlencode($value)));\n        }\n\n        return $value;\n    }\n\n    /**\n     * Get all values from $_POST/$_GET.\n     *\n     * @return mixed\n     */\n    public static function getAllValues()\n    {\n        return $_POST + $_GET;\n    }\n\n    /**\n     * Checks if a key exists either in $_POST or $_GET.\n     *\n     * @param string $key\n     *\n     * @return bool\n     */\n    public static function getIsset($key)\n    {\n        if (!is_string($key)) {\n            return false;\n        }\n\n        return isset($_POST[$key]) || isset($_GET[$key]);\n    }\n\n    /**\n     * Change language in cookie while clicking on a flag.\n     *\n     * @return string iso code\n     */\n    public static function setCookieLanguage($cookie = null)\n    {\n        if (!$cookie) {\n            $cookie = Context::getContext()->cookie;\n        }\n        /* If language does not exist or is disabled, erase it */\n        if ($cookie->id_lang) {\n            $lang = new Language((int) $cookie->id_lang);\n            if (!Validate::isLoadedObject($lang) || !$lang->active || !$lang->isAssociatedToShop()) {\n                $cookie->id_lang = null;\n            }\n        }\n\n        if (!Configuration::get('PS_DETECT_LANG')) {\n            unset($cookie->detect_language);\n        }\n\n        /* Automatically detect language if not already defined, detect_language is set in Cookie::update */\n        if (!Tools::getValue('isolang') && !Tools::getValue('id_lang') && (!$cookie->id_lang || isset($cookie->detect_language))\n            && isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n            $array = explode(',', Tools::strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']));\n            $string = $array[0];\n\n            if (Validate::isLanguageCode($string)) {\n                $lang = Language::getLanguageByIETFCode($string);\n                if (Validate::isLoadedObject($lang) && $lang->active && $lang->isAssociatedToShop()) {\n                    Context::getContext()->language = $lang;\n                    $cookie->id_lang = (int) $lang->id;\n                }\n            }\n        }\n\n        if (isset($cookie->detect_language)) {\n            unset($cookie->detect_language);\n        }\n\n        /* If language file not present, you must use default language file */\n        if (!$cookie->id_lang || !Validate::isUnsignedId($cookie->id_lang)) {\n            $cookie->id_lang = (int) Configuration::get('PS_LANG_DEFAULT');\n        }\n\n        $iso = Language::getIsoById((int) $cookie->id_lang);\n        @include_once _PS_THEME_DIR_ . 'lang/' . $iso . '.php';\n\n        return $iso;\n    }\n\n    /**\n     * If necessary change cookie language ID and context language.\n     *\n     * @param Context|null $context\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public static function switchLanguage(Context $context = null)\n    {\n        if (null === $context) {\n            $context = Context::getContext();\n        }\n\n        // On PrestaShop installations Dispatcher::__construct() gets called (and so Tools::switchLanguage())\n        // Stop in this case by checking the cookie\n        if (!isset($context->cookie)) {\n            return;\n        }\n\n        if (\n            ($iso = Tools::getValue('isolang')) &&\n            Validate::isLanguageIsoCode($iso) &&\n            ($id_lang = (int) Language::getIdByIso($iso))\n        ) {\n            $_GET['id_lang'] = $id_lang;\n        }\n\n        // Only switch if new ID is different from old ID\n        $newLanguageId = (int) Tools::getValue('id_lang');\n\n        if (\n            Validate::isUnsignedId($newLanguageId) &&\n            $newLanguageId !== 0 &&\n            $context->cookie->id_lang !== $newLanguageId\n        ) {\n            $context->cookie->id_lang = $newLanguageId;\n            $language = new Language($newLanguageId);\n            if (Validate::isLoadedObject($language) && $language->active && $language->isAssociatedToShop()) {\n                $context->language = $language;\n            }\n        }\n\n        Tools::setCookieLanguage($context->cookie);\n    }\n\n    public static function getCountry($address = null)\n    {\n        $id_country = (int) Tools::getValue('id_country');\n        if (!$id_country && isset($address, $address->id_country) && $address->id_country) {\n            $id_country = (int) $address->id_country;\n        } elseif (Configuration::get('PS_DETECT_COUNTRY') && isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n            preg_match('#(?<=-)\\w\\w|\\w\\w(?!-)#', $_SERVER['HTTP_ACCEPT_LANGUAGE'], $array);\n            if (is_array($array) && isset($array[0]) && Validate::isLanguageIsoCode($array[0])) {\n                $id_country = (int) Country::getByIso($array[0], true);\n            }\n        }\n        if (!isset($id_country) || !$id_country) {\n            $id_country = (int) Configuration::get('PS_COUNTRY_DEFAULT');\n        }\n\n        return (int) $id_country;\n    }\n\n    /**\n     * Set cookie currency from POST or default currency.\n     *\n     * @return Currency object\n     */\n    public static function setCurrency($cookie)\n    {\n        if (Tools::isSubmit('SubmitCurrency') && ($id_currency = Tools::getValue('id_currency'))) {\n            /** @var Currency $currency */\n            $currency = Currency::getCurrencyInstance((int) $id_currency);\n            if (is_object($currency) && $currency->id && !$currency->deleted && $currency->isAssociatedToShop()) {\n                $cookie->id_currency = (int) $currency->id;\n            }\n        }\n\n        $currency = null;\n        if ((int) $cookie->id_currency) {\n            $currency = Currency::getCurrencyInstance((int) $cookie->id_currency);\n        }\n        if (!Validate::isLoadedObject($currency) || (bool) $currency->deleted || !(bool) $currency->active) {\n            $currency = Currency::getCurrencyInstance(Configuration::get('PS_CURRENCY_DEFAULT'));\n        }\n\n        $cookie->id_currency = (int) $currency->id;\n        if ($currency->isAssociatedToShop()) {\n            return $currency;\n        } else {\n            // get currency from context\n            $currency = Shop::getEntityIds('currency', Context::getContext()->shop->id, true, true);\n            if (isset($currency[0]) && $currency[0]['id_currency']) {\n                $cookie->id_currency = $currency[0]['id_currency'];\n\n                return Currency::getCurrencyInstance((int) $cookie->id_currency);\n            }\n        }\n\n        return $currency;\n    }\n\n    /**\n     * Return the CLDR associated with the context or given language_code.\n     *\n     * @see Tools::getContextLocale\n     * @deprecated since PrestaShop 1.7.6.0\n     *\n     * @param Context|null $context\n     * @param null $language_code\n     *\n     * @throws PrestaShopException\n     */\n    public static function getCldr(Context $context = null, $language_code = null)\n    {\n        throw new PrestaShopException('This CLDR library has been removed. See Tools::getContextLocale instead.');\n    }\n\n    /**\n     * Return price with currency sign for a given product.\n     *\n     * @deprecated Since 1.7.6.0. Please use Locale::formatPrice() instead\n     * @see PrestaShop\\PrestaShop\\Core\\Localization\\Locale\n     *\n     * @param float $price Product price\n     * @param object|array $currency Current currency (object, id_currency, NULL => context currency)\n     * @param bool $no_utf8 Not used anymore\n     * @param Context|null $context\n     *\n     * @return string Price correctly formatted (sign, decimal separator...)\n     *                if you modify this function, don't forget to modify the Javascript function formatCurrency (in tools.js)\n     *\n     * @throws LocalizationException\n     */\n    public static function displayPrice($price, $currency = null, $no_utf8 = false, Context $context = null)\n    {\n        @trigger_error(\n            'Tools::displayPrice() is deprecated since version 1.7.6.0. '\n            . 'Use ' . Locale::class . '::formatPrice() instead.',\n            E_USER_DEPRECATED\n        );\n\n        if (!is_numeric($price)) {\n            return $price;\n        }\n\n        $context = $context ?: Context::getContext();\n        $currency = $currency ?: $context->currency;\n\n        if (is_int($currency)) {\n            $currency = Currency::getCurrencyInstance($currency);\n        }\n\n        $locale = static::getContextLocale($context);\n        $currencyCode = is_array($currency) ? $currency['iso_code'] : $currency->iso_code;\n\n        return $locale->formatPrice($price, $currencyCode);\n    }\n\n    /**\n     * Return current locale\n     *\n     * @param Context $context\n     *\n     * @return Locale\n     *\n     * @throws Exception\n     */\n    protected static function getContextLocale(Context $context)\n    {\n        $locale = $context->getCurrentLocale();\n        if (null !== $locale) {\n            return $locale;\n        }\n\n        $containerFinder = new ContainerFinder($context);\n        $container = $containerFinder->getContainer();\n        if (null === $context->container) {\n            $context->container = $container;\n        }\n\n        /** @var LocaleRepository $localeRepository */\n        $localeRepository = $container->get(self::SERVICE_LOCALE_REPOSITORY);\n        $locale = $localeRepository->getLocale(\n            $context->language->getLocale()\n        );\n\n        return $locale;\n    }\n\n    /**\n     * Returns a well formatted number.\n     *\n     * @deprecated Since 1.7.6.0. Please use Locale::formatNumber() instead\n     * @see Locale\n     *\n     * @param float $number The number to format\n     * @param null $currency not used anymore\n     *\n     * @return string The formatted number\n     *\n     * @throws Exception\n     * @throws LocalizationException\n     */\n    public static function displayNumber($number, $currency = null)\n    {\n        @trigger_error(\n            'Tools::displayNumber() is deprecated since version 1.7.5.0. '\n            . 'Use ' . Locale::class . ' instead.',\n            E_USER_DEPRECATED\n        );\n\n        $context = Context::getContext();\n        $locale = static::getContextLocale($context);\n\n        return $locale->formatNumber($number);\n    }\n\n    public static function displayPriceSmarty($params, &$smarty)\n    {\n        if (array_key_exists('currency', $params)) {\n            $currency = Currency::getCurrencyInstance((int) $params['currency']);\n            if (Validate::isLoadedObject($currency)) {\n                return Tools::displayPrice($params['price'], $currency, false);\n            }\n        }\n\n        return Tools::displayPrice($params['price']);\n    }\n\n    /**\n     * Return price converted.\n     *\n     * @deprecated since 1.7.4 use convertPriceToCurrency()\n     *\n     * @param float $price Product price\n     * @param object|array $currency Current currency object\n     * @param bool $to_currency convert to currency or from currency to default currency\n     * @param Context $context\n     *\n     * @return float Price\n     */\n    public static function convertPrice($price, $currency = null, $to_currency = true, Context $context = null)\n    {\n        $default_currency = (int) Configuration::get('PS_CURRENCY_DEFAULT');\n\n        if (!$context) {\n            $context = Context::getContext();\n        }\n        if ($currency === null) {\n            $currency = $context->currency;\n        } elseif (is_numeric($currency)) {\n            $currency = Currency::getCurrencyInstance($currency);\n        }\n\n        $c_id = (is_array($currency) ? $currency['id_currency'] : $currency->id);\n        $c_rate = (is_array($currency) ? $currency['conversion_rate'] : $currency->conversion_rate);\n\n        if ($c_id != $default_currency) {\n            if ($to_currency) {\n                $price *= $c_rate;\n            } else {\n                $price /= $c_rate;\n            }\n        }\n\n        return $price;\n    }\n\n    /**\n     * Implement array_replace for PHP <= 5.2.\n     *\n     * @return array|mixed|null\n     *\n     * @deprecated since version 1.7.4.0, to be removed.\n     */\n    public static function array_replace()\n    {\n        Tools::displayAsDeprecated('Use PHP\\'s array_replace() instead');\n        if (!function_exists('array_replace')) {\n            $args = func_get_args();\n            $num_args = func_num_args();\n            $res = array();\n            for ($i = 0; $i < $num_args; ++$i) {\n                if (is_array($args[$i])) {\n                    foreach ($args[$i] as $key => $val) {\n                        $res[$key] = $val;\n                    }\n                } else {\n                    trigger_error(__FUNCTION__ . '(): Argument #' . ($i + 1) . ' is not an array', E_USER_WARNING);\n\n                    return null;\n                }\n            }\n\n            return $res;\n        } else {\n            return call_user_func_array('array_replace', func_get_args());\n        }\n    }\n\n    /**\n     * Convert amount from a currency to an other currency automatically.\n     *\n     * @param float $amount\n     * @param Currency $currency_from if null we used the default currency\n     * @param Currency $currency_to if null we used the default currency\n     */\n    public static function convertPriceFull($amount, Currency $currency_from = null, Currency $currency_to = null)\n    {\n        if ($currency_from == $currency_to) {\n            return $amount;\n        }\n\n        if ($currency_from === null) {\n            $currency_from = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n        }\n\n        if ($currency_to === null) {\n            $currency_to = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n        }\n\n        if ($currency_from->id == Configuration::get('PS_CURRENCY_DEFAULT')) {\n            $amount *= $currency_to->conversion_rate;\n        } else {\n            $conversion_rate = ($currency_from->conversion_rate == 0 ? 1 : $currency_from->conversion_rate);\n            // Convert amount to default currency (using the old currency rate)\n            $amount = $amount / $conversion_rate;\n            // Convert to new currency\n            $amount *= $currency_to->conversion_rate;\n        }\n\n        return Tools::ps_round($amount, _PS_PRICE_COMPUTE_PRECISION_);\n    }\n\n    /**\n     * Display date regarding to language preferences.\n     *\n     * @param array $params Date, format...\n     * @param object $smarty Smarty object for language preferences\n     *\n     * @return string Date\n     */\n    public static function dateFormat($params, &$smarty)\n    {\n        return Tools::displayDate($params['date'], null, (isset($params['full']) ? $params['full'] : false));\n    }\n\n    /**\n     * Display date regarding to language preferences.\n     *\n     * @param string $date Date to display format UNIX\n     * @param int $id_lang Language id DEPRECATED\n     * @param bool $full With time or not (optional)\n     * @param string $separator DEPRECATED\n     *\n     * @return string Date\n     */\n    public static function displayDate($date, $id_lang = null, $full = false, $separator = null)\n    {\n        if ($id_lang !== null) {\n            Tools::displayParameterAsDeprecated('id_lang');\n        }\n        if ($separator !== null) {\n            Tools::displayParameterAsDeprecated('separator');\n        }\n\n        if (!$date || !($time = strtotime($date))) {\n            return $date;\n        }\n\n        if ($date == '0000-00-00 00:00:00' || $date == '0000-00-00') {\n            return '';\n        }\n\n        if (!Validate::isDate($date) || !Validate::isBool($full)) {\n            throw new PrestaShopException('Invalid date');\n        }\n\n        $context = Context::getContext();\n        $date_format = ($full ? $context->language->date_format_full : $context->language->date_format_lite);\n\n        return date($date_format, $time);\n    }\n\n    /**\n     * Get localized date format.\n     *\n     * @return string Date format\n     */\n    public static function getDateFormat()\n    {\n        $format = Context::getContext()->language->date_format_lite;\n        $search = array('d', 'm', 'Y');\n        $replace = array('DD', 'MM', 'YYYY');\n        $format = str_replace($search, $replace, $format);\n\n        return $format;\n    }\n\n    /**\n     * Get formatted date.\n     *\n     * @param string $date_str Date string\n     * @param bool $full With time or not (optional)\n     *\n     * @return string Formatted date\n     */\n    public static function formatDateStr($date_str, $full = false)\n    {\n        $time = strtotime($date_str);\n        $context = Context::getContext();\n        $date_format = ($full ? $context->language->date_format_full : $context->language->date_format_lite);\n        $date = date($date_format, $time);\n\n        return $date;\n    }\n\n    /**\n     * Sanitize a string.\n     *\n     * @param string $string String to sanitize\n     * @param bool $full String contains HTML or not (optional)\n     *\n     * @return string Sanitized string\n     */\n    public static function safeOutput($string, $html = false)\n    {\n        if (!$html) {\n            $string = strip_tags($string);\n        }\n\n        return @Tools::htmlentitiesUTF8($string, ENT_QUOTES);\n    }\n\n    public static function htmlentitiesUTF8($string, $type = ENT_QUOTES)\n    {\n        if (is_array($string)) {\n            return array_map(array('Tools', 'htmlentitiesUTF8'), $string);\n        }\n\n        return htmlentities((string) $string, $type, 'utf-8');\n    }\n\n    public static function htmlentitiesDecodeUTF8($string)\n    {\n        if (is_array($string)) {\n            $string = array_map(array('Tools', 'htmlentitiesDecodeUTF8'), $string);\n\n            return (string) array_shift($string);\n        }\n\n        return html_entity_decode((string) $string, ENT_QUOTES, 'utf-8');\n    }\n\n    public static function safePostVars()\n    {\n        if (!isset($_POST) || !is_array($_POST)) {\n            $_POST = array();\n        } else {\n            $_POST = array_map(array('Tools', 'htmlentitiesUTF8'), $_POST);\n        }\n    }\n\n    /**\n     * Delete directory and subdirectories.\n     *\n     * @param string $dirname Directory name\n     */\n    public static function deleteDirectory($dirname, $delete_self = true)\n    {\n        $dirname = rtrim($dirname, '/') . '/';\n        if (file_exists($dirname)) {\n            if ($files = scandir($dirname, SCANDIR_SORT_NONE)) {\n                foreach ($files as $file) {\n                    if ($file != '.' && $file != '..' && $file != '.svn') {\n                        if (is_dir($dirname . $file)) {\n                            Tools::deleteDirectory($dirname . $file);\n                        } elseif (file_exists($dirname . $file)) {\n                            unlink($dirname . $file);\n                        }\n                    }\n                }\n\n                if ($delete_self && file_exists($dirname)) {\n                    if (!rmdir($dirname)) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Delete file.\n     *\n     * @param string $file File path\n     * @param array $exclude_files Excluded files\n     */\n    public static function deleteFile($file, $exclude_files = array())\n    {\n        if (isset($exclude_files) && !is_array($exclude_files)) {\n            $exclude_files = array($exclude_files);\n        }\n\n        if (file_exists($file) && is_file($file) && array_search(basename($file), $exclude_files) === false) {\n            unlink($file);\n        }\n    }\n\n    /**\n     * Clear XML cache folder.\n     */\n    public static function clearXMLCache()\n    {\n        foreach (scandir(_PS_ROOT_DIR_ . '/config/xml', SCANDIR_SORT_NONE) as $file) {\n            $path_info = pathinfo($file, PATHINFO_EXTENSION);\n            if (($path_info == 'xml') && ($file != 'default.xml')) {\n                self::deleteFile(_PS_ROOT_DIR_ . '/config/xml/' . $file);\n            }\n        }\n    }\n\n    /**\n     * Depending on _PS_MODE_DEV_ throws an exception or returns a error message.\n     *\n     * @param string|null $errorMessage Error message (defaults to \"Fatal error\")\n     * @param bool $htmlentities DEPRECATED since 1.7.4.0\n     * @param Context|null $context DEPRECATED since 1.7.4.0\n     *\n     * @return string\n     *\n     * @throws PrestaShopException If _PS_MODE_DEV_ is enabled\n     */\n    public static function displayError($errorMessage = null, $htmlentities = null, Context $context = null)\n    {\n        header('HTTP/1.1 500 Internal Server Error', true, 500);\n        if (null !== $htmlentities) {\n            self::displayParameterAsDeprecated('htmlentities');\n        }\n        if (null !== $context) {\n            self::displayParameterAsDeprecated('context');\n        }\n\n        if (null === $errorMessage) {\n            $errorMessage = Context::getContext()\n                ->getTranslator()\n                ->trans('Fatal error', [], 'Admin.Notifications.Error');\n        }\n\n        if (_PS_MODE_DEV_) {\n            throw new PrestaShopException($errorMessage);\n        }\n\n        return $errorMessage;\n    }\n\n    /**\n     * Display an error with detailed object.\n     *\n     * @param mixed $object\n     * @param bool $kill\n     *\n     * @return $object if $kill = false;\n     */\n    public static function dieObject($object, $kill = true)\n    {\n        dump($object);\n\n        if ($kill) {\n            die('END');\n        }\n\n        return $object;\n    }\n\n    public static function debug_backtrace($start = 0, $limit = null)\n    {\n        $backtrace = debug_backtrace();\n        array_shift($backtrace);\n        for ($i = 0; $i < $start; ++$i) {\n            array_shift($backtrace);\n        }\n\n        echo '\n        <div style=\"margin:10px;padding:10px;border:1px solid #666666\">\n            <ul>';\n        $i = 0;\n        foreach ($backtrace as $id => $trace) {\n            if ((int) $limit && (++$i > $limit)) {\n                break;\n            }\n            $relative_file = (isset($trace['file'])) ? 'in /' . ltrim(str_replace(array(_PS_ROOT_DIR_, '\\\\'), array('', '/'), $trace['file']), '/') : '';\n            $current_line = (isset($trace['line'])) ? ':' . $trace['line'] : '';\n\n            echo '<li>\n                <b>' . ((isset($trace['class'])) ? $trace['class'] : '') . ((isset($trace['type'])) ? $trace['type'] : '') . $trace['function'] . '</b>\n                ' . $relative_file . $current_line . '\n            </li>';\n        }\n        echo '</ul>\n        </div>';\n    }\n\n    /**\n     * Prints object information into error log.\n     *\n     * @see error_log()\n     *\n     * @param mixed $object\n     * @param int|null $message_type\n     * @param string|null $destination\n     * @param string|null $extra_headers\n     *\n     * @return bool\n     */\n    public static function error_log($object, $message_type = null, $destination = null, $extra_headers = null)\n    {\n        return error_log(print_r($object, true), $message_type, $destination, $extra_headers);\n    }\n\n    /**\n     * Check if submit has been posted.\n     *\n     * @param string $submit submit name\n     */\n    public static function isSubmit($submit)\n    {\n        return\n            isset($_POST[$submit]) || isset($_POST[$submit . '_x']) || isset($_POST[$submit . '_y'])\n            || isset($_GET[$submit]) || isset($_GET[$submit . '_x']) || isset($_GET[$submit . '_y']);\n    }\n\n    /**\n     * Hash password.\n     *\n     * @param string $passwd String to hash\n     *\n     * @return string Hashed password\n     *\n     * @deprecated 1.7.0\n     */\n    public static function encrypt($passwd)\n    {\n        return self::hash($passwd);\n    }\n\n    /**\n     * Hash password.\n     *\n     * @param string $passwd String to has\n     *\n     * @return string Hashed password\n     *\n     * @since 1.7.0\n     */\n    public static function hash($passwd)\n    {\n        return md5(_COOKIE_KEY_ . $passwd);\n    }\n\n    /**\n     * Hash data string.\n     *\n     * @param string $data String to encrypt\n     *\n     * @return string Hashed IV\n     *\n     * @deprecated 1.7.0\n     */\n    public static function encryptIV($data)\n    {\n        return self::hashIV($data);\n    }\n\n    /**\n     * Hash data string.\n     *\n     * @param string $data String to encrypt\n     *\n     * @return string Hashed IV\n     *\n     * @since 1.7.0\n     */\n    public static function hashIV($data)\n    {\n        return md5(_COOKIE_IV_ . $data);\n    }\n\n    /**\n     * Get token to prevent CSRF.\n     *\n     * @param string $token token to encrypt\n     */\n    public static function getToken($page = true, Context $context = null)\n    {\n        if (!$context) {\n            $context = Context::getContext();\n        }\n        if ($page === true) {\n            return Tools::hash($context->customer->id . $context->customer->passwd . $_SERVER['SCRIPT_NAME']);\n        } else {\n            return Tools::hash($context->customer->id . $context->customer->passwd . $page);\n        }\n    }\n\n    /**\n     * Tokenize a string.\n     *\n     * @param string $string string to encript\n     */\n    public static function getAdminToken($string)\n    {\n        return !empty($string) ? Tools::hash($string) : false;\n    }\n\n    public static function getAdminTokenLite($tab, Context $context = null)\n    {\n        if (!$context) {\n            $context = Context::getContext();\n        }\n\n        return Tools::getAdminToken($tab . (int) Tab::getIdFromClassName($tab) . (int) $context->employee->id);\n    }\n\n    public static function getAdminTokenLiteSmarty($params, &$smarty)\n    {\n        $context = Context::getContext();\n\n        return Tools::getAdminToken($params['tab'] . (int) Tab::getIdFromClassName($params['tab']) . (int) $context->employee->id);\n    }\n\n    /**\n     * Get a valid URL to use from BackOffice.\n     *\n     * @param string $url An URL to use in BackOffice\n     * @param bool $entites Set to true to use htmlentities function on URL param\n     */\n    public static function getAdminUrl($url = null, $entities = false)\n    {\n        $link = Tools::getHttpHost(true) . __PS_BASE_URI__;\n\n        if (isset($url)) {\n            $link .= ($entities ? Tools::htmlentitiesUTF8($url) : $url);\n        }\n\n        return $link;\n    }\n\n    /**\n     * Get a valid image URL to use from BackOffice.\n     *\n     * @param string $image Image name\n     * @param bool $entites Set to true to use htmlentities function on image param\n     */\n    public static function getAdminImageUrl($image = null, $entities = false)\n    {\n        return Tools::getAdminUrl(basename(_PS_IMG_DIR_) . '/' . $image, $entities);\n    }\n\n    /**\n     * Return the friendly url from the provided string.\n     *\n     * @param string $str\n     * @param bool $utf8_decode (deprecated)\n     *\n     * @return string\n     */\n    public static function link_rewrite($str, $utf8_decode = null)\n    {\n        if ($utf8_decode !== null) {\n            Tools::displayParameterAsDeprecated('utf8_decode');\n        }\n\n        return Tools::str2url($str);\n    }\n\n    /**\n     * Return a friendly url made from the provided string\n     * If the mbstring library is available, the output is the same as the js function of the same name.\n     *\n     * @param string $str\n     *\n     * @return string\n     */\n    public static function str2url($str)\n    {\n        static $array_str = array();\n        static $allow_accented_chars = null;\n        static $has_mb_strtolower = null;\n\n        if ($has_mb_strtolower === null) {\n            $has_mb_strtolower = function_exists('mb_strtolower');\n        }\n\n        if (!is_string($str)) {\n            return false;\n        }\n\n        if (isset($array_str[$str])) {\n            return $array_str[$str];\n        }\n\n        if ($str == '') {\n            return '';\n        }\n\n        if ($allow_accented_chars === null) {\n            $allow_accented_chars = Configuration::get('PS_ALLOW_ACCENTED_CHARS_URL');\n        }\n\n        $return_str = trim($str);\n\n        if ($has_mb_strtolower) {\n            $return_str = mb_strtolower($return_str, 'utf-8');\n        }\n        if (!$allow_accented_chars) {\n            $return_str = Tools::replaceAccentedChars($return_str);\n        }\n\n        // Remove all non-whitelist chars.\n        if ($allow_accented_chars) {\n            $return_str = preg_replace('/[^a-zA-Z0-9\\s\\'\\:\\/\\[\\]\\-\\p{L}]/u', '', $return_str);\n        } else {\n            $return_str = preg_replace('/[^a-zA-Z0-9\\s\\'\\:\\/\\[\\]\\-]/', '', $return_str);\n        }\n\n        $return_str = preg_replace('/[\\s\\'\\:\\/\\[\\]\\-]+/', ' ', $return_str);\n        $return_str = str_replace(array(' ', '/'), '-', $return_str);\n\n        // If it was not possible to lowercase the string with mb_strtolower, we do it after the transformations.\n        // This way we lose fewer special chars.\n        if (!$has_mb_strtolower) {\n            $return_str = Tools::strtolower($return_str);\n        }\n\n        $array_str[$str] = $return_str;\n\n        return $return_str;\n    }\n\n    /**\n     * Replace all accented chars by their equivalent non accented chars.\n     *\n     * @param string $str\n     *\n     * @return string\n     */\n    public static function replaceAccentedChars($str)\n    {\n        /* One source among others:\n            http://www.tachyonsoft.com/uc0000.htm\n            http://www.tachyonsoft.com/uc0001.htm\n            http://www.tachyonsoft.com/uc0004.htm\n        */\n        $patterns = array(\n            /* Lowercase */\n            /* a  */ '/[\\x{00E0}\\x{00E1}\\x{00E2}\\x{00E3}\\x{00E4}\\x{00E5}\\x{0101}\\x{0103}\\x{0105}\\x{0430}\\x{00C0}-\\x{00C3}\\x{1EA0}-\\x{1EB7}]/u',\n            /* b  */ '/[\\x{0431}]/u',\n            /* c  */ '/[\\x{00E7}\\x{0107}\\x{0109}\\x{010D}\\x{0446}]/u',\n            /* d  */ '/[\\x{010F}\\x{0111}\\x{0434}\\x{0110}\\x{00F0}]/u',\n            /* e  */ '/[\\x{00E8}\\x{00E9}\\x{00EA}\\x{00EB}\\x{0113}\\x{0115}\\x{0117}\\x{0119}\\x{011B}\\x{0435}\\x{044D}\\x{00C8}-\\x{00CA}\\x{1EB8}-\\x{1EC7}]/u',\n            /* f  */ '/[\\x{0444}]/u',\n            /* g  */ '/[\\x{011F}\\x{0121}\\x{0123}\\x{0433}\\x{0491}]/u',\n            /* h  */ '/[\\x{0125}\\x{0127}]/u',\n            /* i  */ '/[\\x{00EC}\\x{00ED}\\x{00EE}\\x{00EF}\\x{0129}\\x{012B}\\x{012D}\\x{012F}\\x{0131}\\x{0438}\\x{0456}\\x{00CC}\\x{00CD}\\x{1EC8}-\\x{1ECB}\\x{0128}]/u',\n            /* j  */ '/[\\x{0135}\\x{0439}]/u',\n            /* k  */ '/[\\x{0137}\\x{0138}\\x{043A}]/u',\n            /* l  */ '/[\\x{013A}\\x{013C}\\x{013E}\\x{0140}\\x{0142}\\x{043B}]/u',\n            /* m  */ '/[\\x{043C}]/u',\n            /* n  */ '/[\\x{00F1}\\x{0144}\\x{0146}\\x{0148}\\x{0149}\\x{014B}\\x{043D}]/u',\n            /* o  */ '/[\\x{00F2}\\x{00F3}\\x{00F4}\\x{00F5}\\x{00F6}\\x{00F8}\\x{014D}\\x{014F}\\x{0151}\\x{043E}\\x{00D2}-\\x{00D5}\\x{01A0}\\x{01A1}\\x{1ECC}-\\x{1EE3}]/u',\n            /* p  */ '/[\\x{043F}]/u',\n            /* r  */ '/[\\x{0155}\\x{0157}\\x{0159}\\x{0440}]/u',\n            /* s  */ '/[\\x{015B}\\x{015D}\\x{015F}\\x{0161}\\x{0441}]/u',\n            /* ss */ '/[\\x{00DF}]/u',\n            /* t  */ '/[\\x{0163}\\x{0165}\\x{0167}\\x{0442}]/u',\n            /* u  */ '/[\\x{00F9}\\x{00FA}\\x{00FB}\\x{00FC}\\x{0169}\\x{016B}\\x{016D}\\x{016F}\\x{0171}\\x{0173}\\x{0443}\\x{00D9}-\\x{00DA}\\x{0168}\\x{01AF}\\x{01B0}\\x{1EE4}-\\x{1EF1}]/u',\n            /* v  */ '/[\\x{0432}]/u',\n            /* w  */ '/[\\x{0175}]/u',\n            /* y  */ '/[\\x{00FF}\\x{0177}\\x{00FD}\\x{044B}\\x{1EF2}-\\x{1EF9}\\x{00DD}]/u',\n            /* z  */ '/[\\x{017A}\\x{017C}\\x{017E}\\x{0437}]/u',\n            /* ae */ '/[\\x{00E6}]/u',\n            /* ch */ '/[\\x{0447}]/u',\n            /* kh */ '/[\\x{0445}]/u',\n            /* oe */ '/[\\x{0153}]/u',\n            /* sh */ '/[\\x{0448}]/u',\n            /* shh*/ '/[\\x{0449}]/u',\n            /* ya */ '/[\\x{044F}]/u',\n            /* ye */ '/[\\x{0454}]/u',\n            /* yi */ '/[\\x{0457}]/u',\n            /* yo */ '/[\\x{0451}]/u',\n            /* yu */ '/[\\x{044E}]/u',\n            /* zh */ '/[\\x{0436}]/u',\n\n            /* Uppercase */\n            /* A  */ '/[\\x{0100}\\x{0102}\\x{0104}\\x{00C0}\\x{00C1}\\x{00C2}\\x{00C3}\\x{00C4}\\x{00C5}\\x{0410}]/u',\n            /* B  */ '/[\\x{0411}]/u',\n            /* C  */ '/[\\x{00C7}\\x{0106}\\x{0108}\\x{010A}\\x{010C}\\x{0426}]/u',\n            /* D  */ '/[\\x{010E}\\x{0110}\\x{0414}\\x{00D0}]/u',\n            /* E  */ '/[\\x{00C8}\\x{00C9}\\x{00CA}\\x{00CB}\\x{0112}\\x{0114}\\x{0116}\\x{0118}\\x{011A}\\x{0415}\\x{042D}]/u',\n            /* F  */ '/[\\x{0424}]/u',\n            /* G  */ '/[\\x{011C}\\x{011E}\\x{0120}\\x{0122}\\x{0413}\\x{0490}]/u',\n            /* H  */ '/[\\x{0124}\\x{0126}]/u',\n            /* I  */ '/[\\x{0128}\\x{012A}\\x{012C}\\x{012E}\\x{0130}\\x{0418}\\x{0406}]/u',\n            /* J  */ '/[\\x{0134}\\x{0419}]/u',\n            /* K  */ '/[\\x{0136}\\x{041A}]/u',\n            /* L  */ '/[\\x{0139}\\x{013B}\\x{013D}\\x{0139}\\x{0141}\\x{041B}]/u',\n            /* M  */ '/[\\x{041C}]/u',\n            /* N  */ '/[\\x{00D1}\\x{0143}\\x{0145}\\x{0147}\\x{014A}\\x{041D}]/u',\n            /* O  */ '/[\\x{00D3}\\x{014C}\\x{014E}\\x{0150}\\x{041E}]/u',\n            /* P  */ '/[\\x{041F}]/u',\n            /* R  */ '/[\\x{0154}\\x{0156}\\x{0158}\\x{0420}]/u',\n            /* S  */ '/[\\x{015A}\\x{015C}\\x{015E}\\x{0160}\\x{0421}]/u',\n            /* T  */ '/[\\x{0162}\\x{0164}\\x{0166}\\x{0422}]/u',\n            /* U  */ '/[\\x{00D9}\\x{00DA}\\x{00DB}\\x{00DC}\\x{0168}\\x{016A}\\x{016C}\\x{016E}\\x{0170}\\x{0172}\\x{0423}]/u',\n            /* V  */ '/[\\x{0412}]/u',\n            /* W  */ '/[\\x{0174}]/u',\n            /* Y  */ '/[\\x{0176}\\x{042B}]/u',\n            /* Z  */ '/[\\x{0179}\\x{017B}\\x{017D}\\x{0417}]/u',\n            /* AE */ '/[\\x{00C6}]/u',\n            /* CH */ '/[\\x{0427}]/u',\n            /* KH */ '/[\\x{0425}]/u',\n            /* OE */ '/[\\x{0152}]/u',\n            /* SH */ '/[\\x{0428}]/u',\n            /* SHH*/ '/[\\x{0429}]/u',\n            /* YA */ '/[\\x{042F}]/u',\n            /* YE */ '/[\\x{0404}]/u',\n            /* YI */ '/[\\x{0407}]/u',\n            /* YO */ '/[\\x{0401}]/u',\n            /* YU */ '/[\\x{042E}]/u',\n            /* ZH */ '/[\\x{0416}]/u',\n        );\n\n        // \u00f6 to oe\n        // \u00e5 to aa\n        // \u00e4 to ae\n\n        $replacements = array(\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 'ss', 't', 'u', 'v', 'w', 'y', 'z', 'ae', 'ch', 'kh', 'oe', 'sh', 'shh', 'ya', 'ye', 'yi', 'yo', 'yu', 'zh',\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'Y', 'Z', 'AE', 'CH', 'KH', 'OE', 'SH', 'SHH', 'YA', 'YE', 'YI', 'YO', 'YU', 'ZH',\n        );\n\n        return preg_replace($patterns, $replacements, $str);\n    }\n\n    /**\n     * Truncate strings.\n     *\n     * @param string $str\n     * @param int $max_length Max length\n     * @param string $suffix Suffix optional\n     *\n     * @return string $str truncated\n     */\n    /* CAUTION : Use it only on module hookEvents.\n    ** For other purposes use the smarty function instead */\n    public static function truncate($str, $max_length, $suffix = '...')\n    {\n        if (Tools::strlen($str) <= $max_length) {\n            return $str;\n        }\n        $str = utf8_decode($str);\n\n        return utf8_encode(substr($str, 0, $max_length - Tools::strlen($suffix)) . $suffix);\n    }\n\n    /*Copied from CakePHP String utility file*/\n    public static function truncateString($text, $length = 120, $options = array())\n    {\n        $default = array(\n            'ellipsis' => '...', 'exact' => true, 'html' => true,\n        );\n\n        $options = array_merge($default, $options);\n        extract($options);\n        /**\n         * @var string\n         * @var bool $exact\n         * @var bool $html\n         */\n        if ($html) {\n            if (Tools::strlen(preg_replace('/<.*?>/', '', $text)) <= $length) {\n                return $text;\n            }\n\n            $total_length = Tools::strlen(strip_tags($ellipsis));\n            $open_tags = array();\n            $truncate = '';\n            preg_match_all('/(<\\/?([\\w+]+)[^>]*>)?([^<>]*)/', $text, $tags, PREG_SET_ORDER);\n\n            foreach ($tags as $tag) {\n                if (!preg_match('/img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param/s', $tag[2])) {\n                    if (preg_match('/<[\\w]+[^>]*>/s', $tag[0])) {\n                        array_unshift($open_tags, $tag[2]);\n                    } elseif (preg_match('/<\\/([\\w]+)[^>]*>/s', $tag[0], $close_tag)) {\n                        $pos = array_search($close_tag[1], $open_tags);\n                        if ($pos !== false) {\n                            array_splice($open_tags, $pos, 1);\n                        }\n                    }\n                }\n                $truncate .= $tag[1];\n                $content_length = Tools::strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', ' ', $tag[3]));\n\n                if ($content_length + $total_length > $length) {\n                    $left = $length - $total_length;\n                    $entities_length = 0;\n\n                    if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', $tag[3], $entities, PREG_OFFSET_CAPTURE)) {\n                        foreach ($entities[0] as $entity) {\n                            if ($entity[1] + 1 - $entities_length <= $left) {\n                                --$left;\n                                $entities_length += Tools::strlen($entity[0]);\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n\n                    $truncate .= Tools::substr($tag[3], 0, $left + $entities_length);\n\n                    break;\n                } else {\n                    $truncate .= $tag[3];\n                    $total_length += $content_length;\n                }\n\n                if ($total_length >= $length) {\n                    break;\n                }\n            }\n        } else {\n            if (Tools::strlen($text) <= $length) {\n                return $text;\n            }\n\n            $truncate = Tools::substr($text, 0, $length - Tools::strlen($ellipsis));\n        }\n\n        if (!$exact) {\n            $spacepos = Tools::strrpos($truncate, ' ');\n            if ($html) {\n                $truncate_check = Tools::substr($truncate, 0, $spacepos);\n                $last_open_tag = Tools::strrpos($truncate_check, '<');\n                $last_close_tag = Tools::strrpos($truncate_check, '>');\n\n                if ($last_open_tag > $last_close_tag) {\n                    preg_match_all('/<[\\w]+[^>]*>/s', $truncate, $last_tag_matches);\n                    $last_tag = array_pop($last_tag_matches[0]);\n                    $spacepos = Tools::strrpos($truncate, $last_tag) + Tools::strlen($last_tag);\n                }\n\n                $bits = Tools::substr($truncate, $spacepos);\n                preg_match_all('/<\\/([a-z]+)>/', $bits, $dropped_tags, PREG_SET_ORDER);\n\n                if (!empty($dropped_tags)) {\n                    if (!empty($open_tags)) {\n                        foreach ($dropped_tags as $closing_tag) {\n                            if (!in_array($closing_tag[1], $open_tags)) {\n                                array_unshift($open_tags, $closing_tag[1]);\n                            }\n                        }\n                    } else {\n                        foreach ($dropped_tags as $closing_tag) {\n                            $open_tags[] = $closing_tag[1];\n                        }\n                    }\n                }\n            }\n\n            $truncate = Tools::substr($truncate, 0, $spacepos);\n        }\n\n        $truncate .= $ellipsis;\n\n        if ($html) {\n            foreach ($open_tags as $tag) {\n                $truncate .= '</' . $tag . '>';\n            }\n        }\n\n        return $truncate;\n    }\n\n    public static function normalizeDirectory($directory)\n    {\n        return rtrim($directory, '/\\\\') . DIRECTORY_SEPARATOR;\n    }\n\n    /**\n     * Generate date form.\n     *\n     * @param int $year Year to select\n     * @param int $month Month to select\n     * @param int $day Day to select\n     *\n     * @return array $tab html data with 3 cells :['days'], ['months'], ['years']\n     */\n    public static function dateYears()\n    {\n        $tab = array();\n        for ($i = date('Y'); $i >= 1900; --$i) {\n            $tab[] = $i;\n        }\n\n        return $tab;\n    }\n\n    public static function dateDays()\n    {\n        $tab = array();\n        for ($i = 1; $i != 32; ++$i) {\n            $tab[] = $i;\n        }\n\n        return $tab;\n    }\n\n    public static function dateMonths()\n    {\n        $tab = array();\n        for ($i = 1; $i != 13; ++$i) {\n            $tab[$i] = date('F', mktime(0, 0, 0, $i, date('m'), date('Y')));\n        }\n\n        return $tab;\n    }\n\n    public static function hourGenerate($hours, $minutes, $seconds)\n    {\n        return implode(':', array($hours, $minutes, $seconds));\n    }\n\n    public static function dateFrom($date)\n    {\n        $tab = explode(' ', $date);\n        if (!isset($tab[1])) {\n            $date .= ' ' . Tools::hourGenerate(0, 0, 0);\n        }\n\n        return $date;\n    }\n\n    public static function dateTo($date)\n    {\n        $tab = explode(' ', $date);\n        if (!isset($tab[1])) {\n            $date .= ' ' . Tools::hourGenerate(23, 59, 59);\n        }\n\n        return $date;\n    }\n\n    public static function strtolower($str)\n    {\n        if (is_array($str)) {\n            return false;\n        }\n        if (function_exists('mb_strtolower')) {\n            return mb_strtolower($str, 'utf-8');\n        }\n\n        return strtolower($str);\n    }\n\n    public static function strlen($str, $encoding = 'UTF-8')\n    {\n        if (is_array($str)) {\n            return false;\n        }\n        $str = html_entity_decode($str, ENT_COMPAT, 'UTF-8');\n        if (function_exists('mb_strlen')) {\n            return mb_strlen($str, $encoding);\n        }\n\n        return strlen($str);\n    }\n\n    public static function stripslashes($string)\n    {\n        if (_PS_MAGIC_QUOTES_GPC_) {\n            $string = stripslashes($string);\n        }\n\n        return $string;\n    }\n\n    public static function strtoupper($str)\n    {\n        if (is_array($str)) {\n            return false;\n        }\n        if (function_exists('mb_strtoupper')) {\n            return mb_strtoupper($str, 'utf-8');\n        }\n\n        return strtoupper($str);\n    }\n\n    public static function substr($str, $start, $length = false, $encoding = 'utf-8')\n    {\n        if (is_array($str)) {\n            return false;\n        }\n        if (function_exists('mb_substr')) {\n            return mb_substr($str, (int) $start, ($length === false ? Tools::strlen($str) : (int) $length), $encoding);\n        }\n\n        return substr($str, $start, ($length === false ? Tools::strlen($str) : (int) $length));\n    }\n\n    public static function strpos($str, $find, $offset = 0, $encoding = 'UTF-8')\n    {\n        if (function_exists('mb_strpos')) {\n            return mb_strpos($str, $find, $offset, $encoding);\n        }\n\n        return strpos($str, $find, $offset);\n    }\n\n    public static function strrpos($str, $find, $offset = 0, $encoding = 'utf-8')\n    {\n        if (function_exists('mb_strrpos')) {\n            return mb_strrpos($str, $find, $offset, $encoding);\n        }\n\n        return strrpos($str, $find, $offset);\n    }\n\n    public static function ucfirst($str)\n    {\n        return Tools::strtoupper(Tools::substr($str, 0, 1)) . Tools::substr($str, 1);\n    }\n\n    public static function ucwords($str)\n    {\n        if (function_exists('mb_convert_case')) {\n            return mb_convert_case($str, MB_CASE_TITLE);\n        }\n\n        return ucwords(Tools::strtolower($str));\n    }\n\n    public static function orderbyPrice(&$array, $order_way)\n    {\n        foreach ($array as &$row) {\n            $row['price_tmp'] = Product::getPriceStatic($row['id_product'], true, ((isset($row['id_product_attribute']) && !empty($row['id_product_attribute'])) ? (int) $row['id_product_attribute'] : null), 2);\n        }\n\n        unset($row);\n\n        if (Tools::strtolower($order_way) == 'desc') {\n            uasort($array, 'cmpPriceDesc');\n        } else {\n            uasort($array, 'cmpPriceAsc');\n        }\n        foreach ($array as &$row) {\n            unset($row['price_tmp']);\n        }\n    }\n\n    public static function iconv($from, $to, $string)\n    {\n        if (function_exists('iconv')) {\n            return iconv($from, $to . '//TRANSLIT', str_replace('\u00a5', '&yen;', str_replace('\u00a3', '&pound;', str_replace('\u20ac', '&euro;', $string))));\n        }\n\n        return html_entity_decode(htmlentities($string, ENT_NOQUOTES, $from), ENT_NOQUOTES, $to);\n    }\n\n    public static function isEmpty($field)\n    {\n        return $field === '' || $field === null;\n    }\n\n    /**\n     * returns the rounded value of $value to specified precision, according to your configuration;.\n     *\n     * @note : PHP 5.3.0 introduce a 3rd parameter mode in round function\n     *\n     * @param float $value\n     * @param int $precision\n     *\n     * @return float\n     */\n    public static function ps_round($value, $precision = 0, $round_mode = null)\n    {\n        if ($round_mode === null) {\n            if (Tools::$round_mode == null) {\n                Tools::$round_mode = (int) Configuration::get('PS_PRICE_ROUND_MODE');\n            }\n\n            $round_mode = Tools::$round_mode;\n        }\n\n        switch ($round_mode) {\n            case PS_ROUND_UP:\n                return Tools::ceilf($value, $precision);\n            case PS_ROUND_DOWN:\n                return Tools::floorf($value, $precision);\n            case PS_ROUND_HALF_DOWN:\n            case PS_ROUND_HALF_EVEN:\n            case PS_ROUND_HALF_ODD:\n                return Tools::math_round($value, $precision, $round_mode);\n            case PS_ROUND_HALF_UP:\n            default:\n                return Tools::math_round($value, $precision, PS_ROUND_HALF_UP);\n        }\n    }\n\n    public static function math_round($value, $places, $mode = PS_ROUND_HALF_UP)\n    {\n        //If PHP_ROUND_HALF_UP exist (PHP 5.3) use it and pass correct mode value (PrestaShop define - 1)\n        if (defined('PHP_ROUND_HALF_UP')) {\n            return round($value, $places, $mode - 1);\n        }\n\n        $precision_places = 14 - floor(log10(abs($value)));\n        $f1 = 10.0 ** (float) abs($places);\n\n        /* If the decimal precision guaranteed by FP arithmetic is higher than\n        * the requested places BUT is small enough to make sure a non-zero value\n        * is returned, pre-round the result to the precision */\n        if ($precision_places > $places && $precision_places - $places < 15) {\n            $f2 = 10.0 ** (float) abs($precision_places);\n\n            if ($precision_places >= 0) {\n                $tmp_value = $value * $f2;\n            } else {\n                $tmp_value = $value / $f2;\n            }\n\n            /* preround the result (tmp_value will always be something * 1e14,\n            * thus never larger than 1e15 here) */\n            $tmp_value = Tools::round_helper($tmp_value, $mode);\n            /* now correctly move the decimal point */\n            $f2 = 10.0 ** (float) abs($places - $precision_places);\n            /* because places < precision_places */\n            $tmp_value = $tmp_value / $f2;\n        } else {\n            /* adjust the value */\n            if ($places >= 0) {\n                $tmp_value = $value * $f1;\n            } else {\n                $tmp_value = $value / $f1;\n            }\n\n            /* This value is beyond our precision, so rounding it is pointless */\n            if (abs($tmp_value) >= 1e15) {\n                return $value;\n            }\n        }\n\n        /* round the temp value */\n        $tmp_value = Tools::round_helper($tmp_value, $mode);\n\n        /* see if it makes sense to use simple division to round the value */\n        if (abs($places) < 23) {\n            if ($places > 0) {\n                $tmp_value /= $f1;\n            } else {\n                $tmp_value *= $f1;\n            }\n        }\n\n        return $tmp_value;\n    }\n\n    public static function round_helper($value, $mode)\n    {\n        if ($value >= 0.0) {\n            $tmp_value = floor($value + 0.5);\n\n            if (($mode == PS_ROUND_HALF_DOWN && $value == (-0.5 + $tmp_value)) ||\n                ($mode == PS_ROUND_HALF_EVEN && $value == (0.5 + 2 * floor($tmp_value / 2.0))) ||\n                ($mode == PS_ROUND_HALF_ODD && $value == (0.5 + 2 * floor($tmp_value / 2.0) - 1.0))) {\n                $tmp_value = $tmp_value - 1.0;\n            }\n        } else {\n            $tmp_value = ceil($value - 0.5);\n\n            if (($mode == PS_ROUND_HALF_DOWN && $value == (0.5 + $tmp_value)) ||\n                ($mode == PS_ROUND_HALF_EVEN && $value == (-0.5 + 2 * ceil($tmp_value / 2.0))) ||\n                ($mode == PS_ROUND_HALF_ODD && $value == (-0.5 + 2 * ceil($tmp_value / 2.0) + 1.0))) {\n                $tmp_value = $tmp_value + 1.0;\n            }\n        }\n\n        return $tmp_value;\n    }\n\n    /**\n     * returns the rounded value up of $value to specified precision.\n     *\n     * @param float $value\n     * @param int $precision\n     *\n     * @return float\n     */\n    public static function ceilf($value, $precision = 0)\n    {\n        $precision_factor = $precision == 0 ? 1 : 10 ** $precision;\n        $tmp = $value * $precision_factor;\n        $tmp2 = (string) $tmp;\n        // If the current value has already the desired precision\n        if (strpos($tmp2, '.') === false) {\n            return $value;\n        }\n        if ($tmp2[strlen($tmp2) - 1] == 0) {\n            return $value;\n        }\n\n        return ceil($tmp) / $precision_factor;\n    }\n\n    /**\n     * returns the rounded value down of $value to specified precision.\n     *\n     * @param float $value\n     * @param int $precision\n     *\n     * @return float\n     */\n    public static function floorf($value, $precision = 0)\n    {\n        $precision_factor = $precision == 0 ? 1 : 10 ** $precision;\n        $tmp = $value * $precision_factor;\n        $tmp2 = (string) $tmp;\n        // If the current value has already the desired precision\n        if (strpos($tmp2, '.') === false) {\n            return $value;\n        }\n        if ($tmp2[strlen($tmp2) - 1] == 0) {\n            return $value;\n        }\n\n        return floor($tmp) / $precision_factor;\n    }\n\n    /**\n     * file_exists() wrapper with cache to speedup performance.\n     *\n     * @param string $filename File name\n     *\n     * @return bool Cached result of file_exists($filename)\n     */\n    public static function file_exists_cache($filename)\n    {\n        if (!isset(self::$file_exists_cache[$filename])) {\n            self::$file_exists_cache[$filename] = file_exists($filename);\n        }\n\n        return self::$file_exists_cache[$filename];\n    }\n\n    /**\n     * file_exists() wrapper with a call to clearstatcache prior.\n     *\n     * @param string $filename File name\n     *\n     * @return bool Cached result of file_exists($filename)\n     */\n    public static function file_exists_no_cache($filename)\n    {\n        clearstatcache();\n\n        return file_exists($filename);\n    }\n\n    /**\n     * refresh a local cacert file.\n     */\n    public static function refreshCACertFile()\n    {\n        if ((time() - @filemtime(_PS_CACHE_CA_CERT_FILE_) > 1296000)) {\n            $stream_context = @stream_context_create(\n                array(\n                    'http' => array('timeout' => 3),\n                    'ssl' => array(\n                        'cafile' => CaBundle::getBundledCaBundlePath(),\n                    ),\n                )\n            );\n\n            $ca_cert_content = @file_get_contents(Tools::CACERT_LOCATION, false, $stream_context);\n            if (empty($ca_cert_content)) {\n                $ca_cert_content = @file_get_contents(CaBundle::getBundledCaBundlePath());\n            }\n\n            if (\n                preg_match('/(.*-----BEGIN CERTIFICATE-----.*-----END CERTIFICATE-----){50}$/Uims', $ca_cert_content) &&\n                substr(rtrim($ca_cert_content), -1) == '-'\n            ) {\n                file_put_contents(_PS_CACHE_CA_CERT_FILE_, $ca_cert_content);\n            }\n        }\n    }\n\n    private static function file_get_contents_curl(\n        $url,\n        $curl_timeout,\n        $opts\n    ) {\n        $content = false;\n\n        if (function_exists('curl_init')) {\n            Tools::refreshCACertFile();\n            $curl = curl_init();\n\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt($curl, CURLOPT_URL, $url);\n            curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 5);\n            curl_setopt($curl, CURLOPT_TIMEOUT, $curl_timeout);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl, CURLOPT_CAINFO, _PS_CACHE_CA_CERT_FILE_);\n            curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($curl, CURLOPT_MAXREDIRS, 5);\n\n            if ($opts != null) {\n                if (isset($opts['http']['method']) && Tools::strtolower($opts['http']['method']) == 'post') {\n                    curl_setopt($curl, CURLOPT_POST, true);\n                    if (isset($opts['http']['content'])) {\n                        parse_str($opts['http']['content'], $post_data);\n                        curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);\n                    }\n                }\n            }\n\n            $content = curl_exec($curl);\n\n            if (false === $content && _PS_MODE_DEV_) {\n                $errorMessage = sprintf('file_get_contents_curl failed to download %s : (error code %d) %s',\n                    $url,\n                    curl_errno($curl),\n                    curl_error($curl)\n                );\n\n                throw new \\Exception($errorMessage);\n            }\n\n            curl_close($curl);\n        }\n\n        return $content;\n    }\n\n    private static function file_get_contents_fopen(\n        $url,\n        $use_include_path,\n        $stream_context\n    ) {\n        $content = false;\n\n        if (in_array(ini_get('allow_url_fopen'), array('On', 'on', '1'))) {\n            $content = @file_get_contents($url, $use_include_path, $stream_context);\n        }\n\n        return $content;\n    }\n\n    /**\n     * This method allows to get the content from either a URL or a local file.\n     *\n     * @param string $url the url to get the content from\n     * @param bool $use_include_path second parameter of http://php.net/manual/en/function.file-get-contents.php\n     * @param resource $stream_context third parameter of http://php.net/manual/en/function.file-get-contents.php\n     * @param int $curl_timeout\n     * @param bool $fallback whether or not to use the fallback if the main solution fails\n     *\n     * @return bool|string false or the string content\n     */\n    public static function file_get_contents(\n        $url,\n        $use_include_path = false,\n        $stream_context = null,\n        $curl_timeout = 5,\n        $fallback = false\n    ) {\n        $is_local_file = !preg_match('/^https?:\\/\\//', $url);\n        $require_fopen = false;\n        $opts = null;\n\n        if ($stream_context) {\n            $opts = stream_context_get_options($stream_context);\n            if (isset($opts['http'])) {\n                $require_fopen = true;\n                $opts_layer = array_diff_key($opts, array('http' => null));\n                $http_layer = array_diff_key($opts['http'], array('method' => null, 'content' => null));\n                if (empty($opts_layer) && empty($http_layer)) {\n                    $require_fopen = false;\n                }\n            }\n        } elseif (!$is_local_file) {\n            $stream_context = @stream_context_create(\n                array(\n                    'http' => array('timeout' => $curl_timeout),\n                    'ssl' => array(\n                        'verify_peer' => true,\n                        'cafile' => CaBundle::getBundledCaBundlePath(),\n                    ),\n                )\n            );\n        }\n\n        if ($is_local_file) {\n            $content = @file_get_contents($url, $use_include_path, $stream_context);\n        } else {\n            if ($require_fopen) {\n                $content = Tools::file_get_contents_fopen($url, $use_include_path, $stream_context);\n            } else {\n                $content = Tools::file_get_contents_curl($url, $curl_timeout, $opts);\n                if (empty($content) && $fallback) {\n                    $content = Tools::file_get_contents_fopen($url, $use_include_path, $stream_context);\n                }\n            }\n        }\n\n        return $content;\n    }\n\n    /**\n     * Create a local file from url\n     * required because ZipArchive is unable to extract from remote files.\n     *\n     * @param string $url the remote location\n     *\n     * @return bool|string false if failure, else the local filename\n     */\n    public static function createFileFromUrl($url)\n    {\n        $remoteFile = fopen($url, 'rb');\n        if (!$remoteFile) {\n            return false;\n        }\n        $localFile = fopen(basename($url), 'wb');\n        if (!$localFile) {\n            return false;\n        }\n\n        while (!feof($remoteFile)) {\n            $data = fread($remoteFile, 1024);\n            fwrite($localFile, $data, 1024);\n        }\n\n        fclose($remoteFile);\n        fclose($localFile);\n\n        return basename($url);\n    }\n\n    public static function simplexml_load_file($url, $class_name = null)\n    {\n        $cache_id = 'Tools::simplexml_load_file' . $url;\n        if (!Cache::isStored($cache_id)) {\n            $result = @simplexml_load_string(Tools::file_get_contents($url), $class_name);\n            Cache::store($cache_id, $result);\n\n            return $result;\n        }\n\n        return Cache::retrieve($cache_id);\n    }\n\n    public static function copy($source, $destination, $stream_context = null)\n    {\n        if (null === $stream_context && !preg_match('/^https?:\\/\\//', $source)) {\n            return @copy($source, $destination);\n        }\n\n        return @file_put_contents($destination, Tools::file_get_contents($source, false, $stream_context));\n    }\n\n    /**\n     * Translates a string with underscores into camel case (e.g. first_name -> firstName).\n     *\n     * @prototype string public static function toCamelCase(string $str[, bool $capitalise_first_char = false])\n     *\n     * @param string $str Source string to convert in camel case\n     * @param bool $capitaliseFirstChar Optionnal parameters to transform the first letter in upper case\n     *\n     * @return string The string in camel case\n     */\n    public static function toCamelCase($str, $capitaliseFirstChar = false)\n    {\n        $str = Tools::strtolower($str);\n        $str = str_replace(' ', '', ucwords(str_replace(['-', '_'], ' ', $str)));\n        if (!$capitaliseFirstChar) {\n            $str = lcfirst($str);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Transform a CamelCase string to underscore_case string.\n     *\n     * @param string $string\n     *\n     * @return string\n     */\n    public static function toUnderscoreCase($string)\n    {\n        // 'CMSCategories' => 'cms_categories'\n        // 'RangePrice' => 'range_price'\n        return Tools::strtolower(trim(preg_replace('/([A-Z][a-z])/', '_$1', $string), '_'));\n    }\n\n    /**\n     * Converts SomethingLikeThis to something-like-this\n     * The name comes from Perl, we like Perl.\n     */\n    public static function camelCaseToKebabCase($string)\n    {\n        return Tools::strtolower(\n            preg_replace('/([a-z])([A-Z])/', '$1-$2', $string)\n        );\n    }\n\n    public static function getBrightness($hex)\n    {\n        if (Tools::strtolower($hex) == 'transparent') {\n            return '129';\n        }\n\n        $hex = str_replace('#', '', $hex);\n\n        if (Tools::strlen($hex) == 3) {\n            $hex .= $hex;\n        }\n\n        $r = hexdec(substr($hex, 0, 2));\n        $g = hexdec(substr($hex, 2, 2));\n        $b = hexdec(substr($hex, 4, 2));\n\n        return (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n    }\n\n    public static function parserSQL($sql)\n    {\n        if (strlen($sql) > 0) {\n            $parser = new PHPSQLParser($sql);\n\n            return $parser->parsed;\n        }\n\n        return false;\n    }\n\n    public static function replaceByAbsoluteURL($matches)\n    {\n        Tools::displayAsDeprecated('Use Media::replaceByAbsoluteURL($matches) instead');\n\n        return Media::replaceByAbsoluteURL($matches);\n    }\n\n    protected static $_cache_nb_media_servers = null;\n\n    public static function getMediaServer($filename)\n    {\n        if (self::$_cache_nb_media_servers === null && defined('_MEDIA_SERVER_1_') && defined('_MEDIA_SERVER_2_') && defined('_MEDIA_SERVER_3_')) {\n            if (_MEDIA_SERVER_1_ == '') {\n                self::$_cache_nb_media_servers = 0;\n            } elseif (_MEDIA_SERVER_2_ == '') {\n                self::$_cache_nb_media_servers = 1;\n            } elseif (_MEDIA_SERVER_3_ == '') {\n                self::$_cache_nb_media_servers = 2;\n            } else {\n                self::$_cache_nb_media_servers = 3;\n            }\n        }\n\n        if ($filename && self::$_cache_nb_media_servers && ($id_media_server = (abs(crc32($filename)) % self::$_cache_nb_media_servers + 1))) {\n            return constant('_MEDIA_SERVER_' . $id_media_server . '_');\n        }\n\n        return Tools::usingSecureMode() ? Tools::getShopDomainSsl() : Tools::getShopDomain();\n    }\n\n    /**\n     * Get domains information with physical and virtual paths\n     *\n     * e.g: [\n     *  prestashop.localhost => [\n     *    physical => \"/\",\n     *    virtual => \"\",\n     *    id_shop => \"1\",\n     *  ]\n     * ]\n     *\n     * @return array\n     */\n    public static function getDomains()\n    {\n        $domains = [];\n        foreach (ShopUrl::getShopUrls() as $shop_url) {\n            /** @var ShopUrl $shop_url */\n            if (!isset($domains[$shop_url->domain])) {\n                $domains[$shop_url->domain] = [];\n            }\n\n            $domains[$shop_url->domain][] = [\n                'physical' => $shop_url->physical_uri,\n                'virtual' => $shop_url->virtual_uri,\n                'id_shop' => $shop_url->id_shop,\n            ];\n\n            if ($shop_url->domain == $shop_url->domain_ssl) {\n                continue;\n            }\n\n            if (!isset($domains[$shop_url->domain_ssl])) {\n                $domains[$shop_url->domain_ssl] = [];\n            }\n\n            $domains[$shop_url->domain_ssl][] = [\n                'physical' => $shop_url->physical_uri,\n                'virtual' => $shop_url->virtual_uri,\n                'id_shop' => $shop_url->id_shop,\n            ];\n        }\n\n        return $domains;\n    }\n\n    public static function generateHtaccess($path = null, $rewrite_settings = null, $cache_control = null, $specific = '', $disable_multiviews = null, $medias = false, $disable_modsec = null)\n    {\n        if (defined('_PS_IN_TEST_')\n            || (defined('PS_INSTALLATION_IN_PROGRESS') && $rewrite_settings === null)\n        ) {\n            return true;\n        }\n\n        // Default values for parameters\n        if (null === $path) {\n            $path = _PS_ROOT_DIR_ . '/.htaccess';\n        }\n\n        if (null === $cache_control) {\n            $cache_control = (int) Configuration::get('PS_HTACCESS_CACHE_CONTROL');\n        }\n        if (null === $disable_multiviews) {\n            $disable_multiviews = (bool) Configuration::get('PS_HTACCESS_DISABLE_MULTIVIEWS');\n        }\n\n        if ($disable_modsec === null) {\n            $disable_modsec = (int) Configuration::get('PS_HTACCESS_DISABLE_MODSEC');\n        }\n\n        // Check current content of .htaccess and save all code outside of prestashop comments\n        $specific_before = $specific_after = '';\n        if (file_exists($path)) {\n            $content = file_get_contents($path);\n            if (preg_match('#^(.*)\\# ~~start~~.*\\# ~~end~~[^\\n]*(.*)$#s', $content, $m)) {\n                $specific_before = $m[1];\n                $specific_after = $m[2];\n            } else {\n                // For retrocompatibility\n                if (preg_match('#\\# http://www\\.prestashop\\.com - http://www\\.prestashop\\.com/forums\\s*(.*)<IfModule mod_rewrite\\.c>#si', $content, $m)) {\n                    $specific_before = $m[1];\n                } else {\n                    $specific_before = $content;\n                }\n            }\n        }\n\n        // Write .htaccess data\n        if (!$write_fd = @fopen($path, 'wb')) {\n            return false;\n        }\n        if ($specific_before) {\n            fwrite($write_fd, trim($specific_before) . \"\\n\\n\");\n        }\n\n        $domains = self::getDomains();\n\n        // Write data in .htaccess file\n        fwrite($write_fd, \"# ~~start~~ Do not remove this comment, Prestashop will keep automatically the code outside this comment when .htaccess will be generated again\\n\");\n        fwrite($write_fd, \"# .htaccess automaticaly generated by PrestaShop e-commerce open-source solution\\n\");\n        fwrite($write_fd, \"# http://www.prestashop.com - http://www.prestashop.com/forums\\n\\n\");\n\n        if ($disable_modsec) {\n            fwrite($write_fd, \"<IfModule mod_security.c>\\nSecFilterEngine Off\\nSecFilterScanPOST Off\\n</IfModule>\\n\\n\");\n        }\n\n        // RewriteEngine\n        fwrite($write_fd, \"<IfModule mod_rewrite.c>\\n\");\n\n        // Ensure HTTP_MOD_REWRITE variable is set in environment\n        fwrite($write_fd, \"<IfModule mod_env.c>\\n\");\n        fwrite($write_fd, \"SetEnv HTTP_MOD_REWRITE On\\n\");\n        fwrite($write_fd, \"</IfModule>\\n\\n\");\n\n        // Disable multiviews ?\n        if ($disable_multiviews) {\n            fwrite($write_fd, \"\\n# Disable Multiviews\\nOptions -Multiviews\\n\\n\");\n        }\n\n        fwrite($write_fd, \"RewriteEngine on\\n\");\n\n        if (!$medias && Configuration::getMultiShopValues('PS_MEDIA_SERVER_1')\n            && Configuration::getMultiShopValues('PS_MEDIA_SERVER_2')\n            && Configuration::getMultiShopValues('PS_MEDIA_SERVER_3')\n        ) {\n            $medias = array(\n                Configuration::getMultiShopValues('PS_MEDIA_SERVER_1'),\n                Configuration::getMultiShopValues('PS_MEDIA_SERVER_2'),\n                Configuration::getMultiShopValues('PS_MEDIA_SERVER_3'),\n            );\n        }\n\n        $media_domains = '';\n        foreach ($medias as $media) {\n            foreach ($media as $media_url) {\n                if ($media_url) {\n                    $media_domains .= 'RewriteCond %{HTTP_HOST} ^' . $media_url . '$ [OR]' . PHP_EOL;\n                }\n            }\n        }\n\n        if (Configuration::get('PS_WEBSERVICE_CGI_HOST')) {\n            fwrite($write_fd, \"RewriteCond %{HTTP:Authorization} ^(.*)\\nRewriteRule . - [E=HTTP_AUTHORIZATION:%1]\\n\\n\");\n        }\n\n        foreach ($domains as $domain => $list_uri) {\n            // As we use regex in the htaccess, ipv6 surrounded by brackets must be escaped\n            $domain = str_replace(['[', ']'], ['\\[', '\\]'], $domain);\n\n            foreach ($list_uri as $uri) {\n                fwrite($write_fd, PHP_EOL . PHP_EOL . '#Domain: ' . $domain . PHP_EOL);\n                if (Shop::isFeatureActive()) {\n                    fwrite($write_fd, 'RewriteCond %{HTTP_HOST} ^' . $domain . '$' . PHP_EOL);\n                }\n                fwrite($write_fd, 'RewriteRule . - [E=REWRITEBASE:' . $uri['physical'] . ']' . PHP_EOL);\n\n                // Webservice\n                fwrite($write_fd, 'RewriteRule ^api(?:/(.*))?$ %{ENV:REWRITEBASE}webservice/dispatcher.php?url=$1 [QSA,L]' . \"\\n\\n\");\n\n                if (!$rewrite_settings) {\n                    $rewrite_settings = (int) Configuration::get('PS_REWRITING_SETTINGS', null, null, (int) $uri['id_shop']);\n                }\n\n                $domain_rewrite_cond = 'RewriteCond %{HTTP_HOST} ^' . $domain . '$' . PHP_EOL;\n                // Rewrite virtual multishop uri\n                if ($uri['virtual']) {\n                    if (!$rewrite_settings) {\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^' . trim($uri['virtual'], '/') . '/?$ ' . $uri['physical'] . $uri['virtual'] . \"index.php [L,R]\\n\");\n                    } else {\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^' . trim($uri['virtual'], '/') . '$ ' . $uri['physical'] . $uri['virtual'] . \" [L,R]\\n\");\n                    }\n                    fwrite($write_fd, $media_domains);\n                    fwrite($write_fd, $domain_rewrite_cond);\n                    fwrite($write_fd, 'RewriteRule ^' . ltrim($uri['virtual'], '/') . '(.*) ' . $uri['physical'] . \"$1 [L]\\n\\n\");\n                }\n\n                if ($rewrite_settings) {\n                    // Compatibility with the old image filesystem\n                    fwrite($write_fd, \"# Images\\n\");\n                    if (Configuration::get('PS_LEGACY_IMAGES')) {\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^([a-z0-9]+)\\-([a-z0-9]+)(\\-[_a-zA-Z0-9-]*)(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/$1-$2$3$4.jpg [L]' . PHP_EOL);\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^([0-9]+)\\-([0-9]+)(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/$1-$2$3.jpg [L]' . PHP_EOL);\n                    }\n\n                    // Rewrite product images < 100 millions\n                    for ($i = 1; $i <= 8; ++$i) {\n                        $img_path = $img_name = '';\n                        for ($j = 1; $j <= $i; ++$j) {\n                            $img_path .= '$' . $j . '/';\n                            $img_name .= '$' . $j;\n                        }\n                        $img_name .= '$' . $j;\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^' . str_repeat('([0-9])', $i) . '(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/' . $img_path . $img_name . '$' . ($j + 1) . \".jpg [L]\\n\");\n                    }\n                    fwrite($write_fd, $media_domains);\n                    fwrite($write_fd, $domain_rewrite_cond);\n                    fwrite($write_fd, 'RewriteRule ^c/([0-9]+)(\\-[\\.*_a-zA-Z0-9-]*)(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/c/$1$2$3.jpg [L]' . PHP_EOL);\n                    fwrite($write_fd, $media_domains);\n                    fwrite($write_fd, $domain_rewrite_cond);\n                    fwrite($write_fd, 'RewriteRule ^c/([a-zA-Z_-]+)(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/c/$1$2.jpg [L]' . PHP_EOL);\n                }\n\n                fwrite($write_fd, \"# AlphaImageLoader for IE and fancybox\\n\");\n                if (Shop::isFeatureActive()) {\n                    fwrite($write_fd, $domain_rewrite_cond);\n                }\n                fwrite($write_fd, 'RewriteRule ^images_ie/?([^/]+)\\.(jpe?g|png|gif)$ js/jquery/plugins/fancybox/images/$1.$2 [L]' . PHP_EOL);\n            }\n            // Redirections to dispatcher\n            if ($rewrite_settings) {\n                fwrite($write_fd, \"\\n# Dispatcher\\n\");\n                fwrite($write_fd, \"RewriteCond %{REQUEST_FILENAME} -s [OR]\\n\");\n                fwrite($write_fd, \"RewriteCond %{REQUEST_FILENAME} -l [OR]\\n\");\n                fwrite($write_fd, \"RewriteCond %{REQUEST_FILENAME} -d\\n\");\n                if (Shop::isFeatureActive()) {\n                    fwrite($write_fd, $domain_rewrite_cond);\n                }\n                fwrite($write_fd, \"RewriteRule ^.*$ - [NC,L]\\n\");\n                if (Shop::isFeatureActive()) {\n                    fwrite($write_fd, $domain_rewrite_cond);\n                }\n                fwrite($write_fd, \"RewriteRule ^.*\\$ %{ENV:REWRITEBASE}index.php [NC,L]\\n\");\n            }\n        }\n\n        fwrite($write_fd, \"</IfModule>\\n\\n\");\n\n        fwrite($write_fd, \"AddType application/vnd.ms-fontobject .eot\\n\");\n        fwrite($write_fd, \"AddType font/ttf .ttf\\n\");\n        fwrite($write_fd, \"AddType font/otf .otf\\n\");\n        fwrite($write_fd, \"AddType application/font-woff .woff\\n\");\n        fwrite($write_fd, \"AddType font/woff2 .woff2\\n\");\n        fwrite($write_fd, \"<IfModule mod_headers.c>\n\t<FilesMatch \\\"\\.(ttf|ttc|otf|eot|woff|woff2|svg)$\\\">\n\t\tHeader set Access-Control-Allow-Origin \\\"*\\\"\n\t</FilesMatch>\n</IfModule>\\n\\n\");\n\n        // Cache control\n        if ($cache_control) {\n            $cache_control = \"<IfModule mod_expires.c>\n\tExpiresActive On\n\tExpiresByType image/gif \\\"access plus 1 month\\\"\n\tExpiresByType image/jpeg \\\"access plus 1 month\\\"\n\tExpiresByType image/png \\\"access plus 1 month\\\"\n\tExpiresByType text/css \\\"access plus 1 week\\\"\n\tExpiresByType text/javascript \\\"access plus 1 week\\\"\n\tExpiresByType application/javascript \\\"access plus 1 week\\\"\n\tExpiresByType application/x-javascript \\\"access plus 1 week\\\"\n\tExpiresByType image/x-icon \\\"access plus 1 year\\\"\n\tExpiresByType image/svg+xml \\\"access plus 1 year\\\"\n\tExpiresByType image/vnd.microsoft.icon \\\"access plus 1 year\\\"\n\tExpiresByType application/font-woff \\\"access plus 1 year\\\"\n\tExpiresByType application/x-font-woff \\\"access plus 1 year\\\"\n\tExpiresByType font/woff2 \\\"access plus 1 year\\\"\n\tExpiresByType application/vnd.ms-fontobject \\\"access plus 1 year\\\"\n\tExpiresByType font/opentype \\\"access plus 1 year\\\"\n\tExpiresByType font/ttf \\\"access plus 1 year\\\"\n\tExpiresByType font/otf \\\"access plus 1 year\\\"\n\tExpiresByType application/x-font-ttf \\\"access plus 1 year\\\"\n\tExpiresByType application/x-font-otf \\\"access plus 1 year\\\"\n</IfModule>\n\n<IfModule mod_headers.c>\n    Header unset Etag\n</IfModule>\nFileETag none\n<IfModule mod_deflate.c>\n    <IfModule mod_filter.c>\n        AddOutputFilterByType DEFLATE text/html text/css text/javascript application/javascript application/x-javascript font/ttf application/x-font-ttf font/otf application/x-font-otf font/opentype image/svg+xml\n    </IfModule>\n</IfModule>\\n\\n\";\n            fwrite($write_fd, $cache_control);\n        }\n\n        // In case the user hasn't rewrite mod enabled\n        fwrite($write_fd, \"#If rewrite mod isn't enabled\\n\");\n\n        // Do not remove ($domains is already iterated upper)\n        reset($domains);\n        $domain = current($domains);\n        fwrite($write_fd, 'ErrorDocument 404 ' . $domain[0]['physical'] . \"index.php?controller=404\\n\\n\");\n\n        fwrite($write_fd, '# ~~end~~ Do not remove this comment, Prestashop will keep automatically the code outside this comment when .htaccess will be generated again');\n        if ($specific_after) {\n            fwrite($write_fd, \"\\n\\n\" . trim($specific_after));\n        }\n        fclose($write_fd);\n\n        if (!defined('PS_INSTALLATION_IN_PROGRESS')) {\n            Hook::exec('actionHtaccessCreate');\n        }\n\n        return true;\n    }\n\n    public static function generateRobotsFile($executeHook = false)\n    {\n        $robots_file = _PS_ROOT_DIR_ . '/robots.txt';\n\n        if (!$write_fd = @fopen($robots_file, 'wb')) {\n            return false;\n        }\n\n        $robots_content = static::getRobotsContent();\n        $languagesIsoIds = Language::getIsoIds();\n\n        if (true === $executeHook) {\n            Hook::exec('actionAdminMetaBeforeWriteRobotsFile', array(\n                'rb_data' => &$robots_content,\n            ));\n        }\n\n        // PS Comments\n        fwrite($write_fd, \"# robots.txt automatically generated by PrestaShop e-commerce open-source solution\\n\");\n        fwrite($write_fd, \"# http://www.prestashop.com - http://www.prestashop.com/forums\\n\");\n        fwrite($write_fd, \"# This file is to prevent the crawling and indexing of certain parts\\n\");\n        fwrite($write_fd, \"# of your site by web crawlers and spiders run by sites like Yahoo!\\n\");\n        fwrite($write_fd, \"# and Google. By telling these \\\"robots\\\" where not to go on your site,\\n\");\n        fwrite($write_fd, \"# you save bandwidth and server resources.\\n\");\n        fwrite($write_fd, \"# For more information about the robots.txt standard, see:\\n\");\n        fwrite($write_fd, \"# http://www.robotstxt.org/robotstxt.html\\n\");\n\n        // User-Agent\n        fwrite($write_fd, \"User-agent: *\\n\");\n\n        // Allow Directives\n        if (count($robots_content['Allow'])) {\n            fwrite($write_fd, \"# Allow Directives\\n\");\n            foreach ($robots_content['Allow'] as $allow) {\n                fwrite($write_fd, 'Allow: ' . $allow . PHP_EOL);\n            }\n        }\n\n        // Private pages\n        if (count($robots_content['GB'])) {\n            fwrite($write_fd, \"# Private pages\\n\");\n            foreach ($robots_content['GB'] as $gb) {\n                fwrite($write_fd, 'Disallow: /*' . $gb . PHP_EOL);\n            }\n        }\n\n        // Directories\n        if (count($robots_content['Directories'])) {\n            foreach (self::getDomains() as $domain => $uriList) {\n                fwrite(\n                    $write_fd,\n                    sprintf(\n                        '# Directories for %s%s',\n                        $domain,\n                        PHP_EOL\n                    )\n                );\n                // Disallow multishop directories\n                foreach ($uriList as $uri) {\n                    foreach ($robots_content['Directories'] as $dir) {\n                        fwrite($write_fd, 'Disallow: ' . $uri['physical'] . $dir . PHP_EOL);\n                    }\n                }\n\n                // Disallow multilang directories\n                if (!empty($languagesIsoIds)) {\n                    foreach ($languagesIsoIds as $language) {\n                        foreach ($robots_content['Directories'] as $dir) {\n                            fwrite(\n                                $write_fd,\n                                sprintf(\n                                    'Disallow: /%s/%s%s',\n                                    $language['iso_code'],\n                                    $dir,\n                                    PHP_EOL\n                                )\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        // Files\n        if (count($robots_content['Files'])) {\n            fwrite($write_fd, \"# Files\\n\");\n            foreach ($robots_content['Files'] as $iso_code => $files) {\n                foreach ($files as $file) {\n                    if (!empty($languagesIsoIds)) {\n                        fwrite($write_fd, 'Disallow: /*' . $iso_code . '/' . $file . PHP_EOL);\n                    } else {\n                        fwrite($write_fd, 'Disallow: /' . $file . PHP_EOL);\n                    }\n                }\n            }\n        }\n\n        if (null === Context::getContext()) {\n            $sitemap_file = _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . 'index_sitemap.xml';\n        } else {\n            $sitemap_file = _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . Context::getContext()->shop->id . '_index_sitemap.xml';\n        }\n\n        // Sitemap\n        if (file_exists($sitemap_file) && filesize($sitemap_file)) {\n            fwrite($write_fd, \"# Sitemap\\n\");\n            $sitemap_filename = basename($sitemap_file);\n            fwrite($write_fd, 'Sitemap: ' . (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://') . $_SERVER['SERVER_NAME']\n                . __PS_BASE_URI__ . $sitemap_filename . PHP_EOL);\n        }\n\n        if (true === $executeHook) {\n            Hook::exec('actionAdminMetaAfterWriteRobotsFile', array(\n                'rb_data' => $robots_content,\n                'write_fd' => &$write_fd,\n            ));\n        }\n\n        fclose($write_fd);\n\n        return true;\n    }\n\n    public static function getRobotsContent()\n    {\n        $tab = array();\n\n        // Special allow directives\n        $tab['Allow'] = array(\n            '*/modules/*.css',\n            '*/modules/*.js',\n            '*/modules/*.png',\n            '*/modules/*.jpg',\n            '/js/jquery/*',\n        );\n\n        // Directories\n        $tab['Directories'] = array(\n            'app/', 'cache/', 'classes/', 'config/', 'controllers/',\n            'download/', 'js/', 'localization/', 'log/', 'mails/', 'modules/', 'override/',\n            'pdf/', 'src/', 'tools/', 'translations/', 'upload/', 'var/', 'vendor/', 'webservice/',\n        );\n\n        // Files\n        $disallow_controllers = array(\n            'addresses', 'address', 'authentication', 'cart', 'discount', 'footer',\n            'get-file', 'header', 'history', 'identity', 'images.inc', 'init', 'my-account', 'order',\n            'order-slip', 'order-detail', 'order-follow', 'order-return', 'order-confirmation', 'pagination', 'password',\n            'pdf-invoice', 'pdf-order-return', 'pdf-order-slip', 'product-sort', 'search', 'statistics', 'attachment', 'guest-tracking',\n        );\n\n        // Rewrite files\n        $tab['Files'] = array();\n        if (Configuration::get('PS_REWRITING_SETTINGS')) {\n            $sql = 'SELECT DISTINCT ml.url_rewrite, l.iso_code\n                FROM ' . _DB_PREFIX_ . 'meta m\n                INNER JOIN ' . _DB_PREFIX_ . 'meta_lang ml ON ml.id_meta = m.id_meta\n                INNER JOIN ' . _DB_PREFIX_ . 'lang l ON l.id_lang = ml.id_lang\n                WHERE l.active = 1 AND m.page IN (\\'' . implode('\\', \\'', $disallow_controllers) . '\\')';\n            if ($results = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($sql)) {\n                foreach ($results as $row) {\n                    $tab['Files'][$row['iso_code']][] = $row['url_rewrite'];\n                }\n            }\n        }\n\n        $tab['GB'] = array(\n            '?order=', '?tag=', '?id_currency=', '?search_query=', '?back=', '?n=',\n            '&order=', '&tag=', '&id_currency=', '&search_query=', '&back=', '&n=',\n        );\n\n        foreach ($disallow_controllers as $controller) {\n            $tab['GB'][] = 'controller=' . $controller;\n        }\n\n        return $tab;\n    }\n\n    public static function generateIndex()\n    {\n        PrestaShopAutoload::getInstance()->generateIndex();\n    }\n\n    public static function getDefaultIndexContent()\n    {\n        return '<?php\n/**\n * 2007-' . date('Y') . ' PrestaShop\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-' . date('Y') . ' PrestaShop SA\n * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n\nheader(\"Location: ../\");\nexit;\n';\n    }\n\n    /**\n     * Return the directory list from the given $path.\n     *\n     * @param string $path\n     *\n     * @return array\n     */\n    public static function getDirectories($path)\n    {\n        if (function_exists('glob')) {\n            return self::getDirectoriesWithGlob($path);\n        }\n\n        return self::getDirectoriesWithReaddir($path);\n    }\n\n    /**\n     * Return the directory list from the given $path using php glob function.\n     *\n     * @param string $path\n     *\n     * @return array\n     */\n    public static function getDirectoriesWithGlob($path)\n    {\n        $directoryList = glob($path . '/*', GLOB_ONLYDIR | GLOB_NOSORT);\n        array_walk(\n            $directoryList,\n            function (&$absolutePath, $key) {\n                $absolutePath = substr($absolutePath, strrpos($absolutePath, '/') + 1);\n            }\n        );\n\n        return $directoryList;\n    }\n\n    /**\n     * Return the directory list from the given $path using php readdir function.\n     *\n     * @param string $path\n     *\n     * @return array\n     */\n    public static function getDirectoriesWithReaddir($path)\n    {\n        $directoryList = [];\n        $dh = @opendir($path);\n        if ($dh) {\n            while (($file = @readdir($dh)) !== false) {\n                if (is_dir($path . DIRECTORY_SEPARATOR . $file) && $file[0] != '.') {\n                    $directoryList[] = $file;\n                }\n            }\n            @closedir($dh);\n        }\n\n        return $directoryList;\n    }\n\n    /**\n     * @deprecated Deprecated since 1.7.0\n     * Use json_decode instead\n     * jsonDecode convert json string to php array / object\n     *\n     * @param string $data\n     * @param bool $assoc (since 1.4.2.4) if true, convert to associativ array\n     *\n     * @return array\n     */\n    public static function jsonDecode($data, $assoc = false, $depth = 512, $options = 0)\n    {\n        return json_decode($data, $assoc, $depth, $options);\n    }\n\n    /**\n     * @deprecated Deprecated since 1.7.0\n     * Use json_encode instead\n     * Convert an array to json string\n     *\n     * @param array $data\n     *\n     * @return string json\n     */\n    public static function jsonEncode($data, $options = 0, $depth = 512)\n    {\n        if (PHP_VERSION_ID < 50500) { /* PHP version < 5.5.0 */\n            return json_encode($data, $options);\n        }\n\n        return json_encode($data, $options, $depth);\n    }\n\n    /**\n     * Display a warning message indicating that the method is deprecated.\n     */\n    public static function displayAsDeprecated($message = null)\n    {\n        $backtrace = debug_backtrace();\n        $callee = next($backtrace);\n        $class = isset($callee['class']) ? $callee['class'] : null;\n\n        if ($message === null) {\n            $message = 'The function ' . $callee['function'] . ' (Line ' . $callee['line'] . ') is deprecated and will be removed in the next major version.';\n        }\n\n        $error = 'Function <b>' . $callee['function'] . '()</b> is deprecated in <b>' . $callee['file'] . '</b> on line <b>' . $callee['line'] . '</b><br />';\n\n        Tools::throwDeprecated($error, $message, $class);\n    }\n\n    /**\n     * Display a warning message indicating that the parameter is deprecated.\n     */\n    public static function displayParameterAsDeprecated($parameter)\n    {\n        $backtrace = debug_backtrace();\n        $callee = next($backtrace);\n        $error = 'Parameter <b>' . $parameter . '</b> in function <b>' . (isset($callee['function']) ? $callee['function'] : '') . '()</b> is deprecated in <b>' . $callee['file'] . '</b> on line <b>' . (isset($callee['line']) ? $callee['line'] : '(undefined)') . '</b><br />';\n        $message = 'The parameter ' . $parameter . ' in function ' . $callee['function'] . ' (Line ' . (isset($callee['line']) ? $callee['line'] : 'undefined') . ') is deprecated and will be removed in the next major version.';\n        $class = isset($callee['class']) ? $callee['class'] : null;\n\n        Tools::throwDeprecated($error, $message, $class);\n    }\n\n    public static function displayFileAsDeprecated()\n    {\n        $backtrace = debug_backtrace();\n        $callee = current($backtrace);\n        $error = 'File <b>' . $callee['file'] . '</b> is deprecated<br />';\n        $message = 'The file ' . $callee['file'] . ' is deprecated and will be removed in the next major version.';\n        $class = isset($callee['class']) ? $callee['class'] : null;\n\n        Tools::throwDeprecated($error, $message, $class);\n    }\n\n    protected static function throwDeprecated($error, $message, $class)\n    {\n        if (_PS_DISPLAY_COMPATIBILITY_WARNING_) {\n            @trigger_error($error, E_USER_DEPRECATED);\n            PrestaShopLogger::addLog($message, 3, $class);\n        }\n    }\n\n    public static function enableCache($level = 1, Context $context = null)\n    {\n        if (!$context) {\n            $context = Context::getContext();\n        }\n        $smarty = $context->smarty;\n        if (!Configuration::get('PS_SMARTY_CACHE')) {\n            return;\n        }\n        if ($smarty->force_compile == 0 && $smarty->caching == $level) {\n            return;\n        }\n        self::$_forceCompile = (int) $smarty->force_compile;\n        self::$_caching = (int) $smarty->caching;\n        $smarty->force_compile = 0;\n        $smarty->caching = (int) $level;\n        $smarty->cache_lifetime = 31536000; // 1 Year\n    }\n\n    public static function restoreCacheSettings(Context $context = null)\n    {\n        if (!$context) {\n            $context = Context::getContext();\n        }\n\n        if (isset(self::$_forceCompile)) {\n            $context->smarty->force_compile = (int) self::$_forceCompile;\n        }\n        if (isset(self::$_caching)) {\n            $context->smarty->caching = (int) self::$_caching;\n        }\n    }\n\n    public static function isCallable($function)\n    {\n        $disabled = explode(',', ini_get('disable_functions'));\n\n        return !in_array($function, $disabled) && is_callable($function);\n    }\n\n    public static function pRegexp($s, $delim)\n    {\n        $s = str_replace($delim, '\\\\' . $delim, $s);\n        foreach (array('?', '[', ']', '(', ')', '{', '}', '-', '.', '+', '*', '^', '$', '`', '\"', '%') as $char) {\n            $s = str_replace($char, '\\\\' . $char, $s);\n        }\n\n        return $s;\n    }\n\n    public static function str_replace_once($needle, $replace, $haystack)\n    {\n        $pos = false;\n        if ($needle) {\n            $pos = strpos($haystack, $needle);\n        }\n        if ($pos === false) {\n            return $haystack;\n        }\n\n        return substr_replace($haystack, $replace, $pos, strlen($needle));\n    }\n\n    /**\n     * @desc identify the version of php\n     *\n     * @return string\n     */\n    public static function checkPhpVersion()\n    {\n        $version = null;\n\n        if (defined('PHP_VERSION')) {\n            $version = PHP_VERSION;\n        } else {\n            $version = phpversion('');\n        }\n\n        //Case management system of ubuntu, php version return 5.2.4-2ubuntu5.2\n        if (strpos($version, '-') !== false) {\n            $version = substr($version, 0, strpos($version, '-'));\n        }\n\n        return $version;\n    }\n\n    /**\n     * @desc try to open a zip file in order to check if it's valid\n     *\n     * @return bool success\n     */\n    public static function ZipTest($from_file)\n    {\n        $zip = new ZipArchive();\n\n        return $zip->open($from_file, ZipArchive::CHECKCONS) === true;\n    }\n\n    /**\n     * @deprecated Deprecated since 1.7.0\n     *\n     * @return bool\n     */\n    public static function getSafeModeStatus()\n    {\n        return false;\n    }\n\n    /**\n     * @desc extract a zip file to the given directory\n     *\n     * @return bool success\n     */\n    public static function ZipExtract($from_file, $to_dir)\n    {\n        if (!file_exists($to_dir)) {\n            mkdir($to_dir, PsFileSystem::DEFAULT_MODE_FOLDER);\n        }\n\n        $zip = new ZipArchive();\n        if ($zip->open($from_file) === true && $zip->extractTo($to_dir) && $zip->close()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static function chmodr($path, $filemode)\n    {\n        if (!is_dir($path)) {\n            return @chmod($path, $filemode);\n        }\n        $dh = opendir($path);\n        while (($file = readdir($dh)) !== false) {\n            if ($file != '.' && $file != '..') {\n                $fullpath = $path . '/' . $file;\n                if (is_link($fullpath)) {\n                    return false;\n                } elseif (!is_dir($fullpath) && !@chmod($fullpath, $filemode)) {\n                    return false;\n                } elseif (!Tools::chmodr($fullpath, $filemode)) {\n                    return false;\n                }\n            }\n        }\n        closedir($dh);\n        if (@chmod($path, $filemode)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get products order field name for queries.\n     *\n     * @param string $type by|way\n     * @param string $value If no index given, use default order from admin -> pref -> products\n     * @param bool|\\bool(false)|string $prefix\n     *\n     * @return string Order by sql clause\n     */\n    public static function getProductsOrder($type, $value = null, $prefix = false)\n    {\n        switch ($type) {\n            case 'by':\n                $list = array(0 => 'name', 1 => 'price', 2 => 'date_add', 3 => 'date_upd', 4 => 'position', 5 => 'manufacturer_name', 6 => 'quantity', 7 => 'reference');\n                $value = (null === $value || $value === false || $value === '') ? (int) Configuration::get('PS_PRODUCTS_ORDER_BY') : $value;\n                $value = (isset($list[$value])) ? $list[$value] : ((in_array($value, $list)) ? $value : 'position');\n                $order_by_prefix = '';\n                if ($prefix) {\n                    if ($value == 'id_product' || $value == 'date_add' || $value == 'date_upd' || $value == 'price') {\n                        $order_by_prefix = 'p.';\n                    } elseif ($value == 'name') {\n                        $order_by_prefix = 'pl.';\n                    } elseif ($value == 'manufacturer_name' && $prefix) {\n                        $order_by_prefix = 'm.';\n                        $value = 'name';\n                    } elseif ($value == 'position' || empty($value)) {\n                        $order_by_prefix = 'cp.';\n                    }\n                }\n\n                return $order_by_prefix . $value;\n\n            break;\n\n            case 'way':\n                $value = (null === $value || $value === false || $value === '') ? (int) Configuration::get('PS_PRODUCTS_ORDER_WAY') : $value;\n                $list = array(0 => 'asc', 1 => 'desc');\n\n                return (isset($list[$value])) ? $list[$value] : ((in_array($value, $list)) ? $value : 'asc');\n\n            break;\n        }\n    }\n\n    /**\n     * Convert a shorthand byte value from a PHP configuration directive to an integer value.\n     *\n     * @param string $value value to convert\n     *\n     * @return int\n     */\n    public static function convertBytes($value)\n    {\n        if (is_numeric($value)) {\n            return $value;\n        } else {\n            $value_length = strlen($value);\n            $qty = (int) substr($value, 0, $value_length - 1);\n            $unit = Tools::strtolower(substr($value, $value_length - 1));\n            switch ($unit) {\n                case 'k':\n                    $qty *= 1024;\n\n                    break;\n                case 'm':\n                    $qty *= 1048576;\n\n                    break;\n                case 'g':\n                    $qty *= 1073741824;\n\n                    break;\n            }\n\n            return $qty;\n        }\n    }\n\n    /**\n     * @deprecated as of 1.5 use Controller::getController('PageNotFoundController')->run();\n     */\n    public static function display404Error()\n    {\n        header('HTTP/1.1 404 Not Found');\n        header('Status: 404 Not Found');\n        include dirname(__FILE__) . '/../404.php';\n        die;\n    }\n\n    /**\n     * Concat $begin and $end, add ? or & between strings.\n     *\n     * @since 1.5.0\n     *\n     * @param string $begin\n     * @param string $end\n     *\n     * @return string\n     */\n    public static function url($begin, $end)\n    {\n        return $begin . ((strpos($begin, '?') !== false) ? '&' : '?') . $end;\n    }\n\n    /**\n     * Display error and dies or silently log the error.\n     *\n     * @param string $msg\n     * @param bool $die\n     *\n     * @return bool success of logging\n     */\n    public static function dieOrLog($msg, $die = true)\n    {\n        if ($die || (defined('_PS_MODE_DEV_') && _PS_MODE_DEV_)) {\n            header('HTTP/1.1 500 Internal Server Error', true, 500);\n            die($msg);\n        }\n\n        return PrestaShopLogger::addLog($msg);\n    }\n\n    /**\n     * Convert \\n and \\r\\n and \\r to <br />.\n     *\n     * @param string $string String to transform\n     *\n     * @return string New string\n     */\n    public static function nl2br($str)\n    {\n        return str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\", AddressFormat::FORMAT_NEW_LINE, PHP_EOL), '<br />', $str);\n    }\n\n    /**\n     * Clear cache for Smarty.\n     *\n     * @param Smarty $smarty\n     */\n    public static function clearCache($smarty = null, $tpl = false, $cache_id = null, $compile_id = null)\n    {\n        if ($smarty === null) {\n            $smarty = Context::getContext()->smarty;\n        }\n\n        if ($smarty === null) {\n            return;\n        }\n\n        if (!$tpl && $cache_id === null && $compile_id === null) {\n            return $smarty->clearAllCache();\n        }\n\n        $ret = $smarty->clearCache($tpl, $cache_id, $compile_id);\n\n        Hook::exec('actionClearCache');\n\n        return $ret;\n    }\n\n    /**\n     * Clear compile for Smarty.\n     */\n    public static function clearCompile($smarty = null)\n    {\n        if ($smarty === null) {\n            $smarty = Context::getContext()->smarty;\n        }\n\n        if ($smarty === null) {\n            return;\n        }\n\n        $ret = $smarty->clearCompiledTemplate();\n\n        Hook::exec('actionClearCompileCache');\n\n        return $ret;\n    }\n\n    /**\n     * Clear Smarty cache and compile folders.\n     */\n    public static function clearSmartyCache()\n    {\n        $smarty = Context::getContext()->smarty;\n        Tools::clearCache($smarty);\n        Tools::clearCompile($smarty);\n    }\n\n    /**\n     * Clear Symfony cache.\n     */\n    public static function clearSf2Cache($env = null)\n    {\n        if (null === $env) {\n            $env = _PS_MODE_DEV_ ? 'dev' : 'prod';\n        }\n\n        $dir = _PS_ROOT_DIR_ . '/var/cache/' . $env . '/';\n\n        register_shutdown_function(function () use ($dir) {\n            $fs = new Filesystem();\n            $fs->remove($dir);\n            Hook::exec('actionClearSf2Cache');\n        });\n    }\n\n    /**\n     * Clear both Smarty and Symfony cache.\n     */\n    public static function clearAllCache()\n    {\n        Tools::clearSmartyCache();\n        Tools::clearSf2Cache();\n    }\n\n    public static function clearColorListCache($id_product = false)\n    {\n        // Change template dir if called from the BackOffice\n        $current_template_dir = Context::getContext()->smarty->getTemplateDir();\n        Context::getContext()->smarty->setTemplateDir(_PS_THEME_DIR_);\n        Tools::clearCache(null, _PS_THEME_DIR_ . 'product-list-colors.tpl', Product::getColorsListCacheId((int) $id_product, false));\n        Context::getContext()->smarty->setTemplateDir($current_template_dir);\n    }\n\n    /**\n     * getMemoryLimit allow to get the memory limit in octet.\n     *\n     * @since 1.4.5.0\n     *\n     * @return int the memory limit value in octet\n     */\n    public static function getMemoryLimit()\n    {\n        $memory_limit = @ini_get('memory_limit');\n\n        return Tools::getOctets($memory_limit);\n    }\n\n    /**\n     * getOctet allow to gets the value of a configuration option in octet.\n     *\n     * @since 1.5.0\n     *\n     * @return int the value of a configuration option in octet\n     */\n    public static function getOctets($option)\n    {\n        if (preg_match('/[0-9]+k/i', $option)) {\n            return 1024 * (int) $option;\n        }\n\n        if (preg_match('/[0-9]+m/i', $option)) {\n            return 1024 * 1024 * (int) $option;\n        }\n\n        if (preg_match('/[0-9]+g/i', $option)) {\n            return 1024 * 1024 * 1024 * (int) $option;\n        }\n\n        return $option;\n    }\n\n    /**\n     * @return bool true if the server use 64bit arch\n     */\n    public static function isX86_64arch()\n    {\n        return PHP_INT_MAX == '9223372036854775807';\n    }\n\n    /**\n     * @return bool true if php-cli is used\n     */\n    public static function isPHPCLI()\n    {\n        return defined('STDIN') || (Tools::strtolower(PHP_SAPI) == 'cli' && (!isset($_SERVER['REMOTE_ADDR']) || empty($_SERVER['REMOTE_ADDR'])));\n    }\n\n    public static function argvToGET($argc, $argv)\n    {\n        if ($argc <= 1) {\n            return;\n        }\n\n        // get the first argument and parse it like a query string\n        parse_str($argv[1], $args);\n        if (!is_array($args) || !count($args)) {\n            return;\n        }\n        $_GET = array_merge($args, $_GET);\n        $_SERVER['QUERY_STRING'] = $argv[1];\n    }\n\n    /**\n     * Get max file upload size considering server settings and optional max value.\n     *\n     * @param int $max_size optional max file size\n     *\n     * @return int max file size in bytes\n     */\n    public static function getMaxUploadSize($max_size = 0)\n    {\n        $values = array(Tools::convertBytes(ini_get('upload_max_filesize')));\n\n        if ($max_size > 0) {\n            $values[] = $max_size;\n        }\n\n        $post_max_size = Tools::convertBytes(ini_get('post_max_size'));\n        if ($post_max_size > 0) {\n            $values[] = $post_max_size;\n        }\n\n        return min($values);\n    }\n\n    /**\n     * apacheModExists return true if the apache module $name is loaded.\n     *\n     * @TODO move this method in class Information (when it will exist)\n     *\n     * Notes: This method requires either apache_get_modules or phpinfo()\n     * to be available. With CGI mod, we cannot get php modules\n     *\n     * @param string $name module name\n     *\n     * @return bool true if exists\n     *\n     * @since 1.4.5.0\n     */\n    public static function apacheModExists($name)\n    {\n        if (function_exists('apache_get_modules')) {\n            static $apache_module_list = null;\n\n            if (!is_array($apache_module_list)) {\n                $apache_module_list = apache_get_modules();\n            }\n\n            // we need strpos (example, evasive can be evasive20)\n            foreach ($apache_module_list as $module) {\n                if (strpos($module, $name) !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Fix native uasort see: http://php.net/manual/en/function.uasort.php#114535.\n     *\n     * @param $array\n     * @param $cmp_function\n     */\n    public static function uasort(&$array, $cmp_function)\n    {\n        if (count($array) < 2) {\n            return;\n        }\n        $halfway = count($array) / 2;\n        $array1 = array_slice($array, 0, $halfway, true);\n        $array2 = array_slice($array, $halfway, null, true);\n\n        self::uasort($array1, $cmp_function);\n        self::uasort($array2, $cmp_function);\n        if (call_user_func($cmp_function, end($array1), reset($array2)) < 1) {\n            $array = $array1 + $array2;\n\n            return;\n        }\n        $array = array();\n        reset($array1);\n        reset($array2);\n        while (current($array1) && current($array2)) {\n            if (call_user_func($cmp_function, current($array1), current($array2)) < 1) {\n                $array[key($array1)] = current($array1);\n                next($array1);\n            } else {\n                $array[key($array2)] = current($array2);\n                next($array2);\n            }\n        }\n        while (current($array1)) {\n            $array[key($array1)] = current($array1);\n            next($array1);\n        }\n        while (current($array2)) {\n            $array[key($array2)] = current($array2);\n            next($array2);\n        }\n    }\n\n    /**\n     * Copy the folder $src into $dst, $dst is created if it do not exist.\n     *\n     * @param $src\n     * @param $dst\n     * @param bool $del if true, delete the file after copy\n     */\n    public static function recurseCopy($src, $dst, $del = false)\n    {\n        if (!Tools::file_exists_cache($src)) {\n            return false;\n        }\n        $dir = opendir($src);\n\n        if (!Tools::file_exists_cache($dst)) {\n            mkdir($dst);\n        }\n        while (false !== ($file = readdir($dir))) {\n            if (($file != '.') && ($file != '..')) {\n                if (is_dir($src . DIRECTORY_SEPARATOR . $file)) {\n                    self::recurseCopy($src . DIRECTORY_SEPARATOR . $file, $dst . DIRECTORY_SEPARATOR . $file, $del);\n                } else {\n                    copy($src . DIRECTORY_SEPARATOR . $file, $dst . DIRECTORY_SEPARATOR . $file);\n                    if ($del && is_writable($src . DIRECTORY_SEPARATOR . $file)) {\n                        unlink($src . DIRECTORY_SEPARATOR . $file);\n                    }\n                }\n            }\n        }\n        closedir($dir);\n        if ($del && is_writable($src)) {\n            rmdir($src);\n        }\n    }\n\n    /**\n     * @param string $path Path to scan\n     * @param string $ext Extention to filter files\n     * @param string $dir Add this to prefix output for example /path/dir/*\n     *\n     * @return array List of file found\n     *\n     * @since 1.5.0\n     */\n    public static function scandir($path, $ext = 'php', $dir = '', $recursive = false)\n    {\n        $path = rtrim(rtrim($path, '\\\\'), '/') . '/';\n        $real_path = rtrim(rtrim($path . $dir, '\\\\'), '/') . '/';\n        $files = scandir($real_path, SCANDIR_SORT_NONE);\n        if (!$files) {\n            return array();\n        }\n\n        $filtered_files = array();\n\n        $real_ext = false;\n        if (!empty($ext)) {\n            $real_ext = '.' . $ext;\n        }\n        $real_ext_length = strlen($real_ext);\n\n        $subdir = ($dir) ? $dir . '/' : '';\n        foreach ($files as $file) {\n            if (!$real_ext || (strpos($file, $real_ext) && strpos($file, $real_ext) == (strlen($file) - $real_ext_length))) {\n                $filtered_files[] = $subdir . $file;\n            }\n\n            if ($recursive && $file[0] != '.' && is_dir($real_path . $file)) {\n                foreach (Tools::scandir($path, $ext, $subdir . $file, $recursive) as $subfile) {\n                    $filtered_files[] = $subfile;\n                }\n            }\n        }\n\n        return $filtered_files;\n    }\n\n    /**\n     * Align version sent and use internal function.\n     *\n     * @param $v1\n     * @param $v2\n     * @param string $operator\n     *\n     * @return mixed\n     */\n    public static function version_compare($v1, $v2, $operator = '<')\n    {\n        Tools::alignVersionNumber($v1, $v2);\n\n        return version_compare($v1, $v2, $operator);\n    }\n\n    /**\n     * Align 2 version with the same number of sub version\n     * version_compare will work better for its comparison :)\n     * (Means: '1.8' to '1.9.3' will change '1.8' to '1.8.0').\n     *\n     * @param $v1\n     * @param $v2\n     */\n    public static function alignVersionNumber(&$v1, &$v2)\n    {\n        $len1 = count(explode('.', trim($v1, '.')));\n        $len2 = count(explode('.', trim($v2, '.')));\n        $len = 0;\n        $str = '';\n\n        if ($len1 > $len2) {\n            $len = $len1 - $len2;\n            $str = &$v2;\n        } elseif ($len2 > $len1) {\n            $len = $len2 - $len1;\n            $str = &$v1;\n        }\n\n        for ($len; $len > 0; --$len) {\n            $str .= '.0';\n        }\n    }\n\n    public static function modRewriteActive()\n    {\n        if (Tools::apacheModExists('mod_rewrite')) {\n            return true;\n        }\n        if ((isset($_SERVER['HTTP_MOD_REWRITE']) && Tools::strtolower($_SERVER['HTTP_MOD_REWRITE']) == 'on') || Tools::strtolower(getenv('HTTP_MOD_REWRITE')) == 'on') {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static function unSerialize($serialized, $object = false)\n    {\n        if (is_string($serialized) && (strpos($serialized, 'O:') === false || !preg_match('/(^|;|{|})O:[0-9]+:\"/', $serialized)) && !$object || $object) {\n            return @unserialize($serialized);\n        }\n\n        return false;\n    }\n\n    /**\n     * Reproduce array_unique working before php version 5.2.9.\n     *\n     * @param array $array\n     *\n     * @return array\n     */\n    public static function arrayUnique($array)\n    {\n        if (version_compare(PHP_VERSION, '5.2.9', '<')) {\n            return array_unique($array);\n        } else {\n            return array_unique($array, SORT_REGULAR);\n        }\n    }\n\n    /**\n     * Delete unicode class from regular expression patterns.\n     *\n     * @param string $pattern\n     *\n     * @return string pattern\n     */\n    public static function cleanNonUnicodeSupport($pattern)\n    {\n        if (!defined('PREG_BAD_UTF8_OFFSET')) {\n            return $pattern;\n        }\n\n        return preg_replace('/\\\\\\[px]\\{[a-z]{1,2}\\}|(\\/[a-z]*)u([a-z]*)$/i', '$1$2', $pattern);\n    }\n\n    protected static $is_addons_up = true;\n\n    public static function addonsRequest($request, $params = array())\n    {\n        if (!self::$is_addons_up) {\n            return false;\n        }\n\n        $post_query_data = array(\n            'version' => isset($params['version']) ? $params['version'] : _PS_VERSION_,\n            'iso_lang' => Tools::strtolower(isset($params['iso_lang']) ? $params['iso_lang'] : Context::getContext()->language->iso_code),\n            'iso_code' => Tools::strtolower(isset($params['iso_country']) ? $params['iso_country'] : Country::getIsoById(Configuration::get('PS_COUNTRY_DEFAULT'))),\n            'shop_url' => isset($params['shop_url']) ? $params['shop_url'] : Tools::getShopDomain(),\n            'mail' => isset($params['email']) ? $params['email'] : Configuration::get('PS_SHOP_EMAIL'),\n            'format' => isset($params['format']) ? $params['format'] : 'xml',\n        );\n        if (isset($params['source'])) {\n            $post_query_data['source'] = $params['source'];\n        }\n\n        $post_data = http_build_query($post_query_data);\n\n        $end_point = 'api.addons.prestashop.com';\n\n        switch ($request) {\n            case 'native':\n                $post_data .= '&method=listing&action=native';\n\n                break;\n            case 'partner':\n                $post_data .= '&method=listing&action=partner';\n\n                break;\n            case 'service':\n                $post_data .= '&method=listing&action=service';\n\n                break;\n            case 'native_all':\n                $post_data .= '&method=listing&action=native&iso_code=all';\n\n                break;\n            case 'must-have':\n                $post_data .= '&method=listing&action=must-have';\n\n                break;\n            case 'must-have-themes':\n                $post_data .= '&method=listing&action=must-have-themes';\n\n                break;\n            case 'customer':\n                $post_data .= '&method=listing&action=customer&username=' . urlencode(trim(Context::getContext()->cookie->username_addons))\n                    . '&password=' . urlencode(trim(Context::getContext()->cookie->password_addons));\n\n                break;\n            case 'customer_themes':\n                $post_data .= '&method=listing&action=customer-themes&username=' . urlencode(trim(Context::getContext()->cookie->username_addons))\n                    . '&password=' . urlencode(trim(Context::getContext()->cookie->password_addons));\n\n                break;\n            case 'check_customer':\n                $post_data .= '&method=check_customer&username=' . urlencode($params['username_addons']) . '&password=' . urlencode($params['password_addons']);\n\n                break;\n            case 'check_module':\n                $post_data .= '&method=check&module_name=' . urlencode($params['module_name']) . '&module_key=' . urlencode($params['module_key']);\n\n                break;\n            case 'module':\n                $post_data .= '&method=module&id_module=' . urlencode($params['id_module']);\n                if (isset($params['username_addons'], $params['password_addons'])) {\n                    $post_data .= '&username=' . urlencode($params['username_addons']) . '&password=' . urlencode($params['password_addons']);\n                }\n\n                break;\n            case 'hosted_module':\n                $post_data .= '&method=module&id_module=' . urlencode((int) $params['id_module']) . '&username=' . urlencode($params['hosted_email'])\n                    . '&password=' . urlencode($params['password_addons'])\n                    . '&shop_url=' . urlencode(isset($params['shop_url']) ? $params['shop_url'] : Tools::getShopDomain())\n                    . '&mail=' . urlencode(isset($params['email']) ? $params['email'] : Configuration::get('PS_SHOP_EMAIL'));\n\n                break;\n            case 'install-modules':\n                $post_data .= '&method=listing&action=install-modules';\n                $post_data .= defined('_PS_HOST_MODE_') ? '-od' : '';\n\n                break;\n            default:\n                return false;\n        }\n\n        $context = stream_context_create(array(\n            'http' => array(\n                'method' => 'POST',\n                'content' => $post_data,\n                'header' => 'Content-type: application/x-www-form-urlencoded',\n                'timeout' => 5,\n            ),\n        ));\n\n        if ($content = Tools::file_get_contents('https://' . $end_point, false, $context)) {\n            return $content;\n        }\n\n        self::$is_addons_up = false;\n\n        return false;\n    }\n\n    /**\n     * Returns an array containing information about\n     * HTTP file upload variable ($_FILES).\n     *\n     * @param string $input File upload field name\n     * @param bool $return_content If true, returns uploaded file contents\n     *\n     * @return array|null\n     */\n    public static function fileAttachment($input = 'fileUpload', $return_content = true)\n    {\n        $file_attachment = null;\n        if (isset($_FILES[$input]['name']) && !empty($_FILES[$input]['name']) && !empty($_FILES[$input]['tmp_name'])) {\n            $file_attachment['rename'] = uniqid() . Tools::strtolower(substr($_FILES[$input]['name'], -5));\n            if ($return_content) {\n                $file_attachment['content'] = file_get_contents($_FILES[$input]['tmp_name']);\n            }\n            $file_attachment['tmp_name'] = $_FILES[$input]['tmp_name'];\n            $file_attachment['name'] = $_FILES[$input]['name'];\n            $file_attachment['mime'] = $_FILES[$input]['type'];\n            $file_attachment['error'] = $_FILES[$input]['error'];\n            $file_attachment['size'] = $_FILES[$input]['size'];\n        }\n\n        return $file_attachment;\n    }\n\n    public static function changeFileMTime($file_name)\n    {\n        @touch($file_name);\n    }\n\n    public static function waitUntilFileIsModified($file_name, $timeout = 180)\n    {\n        @ini_set('max_execution_time', $timeout);\n        if (($time_limit = ini_get('max_execution_time')) === null) {\n            $time_limit = 30;\n        }\n\n        $time_limit -= 5;\n        $start_time = microtime(true);\n        $last_modified = @filemtime($file_name);\n\n        while (true) {\n            if (((microtime(true) - $start_time) > $time_limit) || @filemtime($file_name) > $last_modified) {\n                break;\n            }\n            clearstatcache();\n            usleep(300);\n        }\n    }\n\n    /**\n     * Delete a substring from another one starting from the right.\n     *\n     * @param string $str\n     * @param string $str_search\n     *\n     * @return string\n     */\n    public static function rtrimString($str, $str_search)\n    {\n        $length_str = strlen($str_search);\n        if (strlen($str) >= $length_str && substr($str, -$length_str) == $str_search) {\n            $str = substr($str, 0, -$length_str);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Format a number into a human readable format\n     * e.g. 24962496 => 23.81M.\n     *\n     * @param $size\n     * @param int $precision\n     *\n     * @return string\n     */\n    public static function formatBytes($size, $precision = 2)\n    {\n        if (!$size) {\n            return '0';\n        }\n        $base = log($size) / log(1024);\n        $suffixes = array('', 'k', 'M', 'G', 'T');\n\n        return round(1024 ** ($base - floor($base)), $precision) . $suffixes[floor($base)];\n    }\n\n    public static function boolVal($value)\n    {\n        if (empty($value)) {\n            $value = false;\n        }\n\n        return (bool) $value;\n    }\n\n    public static function getUserPlatform()\n    {\n        if (isset(self::$_user_plateform)) {\n            return self::$_user_plateform;\n        }\n\n        $user_agent = $_SERVER['HTTP_USER_AGENT'];\n        self::$_user_plateform = 'unknown';\n\n        if (preg_match('/linux/i', $user_agent)) {\n            self::$_user_plateform = 'Linux';\n        } elseif (preg_match('/macintosh|mac os x/i', $user_agent)) {\n            self::$_user_plateform = 'Mac';\n        } elseif (preg_match('/windows|win32/i', $user_agent)) {\n            self::$_user_plateform = 'Windows';\n        }\n\n        return self::$_user_plateform;\n    }\n\n    public static function getUserBrowser()\n    {\n        if (isset(self::$_user_browser)) {\n            return self::$_user_browser;\n        }\n\n        $user_agent = $_SERVER['HTTP_USER_AGENT'];\n        self::$_user_browser = 'unknown';\n\n        if (preg_match('/MSIE/i', $user_agent) && !preg_match('/Opera/i', $user_agent)) {\n            self::$_user_browser = 'Internet Explorer';\n        } elseif (preg_match('/Firefox/i', $user_agent)) {\n            self::$_user_browser = 'Mozilla Firefox';\n        } elseif (preg_match('/Chrome/i', $user_agent)) {\n            self::$_user_browser = 'Google Chrome';\n        } elseif (preg_match('/Safari/i', $user_agent)) {\n            self::$_user_browser = 'Apple Safari';\n        } elseif (preg_match('/Opera/i', $user_agent)) {\n            self::$_user_browser = 'Opera';\n        } elseif (preg_match('/Netscape/i', $user_agent)) {\n            self::$_user_browser = 'Netscape';\n        }\n\n        return self::$_user_browser;\n    }\n\n    /**\n     * Allows to display the category description without HTML tags and slashes.\n     *\n     * @return string\n     */\n    public static function getDescriptionClean($description)\n    {\n        return strip_tags(stripslashes($description));\n    }\n\n    public static function purifyHTML($html, $uri_unescape = null, $allow_style = false)\n    {\n        static $use_html_purifier = null;\n        static $purifier = null;\n\n        if (defined('PS_INSTALLATION_IN_PROGRESS') || !Configuration::configurationIsLoaded()) {\n            return $html;\n        }\n\n        if ($use_html_purifier === null) {\n            $use_html_purifier = (bool) Configuration::get('PS_USE_HTMLPURIFIER');\n        }\n\n        if ($use_html_purifier) {\n            if ($purifier === null) {\n                $config = HTMLPurifier_Config::createDefault();\n\n                $config->set('Attr.EnableID', true);\n                $config->set('Attr.AllowedRel', array('nofollow'));\n                $config->set('HTML.Trusted', true);\n                $config->set('Cache.SerializerPath', _PS_CACHE_DIR_ . 'purifier');\n                $config->set('Attr.AllowedFrameTargets', array('_blank', '_self', '_parent', '_top'));\n                if (is_array($uri_unescape)) {\n                    $config->set('URI.UnescapeCharacters', implode('', $uri_unescape));\n                }\n\n                if (Configuration::get('PS_ALLOW_HTML_IFRAME')) {\n                    $config->set('HTML.SafeIframe', true);\n                    $config->set('HTML.SafeObject', true);\n                    $config->set('URI.SafeIframeRegexp', '/.*/');\n                }\n\n                /** @var HTMLPurifier_HTMLDefinition|HTMLPurifier_HTMLModule $def */\n                // http://developers.whatwg.org/the-video-element.html#the-video-element\n                if ($def = $config->getHTMLDefinition(true)) {\n                    $def->addElement('video', 'Block', 'Optional: (source, Flow) | (Flow, source) | Flow', 'Common', array(\n                        'src' => 'URI',\n                        'type' => 'Text',\n                        'width' => 'Length',\n                        'height' => 'Length',\n                        'poster' => 'URI',\n                        'preload' => 'Enum#auto,metadata,none',\n                        'controls' => 'Bool',\n                    ));\n                    $def->addElement('source', 'Block', 'Flow', 'Common', array(\n                        'src' => 'URI',\n                        'type' => 'Text',\n                    ));\n                    if ($allow_style) {\n                        $def->addElement('style', 'Block', 'Flow', 'Common', array('type' => 'Text'));\n                    }\n                }\n\n                $purifier = new HTMLPurifier($config);\n            }\n            if (_PS_MAGIC_QUOTES_GPC_) {\n                $html = stripslashes($html);\n            }\n\n            $html = $purifier->purify($html);\n\n            if (_PS_MAGIC_QUOTES_GPC_) {\n                $html = addslashes($html);\n            }\n        }\n\n        return $html;\n    }\n\n    /**\n     * Check if a constant was already defined.\n     *\n     * @param string $constant Constant name\n     * @param mixed $value Default value to set if not defined\n     */\n    public static function safeDefine($constant, $value)\n    {\n        if (!defined($constant)) {\n            define($constant, $value);\n        }\n    }\n\n    /**\n     * Spread an amount on lines, adjusting the $column field,\n     * with the biggest adjustments going to the rows having the\n     * highest $sort_column.\n     *\n     * E.g.:\n     *\n     * $rows = [['a' => 5.1], ['a' => 8.2]];\n     *\n     * spreadAmount(0.3, 1, $rows, 'a');\n     *\n     * => $rows is [['a' => 8.4], ['a' => 5.2]]\n     *\n     * @param $amount float  The amount to spread across the rows\n     * @param $precision int Rounding precision\n     *                       e.g. if $amount is 1, $precision is 0 and $rows = [['a' => 2], ['a' => 1]]\n     *                       then the resulting $rows will be [['a' => 3], ['a' => 1]]\n     *                       But if $precision were 1, then the resulting $rows would be [['a' => 2.5], ['a' => 1.5]]\n     * @param &$rows array   An array, associative or not, containing arrays that have at least $column and $sort_column fields\n     * @param $column string The column on which to perform adjustments\n     */\n    public static function spreadAmount($amount, $precision, &$rows, $column)\n    {\n        if (!is_array($rows) || empty($rows)) {\n            return;\n        }\n\n        $sort_function = function ($a, $b) use ($column) { return $b[$column] > $a[$column] ? 1 : -1; };\n\n        uasort($rows, $sort_function);\n\n        $unit = 10 ** $precision;\n\n        $int_amount = (int) round($unit * $amount);\n\n        $remainder = $int_amount % count($rows);\n        $amount_to_spread = ($int_amount - $remainder) / count($rows) / $unit;\n\n        $sign = ($amount >= 0 ? 1 : -1);\n        $position = 0;\n        foreach ($rows as &$row) {\n            $adjustment_factor = $amount_to_spread;\n\n            if ($position < abs($remainder)) {\n                $adjustment_factor += $sign * 1 / $unit;\n            }\n\n            $row[$column] += $adjustment_factor;\n\n            ++$position;\n        }\n        unset($row);\n    }\n\n    /**\n     * Replaces elements from passed arrays into the first array recursively.\n     *\n     * @param array $base the array in which elements are replaced\n     * @param array $replacements the array from which elements will be extracted\n     */\n    public static function arrayReplaceRecursive($base, $replacements)\n    {\n        if (function_exists('array_replace_recursive')) {\n            return array_replace_recursive($base, $replacements);\n        }\n\n        foreach (array_slice(func_get_args(), 1) as $replacements) {\n            $bref_stack = array(&$base);\n            $head_stack = array($replacements);\n\n            do {\n                end($bref_stack);\n\n                $bref = &$bref_stack[key($bref_stack)];\n                $head = array_pop($head_stack);\n                unset($bref_stack[key($bref_stack)]);\n                foreach (array_keys($head) as $key) {\n                    if (isset($key, $bref) && is_array($bref[$key]) && is_array($head[$key])) {\n                        $bref_stack[] = &$bref[$key];\n                        $head_stack[] = $head[$key];\n                    } else {\n                        $bref[$key] = $head[$key];\n                    }\n                }\n            } while (count($head_stack));\n        }\n\n        return $base;\n    }\n\n    /**\n     * Return path to a Product or a CMS category.\n     *\n     * @param string $url_base Start URL\n     * @param int $id_category Start category\n     * @param string $path Current path\n     * @param string $highlight String to highlight (in XHTML/CSS)\n     * @param string $type Category type (products/cms)\n     */\n    public static function getPath($url_base, $id_category, $path = '', $highlight = '', $category_type = 'catalog', $home = false)\n    {\n        $context = Context::getContext();\n        if ($category_type == 'catalog') {\n            $category = Db::getInstance()->getRow('\n\t\tSELECT id_category, level_depth, nleft, nright\n\t\tFROM ' . _DB_PREFIX_ . 'category\n\t\tWHERE id_category = ' . (int) $id_category);\n            if (isset($category['id_category'])) {\n                $sql = 'SELECT c.id_category, cl.name, cl.link_rewrite\n\t\t\t\t\tFROM ' . _DB_PREFIX_ . 'category c\n\t\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'category_lang cl ON (cl.id_category = c.id_category' . Shop::addSqlRestrictionOnLang('cl') . ')\n\t\t\t\t\tWHERE c.nleft <= ' . (int) $category['nleft'] . '\n\t\t\t\t\t\tAND c.nright >= ' . (int) $category['nright'] . '\n\t\t\t\t\t\tAND cl.id_lang = ' . (int) $context->language->id .\n                       ($home ? ' AND c.id_category=' . (int) $id_category : '') . '\n\t\t\t\t\t\tAND c.id_category != ' . (int) Category::getTopCategory()->id . '\n\t\t\t\t\tGROUP BY c.id_category\n\t\t\t\t\tORDER BY c.level_depth ASC\n\t\t\t\t\tLIMIT ' . (!$home ? (int) $category['level_depth'] + 1 : 1);\n                $categories = Db::getInstance()->executeS($sql);\n                $full_path = '';\n                $n = 1;\n                $n_categories = (int) count($categories);\n                foreach ($categories as $category) {\n                    $action = (($category['id_category'] == (int) Configuration::get('PS_HOME_CATEGORY') || $home) ? 'index' : 'updatecategory');\n                    $link = Context::getContext()->link->getAdminLink('AdminCategories', true, ['action' => $action, 'id_category' => (int) $category['id_category']]);\n                    $edit = '<a href=\"' . Tools::safeOutput($link) . '\" title=\"' . ($category['id_category'] == Category::getRootCategory()->id_category ? 'Home' : 'Modify') . '\"><i class=\"icon-' . (($category['id_category'] == Category::getRootCategory()->id_category || $home) ? 'home' : 'pencil') . '\"></i></a> ';\n                    $full_path .= $edit .\n                                  ($n < $n_categories ? '<a href=\"' . Tools::safeOutput($link) . '\" title=\"' . htmlentities($category['name'], ENT_NOQUOTES, 'UTF-8') . '\">' : '') .\n                                  (!empty($highlight) ? str_ireplace($highlight, '<span class=\"highlight\">' . htmlentities($highlight, ENT_NOQUOTES, 'UTF-8') . '</span>', $category['name']) : $category['name']) .\n                                  ($n < $n_categories ? '</a>' : '') .\n                                  (($n++ != $n_categories || !empty($path)) ? ' > ' : '');\n                }\n\n                return $full_path . $path;\n            }\n        } elseif ($category_type == 'cms') {\n            $category = new CMSCategory($id_category, $context->language->id);\n            if (!$category->id) {\n                return $path;\n            }\n            $name = ($highlight != null) ? str_ireplace($highlight, '<span class=\"highlight\">' . $highlight . '</span>', CMSCategory::hideCMSCategoryPosition($category->name)) : CMSCategory::hideCMSCategoryPosition($category->name);\n            $edit = '<a href=\"' . Tools::safeOutput($url_base . '&id_cms_category=' . $category->id . '&updatecms_category&token=' . Tools::getAdminToken('AdminCmsContent' . (int) Tab::getIdFromClassName('AdminCmsContent') . (int) $context->employee->id)) . '\">\n\t\t\t\t<i class=\"icon-pencil\"></i></a> ';\n            if ($category->id == 1) {\n                $edit = '<li><a href=\"' . Tools::safeOutput($url_base . '&id_cms_category=' . $category->id . '&viewcategory&token=' . Tools::getAdminToken('AdminCmsContent' . (int) Tab::getIdFromClassName('AdminCmsContent') . (int) $context->employee->id)) . '\">\n\t\t\t\t\t<i class=\"icon-home\"></i></a></li> ';\n            }\n            $path = $edit . '<li><a href=\"' . Tools::safeOutput($url_base . '&id_cms_category=' . $category->id . '&viewcategory&token=' . Tools::getAdminToken('AdminCmsContent' . (int) Tab::getIdFromClassName('AdminCmsContent') . (int) $context->employee->id)) . '\">\n\t\t' . $name . '</a></li> > ' . $path;\n            if ($category->id == 1) {\n                return substr($path, 0, strlen($path) - 3);\n            }\n\n            return Tools::getPath($url_base, $category->id_parent, $path, '', 'cms');\n        }\n    }\n\n    public static function redirectToInstall()\n    {\n        if (file_exists(dirname(__FILE__) . '/../install')) {\n            header('Location: install/');\n        } elseif (file_exists(dirname(__FILE__) . '/../install-dev')) {\n            header('Location: install-dev/');\n        } else {\n            die('Error: \"install\" directory is missing');\n        }\n        exit;\n    }\n}\n\n/**\n * Compare 2 prices to sort products.\n *\n * @param float $a\n * @param float $b\n *\n * @return int\n */\n/* Externalized because of a bug in PHP 5.1.6 when inside an object */\nfunction cmpPriceAsc($a, $b)\n{\n    if ((float) $a['price_tmp'] < (float) $b['price_tmp']) {\n        return -1;\n    } elseif ((float) $a['price_tmp'] > (float) $b['price_tmp']) {\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction cmpPriceDesc($a, $b)\n{\n    if ((float) $a['price_tmp'] < (float) $b['price_tmp']) {\n        return 1;\n    } elseif ((float) $a['price_tmp'] > (float) $b['price_tmp']) {\n        return -1;\n    }\n\n    return 0;\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * This class is used to create a release of PrestaShop,\n * see ReleaseCreator::createRelease() function.\n */\nclass ReleaseCreator\n{\n    /**\n     * Path where the releases will be stored.\n     *\n     * @var string\n     */\n    const RELEASES_DIR_RELATIVE_PATH = 'tools/build/releases';\n\n    /**\n     * Name of the release's zip.\n     *\n     * @var string\n     */\n    const INSTALLER_ZIP_FILENAME = 'prestashop.zip';\n\n    /**\n     * Directory's name of the prestashop release in creation.\n     * Deleted at the end.\n     *\n     * @var string\n     */\n    const PRESTASHOP_TMP_DIR = 'prestashop';\n\n    /**\n     * Use to write on terminal.\n     *\n     * @var ConsoleWriter\n     */\n    protected $consoleWriter;\n\n    /**\n     * Line separator used for all messages.\n     *\n     * @var string\n     */\n    protected $lineSeparator = PHP_EOL;\n\n    /**\n     * Files to remove.\n     *\n     * @var array\n     */\n    protected $filesRemoveList = [\n        '.DS_Store',\n        '.gitignore',\n        '.gitmodules',\n        '.travis.yml',\n        'package-lock.json',\n        '.babelrc',\n        'postcss.config.js',\n    ];\n\n    /**\n     * Folders to remove.\n     *\n     * @var array\n     */\n    protected $foldersRemoveList = [];\n\n    /**\n     * Pattern of files or directories to remove.\n     *\n     * @var array\n     */\n    protected $patternsRemoveList = [\n        'tests(\\-legacy)?$',\n        'tools/contrib$',\n        'travis\\-scripts$',\n        'CONTRIBUTING\\.md$',\n        'composer\\.json$',\n        'diff\\-hooks\\.php',\n        '((?<!_dev\\/)package\\.json)$',\n        '(.*)?\\.composer$',\n        '(.*)?\\.git(.*)?$',\n        '.*\\.map$',\n        '.*\\.psd$',\n        '.*\\.md$',\n        '.*\\.rst$',\n        '.*phpunit(.*)?',\n        '(.*)?\\.travis\\.',\n        '.*\\.DS_Store$',\n        '.*\\.eslintrc$',\n        '.*\\.editorconfig$',\n        'web/.*$',\n        'app/config/parameters\\.yml$',\n        'app/config/parameters\\.php$',\n        'config/settings\\.inc\\.php$',\n        'app/cache/..*$',\n        '\\.t9n\\.yml$',\n        '\\.scrutinizer\\.yml$',\n        'admin/(.*/)?webpack\\.config\\.js$',\n        'admin/(.*/)?package\\.json$',\n        'admin/(.*/)?bower\\.json$',\n        'admin/(.*/)?config\\.rb$',\n        'admin/themes/default/sass$',\n        //'admin/themes/new\\-theme/js$',\n        //'admin/themes/new\\-theme/scss$',\n        'themes/_core$',\n        'themes/classic/_dev',\n        'themes/webpack\\.config\\.js$',\n        'themes/package\\.json$',\n        'vendor\\/[a-zA-Z0-0_-]+\\/[a-zA-Z0-0_-]+\\/[Tt]ests?$',\n        'vendor/tecnickcom/tcpdf/examples$',\n        'app/cache/..*$',\n        '.idea',\n        'tools/build$',\n        'tools/foreignkeyGenerator$',\n        '.*node_modules.*',\n        '\\.eslintignore$',\n        '\\.eslintrc\\.js$',\n        '\\.php_cs\\.dist$',\n        '\\.docker-compose\\.yml$',\n        'tools/assets$',\n        '\\.webpack$',\n    ];\n\n    /**\n     * Contains all files and directories of the PrestaShop release.\n     *\n     * @var array\n     */\n    protected $filesList = [];\n\n    /**\n     * Absolute path of the temp PrestaShop release.\n     *\n     * @var string\n     */\n    protected $tempProjectPath;\n\n    /**\n     * Absolute path of the current user's PrestaShop (root path).\n     *\n     * @var string\n     */\n    protected $projectPath;\n\n    /**\n     * Release version which user wants.\n     *\n     * @var string\n     */\n    protected $version;\n\n    /**\n     * Do we include the installer?\n     * Do not work with $useZip = false.\n     *\n     * @var bool\n     */\n    protected $useInstaller;\n\n    /**\n     * Do we zip the release?\n     *\n     * @var bool\n     */\n    protected $useZip;\n\n    /**\n     * Consisting of prestashop_ and the version. e.g prestashop_1.7.3.4.zip\n     *\n     * @var string\n     */\n    protected $zipFileName;\n\n    /**\n     * Where the release will be moved when done.\n     *\n     * @var string\n     */\n    protected $destinationDir;\n\n    /**\n     * Set the release wanted version, and some options.\n     *\n     * @param string $version\n     * @param bool $useInstaller\n     * @param bool $useZip\n     * @param string $destinationDir\n     */\n    public function __construct($version = null, $useInstaller = true, $useZip = true, $destinationDir = '')\n    {\n        $this->consoleWriter = new ConsoleWriter();\n        $tmpDir = sys_get_temp_dir();\n        $prestashopTmpDir = self::PRESTASHOP_TMP_DIR;\n        $this->tempProjectPath = \"{$tmpDir}/$prestashopTmpDir\";\n        $this->consoleWriter->displayText(\n            \"--- Temp dir used will be '{$tmpDir}'{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n        $this->projectPath = realpath(__DIR__ . '/../../..');\n        $this->version = $version ? $version : $this->getCurrentVersion();\n        $this->zipFileName = \"prestashop_$this->version.zip\";\n\n        if (empty($this->version)) {\n            throw new Exception('Version is not provided and cannot be found in project.');\n        }\n\n        if (empty($destinationDir)) {\n            $releasesDir = self::RELEASES_DIR_RELATIVE_PATH;\n            $reference = $this->version . \"_\" . date(\"Ymd_His\");\n            $destinationDir = \"{$this->projectPath}/$releasesDir/$reference\";\n        }\n        $this->destinationDir = $destinationDir;\n        $this->consoleWriter->displayText(\n            \"--- Destination dir used will be '{$this->destinationDir}'{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n        $this->useZip = $useZip;\n        $this->useInstaller = $useInstaller;\n\n        if ($this->useZip && $this->useInstaller) {\n            $this->consoleWriter->displayText(\n                \"--- Release will have the installer and will be zipped.{$this->lineSeparator}\",\n                ConsoleWriter::COLOR_GREEN\n            );\n        } elseif ($this->useZip) {\n            $this->consoleWriter->displayText(\n                \"--- Release will be zipped.{$this->lineSeparator}\",\n                ConsoleWriter::COLOR_GREEN\n            );\n        } elseif ($this->useInstaller) {\n            $this->consoleWriter->displayText(\n                \"--- Release will have the installer.{$this->lineSeparator}\",\n                ConsoleWriter::COLOR_GREEN\n            );\n        }\n    }\n\n    /**\n     * Create a new release.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    public function createRelease()\n    {\n        if (!file_exists($this->destinationDir) && !mkdir($this->destinationDir, 0777, true)) {\n            throw new BuildException(\"ERROR: can not create directory '{$this->destinationDir}'\");\n        }\n        $startTime = date('H:i:s');\n        $this->consoleWriter->displayText(\n            \"--- Script started at {$startTime}{$this->lineSeparator}{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n        $this->createTmpProjectDir()\n            ->setFilesConstants()\n            ->setupShopVersion()\n            ->generateLicensesFile()\n            ->runComposerInstall()\n            ->createPackage();\n        $endTime = date('H:i:s');\n        $this->consoleWriter->displayText(\n            \"{$this->lineSeparator}--- Script ended at {$endTime}{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n\n        if ($this->useZip) {\n            $argReleaseZipFilePath = escapeshellarg(\"{$this->destinationDir}/{$this->zipFileName}\");\n            $releaseSize = exec(\"du -hs {$argReleaseZipFilePath} | cut -f1\");\n        } else {\n            $argReleaseDirectoryPath = escapeshellarg(\"{$this->destinationDir}\");\n            $releaseSize = exec(\"du -hs {$argReleaseDirectoryPath} | cut -f1\");\n        }\n        $this->consoleWriter->displayText(\n            \"--- Release size: {$releaseSize}{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n\n        return $this;\n    }\n\n    /**\n     * Copy current user PrestaShop dir to a tmp directory\n     * where we'll clean it for the release.\n     *\n     * @return $this\n     */\n    protected function createTmpProjectDir()\n    {\n        $this->consoleWriter->displayText(\"Copy project in {$this->tempProjectPath}...\", ConsoleWriter::COLOR_YELLOW);\n        $argProjectPath = escapeshellarg($this->projectPath);\n        $argTmpDestination = escapeshellarg(\"{$this->tempProjectPath}\");\n\n        if (file_exists(\"{$this->tempProjectPath}\")) {\n            exec(\"rm -rf $argTmpDestination\");\n        }\n        exec(\"mkdir $argTmpDestination && \\\n            cd {$argProjectPath} && \\\n            git archive HEAD | tar -xC {$argTmpDestination} && \\\n            cd -\");\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Define all constants of the project to the desired version.\n     *\n     * @return $this\n     */\n    protected function setFilesConstants()\n    {\n        $this->consoleWriter->displayText(\"Setting files constants...\", ConsoleWriter::COLOR_YELLOW);\n        $this->setConfigDefinesConstants()\n            ->setInstallDevConfigurationConstants()\n            ->setInstallDevInstallVersionConstants();\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Define all config/defines.inc.php constants to the desired version.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function setConfigDefinesConstants()\n    {\n        $configDefinesPath = $this->tempProjectPath . '/config/defines.inc.php';\n        $configDefinesContent = file_get_contents($configDefinesPath);\n        $configDefinesNewContent = preg_replace('/(.*(define).*)_PS_MODE_DEV_(.*);/Ui', 'define(\\'_PS_MODE_DEV_\\', false);', $configDefinesContent);\n        $configDefinesNewContent = preg_replace('/(.*)_PS_DISPLAY_COMPATIBILITY_WARNING_(.*);/Ui', 'define(\\'_PS_DISPLAY_COMPATIBILITY_WARNING_\\', false);', $configDefinesNewContent);\n\n        if (!file_put_contents($configDefinesPath, $configDefinesNewContent)) {\n            throw new BuildException(\"Unable to update contents of '$configDefinesPath'\");\n        }\n\n        return $this;\n    }\n\n    /**\n     * Get the current version in the project\n     *\n     * @return string PrestaShop version\n     */\n    protected function getCurrentVersion()\n    {\n        $kernelFile = $this->projectPath.'/app/AppKernel.php';\n        $matches = [];\n\n        $kernelFileContent = file_get_contents($kernelFile);\n        $kernelFileContent = preg_match(\n            '~const VERSION = \\'(.*)\\';~',\n            $kernelFileContent,\n            $matches\n        );\n\n        return $matches[1];\n    }\n\n    /**\n     * Define the PrestaShop version to the desired version.\n     *\n     * @return self\n     * @throws BuildException\n     */\n    protected function setupShopVersion()\n    {\n        $kernelFile = $this->tempProjectPath.'/app/AppKernel.php';\n        $version = new Version($this->version);\n\n        $kernelFileContent = file_get_contents($kernelFile);\n        $kernelFileContent = preg_replace(\n            '~const VERSION = \\'(.*)\\';~',\n            \"const VERSION = '\".$version->getVersion().\"';\",\n            $kernelFileContent\n        );\n        $kernelFileContent = preg_replace(\n            '~const MAJOR_VERSION_STRING = \\'(.*)\\';~',\n            \"const MAJOR_VERSION_STRING = '\".$version->getMajorVersionString().\"';\",\n            $kernelFileContent\n        );\n        $kernelFileContent = preg_replace(\n            '~const MAJOR_VERSION = (.*);~',\n            \"const MAJOR_VERSION = \".$version->getMajorVersion().\";\",\n            $kernelFileContent\n        );\n        $kernelFileContent = preg_replace(\n            '~const MINOR_VERSION = (.*);~',\n            \"const MINOR_VERSION = \".$version->getMinorVersion().\";\",\n            $kernelFileContent\n        );\n        $kernelFileContent = preg_replace(\n            '~const RELEASE_VERSION = (.*);~',\n            \"const RELEASE_VERSION = \".$version->getReleaseVersion().\";\",\n            $kernelFileContent\n        );\n\n        if (!file_put_contents($kernelFile, $kernelFileContent)) {\n            throw new BuildException(\"Unable to update contents of $kernelFile.\");\n        }\n\n        return $this;\n    }\n\n    /**\n     * Define all install-dev/data/xml/configuration.xml constants to the desired version.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function setInstallDevConfigurationConstants()\n    {\n        $configPath = $this->tempProjectPath.'/install-dev/data/xml/configuration.xml';\n\n        if (file_exists($configPath)) {\n            $configPathContent = file_get_contents($configPath);\n            $configPathNewContent = preg_replace('/name=\"PS_SMARTY_FORCE_COMPILE\"(.*?)value>([\\d]*)/si', 'name=\"PS_SMARTY_FORCE_COMPILE\"$1value>0', $configPathContent);\n            $configPathNewContent = preg_replace('/name=\"PS_SMARTY_CONSOLE\"(.*?)value>([\\d]*)/si', 'name=\"PS_SMARTY_CONSOLE\"$1value>0', $configPathNewContent);\n\n            if (!file_put_contents($configPath, $configPathNewContent)) {\n                throw new BuildException(\"Unable to update contents of '$configPath'.\");\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Define all install-dev/install_version.php constants to the desired version.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function setInstallDevInstallVersionConstants()\n    {\n        $installVersionPath = $this->tempProjectPath . '/install-dev/install_version.php';\n        $installVersionContent = file_get_contents($installVersionPath);\n        $installVersionNewContent = preg_replace('#_PS_INSTALL_VERSION_\\', \\'(.*)\\'\\)#', '_PS_INSTALL_VERSION_\\', \\'' . $this->version . '\\')', $installVersionContent);\n\n        if (!file_put_contents($installVersionPath, $installVersionNewContent)) {\n            throw new BuildException(\"Unable to update contents of '$installVersionPath'.\");\n        }\n\n        return $this;\n    }\n\n    /**\n     * Generate the /LICENCES file. Concatenate all text files which contains the 'licence' word\n     * in their filename into this unique one.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function generateLicensesFile()\n    {\n        $this->consoleWriter->displayText(\"Generating licences file...\", ConsoleWriter::COLOR_YELLOW);\n        $content = null;\n        $directory = new \\RecursiveDirectoryIterator($this->tempProjectPath);\n        $iterator = new \\RecursiveIteratorIterator($directory);\n        $regex = new \\RegexIterator($iterator, '/^.*\\/.*license(\\.txt)?$/i', \\RecursiveRegexIterator::GET_MATCH);\n\n        foreach($regex as $file => $value) {\n            $content .= file_get_contents($file) . \"\\r\\n\\r\\n\";\n        }\n\n        if (!file_put_contents($this->tempProjectPath . '/LICENSES', $content)) {\n            throw new BuildException('Unable to create LICENSES file.');\n        }\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Install all dependencies.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function runComposerInstall()\n    {\n        $this->consoleWriter->displayText(\"Running composer install...\", ConsoleWriter::COLOR_YELLOW);\n        $argProjectPath = escapeshellarg($this->tempProjectPath);\n        $command = \"cd {$argProjectPath} && export SYMFONY_ENV=prod && composer install --no-dev --optimize-autoloader --classmap-authoritative --no-interaction 2>&1\";\n        exec($command, $output, $returnCode);\n\n        if ($returnCode != 0) {\n            throw new BuildException('Unable to run composer install.');\n        }\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Create some required folders and rename a few.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function createAndRenameFolders()\n    {\n        if (!file_exists($this->tempProjectPath . '/var/cache/')) {\n            mkdir($this->tempProjectPath . '/var/cache', 0777, true);\n        }\n\n        if (!file_exists($this->tempProjectPath . '/var/logs/')) {\n            mkdir($this->tempProjectPath . '/var/logs', 0777, true);\n        }\n        $itemsToRename = ['admin-dev' => 'admin', 'install-dev' => 'install'];\n        $basePath = $this->tempProjectPath;\n\n        foreach ($itemsToRename as $oldName => $newName) {\n            if (file_exists(\"$basePath/$oldName\")) {\n                rename(\"{$basePath}/$oldName\", \"{$basePath}/$newName\");\n            } else {\n                throw new BuildException(\"Unable to rename $oldName to $newName, file does not exist.\");\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Clean project with unwanted files and folders, generate a checksum xml file,\n     * zip the directory and move it to the final destination.\n     *\n     * @return $this\n     */\n    protected function createPackage()\n    {\n        $this->consoleWriter->displayText(\"Creating package...{$this->lineSeparator}\", ConsoleWriter::COLOR_YELLOW);\n        $this->cleanTmpProject();\n        $this->generateXMLChecksum();\n        $this->createZipArchive();\n        $this->movePackage();\n        $this->consoleWriter->displayText(\"Package successfully created...{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Create a copy of PrestaShop in a tmp location and\n     * remove unwanted files and folders.\n     *\n     * @return $this\n     */\n    protected function cleanTmpProject()\n    {\n        $this->consoleWriter->displayText(\"--- Cleaning project...\", ConsoleWriter::COLOR_YELLOW);\n        $this->createAndRenameFolders();\n        $this->filesList = $this->getDirectoryStructure($this->tempProjectPath);\n        $this->removeUnnecessaryFiles(\n            $this->filesList,\n            $this->filesRemoveList,\n            $this->foldersRemoveList,\n            $this->patternsRemoveList,\n            $this->tempProjectPath\n        );\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Return the directory structure of a given path as an array.\n     *\n     * @param string $path\n     * @return array\n     */\n    protected function getDirectoryStructure($path)\n    {\n        $flags = FilesystemIterator::SKIP_DOTS | RecursiveIteratorIterator::CHILD_FIRST;\n        $iterator = new RecursiveDirectoryIterator($path, $flags);\n        $childrens = iterator_count($iterator);\n        $structure = [];\n\n        if ($childrens > 0) {\n            $children = $iterator->getChildren();\n\n            for ($index = 0; $index < $childrens; $index += 1) {\n                $pathname = $children->getPathname();\n\n                if ($children->hasChildren() === true) {\n                    $structure[$pathname] = $this->getDirectoryStructure($pathname);\n                } else {\n                    $structure[] = $pathname;\n                }\n                $children->next();\n            }\n        }\n        ksort($structure);\n\n        return $structure;\n    }\n\n    /**\n     * Delete unwanted files and folders in the PrestaShop tmp directory.\n     *\n     * @param array $filesList\n     * @param array $filesRemoveList\n     * @param array $foldersRemoveList\n     * @param array $patternsRemoveList\n     * @param string $folder\n     * @return $this\n     * @throws BuildException\n     */\n    protected function removeUnnecessaryFiles(\n        array &$filesList,\n        array &$filesRemoveList,\n        array &$foldersRemoveList,\n        array &$patternsRemoveList,\n        $folder\n    ) {\n        $tmpDir = sys_get_temp_dir();\n        $tmpDirPathLength = strlen($tmpDir);\n\n        foreach ($filesList as $key => $value) {\n            $pathToTest = $value;\n\n            if (!is_string($pathToTest)) {\n                $pathToTest = $key;\n            }\n\n            if (substr($pathToTest, 0, $tmpDirPathLength) != $tmpDir) {\n                throw new BuildException(\"Trying to delete a file somewhere else than in $tmpDir, path: $pathToTest\");\n            }\n\n            if (is_numeric($key)) {\n                $argValue = escapeshellarg($value);\n\n                // Remove files.\n                foreach ($filesRemoveList as $file_to_remove) {\n                    if ($folder.'/'.$file_to_remove == $value) {\n                        unset($filesList[$key]);\n                        exec(\"rm -f {$argValue}\");\n\n                        continue 2;\n                    }\n                }\n\n                // Remove folders.\n                foreach ($foldersRemoveList as $folder_to_remove) {\n                    if ($folder.'/'.$folder_to_remove == $value) {\n                        unset($filesList[$key]);\n                        exec(\"rm -rf {$argValue}\");\n\n                        continue 2;\n                    }\n                }\n\n                // Pattern to remove.\n                foreach ($patternsRemoveList as $pattern_to_remove) {\n                    if (preg_match('#'.$pattern_to_remove.'#', $value) == 1) {\n                        unset($filesList[$key]);\n                        exec(\"rm -rf {$argValue}\");\n\n                        continue 2;\n                    }\n                }\n            } else {\n                $argKey = escapeshellarg($key);\n\n                // Remove folders.\n                foreach ($foldersRemoveList as $folder_to_remove) {\n                    if ($folder.'/'.$folder_to_remove == $key) {\n                        unset($filesList[$key]);\n                        exec(\"rm -rf {$argKey}\");\n\n                        continue 2;\n                    }\n                }\n\n                // Pattern to remove.\n                foreach ($patternsRemoveList as $pattern_to_remove) {\n                    if (preg_match('#'.$pattern_to_remove.'#', $key) == 1) {\n                        unset($filesList[$key]);\n                        exec(\"rm -rf {$argKey}\");\n\n                        continue 2;\n                    }\n                }\n                $this->removeUnnecessaryFiles($filesList[$key], $filesRemoveList, $foldersRemoveList, $patternsRemoveList, $folder);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Zip the release if needed.\n     *\n     * @return $this\n     */\n    protected function createZipArchive()\n    {\n        if (!$this->useZip) {\n            return $this;\n        }\n        $this->consoleWriter->displayText(\"--- Creating zip archive...\", ConsoleWriter::COLOR_YELLOW);\n        $installerZipFilename = self::INSTALLER_ZIP_FILENAME;\n        $argTempProjectPath = escapeshellarg($this->tempProjectPath);\n        $argInstallerZipFilename = escapeshellarg($installerZipFilename);\n        $argProjectPath = escapeshellarg($this->projectPath);\n        $cmd = \"cd {$argTempProjectPath} \\\n            && zip -rq {$argInstallerZipFilename} . \\\n            && cd -\";\n        exec($cmd);\n\n        if ($this->useInstaller) {\n            exec(\"cd {$argProjectPath}/tools/build/Library/InstallUnpacker && php compile.php {$this->version} && cd -\");\n            $zip = new ZipArchive();\n            $zip->open(\"{$this->tempProjectPath}/{$this->zipFileName}\", ZipArchive::CREATE | ZipArchive::OVERWRITE);\n            $zip->addFile(\"{$this->tempProjectPath}/{$installerZipFilename}\", $installerZipFilename);\n            $zip->addFile(\"{$this->projectPath}/tools/build/Library/InstallUnpacker/index.php\", 'index.php');\n\n            // add docs at the root\n            $zip->addGlob(\n                \"{$this->projectPath}/tools/build/doc/*\",\n                0,\n                array('remove_all_path' => true)\n            );\n\n            $zip->close();\n            exec(\"rm {$argProjectPath}/tools/build/Library/InstallUnpacker/index.php\");\n        } else {\n            rename(\n                \"{$this->tempProjectPath}/$installerZipFilename\",\n                \"{$this->tempProjectPath}/{$this->zipFileName}\"\n            );\n        }\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Move the final release to the desired location.\n     *\n     * @return $this\n     */\n    protected function movePackage()\n    {\n        $this->consoleWriter->displayText(\"--- Move package...\", ConsoleWriter::COLOR_YELLOW);\n        $tmpDir = sys_get_temp_dir();\n        $argTempProjectPath = escapeshellarg($this->tempProjectPath);\n\n        if ($this->useZip) {\n            rename(\n                \"{$this->tempProjectPath}/{$this->zipFileName}\",\n                \"{$this->destinationDir}/prestashop_$this->version.zip\"\n            );\n        } else {\n            $argDestinationDir = escapeshellarg($this->destinationDir);\n            exec(\"mv {$argTempProjectPath} {$argDestinationDir}\");\n        }\n        rename(\n            \"{$tmpDir}/prestashop_$this->version.xml\",\n            \"{$this->destinationDir}/prestashop_$this->version.xml\"\n        );\n        exec(\"rm -rf {$argTempProjectPath}\");\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n    }\n\n    /**\n     * Create a XML file with the checksum of all the PrestaShop release files.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function generateXMLChecksum()\n    {\n        $this->consoleWriter->displayText(\"--- Generating XML checksum...\", ConsoleWriter::COLOR_YELLOW);\n        $tmpDir = sys_get_temp_dir();\n        $xmlPath = \"{$tmpDir}/prestashop_$this->version.xml\";\n        $content = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>{$this->lineSeparator}\"\n            . \"<checksum_list>{$this->lineSeparator}\"\n            . \"\\t<ps_root_dir version=\\\"$this->version\\\">{$this->lineSeparator}\"\n            . $this->generateXMLDirectoryChecksum($this->filesList)\n            . \"\\t</ps_root_dir>{$this->lineSeparator}\"\n            . \"</checksum_list>{$this->lineSeparator}\";\n\n        if (!file_put_contents($xmlPath, $content)) {\n            throw new BuildException('Unable to generate XML checksum.');\n        }\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Return the checksum of the files and folders given as parameter.\n     *\n     * @param array $files\n     * @return string\n     */\n    protected function generateXMLDirectoryChecksum(array $files)\n    {\n        $content = null;\n        $subCount = substr_count($this->tempProjectPath, DIRECTORY_SEPARATOR);\n\n        foreach ($files as $key => $value) {\n            if (is_numeric($key)) {\n                $md5 = md5_file($value);\n                $count = substr_count($value, DIRECTORY_SEPARATOR) - $subCount + 1;\n                $file_name = str_replace($this->tempProjectPath, null, $value);\n                $file_name = pathinfo($file_name, PATHINFO_BASENAME);\n                $content .= str_repeat(\"\\t\", $count) . \"<md5file name=\\\"$file_name\\\">$md5</md5file>\" . PHP_EOL;\n            } else {\n                $count = substr_count($key, DIRECTORY_SEPARATOR) - $subCount + 1;\n                $dir_name = str_replace($this->tempProjectPath, null, $key);\n                $dir_name = pathinfo($dir_name, PATHINFO_BASENAME);\n                $content .= str_repeat(\"\\t\", $count) . \"<dir name=\\\"$dir_name\\\">\" . PHP_EOL;\n                $content .= $this->generateXMLDirectoryChecksum($value);\n                $content .= str_repeat(\"\\t\", $count) . \"</dir>\" . PHP_EOL;\n            }\n        }\n\n        return $content;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Composer\\CaBundle\\CaBundle;\nuse PrestaShop\\PrestaShop\\Adapter\\ContainerFinder;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Exception\\LocalizationException;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Locale\\Repository as LocaleRepository;\nuse PHPSQLParser\\PHPSQLParser;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Filesystem\\FileSystem as PsFileSystem;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Locale;\n\nclass ToolsCore\n{\n    const CACERT_LOCATION = 'https://curl.haxx.se/ca/cacert.pem';\n    const SERVICE_LOCALE_REPOSITORY = 'prestashop.core.localization.locale.repository';\n\n    protected static $file_exists_cache = array();\n    protected static $_forceCompile;\n    protected static $_caching;\n    protected static $_user_plateform;\n    protected static $_user_browser;\n    protected static $request;\n    protected static $cldr_cache = [];\n\n    public static $round_mode = null;\n\n    public function __construct(Request $request = null)\n    {\n        if ($request) {\n            self::$request = $request;\n        }\n    }\n\n    /**\n     * Properly clean static cache\n     */\n    public static function resetStaticCache()\n    {\n        static::$cldr_cache = [];\n    }\n\n    /**\n     * Reset the request set during the first new Tools($request) call.\n     */\n    public static function resetRequest()\n    {\n        self::$request = null;\n    }\n\n    /**\n     * Random password generator.\n     *\n     * @param int $length Desired length (optional)\n     * @param string $flag Output type (NUMERIC, ALPHANUMERIC, NO_NUMERIC, RANDOM)\n     *\n     * @return bool|string Password\n     */\n    public static function passwdGen($length = 8, $flag = 'ALPHANUMERIC')\n    {\n        $length = (int) $length;\n\n        if ($length <= 0) {\n            return false;\n        }\n\n        switch ($flag) {\n            case 'NUMERIC':\n                $str = '0123456789';\n\n                break;\n            case 'NO_NUMERIC':\n                $str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n                break;\n            case 'RANDOM':\n                $num_bytes = ceil($length * 0.75);\n                $bytes = self::getBytes($num_bytes);\n\n                return substr(rtrim(base64_encode($bytes), '='), 0, $length);\n            case 'ALPHANUMERIC':\n            default:\n                $str = 'abcdefghijkmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n                break;\n        }\n\n        $bytes = Tools::getBytes($length);\n        $position = 0;\n        $result = '';\n\n        for ($i = 0; $i < $length; ++$i) {\n            $position = ($position + ord($bytes[$i])) % strlen($str);\n            $result .= $str[$position];\n        }\n\n        return $result;\n    }\n\n    /**\n     * Random bytes generator.\n     *\n     * Limited to OpenSSL since 1.7.0.0\n     *\n     * @param int $length Desired length of random bytes\n     *\n     * @return bool|string Random bytes\n     */\n    public static function getBytes($length)\n    {\n        $length = (int) $length;\n\n        if ($length <= 0) {\n            return false;\n        }\n\n        $bytes = openssl_random_pseudo_bytes($length, $cryptoStrong);\n\n        if ($cryptoStrong === true) {\n            return $bytes;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replace text within a portion of a string.\n     *\n     * Replaces a string matching a search, (optionally) string from a certain position\n     *\n     * @param string $search The string to search in the input string\n     * @param string $replace The replacement string\n     * @param string $subject The input string\n     * @param int $cur Starting position cursor for the search\n     *\n     * @return string the result string is returned\n     */\n    public static function strReplaceFirst($search, $replace, $subject, $cur = 0)\n    {\n        $strPos = strpos($subject, $search, $cur);\n\n        return $strPos !== false ? substr_replace($subject, $replace, (int) $strPos, strlen($search)) : $subject;\n    }\n\n    /**\n     * Redirect user to another page.\n     *\n     * @param string $url Desired URL\n     * @param string $base_uri Base URI (optional)\n     * @param Link $link\n     * @param string|array $headers A list of headers to send before redirection\n     */\n    public static function redirect($url, $base_uri = __PS_BASE_URI__, Link $link = null, $headers = null)\n    {\n        if (!$link) {\n            $link = Context::getContext()->link;\n        }\n\n        if (strpos($url, 'http://') === false && strpos($url, 'https://') === false && $link) {\n            if (strpos($url, $base_uri) === 0) {\n                $url = substr($url, strlen($base_uri));\n            }\n            if (strpos($url, 'index.php?controller=') !== false && strpos($url, 'index.php/') == 0) {\n                $url = substr($url, strlen('index.php?controller='));\n                if (Configuration::get('PS_REWRITING_SETTINGS')) {\n                    $url = Tools::strReplaceFirst('&', '?', $url);\n                }\n            }\n\n            $explode = explode('?', $url);\n            // don't use ssl if url is home page\n            // used when logout for example\n            $use_ssl = !empty($url);\n            $url = $link->getPageLink($explode[0], $use_ssl);\n            if (isset($explode[1])) {\n                $url .= '?' . $explode[1];\n            }\n        }\n\n        // Send additional headers\n        if ($headers) {\n            if (!is_array($headers)) {\n                $headers = array($headers);\n            }\n\n            foreach ($headers as $header) {\n                header($header);\n            }\n        }\n\n        header('Location: ' . $url);\n        exit;\n    }\n\n    /**\n     * Redirect URLs already containing PS_BASE_URI.\n     *\n     * @param string $url Desired URL\n     */\n    public static function redirectLink($url)\n    {\n        if (!preg_match('@^https?://@i', $url)) {\n            if (strpos($url, __PS_BASE_URI__) !== false && strpos($url, __PS_BASE_URI__) == 0) {\n                $url = substr($url, strlen(__PS_BASE_URI__));\n            }\n            if (strpos($url, 'index.php?controller=') !== false && strpos($url, 'index.php/') == 0) {\n                $url = substr($url, strlen('index.php?controller='));\n            }\n            $explode = explode('?', $url);\n            $url = Context::getContext()->link->getPageLink($explode[0]);\n            if (isset($explode[1])) {\n                $url .= '?' . $explode[1];\n            }\n        }\n        header('Location: ' . $url);\n        exit;\n    }\n\n    /**\n     * Redirect user to another admin page.\n     *\n     * @param string $url Desired URL\n     */\n    public static function redirectAdmin($url)\n    {\n        header('Location: ' . $url);\n        exit;\n    }\n\n    /**\n     * getShopProtocol return the available protocol for the current shop in use\n     * SSL if Configuration is set on and available for the server.\n     *\n     * @return string\n     */\n    public static function getShopProtocol()\n    {\n        $protocol = (Configuration::get('PS_SSL_ENABLED') || (!empty($_SERVER['HTTPS'])\n            && Tools::strtolower($_SERVER['HTTPS']) != 'off')) ? 'https://' : 'http://';\n\n        return $protocol;\n    }\n\n    /**\n     * getProtocol return the set protocol according to configuration (http[s]).\n     *\n     * @param bool $use_ssl true if require ssl\n     *\n     * @return string (http|https)\n     */\n    public static function getProtocol($use_ssl = null)\n    {\n        return null !== $use_ssl && $use_ssl ? 'https://' : 'http://';\n    }\n\n    /**\n     * getHttpHost return the <b>current</b> host used, with the protocol (http or https) if $http is true\n     * This function should not be used to choose http or https domain name.\n     * Use Tools::getShopDomain() or Tools::getShopDomainSsl instead.\n     *\n     * @param bool $http\n     * @param bool $entities\n     *\n     * @return string host\n     */\n    public static function getHttpHost($http = false, $entities = false, $ignore_port = false)\n    {\n        $httpHost = '';\n        if (array_key_exists('HTTP_HOST', $_SERVER)) {\n            $httpHost = $_SERVER['HTTP_HOST'];\n        }\n\n        $host = (isset($_SERVER['HTTP_X_FORWARDED_HOST']) ? $_SERVER['HTTP_X_FORWARDED_HOST'] : $httpHost);\n        if ($ignore_port && $pos = strpos($host, ':')) {\n            $host = substr($host, 0, $pos);\n        }\n        if ($entities) {\n            $host = htmlspecialchars($host, ENT_COMPAT, 'UTF-8');\n        }\n        if ($http) {\n            $host = (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://') . $host;\n        }\n\n        return $host;\n    }\n\n    /**\n     * getShopDomain returns domain name according to configuration and ignoring ssl.\n     *\n     * @param bool $http if true, return domain name with protocol\n     * @param bool $entities if true, convert special chars to HTML entities\n     *\n     * @return string domain\n     */\n    public static function getShopDomain($http = false, $entities = false)\n    {\n        if (!$domain = ShopUrl::getMainShopDomain()) {\n            $domain = Tools::getHttpHost();\n        }\n        if ($entities) {\n            $domain = htmlspecialchars($domain, ENT_COMPAT, 'UTF-8');\n        }\n        if ($http) {\n            $domain = 'http://' . $domain;\n        }\n\n        return $domain;\n    }\n\n    /**\n     * getShopDomainSsl returns domain name according to configuration and depending on ssl activation.\n     *\n     * @param bool $http if true, return domain name with protocol\n     * @param bool $entities if true, convert special chars to HTML entities\n     *\n     * @return string domain\n     */\n    public static function getShopDomainSsl($http = false, $entities = false)\n    {\n        if (!$domain = ShopUrl::getMainShopDomainSSL()) {\n            $domain = Tools::getHttpHost();\n        }\n        if ($entities) {\n            $domain = htmlspecialchars($domain, ENT_COMPAT, 'UTF-8');\n        }\n        if ($http) {\n            $domain = (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://') . $domain;\n        }\n\n        return $domain;\n    }\n\n    /**\n     * Get the server variable SERVER_NAME.\n     *\n     * @return string server name\n     */\n    public static function getServerName()\n    {\n        if (isset($_SERVER['HTTP_X_FORWARDED_SERVER']) && $_SERVER['HTTP_X_FORWARDED_SERVER']) {\n            return $_SERVER['HTTP_X_FORWARDED_SERVER'];\n        }\n\n        return $_SERVER['SERVER_NAME'];\n    }\n\n    /**\n     * Get the server variable REMOTE_ADDR, or the first ip of HTTP_X_FORWARDED_FOR (when using proxy).\n     *\n     * @return string $remote_addr ip of client\n     */\n    public static function getRemoteAddr()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-For', $headers)) {\n            $_SERVER['HTTP_X_FORWARDED_FOR'] = $headers['X-Forwarded-For'];\n        }\n\n        if (isset($_SERVER['HTTP_X_FORWARDED_FOR']) && $_SERVER['HTTP_X_FORWARDED_FOR'] && (!isset($_SERVER['REMOTE_ADDR'])\n            || preg_match('/^127\\..*/i', trim($_SERVER['REMOTE_ADDR'])) || preg_match('/^172\\.16.*/i', trim($_SERVER['REMOTE_ADDR']))\n            || preg_match('/^192\\.168\\.*/i', trim($_SERVER['REMOTE_ADDR'])) || preg_match('/^10\\..*/i', trim($_SERVER['REMOTE_ADDR'])))) {\n            if (strpos($_SERVER['HTTP_X_FORWARDED_FOR'], ',')) {\n                $ips = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);\n\n                return $ips[0];\n            } else {\n                return $_SERVER['HTTP_X_FORWARDED_FOR'];\n            }\n        } else {\n            return $_SERVER['REMOTE_ADDR'];\n        }\n    }\n\n    /**\n     * Check if the current page use SSL connection on not.\n     *\n     * @return bool uses SSL\n     */\n    public static function usingSecureMode()\n    {\n        if (isset($_SERVER['HTTPS'])) {\n            return in_array(Tools::strtolower($_SERVER['HTTPS']), array(1, 'on'));\n        }\n        // $_SERVER['SSL'] exists only in some specific configuration\n        if (isset($_SERVER['SSL'])) {\n            return in_array(Tools::strtolower($_SERVER['SSL']), array(1, 'on'));\n        }\n        // $_SERVER['REDIRECT_HTTPS'] exists only in some specific configuration\n        if (isset($_SERVER['REDIRECT_HTTPS'])) {\n            return in_array(Tools::strtolower($_SERVER['REDIRECT_HTTPS']), array(1, 'on'));\n        }\n        if (isset($_SERVER['HTTP_SSL'])) {\n            return in_array(Tools::strtolower($_SERVER['HTTP_SSL']), array(1, 'on'));\n        }\n        if (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) {\n            return Tools::strtolower($_SERVER['HTTP_X_FORWARDED_PROTO']) == 'https';\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the current url prefix protocol (https/http).\n     *\n     * @return string protocol\n     */\n    public static function getCurrentUrlProtocolPrefix()\n    {\n        if (Tools::usingSecureMode()) {\n            return 'https://';\n        } else {\n            return 'http://';\n        }\n    }\n\n    /**\n     * Returns a safe URL referrer.\n     *\n     * @param string $referrer URL referrer\n     *\n     * @return string secured referrer\n     */\n    public static function secureReferrer($referrer)\n    {\n        if (static::urlBelongsToShop($referrer)) {\n            return $referrer;\n        }\n\n        return __PS_BASE_URI__;\n    }\n\n    /**\n     * Indicates if the provided URL belongs to this shop (relative urls count as belonging to the shop).\n     *\n     * @param string $url\n     *\n     * @return bool\n     */\n    public static function urlBelongsToShop($url)\n    {\n        $urlHost = Tools::extractHost($url);\n\n        return empty($urlHost) || $urlHost === Tools::getServerName();\n    }\n\n    /**\n     * Safely extracts the host part from an URL.\n     *\n     * @param string $url\n     *\n     * @return string\n     */\n    public static function extractHost($url)\n    {\n        if (PHP_VERSION_ID >= 50628) {\n            $parsed = parse_url($url);\n            if (!is_array($parsed)) {\n                return $url;\n            }\n            if (empty($parsed['host']) || empty($parsed['scheme'])) {\n                return '';\n            }\n\n            return $parsed['host'];\n        }\n\n        // big workaround needed\n        // @see: https://bugs.php.net/bug.php?id=73192\n        // @see: https://3v4l.org/nFYJh\n\n        $matches = [];\n        if (!preg_match('/^[\\w]+:\\/\\/(?<authority>[^\\/?#$]+)/ui', $url, $matches)) {\n            // relative url\n            return '';\n        }\n        $authority = $matches['authority'];\n\n        if (!preg_match('/(?:(?<user>.+):(?<pass>.+)@)?(?<domain>[\\w.-]+)(?::(?<port>\\d+))?/ui', $authority, $matches)) {\n            return '';\n        }\n\n        return $matches['domain'];\n    }\n\n    /**\n     * Get a value from $_POST / $_GET\n     * if unavailable, take a default value.\n     *\n     * @param string $key Value key\n     * @param mixed $default_value (optional)\n     *\n     * @return mixed Value\n     */\n    public static function getValue($key, $default_value = false)\n    {\n        if (empty($key) || !is_string($key)) {\n            return false;\n        }\n\n        if (getenv('kernel.environment') === 'test' && self::$request instanceof Request) {\n            $value = self::$request->request->get($key, self::$request->query->get($key, $default_value));\n        } else {\n            $value = (isset($_POST[$key]) ? $_POST[$key] : (isset($_GET[$key]) ? $_GET[$key] : $default_value));\n        }\n\n        if (is_string($value)) {\n            return urldecode(preg_replace('/((\\%5C0+)|(\\%00+))/i', '', urlencode($value)));\n        }\n\n        return $value;\n    }\n\n    /**\n     * Get all values from $_POST/$_GET.\n     *\n     * @return mixed\n     */\n    public static function getAllValues()\n    {\n        return $_POST + $_GET;\n    }\n\n    /**\n     * Checks if a key exists either in $_POST or $_GET.\n     *\n     * @param string $key\n     *\n     * @return bool\n     */\n    public static function getIsset($key)\n    {\n        if (!is_string($key)) {\n            return false;\n        }\n\n        return isset($_POST[$key]) || isset($_GET[$key]);\n    }\n\n    /**\n     * Change language in cookie while clicking on a flag.\n     *\n     * @return string iso code\n     */\n    public static function setCookieLanguage($cookie = null)\n    {\n        if (!$cookie) {\n            $cookie = Context::getContext()->cookie;\n        }\n        /* If language does not exist or is disabled, erase it */\n        if ($cookie->id_lang) {\n            $lang = new Language((int) $cookie->id_lang);\n            if (!Validate::isLoadedObject($lang) || !$lang->active || !$lang->isAssociatedToShop()) {\n                $cookie->id_lang = null;\n            }\n        }\n\n        if (!Configuration::get('PS_DETECT_LANG')) {\n            unset($cookie->detect_language);\n        }\n\n        /* Automatically detect language if not already defined, detect_language is set in Cookie::update */\n        if (!Tools::getValue('isolang') && !Tools::getValue('id_lang') && (!$cookie->id_lang || isset($cookie->detect_language))\n            && isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n            $array = explode(',', Tools::strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']));\n            $string = $array[0];\n\n            if (Validate::isLanguageCode($string)) {\n                $lang = Language::getLanguageByIETFCode($string);\n                if (Validate::isLoadedObject($lang) && $lang->active && $lang->isAssociatedToShop()) {\n                    Context::getContext()->language = $lang;\n                    $cookie->id_lang = (int) $lang->id;\n                }\n            }\n        }\n\n        if (isset($cookie->detect_language)) {\n            unset($cookie->detect_language);\n        }\n\n        /* If language file not present, you must use default language file */\n        if (!$cookie->id_lang || !Validate::isUnsignedId($cookie->id_lang)) {\n            $cookie->id_lang = (int) Configuration::get('PS_LANG_DEFAULT');\n        }\n\n        $iso = Language::getIsoById((int) $cookie->id_lang);\n        @include_once _PS_THEME_DIR_ . 'lang/' . $iso . '.php';\n\n        return $iso;\n    }\n\n    /**\n     * If necessary change cookie language ID and context language.\n     *\n     * @param Context|null $context\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public static function switchLanguage(Context $context = null)\n    {\n        if (null === $context) {\n            $context = Context::getContext();\n        }\n\n        // On PrestaShop installations Dispatcher::__construct() gets called (and so Tools::switchLanguage())\n        // Stop in this case by checking the cookie\n        if (!isset($context->cookie)) {\n            return;\n        }\n\n        if (\n            ($iso = Tools::getValue('isolang')) &&\n            Validate::isLanguageIsoCode($iso) &&\n            ($id_lang = (int) Language::getIdByIso($iso))\n        ) {\n            $_GET['id_lang'] = $id_lang;\n        }\n\n        // Only switch if new ID is different from old ID\n        $newLanguageId = (int) Tools::getValue('id_lang');\n\n        if (\n            Validate::isUnsignedId($newLanguageId) &&\n            $newLanguageId !== 0 &&\n            $context->cookie->id_lang !== $newLanguageId\n        ) {\n            $context->cookie->id_lang = $newLanguageId;\n            $language = new Language($newLanguageId);\n            if (Validate::isLoadedObject($language) && $language->active && $language->isAssociatedToShop()) {\n                $context->language = $language;\n            }\n        }\n\n        Tools::setCookieLanguage($context->cookie);\n    }\n\n    public static function getCountry($address = null)\n    {\n        $id_country = (int) Tools::getValue('id_country');\n        if (!$id_country && isset($address, $address->id_country) && $address->id_country) {\n            $id_country = (int) $address->id_country;\n        } elseif (Configuration::get('PS_DETECT_COUNTRY') && isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n            preg_match('#(?<=-)\\w\\w|\\w\\w(?!-)#', $_SERVER['HTTP_ACCEPT_LANGUAGE'], $array);\n            if (is_array($array) && isset($array[0]) && Validate::isLanguageIsoCode($array[0])) {\n                $id_country = (int) Country::getByIso($array[0], true);\n            }\n        }\n        if (!isset($id_country) || !$id_country) {\n            $id_country = (int) Configuration::get('PS_COUNTRY_DEFAULT');\n        }\n\n        return (int) $id_country;\n    }\n\n    /**\n     * Set cookie currency from POST or default currency.\n     *\n     * @return Currency object\n     */\n    public static function setCurrency($cookie)\n    {\n        if (Tools::isSubmit('SubmitCurrency') && ($id_currency = Tools::getValue('id_currency'))) {\n            /** @var Currency $currency */\n            $currency = Currency::getCurrencyInstance((int) $id_currency);\n            if (is_object($currency) && $currency->id && !$currency->deleted && $currency->isAssociatedToShop()) {\n                $cookie->id_currency = (int) $currency->id;\n            }\n        }\n\n        $currency = null;\n        if ((int) $cookie->id_currency) {\n            $currency = Currency::getCurrencyInstance((int) $cookie->id_currency);\n        }\n        if (!Validate::isLoadedObject($currency) || (bool) $currency->deleted || !(bool) $currency->active) {\n            $currency = Currency::getCurrencyInstance(Configuration::get('PS_CURRENCY_DEFAULT'));\n        }\n\n        $cookie->id_currency = (int) $currency->id;\n        if ($currency->isAssociatedToShop()) {\n            return $currency;\n        } else {\n            // get currency from context\n            $currency = Shop::getEntityIds('currency', Context::getContext()->shop->id, true, true);\n            if (isset($currency[0]) && $currency[0]['id_currency']) {\n                $cookie->id_currency = $currency[0]['id_currency'];\n\n                return Currency::getCurrencyInstance((int) $cookie->id_currency);\n            }\n        }\n\n        return $currency;\n    }\n\n    /**\n     * Return the CLDR associated with the context or given language_code.\n     *\n     * @see Tools::getContextLocale\n     * @deprecated since PrestaShop 1.7.6.0\n     *\n     * @param Context|null $context\n     * @param null $language_code\n     *\n     * @throws PrestaShopException\n     */\n    public static function getCldr(Context $context = null, $language_code = null)\n    {\n        throw new PrestaShopException('This CLDR library has been removed. See Tools::getContextLocale instead.');\n    }\n\n    /**\n     * Return price with currency sign for a given product.\n     *\n     * @deprecated Since 1.7.6.0. Please use Locale::formatPrice() instead\n     * @see PrestaShop\\PrestaShop\\Core\\Localization\\Locale\n     *\n     * @param float $price Product price\n     * @param object|array $currency Current currency (object, id_currency, NULL => context currency)\n     * @param bool $no_utf8 Not used anymore\n     * @param Context|null $context\n     *\n     * @return string Price correctly formatted (sign, decimal separator...)\n     *                if you modify this function, don't forget to modify the Javascript function formatCurrency (in tools.js)\n     *\n     * @throws LocalizationException\n     */\n    public static function displayPrice($price, $currency = null, $no_utf8 = false, Context $context = null)\n    {\n        @trigger_error(\n            'Tools::displayPrice() is deprecated since version 1.7.6.0. '\n            . 'Use ' . Locale::class . '::formatPrice() instead.',\n            E_USER_DEPRECATED\n        );\n\n        if (!is_numeric($price)) {\n            return $price;\n        }\n\n        $context = $context ?: Context::getContext();\n        $currency = $currency ?: $context->currency;\n\n        if (is_int($currency)) {\n            $currency = Currency::getCurrencyInstance($currency);\n        }\n\n        $locale = static::getContextLocale($context);\n        $currencyCode = is_array($currency) ? $currency['iso_code'] : $currency->iso_code;\n\n        return $locale->formatPrice($price, $currencyCode);\n    }\n\n    /**\n     * Return current locale\n     *\n     * @param Context $context\n     *\n     * @return Locale\n     *\n     * @throws Exception\n     */\n    protected static function getContextLocale(Context $context)\n    {\n        $locale = $context->getCurrentLocale();\n        if (null !== $locale) {\n            return $locale;\n        }\n\n        $containerFinder = new ContainerFinder($context);\n        $container = $containerFinder->getContainer();\n        if (null === $context->container) {\n            $context->container = $container;\n        }\n\n        /** @var LocaleRepository $localeRepository */\n        $localeRepository = $container->get(self::SERVICE_LOCALE_REPOSITORY);\n        $locale = $localeRepository->getLocale(\n            $context->language->getLocale()\n        );\n\n        return $locale;\n    }\n\n    /**\n     * Returns a well formatted number.\n     *\n     * @deprecated Since 1.7.6.0. Please use Locale::formatNumber() instead\n     * @see Locale\n     *\n     * @param float $number The number to format\n     * @param null $currency not used anymore\n     *\n     * @return string The formatted number\n     *\n     * @throws Exception\n     * @throws LocalizationException\n     */\n    public static function displayNumber($number, $currency = null)\n    {\n        @trigger_error(\n            'Tools::displayNumber() is deprecated since version 1.7.5.0. '\n            . 'Use ' . Locale::class . ' instead.',\n            E_USER_DEPRECATED\n        );\n\n        $context = Context::getContext();\n        $locale = static::getContextLocale($context);\n\n        return $locale->formatNumber($number);\n    }\n\n    public static function displayPriceSmarty($params, &$smarty)\n    {\n        if (array_key_exists('currency', $params)) {\n            $currency = Currency::getCurrencyInstance((int) $params['currency']);\n            if (Validate::isLoadedObject($currency)) {\n                return Tools::displayPrice($params['price'], $currency, false);\n            }\n        }\n\n        return Tools::displayPrice($params['price']);\n    }\n\n    /**\n     * Return price converted.\n     *\n     * @deprecated since 1.7.4 use convertPriceToCurrency()\n     *\n     * @param float $price Product price\n     * @param object|array $currency Current currency object\n     * @param bool $to_currency convert to currency or from currency to default currency\n     * @param Context $context\n     *\n     * @return float Price\n     */\n    public static function convertPrice($price, $currency = null, $to_currency = true, Context $context = null)\n    {\n        $default_currency = (int) Configuration::get('PS_CURRENCY_DEFAULT');\n\n        if (!$context) {\n            $context = Context::getContext();\n        }\n        if ($currency === null) {\n            $currency = $context->currency;\n        } elseif (is_numeric($currency)) {\n            $currency = Currency::getCurrencyInstance($currency);\n        }\n\n        $c_id = (is_array($currency) ? $currency['id_currency'] : $currency->id);\n        $c_rate = (is_array($currency) ? $currency['conversion_rate'] : $currency->conversion_rate);\n\n        if ($c_id != $default_currency) {\n            if ($to_currency) {\n                $price *= $c_rate;\n            } else {\n                $price /= $c_rate;\n            }\n        }\n\n        return $price;\n    }\n\n    /**\n     * Implement array_replace for PHP <= 5.2.\n     *\n     * @return array|mixed|null\n     *\n     * @deprecated since version 1.7.4.0, to be removed.\n     */\n    public static function array_replace()\n    {\n        Tools::displayAsDeprecated('Use PHP\\'s array_replace() instead');\n        if (!function_exists('array_replace')) {\n            $args = func_get_args();\n            $num_args = func_num_args();\n            $res = array();\n            for ($i = 0; $i < $num_args; ++$i) {\n                if (is_array($args[$i])) {\n                    foreach ($args[$i] as $key => $val) {\n                        $res[$key] = $val;\n                    }\n                } else {\n                    trigger_error(__FUNCTION__ . '(): Argument #' . ($i + 1) . ' is not an array', E_USER_WARNING);\n\n                    return null;\n                }\n            }\n\n            return $res;\n        } else {\n            return call_user_func_array('array_replace', func_get_args());\n        }\n    }\n\n    /**\n     * Convert amount from a currency to an other currency automatically.\n     *\n     * @param float $amount\n     * @param Currency $currency_from if null we used the default currency\n     * @param Currency $currency_to if null we used the default currency\n     */\n    public static function convertPriceFull($amount, Currency $currency_from = null, Currency $currency_to = null)\n    {\n        if ($currency_from == $currency_to) {\n            return $amount;\n        }\n\n        if ($currency_from === null) {\n            $currency_from = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n        }\n\n        if ($currency_to === null) {\n            $currency_to = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n        }\n\n        if ($currency_from->id == Configuration::get('PS_CURRENCY_DEFAULT')) {\n            $amount *= $currency_to->conversion_rate;\n        } else {\n            $conversion_rate = ($currency_from->conversion_rate == 0 ? 1 : $currency_from->conversion_rate);\n            // Convert amount to default currency (using the old currency rate)\n            $amount = $amount / $conversion_rate;\n            // Convert to new currency\n            $amount *= $currency_to->conversion_rate;\n        }\n\n        return Tools::ps_round($amount, _PS_PRICE_COMPUTE_PRECISION_);\n    }\n\n    /**\n     * Display date regarding to language preferences.\n     *\n     * @param array $params Date, format...\n     * @param object $smarty Smarty object for language preferences\n     *\n     * @return string Date\n     */\n    public static function dateFormat($params, &$smarty)\n    {\n        return Tools::displayDate($params['date'], null, (isset($params['full']) ? $params['full'] : false));\n    }\n\n    /**\n     * Display date regarding to language preferences.\n     *\n     * @param string $date Date to display format UNIX\n     * @param int $id_lang Language id DEPRECATED\n     * @param bool $full With time or not (optional)\n     * @param string $separator DEPRECATED\n     *\n     * @return string Date\n     */\n    public static function displayDate($date, $id_lang = null, $full = false, $separator = null)\n    {\n        if ($id_lang !== null) {\n            Tools::displayParameterAsDeprecated('id_lang');\n        }\n        if ($separator !== null) {\n            Tools::displayParameterAsDeprecated('separator');\n        }\n\n        if (!$date || !($time = strtotime($date))) {\n            return $date;\n        }\n\n        if ($date == '0000-00-00 00:00:00' || $date == '0000-00-00') {\n            return '';\n        }\n\n        if (!Validate::isDate($date) || !Validate::isBool($full)) {\n            throw new PrestaShopException('Invalid date');\n        }\n\n        $context = Context::getContext();\n        $date_format = ($full ? $context->language->date_format_full : $context->language->date_format_lite);\n\n        return date($date_format, $time);\n    }\n\n    /**\n     * Get localized date format.\n     *\n     * @return string Date format\n     */\n    public static function getDateFormat()\n    {\n        $format = Context::getContext()->language->date_format_lite;\n        $search = array('d', 'm', 'Y');\n        $replace = array('DD', 'MM', 'YYYY');\n        $format = str_replace($search, $replace, $format);\n\n        return $format;\n    }\n\n    /**\n     * Get formatted date.\n     *\n     * @param string $date_str Date string\n     * @param bool $full With time or not (optional)\n     *\n     * @return string Formatted date\n     */\n    public static function formatDateStr($date_str, $full = false)\n    {\n        $time = strtotime($date_str);\n        $context = Context::getContext();\n        $date_format = ($full ? $context->language->date_format_full : $context->language->date_format_lite);\n        $date = date($date_format, $time);\n\n        return $date;\n    }\n\n    /**\n     * Sanitize a string.\n     *\n     * @param string $string String to sanitize\n     * @param bool $full String contains HTML or not (optional)\n     *\n     * @return string Sanitized string\n     */\n    public static function safeOutput($string, $html = false)\n    {\n        if (!$html) {\n            $string = strip_tags($string);\n        }\n\n        return @Tools::htmlentitiesUTF8($string, ENT_QUOTES);\n    }\n\n    public static function htmlentitiesUTF8($string, $type = ENT_QUOTES)\n    {\n        if (is_array($string)) {\n            return array_map(array('Tools', 'htmlentitiesUTF8'), $string);\n        }\n\n        return htmlentities((string) $string, $type, 'utf-8');\n    }\n\n    public static function htmlentitiesDecodeUTF8($string)\n    {\n        if (is_array($string)) {\n            $string = array_map(array('Tools', 'htmlentitiesDecodeUTF8'), $string);\n\n            return (string) array_shift($string);\n        }\n\n        return html_entity_decode((string) $string, ENT_QUOTES, 'utf-8');\n    }\n\n    public static function safePostVars()\n    {\n        if (!isset($_POST) || !is_array($_POST)) {\n            $_POST = array();\n        } else {\n            $_POST = array_map(array('Tools', 'htmlentitiesUTF8'), $_POST);\n        }\n    }\n\n    /**\n     * Delete directory and subdirectories.\n     *\n     * @param string $dirname Directory name\n     */\n    public static function deleteDirectory($dirname, $delete_self = true)\n    {\n        $dirname = rtrim($dirname, '/') . '/';\n        if (file_exists($dirname)) {\n            if ($files = scandir($dirname, SCANDIR_SORT_NONE)) {\n                foreach ($files as $file) {\n                    if ($file != '.' && $file != '..' && $file != '.svn') {\n                        if (is_dir($dirname . $file)) {\n                            Tools::deleteDirectory($dirname . $file);\n                        } elseif (file_exists($dirname . $file)) {\n                            unlink($dirname . $file);\n                        }\n                    }\n                }\n\n                if ($delete_self && file_exists($dirname)) {\n                    if (!rmdir($dirname)) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Delete file.\n     *\n     * @param string $file File path\n     * @param array $exclude_files Excluded files\n     */\n    public static function deleteFile($file, $exclude_files = array())\n    {\n        if (isset($exclude_files) && !is_array($exclude_files)) {\n            $exclude_files = array($exclude_files);\n        }\n\n        if (file_exists($file) && is_file($file) && array_search(basename($file), $exclude_files) === false) {\n            unlink($file);\n        }\n    }\n\n    /**\n     * Clear XML cache folder.\n     */\n    public static function clearXMLCache()\n    {\n        foreach (scandir(_PS_ROOT_DIR_ . '/config/xml', SCANDIR_SORT_NONE) as $file) {\n            $path_info = pathinfo($file, PATHINFO_EXTENSION);\n            if (($path_info == 'xml') && ($file != 'default.xml')) {\n                self::deleteFile(_PS_ROOT_DIR_ . '/config/xml/' . $file);\n            }\n        }\n    }\n\n    /**\n     * Depending on _PS_MODE_DEV_ throws an exception or returns a error message.\n     *\n     * @param string|null $errorMessage Error message (defaults to \"Fatal error\")\n     * @param bool $htmlentities DEPRECATED since 1.7.4.0\n     * @param Context|null $context DEPRECATED since 1.7.4.0\n     *\n     * @return string\n     *\n     * @throws PrestaShopException If _PS_MODE_DEV_ is enabled\n     */\n    public static function displayError($errorMessage = null, $htmlentities = null, Context $context = null)\n    {\n        header('HTTP/1.1 500 Internal Server Error', true, 500);\n        if (null !== $htmlentities) {\n            self::displayParameterAsDeprecated('htmlentities');\n        }\n        if (null !== $context) {\n            self::displayParameterAsDeprecated('context');\n        }\n\n        if (null === $errorMessage) {\n            $errorMessage = Context::getContext()\n                ->getTranslator()\n                ->trans('Fatal error', [], 'Admin.Notifications.Error');\n        }\n\n        if (_PS_MODE_DEV_) {\n            throw new PrestaShopException($errorMessage);\n        }\n\n        return $errorMessage;\n    }\n\n    /**\n     * Display an error with detailed object.\n     *\n     * @param mixed $object\n     * @param bool $kill\n     *\n     * @return $object if $kill = false;\n     */\n    public static function dieObject($object, $kill = true)\n    {\n        dump($object);\n\n        if ($kill) {\n            die('END');\n        }\n\n        return $object;\n    }\n\n    public static function debug_backtrace($start = 0, $limit = null)\n    {\n        $backtrace = debug_backtrace();\n        array_shift($backtrace);\n        for ($i = 0; $i < $start; ++$i) {\n            array_shift($backtrace);\n        }\n\n        echo '\n        <div style=\"margin:10px;padding:10px;border:1px solid #666666\">\n            <ul>';\n        $i = 0;\n        foreach ($backtrace as $id => $trace) {\n            if ((int) $limit && (++$i > $limit)) {\n                break;\n            }\n            $relative_file = (isset($trace['file'])) ? 'in /' . ltrim(str_replace(array(_PS_ROOT_DIR_, '\\\\'), array('', '/'), $trace['file']), '/') : '';\n            $current_line = (isset($trace['line'])) ? ':' . $trace['line'] : '';\n\n            echo '<li>\n                <b>' . ((isset($trace['class'])) ? $trace['class'] : '') . ((isset($trace['type'])) ? $trace['type'] : '') . $trace['function'] . '</b>\n                ' . $relative_file . $current_line . '\n            </li>';\n        }\n        echo '</ul>\n        </div>';\n    }\n\n    /**\n     * Prints object information into error log.\n     *\n     * @see error_log()\n     *\n     * @param mixed $object\n     * @param int|null $message_type\n     * @param string|null $destination\n     * @param string|null $extra_headers\n     *\n     * @return bool\n     */\n    public static function error_log($object, $message_type = null, $destination = null, $extra_headers = null)\n    {\n        return error_log(print_r($object, true), $message_type, $destination, $extra_headers);\n    }\n\n    /**\n     * Check if submit has been posted.\n     *\n     * @param string $submit submit name\n     */\n    public static function isSubmit($submit)\n    {\n        return\n            isset($_POST[$submit]) || isset($_POST[$submit . '_x']) || isset($_POST[$submit . '_y'])\n            || isset($_GET[$submit]) || isset($_GET[$submit . '_x']) || isset($_GET[$submit . '_y']);\n    }\n\n    /**\n     * Hash password.\n     *\n     * @param string $passwd String to hash\n     *\n     * @return string Hashed password\n     *\n     * @deprecated 1.7.0\n     */\n    public static function encrypt($passwd)\n    {\n        return self::hash($passwd);\n    }\n\n    /**\n     * Hash password.\n     *\n     * @param string $passwd String to has\n     *\n     * @return string Hashed password\n     *\n     * @since 1.7.0\n     */\n    public static function hash($passwd)\n    {\n        return md5(_COOKIE_KEY_ . $passwd);\n    }\n\n    /**\n     * Hash data string.\n     *\n     * @param string $data String to encrypt\n     *\n     * @return string Hashed IV\n     *\n     * @deprecated 1.7.0\n     */\n    public static function encryptIV($data)\n    {\n        return self::hashIV($data);\n    }\n\n    /**\n     * Hash data string.\n     *\n     * @param string $data String to encrypt\n     *\n     * @return string Hashed IV\n     *\n     * @since 1.7.0\n     */\n    public static function hashIV($data)\n    {\n        return md5(_COOKIE_IV_ . $data);\n    }\n\n    /**\n     * Get token to prevent CSRF.\n     *\n     * @param string $token token to encrypt\n     */\n    public static function getToken($page = true, Context $context = null)\n    {\n        if (!$context) {\n            $context = Context::getContext();\n        }\n        if ($page === true) {\n            return Tools::hash($context->customer->id . $context->customer->passwd . $_SERVER['SCRIPT_NAME']);\n        } else {\n            return Tools::hash($context->customer->id . $context->customer->passwd . $page);\n        }\n    }\n\n    /**\n     * Tokenize a string.\n     *\n     * @param string $string string to encript\n     */\n    public static function getAdminToken($string)\n    {\n        return !empty($string) ? Tools::hash($string) : false;\n    }\n\n    public static function getAdminTokenLite($tab, Context $context = null)\n    {\n        if (!$context) {\n            $context = Context::getContext();\n        }\n\n        return Tools::getAdminToken($tab . (int) Tab::getIdFromClassName($tab) . (int) $context->employee->id);\n    }\n\n    public static function getAdminTokenLiteSmarty($params, &$smarty)\n    {\n        $context = Context::getContext();\n\n        return Tools::getAdminToken($params['tab'] . (int) Tab::getIdFromClassName($params['tab']) . (int) $context->employee->id);\n    }\n\n    /**\n     * Get a valid URL to use from BackOffice.\n     *\n     * @param string $url An URL to use in BackOffice\n     * @param bool $entites Set to true to use htmlentities function on URL param\n     */\n    public static function getAdminUrl($url = null, $entities = false)\n    {\n        $link = Tools::getHttpHost(true) . __PS_BASE_URI__;\n\n        if (isset($url)) {\n            $link .= ($entities ? Tools::htmlentitiesUTF8($url) : $url);\n        }\n\n        return $link;\n    }\n\n    /**\n     * Get a valid image URL to use from BackOffice.\n     *\n     * @param string $image Image name\n     * @param bool $entites Set to true to use htmlentities function on image param\n     */\n    public static function getAdminImageUrl($image = null, $entities = false)\n    {\n        return Tools::getAdminUrl(basename(_PS_IMG_DIR_) . '/' . $image, $entities);\n    }\n\n    /**\n     * Return the friendly url from the provided string.\n     *\n     * @param string $str\n     * @param bool $utf8_decode (deprecated)\n     *\n     * @return string\n     */\n    public static function link_rewrite($str, $utf8_decode = null)\n    {\n        if ($utf8_decode !== null) {\n            Tools::displayParameterAsDeprecated('utf8_decode');\n        }\n\n        return Tools::str2url($str);\n    }\n\n    /**\n     * Return a friendly url made from the provided string\n     * If the mbstring library is available, the output is the same as the js function of the same name.\n     *\n     * @param string $str\n     *\n     * @return string\n     */\n    public static function str2url($str)\n    {\n        static $array_str = array();\n        static $allow_accented_chars = null;\n        static $has_mb_strtolower = null;\n\n        if ($has_mb_strtolower === null) {\n            $has_mb_strtolower = function_exists('mb_strtolower');\n        }\n\n        if (!is_string($str)) {\n            return false;\n        }\n\n        if (isset($array_str[$str])) {\n            return $array_str[$str];\n        }\n\n        if ($str == '') {\n            return '';\n        }\n\n        if ($allow_accented_chars === null) {\n            $allow_accented_chars = Configuration::get('PS_ALLOW_ACCENTED_CHARS_URL');\n        }\n\n        $return_str = trim($str);\n\n        if ($has_mb_strtolower) {\n            $return_str = mb_strtolower($return_str, 'utf-8');\n        }\n        if (!$allow_accented_chars) {\n            $return_str = Tools::replaceAccentedChars($return_str);\n        }\n\n        // Remove all non-whitelist chars.\n        if ($allow_accented_chars) {\n            $return_str = preg_replace('/[^a-zA-Z0-9\\s\\'\\:\\/\\[\\]\\-\\p{L}]/u', '', $return_str);\n        } else {\n            $return_str = preg_replace('/[^a-zA-Z0-9\\s\\'\\:\\/\\[\\]\\-]/', '', $return_str);\n        }\n\n        $return_str = preg_replace('/[\\s\\'\\:\\/\\[\\]\\-]+/', ' ', $return_str);\n        $return_str = str_replace(array(' ', '/'), '-', $return_str);\n\n        // If it was not possible to lowercase the string with mb_strtolower, we do it after the transformations.\n        // This way we lose fewer special chars.\n        if (!$has_mb_strtolower) {\n            $return_str = Tools::strtolower($return_str);\n        }\n\n        $array_str[$str] = $return_str;\n\n        return $return_str;\n    }\n\n    /**\n     * Replace all accented chars by their equivalent non accented chars.\n     *\n     * @param string $str\n     *\n     * @return string\n     */\n    public static function replaceAccentedChars($str)\n    {\n        /* One source among others:\n            http://www.tachyonsoft.com/uc0000.htm\n            http://www.tachyonsoft.com/uc0001.htm\n            http://www.tachyonsoft.com/uc0004.htm\n        */\n        $patterns = array(\n            /* Lowercase */\n            /* a  */ '/[\\x{00E0}\\x{00E1}\\x{00E2}\\x{00E3}\\x{00E4}\\x{00E5}\\x{0101}\\x{0103}\\x{0105}\\x{0430}\\x{00C0}-\\x{00C3}\\x{1EA0}-\\x{1EB7}]/u',\n            /* b  */ '/[\\x{0431}]/u',\n            /* c  */ '/[\\x{00E7}\\x{0107}\\x{0109}\\x{010D}\\x{0446}]/u',\n            /* d  */ '/[\\x{010F}\\x{0111}\\x{0434}\\x{0110}\\x{00F0}]/u',\n            /* e  */ '/[\\x{00E8}\\x{00E9}\\x{00EA}\\x{00EB}\\x{0113}\\x{0115}\\x{0117}\\x{0119}\\x{011B}\\x{0435}\\x{044D}\\x{00C8}-\\x{00CA}\\x{1EB8}-\\x{1EC7}]/u',\n            /* f  */ '/[\\x{0444}]/u',\n            /* g  */ '/[\\x{011F}\\x{0121}\\x{0123}\\x{0433}\\x{0491}]/u',\n            /* h  */ '/[\\x{0125}\\x{0127}]/u',\n            /* i  */ '/[\\x{00EC}\\x{00ED}\\x{00EE}\\x{00EF}\\x{0129}\\x{012B}\\x{012D}\\x{012F}\\x{0131}\\x{0438}\\x{0456}\\x{00CC}\\x{00CD}\\x{1EC8}-\\x{1ECB}\\x{0128}]/u',\n            /* j  */ '/[\\x{0135}\\x{0439}]/u',\n            /* k  */ '/[\\x{0137}\\x{0138}\\x{043A}]/u',\n            /* l  */ '/[\\x{013A}\\x{013C}\\x{013E}\\x{0140}\\x{0142}\\x{043B}]/u',\n            /* m  */ '/[\\x{043C}]/u',\n            /* n  */ '/[\\x{00F1}\\x{0144}\\x{0146}\\x{0148}\\x{0149}\\x{014B}\\x{043D}]/u',\n            /* o  */ '/[\\x{00F2}\\x{00F3}\\x{00F4}\\x{00F5}\\x{00F6}\\x{00F8}\\x{014D}\\x{014F}\\x{0151}\\x{043E}\\x{00D2}-\\x{00D5}\\x{01A0}\\x{01A1}\\x{1ECC}-\\x{1EE3}]/u',\n            /* p  */ '/[\\x{043F}]/u',\n            /* r  */ '/[\\x{0155}\\x{0157}\\x{0159}\\x{0440}]/u',\n            /* s  */ '/[\\x{015B}\\x{015D}\\x{015F}\\x{0161}\\x{0441}]/u',\n            /* ss */ '/[\\x{00DF}]/u',\n            /* t  */ '/[\\x{0163}\\x{0165}\\x{0167}\\x{0442}]/u',\n            /* u  */ '/[\\x{00F9}\\x{00FA}\\x{00FB}\\x{00FC}\\x{0169}\\x{016B}\\x{016D}\\x{016F}\\x{0171}\\x{0173}\\x{0443}\\x{00D9}-\\x{00DA}\\x{0168}\\x{01AF}\\x{01B0}\\x{1EE4}-\\x{1EF1}]/u',\n            /* v  */ '/[\\x{0432}]/u',\n            /* w  */ '/[\\x{0175}]/u',\n            /* y  */ '/[\\x{00FF}\\x{0177}\\x{00FD}\\x{044B}\\x{1EF2}-\\x{1EF9}\\x{00DD}]/u',\n            /* z  */ '/[\\x{017A}\\x{017C}\\x{017E}\\x{0437}]/u',\n            /* ae */ '/[\\x{00E6}]/u',\n            /* ch */ '/[\\x{0447}]/u',\n            /* kh */ '/[\\x{0445}]/u',\n            /* oe */ '/[\\x{0153}]/u',\n            /* sh */ '/[\\x{0448}]/u',\n            /* shh*/ '/[\\x{0449}]/u',\n            /* ya */ '/[\\x{044F}]/u',\n            /* ye */ '/[\\x{0454}]/u',\n            /* yi */ '/[\\x{0457}]/u',\n            /* yo */ '/[\\x{0451}]/u',\n            /* yu */ '/[\\x{044E}]/u',\n            /* zh */ '/[\\x{0436}]/u',\n\n            /* Uppercase */\n            /* A  */ '/[\\x{0100}\\x{0102}\\x{0104}\\x{00C0}\\x{00C1}\\x{00C2}\\x{00C3}\\x{00C4}\\x{00C5}\\x{0410}]/u',\n            /* B  */ '/[\\x{0411}]/u',\n            /* C  */ '/[\\x{00C7}\\x{0106}\\x{0108}\\x{010A}\\x{010C}\\x{0426}]/u',\n            /* D  */ '/[\\x{010E}\\x{0110}\\x{0414}\\x{00D0}]/u',\n            /* E  */ '/[\\x{00C8}\\x{00C9}\\x{00CA}\\x{00CB}\\x{0112}\\x{0114}\\x{0116}\\x{0118}\\x{011A}\\x{0415}\\x{042D}]/u',\n            /* F  */ '/[\\x{0424}]/u',\n            /* G  */ '/[\\x{011C}\\x{011E}\\x{0120}\\x{0122}\\x{0413}\\x{0490}]/u',\n            /* H  */ '/[\\x{0124}\\x{0126}]/u',\n            /* I  */ '/[\\x{0128}\\x{012A}\\x{012C}\\x{012E}\\x{0130}\\x{0418}\\x{0406}]/u',\n            /* J  */ '/[\\x{0134}\\x{0419}]/u',\n            /* K  */ '/[\\x{0136}\\x{041A}]/u',\n            /* L  */ '/[\\x{0139}\\x{013B}\\x{013D}\\x{0139}\\x{0141}\\x{041B}]/u',\n            /* M  */ '/[\\x{041C}]/u',\n            /* N  */ '/[\\x{00D1}\\x{0143}\\x{0145}\\x{0147}\\x{014A}\\x{041D}]/u',\n            /* O  */ '/[\\x{00D3}\\x{014C}\\x{014E}\\x{0150}\\x{041E}]/u',\n            /* P  */ '/[\\x{041F}]/u',\n            /* R  */ '/[\\x{0154}\\x{0156}\\x{0158}\\x{0420}]/u',\n            /* S  */ '/[\\x{015A}\\x{015C}\\x{015E}\\x{0160}\\x{0421}]/u',\n            /* T  */ '/[\\x{0162}\\x{0164}\\x{0166}\\x{0422}]/u',\n            /* U  */ '/[\\x{00D9}\\x{00DA}\\x{00DB}\\x{00DC}\\x{0168}\\x{016A}\\x{016C}\\x{016E}\\x{0170}\\x{0172}\\x{0423}]/u',\n            /* V  */ '/[\\x{0412}]/u',\n            /* W  */ '/[\\x{0174}]/u',\n            /* Y  */ '/[\\x{0176}\\x{042B}]/u',\n            /* Z  */ '/[\\x{0179}\\x{017B}\\x{017D}\\x{0417}]/u',\n            /* AE */ '/[\\x{00C6}]/u',\n            /* CH */ '/[\\x{0427}]/u',\n            /* KH */ '/[\\x{0425}]/u',\n            /* OE */ '/[\\x{0152}]/u',\n            /* SH */ '/[\\x{0428}]/u',\n            /* SHH*/ '/[\\x{0429}]/u',\n            /* YA */ '/[\\x{042F}]/u',\n            /* YE */ '/[\\x{0404}]/u',\n            /* YI */ '/[\\x{0407}]/u',\n            /* YO */ '/[\\x{0401}]/u',\n            /* YU */ '/[\\x{042E}]/u',\n            /* ZH */ '/[\\x{0416}]/u',\n        );\n\n        // \u00f6 to oe\n        // \u00e5 to aa\n        // \u00e4 to ae\n\n        $replacements = array(\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 'ss', 't', 'u', 'v', 'w', 'y', 'z', 'ae', 'ch', 'kh', 'oe', 'sh', 'shh', 'ya', 'ye', 'yi', 'yo', 'yu', 'zh',\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'Y', 'Z', 'AE', 'CH', 'KH', 'OE', 'SH', 'SHH', 'YA', 'YE', 'YI', 'YO', 'YU', 'ZH',\n        );\n\n        return preg_replace($patterns, $replacements, $str);\n    }\n\n    /**\n     * Truncate strings.\n     *\n     * @param string $str\n     * @param int $max_length Max length\n     * @param string $suffix Suffix optional\n     *\n     * @return string $str truncated\n     */\n    /* CAUTION : Use it only on module hookEvents.\n    ** For other purposes use the smarty function instead */\n    public static function truncate($str, $max_length, $suffix = '...')\n    {\n        if (Tools::strlen($str) <= $max_length) {\n            return $str;\n        }\n        $str = utf8_decode($str);\n\n        return utf8_encode(substr($str, 0, $max_length - Tools::strlen($suffix)) . $suffix);\n    }\n\n    /*Copied from CakePHP String utility file*/\n    public static function truncateString($text, $length = 120, $options = array())\n    {\n        $default = array(\n            'ellipsis' => '...', 'exact' => true, 'html' => true,\n        );\n\n        $options = array_merge($default, $options);\n        extract($options);\n        /**\n         * @var string\n         * @var bool $exact\n         * @var bool $html\n         */\n        if ($html) {\n            if (Tools::strlen(preg_replace('/<.*?>/', '', $text)) <= $length) {\n                return $text;\n            }\n\n            $total_length = Tools::strlen(strip_tags($ellipsis));\n            $open_tags = array();\n            $truncate = '';\n            preg_match_all('/(<\\/?([\\w+]+)[^>]*>)?([^<>]*)/', $text, $tags, PREG_SET_ORDER);\n\n            foreach ($tags as $tag) {\n                if (!preg_match('/img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param/s', $tag[2])) {\n                    if (preg_match('/<[\\w]+[^>]*>/s', $tag[0])) {\n                        array_unshift($open_tags, $tag[2]);\n                    } elseif (preg_match('/<\\/([\\w]+)[^>]*>/s', $tag[0], $close_tag)) {\n                        $pos = array_search($close_tag[1], $open_tags);\n                        if ($pos !== false) {\n                            array_splice($open_tags, $pos, 1);\n                        }\n                    }\n                }\n                $truncate .= $tag[1];\n                $content_length = Tools::strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', ' ', $tag[3]));\n\n                if ($content_length + $total_length > $length) {\n                    $left = $length - $total_length;\n                    $entities_length = 0;\n\n                    if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', $tag[3], $entities, PREG_OFFSET_CAPTURE)) {\n                        foreach ($entities[0] as $entity) {\n                            if ($entity[1] + 1 - $entities_length <= $left) {\n                                --$left;\n                                $entities_length += Tools::strlen($entity[0]);\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n\n                    $truncate .= Tools::substr($tag[3], 0, $left + $entities_length);\n\n                    break;\n                } else {\n                    $truncate .= $tag[3];\n                    $total_length += $content_length;\n                }\n\n                if ($total_length >= $length) {\n                    break;\n                }\n            }\n        } else {\n            if (Tools::strlen($text) <= $length) {\n                return $text;\n            }\n\n            $truncate = Tools::substr($text, 0, $length - Tools::strlen($ellipsis));\n        }\n\n        if (!$exact) {\n            $spacepos = Tools::strrpos($truncate, ' ');\n            if ($html) {\n                $truncate_check = Tools::substr($truncate, 0, $spacepos);\n                $last_open_tag = Tools::strrpos($truncate_check, '<');\n                $last_close_tag = Tools::strrpos($truncate_check, '>');\n\n                if ($last_open_tag > $last_close_tag) {\n                    preg_match_all('/<[\\w]+[^>]*>/s', $truncate, $last_tag_matches);\n                    $last_tag = array_pop($last_tag_matches[0]);\n                    $spacepos = Tools::strrpos($truncate, $last_tag) + Tools::strlen($last_tag);\n                }\n\n                $bits = Tools::substr($truncate, $spacepos);\n                preg_match_all('/<\\/([a-z]+)>/', $bits, $dropped_tags, PREG_SET_ORDER);\n\n                if (!empty($dropped_tags)) {\n                    if (!empty($open_tags)) {\n                        foreach ($dropped_tags as $closing_tag) {\n                            if (!in_array($closing_tag[1], $open_tags)) {\n                                array_unshift($open_tags, $closing_tag[1]);\n                            }\n                        }\n                    } else {\n                        foreach ($dropped_tags as $closing_tag) {\n                            $open_tags[] = $closing_tag[1];\n                        }\n                    }\n                }\n            }\n\n            $truncate = Tools::substr($truncate, 0, $spacepos);\n        }\n\n        $truncate .= $ellipsis;\n\n        if ($html) {\n            foreach ($open_tags as $tag) {\n                $truncate .= '</' . $tag . '>';\n            }\n        }\n\n        return $truncate;\n    }\n\n    public static function normalizeDirectory($directory)\n    {\n        return rtrim($directory, '/\\\\') . DIRECTORY_SEPARATOR;\n    }\n\n    /**\n     * Generate date form.\n     *\n     * @param int $year Year to select\n     * @param int $month Month to select\n     * @param int $day Day to select\n     *\n     * @return array $tab html data with 3 cells :['days'], ['months'], ['years']\n     */\n    public static function dateYears()\n    {\n        $tab = array();\n        for ($i = date('Y'); $i >= 1900; --$i) {\n            $tab[] = $i;\n        }\n\n        return $tab;\n    }\n\n    public static function dateDays()\n    {\n        $tab = array();\n        for ($i = 1; $i != 32; ++$i) {\n            $tab[] = $i;\n        }\n\n        return $tab;\n    }\n\n    public static function dateMonths()\n    {\n        $tab = array();\n        for ($i = 1; $i != 13; ++$i) {\n            $tab[$i] = date('F', mktime(0, 0, 0, $i, date('m'), date('Y')));\n        }\n\n        return $tab;\n    }\n\n    public static function hourGenerate($hours, $minutes, $seconds)\n    {\n        return implode(':', array($hours, $minutes, $seconds));\n    }\n\n    public static function dateFrom($date)\n    {\n        $tab = explode(' ', $date);\n        if (!isset($tab[1])) {\n            $date .= ' ' . Tools::hourGenerate(0, 0, 0);\n        }\n\n        return $date;\n    }\n\n    public static function dateTo($date)\n    {\n        $tab = explode(' ', $date);\n        if (!isset($tab[1])) {\n            $date .= ' ' . Tools::hourGenerate(23, 59, 59);\n        }\n\n        return $date;\n    }\n\n    public static function strtolower($str)\n    {\n        if (is_array($str)) {\n            return false;\n        }\n        if (function_exists('mb_strtolower')) {\n            return mb_strtolower($str, 'utf-8');\n        }\n\n        return strtolower($str);\n    }\n\n    public static function strlen($str, $encoding = 'UTF-8')\n    {\n        if (is_array($str)) {\n            return false;\n        }\n        $str = html_entity_decode($str, ENT_COMPAT, 'UTF-8');\n        if (function_exists('mb_strlen')) {\n            return mb_strlen($str, $encoding);\n        }\n\n        return strlen($str);\n    }\n\n    public static function stripslashes($string)\n    {\n        if (_PS_MAGIC_QUOTES_GPC_) {\n            $string = stripslashes($string);\n        }\n\n        return $string;\n    }\n\n    public static function strtoupper($str)\n    {\n        if (is_array($str)) {\n            return false;\n        }\n        if (function_exists('mb_strtoupper')) {\n            return mb_strtoupper($str, 'utf-8');\n        }\n\n        return strtoupper($str);\n    }\n\n    public static function substr($str, $start, $length = false, $encoding = 'utf-8')\n    {\n        if (is_array($str)) {\n            return false;\n        }\n        if (function_exists('mb_substr')) {\n            return mb_substr($str, (int) $start, ($length === false ? Tools::strlen($str) : (int) $length), $encoding);\n        }\n\n        return substr($str, $start, ($length === false ? Tools::strlen($str) : (int) $length));\n    }\n\n    public static function strpos($str, $find, $offset = 0, $encoding = 'UTF-8')\n    {\n        if (function_exists('mb_strpos')) {\n            return mb_strpos($str, $find, $offset, $encoding);\n        }\n\n        return strpos($str, $find, $offset);\n    }\n\n    public static function strrpos($str, $find, $offset = 0, $encoding = 'utf-8')\n    {\n        if (function_exists('mb_strrpos')) {\n            return mb_strrpos($str, $find, $offset, $encoding);\n        }\n\n        return strrpos($str, $find, $offset);\n    }\n\n    public static function ucfirst($str)\n    {\n        return Tools::strtoupper(Tools::substr($str, 0, 1)) . Tools::substr($str, 1);\n    }\n\n    public static function ucwords($str)\n    {\n        if (function_exists('mb_convert_case')) {\n            return mb_convert_case($str, MB_CASE_TITLE);\n        }\n\n        return ucwords(Tools::strtolower($str));\n    }\n\n    public static function orderbyPrice(&$array, $order_way)\n    {\n        foreach ($array as &$row) {\n            $row['price_tmp'] = Product::getPriceStatic($row['id_product'], true, ((isset($row['id_product_attribute']) && !empty($row['id_product_attribute'])) ? (int) $row['id_product_attribute'] : null), 2);\n        }\n\n        unset($row);\n\n        if (Tools::strtolower($order_way) == 'desc') {\n            uasort($array, 'cmpPriceDesc');\n        } else {\n            uasort($array, 'cmpPriceAsc');\n        }\n        foreach ($array as &$row) {\n            unset($row['price_tmp']);\n        }\n    }\n\n    public static function iconv($from, $to, $string)\n    {\n        if (function_exists('iconv')) {\n            return iconv($from, $to . '//TRANSLIT', str_replace('\u00a5', '&yen;', str_replace('\u00a3', '&pound;', str_replace('\u20ac', '&euro;', $string))));\n        }\n\n        return html_entity_decode(htmlentities($string, ENT_NOQUOTES, $from), ENT_NOQUOTES, $to);\n    }\n\n    public static function isEmpty($field)\n    {\n        return $field === '' || $field === null;\n    }\n\n    /**\n     * returns the rounded value of $value to specified precision, according to your configuration;.\n     *\n     * @note : PHP 5.3.0 introduce a 3rd parameter mode in round function\n     *\n     * @param float $value\n     * @param int $precision\n     *\n     * @return float\n     */\n    public static function ps_round($value, $precision = 0, $round_mode = null)\n    {\n        if ($round_mode === null) {\n            if (Tools::$round_mode == null) {\n                Tools::$round_mode = (int) Configuration::get('PS_PRICE_ROUND_MODE');\n            }\n\n            $round_mode = Tools::$round_mode;\n        }\n\n        switch ($round_mode) {\n            case PS_ROUND_UP:\n                return Tools::ceilf($value, $precision);\n            case PS_ROUND_DOWN:\n                return Tools::floorf($value, $precision);\n            case PS_ROUND_HALF_DOWN:\n            case PS_ROUND_HALF_EVEN:\n            case PS_ROUND_HALF_ODD:\n                return Tools::math_round($value, $precision, $round_mode);\n            case PS_ROUND_HALF_UP:\n            default:\n                return Tools::math_round($value, $precision, PS_ROUND_HALF_UP);\n        }\n    }\n\n    public static function math_round($value, $places, $mode = PS_ROUND_HALF_UP)\n    {\n        //If PHP_ROUND_HALF_UP exist (PHP 5.3) use it and pass correct mode value (PrestaShop define - 1)\n        if (defined('PHP_ROUND_HALF_UP')) {\n            return round($value, $places, $mode - 1);\n        }\n\n        $precision_places = 14 - floor(log10(abs($value)));\n        $f1 = 10.0 ** (float) abs($places);\n\n        /* If the decimal precision guaranteed by FP arithmetic is higher than\n        * the requested places BUT is small enough to make sure a non-zero value\n        * is returned, pre-round the result to the precision */\n        if ($precision_places > $places && $precision_places - $places < 15) {\n            $f2 = 10.0 ** (float) abs($precision_places);\n\n            if ($precision_places >= 0) {\n                $tmp_value = $value * $f2;\n            } else {\n                $tmp_value = $value / $f2;\n            }\n\n            /* preround the result (tmp_value will always be something * 1e14,\n            * thus never larger than 1e15 here) */\n            $tmp_value = Tools::round_helper($tmp_value, $mode);\n            /* now correctly move the decimal point */\n            $f2 = 10.0 ** (float) abs($places - $precision_places);\n            /* because places < precision_places */\n            $tmp_value = $tmp_value / $f2;\n        } else {\n            /* adjust the value */\n            if ($places >= 0) {\n                $tmp_value = $value * $f1;\n            } else {\n                $tmp_value = $value / $f1;\n            }\n\n            /* This value is beyond our precision, so rounding it is pointless */\n            if (abs($tmp_value) >= 1e15) {\n                return $value;\n            }\n        }\n\n        /* round the temp value */\n        $tmp_value = Tools::round_helper($tmp_value, $mode);\n\n        /* see if it makes sense to use simple division to round the value */\n        if (abs($places) < 23) {\n            if ($places > 0) {\n                $tmp_value /= $f1;\n            } else {\n                $tmp_value *= $f1;\n            }\n        }\n\n        return $tmp_value;\n    }\n\n    public static function round_helper($value, $mode)\n    {\n        if ($value >= 0.0) {\n            $tmp_value = floor($value + 0.5);\n\n            if (($mode == PS_ROUND_HALF_DOWN && $value == (-0.5 + $tmp_value)) ||\n                ($mode == PS_ROUND_HALF_EVEN && $value == (0.5 + 2 * floor($tmp_value / 2.0))) ||\n                ($mode == PS_ROUND_HALF_ODD && $value == (0.5 + 2 * floor($tmp_value / 2.0) - 1.0))) {\n                $tmp_value = $tmp_value - 1.0;\n            }\n        } else {\n            $tmp_value = ceil($value - 0.5);\n\n            if (($mode == PS_ROUND_HALF_DOWN && $value == (0.5 + $tmp_value)) ||\n                ($mode == PS_ROUND_HALF_EVEN && $value == (-0.5 + 2 * ceil($tmp_value / 2.0))) ||\n                ($mode == PS_ROUND_HALF_ODD && $value == (-0.5 + 2 * ceil($tmp_value / 2.0) + 1.0))) {\n                $tmp_value = $tmp_value + 1.0;\n            }\n        }\n\n        return $tmp_value;\n    }\n\n    /**\n     * returns the rounded value up of $value to specified precision.\n     *\n     * @param float $value\n     * @param int $precision\n     *\n     * @return float\n     */\n    public static function ceilf($value, $precision = 0)\n    {\n        $precision_factor = $precision == 0 ? 1 : 10 ** $precision;\n        $tmp = $value * $precision_factor;\n        $tmp2 = (string) $tmp;\n        // If the current value has already the desired precision\n        if (strpos($tmp2, '.') === false) {\n            return $value;\n        }\n        if ($tmp2[strlen($tmp2) - 1] == 0) {\n            return $value;\n        }\n\n        return ceil($tmp) / $precision_factor;\n    }\n\n    /**\n     * returns the rounded value down of $value to specified precision.\n     *\n     * @param float $value\n     * @param int $precision\n     *\n     * @return float\n     */\n    public static function floorf($value, $precision = 0)\n    {\n        $precision_factor = $precision == 0 ? 1 : 10 ** $precision;\n        $tmp = $value * $precision_factor;\n        $tmp2 = (string) $tmp;\n        // If the current value has already the desired precision\n        if (strpos($tmp2, '.') === false) {\n            return $value;\n        }\n        if ($tmp2[strlen($tmp2) - 1] == 0) {\n            return $value;\n        }\n\n        return floor($tmp) / $precision_factor;\n    }\n\n    /**\n     * file_exists() wrapper with cache to speedup performance.\n     *\n     * @param string $filename File name\n     *\n     * @return bool Cached result of file_exists($filename)\n     */\n    public static function file_exists_cache($filename)\n    {\n        if (!isset(self::$file_exists_cache[$filename])) {\n            self::$file_exists_cache[$filename] = file_exists($filename);\n        }\n\n        return self::$file_exists_cache[$filename];\n    }\n\n    /**\n     * file_exists() wrapper with a call to clearstatcache prior.\n     *\n     * @param string $filename File name\n     *\n     * @return bool Cached result of file_exists($filename)\n     */\n    public static function file_exists_no_cache($filename)\n    {\n        clearstatcache();\n\n        return file_exists($filename);\n    }\n\n    /**\n     * refresh a local cacert file.\n     */\n    public static function refreshCACertFile()\n    {\n        if ((time() - @filemtime(_PS_CACHE_CA_CERT_FILE_) > 1296000)) {\n            $stream_context = @stream_context_create(\n                array(\n                    'http' => array('timeout' => 3),\n                    'ssl' => array(\n                        'cafile' => CaBundle::getBundledCaBundlePath(),\n                    ),\n                )\n            );\n\n            $ca_cert_content = @file_get_contents(Tools::CACERT_LOCATION, false, $stream_context);\n            if (empty($ca_cert_content)) {\n                $ca_cert_content = @file_get_contents(CaBundle::getBundledCaBundlePath());\n            }\n\n            if (\n                preg_match('/(.*-----BEGIN CERTIFICATE-----.*-----END CERTIFICATE-----){50}$/Uims', $ca_cert_content) &&\n                substr(rtrim($ca_cert_content), -1) == '-'\n            ) {\n                file_put_contents(_PS_CACHE_CA_CERT_FILE_, $ca_cert_content);\n            }\n        }\n    }\n\n    private static function file_get_contents_curl(\n        $url,\n        $curl_timeout,\n        $opts\n    ) {\n        $content = false;\n\n        if (function_exists('curl_init')) {\n            Tools::refreshCACertFile();\n            $curl = curl_init();\n\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt($curl, CURLOPT_URL, $url);\n            curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 5);\n            curl_setopt($curl, CURLOPT_TIMEOUT, $curl_timeout);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl, CURLOPT_CAINFO, _PS_CACHE_CA_CERT_FILE_);\n            curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($curl, CURLOPT_MAXREDIRS, 5);\n\n            if ($opts != null) {\n                if (isset($opts['http']['method']) && Tools::strtolower($opts['http']['method']) == 'post') {\n                    curl_setopt($curl, CURLOPT_POST, true);\n                    if (isset($opts['http']['content'])) {\n                        parse_str($opts['http']['content'], $post_data);\n                        curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);\n                    }\n                }\n            }\n\n            $content = curl_exec($curl);\n\n            if (false === $content && _PS_MODE_DEV_) {\n                $errorMessage = sprintf('file_get_contents_curl failed to download %s : (error code %d) %s',\n                    $url,\n                    curl_errno($curl),\n                    curl_error($curl)\n                );\n\n                throw new \\Exception($errorMessage);\n            }\n\n            curl_close($curl);\n        }\n\n        return $content;\n    }\n\n    private static function file_get_contents_fopen(\n        $url,\n        $use_include_path,\n        $stream_context\n    ) {\n        $content = false;\n\n        if (in_array(ini_get('allow_url_fopen'), array('On', 'on', '1'))) {\n            $content = @file_get_contents($url, $use_include_path, $stream_context);\n        }\n\n        return $content;\n    }\n\n    /**\n     * This method allows to get the content from either a URL or a local file.\n     *\n     * @param string $url the url to get the content from\n     * @param bool $use_include_path second parameter of http://php.net/manual/en/function.file-get-contents.php\n     * @param resource $stream_context third parameter of http://php.net/manual/en/function.file-get-contents.php\n     * @param int $curl_timeout\n     * @param bool $fallback whether or not to use the fallback if the main solution fails\n     *\n     * @return bool|string false or the string content\n     */\n    public static function file_get_contents(\n        $url,\n        $use_include_path = false,\n        $stream_context = null,\n        $curl_timeout = 5,\n        $fallback = false\n    ) {\n        $is_local_file = !preg_match('/^https?:\\/\\//', $url);\n        $require_fopen = false;\n        $opts = null;\n\n        if ($stream_context) {\n            $opts = stream_context_get_options($stream_context);\n            if (isset($opts['http'])) {\n                $require_fopen = true;\n                $opts_layer = array_diff_key($opts, array('http' => null));\n                $http_layer = array_diff_key($opts['http'], array('method' => null, 'content' => null));\n                if (empty($opts_layer) && empty($http_layer)) {\n                    $require_fopen = false;\n                }\n            }\n        } elseif (!$is_local_file) {\n            $stream_context = @stream_context_create(\n                array(\n                    'http' => array('timeout' => $curl_timeout),\n                    'ssl' => array(\n                        'verify_peer' => true,\n                        'cafile' => CaBundle::getBundledCaBundlePath(),\n                    ),\n                )\n            );\n        }\n\n        if ($is_local_file) {\n            $content = @file_get_contents($url, $use_include_path, $stream_context);\n        } else {\n            if ($require_fopen) {\n                $content = Tools::file_get_contents_fopen($url, $use_include_path, $stream_context);\n            } else {\n                $content = Tools::file_get_contents_curl($url, $curl_timeout, $opts);\n                if (empty($content) && $fallback) {\n                    $content = Tools::file_get_contents_fopen($url, $use_include_path, $stream_context);\n                }\n            }\n        }\n\n        return $content;\n    }\n\n    /**\n     * Create a local file from url\n     * required because ZipArchive is unable to extract from remote files.\n     *\n     * @param string $url the remote location\n     *\n     * @return bool|string false if failure, else the local filename\n     */\n    public static function createFileFromUrl($url)\n    {\n        $remoteFile = fopen($url, 'rb');\n        if (!$remoteFile) {\n            return false;\n        }\n        $localFile = fopen(basename($url), 'wb');\n        if (!$localFile) {\n            return false;\n        }\n\n        while (!feof($remoteFile)) {\n            $data = fread($remoteFile, 1024);\n            fwrite($localFile, $data, 1024);\n        }\n\n        fclose($remoteFile);\n        fclose($localFile);\n\n        return basename($url);\n    }\n\n    public static function simplexml_load_file($url, $class_name = null)\n    {\n        $cache_id = 'Tools::simplexml_load_file' . $url;\n        if (!Cache::isStored($cache_id)) {\n            $result = @simplexml_load_string(Tools::file_get_contents($url), $class_name);\n            Cache::store($cache_id, $result);\n\n            return $result;\n        }\n\n        return Cache::retrieve($cache_id);\n    }\n\n    public static function copy($source, $destination, $stream_context = null)\n    {\n        if (null === $stream_context && !preg_match('/^https?:\\/\\//', $source)) {\n            return @copy($source, $destination);\n        }\n\n        return @file_put_contents($destination, Tools::file_get_contents($source, false, $stream_context));\n    }\n\n    /**\n     * Translates a string with underscores into camel case (e.g. first_name -> firstName).\n     *\n     * @prototype string public static function toCamelCase(string $str[, bool $capitalise_first_char = false])\n     *\n     * @param string $str Source string to convert in camel case\n     * @param bool $capitaliseFirstChar Optionnal parameters to transform the first letter in upper case\n     *\n     * @return string The string in camel case\n     */\n    public static function toCamelCase($str, $capitaliseFirstChar = false)\n    {\n        $str = Tools::strtolower($str);\n        $str = str_replace(' ', '', ucwords(str_replace(['-', '_'], ' ', $str)));\n        if (!$capitaliseFirstChar) {\n            $str = lcfirst($str);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Transform a CamelCase string to underscore_case string.\n     *\n     * @param string $string\n     *\n     * @return string\n     */\n    public static function toUnderscoreCase($string)\n    {\n        // 'CMSCategories' => 'cms_categories'\n        // 'RangePrice' => 'range_price'\n        return Tools::strtolower(trim(preg_replace('/([A-Z][a-z])/', '_$1', $string), '_'));\n    }\n\n    /**\n     * Converts SomethingLikeThis to something-like-this\n     * The name comes from Perl, we like Perl.\n     */\n    public static function camelCaseToKebabCase($string)\n    {\n        return Tools::strtolower(\n            preg_replace('/([a-z])([A-Z])/', '$1-$2', $string)\n        );\n    }\n\n    public static function getBrightness($hex)\n    {\n        if (Tools::strtolower($hex) == 'transparent') {\n            return '129';\n        }\n\n        $hex = str_replace('#', '', $hex);\n\n        if (Tools::strlen($hex) == 3) {\n            $hex .= $hex;\n        }\n\n        $r = hexdec(substr($hex, 0, 2));\n        $g = hexdec(substr($hex, 2, 2));\n        $b = hexdec(substr($hex, 4, 2));\n\n        return (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n    }\n\n    public static function parserSQL($sql)\n    {\n        if (strlen($sql) > 0) {\n            $parser = new PHPSQLParser($sql);\n\n            return $parser->parsed;\n        }\n\n        return false;\n    }\n\n    public static function replaceByAbsoluteURL($matches)\n    {\n        Tools::displayAsDeprecated('Use Media::replaceByAbsoluteURL($matches) instead');\n\n        return Media::replaceByAbsoluteURL($matches);\n    }\n\n    protected static $_cache_nb_media_servers = null;\n\n    public static function getMediaServer($filename)\n    {\n        if (self::$_cache_nb_media_servers === null && defined('_MEDIA_SERVER_1_') && defined('_MEDIA_SERVER_2_') && defined('_MEDIA_SERVER_3_')) {\n            if (_MEDIA_SERVER_1_ == '') {\n                self::$_cache_nb_media_servers = 0;\n            } elseif (_MEDIA_SERVER_2_ == '') {\n                self::$_cache_nb_media_servers = 1;\n            } elseif (_MEDIA_SERVER_3_ == '') {\n                self::$_cache_nb_media_servers = 2;\n            } else {\n                self::$_cache_nb_media_servers = 3;\n            }\n        }\n\n        if ($filename && self::$_cache_nb_media_servers && ($id_media_server = (abs(crc32($filename)) % self::$_cache_nb_media_servers + 1))) {\n            return constant('_MEDIA_SERVER_' . $id_media_server . '_');\n        }\n\n        return Tools::usingSecureMode() ? Tools::getShopDomainSsl() : Tools::getShopDomain();\n    }\n\n    /**\n     * Get domains information with physical and virtual paths\n     *\n     * e.g: [\n     *  prestashop.localhost => [\n     *    physical => \"/\",\n     *    virtual => \"\",\n     *    id_shop => \"1\",\n     *  ]\n     * ]\n     *\n     * @return array\n     */\n    public static function getDomains()\n    {\n        $domains = [];\n        foreach (ShopUrl::getShopUrls() as $shop_url) {\n            /** @var ShopUrl $shop_url */\n            if (!isset($domains[$shop_url->domain])) {\n                $domains[$shop_url->domain] = [];\n            }\n\n            $domains[$shop_url->domain][] = [\n                'physical' => $shop_url->physical_uri,\n                'virtual' => $shop_url->virtual_uri,\n                'id_shop' => $shop_url->id_shop,\n            ];\n\n            if ($shop_url->domain == $shop_url->domain_ssl) {\n                continue;\n            }\n\n            if (!isset($domains[$shop_url->domain_ssl])) {\n                $domains[$shop_url->domain_ssl] = [];\n            }\n\n            $domains[$shop_url->domain_ssl][] = [\n                'physical' => $shop_url->physical_uri,\n                'virtual' => $shop_url->virtual_uri,\n                'id_shop' => $shop_url->id_shop,\n            ];\n        }\n\n        return $domains;\n    }\n\n    public static function generateHtaccess($path = null, $rewrite_settings = null, $cache_control = null, $specific = '', $disable_multiviews = null, $medias = false, $disable_modsec = null)\n    {\n        if (defined('_PS_IN_TEST_')\n            || (defined('PS_INSTALLATION_IN_PROGRESS') && $rewrite_settings === null)\n        ) {\n            return true;\n        }\n\n        // Default values for parameters\n        if (null === $path) {\n            $path = _PS_ROOT_DIR_ . '/.htaccess';\n        }\n\n        if (null === $cache_control) {\n            $cache_control = (int) Configuration::get('PS_HTACCESS_CACHE_CONTROL');\n        }\n        if (null === $disable_multiviews) {\n            $disable_multiviews = (bool) Configuration::get('PS_HTACCESS_DISABLE_MULTIVIEWS');\n        }\n\n        if ($disable_modsec === null) {\n            $disable_modsec = (int) Configuration::get('PS_HTACCESS_DISABLE_MODSEC');\n        }\n\n        // Check current content of .htaccess and save all code outside of prestashop comments\n        $specific_before = $specific_after = '';\n        if (file_exists($path)) {\n            $content = file_get_contents($path);\n            if (preg_match('#^(.*)\\# ~~start~~.*\\# ~~end~~[^\\n]*(.*)$#s', $content, $m)) {\n                $specific_before = $m[1];\n                $specific_after = $m[2];\n            } else {\n                // For retrocompatibility\n                if (preg_match('#\\# http://www\\.prestashop\\.com - http://www\\.prestashop\\.com/forums\\s*(.*)<IfModule mod_rewrite\\.c>#si', $content, $m)) {\n                    $specific_before = $m[1];\n                } else {\n                    $specific_before = $content;\n                }\n            }\n        }\n\n        // Write .htaccess data\n        if (!$write_fd = @fopen($path, 'wb')) {\n            return false;\n        }\n        if ($specific_before) {\n            fwrite($write_fd, trim($specific_before) . \"\\n\\n\");\n        }\n\n        $domains = self::getDomains();\n\n        // Write data in .htaccess file\n        fwrite($write_fd, \"# ~~start~~ Do not remove this comment, Prestashop will keep automatically the code outside this comment when .htaccess will be generated again\\n\");\n        fwrite($write_fd, \"# .htaccess automaticaly generated by PrestaShop e-commerce open-source solution\\n\");\n        fwrite($write_fd, \"# http://www.prestashop.com - http://www.prestashop.com/forums\\n\\n\");\n\n        if ($disable_modsec) {\n            fwrite($write_fd, \"<IfModule mod_security.c>\\nSecFilterEngine Off\\nSecFilterScanPOST Off\\n</IfModule>\\n\\n\");\n        }\n\n        // RewriteEngine\n        fwrite($write_fd, \"<IfModule mod_rewrite.c>\\n\");\n\n        // Ensure HTTP_MOD_REWRITE variable is set in environment\n        fwrite($write_fd, \"<IfModule mod_env.c>\\n\");\n        fwrite($write_fd, \"SetEnv HTTP_MOD_REWRITE On\\n\");\n        fwrite($write_fd, \"</IfModule>\\n\\n\");\n\n        // Disable multiviews ?\n        if ($disable_multiviews) {\n            fwrite($write_fd, \"\\n# Disable Multiviews\\nOptions -Multiviews\\n\\n\");\n        }\n\n        fwrite($write_fd, \"RewriteEngine on\\n\");\n\n        if (!$medias && Configuration::getMultiShopValues('PS_MEDIA_SERVER_1')\n            && Configuration::getMultiShopValues('PS_MEDIA_SERVER_2')\n            && Configuration::getMultiShopValues('PS_MEDIA_SERVER_3')\n        ) {\n            $medias = array(\n                Configuration::getMultiShopValues('PS_MEDIA_SERVER_1'),\n                Configuration::getMultiShopValues('PS_MEDIA_SERVER_2'),\n                Configuration::getMultiShopValues('PS_MEDIA_SERVER_3'),\n            );\n        }\n\n        $media_domains = '';\n        foreach ($medias as $media) {\n            foreach ($media as $media_url) {\n                if ($media_url) {\n                    $media_domains .= 'RewriteCond %{HTTP_HOST} ^' . $media_url . '$ [OR]' . PHP_EOL;\n                }\n            }\n        }\n\n        if (Configuration::get('PS_WEBSERVICE_CGI_HOST')) {\n            fwrite($write_fd, \"RewriteCond %{HTTP:Authorization} ^(.*)\\nRewriteRule . - [E=HTTP_AUTHORIZATION:%1]\\n\\n\");\n        }\n\n        foreach ($domains as $domain => $list_uri) {\n            // As we use regex in the htaccess, ipv6 surrounded by brackets must be escaped\n            $domain = str_replace(['[', ']'], ['\\[', '\\]'], $domain);\n\n            foreach ($list_uri as $uri) {\n                fwrite($write_fd, PHP_EOL . PHP_EOL . '#Domain: ' . $domain . PHP_EOL);\n                if (Shop::isFeatureActive()) {\n                    fwrite($write_fd, 'RewriteCond %{HTTP_HOST} ^' . $domain . '$' . PHP_EOL);\n                }\n                fwrite($write_fd, 'RewriteRule . - [E=REWRITEBASE:' . $uri['physical'] . ']' . PHP_EOL);\n\n                // Webservice\n                fwrite($write_fd, 'RewriteRule ^api(?:/(.*))?$ %{ENV:REWRITEBASE}webservice/dispatcher.php?url=$1 [QSA,L]' . \"\\n\\n\");\n\n                if (!$rewrite_settings) {\n                    $rewrite_settings = (int) Configuration::get('PS_REWRITING_SETTINGS', null, null, (int) $uri['id_shop']);\n                }\n\n                $domain_rewrite_cond = 'RewriteCond %{HTTP_HOST} ^' . $domain . '$' . PHP_EOL;\n                // Rewrite virtual multishop uri\n                if ($uri['virtual']) {\n                    if (!$rewrite_settings) {\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^' . trim($uri['virtual'], '/') . '/?$ ' . $uri['physical'] . $uri['virtual'] . \"index.php [L,R]\\n\");\n                    } else {\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^' . trim($uri['virtual'], '/') . '$ ' . $uri['physical'] . $uri['virtual'] . \" [L,R]\\n\");\n                    }\n                    fwrite($write_fd, $media_domains);\n                    fwrite($write_fd, $domain_rewrite_cond);\n                    fwrite($write_fd, 'RewriteRule ^' . ltrim($uri['virtual'], '/') . '(.*) ' . $uri['physical'] . \"$1 [L]\\n\\n\");\n                }\n\n                if ($rewrite_settings) {\n                    // Compatibility with the old image filesystem\n                    fwrite($write_fd, \"# Images\\n\");\n                    if (Configuration::get('PS_LEGACY_IMAGES')) {\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^([a-z0-9]+)\\-([a-z0-9]+)(\\-[_a-zA-Z0-9-]*)(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/$1-$2$3$4.jpg [L]' . PHP_EOL);\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^([0-9]+)\\-([0-9]+)(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/$1-$2$3.jpg [L]' . PHP_EOL);\n                    }\n\n                    // Rewrite product images < 100 millions\n                    for ($i = 1; $i <= 8; ++$i) {\n                        $img_path = $img_name = '';\n                        for ($j = 1; $j <= $i; ++$j) {\n                            $img_path .= '$' . $j . '/';\n                            $img_name .= '$' . $j;\n                        }\n                        $img_name .= '$' . $j;\n                        fwrite($write_fd, $media_domains);\n                        fwrite($write_fd, $domain_rewrite_cond);\n                        fwrite($write_fd, 'RewriteRule ^' . str_repeat('([0-9])', $i) . '(\\-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/p/' . $img_path . $img_name . '$' . ($j + 1) . \".jpg [L]\\n\");\n                    }\n                    fwrite($write_fd, $media_domains);\n                    fwrite($write_fd, $domain_rewrite_cond);\n                    fwrite($write_fd, 'RewriteRule ^c/([0-9]+)(\\-[\\.*_a-zA-Z0-9-]*)(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/c/$1$2$3.jpg [L]' . PHP_EOL);\n                    fwrite($write_fd, $media_domains);\n                    fwrite($write_fd, $domain_rewrite_cond);\n                    fwrite($write_fd, 'RewriteRule ^c/([a-zA-Z_-]+)(-[0-9]+)?/.+\\.jpg$ %{ENV:REWRITEBASE}img/c/$1$2.jpg [L]' . PHP_EOL);\n                }\n\n                fwrite($write_fd, \"# AlphaImageLoader for IE and fancybox\\n\");\n                if (Shop::isFeatureActive()) {\n                    fwrite($write_fd, $domain_rewrite_cond);\n                }\n                fwrite($write_fd, 'RewriteRule ^images_ie/?([^/]+)\\.(jpe?g|png|gif)$ js/jquery/plugins/fancybox/images/$1.$2 [L]' . PHP_EOL);\n            }\n            // Redirections to dispatcher\n            if ($rewrite_settings) {\n                fwrite($write_fd, \"\\n# Dispatcher\\n\");\n                fwrite($write_fd, \"RewriteCond %{REQUEST_FILENAME} -s [OR]\\n\");\n                fwrite($write_fd, \"RewriteCond %{REQUEST_FILENAME} -l [OR]\\n\");\n                fwrite($write_fd, \"RewriteCond %{REQUEST_FILENAME} -d\\n\");\n                if (Shop::isFeatureActive()) {\n                    fwrite($write_fd, $domain_rewrite_cond);\n                }\n                fwrite($write_fd, \"RewriteRule ^.*$ - [NC,L]\\n\");\n                if (Shop::isFeatureActive()) {\n                    fwrite($write_fd, $domain_rewrite_cond);\n                }\n                fwrite($write_fd, \"RewriteRule ^.*\\$ %{ENV:REWRITEBASE}index.php [NC,L]\\n\");\n            }\n        }\n\n        fwrite($write_fd, \"</IfModule>\\n\\n\");\n\n        fwrite($write_fd, \"AddType application/vnd.ms-fontobject .eot\\n\");\n        fwrite($write_fd, \"AddType font/ttf .ttf\\n\");\n        fwrite($write_fd, \"AddType font/otf .otf\\n\");\n        fwrite($write_fd, \"AddType application/font-woff .woff\\n\");\n        fwrite($write_fd, \"AddType font/woff2 .woff2\\n\");\n        fwrite($write_fd, \"<IfModule mod_headers.c>\n\t<FilesMatch \\\"\\.(ttf|ttc|otf|eot|woff|woff2|svg)$\\\">\n\t\tHeader set Access-Control-Allow-Origin \\\"*\\\"\n\t</FilesMatch>\n</IfModule>\\n\\n\");\n        fwrite($write_fd, \"<Files composer.lock>\n    # Apache 2.2\n    <IfModule !mod_authz_core.c>\n        Order deny,allow\n        Deny from all\n    </IfModule>\n\n    # Apache 2.4\n    <IfModule mod_authz_core.c>\n        Require all denied\n    </IfModule>\n</Files>\n\");\n        // Cache control\n        if ($cache_control) {\n            $cache_control = \"<IfModule mod_expires.c>\n\tExpiresActive On\n\tExpiresByType image/gif \\\"access plus 1 month\\\"\n\tExpiresByType image/jpeg \\\"access plus 1 month\\\"\n\tExpiresByType image/png \\\"access plus 1 month\\\"\n\tExpiresByType text/css \\\"access plus 1 week\\\"\n\tExpiresByType text/javascript \\\"access plus 1 week\\\"\n\tExpiresByType application/javascript \\\"access plus 1 week\\\"\n\tExpiresByType application/x-javascript \\\"access plus 1 week\\\"\n\tExpiresByType image/x-icon \\\"access plus 1 year\\\"\n\tExpiresByType image/svg+xml \\\"access plus 1 year\\\"\n\tExpiresByType image/vnd.microsoft.icon \\\"access plus 1 year\\\"\n\tExpiresByType application/font-woff \\\"access plus 1 year\\\"\n\tExpiresByType application/x-font-woff \\\"access plus 1 year\\\"\n\tExpiresByType font/woff2 \\\"access plus 1 year\\\"\n\tExpiresByType application/vnd.ms-fontobject \\\"access plus 1 year\\\"\n\tExpiresByType font/opentype \\\"access plus 1 year\\\"\n\tExpiresByType font/ttf \\\"access plus 1 year\\\"\n\tExpiresByType font/otf \\\"access plus 1 year\\\"\n\tExpiresByType application/x-font-ttf \\\"access plus 1 year\\\"\n\tExpiresByType application/x-font-otf \\\"access plus 1 year\\\"\n</IfModule>\n\n<IfModule mod_headers.c>\n    Header unset Etag\n</IfModule>\nFileETag none\n<IfModule mod_deflate.c>\n    <IfModule mod_filter.c>\n        AddOutputFilterByType DEFLATE text/html text/css text/javascript application/javascript application/x-javascript font/ttf application/x-font-ttf font/otf application/x-font-otf font/opentype image/svg+xml\n    </IfModule>\n</IfModule>\\n\\n\";\n            fwrite($write_fd, $cache_control);\n        }\n\n        // In case the user hasn't rewrite mod enabled\n        fwrite($write_fd, \"#If rewrite mod isn't enabled\\n\");\n\n        // Do not remove ($domains is already iterated upper)\n        reset($domains);\n        $domain = current($domains);\n        fwrite($write_fd, 'ErrorDocument 404 ' . $domain[0]['physical'] . \"index.php?controller=404\\n\\n\");\n\n        fwrite($write_fd, '# ~~end~~ Do not remove this comment, Prestashop will keep automatically the code outside this comment when .htaccess will be generated again');\n        if ($specific_after) {\n            fwrite($write_fd, \"\\n\\n\" . trim($specific_after));\n        }\n        fclose($write_fd);\n\n        if (!defined('PS_INSTALLATION_IN_PROGRESS')) {\n            Hook::exec('actionHtaccessCreate');\n        }\n\n        return true;\n    }\n\n    public static function generateRobotsFile($executeHook = false)\n    {\n        $robots_file = _PS_ROOT_DIR_ . '/robots.txt';\n\n        if (!$write_fd = @fopen($robots_file, 'wb')) {\n            return false;\n        }\n\n        $robots_content = static::getRobotsContent();\n        $languagesIsoIds = Language::getIsoIds();\n\n        if (true === $executeHook) {\n            Hook::exec('actionAdminMetaBeforeWriteRobotsFile', array(\n                'rb_data' => &$robots_content,\n            ));\n        }\n\n        // PS Comments\n        fwrite($write_fd, \"# robots.txt automatically generated by PrestaShop e-commerce open-source solution\\n\");\n        fwrite($write_fd, \"# http://www.prestashop.com - http://www.prestashop.com/forums\\n\");\n        fwrite($write_fd, \"# This file is to prevent the crawling and indexing of certain parts\\n\");\n        fwrite($write_fd, \"# of your site by web crawlers and spiders run by sites like Yahoo!\\n\");\n        fwrite($write_fd, \"# and Google. By telling these \\\"robots\\\" where not to go on your site,\\n\");\n        fwrite($write_fd, \"# you save bandwidth and server resources.\\n\");\n        fwrite($write_fd, \"# For more information about the robots.txt standard, see:\\n\");\n        fwrite($write_fd, \"# http://www.robotstxt.org/robotstxt.html\\n\");\n\n        // User-Agent\n        fwrite($write_fd, \"User-agent: *\\n\");\n\n        // Allow Directives\n        if (count($robots_content['Allow'])) {\n            fwrite($write_fd, \"# Allow Directives\\n\");\n            foreach ($robots_content['Allow'] as $allow) {\n                fwrite($write_fd, 'Allow: ' . $allow . PHP_EOL);\n            }\n        }\n\n        // Private pages\n        if (count($robots_content['GB'])) {\n            fwrite($write_fd, \"# Private pages\\n\");\n            foreach ($robots_content['GB'] as $gb) {\n                fwrite($write_fd, 'Disallow: /*' . $gb . PHP_EOL);\n            }\n        }\n\n        // Directories\n        if (count($robots_content['Directories'])) {\n            foreach (self::getDomains() as $domain => $uriList) {\n                fwrite(\n                    $write_fd,\n                    sprintf(\n                        '# Directories for %s%s',\n                        $domain,\n                        PHP_EOL\n                    )\n                );\n                // Disallow multishop directories\n                foreach ($uriList as $uri) {\n                    foreach ($robots_content['Directories'] as $dir) {\n                        fwrite($write_fd, 'Disallow: ' . $uri['physical'] . $dir . PHP_EOL);\n                    }\n                }\n\n                // Disallow multilang directories\n                if (!empty($languagesIsoIds)) {\n                    foreach ($languagesIsoIds as $language) {\n                        foreach ($robots_content['Directories'] as $dir) {\n                            fwrite(\n                                $write_fd,\n                                sprintf(\n                                    'Disallow: /%s/%s%s',\n                                    $language['iso_code'],\n                                    $dir,\n                                    PHP_EOL\n                                )\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        // Files\n        if (count($robots_content['Files'])) {\n            fwrite($write_fd, \"# Files\\n\");\n            foreach ($robots_content['Files'] as $iso_code => $files) {\n                foreach ($files as $file) {\n                    if (!empty($languagesIsoIds)) {\n                        fwrite($write_fd, 'Disallow: /*' . $iso_code . '/' . $file . PHP_EOL);\n                    } else {\n                        fwrite($write_fd, 'Disallow: /' . $file . PHP_EOL);\n                    }\n                }\n            }\n        }\n\n        if (null === Context::getContext()) {\n            $sitemap_file = _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . 'index_sitemap.xml';\n        } else {\n            $sitemap_file = _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . Context::getContext()->shop->id . '_index_sitemap.xml';\n        }\n\n        // Sitemap\n        if (file_exists($sitemap_file) && filesize($sitemap_file)) {\n            fwrite($write_fd, \"# Sitemap\\n\");\n            $sitemap_filename = basename($sitemap_file);\n            fwrite($write_fd, 'Sitemap: ' . (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://') . $_SERVER['SERVER_NAME']\n                . __PS_BASE_URI__ . $sitemap_filename . PHP_EOL);\n        }\n\n        if (true === $executeHook) {\n            Hook::exec('actionAdminMetaAfterWriteRobotsFile', array(\n                'rb_data' => $robots_content,\n                'write_fd' => &$write_fd,\n            ));\n        }\n\n        fclose($write_fd);\n\n        return true;\n    }\n\n    public static function getRobotsContent()\n    {\n        $tab = array();\n\n        // Special allow directives\n        $tab['Allow'] = array(\n            '*/modules/*.css',\n            '*/modules/*.js',\n            '*/modules/*.png',\n            '*/modules/*.jpg',\n            '/js/jquery/*',\n        );\n\n        // Directories\n        $tab['Directories'] = array(\n            'app/', 'cache/', 'classes/', 'config/', 'controllers/',\n            'download/', 'js/', 'localization/', 'log/', 'mails/', 'modules/', 'override/',\n            'pdf/', 'src/', 'tools/', 'translations/', 'upload/', 'var/', 'vendor/', 'webservice/',\n        );\n\n        // Files\n        $disallow_controllers = array(\n            'addresses', 'address', 'authentication', 'cart', 'discount', 'footer',\n            'get-file', 'header', 'history', 'identity', 'images.inc', 'init', 'my-account', 'order',\n            'order-slip', 'order-detail', 'order-follow', 'order-return', 'order-confirmation', 'pagination', 'password',\n            'pdf-invoice', 'pdf-order-return', 'pdf-order-slip', 'product-sort', 'search', 'statistics', 'attachment', 'guest-tracking',\n        );\n\n        // Rewrite files\n        $tab['Files'] = array();\n        if (Configuration::get('PS_REWRITING_SETTINGS')) {\n            $sql = 'SELECT DISTINCT ml.url_rewrite, l.iso_code\n                FROM ' . _DB_PREFIX_ . 'meta m\n                INNER JOIN ' . _DB_PREFIX_ . 'meta_lang ml ON ml.id_meta = m.id_meta\n                INNER JOIN ' . _DB_PREFIX_ . 'lang l ON l.id_lang = ml.id_lang\n                WHERE l.active = 1 AND m.page IN (\\'' . implode('\\', \\'', $disallow_controllers) . '\\')';\n            if ($results = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($sql)) {\n                foreach ($results as $row) {\n                    $tab['Files'][$row['iso_code']][] = $row['url_rewrite'];\n                }\n            }\n        }\n\n        $tab['GB'] = array(\n            '?order=', '?tag=', '?id_currency=', '?search_query=', '?back=', '?n=',\n            '&order=', '&tag=', '&id_currency=', '&search_query=', '&back=', '&n=',\n        );\n\n        foreach ($disallow_controllers as $controller) {\n            $tab['GB'][] = 'controller=' . $controller;\n        }\n\n        return $tab;\n    }\n\n    public static function generateIndex()\n    {\n        PrestaShopAutoload::getInstance()->generateIndex();\n    }\n\n    public static function getDefaultIndexContent()\n    {\n        return '<?php\n/**\n * 2007-' . date('Y') . ' PrestaShop\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-' . date('Y') . ' PrestaShop SA\n * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n\nheader(\"Location: ../\");\nexit;\n';\n    }\n\n    /**\n     * Return the directory list from the given $path.\n     *\n     * @param string $path\n     *\n     * @return array\n     */\n    public static function getDirectories($path)\n    {\n        if (function_exists('glob')) {\n            return self::getDirectoriesWithGlob($path);\n        }\n\n        return self::getDirectoriesWithReaddir($path);\n    }\n\n    /**\n     * Return the directory list from the given $path using php glob function.\n     *\n     * @param string $path\n     *\n     * @return array\n     */\n    public static function getDirectoriesWithGlob($path)\n    {\n        $directoryList = glob($path . '/*', GLOB_ONLYDIR | GLOB_NOSORT);\n        array_walk(\n            $directoryList,\n            function (&$absolutePath, $key) {\n                $absolutePath = substr($absolutePath, strrpos($absolutePath, '/') + 1);\n            }\n        );\n\n        return $directoryList;\n    }\n\n    /**\n     * Return the directory list from the given $path using php readdir function.\n     *\n     * @param string $path\n     *\n     * @return array\n     */\n    public static function getDirectoriesWithReaddir($path)\n    {\n        $directoryList = [];\n        $dh = @opendir($path);\n        if ($dh) {\n            while (($file = @readdir($dh)) !== false) {\n                if (is_dir($path . DIRECTORY_SEPARATOR . $file) && $file[0] != '.') {\n                    $directoryList[] = $file;\n                }\n            }\n            @closedir($dh);\n        }\n\n        return $directoryList;\n    }\n\n    /**\n     * @deprecated Deprecated since 1.7.0\n     * Use json_decode instead\n     * jsonDecode convert json string to php array / object\n     *\n     * @param string $data\n     * @param bool $assoc (since 1.4.2.4) if true, convert to associativ array\n     *\n     * @return array\n     */\n    public static function jsonDecode($data, $assoc = false, $depth = 512, $options = 0)\n    {\n        return json_decode($data, $assoc, $depth, $options);\n    }\n\n    /**\n     * @deprecated Deprecated since 1.7.0\n     * Use json_encode instead\n     * Convert an array to json string\n     *\n     * @param array $data\n     *\n     * @return string json\n     */\n    public static function jsonEncode($data, $options = 0, $depth = 512)\n    {\n        if (PHP_VERSION_ID < 50500) { /* PHP version < 5.5.0 */\n            return json_encode($data, $options);\n        }\n\n        return json_encode($data, $options, $depth);\n    }\n\n    /**\n     * Display a warning message indicating that the method is deprecated.\n     */\n    public static function displayAsDeprecated($message = null)\n    {\n        $backtrace = debug_backtrace();\n        $callee = next($backtrace);\n        $class = isset($callee['class']) ? $callee['class'] : null;\n\n        if ($message === null) {\n            $message = 'The function ' . $callee['function'] . ' (Line ' . $callee['line'] . ') is deprecated and will be removed in the next major version.';\n        }\n\n        $error = 'Function <b>' . $callee['function'] . '()</b> is deprecated in <b>' . $callee['file'] . '</b> on line <b>' . $callee['line'] . '</b><br />';\n\n        Tools::throwDeprecated($error, $message, $class);\n    }\n\n    /**\n     * Display a warning message indicating that the parameter is deprecated.\n     */\n    public static function displayParameterAsDeprecated($parameter)\n    {\n        $backtrace = debug_backtrace();\n        $callee = next($backtrace);\n        $error = 'Parameter <b>' . $parameter . '</b> in function <b>' . (isset($callee['function']) ? $callee['function'] : '') . '()</b> is deprecated in <b>' . $callee['file'] . '</b> on line <b>' . (isset($callee['line']) ? $callee['line'] : '(undefined)') . '</b><br />';\n        $message = 'The parameter ' . $parameter . ' in function ' . $callee['function'] . ' (Line ' . (isset($callee['line']) ? $callee['line'] : 'undefined') . ') is deprecated and will be removed in the next major version.';\n        $class = isset($callee['class']) ? $callee['class'] : null;\n\n        Tools::throwDeprecated($error, $message, $class);\n    }\n\n    public static function displayFileAsDeprecated()\n    {\n        $backtrace = debug_backtrace();\n        $callee = current($backtrace);\n        $error = 'File <b>' . $callee['file'] . '</b> is deprecated<br />';\n        $message = 'The file ' . $callee['file'] . ' is deprecated and will be removed in the next major version.';\n        $class = isset($callee['class']) ? $callee['class'] : null;\n\n        Tools::throwDeprecated($error, $message, $class);\n    }\n\n    protected static function throwDeprecated($error, $message, $class)\n    {\n        if (_PS_DISPLAY_COMPATIBILITY_WARNING_) {\n            @trigger_error($error, E_USER_DEPRECATED);\n            PrestaShopLogger::addLog($message, 3, $class);\n        }\n    }\n\n    public static function enableCache($level = 1, Context $context = null)\n    {\n        if (!$context) {\n            $context = Context::getContext();\n        }\n        $smarty = $context->smarty;\n        if (!Configuration::get('PS_SMARTY_CACHE')) {\n            return;\n        }\n        if ($smarty->force_compile == 0 && $smarty->caching == $level) {\n            return;\n        }\n        self::$_forceCompile = (int) $smarty->force_compile;\n        self::$_caching = (int) $smarty->caching;\n        $smarty->force_compile = 0;\n        $smarty->caching = (int) $level;\n        $smarty->cache_lifetime = 31536000; // 1 Year\n    }\n\n    public static function restoreCacheSettings(Context $context = null)\n    {\n        if (!$context) {\n            $context = Context::getContext();\n        }\n\n        if (isset(self::$_forceCompile)) {\n            $context->smarty->force_compile = (int) self::$_forceCompile;\n        }\n        if (isset(self::$_caching)) {\n            $context->smarty->caching = (int) self::$_caching;\n        }\n    }\n\n    public static function isCallable($function)\n    {\n        $disabled = explode(',', ini_get('disable_functions'));\n\n        return !in_array($function, $disabled) && is_callable($function);\n    }\n\n    public static function pRegexp($s, $delim)\n    {\n        $s = str_replace($delim, '\\\\' . $delim, $s);\n        foreach (array('?', '[', ']', '(', ')', '{', '}', '-', '.', '+', '*', '^', '$', '`', '\"', '%') as $char) {\n            $s = str_replace($char, '\\\\' . $char, $s);\n        }\n\n        return $s;\n    }\n\n    public static function str_replace_once($needle, $replace, $haystack)\n    {\n        $pos = false;\n        if ($needle) {\n            $pos = strpos($haystack, $needle);\n        }\n        if ($pos === false) {\n            return $haystack;\n        }\n\n        return substr_replace($haystack, $replace, $pos, strlen($needle));\n    }\n\n    /**\n     * @desc identify the version of php\n     *\n     * @return string\n     */\n    public static function checkPhpVersion()\n    {\n        $version = null;\n\n        if (defined('PHP_VERSION')) {\n            $version = PHP_VERSION;\n        } else {\n            $version = phpversion('');\n        }\n\n        //Case management system of ubuntu, php version return 5.2.4-2ubuntu5.2\n        if (strpos($version, '-') !== false) {\n            $version = substr($version, 0, strpos($version, '-'));\n        }\n\n        return $version;\n    }\n\n    /**\n     * @desc try to open a zip file in order to check if it's valid\n     *\n     * @return bool success\n     */\n    public static function ZipTest($from_file)\n    {\n        $zip = new ZipArchive();\n\n        return $zip->open($from_file, ZipArchive::CHECKCONS) === true;\n    }\n\n    /**\n     * @deprecated Deprecated since 1.7.0\n     *\n     * @return bool\n     */\n    public static function getSafeModeStatus()\n    {\n        return false;\n    }\n\n    /**\n     * @desc extract a zip file to the given directory\n     *\n     * @return bool success\n     */\n    public static function ZipExtract($from_file, $to_dir)\n    {\n        if (!file_exists($to_dir)) {\n            mkdir($to_dir, PsFileSystem::DEFAULT_MODE_FOLDER);\n        }\n\n        $zip = new ZipArchive();\n        if ($zip->open($from_file) === true && $zip->extractTo($to_dir) && $zip->close()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static function chmodr($path, $filemode)\n    {\n        if (!is_dir($path)) {\n            return @chmod($path, $filemode);\n        }\n        $dh = opendir($path);\n        while (($file = readdir($dh)) !== false) {\n            if ($file != '.' && $file != '..') {\n                $fullpath = $path . '/' . $file;\n                if (is_link($fullpath)) {\n                    return false;\n                } elseif (!is_dir($fullpath) && !@chmod($fullpath, $filemode)) {\n                    return false;\n                } elseif (!Tools::chmodr($fullpath, $filemode)) {\n                    return false;\n                }\n            }\n        }\n        closedir($dh);\n        if (@chmod($path, $filemode)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get products order field name for queries.\n     *\n     * @param string $type by|way\n     * @param string $value If no index given, use default order from admin -> pref -> products\n     * @param bool|\\bool(false)|string $prefix\n     *\n     * @return string Order by sql clause\n     */\n    public static function getProductsOrder($type, $value = null, $prefix = false)\n    {\n        switch ($type) {\n            case 'by':\n                $list = array(0 => 'name', 1 => 'price', 2 => 'date_add', 3 => 'date_upd', 4 => 'position', 5 => 'manufacturer_name', 6 => 'quantity', 7 => 'reference');\n                $value = (null === $value || $value === false || $value === '') ? (int) Configuration::get('PS_PRODUCTS_ORDER_BY') : $value;\n                $value = (isset($list[$value])) ? $list[$value] : ((in_array($value, $list)) ? $value : 'position');\n                $order_by_prefix = '';\n                if ($prefix) {\n                    if ($value == 'id_product' || $value == 'date_add' || $value == 'date_upd' || $value == 'price') {\n                        $order_by_prefix = 'p.';\n                    } elseif ($value == 'name') {\n                        $order_by_prefix = 'pl.';\n                    } elseif ($value == 'manufacturer_name' && $prefix) {\n                        $order_by_prefix = 'm.';\n                        $value = 'name';\n                    } elseif ($value == 'position' || empty($value)) {\n                        $order_by_prefix = 'cp.';\n                    }\n                }\n\n                return $order_by_prefix . $value;\n\n            break;\n\n            case 'way':\n                $value = (null === $value || $value === false || $value === '') ? (int) Configuration::get('PS_PRODUCTS_ORDER_WAY') : $value;\n                $list = array(0 => 'asc', 1 => 'desc');\n\n                return (isset($list[$value])) ? $list[$value] : ((in_array($value, $list)) ? $value : 'asc');\n\n            break;\n        }\n    }\n\n    /**\n     * Convert a shorthand byte value from a PHP configuration directive to an integer value.\n     *\n     * @param string $value value to convert\n     *\n     * @return int\n     */\n    public static function convertBytes($value)\n    {\n        if (is_numeric($value)) {\n            return $value;\n        } else {\n            $value_length = strlen($value);\n            $qty = (int) substr($value, 0, $value_length - 1);\n            $unit = Tools::strtolower(substr($value, $value_length - 1));\n            switch ($unit) {\n                case 'k':\n                    $qty *= 1024;\n\n                    break;\n                case 'm':\n                    $qty *= 1048576;\n\n                    break;\n                case 'g':\n                    $qty *= 1073741824;\n\n                    break;\n            }\n\n            return $qty;\n        }\n    }\n\n    /**\n     * @deprecated as of 1.5 use Controller::getController('PageNotFoundController')->run();\n     */\n    public static function display404Error()\n    {\n        header('HTTP/1.1 404 Not Found');\n        header('Status: 404 Not Found');\n        include dirname(__FILE__) . '/../404.php';\n        die;\n    }\n\n    /**\n     * Concat $begin and $end, add ? or & between strings.\n     *\n     * @since 1.5.0\n     *\n     * @param string $begin\n     * @param string $end\n     *\n     * @return string\n     */\n    public static function url($begin, $end)\n    {\n        return $begin . ((strpos($begin, '?') !== false) ? '&' : '?') . $end;\n    }\n\n    /**\n     * Display error and dies or silently log the error.\n     *\n     * @param string $msg\n     * @param bool $die\n     *\n     * @return bool success of logging\n     */\n    public static function dieOrLog($msg, $die = true)\n    {\n        if ($die || (defined('_PS_MODE_DEV_') && _PS_MODE_DEV_)) {\n            header('HTTP/1.1 500 Internal Server Error', true, 500);\n            die($msg);\n        }\n\n        return PrestaShopLogger::addLog($msg);\n    }\n\n    /**\n     * Convert \\n and \\r\\n and \\r to <br />.\n     *\n     * @param string $string String to transform\n     *\n     * @return string New string\n     */\n    public static function nl2br($str)\n    {\n        return str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\", AddressFormat::FORMAT_NEW_LINE, PHP_EOL), '<br />', $str);\n    }\n\n    /**\n     * Clear cache for Smarty.\n     *\n     * @param Smarty $smarty\n     */\n    public static function clearCache($smarty = null, $tpl = false, $cache_id = null, $compile_id = null)\n    {\n        if ($smarty === null) {\n            $smarty = Context::getContext()->smarty;\n        }\n\n        if ($smarty === null) {\n            return;\n        }\n\n        if (!$tpl && $cache_id === null && $compile_id === null) {\n            return $smarty->clearAllCache();\n        }\n\n        $ret = $smarty->clearCache($tpl, $cache_id, $compile_id);\n\n        Hook::exec('actionClearCache');\n\n        return $ret;\n    }\n\n    /**\n     * Clear compile for Smarty.\n     */\n    public static function clearCompile($smarty = null)\n    {\n        if ($smarty === null) {\n            $smarty = Context::getContext()->smarty;\n        }\n\n        if ($smarty === null) {\n            return;\n        }\n\n        $ret = $smarty->clearCompiledTemplate();\n\n        Hook::exec('actionClearCompileCache');\n\n        return $ret;\n    }\n\n    /**\n     * Clear Smarty cache and compile folders.\n     */\n    public static function clearSmartyCache()\n    {\n        $smarty = Context::getContext()->smarty;\n        Tools::clearCache($smarty);\n        Tools::clearCompile($smarty);\n    }\n\n    /**\n     * Clear Symfony cache.\n     */\n    public static function clearSf2Cache($env = null)\n    {\n        if (null === $env) {\n            $env = _PS_MODE_DEV_ ? 'dev' : 'prod';\n        }\n\n        $dir = _PS_ROOT_DIR_ . '/var/cache/' . $env . '/';\n\n        register_shutdown_function(function () use ($dir) {\n            $fs = new Filesystem();\n            $fs->remove($dir);\n            Hook::exec('actionClearSf2Cache');\n        });\n    }\n\n    /**\n     * Clear both Smarty and Symfony cache.\n     */\n    public static function clearAllCache()\n    {\n        Tools::clearSmartyCache();\n        Tools::clearSf2Cache();\n    }\n\n    public static function clearColorListCache($id_product = false)\n    {\n        // Change template dir if called from the BackOffice\n        $current_template_dir = Context::getContext()->smarty->getTemplateDir();\n        Context::getContext()->smarty->setTemplateDir(_PS_THEME_DIR_);\n        Tools::clearCache(null, _PS_THEME_DIR_ . 'product-list-colors.tpl', Product::getColorsListCacheId((int) $id_product, false));\n        Context::getContext()->smarty->setTemplateDir($current_template_dir);\n    }\n\n    /**\n     * getMemoryLimit allow to get the memory limit in octet.\n     *\n     * @since 1.4.5.0\n     *\n     * @return int the memory limit value in octet\n     */\n    public static function getMemoryLimit()\n    {\n        $memory_limit = @ini_get('memory_limit');\n\n        return Tools::getOctets($memory_limit);\n    }\n\n    /**\n     * getOctet allow to gets the value of a configuration option in octet.\n     *\n     * @since 1.5.0\n     *\n     * @return int the value of a configuration option in octet\n     */\n    public static function getOctets($option)\n    {\n        if (preg_match('/[0-9]+k/i', $option)) {\n            return 1024 * (int) $option;\n        }\n\n        if (preg_match('/[0-9]+m/i', $option)) {\n            return 1024 * 1024 * (int) $option;\n        }\n\n        if (preg_match('/[0-9]+g/i', $option)) {\n            return 1024 * 1024 * 1024 * (int) $option;\n        }\n\n        return $option;\n    }\n\n    /**\n     * @return bool true if the server use 64bit arch\n     */\n    public static function isX86_64arch()\n    {\n        return PHP_INT_MAX == '9223372036854775807';\n    }\n\n    /**\n     * @return bool true if php-cli is used\n     */\n    public static function isPHPCLI()\n    {\n        return defined('STDIN') || (Tools::strtolower(PHP_SAPI) == 'cli' && (!isset($_SERVER['REMOTE_ADDR']) || empty($_SERVER['REMOTE_ADDR'])));\n    }\n\n    public static function argvToGET($argc, $argv)\n    {\n        if ($argc <= 1) {\n            return;\n        }\n\n        // get the first argument and parse it like a query string\n        parse_str($argv[1], $args);\n        if (!is_array($args) || !count($args)) {\n            return;\n        }\n        $_GET = array_merge($args, $_GET);\n        $_SERVER['QUERY_STRING'] = $argv[1];\n    }\n\n    /**\n     * Get max file upload size considering server settings and optional max value.\n     *\n     * @param int $max_size optional max file size\n     *\n     * @return int max file size in bytes\n     */\n    public static function getMaxUploadSize($max_size = 0)\n    {\n        $values = array(Tools::convertBytes(ini_get('upload_max_filesize')));\n\n        if ($max_size > 0) {\n            $values[] = $max_size;\n        }\n\n        $post_max_size = Tools::convertBytes(ini_get('post_max_size'));\n        if ($post_max_size > 0) {\n            $values[] = $post_max_size;\n        }\n\n        return min($values);\n    }\n\n    /**\n     * apacheModExists return true if the apache module $name is loaded.\n     *\n     * @TODO move this method in class Information (when it will exist)\n     *\n     * Notes: This method requires either apache_get_modules or phpinfo()\n     * to be available. With CGI mod, we cannot get php modules\n     *\n     * @param string $name module name\n     *\n     * @return bool true if exists\n     *\n     * @since 1.4.5.0\n     */\n    public static function apacheModExists($name)\n    {\n        if (function_exists('apache_get_modules')) {\n            static $apache_module_list = null;\n\n            if (!is_array($apache_module_list)) {\n                $apache_module_list = apache_get_modules();\n            }\n\n            // we need strpos (example, evasive can be evasive20)\n            foreach ($apache_module_list as $module) {\n                if (strpos($module, $name) !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Fix native uasort see: http://php.net/manual/en/function.uasort.php#114535.\n     *\n     * @param $array\n     * @param $cmp_function\n     */\n    public static function uasort(&$array, $cmp_function)\n    {\n        if (count($array) < 2) {\n            return;\n        }\n        $halfway = count($array) / 2;\n        $array1 = array_slice($array, 0, $halfway, true);\n        $array2 = array_slice($array, $halfway, null, true);\n\n        self::uasort($array1, $cmp_function);\n        self::uasort($array2, $cmp_function);\n        if (call_user_func($cmp_function, end($array1), reset($array2)) < 1) {\n            $array = $array1 + $array2;\n\n            return;\n        }\n        $array = array();\n        reset($array1);\n        reset($array2);\n        while (current($array1) && current($array2)) {\n            if (call_user_func($cmp_function, current($array1), current($array2)) < 1) {\n                $array[key($array1)] = current($array1);\n                next($array1);\n            } else {\n                $array[key($array2)] = current($array2);\n                next($array2);\n            }\n        }\n        while (current($array1)) {\n            $array[key($array1)] = current($array1);\n            next($array1);\n        }\n        while (current($array2)) {\n            $array[key($array2)] = current($array2);\n            next($array2);\n        }\n    }\n\n    /**\n     * Copy the folder $src into $dst, $dst is created if it do not exist.\n     *\n     * @param $src\n     * @param $dst\n     * @param bool $del if true, delete the file after copy\n     */\n    public static function recurseCopy($src, $dst, $del = false)\n    {\n        if (!Tools::file_exists_cache($src)) {\n            return false;\n        }\n        $dir = opendir($src);\n\n        if (!Tools::file_exists_cache($dst)) {\n            mkdir($dst);\n        }\n        while (false !== ($file = readdir($dir))) {\n            if (($file != '.') && ($file != '..')) {\n                if (is_dir($src . DIRECTORY_SEPARATOR . $file)) {\n                    self::recurseCopy($src . DIRECTORY_SEPARATOR . $file, $dst . DIRECTORY_SEPARATOR . $file, $del);\n                } else {\n                    copy($src . DIRECTORY_SEPARATOR . $file, $dst . DIRECTORY_SEPARATOR . $file);\n                    if ($del && is_writable($src . DIRECTORY_SEPARATOR . $file)) {\n                        unlink($src . DIRECTORY_SEPARATOR . $file);\n                    }\n                }\n            }\n        }\n        closedir($dir);\n        if ($del && is_writable($src)) {\n            rmdir($src);\n        }\n    }\n\n    /**\n     * @param string $path Path to scan\n     * @param string $ext Extention to filter files\n     * @param string $dir Add this to prefix output for example /path/dir/*\n     *\n     * @return array List of file found\n     *\n     * @since 1.5.0\n     */\n    public static function scandir($path, $ext = 'php', $dir = '', $recursive = false)\n    {\n        $path = rtrim(rtrim($path, '\\\\'), '/') . '/';\n        $real_path = rtrim(rtrim($path . $dir, '\\\\'), '/') . '/';\n        $files = scandir($real_path, SCANDIR_SORT_NONE);\n        if (!$files) {\n            return array();\n        }\n\n        $filtered_files = array();\n\n        $real_ext = false;\n        if (!empty($ext)) {\n            $real_ext = '.' . $ext;\n        }\n        $real_ext_length = strlen($real_ext);\n\n        $subdir = ($dir) ? $dir . '/' : '';\n        foreach ($files as $file) {\n            if (!$real_ext || (strpos($file, $real_ext) && strpos($file, $real_ext) == (strlen($file) - $real_ext_length))) {\n                $filtered_files[] = $subdir . $file;\n            }\n\n            if ($recursive && $file[0] != '.' && is_dir($real_path . $file)) {\n                foreach (Tools::scandir($path, $ext, $subdir . $file, $recursive) as $subfile) {\n                    $filtered_files[] = $subfile;\n                }\n            }\n        }\n\n        return $filtered_files;\n    }\n\n    /**\n     * Align version sent and use internal function.\n     *\n     * @param $v1\n     * @param $v2\n     * @param string $operator\n     *\n     * @return mixed\n     */\n    public static function version_compare($v1, $v2, $operator = '<')\n    {\n        Tools::alignVersionNumber($v1, $v2);\n\n        return version_compare($v1, $v2, $operator);\n    }\n\n    /**\n     * Align 2 version with the same number of sub version\n     * version_compare will work better for its comparison :)\n     * (Means: '1.8' to '1.9.3' will change '1.8' to '1.8.0').\n     *\n     * @param $v1\n     * @param $v2\n     */\n    public static function alignVersionNumber(&$v1, &$v2)\n    {\n        $len1 = count(explode('.', trim($v1, '.')));\n        $len2 = count(explode('.', trim($v2, '.')));\n        $len = 0;\n        $str = '';\n\n        if ($len1 > $len2) {\n            $len = $len1 - $len2;\n            $str = &$v2;\n        } elseif ($len2 > $len1) {\n            $len = $len2 - $len1;\n            $str = &$v1;\n        }\n\n        for ($len; $len > 0; --$len) {\n            $str .= '.0';\n        }\n    }\n\n    public static function modRewriteActive()\n    {\n        if (Tools::apacheModExists('mod_rewrite')) {\n            return true;\n        }\n        if ((isset($_SERVER['HTTP_MOD_REWRITE']) && Tools::strtolower($_SERVER['HTTP_MOD_REWRITE']) == 'on') || Tools::strtolower(getenv('HTTP_MOD_REWRITE')) == 'on') {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static function unSerialize($serialized, $object = false)\n    {\n        if (is_string($serialized) && (strpos($serialized, 'O:') === false || !preg_match('/(^|;|{|})O:[0-9]+:\"/', $serialized)) && !$object || $object) {\n            return @unserialize($serialized);\n        }\n\n        return false;\n    }\n\n    /**\n     * Reproduce array_unique working before php version 5.2.9.\n     *\n     * @param array $array\n     *\n     * @return array\n     */\n    public static function arrayUnique($array)\n    {\n        if (version_compare(PHP_VERSION, '5.2.9', '<')) {\n            return array_unique($array);\n        } else {\n            return array_unique($array, SORT_REGULAR);\n        }\n    }\n\n    /**\n     * Delete unicode class from regular expression patterns.\n     *\n     * @param string $pattern\n     *\n     * @return string pattern\n     */\n    public static function cleanNonUnicodeSupport($pattern)\n    {\n        if (!defined('PREG_BAD_UTF8_OFFSET')) {\n            return $pattern;\n        }\n\n        return preg_replace('/\\\\\\[px]\\{[a-z]{1,2}\\}|(\\/[a-z]*)u([a-z]*)$/i', '$1$2', $pattern);\n    }\n\n    protected static $is_addons_up = true;\n\n    public static function addonsRequest($request, $params = array())\n    {\n        if (!self::$is_addons_up) {\n            return false;\n        }\n\n        $post_query_data = array(\n            'version' => isset($params['version']) ? $params['version'] : _PS_VERSION_,\n            'iso_lang' => Tools::strtolower(isset($params['iso_lang']) ? $params['iso_lang'] : Context::getContext()->language->iso_code),\n            'iso_code' => Tools::strtolower(isset($params['iso_country']) ? $params['iso_country'] : Country::getIsoById(Configuration::get('PS_COUNTRY_DEFAULT'))),\n            'shop_url' => isset($params['shop_url']) ? $params['shop_url'] : Tools::getShopDomain(),\n            'mail' => isset($params['email']) ? $params['email'] : Configuration::get('PS_SHOP_EMAIL'),\n            'format' => isset($params['format']) ? $params['format'] : 'xml',\n        );\n        if (isset($params['source'])) {\n            $post_query_data['source'] = $params['source'];\n        }\n\n        $post_data = http_build_query($post_query_data);\n\n        $end_point = 'api.addons.prestashop.com';\n\n        switch ($request) {\n            case 'native':\n                $post_data .= '&method=listing&action=native';\n\n                break;\n            case 'partner':\n                $post_data .= '&method=listing&action=partner';\n\n                break;\n            case 'service':\n                $post_data .= '&method=listing&action=service';\n\n                break;\n            case 'native_all':\n                $post_data .= '&method=listing&action=native&iso_code=all';\n\n                break;\n            case 'must-have':\n                $post_data .= '&method=listing&action=must-have';\n\n                break;\n            case 'must-have-themes':\n                $post_data .= '&method=listing&action=must-have-themes';\n\n                break;\n            case 'customer':\n                $post_data .= '&method=listing&action=customer&username=' . urlencode(trim(Context::getContext()->cookie->username_addons))\n                    . '&password=' . urlencode(trim(Context::getContext()->cookie->password_addons));\n\n                break;\n            case 'customer_themes':\n                $post_data .= '&method=listing&action=customer-themes&username=' . urlencode(trim(Context::getContext()->cookie->username_addons))\n                    . '&password=' . urlencode(trim(Context::getContext()->cookie->password_addons));\n\n                break;\n            case 'check_customer':\n                $post_data .= '&method=check_customer&username=' . urlencode($params['username_addons']) . '&password=' . urlencode($params['password_addons']);\n\n                break;\n            case 'check_module':\n                $post_data .= '&method=check&module_name=' . urlencode($params['module_name']) . '&module_key=' . urlencode($params['module_key']);\n\n                break;\n            case 'module':\n                $post_data .= '&method=module&id_module=' . urlencode($params['id_module']);\n                if (isset($params['username_addons'], $params['password_addons'])) {\n                    $post_data .= '&username=' . urlencode($params['username_addons']) . '&password=' . urlencode($params['password_addons']);\n                }\n\n                break;\n            case 'hosted_module':\n                $post_data .= '&method=module&id_module=' . urlencode((int) $params['id_module']) . '&username=' . urlencode($params['hosted_email'])\n                    . '&password=' . urlencode($params['password_addons'])\n                    . '&shop_url=' . urlencode(isset($params['shop_url']) ? $params['shop_url'] : Tools::getShopDomain())\n                    . '&mail=' . urlencode(isset($params['email']) ? $params['email'] : Configuration::get('PS_SHOP_EMAIL'));\n\n                break;\n            case 'install-modules':\n                $post_data .= '&method=listing&action=install-modules';\n                $post_data .= defined('_PS_HOST_MODE_') ? '-od' : '';\n\n                break;\n            default:\n                return false;\n        }\n\n        $context = stream_context_create(array(\n            'http' => array(\n                'method' => 'POST',\n                'content' => $post_data,\n                'header' => 'Content-type: application/x-www-form-urlencoded',\n                'timeout' => 5,\n            ),\n        ));\n\n        if ($content = Tools::file_get_contents('https://' . $end_point, false, $context)) {\n            return $content;\n        }\n\n        self::$is_addons_up = false;\n\n        return false;\n    }\n\n    /**\n     * Returns an array containing information about\n     * HTTP file upload variable ($_FILES).\n     *\n     * @param string $input File upload field name\n     * @param bool $return_content If true, returns uploaded file contents\n     *\n     * @return array|null\n     */\n    public static function fileAttachment($input = 'fileUpload', $return_content = true)\n    {\n        $file_attachment = null;\n        if (isset($_FILES[$input]['name']) && !empty($_FILES[$input]['name']) && !empty($_FILES[$input]['tmp_name'])) {\n            $file_attachment['rename'] = uniqid() . Tools::strtolower(substr($_FILES[$input]['name'], -5));\n            if ($return_content) {\n                $file_attachment['content'] = file_get_contents($_FILES[$input]['tmp_name']);\n            }\n            $file_attachment['tmp_name'] = $_FILES[$input]['tmp_name'];\n            $file_attachment['name'] = $_FILES[$input]['name'];\n            $file_attachment['mime'] = $_FILES[$input]['type'];\n            $file_attachment['error'] = $_FILES[$input]['error'];\n            $file_attachment['size'] = $_FILES[$input]['size'];\n        }\n\n        return $file_attachment;\n    }\n\n    public static function changeFileMTime($file_name)\n    {\n        @touch($file_name);\n    }\n\n    public static function waitUntilFileIsModified($file_name, $timeout = 180)\n    {\n        @ini_set('max_execution_time', $timeout);\n        if (($time_limit = ini_get('max_execution_time')) === null) {\n            $time_limit = 30;\n        }\n\n        $time_limit -= 5;\n        $start_time = microtime(true);\n        $last_modified = @filemtime($file_name);\n\n        while (true) {\n            if (((microtime(true) - $start_time) > $time_limit) || @filemtime($file_name) > $last_modified) {\n                break;\n            }\n            clearstatcache();\n            usleep(300);\n        }\n    }\n\n    /**\n     * Delete a substring from another one starting from the right.\n     *\n     * @param string $str\n     * @param string $str_search\n     *\n     * @return string\n     */\n    public static function rtrimString($str, $str_search)\n    {\n        $length_str = strlen($str_search);\n        if (strlen($str) >= $length_str && substr($str, -$length_str) == $str_search) {\n            $str = substr($str, 0, -$length_str);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Format a number into a human readable format\n     * e.g. 24962496 => 23.81M.\n     *\n     * @param $size\n     * @param int $precision\n     *\n     * @return string\n     */\n    public static function formatBytes($size, $precision = 2)\n    {\n        if (!$size) {\n            return '0';\n        }\n        $base = log($size) / log(1024);\n        $suffixes = array('', 'k', 'M', 'G', 'T');\n\n        return round(1024 ** ($base - floor($base)), $precision) . $suffixes[floor($base)];\n    }\n\n    public static function boolVal($value)\n    {\n        if (empty($value)) {\n            $value = false;\n        }\n\n        return (bool) $value;\n    }\n\n    public static function getUserPlatform()\n    {\n        if (isset(self::$_user_plateform)) {\n            return self::$_user_plateform;\n        }\n\n        $user_agent = $_SERVER['HTTP_USER_AGENT'];\n        self::$_user_plateform = 'unknown';\n\n        if (preg_match('/linux/i', $user_agent)) {\n            self::$_user_plateform = 'Linux';\n        } elseif (preg_match('/macintosh|mac os x/i', $user_agent)) {\n            self::$_user_plateform = 'Mac';\n        } elseif (preg_match('/windows|win32/i', $user_agent)) {\n            self::$_user_plateform = 'Windows';\n        }\n\n        return self::$_user_plateform;\n    }\n\n    public static function getUserBrowser()\n    {\n        if (isset(self::$_user_browser)) {\n            return self::$_user_browser;\n        }\n\n        $user_agent = $_SERVER['HTTP_USER_AGENT'];\n        self::$_user_browser = 'unknown';\n\n        if (preg_match('/MSIE/i', $user_agent) && !preg_match('/Opera/i', $user_agent)) {\n            self::$_user_browser = 'Internet Explorer';\n        } elseif (preg_match('/Firefox/i', $user_agent)) {\n            self::$_user_browser = 'Mozilla Firefox';\n        } elseif (preg_match('/Chrome/i', $user_agent)) {\n            self::$_user_browser = 'Google Chrome';\n        } elseif (preg_match('/Safari/i', $user_agent)) {\n            self::$_user_browser = 'Apple Safari';\n        } elseif (preg_match('/Opera/i', $user_agent)) {\n            self::$_user_browser = 'Opera';\n        } elseif (preg_match('/Netscape/i', $user_agent)) {\n            self::$_user_browser = 'Netscape';\n        }\n\n        return self::$_user_browser;\n    }\n\n    /**\n     * Allows to display the category description without HTML tags and slashes.\n     *\n     * @return string\n     */\n    public static function getDescriptionClean($description)\n    {\n        return strip_tags(stripslashes($description));\n    }\n\n    public static function purifyHTML($html, $uri_unescape = null, $allow_style = false)\n    {\n        static $use_html_purifier = null;\n        static $purifier = null;\n\n        if (defined('PS_INSTALLATION_IN_PROGRESS') || !Configuration::configurationIsLoaded()) {\n            return $html;\n        }\n\n        if ($use_html_purifier === null) {\n            $use_html_purifier = (bool) Configuration::get('PS_USE_HTMLPURIFIER');\n        }\n\n        if ($use_html_purifier) {\n            if ($purifier === null) {\n                $config = HTMLPurifier_Config::createDefault();\n\n                $config->set('Attr.EnableID', true);\n                $config->set('Attr.AllowedRel', array('nofollow'));\n                $config->set('HTML.Trusted', true);\n                $config->set('Cache.SerializerPath', _PS_CACHE_DIR_ . 'purifier');\n                $config->set('Attr.AllowedFrameTargets', array('_blank', '_self', '_parent', '_top'));\n                if (is_array($uri_unescape)) {\n                    $config->set('URI.UnescapeCharacters', implode('', $uri_unescape));\n                }\n\n                if (Configuration::get('PS_ALLOW_HTML_IFRAME')) {\n                    $config->set('HTML.SafeIframe', true);\n                    $config->set('HTML.SafeObject', true);\n                    $config->set('URI.SafeIframeRegexp', '/.*/');\n                }\n\n                /** @var HTMLPurifier_HTMLDefinition|HTMLPurifier_HTMLModule $def */\n                // http://developers.whatwg.org/the-video-element.html#the-video-element\n                if ($def = $config->getHTMLDefinition(true)) {\n                    $def->addElement('video', 'Block', 'Optional: (source, Flow) | (Flow, source) | Flow', 'Common', array(\n                        'src' => 'URI',\n                        'type' => 'Text',\n                        'width' => 'Length',\n                        'height' => 'Length',\n                        'poster' => 'URI',\n                        'preload' => 'Enum#auto,metadata,none',\n                        'controls' => 'Bool',\n                    ));\n                    $def->addElement('source', 'Block', 'Flow', 'Common', array(\n                        'src' => 'URI',\n                        'type' => 'Text',\n                    ));\n                    if ($allow_style) {\n                        $def->addElement('style', 'Block', 'Flow', 'Common', array('type' => 'Text'));\n                    }\n                }\n\n                $purifier = new HTMLPurifier($config);\n            }\n            if (_PS_MAGIC_QUOTES_GPC_) {\n                $html = stripslashes($html);\n            }\n\n            $html = $purifier->purify($html);\n\n            if (_PS_MAGIC_QUOTES_GPC_) {\n                $html = addslashes($html);\n            }\n        }\n\n        return $html;\n    }\n\n    /**\n     * Check if a constant was already defined.\n     *\n     * @param string $constant Constant name\n     * @param mixed $value Default value to set if not defined\n     */\n    public static function safeDefine($constant, $value)\n    {\n        if (!defined($constant)) {\n            define($constant, $value);\n        }\n    }\n\n    /**\n     * Spread an amount on lines, adjusting the $column field,\n     * with the biggest adjustments going to the rows having the\n     * highest $sort_column.\n     *\n     * E.g.:\n     *\n     * $rows = [['a' => 5.1], ['a' => 8.2]];\n     *\n     * spreadAmount(0.3, 1, $rows, 'a');\n     *\n     * => $rows is [['a' => 8.4], ['a' => 5.2]]\n     *\n     * @param $amount float  The amount to spread across the rows\n     * @param $precision int Rounding precision\n     *                       e.g. if $amount is 1, $precision is 0 and $rows = [['a' => 2], ['a' => 1]]\n     *                       then the resulting $rows will be [['a' => 3], ['a' => 1]]\n     *                       But if $precision were 1, then the resulting $rows would be [['a' => 2.5], ['a' => 1.5]]\n     * @param &$rows array   An array, associative or not, containing arrays that have at least $column and $sort_column fields\n     * @param $column string The column on which to perform adjustments\n     */\n    public static function spreadAmount($amount, $precision, &$rows, $column)\n    {\n        if (!is_array($rows) || empty($rows)) {\n            return;\n        }\n\n        $sort_function = function ($a, $b) use ($column) { return $b[$column] > $a[$column] ? 1 : -1; };\n\n        uasort($rows, $sort_function);\n\n        $unit = 10 ** $precision;\n\n        $int_amount = (int) round($unit * $amount);\n\n        $remainder = $int_amount % count($rows);\n        $amount_to_spread = ($int_amount - $remainder) / count($rows) / $unit;\n\n        $sign = ($amount >= 0 ? 1 : -1);\n        $position = 0;\n        foreach ($rows as &$row) {\n            $adjustment_factor = $amount_to_spread;\n\n            if ($position < abs($remainder)) {\n                $adjustment_factor += $sign * 1 / $unit;\n            }\n\n            $row[$column] += $adjustment_factor;\n\n            ++$position;\n        }\n        unset($row);\n    }\n\n    /**\n     * Replaces elements from passed arrays into the first array recursively.\n     *\n     * @param array $base the array in which elements are replaced\n     * @param array $replacements the array from which elements will be extracted\n     */\n    public static function arrayReplaceRecursive($base, $replacements)\n    {\n        if (function_exists('array_replace_recursive')) {\n            return array_replace_recursive($base, $replacements);\n        }\n\n        foreach (array_slice(func_get_args(), 1) as $replacements) {\n            $bref_stack = array(&$base);\n            $head_stack = array($replacements);\n\n            do {\n                end($bref_stack);\n\n                $bref = &$bref_stack[key($bref_stack)];\n                $head = array_pop($head_stack);\n                unset($bref_stack[key($bref_stack)]);\n                foreach (array_keys($head) as $key) {\n                    if (isset($key, $bref) && is_array($bref[$key]) && is_array($head[$key])) {\n                        $bref_stack[] = &$bref[$key];\n                        $head_stack[] = $head[$key];\n                    } else {\n                        $bref[$key] = $head[$key];\n                    }\n                }\n            } while (count($head_stack));\n        }\n\n        return $base;\n    }\n\n    /**\n     * Return path to a Product or a CMS category.\n     *\n     * @param string $url_base Start URL\n     * @param int $id_category Start category\n     * @param string $path Current path\n     * @param string $highlight String to highlight (in XHTML/CSS)\n     * @param string $type Category type (products/cms)\n     */\n    public static function getPath($url_base, $id_category, $path = '', $highlight = '', $category_type = 'catalog', $home = false)\n    {\n        $context = Context::getContext();\n        if ($category_type == 'catalog') {\n            $category = Db::getInstance()->getRow('\n\t\tSELECT id_category, level_depth, nleft, nright\n\t\tFROM ' . _DB_PREFIX_ . 'category\n\t\tWHERE id_category = ' . (int) $id_category);\n            if (isset($category['id_category'])) {\n                $sql = 'SELECT c.id_category, cl.name, cl.link_rewrite\n\t\t\t\t\tFROM ' . _DB_PREFIX_ . 'category c\n\t\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'category_lang cl ON (cl.id_category = c.id_category' . Shop::addSqlRestrictionOnLang('cl') . ')\n\t\t\t\t\tWHERE c.nleft <= ' . (int) $category['nleft'] . '\n\t\t\t\t\t\tAND c.nright >= ' . (int) $category['nright'] . '\n\t\t\t\t\t\tAND cl.id_lang = ' . (int) $context->language->id .\n                       ($home ? ' AND c.id_category=' . (int) $id_category : '') . '\n\t\t\t\t\t\tAND c.id_category != ' . (int) Category::getTopCategory()->id . '\n\t\t\t\t\tGROUP BY c.id_category\n\t\t\t\t\tORDER BY c.level_depth ASC\n\t\t\t\t\tLIMIT ' . (!$home ? (int) $category['level_depth'] + 1 : 1);\n                $categories = Db::getInstance()->executeS($sql);\n                $full_path = '';\n                $n = 1;\n                $n_categories = (int) count($categories);\n                foreach ($categories as $category) {\n                    $action = (($category['id_category'] == (int) Configuration::get('PS_HOME_CATEGORY') || $home) ? 'index' : 'updatecategory');\n                    $link = Context::getContext()->link->getAdminLink('AdminCategories', true, ['action' => $action, 'id_category' => (int) $category['id_category']]);\n                    $edit = '<a href=\"' . Tools::safeOutput($link) . '\" title=\"' . ($category['id_category'] == Category::getRootCategory()->id_category ? 'Home' : 'Modify') . '\"><i class=\"icon-' . (($category['id_category'] == Category::getRootCategory()->id_category || $home) ? 'home' : 'pencil') . '\"></i></a> ';\n                    $full_path .= $edit .\n                                  ($n < $n_categories ? '<a href=\"' . Tools::safeOutput($link) . '\" title=\"' . htmlentities($category['name'], ENT_NOQUOTES, 'UTF-8') . '\">' : '') .\n                                  (!empty($highlight) ? str_ireplace($highlight, '<span class=\"highlight\">' . htmlentities($highlight, ENT_NOQUOTES, 'UTF-8') . '</span>', $category['name']) : $category['name']) .\n                                  ($n < $n_categories ? '</a>' : '') .\n                                  (($n++ != $n_categories || !empty($path)) ? ' > ' : '');\n                }\n\n                return $full_path . $path;\n            }\n        } elseif ($category_type == 'cms') {\n            $category = new CMSCategory($id_category, $context->language->id);\n            if (!$category->id) {\n                return $path;\n            }\n            $name = ($highlight != null) ? str_ireplace($highlight, '<span class=\"highlight\">' . $highlight . '</span>', CMSCategory::hideCMSCategoryPosition($category->name)) : CMSCategory::hideCMSCategoryPosition($category->name);\n            $edit = '<a href=\"' . Tools::safeOutput($url_base . '&id_cms_category=' . $category->id . '&updatecms_category&token=' . Tools::getAdminToken('AdminCmsContent' . (int) Tab::getIdFromClassName('AdminCmsContent') . (int) $context->employee->id)) . '\">\n\t\t\t\t<i class=\"icon-pencil\"></i></a> ';\n            if ($category->id == 1) {\n                $edit = '<li><a href=\"' . Tools::safeOutput($url_base . '&id_cms_category=' . $category->id . '&viewcategory&token=' . Tools::getAdminToken('AdminCmsContent' . (int) Tab::getIdFromClassName('AdminCmsContent') . (int) $context->employee->id)) . '\">\n\t\t\t\t\t<i class=\"icon-home\"></i></a></li> ';\n            }\n            $path = $edit . '<li><a href=\"' . Tools::safeOutput($url_base . '&id_cms_category=' . $category->id . '&viewcategory&token=' . Tools::getAdminToken('AdminCmsContent' . (int) Tab::getIdFromClassName('AdminCmsContent') . (int) $context->employee->id)) . '\">\n\t\t' . $name . '</a></li> > ' . $path;\n            if ($category->id == 1) {\n                return substr($path, 0, strlen($path) - 3);\n            }\n\n            return Tools::getPath($url_base, $category->id_parent, $path, '', 'cms');\n        }\n    }\n\n    public static function redirectToInstall()\n    {\n        if (file_exists(dirname(__FILE__) . '/../install')) {\n            header('Location: install/');\n        } elseif (file_exists(dirname(__FILE__) . '/../install-dev')) {\n            header('Location: install-dev/');\n        } else {\n            die('Error: \"install\" directory is missing');\n        }\n        exit;\n    }\n}\n\n/**\n * Compare 2 prices to sort products.\n *\n * @param float $a\n * @param float $b\n *\n * @return int\n */\n/* Externalized because of a bug in PHP 5.1.6 when inside an object */\nfunction cmpPriceAsc($a, $b)\n{\n    if ((float) $a['price_tmp'] < (float) $b['price_tmp']) {\n        return -1;\n    } elseif ((float) $a['price_tmp'] > (float) $b['price_tmp']) {\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction cmpPriceDesc($a, $b)\n{\n    if ((float) $a['price_tmp'] < (float) $b['price_tmp']) {\n        return 1;\n    } elseif ((float) $a['price_tmp'] > (float) $b['price_tmp']) {\n        return -1;\n    }\n\n    return 0;\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * This class is used to create a release of PrestaShop,\n * see ReleaseCreator::createRelease() function.\n */\nclass ReleaseCreator\n{\n    /**\n     * Path where the releases will be stored.\n     *\n     * @var string\n     */\n    const RELEASES_DIR_RELATIVE_PATH = 'tools/build/releases';\n\n    /**\n     * Name of the release's zip.\n     *\n     * @var string\n     */\n    const INSTALLER_ZIP_FILENAME = 'prestashop.zip';\n\n    /**\n     * Directory's name of the prestashop release in creation.\n     * Deleted at the end.\n     *\n     * @var string\n     */\n    const PRESTASHOP_TMP_DIR = 'prestashop';\n\n    /**\n     * Use to write on terminal.\n     *\n     * @var ConsoleWriter\n     */\n    protected $consoleWriter;\n\n    /**\n     * Line separator used for all messages.\n     *\n     * @var string\n     */\n    protected $lineSeparator = PHP_EOL;\n\n    /**\n     * Files to remove.\n     *\n     * @var array\n     */\n    protected $filesRemoveList = [\n        '.DS_Store',\n        '.gitignore',\n        '.gitmodules',\n        '.travis.yml',\n        'package-lock.json',\n        '.babelrc',\n        'postcss.config.js',\n    ];\n\n    /**\n     * Folders to remove.\n     *\n     * @var array\n     */\n    protected $foldersRemoveList = [];\n\n    /**\n     * Pattern of files or directories to remove.\n     *\n     * @var array\n     */\n    protected $patternsRemoveList = [\n        'tests(\\-legacy)?$',\n        'tools/contrib$',\n        'travis\\-scripts$',\n        'CONTRIBUTING\\.md$',\n        'composer\\.json$',\n        'diff\\-hooks\\.php',\n        '((?<!_dev\\/)package\\.json)$',\n        '(.*)?\\.composer$',\n        '(.*)?\\.git(.*)?$',\n        '.*\\.map$',\n        '.*\\.psd$',\n        '.*\\.md$',\n        '.*\\.rst$',\n        '.*phpunit(.*)?',\n        '(.*)?\\.travis\\.',\n        '.*\\.DS_Store$',\n        '.*\\.eslintrc$',\n        '.*\\.editorconfig$',\n        'web/.*$',\n        'app/config/parameters\\.yml$',\n        'app/config/parameters\\.php$',\n        'config/settings\\.inc\\.php$',\n        'app/cache/..*$',\n        '\\.t9n\\.yml$',\n        '\\.scrutinizer\\.yml$',\n        'admin/(.*/)?webpack\\.config\\.js$',\n        'admin/(.*/)?package\\.json$',\n        'admin/(.*/)?bower\\.json$',\n        'admin/(.*/)?config\\.rb$',\n        'admin/themes/default/sass$',\n        //'admin/themes/new\\-theme/js$',\n        //'admin/themes/new\\-theme/scss$',\n        'themes/_core$',\n        'themes/classic/_dev',\n        'themes/webpack\\.config\\.js$',\n        'themes/package\\.json$',\n        'vendor\\/[a-zA-Z0-0_-]+\\/[a-zA-Z0-0_-]+\\/[Tt]ests?$',\n        'vendor/tecnickcom/tcpdf/examples$',\n        'app/cache/..*$',\n        '.idea',\n        'tools/build$',\n        'tools/foreignkeyGenerator$',\n        '.*node_modules.*',\n        '\\.eslintignore$',\n        '\\.eslintrc\\.js$',\n        '\\.php_cs\\.dist$',\n        'docker-compose\\.yml$',\n        'tools/assets$',\n        '\\.webpack$',\n    ];\n\n    /**\n     * Contains all files and directories of the PrestaShop release.\n     *\n     * @var array\n     */\n    protected $filesList = [];\n\n    /**\n     * Absolute path of the temp PrestaShop release.\n     *\n     * @var string\n     */\n    protected $tempProjectPath;\n\n    /**\n     * Absolute path of the current user's PrestaShop (root path).\n     *\n     * @var string\n     */\n    protected $projectPath;\n\n    /**\n     * Release version which user wants.\n     *\n     * @var string\n     */\n    protected $version;\n\n    /**\n     * Do we include the installer?\n     * Do not work with $useZip = false.\n     *\n     * @var bool\n     */\n    protected $useInstaller;\n\n    /**\n     * Do we zip the release?\n     *\n     * @var bool\n     */\n    protected $useZip;\n\n    /**\n     * Consisting of prestashop_ and the version. e.g prestashop_1.7.3.4.zip\n     *\n     * @var string\n     */\n    protected $zipFileName;\n\n    /**\n     * Where the release will be moved when done.\n     *\n     * @var string\n     */\n    protected $destinationDir;\n\n    /**\n     * Set the release wanted version, and some options.\n     *\n     * @param string $version\n     * @param bool $useInstaller\n     * @param bool $useZip\n     * @param string $destinationDir\n     */\n    public function __construct($version = null, $useInstaller = true, $useZip = true, $destinationDir = '')\n    {\n        $this->consoleWriter = new ConsoleWriter();\n        $tmpDir = sys_get_temp_dir();\n        $prestashopTmpDir = self::PRESTASHOP_TMP_DIR;\n        $this->tempProjectPath = \"{$tmpDir}/$prestashopTmpDir\";\n        $this->consoleWriter->displayText(\n            \"--- Temp dir used will be '{$tmpDir}'{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n        $this->projectPath = realpath(__DIR__ . '/../../..');\n        $this->version = $version ? $version : $this->getCurrentVersion();\n        $this->zipFileName = \"prestashop_$this->version.zip\";\n\n        if (empty($this->version)) {\n            throw new Exception('Version is not provided and cannot be found in project.');\n        }\n\n        if (empty($destinationDir)) {\n            $releasesDir = self::RELEASES_DIR_RELATIVE_PATH;\n            $reference = $this->version . \"_\" . date(\"Ymd_His\");\n            $destinationDir = \"{$this->projectPath}/$releasesDir/$reference\";\n        }\n        $this->destinationDir = $destinationDir;\n        $this->consoleWriter->displayText(\n            \"--- Destination dir used will be '{$this->destinationDir}'{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n        $this->useZip = $useZip;\n        $this->useInstaller = $useInstaller;\n\n        if ($this->useZip && $this->useInstaller) {\n            $this->consoleWriter->displayText(\n                \"--- Release will have the installer and will be zipped.{$this->lineSeparator}\",\n                ConsoleWriter::COLOR_GREEN\n            );\n        } elseif ($this->useZip) {\n            $this->consoleWriter->displayText(\n                \"--- Release will be zipped.{$this->lineSeparator}\",\n                ConsoleWriter::COLOR_GREEN\n            );\n        } elseif ($this->useInstaller) {\n            $this->consoleWriter->displayText(\n                \"--- Release will have the installer.{$this->lineSeparator}\",\n                ConsoleWriter::COLOR_GREEN\n            );\n        }\n    }\n\n    /**\n     * Create a new release.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    public function createRelease()\n    {\n        if (!file_exists($this->destinationDir) && !mkdir($this->destinationDir, 0777, true)) {\n            throw new BuildException(\"ERROR: can not create directory '{$this->destinationDir}'\");\n        }\n        $startTime = date('H:i:s');\n        $this->consoleWriter->displayText(\n            \"--- Script started at {$startTime}{$this->lineSeparator}{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n        $this->createTmpProjectDir()\n            ->setFilesConstants()\n            ->setupShopVersion()\n            ->generateLicensesFile()\n            ->runComposerInstall()\n            ->createPackage();\n        $endTime = date('H:i:s');\n        $this->consoleWriter->displayText(\n            \"{$this->lineSeparator}--- Script ended at {$endTime}{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n\n        if ($this->useZip) {\n            $argReleaseZipFilePath = escapeshellarg(\"{$this->destinationDir}/{$this->zipFileName}\");\n            $releaseSize = exec(\"du -hs {$argReleaseZipFilePath} | cut -f1\");\n        } else {\n            $argReleaseDirectoryPath = escapeshellarg(\"{$this->destinationDir}\");\n            $releaseSize = exec(\"du -hs {$argReleaseDirectoryPath} | cut -f1\");\n        }\n        $this->consoleWriter->displayText(\n            \"--- Release size: {$releaseSize}{$this->lineSeparator}\",\n            ConsoleWriter::COLOR_GREEN\n        );\n\n        return $this;\n    }\n\n    /**\n     * Copy current user PrestaShop dir to a tmp directory\n     * where we'll clean it for the release.\n     *\n     * @return $this\n     */\n    protected function createTmpProjectDir()\n    {\n        $this->consoleWriter->displayText(\"Copy project in {$this->tempProjectPath}...\", ConsoleWriter::COLOR_YELLOW);\n        $argProjectPath = escapeshellarg($this->projectPath);\n        $argTmpDestination = escapeshellarg(\"{$this->tempProjectPath}\");\n\n        if (file_exists(\"{$this->tempProjectPath}\")) {\n            exec(\"rm -rf $argTmpDestination\");\n        }\n        exec(\"mkdir $argTmpDestination && \\\n            cd {$argProjectPath} && \\\n            git archive HEAD | tar -xC {$argTmpDestination} && \\\n            cd -\");\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Define all constants of the project to the desired version.\n     *\n     * @return $this\n     */\n    protected function setFilesConstants()\n    {\n        $this->consoleWriter->displayText(\"Setting files constants...\", ConsoleWriter::COLOR_YELLOW);\n        $this->setConfigDefinesConstants()\n            ->setInstallDevConfigurationConstants()\n            ->setInstallDevInstallVersionConstants();\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Define all config/defines.inc.php constants to the desired version.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function setConfigDefinesConstants()\n    {\n        $configDefinesPath = $this->tempProjectPath . '/config/defines.inc.php';\n        $configDefinesContent = file_get_contents($configDefinesPath);\n        $configDefinesNewContent = preg_replace('/(.*(define).*)_PS_MODE_DEV_(.*);/Ui', 'define(\\'_PS_MODE_DEV_\\', false);', $configDefinesContent);\n        $configDefinesNewContent = preg_replace('/(.*)_PS_DISPLAY_COMPATIBILITY_WARNING_(.*);/Ui', 'define(\\'_PS_DISPLAY_COMPATIBILITY_WARNING_\\', false);', $configDefinesNewContent);\n\n        if (!file_put_contents($configDefinesPath, $configDefinesNewContent)) {\n            throw new BuildException(\"Unable to update contents of '$configDefinesPath'\");\n        }\n\n        return $this;\n    }\n\n    /**\n     * Get the current version in the project\n     *\n     * @return string PrestaShop version\n     */\n    protected function getCurrentVersion()\n    {\n        $kernelFile = $this->projectPath.'/app/AppKernel.php';\n        $matches = [];\n\n        $kernelFileContent = file_get_contents($kernelFile);\n        $kernelFileContent = preg_match(\n            '~const VERSION = \\'(.*)\\';~',\n            $kernelFileContent,\n            $matches\n        );\n\n        return $matches[1];\n    }\n\n    /**\n     * Define the PrestaShop version to the desired version.\n     *\n     * @return self\n     * @throws BuildException\n     */\n    protected function setupShopVersion()\n    {\n        $kernelFile = $this->tempProjectPath.'/app/AppKernel.php';\n        $version = new Version($this->version);\n\n        $kernelFileContent = file_get_contents($kernelFile);\n        $kernelFileContent = preg_replace(\n            '~const VERSION = \\'(.*)\\';~',\n            \"const VERSION = '\".$version->getVersion().\"';\",\n            $kernelFileContent\n        );\n        $kernelFileContent = preg_replace(\n            '~const MAJOR_VERSION_STRING = \\'(.*)\\';~',\n            \"const MAJOR_VERSION_STRING = '\".$version->getMajorVersionString().\"';\",\n            $kernelFileContent\n        );\n        $kernelFileContent = preg_replace(\n            '~const MAJOR_VERSION = (.*);~',\n            \"const MAJOR_VERSION = \".$version->getMajorVersion().\";\",\n            $kernelFileContent\n        );\n        $kernelFileContent = preg_replace(\n            '~const MINOR_VERSION = (.*);~',\n            \"const MINOR_VERSION = \".$version->getMinorVersion().\";\",\n            $kernelFileContent\n        );\n        $kernelFileContent = preg_replace(\n            '~const RELEASE_VERSION = (.*);~',\n            \"const RELEASE_VERSION = \".$version->getReleaseVersion().\";\",\n            $kernelFileContent\n        );\n\n        if (!file_put_contents($kernelFile, $kernelFileContent)) {\n            throw new BuildException(\"Unable to update contents of $kernelFile.\");\n        }\n\n        return $this;\n    }\n\n    /**\n     * Define all install-dev/data/xml/configuration.xml constants to the desired version.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function setInstallDevConfigurationConstants()\n    {\n        $configPath = $this->tempProjectPath.'/install-dev/data/xml/configuration.xml';\n\n        if (file_exists($configPath)) {\n            $configPathContent = file_get_contents($configPath);\n            $configPathNewContent = preg_replace('/name=\"PS_SMARTY_FORCE_COMPILE\"(.*?)value>([\\d]*)/si', 'name=\"PS_SMARTY_FORCE_COMPILE\"$1value>0', $configPathContent);\n            $configPathNewContent = preg_replace('/name=\"PS_SMARTY_CONSOLE\"(.*?)value>([\\d]*)/si', 'name=\"PS_SMARTY_CONSOLE\"$1value>0', $configPathNewContent);\n\n            if (!file_put_contents($configPath, $configPathNewContent)) {\n                throw new BuildException(\"Unable to update contents of '$configPath'.\");\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Define all install-dev/install_version.php constants to the desired version.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function setInstallDevInstallVersionConstants()\n    {\n        $installVersionPath = $this->tempProjectPath . '/install-dev/install_version.php';\n        $installVersionContent = file_get_contents($installVersionPath);\n        $installVersionNewContent = preg_replace('#_PS_INSTALL_VERSION_\\', \\'(.*)\\'\\)#', '_PS_INSTALL_VERSION_\\', \\'' . $this->version . '\\')', $installVersionContent);\n\n        if (!file_put_contents($installVersionPath, $installVersionNewContent)) {\n            throw new BuildException(\"Unable to update contents of '$installVersionPath'.\");\n        }\n\n        return $this;\n    }\n\n    /**\n     * Generate the /LICENCES file. Concatenate all text files which contains the 'licence' word\n     * in their filename into this unique one.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function generateLicensesFile()\n    {\n        $this->consoleWriter->displayText(\"Generating licences file...\", ConsoleWriter::COLOR_YELLOW);\n        $content = null;\n        $directory = new \\RecursiveDirectoryIterator($this->tempProjectPath);\n        $iterator = new \\RecursiveIteratorIterator($directory);\n        $regex = new \\RegexIterator($iterator, '/^.*\\/.*license(\\.txt)?$/i', \\RecursiveRegexIterator::GET_MATCH);\n\n        foreach($regex as $file => $value) {\n            $content .= file_get_contents($file) . \"\\r\\n\\r\\n\";\n        }\n\n        if (!file_put_contents($this->tempProjectPath . '/LICENSES', $content)) {\n            throw new BuildException('Unable to create LICENSES file.');\n        }\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Install all dependencies.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function runComposerInstall()\n    {\n        $this->consoleWriter->displayText(\"Running composer install...\", ConsoleWriter::COLOR_YELLOW);\n        $argProjectPath = escapeshellarg($this->tempProjectPath);\n        $command = \"cd {$argProjectPath} && export SYMFONY_ENV=prod && composer install --no-dev --optimize-autoloader --classmap-authoritative --no-interaction 2>&1\";\n        exec($command, $output, $returnCode);\n\n        if ($returnCode != 0) {\n            throw new BuildException('Unable to run composer install.');\n        }\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Create some required folders and rename a few.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function createAndRenameFolders()\n    {\n        if (!file_exists($this->tempProjectPath . '/var/cache/')) {\n            mkdir($this->tempProjectPath . '/var/cache', 0777, true);\n        }\n\n        if (!file_exists($this->tempProjectPath . '/var/logs/')) {\n            mkdir($this->tempProjectPath . '/var/logs', 0777, true);\n        }\n        $itemsToRename = ['admin-dev' => 'admin', 'install-dev' => 'install'];\n        $basePath = $this->tempProjectPath;\n\n        foreach ($itemsToRename as $oldName => $newName) {\n            if (file_exists(\"$basePath/$oldName\")) {\n                rename(\"{$basePath}/$oldName\", \"{$basePath}/$newName\");\n            } else {\n                throw new BuildException(\"Unable to rename $oldName to $newName, file does not exist.\");\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Clean project with unwanted files and folders, generate a checksum xml file,\n     * zip the directory and move it to the final destination.\n     *\n     * @return $this\n     */\n    protected function createPackage()\n    {\n        $this->consoleWriter->displayText(\"Creating package...{$this->lineSeparator}\", ConsoleWriter::COLOR_YELLOW);\n        $this->cleanTmpProject();\n        $this->generateXMLChecksum();\n        $this->createZipArchive();\n        $this->movePackage();\n        $this->consoleWriter->displayText(\"Package successfully created...{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Create a copy of PrestaShop in a tmp location and\n     * remove unwanted files and folders.\n     *\n     * @return $this\n     */\n    protected function cleanTmpProject()\n    {\n        $this->consoleWriter->displayText(\"--- Cleaning project...\", ConsoleWriter::COLOR_YELLOW);\n        $this->createAndRenameFolders();\n        $this->filesList = $this->getDirectoryStructure($this->tempProjectPath);\n        $this->removeUnnecessaryFiles(\n            $this->filesList,\n            $this->filesRemoveList,\n            $this->foldersRemoveList,\n            $this->patternsRemoveList,\n            $this->tempProjectPath\n        );\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Return the directory structure of a given path as an array.\n     *\n     * @param string $path\n     * @return array\n     */\n    protected function getDirectoryStructure($path)\n    {\n        $flags = FilesystemIterator::SKIP_DOTS | RecursiveIteratorIterator::CHILD_FIRST;\n        $iterator = new RecursiveDirectoryIterator($path, $flags);\n        $childrens = iterator_count($iterator);\n        $structure = [];\n\n        if ($childrens > 0) {\n            $children = $iterator->getChildren();\n\n            for ($index = 0; $index < $childrens; $index += 1) {\n                $pathname = $children->getPathname();\n\n                if ($children->hasChildren() === true) {\n                    $structure[$pathname] = $this->getDirectoryStructure($pathname);\n                } else {\n                    $structure[] = $pathname;\n                }\n                $children->next();\n            }\n        }\n        ksort($structure);\n\n        return $structure;\n    }\n\n    /**\n     * Delete unwanted files and folders in the PrestaShop tmp directory.\n     *\n     * @param array $filesList\n     * @param array $filesRemoveList\n     * @param array $foldersRemoveList\n     * @param array $patternsRemoveList\n     * @param string $folder\n     * @return $this\n     * @throws BuildException\n     */\n    protected function removeUnnecessaryFiles(\n        array &$filesList,\n        array &$filesRemoveList,\n        array &$foldersRemoveList,\n        array &$patternsRemoveList,\n        $folder\n    ) {\n        $tmpDir = sys_get_temp_dir();\n        $tmpDirPathLength = strlen($tmpDir);\n\n        foreach ($filesList as $key => $value) {\n            $pathToTest = $value;\n\n            if (!is_string($pathToTest)) {\n                $pathToTest = $key;\n            }\n\n            if (substr($pathToTest, 0, $tmpDirPathLength) != $tmpDir) {\n                throw new BuildException(\"Trying to delete a file somewhere else than in $tmpDir, path: $pathToTest\");\n            }\n\n            if (is_numeric($key)) {\n                $argValue = escapeshellarg($value);\n\n                // Remove files.\n                foreach ($filesRemoveList as $file_to_remove) {\n                    if ($folder.'/'.$file_to_remove == $value) {\n                        unset($filesList[$key]);\n                        exec(\"rm -f {$argValue}\");\n\n                        continue 2;\n                    }\n                }\n\n                // Remove folders.\n                foreach ($foldersRemoveList as $folder_to_remove) {\n                    if ($folder.'/'.$folder_to_remove == $value) {\n                        unset($filesList[$key]);\n                        exec(\"rm -rf {$argValue}\");\n\n                        continue 2;\n                    }\n                }\n\n                // Pattern to remove.\n                foreach ($patternsRemoveList as $pattern_to_remove) {\n                    if (preg_match('#'.$pattern_to_remove.'#', $value) == 1) {\n                        unset($filesList[$key]);\n                        exec(\"rm -rf {$argValue}\");\n\n                        continue 2;\n                    }\n                }\n            } else {\n                $argKey = escapeshellarg($key);\n\n                // Remove folders.\n                foreach ($foldersRemoveList as $folder_to_remove) {\n                    if ($folder.'/'.$folder_to_remove == $key) {\n                        unset($filesList[$key]);\n                        exec(\"rm -rf {$argKey}\");\n\n                        continue 2;\n                    }\n                }\n\n                // Pattern to remove.\n                foreach ($patternsRemoveList as $pattern_to_remove) {\n                    if (preg_match('#'.$pattern_to_remove.'#', $key) == 1) {\n                        unset($filesList[$key]);\n                        exec(\"rm -rf {$argKey}\");\n\n                        continue 2;\n                    }\n                }\n                $this->removeUnnecessaryFiles($filesList[$key], $filesRemoveList, $foldersRemoveList, $patternsRemoveList, $folder);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Zip the release if needed.\n     *\n     * @return $this\n     */\n    protected function createZipArchive()\n    {\n        if (!$this->useZip) {\n            return $this;\n        }\n        $this->consoleWriter->displayText(\"--- Creating zip archive...\", ConsoleWriter::COLOR_YELLOW);\n        $installerZipFilename = self::INSTALLER_ZIP_FILENAME;\n        $argTempProjectPath = escapeshellarg($this->tempProjectPath);\n        $argInstallerZipFilename = escapeshellarg($installerZipFilename);\n        $argProjectPath = escapeshellarg($this->projectPath);\n        $cmd = \"cd {$argTempProjectPath} \\\n            && zip -rq {$argInstallerZipFilename} . \\\n            && cd -\";\n        exec($cmd);\n\n        if ($this->useInstaller) {\n            exec(\"cd {$argProjectPath}/tools/build/Library/InstallUnpacker && php compile.php {$this->version} && cd -\");\n            $zip = new ZipArchive();\n            $zip->open(\"{$this->tempProjectPath}/{$this->zipFileName}\", ZipArchive::CREATE | ZipArchive::OVERWRITE);\n            $zip->addFile(\"{$this->tempProjectPath}/{$installerZipFilename}\", $installerZipFilename);\n            $zip->addFile(\"{$this->projectPath}/tools/build/Library/InstallUnpacker/index.php\", 'index.php');\n\n            // add docs at the root\n            $zip->addGlob(\n                \"{$this->projectPath}/tools/build/doc/*\",\n                0,\n                array('remove_all_path' => true)\n            );\n\n            $zip->close();\n            exec(\"rm {$argProjectPath}/tools/build/Library/InstallUnpacker/index.php\");\n        } else {\n            rename(\n                \"{$this->tempProjectPath}/$installerZipFilename\",\n                \"{$this->tempProjectPath}/{$this->zipFileName}\"\n            );\n        }\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Move the final release to the desired location.\n     *\n     * @return $this\n     */\n    protected function movePackage()\n    {\n        $this->consoleWriter->displayText(\"--- Move package...\", ConsoleWriter::COLOR_YELLOW);\n        $tmpDir = sys_get_temp_dir();\n        $argTempProjectPath = escapeshellarg($this->tempProjectPath);\n\n        if ($this->useZip) {\n            rename(\n                \"{$this->tempProjectPath}/{$this->zipFileName}\",\n                \"{$this->destinationDir}/prestashop_$this->version.zip\"\n            );\n        } else {\n            $argDestinationDir = escapeshellarg($this->destinationDir);\n            exec(\"mv {$argTempProjectPath} {$argDestinationDir}\");\n        }\n        rename(\n            \"{$tmpDir}/prestashop_$this->version.xml\",\n            \"{$this->destinationDir}/prestashop_$this->version.xml\"\n        );\n        exec(\"rm -rf {$argTempProjectPath}\");\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n    }\n\n    /**\n     * Create a XML file with the checksum of all the PrestaShop release files.\n     *\n     * @return $this\n     * @throws BuildException\n     */\n    protected function generateXMLChecksum()\n    {\n        $this->consoleWriter->displayText(\"--- Generating XML checksum...\", ConsoleWriter::COLOR_YELLOW);\n        $tmpDir = sys_get_temp_dir();\n        $xmlPath = \"{$tmpDir}/prestashop_$this->version.xml\";\n        $content = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>{$this->lineSeparator}\"\n            . \"<checksum_list>{$this->lineSeparator}\"\n            . \"\\t<ps_root_dir version=\\\"$this->version\\\">{$this->lineSeparator}\"\n            . $this->generateXMLDirectoryChecksum($this->filesList)\n            . \"\\t</ps_root_dir>{$this->lineSeparator}\"\n            . \"</checksum_list>{$this->lineSeparator}\";\n\n        if (!file_put_contents($xmlPath, $content)) {\n            throw new BuildException('Unable to generate XML checksum.');\n        }\n        $this->consoleWriter->displayText(\" DONE{$this->lineSeparator}\", ConsoleWriter::COLOR_GREEN);\n\n        return $this;\n    }\n\n    /**\n     * Return the checksum of the files and folders given as parameter.\n     *\n     * @param array $files\n     * @return string\n     */\n    protected function generateXMLDirectoryChecksum(array $files)\n    {\n        $content = null;\n        $subCount = substr_count($this->tempProjectPath, DIRECTORY_SEPARATOR);\n\n        foreach ($files as $key => $value) {\n            if (is_numeric($key)) {\n                $md5 = md5_file($value);\n                $count = substr_count($value, DIRECTORY_SEPARATOR) - $subCount + 1;\n                $file_name = str_replace($this->tempProjectPath, null, $value);\n                $file_name = pathinfo($file_name, PATHINFO_BASENAME);\n                $content .= str_repeat(\"\\t\", $count) . \"<md5file name=\\\"$file_name\\\">$md5</md5file>\" . PHP_EOL;\n            } else {\n                $count = substr_count($key, DIRECTORY_SEPARATOR) - $subCount + 1;\n                $dir_name = str_replace($this->tempProjectPath, null, $key);\n                $dir_name = pathinfo($dir_name, PATHINFO_BASENAME);\n                $content .= str_repeat(\"\\t\", $count) . \"<dir name=\\\"$dir_name\\\">\" . PHP_EOL;\n                $content .= $this->generateXMLDirectoryChecksum($value);\n                $content .= str_repeat(\"\\t\", $count) . \"</dir>\" . PHP_EOL;\n            }\n        }\n\n        return $content;\n    }\n}\n"], "filenames": ["classes/Tools.php", "tools/build/Library/ReleaseCreator.php"], "buggy_code_start_loc": [2650, 143], "buggy_code_end_loc": [2651, 144], "fixing_code_start_loc": [2650, 143], "fixing_code_end_loc": [2663, 144], "type": "CWE-862", "message": "In PrestaShop from version 1.7.4.0 and before version 1.7.6.6, some files should not be in the release archive, and others should not be accessible. The problem is fixed in version 1.7.6.6 A possible workaround is to make sure `composer.json` and `docker-compose.yml` are not accessible on your server.", "other": {"cve": {"id": "CVE-2020-15080", "sourceIdentifier": "security-advisories@github.com", "published": "2020-07-02T17:15:12.200", "lastModified": "2021-11-18T18:05:05.327", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop from version 1.7.4.0 and before version 1.7.6.6, some files should not be in the release archive, and others should not be accessible. The problem is fixed in version 1.7.6.6 A possible workaround is to make sure `composer.json` and `docker-compose.yml` are not accessible on your server."}, {"lang": "es", "value": "En PrestaShop desde versi\u00f3n 1.7.4.0 y anteriores a versi\u00f3n 1.7.6.6, algunos archivos no deber\u00edan estar en el archivo de publicaci\u00f3n, y otros no deber\u00edan ser accesibles. El problema es corregido en versi\u00f3n 1.7.6.6. Una posible soluci\u00f3n alternativa es asegurarse de que \"composer.json\" y \"docker-compose.yml\" no sean accesibles en su servidor"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.7.4.0", "versionEndExcluding": "1.7.6.6", "matchCriteriaId": "A6FF3203-0ACB-496C-A67C-D3D3E28D7414"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/35ef7e9d892287c302df1fc5aa05ecfc6f15bc76", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-492w-2pp5-xhvg", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/35ef7e9d892287c302df1fc5aa05ecfc6f15bc76"}}