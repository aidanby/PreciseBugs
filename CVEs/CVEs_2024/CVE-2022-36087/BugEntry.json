{"buggy_code": ["\"\"\"\nRegex for URIs\n\nThese regex are directly derived from the collected ABNF in RFC3986\n(except for DIGIT, ALPHA and HEXDIG, defined by RFC2234).\n\nThey should be processed with re.VERBOSE.\n\nThanks Mark Nottingham for this code - https://gist.github.com/138549\n\"\"\"\nimport re\n\n# basics\n\nDIGIT = r\"[\\x30-\\x39]\"\n\nALPHA = r\"[\\x41-\\x5A\\x61-\\x7A]\"\n\nHEXDIG = r\"[\\x30-\\x39A-Fa-f]\"\n\n#   pct-encoded   = \"%\" HEXDIG HEXDIG\npct_encoded = r\" %% %(HEXDIG)s %(HEXDIG)s\" % locals()\n\n#   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nunreserved = r\"(?: %(ALPHA)s | %(DIGIT)s | \\- | \\. | _ | ~ )\" % locals()\n\n# gen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\ngen_delims = r\"(?: : | / | \\? | \\# | \\[ | \\] | @ )\"\n\n#   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n#                 / \"*\" / \"+\" / \",\" / \";\" / \"=\"\nsub_delims = r\"\"\"(?: ! | \\$ | & | ' | \\( | \\) |\n                     \\* | \\+ | , | ; | = )\"\"\"\n\n#   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\npchar = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : | @ )\" % locals(\n)\n\n#   reserved      = gen-delims / sub-delims\nreserved = r\"(?: %(gen_delims)s | %(sub_delims)s )\" % locals()\n\n\n# scheme\n\n#   scheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nscheme = r\"%(ALPHA)s (?: %(ALPHA)s | %(DIGIT)s | \\+ | \\- | \\. )*\" % locals()\n\n\n# authority\n\n#   dec-octet     = DIGIT                 ; 0-9\n#                 / %x31-39 DIGIT         ; 10-99\n#                 / \"1\" 2DIGIT            ; 100-199\n#                 / \"2\" %x30-34 DIGIT     ; 200-249\n#                 / \"25\" %x30-35          ; 250-255\ndec_octet = r\"\"\"(?: %(DIGIT)s |\n                    [\\x31-\\x39] %(DIGIT)s |\n                    1 %(DIGIT)s{2} |\n                    2 [\\x30-\\x34] %(DIGIT)s |\n                    25 [\\x30-\\x35]\n                )\n\"\"\" % locals()\n\n#  IPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\nIPv4address = r\"%(dec_octet)s \\. %(dec_octet)s \\. %(dec_octet)s \\. %(dec_octet)s\" % locals(\n)\n\n#   IPv6address\nIPv6address = r\"([A-Fa-f0-9:]+:+)+[A-Fa-f0-9]+\"\n\n#   IPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\nIPvFuture = r\"v %(HEXDIG)s+ \\. (?: %(unreserved)s | %(sub_delims)s | : )+\" % locals()\n\n#   IP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\nIP_literal = r\"\\[ (?: %(IPv6address)s | %(IPvFuture)s ) \\]\" % locals()\n\n#   reg-name      = *( unreserved / pct-encoded / sub-delims )\nreg_name = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s )*\" % locals()\n\n#   userinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nuserinfo = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : )\" % locals(\n)\n\n#   host          = IP-literal / IPv4address / reg-name\nhost = r\"(?: %(IP_literal)s | %(IPv4address)s | %(reg_name)s )\" % locals()\n\n#   port          = *DIGIT\nport = r\"(?: %(DIGIT)s )*\" % locals()\n\n#   authority     = [ userinfo \"@\" ] host [ \":\" port ]\nauthority = r\"(?: %(userinfo)s @)? %(host)s (?: : %(port)s)?\" % locals()\n\n# Path\n\n#   segment       = *pchar\nsegment = r\"%(pchar)s*\" % locals()\n\n#   segment-nz    = 1*pchar\nsegment_nz = r\"%(pchar)s+\" % locals()\n\n#   segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \"@\" )\n#                 ; non-zero-length segment without any colon \":\"\nsegment_nz_nc = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | @ )+\" % locals()\n\n#   path-abempty  = *( \"/\" segment )\npath_abempty = r\"(?: / %(segment)s )*\" % locals()\n\n#   path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath_absolute = r\"/ (?: %(segment_nz)s (?: / %(segment)s )* )?\" % locals()\n\n#   path-noscheme = segment-nz-nc *( \"/\" segment )\npath_noscheme = r\"%(segment_nz_nc)s (?: / %(segment)s )*\" % locals()\n\n#   path-rootless = segment-nz *( \"/\" segment )\npath_rootless = r\"%(segment_nz)s (?: / %(segment)s )*\" % locals()\n\n#   path-empty    = 0<pchar>\npath_empty = r\"\"  # FIXME\n\n#   path          = path-abempty    ; begins with \"/\" or is empty\n#                 / path-absolute   ; begins with \"/\" but not \"//\"\n#                 / path-noscheme   ; begins with a non-colon segment\n#                 / path-rootless   ; begins with a segment\n#                 / path-empty      ; zero characters\npath = r\"\"\"(?: %(path_abempty)s |\n               %(path_absolute)s |\n               %(path_noscheme)s |\n               %(path_rootless)s |\n               %(path_empty)s\n            )\n\"\"\" % locals()\n\n### Query and Fragment\n\n#   query         = *( pchar / \"/\" / \"?\" )\nquery = r\"(?: %(pchar)s | / | \\? )*\" % locals()\n\n#   fragment      = *( pchar / \"/\" / \"?\" )\nfragment = r\"(?: %(pchar)s | / | \\? )*\" % locals()\n\n# URIs\n\n#   hier-part     = \"//\" authority path-abempty\n#                 / path-absolute\n#                 / path-rootless\n#                 / path-empty\nhier_part = r\"\"\"(?: (?: // %(authority)s %(path_abempty)s ) |\n                    %(path_absolute)s |\n                    %(path_rootless)s |\n                    %(path_empty)s\n                )\n\"\"\" % locals()\n\n#   relative-part = \"//\" authority path-abempty\n#                 / path-absolute\n#                 / path-noscheme\n#                 / path-empty\nrelative_part = r\"\"\"(?: (?: // %(authority)s %(path_abempty)s ) |\n                        %(path_absolute)s |\n                        %(path_noscheme)s |\n                        %(path_empty)s\n                    )\n\"\"\" % locals()\n\n# relative-ref  = relative-part [ \"?\" query ] [ \"#\" fragment ]\nrelative_ref = r\"%(relative_part)s (?: \\? %(query)s)? (?: \\# %(fragment)s)?\" % locals(\n)\n\n# URI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\nURI = r\"^(?: %(scheme)s : %(hier_part)s (?: \\? %(query)s )? (?: \\# %(fragment)s )? )$\" % locals(\n)\n\n#   URI-reference = URI / relative-ref\nURI_reference = r\"^(?: %(URI)s | %(relative_ref)s )$\" % locals()\n\n#   absolute-URI  = scheme \":\" hier-part [ \"?\" query ]\nabsolute_URI = r\"^(?: %(scheme)s : %(hier_part)s (?: \\? %(query)s )? )$\" % locals(\n)\n\n\ndef is_uri(uri):\n    return re.match(URI, uri, re.VERBOSE)\n\n\ndef is_uri_reference(uri):\n    return re.match(URI_reference, uri, re.VERBOSE)\n\n\ndef is_absolute_uri(uri):\n    return re.match(absolute_URI, uri, re.VERBOSE)\n", "import oauthlib\nfrom oauthlib.uri_validate import is_absolute_uri\n\nfrom tests.unittest import TestCase\n\n\nclass UriValidateTest(TestCase):\n\n    def test_is_absolute_uri(self):\n\n        self.assertIsNotNone(is_absolute_uri('schema://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path'))\n        self.assertIsNotNone(is_absolute_uri('com.example.bundle.id:/'))\n        self.assertIsNotNone(is_absolute_uri('http://[::1]:38432/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:0001::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:1::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.1:38432/'))\n\n        self.assertIsNone(is_absolute_uri('http://example.com:notaport/path'))\n        self.assertIsNone(is_absolute_uri('wrong'))\n        self.assertIsNone(is_absolute_uri('http://[:1]:38432/path'))\n        self.assertIsNone(is_absolute_uri('http://[abcd:efgh::1]/'))\n"], "fixing_code": ["\"\"\"\nRegex for URIs\n\nThese regex are directly derived from the collected ABNF in RFC3986\n(except for DIGIT, ALPHA and HEXDIG, defined by RFC2234).\n\nThey should be processed with re.VERBOSE.\n\nThanks Mark Nottingham for this code - https://gist.github.com/138549\n\"\"\"\nimport re\n\n# basics\n\nDIGIT = r\"[\\x30-\\x39]\"\n\nALPHA = r\"[\\x41-\\x5A\\x61-\\x7A]\"\n\nHEXDIG = r\"[\\x30-\\x39A-Fa-f]\"\n\n#   pct-encoded   = \"%\" HEXDIG HEXDIG\npct_encoded = r\" %% %(HEXDIG)s %(HEXDIG)s\" % locals()\n\n#   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nunreserved = r\"(?: %(ALPHA)s | %(DIGIT)s | \\- | \\. | _ | ~ )\" % locals()\n\n# gen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\ngen_delims = r\"(?: : | / | \\? | \\# | \\[ | \\] | @ )\"\n\n#   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n#                 / \"*\" / \"+\" / \",\" / \";\" / \"=\"\nsub_delims = r\"\"\"(?: ! | \\$ | & | ' | \\( | \\) |\n                     \\* | \\+ | , | ; | = )\"\"\"\n\n#   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\npchar = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : | @ )\" % locals(\n)\n\n#   reserved      = gen-delims / sub-delims\nreserved = r\"(?: %(gen_delims)s | %(sub_delims)s )\" % locals()\n\n\n# scheme\n\n#   scheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nscheme = r\"%(ALPHA)s (?: %(ALPHA)s | %(DIGIT)s | \\+ | \\- | \\. )*\" % locals()\n\n\n# authority\n\n#   dec-octet     = DIGIT                 ; 0-9\n#                 / %x31-39 DIGIT         ; 10-99\n#                 / \"1\" 2DIGIT            ; 100-199\n#                 / \"2\" %x30-34 DIGIT     ; 200-249\n#                 / \"25\" %x30-35          ; 250-255\ndec_octet = r\"\"\"(?: %(DIGIT)s |\n                    [\\x31-\\x39] %(DIGIT)s |\n                    1 %(DIGIT)s{2} |\n                    2 [\\x30-\\x34] %(DIGIT)s |\n                    25 [\\x30-\\x35]\n                )\n\"\"\" % locals()\n\n#  IPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\nIPv4address = r\"%(dec_octet)s \\. %(dec_octet)s \\. %(dec_octet)s \\. %(dec_octet)s\" % locals(\n)\n\n#   IPv6address\nIPv6address = r\"([A-Fa-f0-9:]+[:$])[A-Fa-f0-9]{1,4}\"\n\n#   IPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\nIPvFuture = r\"v %(HEXDIG)s+ \\. (?: %(unreserved)s | %(sub_delims)s | : )+\" % locals()\n\n#   IP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\nIP_literal = r\"\\[ (?: %(IPv6address)s | %(IPvFuture)s ) \\]\" % locals()\n\n#   reg-name      = *( unreserved / pct-encoded / sub-delims )\nreg_name = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s )*\" % locals()\n\n#   userinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nuserinfo = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | : )\" % locals(\n)\n\n#   host          = IP-literal / IPv4address / reg-name\nhost = r\"(?: %(IP_literal)s | %(IPv4address)s | %(reg_name)s )\" % locals()\n\n#   port          = *DIGIT\nport = r\"(?: %(DIGIT)s )*\" % locals()\n\n#   authority     = [ userinfo \"@\" ] host [ \":\" port ]\nauthority = r\"(?: %(userinfo)s @)? %(host)s (?: : %(port)s)?\" % locals()\n\n# Path\n\n#   segment       = *pchar\nsegment = r\"%(pchar)s*\" % locals()\n\n#   segment-nz    = 1*pchar\nsegment_nz = r\"%(pchar)s+\" % locals()\n\n#   segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \"@\" )\n#                 ; non-zero-length segment without any colon \":\"\nsegment_nz_nc = r\"(?: %(unreserved)s | %(pct_encoded)s | %(sub_delims)s | @ )+\" % locals()\n\n#   path-abempty  = *( \"/\" segment )\npath_abempty = r\"(?: / %(segment)s )*\" % locals()\n\n#   path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath_absolute = r\"/ (?: %(segment_nz)s (?: / %(segment)s )* )?\" % locals()\n\n#   path-noscheme = segment-nz-nc *( \"/\" segment )\npath_noscheme = r\"%(segment_nz_nc)s (?: / %(segment)s )*\" % locals()\n\n#   path-rootless = segment-nz *( \"/\" segment )\npath_rootless = r\"%(segment_nz)s (?: / %(segment)s )*\" % locals()\n\n#   path-empty    = 0<pchar>\npath_empty = r\"\"  # FIXME\n\n#   path          = path-abempty    ; begins with \"/\" or is empty\n#                 / path-absolute   ; begins with \"/\" but not \"//\"\n#                 / path-noscheme   ; begins with a non-colon segment\n#                 / path-rootless   ; begins with a segment\n#                 / path-empty      ; zero characters\npath = r\"\"\"(?: %(path_abempty)s |\n               %(path_absolute)s |\n               %(path_noscheme)s |\n               %(path_rootless)s |\n               %(path_empty)s\n            )\n\"\"\" % locals()\n\n### Query and Fragment\n\n#   query         = *( pchar / \"/\" / \"?\" )\nquery = r\"(?: %(pchar)s | / | \\? )*\" % locals()\n\n#   fragment      = *( pchar / \"/\" / \"?\" )\nfragment = r\"(?: %(pchar)s | / | \\? )*\" % locals()\n\n# URIs\n\n#   hier-part     = \"//\" authority path-abempty\n#                 / path-absolute\n#                 / path-rootless\n#                 / path-empty\nhier_part = r\"\"\"(?: (?: // %(authority)s %(path_abempty)s ) |\n                    %(path_absolute)s |\n                    %(path_rootless)s |\n                    %(path_empty)s\n                )\n\"\"\" % locals()\n\n#   relative-part = \"//\" authority path-abempty\n#                 / path-absolute\n#                 / path-noscheme\n#                 / path-empty\nrelative_part = r\"\"\"(?: (?: // %(authority)s %(path_abempty)s ) |\n                        %(path_absolute)s |\n                        %(path_noscheme)s |\n                        %(path_empty)s\n                    )\n\"\"\" % locals()\n\n# relative-ref  = relative-part [ \"?\" query ] [ \"#\" fragment ]\nrelative_ref = r\"%(relative_part)s (?: \\? %(query)s)? (?: \\# %(fragment)s)?\" % locals(\n)\n\n# URI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\nURI = r\"^(?: %(scheme)s : %(hier_part)s (?: \\? %(query)s )? (?: \\# %(fragment)s )? )$\" % locals(\n)\n\n#   URI-reference = URI / relative-ref\nURI_reference = r\"^(?: %(URI)s | %(relative_ref)s )$\" % locals()\n\n#   absolute-URI  = scheme \":\" hier-part [ \"?\" query ]\nabsolute_URI = r\"^(?: %(scheme)s : %(hier_part)s (?: \\? %(query)s )? )$\" % locals(\n)\n\n\ndef is_uri(uri):\n    return re.match(URI, uri, re.VERBOSE)\n\n\ndef is_uri_reference(uri):\n    return re.match(URI_reference, uri, re.VERBOSE)\n\n\ndef is_absolute_uri(uri):\n    return re.match(absolute_URI, uri, re.VERBOSE)\n", "import unittest\nfrom oauthlib.uri_validate import is_absolute_uri\n\nfrom tests.unittest import TestCase\n\n\nclass UriValidateTest(TestCase):\n\n    def test_is_absolute_uri(self):\n        self.assertIsNotNone(is_absolute_uri('schema://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/path'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443/'))\n        self.assertIsNotNone(is_absolute_uri('https://example.com:443'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com/path'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path'))\n\n    def test_query(self):\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar'))\n        self.assertIsNotNone(is_absolute_uri('http://example.com:80/path?foo=bar&fruit=banana'))\n\n    def test_fragment_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path#foo=bar&fruit=banana'))\n\n    def test_combined_forbidden(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo#bar'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo&bar#fruit'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar#fruit=banana'))\n        self.assertIsNone(is_absolute_uri('http://example.com:80/path?foo=1&bar=2#fruit=banana&bar=foo'))\n\n    def test_custom_scheme(self):\n        self.assertIsNotNone(is_absolute_uri('com.example.bundle.id://'))\n\n    def test_ipv6_bracket(self):\n        self.assertIsNotNone(is_absolute_uri('http://[::1]:38432/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:0001::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[fd01:1::1]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/path'))\n        self.assertIsNotNone(is_absolute_uri('http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]:8080/path'))\n\n    @unittest.skip(\"ipv6 edge-cases not supported\")\n    def test_ipv6_edge_cases(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:7777:8888'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF'))\n        self.assertIsNotNone(is_absolute_uri('http://0123:4567:89ab:cdef:0123:4567:89ab:cdef/path'))\n        self.assertIsNotNone(is_absolute_uri('http://::'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:0db8:0001:0000:0000:0ab9:C0A8:0102'))\n\n    @unittest.skip(\"ipv6 dual ipv4 not supported\")\n    def test_ipv6_dual(self):\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8:3333:4444:5555:6666:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://::11.22.33.44'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::123.123.123.123'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:91.123.4.56'))\n        self.assertIsNotNone(is_absolute_uri('http://::1234:5678:1.2.3.4'))\n        self.assertIsNotNone(is_absolute_uri('http://2001:db8::1234:5678:5.6.7.8'))\n\n    def test_ipv4(self):\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.0.0.1:38432/'))\n        self.assertIsNotNone(is_absolute_uri('http://127.1:38432/'))\n\n    def test_failures(self):\n        self.assertIsNone(is_absolute_uri('http://example.com:notaport/path'))\n        self.assertIsNone(is_absolute_uri('wrong'))\n        self.assertIsNone(is_absolute_uri('http://[:1]:38432/path'))\n        self.assertIsNone(is_absolute_uri('http://[abcd:efgh::1]/'))\n\n    def test_recursive_regex(self):\n        from datetime import datetime\n        t0 = datetime.now()\n        is_absolute_uri('http://[::::::::::::::::::::::::::]/path')\n        t1 = datetime.now()\n        spent = t1 - t0\n        self.assertGreater(0.1, spent.total_seconds(), \"possible recursive loop detected\")\n"], "filenames": ["oauthlib/uri_validate.py", "tests/test_uri_validate.py"], "buggy_code_start_loc": [69, 1], "buggy_code_end_loc": [70, 33], "fixing_code_start_loc": [69, 1], "fixing_code_end_loc": [70, 85], "type": "CWE-20", "message": "OAuthLib is an implementation of the OAuth request-signing logic for Python 3.6+. In OAuthLib versions 3.1.1 until 3.2.1, an attacker providing malicious redirect uri can cause denial of service. An attacker can also leverage usage of `uri_validate` functions depending where it is used. OAuthLib applications using OAuth2.0 provider support or use directly `uri_validate` are affected by this issue. Version 3.2.1 contains a patch. There are no known workarounds.", "other": {"cve": {"id": "CVE-2022-36087", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-09T21:15:08.477", "lastModified": "2022-11-10T03:55:29.917", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OAuthLib is an implementation of the OAuth request-signing logic for Python 3.6+. In OAuthLib versions 3.1.1 until 3.2.1, an attacker providing malicious redirect uri can cause denial of service. An attacker can also leverage usage of `uri_validate` functions depending where it is used. OAuthLib applications using OAuth2.0 provider support or use directly `uri_validate` are affected by this issue. Version 3.2.1 contains a patch. There are no known workarounds."}, {"lang": "es", "value": "OAuthLib es una implementaci\u00f3n de la l\u00f3gica de firma de peticiones OAuth para Python versi\u00f3n 3.6+. En OAuthLib versiones 3.1.1 hasta 3.2.1, un atacante que proporcione una uri de redireccionamiento maliciosa puede causar una denegaci\u00f3n de servicio. Un atacante tambi\u00e9n puede aprovechar el uso de las funciones \"uri_validate\" dependiendo de d\u00f3nde sea usado. Las aplicaciones de OAuthLib que usan el soporte del proveedor OAuth2.0 o que usan directamente \"uri_validate\" est\u00e1n afectadas por este problema. La versi\u00f3n 3.2.1 contiene un parche. No se presentan mitigaciones conocidas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oauthlib_project:oauthlib:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.1.1", "versionEndExcluding": "3.2.1", "matchCriteriaId": "74AFBA22-E09D-416D-ACC2-123CB6C05AA0"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:37:*:*:*:*:*:*:*", "matchCriteriaId": "E30D0E6F-4AE8-4284-8716-991DFA48CC5D"}]}]}], "references": [{"url": "https://github.com/oauthlib/oauthlib/blob/2b8a44855a51ad5a5b0c348a08c2564a2e197ea2/oauthlib/uri_validate.py", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/oauthlib/oauthlib/blob/d4bafd9f1d0eba3766e933b1ac598cbbf37b8914/oauthlib/oauth2/rfc6749/grant_types/base.py#L232", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/oauthlib/oauthlib/commit/2e40b412c844ecc4673c3fa3f72181f228bdbacd", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/oauthlib/oauthlib/releases/tag/v3.2.1", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/oauthlib/oauthlib/security/advisories/GHSA-3pgj-pg6c-r5p7", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QRYLYHE5HWF6R2CRLJFUK4PILR47WXOE/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/oauthlib/oauthlib/commit/2e40b412c844ecc4673c3fa3f72181f228bdbacd"}}