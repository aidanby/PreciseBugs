{"buggy_code": ["/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.4';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)',\n      rsOrdUpper = '\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = object[key],\n          srcValue = source[key],\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */\n    function cloneMap(map, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n      return arrayReduce(array, addMapEntry, new map.constructor);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */\n    function cloneSet(set, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n      return arrayReduce(array, addSetEntry, new set.constructor);\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, cloneFunc, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return cloneMap(object, isDeep, cloneFunc);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return cloneSet(object, isDeep, cloneFunc);\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (reLeadingDot.test(string)) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            result = wait - timeSinceLastCall;\n\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(args) {\n      args.push(undefined, customDefaultsAssignIn);\n      return apply(assignInWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('d\u00e9j\u00e0 vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n", ";(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used to detect when a function becomes hot. */\n  var HOT_COUNT = 150;\n\n  /** Used as the size to cover large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;\n\n  /** `Object#toString` result references. */\n  var funcTag = '[object Function]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]';\n\n  /** Used as a reference to the global object. */\n  var root = (typeof global == 'object' && global) || this;\n\n  /** Used to store lodash to test for bad extensions/shims. */\n  var lodashBizarro = root.lodashBizarro;\n\n  /** Used for native method references. */\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype,\n      numberProto = Number.prototype,\n      stringProto = String.prototype;\n\n  /** Method and object shortcuts. */\n  var phantom = root.phantom,\n      process = root.process,\n      amd = root.define ? define.amd : undefined,\n      args = toArgs([1, 2, 3]),\n      argv = process ? process.argv : undefined,\n      defineProperty = Object.defineProperty,\n      document = phantom ? undefined : root.document,\n      body = root.document ? root.document.body : undefined,\n      create = Object.create,\n      fnToString = funcProto.toString,\n      freeze = Object.freeze,\n      getSymbols = Object.getOwnPropertySymbols,\n      identity = function(value) { return value; },\n      noop = function() {},\n      objToString = objectProto.toString,\n      params = argv,\n      push = arrayProto.push,\n      realm = {},\n      slice = arrayProto.slice,\n      strictArgs = (function() { 'use strict'; return arguments; }(1, 2, 3));\n\n  var ArrayBuffer = root.ArrayBuffer,\n      Buffer = root.Buffer,\n      Map = root.Map,\n      Promise = root.Promise,\n      Proxy = root.Proxy,\n      Set = root.Set,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      WeakMap = root.WeakMap,\n      WeakSet = root.WeakSet;\n\n  var arrayBuffer = ArrayBuffer ? new ArrayBuffer(2) : undefined,\n      map = Map ? new Map : undefined,\n      promise = Promise ? Promise.resolve(1) : undefined,\n      set = Set ? new Set : undefined,\n      symbol = Symbol ? Symbol('a') : undefined,\n      weakMap = WeakMap ? new WeakMap : undefined,\n      weakSet = WeakSet ? new WeakSet : undefined;\n\n  /** Math helpers. */\n  var add = function(x, y) { return x + y; },\n      doubled = function(n) { return n * 2; },\n      isEven = function(n) { return n % 2 == 0; },\n      square = function(n) { return n * n; };\n\n  /** Stub functions. */\n  var stubA = function() { return 'a'; },\n      stubB = function() { return 'b'; },\n      stubC = function() { return 'c'; };\n\n  var stubTrue = function() { return true; },\n      stubFalse = function() { return false; };\n\n  var stubNaN = function() { return NaN; },\n      stubNull = function() { return null; };\n\n  var stubZero = function() { return 0; },\n      stubOne = function() { return 1; },\n      stubTwo = function() { return 2; },\n      stubThree = function() { return 3; },\n      stubFour = function() { return 4; };\n\n  var stubArray = function() { return []; },\n      stubObject = function() { return {}; },\n      stubString = function() { return ''; };\n\n  /** List of Latin Unicode letters. */\n  var burredLetters = [\n    // Latin-1 Supplement letters.\n    '\\xc0', '\\xc1', '\\xc2', '\\xc3', '\\xc4', '\\xc5', '\\xc6', '\\xc7', '\\xc8', '\\xc9', '\\xca', '\\xcb', '\\xcc', '\\xcd', '\\xce', '\\xcf',\n    '\\xd0', '\\xd1', '\\xd2', '\\xd3', '\\xd4', '\\xd5', '\\xd6',         '\\xd8', '\\xd9', '\\xda', '\\xdb', '\\xdc', '\\xdd', '\\xde', '\\xdf',\n    '\\xe0', '\\xe1', '\\xe2', '\\xe3', '\\xe4', '\\xe5', '\\xe6', '\\xe7', '\\xe8', '\\xe9', '\\xea', '\\xeb', '\\xec', '\\xed', '\\xee', '\\xef',\n    '\\xf0', '\\xf1', '\\xf2', '\\xf3', '\\xf4', '\\xf5', '\\xf6',         '\\xf8', '\\xf9', '\\xfa', '\\xfb', '\\xfc', '\\xfd', '\\xfe', '\\xff',\n    // Latin Extended-A letters.\n    '\\u0100', '\\u0101', '\\u0102', '\\u0103', '\\u0104', '\\u0105', '\\u0106', '\\u0107', '\\u0108', '\\u0109', '\\u010a', '\\u010b', '\\u010c', '\\u010d', '\\u010e', '\\u010f',\n    '\\u0110', '\\u0111', '\\u0112', '\\u0113', '\\u0114', '\\u0115', '\\u0116', '\\u0117', '\\u0118', '\\u0119', '\\u011a', '\\u011b', '\\u011c', '\\u011d', '\\u011e', '\\u011f',\n    '\\u0120', '\\u0121', '\\u0122', '\\u0123', '\\u0124', '\\u0125', '\\u0126', '\\u0127', '\\u0128', '\\u0129', '\\u012a', '\\u012b', '\\u012c', '\\u012d', '\\u012e', '\\u012f',\n    '\\u0130', '\\u0131', '\\u0132', '\\u0133', '\\u0134', '\\u0135', '\\u0136', '\\u0137', '\\u0138', '\\u0139', '\\u013a', '\\u013b', '\\u013c', '\\u013d', '\\u013e', '\\u013f',\n    '\\u0140', '\\u0141', '\\u0142', '\\u0143', '\\u0144', '\\u0145', '\\u0146', '\\u0147', '\\u0148', '\\u0149', '\\u014a', '\\u014b', '\\u014c', '\\u014d', '\\u014e', '\\u014f',\n    '\\u0150', '\\u0151', '\\u0152', '\\u0153', '\\u0154', '\\u0155', '\\u0156', '\\u0157', '\\u0158', '\\u0159', '\\u015a', '\\u015b', '\\u015c', '\\u015d', '\\u015e', '\\u015f',\n    '\\u0160', '\\u0161', '\\u0162', '\\u0163', '\\u0164', '\\u0165', '\\u0166', '\\u0167', '\\u0168', '\\u0169', '\\u016a', '\\u016b', '\\u016c', '\\u016d', '\\u016e', '\\u016f',\n    '\\u0170', '\\u0171', '\\u0172', '\\u0173', '\\u0174', '\\u0175', '\\u0176', '\\u0177', '\\u0178', '\\u0179', '\\u017a', '\\u017b', '\\u017c', '\\u017d', '\\u017e', '\\u017f'\n  ];\n\n  /** List of combining diacritical marks. */\n  var comboMarks = [\n    '\\u0300', '\\u0301', '\\u0302', '\\u0303', '\\u0304', '\\u0305', '\\u0306', '\\u0307', '\\u0308', '\\u0309', '\\u030a', '\\u030b', '\\u030c', '\\u030d', '\\u030e', '\\u030f',\n    '\\u0310', '\\u0311', '\\u0312', '\\u0313', '\\u0314', '\\u0315', '\\u0316', '\\u0317', '\\u0318', '\\u0319', '\\u031a', '\\u031b', '\\u031c', '\\u031d', '\\u031e', '\\u031f',\n    '\\u0320', '\\u0321', '\\u0322', '\\u0323', '\\u0324', '\\u0325', '\\u0326', '\\u0327', '\\u0328', '\\u0329', '\\u032a', '\\u032b', '\\u032c', '\\u032d', '\\u032e', '\\u032f',\n    '\\u0330', '\\u0331', '\\u0332', '\\u0333', '\\u0334', '\\u0335', '\\u0336', '\\u0337', '\\u0338', '\\u0339', '\\u033a', '\\u033b', '\\u033c', '\\u033d', '\\u033e', '\\u033f',\n    '\\u0340', '\\u0341', '\\u0342', '\\u0343', '\\u0344', '\\u0345', '\\u0346', '\\u0347', '\\u0348', '\\u0349', '\\u034a', '\\u034b', '\\u034c', '\\u034d', '\\u034e', '\\u034f',\n    '\\u0350', '\\u0351', '\\u0352', '\\u0353', '\\u0354', '\\u0355', '\\u0356', '\\u0357', '\\u0358', '\\u0359', '\\u035a', '\\u035b', '\\u035c', '\\u035d', '\\u035e', '\\u035f',\n    '\\u0360', '\\u0361', '\\u0362', '\\u0363', '\\u0364', '\\u0365', '\\u0366', '\\u0367', '\\u0368', '\\u0369', '\\u036a', '\\u036b', '\\u036c', '\\u036d', '\\u036e', '\\u036f',\n    '\\ufe20', '\\ufe21', '\\ufe22', '\\ufe23'\n  ];\n\n  /** List of converted Latin Unicode letters. */\n  var deburredLetters = [\n    // Converted Latin-1 Supplement letters.\n    'A',  'A', 'A', 'A', 'A', 'A', 'Ae', 'C',  'E', 'E', 'E', 'E', 'I', 'I', 'I',\n    'I',  'D', 'N', 'O', 'O', 'O', 'O',  'O',  'O', 'U', 'U', 'U', 'U', 'Y', 'Th',\n    'ss', 'a', 'a', 'a', 'a', 'a', 'a',  'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i',  'i',\n    'i',  'd', 'n', 'o', 'o', 'o', 'o',  'o',  'o', 'u', 'u', 'u', 'u', 'y', 'th', 'y',\n    // Converted Latin Extended-A letters.\n    'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c',\n    'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e',\n    'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h',\n    'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j',\n    'K', 'k', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l',\n    'N', 'n', 'N', 'n', 'N', 'n', \"'n\", 'N', 'n',\n    'O', 'o', 'O', 'o', 'O', 'o', 'Oe', 'oe',\n    'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's',\n    'T', 't', 'T', 't', 'T', 't',\n    'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u',\n    'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's'\n  ];\n\n  /** Used to provide falsey values to methods. */\n  var falsey = [, null, undefined, false, 0, NaN, ''];\n\n  /** Used to specify the emoji style glyph variant of characters. */\n  var emojiVar = '\\ufe0f';\n\n  /** Used to provide empty values to methods. */\n  var empties = [[], {}].concat(falsey.slice(1));\n\n  /** Used to test error objects. */\n  var errors = [\n    new Error,\n    new EvalError,\n    new RangeError,\n    new ReferenceError,\n    new SyntaxError,\n    new TypeError,\n    new URIError\n  ];\n\n  /** List of fitzpatrick modifiers. */\n  var fitzModifiers = [\n    '\\ud83c\\udffb',\n    '\\ud83c\\udffc',\n    '\\ud83c\\udffd',\n    '\\ud83c\\udffe',\n    '\\ud83c\\udfff'\n  ];\n\n  /** Used to provide primitive values to methods. */\n  var primitives = [null, undefined, false, true, 1, NaN, 'a'];\n\n  /** Used to check whether methods support typed arrays. */\n  var typedArrays = [\n    'Float32Array',\n    'Float64Array',\n    'Int8Array',\n    'Int16Array',\n    'Int32Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'Uint16Array',\n    'Uint32Array'\n  ];\n\n  /** Used to check whether methods support array views. */\n  var arrayViews = typedArrays.concat('DataView');\n\n  /** The file path of the lodash file to test. */\n  var filePath = (function() {\n    var min = 2,\n        result = params || [];\n\n    if (phantom) {\n      min = 0;\n      result = params = phantom.args || require('system').args;\n    }\n    var last = result[result.length - 1];\n    result = (result.length > min && !/test(?:\\.js)?$/.test(last)) ? last : '../lodash.js';\n\n    if (!amd) {\n      try {\n        result = require('fs').realpathSync(result);\n      } catch (e) {}\n\n      try {\n        result = require.resolve(result);\n      } catch (e) {}\n    }\n    return result;\n  }());\n\n  /** The `ui` object. */\n  var ui = root.ui || (root.ui = {\n    'buildPath': filePath,\n    'loaderPath': '',\n    'isModularize': /\\b(?:amd|commonjs|es|node|npm|(index|main)\\.js)\\b/.test(filePath),\n    'isStrict': /\\bes\\b/.test(filePath) || 'default' in require(filePath),\n    'urlParams': {}\n  });\n\n  /** The basename of the lodash file to test. */\n  var basename = /[\\w.-]+$/.exec(filePath)[0];\n\n  /** Used to indicate testing a modularized build. */\n  var isModularize = ui.isModularize;\n\n  /** Detect if testing `npm` modules. */\n  var isNpm = isModularize && /\\bnpm\\b/.test([ui.buildPath, ui.urlParams.build]);\n\n  /** Detect if running in PhantomJS. */\n  var isPhantom = phantom || (typeof callPhantom == 'function');\n\n  /** Detect if lodash is in strict mode. */\n  var isStrict = ui.isStrict;\n\n  /*--------------------------------------------------------------------------*/\n\n  // Leak to avoid sporadic `noglobals` fails on Edge in Sauce Labs.\n  root.msWDfn = undefined;\n\n  // Assign `setTimeout` to itself to avoid being flagged as a leak.\n  setProperty(root, 'setTimeout', setTimeout);\n\n  // Exit early if going to run tests in a PhantomJS web page.\n  if (phantom && isModularize) {\n    var page = require('webpage').create();\n\n    page.onCallback = function(details) {\n      var coverage = details.coverage;\n      if (coverage) {\n        var fs = require('fs'),\n            cwd = fs.workingDirectory,\n            sep = fs.separator;\n\n        fs.write([cwd, 'coverage', 'coverage.json'].join(sep), JSON.stringify(coverage));\n      }\n      phantom.exit(details.failed ? 1 : 0);\n    };\n\n    page.onConsoleMessage = function(message) {\n      console.log(message);\n    };\n\n    page.onInitialized = function() {\n      page.evaluate(function() {\n        document.addEventListener('DOMContentLoaded', function() {\n          QUnit.done(function(details) {\n            details.coverage = window.__coverage__;\n            callPhantom(details);\n          });\n        });\n      });\n    };\n\n    page.open(filePath, function(status) {\n      if (status != 'success') {\n        console.log('PhantomJS failed to load page: ' + filePath);\n        phantom.exit(1);\n      }\n    });\n\n    console.log('test.js invoked with arguments: ' + JSON.stringify(slice.call(params)));\n    return;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /** Used to test Web Workers. */\n  var Worker = !(ui.isForeign || ui.isSauceLabs || isModularize) &&\n    (document && document.origin != 'null') && root.Worker;\n\n  /** Used to test host objects in IE. */\n  try {\n    var xml = new ActiveXObject('Microsoft.XMLDOM');\n  } catch (e) {}\n\n  /** Poison the free variable `root` in Node.js */\n  try {\n    defineProperty(global.root, 'root', {\n      'configurable': false,\n      'enumerable': false,\n      'get': function() { throw new ReferenceError; }\n    });\n  } catch (e) {}\n\n  /** Load QUnit and extras. */\n  var QUnit = root.QUnit || require('qunit-extras');\n\n  /** Load stable Lodash. */\n  var lodashStable = root.lodashStable;\n  if (!lodashStable) {\n    try {\n      lodashStable = interopRequire('../node_modules/lodash/lodash.js');\n    } catch (e) {\n      console.log('Error: The stable lodash dev dependency should be at least a version behind master branch.');\n      return;\n    }\n    lodashStable = lodashStable.noConflict();\n  }\n\n  /** The `lodash` function to test. */\n  var _ = root._ || (root._ = interopRequire(filePath));\n\n  /** Used to test pseudo private map caches. */\n  var mapCaches = (function() {\n    var MapCache = _.memoize.Cache;\n    var result = {\n      'Hash': new MapCache().__data__.hash.constructor,\n      'MapCache': MapCache\n    };\n    _.isMatchWith({ 'a': 1 }, { 'a': 1 }, function() {\n      var stack = lodashStable.last(arguments);\n      result.ListCache = stack.__data__.constructor;\n      result.Stack = stack.constructor;\n    });\n    return result;\n  }());\n\n  /** Used to detect instrumented istanbul code coverage runs. */\n  var coverage = root.__coverage__ || root[lodashStable.find(lodashStable.keys(root), function(key) {\n    return /^(?:\\$\\$cov_\\d+\\$\\$)$/.test(key);\n  })];\n\n  /** Used to test async functions. */\n  var asyncFunc = lodashStable.attempt(function() {\n    return Function('return async () => {}');\n  });\n\n  /** Used to test generator functions. */\n  var genFunc = lodashStable.attempt(function() {\n    return Function('return function*(){}');\n  });\n\n  /** Used to restore the `_` reference. */\n  var oldDash = root._;\n\n  /**\n   * Used to check for problems removing whitespace. For a whitespace reference,\n   * see [V8's unit test](https://code.google.com/p/v8/source/browse/branches/bleeding_edge/test/mjsunit/whitespaces.js).\n   */\n  var whitespace = lodashStable.filter([\n    // Basic whitespace characters.\n    ' ', '\\t', '\\x0b', '\\f', '\\xa0', '\\ufeff',\n\n    // Line terminators.\n    '\\n', '\\r', '\\u2028', '\\u2029',\n\n    // Unicode category \"Zs\" space separators.\n    '\\u1680', '\\u180e', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005',\n    '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u202f', '\\u205f', '\\u3000'\n  ],\n  function(chr) { return /\\s/.exec(chr); })\n  .join('');\n\n  /**\n   * Creates a custom error object.\n   *\n   * @private\n   * @constructor\n   * @param {string} message The error message.\n   */\n  function CustomError(message) {\n    this.name = 'CustomError';\n    this.message = message;\n  }\n\n  CustomError.prototype = lodashStable.create(Error.prototype, {\n    'constructor': CustomError\n  });\n\n  /**\n   * Removes all own enumerable string keyed properties from a given object.\n   *\n   * @private\n   * @param {Object} object The object to empty.\n   */\n  function emptyObject(object) {\n    lodashStable.forOwn(object, function(value, key, object) {\n      delete object[key];\n    });\n  }\n\n  /**\n   * Extracts the unwrapped value from its wrapper.\n   *\n   * @private\n   * @param {Object} wrapper The wrapper to unwrap.\n   * @returns {*} Returns the unwrapped value.\n   */\n  function getUnwrappedValue(wrapper) {\n    var index = -1,\n        actions = wrapper.__actions__,\n        length = actions.length,\n        result = wrapper.__wrapped__;\n\n    while (++index < length) {\n      var args = [result],\n          action = actions[index];\n\n      push.apply(args, action.args);\n      result = action.func.apply(action.thisArg, args);\n    }\n    return result;\n  }\n\n  /**\n   * Loads the module of `id`. If the module has an `exports.default`, the\n   * exported default value is returned as the resolved module.\n   *\n   * @private\n   * @param {string} id The identifier of the module to resolve.\n   * @returns {*} Returns the resolved module.\n   */\n  function interopRequire(id) {\n    var result = require(id);\n    return 'default' in result ? result['default'] : result;\n  }\n\n  /**\n   * Sets a non-enumerable property value on `object`.\n   *\n   * Note: This function is used to avoid a bug in older versions of V8 where\n   * overwriting non-enumerable built-ins makes them enumerable.\n   * See https://code.google.com/p/v8/issues/detail?id=1623\n   *\n   * @private\n   * @param {Object} object The object modify.\n   * @param {string} key The name of the property to set.\n   * @param {*} value The property value.\n   */\n  function setProperty(object, key, value) {\n    try {\n      defineProperty(object, key, {\n        'configurable': true,\n        'enumerable': false,\n        'writable': true,\n        'value': value\n      });\n    } catch (e) {\n      object[key] = value;\n    }\n    return object;\n  }\n\n  /**\n   * Skips a given number of tests with a passing result.\n   *\n   * @private\n   * @param {Object} assert The QUnit assert object.\n   * @param {number} [count=1] The number of tests to skip.\n   */\n  function skipAssert(assert, count) {\n    count || (count = 1);\n    while (count--) {\n      assert.ok(true, 'test skipped');\n    }\n  }\n\n  /**\n   * Converts `array` to an `arguments` object.\n   *\n   * @private\n   * @param {Array} array The array to convert.\n   * @returns {Object} Returns the converted `arguments` object.\n   */\n  function toArgs(array) {\n    return (function() { return arguments; }.apply(undefined, array));\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Add bizarro values.\n  (function() {\n    if (document || (typeof require != 'function')) {\n      return;\n    }\n    var nativeString = fnToString.call(toString),\n        reToString = /toString/g;\n\n    function createToString(funcName) {\n      return lodashStable.constant(nativeString.replace(reToString, funcName));\n    }\n\n    // Allow bypassing native checks.\n    setProperty(funcProto, 'toString', function wrapper() {\n      setProperty(funcProto, 'toString', fnToString);\n      var result = lodashStable.has(this, 'toString') ? this.toString() : fnToString.call(this);\n      setProperty(funcProto, 'toString', wrapper);\n      return result;\n    });\n\n    // Add prototype extensions.\n    funcProto._method = noop;\n\n    // Set bad shims.\n    setProperty(Object, 'create', undefined);\n    setProperty(Object, 'getOwnPropertySymbols', undefined);\n\n    var _propertyIsEnumerable = objectProto.propertyIsEnumerable;\n    setProperty(objectProto, 'propertyIsEnumerable', function(key) {\n      return !(key == 'valueOf' && this && this.valueOf === 1) && _propertyIsEnumerable.call(this, key);\n    });\n\n    if (Buffer) {\n      defineProperty(root, 'Buffer', {\n        'configurable': true,\n        'enumerable': true,\n        'get': function get() {\n          var caller = get.caller,\n              name = caller ? caller.name : '';\n\n          if (!(name == 'runInContext' || name.length == 1 || /\\b_\\.isBuffer\\b/.test(caller))) {\n            return Buffer;\n          }\n        }\n      });\n    }\n    if (Map) {\n      setProperty(root, 'Map', (function() {\n        var count = 0;\n        return function() {\n          if (count++) {\n            return new Map;\n          }\n          setProperty(root, 'Map', Map);\n          return {};\n        };\n      }()));\n\n      setProperty(root.Map, 'toString', createToString('Map'));\n    }\n    setProperty(root, 'Promise', noop);\n    setProperty(root, 'Set', noop);\n    setProperty(root, 'Symbol', undefined);\n    setProperty(root, 'WeakMap', noop);\n\n    // Fake `WinRTError`.\n    setProperty(root, 'WinRTError', Error);\n\n    // Clear cache so lodash can be reloaded.\n    emptyObject(require.cache);\n\n    // Load lodash and expose it to the bad extensions/shims.\n    lodashBizarro = interopRequire(filePath);\n    root._ = oldDash;\n\n    // Restore built-in methods.\n    setProperty(Object, 'create', create);\n    setProperty(objectProto, 'propertyIsEnumerable', _propertyIsEnumerable);\n    setProperty(root, 'Buffer', Buffer);\n\n    if (getSymbols) {\n      Object.getOwnPropertySymbols = getSymbols;\n    } else {\n      delete Object.getOwnPropertySymbols;\n    }\n    if (Map) {\n      setProperty(root, 'Map', Map);\n    } else {\n      delete root.Map;\n    }\n    if (Promise) {\n      setProperty(root, 'Promise', Promise);\n    } else {\n      delete root.Promise;\n    }\n    if (Set) {\n      setProperty(root, 'Set', Set);\n    } else {\n      delete root.Set;\n    }\n    if (Symbol) {\n      setProperty(root, 'Symbol', Symbol);\n    } else {\n      delete root.Symbol;\n    }\n    if (WeakMap) {\n      setProperty(root, 'WeakMap', WeakMap);\n    } else {\n      delete root.WeakMap;\n    }\n    delete root.WinRTError;\n    delete funcProto._method;\n  }());\n\n  // Add other realm values from the `vm` module.\n  lodashStable.attempt(function() {\n    lodashStable.assign(realm, require('vm').runInNewContext([\n      '(function() {',\n      '  var noop = function() {},',\n      '      root = this;',\n      '',\n      '  var object = {',\n      \"    'ArrayBuffer': root.ArrayBuffer,\",\n      \"    'arguments': (function() { return arguments; }(1, 2, 3)),\",\n      \"    'array': [1],\",\n      \"    'arrayBuffer': root.ArrayBuffer ? new root.ArrayBuffer : undefined,\",\n      \"    'boolean': Object(false),\",\n      \"    'date': new Date,\",\n      \"    'errors': [new Error, new EvalError, new RangeError, new ReferenceError, new SyntaxError, new TypeError, new URIError],\",\n      \"    'function': noop,\",\n      \"    'map': root.Map ? new root.Map : undefined,\",\n      \"    'nan': NaN,\",\n      \"    'null': null,\",\n      \"    'number': Object(0),\",\n      \"    'object': { 'a': 1 },\",\n      \"    'promise': root.Promise ? Promise.resolve(1) : undefined,\",\n      \"    'regexp': /x/,\",\n      \"    'set': root.Set ? new root.Set : undefined,\",\n      \"    'string': Object('a'),\",\n      \"    'symbol': root.Symbol ? root.Symbol() : undefined,\",\n      \"    'undefined': undefined,\",\n      \"    'weakMap': root.WeakMap ? new root.WeakMap : undefined,\",\n      \"    'weakSet': root.WeakSet ? new root.WeakSet : undefined\",\n      '  };',\n      '',\n      \"  ['\" + arrayViews.join(\"', '\") + \"'].forEach(function(type) {\",\n      '    var Ctor = root[type]',\n      '    object[type] = Ctor;',\n      '    object[type.toLowerCase()] = Ctor ? new Ctor(new ArrayBuffer(24)) : undefined;',\n      '  });',\n      '',\n      '  return object;',\n      '}());'\n    ].join('\\n')));\n  });\n\n  // Add other realm values from an iframe.\n  lodashStable.attempt(function() {\n    _._realm = realm;\n\n    var iframe = document.createElement('iframe');\n    iframe.frameBorder = iframe.height = iframe.width = 0;\n    body.appendChild(iframe);\n\n    var idoc = (idoc = iframe.contentDocument || iframe.contentWindow).document || idoc;\n    idoc.write([\n      '<html>',\n      '<body>',\n      '<script>',\n      'var _ = parent._,',\n      '    noop = function() {},',\n      '    root = this;',\n      '',\n      'var object = {',\n      \"  'ArrayBuffer': root.ArrayBuffer,\",\n      \"  'arguments': (function() { return arguments; }(1, 2, 3)),\",\n      \"  'array': [1],\",\n      \"  'arrayBuffer': root.ArrayBuffer ? new root.ArrayBuffer : undefined,\",\n      \"  'boolean': Object(false),\",\n      \"  'date': new Date,\",\n      \"  'element': document.body,\",\n      \"  'errors': [new Error, new EvalError, new RangeError, new ReferenceError, new SyntaxError, new TypeError, new URIError],\",\n      \"  'function': noop,\",\n      \"  'map': root.Map ? new root.Map : undefined,\",\n      \"  'nan': NaN,\",\n      \"  'null': null,\",\n      \"  'number': Object(0),\",\n      \"  'object': { 'a': 1 },\",\n      \"  'promise': root.Promise ? Promise.resolve(1) : undefined,\",\n      \"  'regexp': /x/,\",\n      \"  'set': root.Set ? new root.Set : undefined,\",\n      \"  'string': Object('a'),\",\n      \"  'symbol': root.Symbol ? root.Symbol() : undefined,\",\n      \"  'undefined': undefined,\",\n      \"  'weakMap': root.WeakMap ? new root.WeakMap : undefined,\",\n      \"  'weakSet': root.WeakSet ? new root.WeakSet : undefined\",\n      '};',\n      '',\n      \"_.each(['\" + arrayViews.join(\"', '\") + \"'], function(type) {\",\n      '  var Ctor = root[type];',\n      '  object[type] = Ctor;',\n      '  object[type.toLowerCase()] = Ctor ? new Ctor(new ArrayBuffer(24)) : undefined;',\n      '});',\n      '',\n      '_.assign(_._realm, object);',\n      '</script>',\n      '</body>',\n      '</html>'\n    ].join('\\n'));\n\n    idoc.close();\n    delete _._realm;\n  });\n\n  // Add a web worker.\n  lodashStable.attempt(function() {\n    var worker = new Worker('./asset/worker.js?t=' + (+new Date));\n    worker.addEventListener('message', function(e) {\n      _._VERSION = e.data || '';\n    }, false);\n\n    worker.postMessage(ui.buildPath);\n  });\n\n  // Expose internal modules for better code coverage.\n  lodashStable.attempt(function() {\n    var path = require('path'),\n        basePath = path.dirname(filePath);\n\n    if (isModularize && !(amd || isNpm)) {\n      lodashStable.each([\n        'baseEach',\n        'isIndex',\n        'isIterateeCall',\n        'memoizeCapped'\n      ], function(funcName) {\n        _['_' + funcName] = interopRequire(path.join(basePath, '_' + funcName));\n      });\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  if (params) {\n    console.log('Running lodash tests.');\n    console.log('test.js invoked with arguments: ' + JSON.stringify(slice.call(params)));\n  }\n\n  QUnit.module(basename);\n\n  (function() {\n    QUnit.test('should support loading ' + basename + ' as the \"lodash\" module', function(assert) {\n      assert.expect(1);\n\n      if (amd) {\n        assert.strictEqual((lodashModule || {}).moduleName, 'lodash');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should support loading ' + basename + ' with the Require.js \"shim\" configuration option', function(assert) {\n      assert.expect(1);\n\n      if (amd && lodashStable.includes(ui.loaderPath, 'requirejs')) {\n        assert.strictEqual((shimmedModule || {}).moduleName, 'shimmed');\n      } else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should support loading ' + basename + ' as the \"underscore\" module', function(assert) {\n      assert.expect(1);\n\n      if (amd) {\n        assert.strictEqual((underscoreModule || {}).moduleName, 'underscore');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should support loading ' + basename + ' in a web worker', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      if (Worker) {\n        var limit = 30000 / QUnit.config.asyncRetries,\n            start = +new Date;\n\n        var attempt = function() {\n          var actual = _._VERSION;\n          if ((new Date - start) < limit && typeof actual != 'string') {\n            setTimeout(attempt, 16);\n            return;\n          }\n          assert.strictEqual(actual, _.VERSION);\n          done();\n        };\n\n        attempt();\n      }\n      else {\n        skipAssert(assert);\n        done();\n      }\n    });\n\n    QUnit.test('should not add `Function.prototype` extensions to lodash', function(assert) {\n      assert.expect(1);\n\n      if (lodashBizarro) {\n        assert.notOk('_method' in lodashBizarro);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should avoid non-native built-ins', function(assert) {\n      assert.expect(6);\n\n      function message(lodashMethod, nativeMethod) {\n        return '`' + lodashMethod + '` should avoid overwritten native `' + nativeMethod + '`';\n      }\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var object = { 'a': 1 },\n          otherObject = { 'b': 2 },\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(object));\n\n      if (lodashBizarro) {\n        try {\n          var actual = lodashBizarro.create(Foo.prototype);\n        } catch (e) {\n          actual = null;\n        }\n        var label = message('_.create', 'Object.create');\n        assert.ok(actual instanceof Foo, label);\n\n        try {\n          actual = [\n            lodashBizarro.difference([object, otherObject], largeArray),\n            lodashBizarro.intersection(largeArray, [object]),\n            lodashBizarro.uniq(largeArray)\n          ];\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.difference`, `_.intersection`, and `_.uniq', 'Map');\n        assert.deepEqual(actual, [[otherObject], [object], [object]], label);\n\n        try {\n          if (Symbol) {\n            object[symbol] = {};\n          }\n          actual = [\n            lodashBizarro.clone(object),\n            lodashBizarro.cloneDeep(object)\n          ];\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.clone` and `_.cloneDeep', 'Object.getOwnPropertySymbols');\n        assert.deepEqual(actual, [object, object], label);\n\n        try {\n          // Avoid buggy symbol detection in Babel's `_typeof` helper.\n          var symObject = setProperty(Object(symbol), 'constructor', Object);\n          actual = [\n            Symbol ? lodashBizarro.clone(symObject) : {},\n            Symbol ? lodashBizarro.isEqual(symObject, Object(symbol)) : false,\n            Symbol ? lodashBizarro.toString(symObject) : ''\n          ];\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.clone`, `_.isEqual`, and `_.toString', 'Symbol');\n        assert.deepEqual(actual, [{}, false, ''], label);\n\n        try {\n          var map = new lodashBizarro.memoize.Cache;\n          actual = map.set('a', 1).get('a');\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.memoize.Cache', 'Map');\n        assert.deepEqual(actual, 1, label);\n\n        try {\n          map = new (Map || Object);\n          if (Symbol && Symbol.iterator) {\n            map[Symbol.iterator] = null;\n          }\n          actual = lodashBizarro.toArray(map);\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.toArray', 'Map');\n        assert.deepEqual(actual, [], label);\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('isIndex');\n\n  (function() {\n    var func = _._isIndex;\n\n    QUnit.test('should return `true` for indexes', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        var values = [[0], ['0'], ['1'], [3, 4], [MAX_SAFE_INTEGER - 1]],\n            expected = lodashStable.map(values, stubTrue);\n\n        var actual = lodashStable.map(values, function(args) {\n          return func.apply(undefined, args);\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-indexes', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        var values = [['1abc'], ['07'], ['0001'], [-1], [3, 3], [1.1], [MAX_SAFE_INTEGER]],\n            expected = lodashStable.map(values, stubFalse);\n\n        var actual = lodashStable.map(values, function(args) {\n          return func.apply(undefined, args);\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('isIterateeCall');\n\n  (function() {\n    var array = [1],\n        func = _._isIterateeCall,\n        object =  { 'a': 1 };\n\n    QUnit.test('should return `true` for iteratee calls', function(assert) {\n      assert.expect(3);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      if (func) {\n        assert.strictEqual(func(1, 0, array), true);\n        assert.strictEqual(func(1, 'a', object), true);\n        assert.strictEqual(func(1, 'a', new Foo), true);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should return `false` for non-iteratee calls', function(assert) {\n      assert.expect(4);\n\n      if (func) {\n        assert.strictEqual(func(2, 0, array), false);\n        assert.strictEqual(func(1, 1.1, array), false);\n        assert.strictEqual(func(1, 0, { 'length': MAX_SAFE_INTEGER + 1 }), false);\n        assert.strictEqual(func(1, 'b', object), false);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should work with `NaN` values', function(assert) {\n      assert.expect(2);\n\n      if (func) {\n        assert.strictEqual(func(NaN, 0, [NaN]), true);\n        assert.strictEqual(func(NaN, 'a', { 'a': NaN }), true);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should not error when `index` is an object without a `toString` method', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        try {\n          var actual = func(1, { 'toString': null }, [1]);\n        } catch (e) {\n          var message = e.message;\n        }\n        assert.strictEqual(actual, false, message || '');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('map caches');\n\n  (function() {\n    var keys = [null, undefined, false, true, 1, -Infinity, NaN, {}, 'a', symbol || noop];\n\n    var pairs = lodashStable.map(keys, function(key, index) {\n      var lastIndex = keys.length - 1;\n      return [key, keys[lastIndex - index]];\n    });\n\n    function createCaches(pairs) {\n      var largeStack = new mapCaches.Stack(pairs),\n          length = pairs ? pairs.length : 0;\n\n      lodashStable.times(LARGE_ARRAY_SIZE - length, function() {\n        largeStack.set({}, {});\n      });\n\n      return {\n        'hashes': new mapCaches.Hash(pairs),\n        'list caches': new mapCaches.ListCache(pairs),\n        'map caches': new mapCaches.MapCache(pairs),\n        'stack caches': new mapCaches.Stack(pairs),\n        'large stacks': largeStack\n      };\n    }\n\n    lodashStable.forOwn(createCaches(pairs), function(cache, kind) {\n      var isLarge = /^large/.test(kind);\n\n      QUnit.test('should implement a `Map` interface for ' + kind, function(assert) {\n        assert.expect(83);\n\n        lodashStable.each(keys, function(key, index) {\n          var value = pairs[index][1];\n\n          assert.deepEqual(cache.get(key), value);\n          assert.strictEqual(cache.has(key), true);\n          assert.strictEqual(cache.delete(key), true);\n          assert.strictEqual(cache.has(key), false);\n          assert.strictEqual(cache.get(key), undefined);\n          assert.strictEqual(cache.delete(key), false);\n          assert.strictEqual(cache.set(key, value), cache);\n          assert.strictEqual(cache.has(key), true);\n        });\n\n        assert.strictEqual(cache.size, isLarge ? LARGE_ARRAY_SIZE : keys.length);\n        assert.strictEqual(cache.clear(), undefined);\n        assert.ok(lodashStable.every(keys, function(key) {\n          return !cache.has(key);\n        }));\n      });\n    });\n\n    lodashStable.forOwn(createCaches(), function(cache, kind) {\n      QUnit.test('should support changing values of ' + kind, function(assert) {\n        assert.expect(10);\n\n        lodashStable.each(keys, function(key) {\n          cache.set(key, 1).set(key, 2);\n          assert.strictEqual(cache.get(key), 2);\n        });\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash constructor');\n\n  (function() {\n    var values = empties.concat(true, 1, 'a'),\n        expected = lodashStable.map(values, stubTrue);\n\n    QUnit.test('should create a new instance when called without the `new` operator', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = lodashStable.map(values, function(value) {\n          return _(value) instanceof _;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return the given `lodash` instances', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = lodashStable.map(values, function(value) {\n          var wrapped = _(value);\n          return _(wrapped) === wrapped;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should convert foreign wrapped values to `lodash` instances', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm && lodashBizarro) {\n        var actual = lodashStable.map(values, function(value) {\n          var wrapped = _(lodashBizarro(value)),\n              unwrapped = wrapped.value();\n\n          return wrapped instanceof _ &&\n            ((unwrapped === value) || (unwrapped !== unwrapped && value !== value));\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.add');\n\n  (function() {\n    QUnit.test('should add two numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.add(6, 4), 10);\n      assert.strictEqual(_.add(-6, 4), -2);\n      assert.strictEqual(_.add(-6, -4), -10);\n    });\n\n    QUnit.test('should not coerce arguments to numbers', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.add('6', '4'), '64');\n      assert.strictEqual(_.add('x', 'y'), 'xy');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.after');\n\n  (function() {\n    function after(n, times) {\n      var count = 0;\n      lodashStable.times(times, _.after(n, function() { count++; }));\n      return count;\n    }\n\n    QUnit.test('should create a function that invokes `func` after `n` calls', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(after(5, 5), 1, 'after(n) should invoke `func` after being called `n` times');\n      assert.strictEqual(after(5, 4), 0, 'after(n) should not invoke `func` before being called `n` times');\n      assert.strictEqual(after(0, 0), 0, 'after(0) should not invoke `func` immediately');\n      assert.strictEqual(after(0, 1), 1, 'after(0) should invoke `func` when called once');\n    });\n\n    QUnit.test('should coerce `n` values of `NaN` to `0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(after(NaN, 1), 1);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(2);\n\n      var after = _.after(1, function(assert) { return ++this.count; }),\n          object = { 'after': after, 'count': 0 };\n\n      object.after();\n      assert.strictEqual(object.after(), 2);\n      assert.strictEqual(object.count, 2);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.ary');\n\n  (function() {\n    function fn(a, b, c) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should cap the number of arguments provided to `func`', function(assert) {\n      assert.expect(2);\n\n      var actual = lodashStable.map(['6', '8', '10'], _.ary(parseInt, 1));\n      assert.deepEqual(actual, [6, 8, 10]);\n\n      var capped = _.ary(fn, 2);\n      assert.deepEqual(capped('a', 'b', 'c', 'd'), ['a', 'b']);\n    });\n\n    QUnit.test('should use `func.length` if `n` is not given', function(assert) {\n      assert.expect(1);\n\n      var capped = _.ary(fn);\n      assert.deepEqual(capped('a', 'b', 'c', 'd'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should treat a negative `n` as `0`', function(assert) {\n      assert.expect(1);\n\n      var capped = _.ary(fn, -1);\n\n      try {\n        var actual = capped('a');\n      } catch (e) {}\n\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      var values = ['1', 1.6, 'xyz'],\n          expected = [['a'], ['a'], []];\n\n      var actual = lodashStable.map(values, function(n) {\n        var capped = _.ary(fn, n);\n        return capped('a', 'b');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not force a minimum argument count', function(assert) {\n      assert.expect(1);\n\n      var args = ['a', 'b', 'c'],\n          capped = _.ary(fn, 3);\n\n      var expected = lodashStable.map(args, function(arg, index) {\n        return args.slice(0, index);\n      });\n\n      var actual = lodashStable.map(expected, function(array) {\n        return capped.apply(undefined, array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(1);\n\n      var capped = _.ary(function(a, b) { return this; }, 1),\n          object = { 'capped': capped };\n\n      assert.strictEqual(object.capped(), object);\n    });\n\n    QUnit.test('should use the existing `ary` if smaller', function(assert) {\n      assert.expect(1);\n\n      var capped = _.ary(_.ary(fn, 1), 2);\n      assert.deepEqual(capped('a', 'b', 'c'), ['a']);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var funcs = lodashStable.map([fn], _.ary),\n          actual = funcs[0]('a', 'b', 'c');\n\n      assert.deepEqual(actual, ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should work when combined with other methods that use metadata', function(assert) {\n      assert.expect(2);\n\n      var array = ['a', 'b', 'c'],\n          includes = _.curry(_.rearg(_.ary(_.includes, 2), 1, 0), 2);\n\n      assert.strictEqual(includes('b')(array, 2), true);\n\n      if (!isNpm) {\n        includes = _(_.includes).ary(2).rearg(1, 0).curry(2).value();\n        assert.strictEqual(includes('b')(array, 2), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.assignIn');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.extend, _.assignIn);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.assign and lodash.assignIn');\n\n  lodashStable.each(['assign', 'assignIn'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should assign source properties to `object`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func({ 'a': 1 }, { 'b': 2 }), { 'a': 1, 'b': 2 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should accept multiple sources', function(assert) {\n      assert.expect(2);\n\n      var expected = { 'a': 1, 'b': 2, 'c': 3 };\n      assert.deepEqual(func({ 'a': 1 }, { 'b': 2 }, { 'c': 3 }), expected);\n      assert.deepEqual(func({ 'a': 1 }, { 'b': 2, 'c': 2 }, { 'c': 3 }), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should overwrite destination properties', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': 3, 'b': 2, 'c': 1 };\n      assert.deepEqual(func({ 'a': 1, 'b': 2 }, expected), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should assign source properties with nullish values', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': null, 'b': undefined, 'c': null };\n      assert.deepEqual(func({ 'a': 1, 'b': 2 }, expected), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should skip assignments if values are the same', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n\n      var descriptor = {\n        'configurable': true,\n        'enumerable': true,\n        'set': function() { throw new Error; }\n      };\n\n      var source = {\n        'a': 1,\n        'b': undefined,\n        'c': NaN,\n        'd': undefined,\n        'constructor': Object,\n        'toString': lodashStable.constant('source')\n      };\n\n      defineProperty(object, 'a', lodashStable.assign({}, descriptor, {\n        'get': stubOne\n      }));\n\n      defineProperty(object, 'b', lodashStable.assign({}, descriptor, {\n        'get': noop\n      }));\n\n      defineProperty(object, 'c', lodashStable.assign({}, descriptor, {\n        'get': stubNaN\n      }));\n\n      defineProperty(object, 'constructor', lodashStable.assign({}, descriptor, {\n        'get': lodashStable.constant(Object)\n      }));\n\n      try {\n        var actual = func(object, source);\n      } catch (e) {}\n\n      assert.deepEqual(actual, source);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat sparse array sources as dense', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      array[2] = 3;\n\n      assert.deepEqual(func({}, array), { '0': 1, '1': undefined, '2': 3 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should assign values of prototype objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      assert.deepEqual(func({}, Foo.prototype), { 'a': 1 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce string sources to objects', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func({}, 'a'), { '0': 'a' });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.assignInWith');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.extendWith, _.assignInWith);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.assignWith and lodash.assignInWith');\n\n  lodashStable.each(['assignWith', 'assignInWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should work with a `customizer` callback', function(assert) {\n      assert.expect(1);\n\n      var actual = func({ 'a': 1, 'b': 2 }, { 'a': 3, 'c': 3 }, function(a, b) {\n        return a === undefined ? b : a;\n      });\n\n      assert.deepEqual(actual, { 'a': 1, 'b': 2, 'c': 3 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `customizer` that returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': 1 };\n      assert.deepEqual(func({}, expected, noop), expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.at');\n\n  (function() {\n    var array = ['a', 'b', 'c'],\n        object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n    QUnit.test('should return the elements corresponding to the specified keys', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(array, [0, 2]);\n      assert.deepEqual(actual, ['a', 'c']);\n    });\n\n    QUnit.test('should return `undefined` for nonexistent keys', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(array, [2, 4, 0]);\n      assert.deepEqual(actual, ['c', undefined, 'a']);\n    });\n\n    QUnit.test('should work with non-index keys on array values', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.reject(empties, function(value) {\n        return (value === 0) || lodashStable.isArray(value);\n      }).concat(-1, 1.1);\n\n      var array = lodashStable.transform(values, function(result, value) {\n        result[value] = 1;\n      }, []);\n\n      var expected = lodashStable.map(values, stubOne),\n          actual = _.at(array, values);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty array when no keys are given', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.at(array), []);\n      assert.deepEqual(_.at(array, [], []), []);\n    });\n\n    QUnit.test('should accept multiple key arguments', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(['a', 'b', 'c', 'd'], 3, 0, 2);\n      assert.deepEqual(actual, ['d', 'a', 'c']);\n    });\n\n    QUnit.test('should work with a falsey `object` when keys are given', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, lodashStable.constant(Array(4)));\n\n      var actual = lodashStable.map(falsey, function(object) {\n        try {\n          return _.at(object, 0, 1, 'pop', 'push');\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with an `arguments` object for `object`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(args, [2, 0]);\n      assert.deepEqual(actual, [3, 1]);\n    });\n\n    QUnit.test('should work with `arguments` object as secondary arguments', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at([1, 2, 3, 4, 5], args);\n      assert.deepEqual(actual, [2, 3, 4]);\n    });\n\n    QUnit.test('should work with an object for `object`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(object, ['a[0].b.c', 'a[1]']);\n      assert.deepEqual(actual, [3, 4]);\n    });\n\n    QUnit.test('should pluck inherited property values', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var actual = _.at(new Foo, 'b');\n      assert.deepEqual(actual, [2]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var largeArray = lodashStable.range(LARGE_ARRAY_SIZE),\n            smallArray = array;\n\n        lodashStable.each([[2], ['2'], [2, 1]], function(paths) {\n          lodashStable.times(2, function(index) {\n            var array = index ? largeArray : smallArray,\n                wrapped = _(array).map(identity).at(paths);\n\n            assert.deepEqual(wrapped.value(), _.at(_.map(array, identity), paths));\n          });\n        });\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n\n    QUnit.test('should support shortcut fusion', function(assert) {\n      assert.expect(8);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            count = 0,\n            iteratee = function(value) { count++; return square(value); },\n            lastIndex = LARGE_ARRAY_SIZE - 1;\n\n        lodashStable.each([lastIndex, lastIndex + '', LARGE_ARRAY_SIZE, []], function(n, index) {\n          count = 0;\n          var actual = _(array).map(iteratee).at(n).value(),\n              expected = index < 2 ? 1 : 0;\n\n          assert.strictEqual(count, expected);\n\n          expected = index == 3 ? [] : [index == 2 ? undefined : square(lastIndex)];\n          assert.deepEqual(actual, expected);\n        });\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('work with an object for `object` when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var paths = ['a[0].b.c', 'a[1]'],\n            actual = _(object).map(identity).at(paths).value();\n\n        assert.deepEqual(actual, _.at(_.map(object, identity), paths));\n\n        var indexObject = { '0': 1 };\n        actual = _(indexObject).at(0).value();\n        assert.deepEqual(actual, _.at(indexObject, 0));\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.attempt');\n\n  (function() {\n    QUnit.test('should return the result of `func`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.attempt(lodashStable.constant('x')), 'x');\n    });\n\n    QUnit.test('should provide additional arguments to `func`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.attempt(function() { return slice.call(arguments); }, 1, 2);\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should return the caught error', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(errors, stubTrue);\n\n      var actual = lodashStable.map(errors, function(error) {\n        return _.attempt(function() { throw error; }) === error;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce errors to error objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.attempt(function() { throw 'x'; });\n      assert.ok(lodashStable.isEqual(actual, Error('x')));\n    });\n\n    QUnit.test('should preserve custom errors', function(assert) {\n      assert.expect(1);\n\n      var actual = _.attempt(function() { throw new CustomError('x'); });\n      assert.ok(actual instanceof CustomError);\n    });\n\n    QUnit.test('should work with an error object from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.errors) {\n        var expected = lodashStable.map(realm.errors, stubTrue);\n\n        var actual = lodashStable.map(realm.errors, function(error) {\n          return _.attempt(function() { throw error; }) === error;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_(lodashStable.constant('x')).attempt(), 'x');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(lodashStable.constant('x')).chain().attempt() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.before');\n\n  (function() {\n    function before(n, times) {\n      var count = 0;\n      lodashStable.times(times, _.before(n, function() { count++; }));\n      return count;\n    }\n\n    QUnit.test('should create a function that invokes `func` after `n` calls', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(before(5, 4), 4, 'before(n) should invoke `func` before being called `n` times');\n      assert.strictEqual(before(5, 6), 4, 'before(n) should not invoke `func` after being called `n - 1` times');\n      assert.strictEqual(before(0, 0), 0, 'before(0) should not invoke `func` immediately');\n      assert.strictEqual(before(0, 1), 0, 'before(0) should not invoke `func` when called');\n    });\n\n    QUnit.test('should coerce `n` values of `NaN` to `0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(before(NaN, 1), 0);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(2);\n\n      var before = _.before(2, function(assert) { return ++this.count; }),\n          object = { 'before': before, 'count': 0 };\n\n      object.before();\n      assert.strictEqual(object.before(), 1);\n      assert.strictEqual(object.count, 1);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.bind');\n\n  (function() {\n    function fn() {\n      var result = [this];\n      push.apply(result, arguments);\n      return result;\n    }\n\n    QUnit.test('should bind a function to an object', function(assert) {\n      assert.expect(1);\n\n      var object = {},\n          bound = _.bind(fn, object);\n\n      assert.deepEqual(bound('a'), [object, 'a']);\n    });\n\n    QUnit.test('should accept a falsey `thisArg`', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.reject(falsey.slice(1), function(value) { return value == null; }),\n          expected = lodashStable.map(values, function(value) { return [value]; });\n\n      var actual = lodashStable.map(values, function(value) {\n        try {\n          var bound = _.bind(fn, value);\n          return bound();\n        } catch (e) {}\n      });\n\n      assert.ok(lodashStable.every(actual, function(value, index) {\n        return lodashStable.isEqual(value, expected[index]);\n      }));\n    });\n\n    QUnit.test('should bind a function to nullish values', function(assert) {\n      assert.expect(6);\n\n      var bound = _.bind(fn, null),\n          actual = bound('a');\n\n      assert.ok((actual[0] === null) || (actual[0] && actual[0].Array));\n      assert.strictEqual(actual[1], 'a');\n\n      lodashStable.times(2, function(index) {\n        bound = index ? _.bind(fn, undefined) : _.bind(fn);\n        actual = bound('b');\n\n        assert.ok((actual[0] === undefined) || (actual[0] && actual[0].Array));\n        assert.strictEqual(actual[1], 'b');\n      });\n    });\n\n    QUnit.test('should partially apply arguments ', function(assert) {\n      assert.expect(4);\n\n      var object = {},\n          bound = _.bind(fn, object, 'a');\n\n      assert.deepEqual(bound(), [object, 'a']);\n\n      bound = _.bind(fn, object, 'a');\n      assert.deepEqual(bound('b'), [object, 'a', 'b']);\n\n      bound = _.bind(fn, object, 'a', 'b');\n      assert.deepEqual(bound(), [object, 'a', 'b']);\n      assert.deepEqual(bound('c', 'd'), [object, 'a', 'b', 'c', 'd']);\n    });\n\n    QUnit.test('should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var object = {},\n          ph = _.bind.placeholder,\n          bound = _.bind(fn, object, ph, 'b', ph);\n\n      assert.deepEqual(bound('a', 'c'), [object, 'a', 'b', 'c']);\n      assert.deepEqual(bound('a'), [object, 'a', 'b', undefined]);\n      assert.deepEqual(bound('a', 'c', 'd'), [object, 'a', 'b', 'c', 'd']);\n      assert.deepEqual(bound(), [object, undefined, 'b', undefined]);\n    });\n\n    QUnit.test('should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var _ph = _.placeholder = {},\n            ph = _.bind.placeholder,\n            object = {},\n            bound = _.bind(fn, object, _ph, 'b', ph);\n\n        assert.deepEqual(bound('a', 'c'), [object, 'a', 'b', ph, 'c']);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should create a function with a `length` of `0`', function(assert) {\n      assert.expect(2);\n\n      var fn = function(a, b, c) {},\n          bound = _.bind(fn, {});\n\n      assert.strictEqual(bound.length, 0);\n\n      bound = _.bind(fn, {}, 1);\n      assert.strictEqual(bound.length, 0);\n    });\n\n    QUnit.test('should ignore binding when called with the `new` operator', function(assert) {\n      assert.expect(3);\n\n      function Foo() {\n        return this;\n      }\n\n      var bound = _.bind(Foo, { 'a': 1 }),\n          newBound = new bound;\n\n      assert.strictEqual(bound().a, 1);\n      assert.strictEqual(newBound.a, undefined);\n      assert.ok(newBound instanceof Foo);\n    });\n\n    QUnit.test('should handle a number of arguments when called with the `new` operator', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        return this;\n      }\n\n      function Bar() {}\n\n      var thisArg = { 'a': 1 },\n          boundFoo = _.bind(Foo, thisArg),\n          boundBar = _.bind(Bar, thisArg),\n          count = 9,\n          expected = lodashStable.times(count, lodashStable.constant([undefined, undefined]));\n\n      var actual = lodashStable.times(count, function(index) {\n        try {\n          switch (index) {\n            case 0: return [new boundFoo().a, new boundBar().a];\n            case 1: return [new boundFoo(1).a, new boundBar(1).a];\n            case 2: return [new boundFoo(1, 2).a, new boundBar(1, 2).a];\n            case 3: return [new boundFoo(1, 2, 3).a, new boundBar(1, 2, 3).a];\n            case 4: return [new boundFoo(1, 2, 3, 4).a, new boundBar(1, 2, 3, 4).a];\n            case 5: return [new boundFoo(1, 2, 3, 4, 5).a, new boundBar(1, 2, 3, 4, 5).a];\n            case 6: return [new boundFoo(1, 2, 3, 4, 5, 6).a, new boundBar(1, 2, 3, 4, 5, 6).a];\n            case 7: return [new boundFoo(1, 2, 3, 4, 5, 6, 7).a, new boundBar(1, 2, 3, 4, 5, 6, 7).a];\n            case 8: return [new boundFoo(1, 2, 3, 4, 5, 6, 7, 8).a, new boundBar(1, 2, 3, 4, 5, 6, 7, 8).a];\n          }\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ensure `new bound` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var bound = _.bind(Foo),\n          object = {};\n\n      assert.ok(new bound instanceof Foo);\n      assert.strictEqual(new bound(true), object);\n    });\n\n    QUnit.test('should append array arguments to partially applied arguments', function(assert) {\n      assert.expect(1);\n\n      var object = {},\n          bound = _.bind(fn, object, 'a');\n\n      assert.deepEqual(bound(['b'], 'c'), [object, 'a', ['b'], 'c']);\n    });\n\n    QUnit.test('should not rebind functions', function(assert) {\n      assert.expect(3);\n\n      var object1 = {},\n          object2 = {},\n          object3 = {};\n\n      var bound1 = _.bind(fn, object1),\n          bound2 = _.bind(bound1, object2, 'a'),\n          bound3 = _.bind(bound1, object3, 'b');\n\n      assert.deepEqual(bound1(), [object1]);\n      assert.deepEqual(bound2(), [object1, 'a']);\n      assert.deepEqual(bound3(), [object1, 'b']);\n    });\n\n    QUnit.test('should not error when instantiating bound built-ins', function(assert) {\n      assert.expect(2);\n\n      var Ctor = _.bind(Date, null),\n          expected = new Date(2012, 4, 23, 0, 0, 0, 0);\n\n      try {\n        var actual = new Ctor(2012, 4, 23, 0, 0, 0, 0);\n      } catch (e) {}\n\n      assert.deepEqual(actual, expected);\n\n      Ctor = _.bind(Date, null, 2012, 4, 23);\n\n      try {\n        actual = new Ctor(0, 0, 0, 0);\n      } catch (e) {}\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not error when calling bound class constructors with the `new` operator', function(assert) {\n      assert.expect(1);\n\n      var createCtor = lodashStable.attempt(Function, '\"use strict\";return class A{}');\n\n      if (typeof createCtor == 'function') {\n        var bound = _.bind(createCtor()),\n            count = 8,\n            expected = lodashStable.times(count, stubTrue);\n\n        var actual = lodashStable.times(count, function(index) {\n          try {\n            switch (index) {\n              case 0: return !!(new bound);\n              case 1: return !!(new bound(1));\n              case 2: return !!(new bound(1, 2));\n              case 3: return !!(new bound(1, 2, 3));\n              case 4: return !!(new bound(1, 2, 3, 4));\n              case 5: return !!(new bound(1, 2, 3, 4, 5));\n              case 6: return !!(new bound(1, 2, 3, 4, 5, 6));\n              case 7: return !!(new bound(1, 2, 3, 4, 5, 6, 7));\n            }\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var object = {},\n            bound = _(fn).bind({}, 'a', 'b');\n\n        assert.ok(bound instanceof _);\n\n        var actual = bound.value()('c');\n        assert.deepEqual(actual, [object, 'a', 'b', 'c']);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.bindAll');\n\n  (function() {\n    var args = toArgs(['a']);\n\n    var source = {\n      '_n0': -2,\n      '_p0': -1,\n      '_a': 1,\n      '_b': 2,\n      '_c': 3,\n      '_d': 4,\n      '-0': function() { return this._n0; },\n      '0': function() { return this._p0; },\n      'a': function() { return this._a; },\n      'b': function() { return this._b; },\n      'c': function() { return this._c; },\n      'd': function() { return this._d; }\n    };\n\n    QUnit.test('should accept individual method names', function(assert) {\n      assert.expect(1);\n\n      var object = lodashStable.cloneDeep(source);\n      _.bindAll(object, 'a', 'b');\n\n      var actual = lodashStable.map(['a', 'b', 'c'], function(key) {\n        return object[key].call({});\n      });\n\n      assert.deepEqual(actual, [1, 2, undefined]);\n    });\n\n    QUnit.test('should accept arrays of method names', function(assert) {\n      assert.expect(1);\n\n      var object = lodashStable.cloneDeep(source);\n      _.bindAll(object, ['a', 'b'], ['c']);\n\n      var actual = lodashStable.map(['a', 'b', 'c', 'd'], function(key) {\n        return object[key].call({});\n      });\n\n      assert.deepEqual(actual, [1, 2, 3, undefined]);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        var object = lodashStable.cloneDeep(source);\n        _.bindAll(object, key);\n        return object[lodashStable.toString(key)].call({});\n      });\n\n      assert.deepEqual(actual, [-2, -2, -1, -1]);\n    });\n\n    QUnit.test('should work with an array `object`', function(assert) {\n      assert.expect(1);\n\n      var array = ['push', 'pop'];\n      _.bindAll(array);\n      assert.strictEqual(array.pop, arrayProto.pop);\n    });\n\n    QUnit.test('should work with `arguments` objects as secondary arguments', function(assert) {\n      assert.expect(1);\n\n      var object = lodashStable.cloneDeep(source);\n      _.bindAll(object, args);\n\n      var actual = lodashStable.map(args, function(key) {\n        return object[key].call({});\n      });\n\n      assert.deepEqual(actual, [1]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.bindKey');\n\n  (function() {\n    QUnit.test('should work when the target function is overwritten', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'user': 'fred',\n        'greet': function(greeting) {\n          return this.user + ' says: ' + greeting;\n        }\n      };\n\n      var bound = _.bindKey(object, 'greet', 'hi');\n      assert.strictEqual(bound(), 'fred says: hi');\n\n      object.greet = function(greeting) {\n        return this.user + ' says: ' + greeting + '!';\n      };\n\n      assert.strictEqual(bound(), 'fred says: hi!');\n    });\n\n    QUnit.test('should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var object = {\n        'fn': function() {\n          return slice.call(arguments);\n        }\n      };\n\n      var ph = _.bindKey.placeholder,\n          bound = _.bindKey(object, 'fn', ph, 'b', ph);\n\n      assert.deepEqual(bound('a', 'c'), ['a', 'b', 'c']);\n      assert.deepEqual(bound('a'), ['a', 'b', undefined]);\n      assert.deepEqual(bound('a', 'c', 'd'), ['a', 'b', 'c', 'd']);\n      assert.deepEqual(bound(), [undefined, 'b', undefined]);\n    });\n\n    QUnit.test('should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var object = {\n          'fn': function() {\n            return slice.call(arguments);\n          }\n        };\n\n        var _ph = _.placeholder = {},\n            ph = _.bindKey.placeholder,\n            bound = _.bindKey(object, 'fn', _ph, 'b', ph);\n\n        assert.deepEqual(bound('a', 'c'), ['a', 'b', ph, 'c']);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should ensure `new bound` is an instance of `object[key]`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var object = { 'Foo': Foo },\n          bound = _.bindKey(object, 'Foo');\n\n      assert.ok(new bound instanceof Foo);\n      assert.strictEqual(new bound(true), object);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('case methods');\n\n  lodashStable.each(['camel', 'kebab', 'lower', 'snake', 'start', 'upper'], function(caseName) {\n    var methodName = caseName + 'Case',\n        func = _[methodName];\n\n    var strings = [\n      'foo bar', 'Foo bar', 'foo Bar', 'Foo Bar',\n      'FOO BAR', 'fooBar', '--foo-bar--', '__foo_bar__'\n    ];\n\n    var converted = (function() {\n      switch (caseName) {\n        case 'camel': return 'fooBar';\n        case 'kebab': return 'foo-bar';\n        case 'lower': return 'foo bar';\n        case 'snake': return 'foo_bar';\n        case 'start': return 'Foo Bar';\n        case 'upper': return 'FOO BAR';\n      }\n    }());\n\n    QUnit.test('`_.' + methodName + '` should convert `string` to ' + caseName + ' case', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(strings, function(string) {\n        var expected = (caseName == 'start' && string == 'FOO BAR') ? string : converted;\n        return func(string) === expected;\n      });\n\n      assert.deepEqual(actual, lodashStable.map(strings, stubTrue));\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle double-converting strings', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(strings, function(string) {\n        var expected = (caseName == 'start' && string == 'FOO BAR') ? string : converted;\n        return func(func(string)) === expected;\n      });\n\n      assert.deepEqual(actual, lodashStable.map(strings, stubTrue));\n    });\n\n    QUnit.test('`_.' + methodName + '` should deburr letters', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(burredLetters, function(burred, index) {\n        var letter = deburredLetters[index].replace(/['\\u2019]/g, '');\n        if (caseName == 'start') {\n          letter = letter == 'IJ' ? letter : lodashStable.capitalize(letter);\n        } else if (caseName == 'upper') {\n          letter = letter.toUpperCase();\n        } else {\n          letter = letter.toLowerCase();\n        }\n        return func(burred) === letter;\n      });\n\n      assert.deepEqual(actual, lodashStable.map(burredLetters, stubTrue));\n    });\n\n    QUnit.test('`_.' + methodName + '` should remove contraction apostrophes', function(assert) {\n      assert.expect(2);\n\n      var postfixes = ['d', 'll', 'm', 're', 's', 't', 've'];\n\n      lodashStable.each([\"'\", '\\u2019'], function(apos) {\n        var actual = lodashStable.map(postfixes, function(postfix) {\n          return func('a b' + apos + postfix +  ' c');\n        });\n\n        var expected = lodashStable.map(postfixes, function(postfix) {\n          switch (caseName) {\n            case 'camel': return 'aB'  + postfix + 'C';\n            case 'kebab': return 'a-b' + postfix + '-c';\n            case 'lower': return 'a b' + postfix + ' c';\n            case 'snake': return 'a_b' + postfix + '_c';\n            case 'start': return 'A B' + postfix + ' C';\n            case 'upper': return 'A B' + postfix.toUpperCase() + ' C';\n          }\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should remove Latin mathematical operators', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(['\\xd7', '\\xf7'], func);\n      assert.deepEqual(actual, ['', '']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `string` to a string', function(assert) {\n      assert.expect(2);\n\n      var string = 'foo bar';\n      assert.strictEqual(func(Object(string)), converted);\n      assert.strictEqual(func({ 'toString': lodashStable.constant(string) }), converted);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value implicitly when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_('foo bar')[methodName](), converted);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_('foo bar').chain()[methodName]() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  (function() {\n    QUnit.test('should get the original value after cycling through all case methods', function(assert) {\n      assert.expect(1);\n\n      var funcs = [_.camelCase, _.kebabCase, _.lowerCase, _.snakeCase, _.startCase, _.lowerCase, _.camelCase];\n\n      var actual = lodashStable.reduce(funcs, function(result, func) {\n        return func(result);\n      }, 'enable 6h format');\n\n      assert.strictEqual(actual, 'enable6HFormat');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.camelCase');\n\n  (function() {\n    QUnit.test('should work with numbers', function(assert) {\n      assert.expect(6);\n\n      assert.strictEqual(_.camelCase('12 feet'), '12Feet');\n      assert.strictEqual(_.camelCase('enable 6h format'), 'enable6HFormat');\n      assert.strictEqual(_.camelCase('enable 24H format'), 'enable24HFormat');\n      assert.strictEqual(_.camelCase('too legit 2 quit'), 'tooLegit2Quit');\n      assert.strictEqual(_.camelCase('walk 500 miles'), 'walk500Miles');\n      assert.strictEqual(_.camelCase('xhr2 request'), 'xhr2Request');\n    });\n\n    QUnit.test('should handle acronyms', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each(['safe HTML', 'safeHTML'], function(string) {\n        assert.strictEqual(_.camelCase(string), 'safeHtml');\n      });\n\n      lodashStable.each(['escape HTML entities', 'escapeHTMLEntities'], function(string) {\n        assert.strictEqual(_.camelCase(string), 'escapeHtmlEntities');\n      });\n\n      lodashStable.each(['XMLHttpRequest', 'XmlHTTPRequest'], function(string) {\n        assert.strictEqual(_.camelCase(string), 'xmlHttpRequest');\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.capitalize');\n\n  (function() {\n    QUnit.test('should capitalize the first character of a string', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.capitalize('fred'), 'Fred');\n      assert.strictEqual(_.capitalize('Fred'), 'Fred');\n      assert.strictEqual(_.capitalize(' fred'), ' fred');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.castArray');\n\n  (function() {\n    QUnit.test('should wrap non-array items in an array', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(true, 1, 'a', { 'a': 1 }),\n          expected = lodashStable.map(values, function(value) { return [value]; }),\n          actual = lodashStable.map(values, _.castArray);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return array values by reference', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      assert.strictEqual(_.castArray(array), array);\n    });\n\n    QUnit.test('should return an empty array when no arguments are given', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.castArray(), []);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.chain');\n\n  (function() {\n    QUnit.test('should return a wrapped value', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _.chain({ 'a': 0 });\n        assert.ok(actual instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return existing wrapped values', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _({ 'a': 0 });\n        assert.strictEqual(_.chain(wrapped), wrapped);\n        assert.strictEqual(wrapped.chain(), wrapped);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should enable chaining for methods that return unwrapped values', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = ['c', 'b', 'a'];\n\n        assert.ok(_.chain(array).head() instanceof _);\n        assert.ok(_(array).chain().head() instanceof _);\n\n        assert.ok(_.chain(array).isArray() instanceof _);\n        assert.ok(_(array).chain().isArray() instanceof _);\n\n        assert.ok(_.chain(array).sortBy().head() instanceof _);\n        assert.ok(_(array).chain().sortBy().head() instanceof _);\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n\n    QUnit.test('should chain multiple methods', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var array = ['one two three four', 'five six seven eight', 'nine ten eleven twelve'],\n              expected = { ' ': 9, 'e': 14, 'f': 2, 'g': 1, 'h': 2, 'i': 4, 'l': 2, 'n': 6, 'o': 3, 'r': 2, 's': 2, 't': 5, 'u': 1, 'v': 4, 'w': 2, 'x': 1 },\n              wrapped = index ? _(array).chain() : _.chain(array);\n\n          var actual = wrapped\n            .chain()\n            .map(function(value) { return value.split(''); })\n            .flatten()\n            .reduce(function(object, chr) {\n              object[chr] || (object[chr] = 0);\n              object[chr]++;\n              return object;\n            }, {})\n            .value();\n\n          assert.deepEqual(actual, expected);\n\n          array = [1, 2, 3, 4, 5, 6];\n          wrapped = index ? _(array).chain() : _.chain(array);\n          actual = wrapped\n            .chain()\n            .filter(function(n) { return n % 2 != 0; })\n            .reject(function(n) { return n % 3 == 0; })\n            .sortBy(function(n) { return -n; })\n            .value();\n\n          assert.deepEqual(actual, [5, 1]);\n\n          array = [3, 4];\n          wrapped = index ? _(array).chain() : _.chain(array);\n          actual = wrapped\n            .reverse()\n            .concat([2, 1])\n            .unshift(5)\n            .tap(function(value) { value.pop(); })\n            .map(square)\n            .value();\n\n          assert.deepEqual(actual, [25, 16, 9, 4]);\n        });\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.chunk');\n\n  (function() {\n    var array = [0, 1, 2, 3, 4, 5];\n\n    QUnit.test('should return chunked arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = _.chunk(array, 3);\n      assert.deepEqual(actual, [[0, 1, 2], [3, 4, 5]]);\n    });\n\n    QUnit.test('should return the last chunk as remaining elements', function(assert) {\n      assert.expect(1);\n\n      var actual = _.chunk(array, 4);\n      assert.deepEqual(actual, [[0, 1, 2, 3], [4, 5]]);\n    });\n\n    QUnit.test('should treat falsey `size` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [[0], [1], [2], [3], [4], [5]] : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(size, index) {\n        return index ? _.chunk(array, size) : _.chunk(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ensure the minimum `size` is `0`', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.reject(falsey, lodashStable.isUndefined).concat(-1, -Infinity),\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(n) {\n        return _.chunk(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce `size` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.chunk(array, array.length / 4), [[0], [1], [2], [3], [4], [5]]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([[1, 2], [3, 4]], _.chunk);\n      assert.deepEqual(actual, [[[1], [2]], [[3], [4]]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.clamp');\n\n  (function() {\n    QUnit.test('should work with a `max`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.clamp(5, 3), 3);\n      assert.strictEqual(_.clamp(1, 3), 1);\n    });\n\n    QUnit.test('should clamp negative numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.clamp(-10, -5, 5), -5);\n      assert.strictEqual(_.clamp(-10.2, -5.5, 5.5), -5.5);\n      assert.strictEqual(_.clamp(-Infinity, -5, 5), -5);\n    });\n\n    QUnit.test('should clamp positive numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.clamp(10, -5, 5), 5);\n      assert.strictEqual(_.clamp(10.6, -5.6, 5.4), 5.4);\n      assert.strictEqual(_.clamp(Infinity, -5, 5), 5);\n    });\n\n    QUnit.test('should not alter negative numbers in range', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.clamp(-4, -5, 5), -4);\n      assert.strictEqual(_.clamp(-5, -5, 5), -5);\n      assert.strictEqual(_.clamp(-5.5, -5.6, 5.6), -5.5);\n    });\n\n    QUnit.test('should not alter positive numbers in range', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.clamp(4, -5, 5), 4);\n      assert.strictEqual(_.clamp(5, -5, 5), 5);\n      assert.strictEqual(_.clamp(4.5, -5.1, 5.2), 4.5);\n    });\n\n    QUnit.test('should not alter `0` in range', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.clamp(0, -5, 5), Infinity);\n    });\n\n    QUnit.test('should clamp to `0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.clamp(-10, 0, 5), Infinity);\n    });\n\n    QUnit.test('should not alter `-0` in range', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.clamp(-0, -5, 5), -Infinity);\n    });\n\n    QUnit.test('should clamp to `-0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.clamp(-10, -0, 5), -Infinity);\n    });\n\n    QUnit.test('should return `NaN` when `number` is `NaN`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.clamp(NaN, -5, 5), NaN);\n    });\n\n    QUnit.test('should coerce `min` and `max` of `NaN` to `0`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.clamp(1, -5, NaN), 0);\n      assert.deepEqual(_.clamp(-1, NaN, 5), 0);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('clone methods');\n\n  (function() {\n    function Foo() {\n      this.a = 1;\n    }\n    Foo.prototype.b = 1;\n    Foo.c = function() {};\n\n    if (Map) {\n      var map = new Map;\n      map.set('a', 1);\n      map.set('b', 2);\n    }\n    if (Set) {\n      var set = new Set;\n      set.add(1);\n      set.add(2);\n    }\n    var objects = {\n      '`arguments` objects': arguments,\n      'arrays': ['a', ''],\n      'array-like objects': { '0': 'a', 'length': 1 },\n      'booleans': false,\n      'boolean objects': Object(false),\n      'date objects': new Date,\n      'Foo instances': new Foo,\n      'objects': { 'a': 0, 'b': 1, 'c': 2 },\n      'objects with object values': { 'a': /a/, 'b': ['B'], 'c': { 'C': 1 } },\n      'objects from another document': realm.object || {},\n      'maps': map,\n      'null values': null,\n      'numbers': 0,\n      'number objects': Object(0),\n      'regexes': /a/gim,\n      'sets': set,\n      'strings': 'a',\n      'string objects': Object('a'),\n      'undefined values': undefined\n    };\n\n    objects.arrays.length = 3;\n\n    var uncloneable = {\n      'DOM elements': body,\n      'functions': Foo,\n      'async functions': asyncFunc,\n      'generator functions': genFunc,\n      'the `Proxy` constructor': Proxy\n    };\n\n    lodashStable.each(errors, function(error) {\n      uncloneable[error.name + 's'] = error;\n    });\n\n    QUnit.test('`_.clone` should perform a shallow clone', function(assert) {\n      assert.expect(2);\n\n      var array = [{ 'a': 0 }, { 'b': 1 }],\n          actual = _.clone(array);\n\n      assert.deepEqual(actual, array);\n      assert.ok(actual !== array && actual[0] === array[0]);\n    });\n\n    QUnit.test('`_.cloneDeep` should deep clone objects with circular references', function(assert) {\n      assert.expect(1);\n\n      var object = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': {}\n      };\n\n      object.foo.b.c.d = object;\n      object.bar.b = object.foo.b;\n\n      var actual = _.cloneDeep(object);\n      assert.ok(actual.bar.b === actual.foo.b && actual === actual.foo.b.c.d && actual !== object);\n    });\n\n    QUnit.test('`_.cloneDeep` should deep clone objects with lots of circular references', function(assert) {\n      assert.expect(2);\n\n      var cyclical = {};\n      lodashStable.times(LARGE_ARRAY_SIZE + 1, function(index) {\n        cyclical['v' + index] = [index ? cyclical['v' + (index - 1)] : cyclical];\n      });\n\n      var clone = _.cloneDeep(cyclical),\n          actual = clone['v' + LARGE_ARRAY_SIZE][0];\n\n      assert.strictEqual(actual, clone['v' + (LARGE_ARRAY_SIZE - 1)]);\n      assert.notStrictEqual(actual, cyclical['v' + (LARGE_ARRAY_SIZE - 1)]);\n    });\n\n    QUnit.test('`_.cloneDeepWith` should provide `stack` to `customizer`', function(assert) {\n      assert.expect(1);\n\n      var actual;\n\n      _.cloneDeepWith({ 'a': 1 }, function() {\n        actual = _.last(arguments);\n      });\n\n      assert.ok(isNpm\n        ? actual.constructor.name == 'Stack'\n        : actual instanceof mapCaches.Stack\n      );\n    });\n\n    lodashStable.each(['clone', 'cloneDeep'], function(methodName) {\n      var func = _[methodName],\n          isDeep = methodName == 'cloneDeep';\n\n      lodashStable.forOwn(objects, function(object, kind) {\n        QUnit.test('`_.' + methodName + '` should clone ' + kind, function(assert) {\n          assert.expect(2);\n\n          var actual = func(object);\n          assert.ok(lodashStable.isEqual(actual, object));\n\n          if (lodashStable.isObject(object)) {\n            assert.notStrictEqual(actual, object);\n          } else {\n            assert.strictEqual(actual, object);\n          }\n        });\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone array buffers', function(assert) {\n        assert.expect(2);\n\n        if (ArrayBuffer) {\n          var actual = func(arrayBuffer);\n          assert.strictEqual(actual.byteLength, arrayBuffer.byteLength);\n          assert.notStrictEqual(actual, arrayBuffer);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone buffers', function(assert) {\n        assert.expect(4);\n\n        if (Buffer) {\n          var buffer = new Buffer([1, 2]),\n              actual = func(buffer);\n\n          assert.strictEqual(actual.byteLength, buffer.byteLength);\n          assert.strictEqual(actual.inspect(), buffer.inspect());\n          assert.notStrictEqual(actual, buffer);\n\n          buffer[0] = 2;\n          assert.strictEqual(actual[0], isDeep ? 2 : 1);\n        }\n        else {\n          skipAssert(assert, 4);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone `index` and `input` array properties', function(assert) {\n        assert.expect(2);\n\n        var array = /c/.exec('abcde'),\n            actual = func(array);\n\n        assert.strictEqual(actual.index, 2);\n        assert.strictEqual(actual.input, 'abcde');\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone `lastIndex` regexp property', function(assert) {\n        assert.expect(1);\n\n        var regexp = /c/g;\n        regexp.exec('abcde');\n\n        assert.strictEqual(func(regexp).lastIndex, 3);\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone expando properties', function(assert) {\n        assert.expect(1);\n\n        var values = lodashStable.map([false, true, 1, 'a'], function(value) {\n          var object = Object(value);\n          object.a = 1;\n          return object;\n        });\n\n        var expected = lodashStable.map(values, stubTrue);\n\n        var actual = lodashStable.map(values, function(value) {\n          return func(value).a === 1;\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone prototype objects', function(assert) {\n        assert.expect(2);\n\n        var actual = func(Foo.prototype);\n\n        assert.notOk(actual instanceof Foo);\n        assert.deepEqual(actual, { 'b': 1 });\n      });\n\n      QUnit.test('`_.' + methodName + '` should set the `[[Prototype]]` of a clone', function(assert) {\n        assert.expect(1);\n\n        assert.ok(func(new Foo) instanceof Foo);\n      });\n\n      QUnit.test('`_.' + methodName + '` should set the `[[Prototype]]` of a clone even when the `constructor` is incorrect', function(assert) {\n        assert.expect(1);\n\n        Foo.prototype.constructor = Object;\n        assert.ok(func(new Foo) instanceof Foo);\n        Foo.prototype.constructor = Foo;\n      });\n\n      QUnit.test('`_.' + methodName + '` should ensure `value` constructor is a function before using its `[[Prototype]]`', function(assert) {\n        assert.expect(1);\n\n        Foo.prototype.constructor = null;\n        assert.notOk(func(new Foo) instanceof Foo);\n        Foo.prototype.constructor = Foo;\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone properties that shadow those on `Object.prototype`', function(assert) {\n        assert.expect(2);\n\n        var object = {\n          'constructor': objectProto.constructor,\n          'hasOwnProperty': objectProto.hasOwnProperty,\n          'isPrototypeOf': objectProto.isPrototypeOf,\n          'propertyIsEnumerable': objectProto.propertyIsEnumerable,\n          'toLocaleString': objectProto.toLocaleString,\n          'toString': objectProto.toString,\n          'valueOf': objectProto.valueOf\n        };\n\n        var actual = func(object);\n\n        assert.deepEqual(actual, object);\n        assert.notStrictEqual(actual, object);\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone symbol properties', function(assert) {\n        assert.expect(7);\n\n        function Foo() {\n          this[symbol] = { 'c': 1 };\n        }\n\n        if (Symbol) {\n          var symbol2 = Symbol('b');\n          Foo.prototype[symbol2] = 2;\n\n          var symbol3 = Symbol('c');\n          defineProperty(Foo.prototype, symbol3, {\n            'configurable': true,\n            'enumerable': false,\n            'writable': true,\n            'value': 3\n          });\n\n          var object = { 'a': { 'b': new Foo } };\n          object[symbol] = { 'b': 1 };\n\n          var actual = func(object);\n          if (isDeep) {\n            assert.notStrictEqual(actual[symbol], object[symbol]);\n            assert.notStrictEqual(actual.a, object.a);\n          } else {\n            assert.strictEqual(actual[symbol], object[symbol]);\n            assert.strictEqual(actual.a, object.a);\n          }\n          assert.deepEqual(actual[symbol], object[symbol]);\n          assert.deepEqual(getSymbols(actual.a.b), [symbol]);\n          assert.deepEqual(actual.a.b[symbol], object.a.b[symbol]);\n          assert.deepEqual(actual.a.b[symbol2], object.a.b[symbol2]);\n          assert.deepEqual(actual.a.b[symbol3], object.a.b[symbol3])\n        }\n        else {\n          skipAssert(assert, 7);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone symbol objects', function(assert) {\n        assert.expect(4);\n\n        if (Symbol) {\n          assert.strictEqual(func(symbol), symbol);\n\n          var object = Object(symbol),\n              actual = func(object);\n\n          assert.strictEqual(typeof actual, 'object');\n          assert.strictEqual(typeof actual.valueOf(), 'symbol');\n          assert.notStrictEqual(actual, object);\n        }\n        else {\n          skipAssert(assert, 4);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should not clone symbol primitives', function(assert) {\n        assert.expect(1);\n\n        if (Symbol) {\n          assert.strictEqual(func(symbol), symbol);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should not error on DOM elements', function(assert) {\n        assert.expect(1);\n\n        if (document) {\n          var element = document.createElement('div');\n\n          try {\n            assert.deepEqual(func(element), {});\n          } catch (e) {\n            assert.ok(false, e.message);\n          }\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should create an object from the same realm as `value`', function(assert) {\n        assert.expect(1);\n\n        var props = [];\n\n        var objects = lodashStable.transform(_, function(result, value, key) {\n          if (lodashStable.startsWith(key, '_') && lodashStable.isObject(value) &&\n              !lodashStable.isArguments(value) && !lodashStable.isElement(value) &&\n              !lodashStable.isFunction(value)) {\n            props.push(lodashStable.capitalize(lodashStable.camelCase(key)));\n            result.push(value);\n          }\n        }, []);\n\n        var expected = lodashStable.map(objects, stubTrue);\n\n        var actual = lodashStable.map(objects, function(object) {\n          var Ctor = object.constructor,\n              result = func(object);\n\n          return result !== object && ((result instanceof Ctor) || !(new Ctor instanceof Ctor));\n        });\n\n        assert.deepEqual(actual, expected, props.join(', '));\n      });\n\n      QUnit.test('`_.' + methodName + '` should perform a ' + (isDeep ? 'deep' : 'shallow') + ' clone when used as an iteratee for methods like `_.map`', function(assert) {\n        assert.expect(2);\n\n        var expected = [{ 'a': [0] }, { 'b': [1] }],\n            actual = lodashStable.map(expected, func);\n\n        assert.deepEqual(actual, expected);\n\n        if (isDeep) {\n          assert.ok(actual[0] !== expected[0] && actual[0].a !== expected[0].a && actual[1].b !== expected[1].b);\n        } else {\n          assert.ok(actual[0] !== expected[0] && actual[0].a === expected[0].a && actual[1].b === expected[1].b);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should return a unwrapped value when chaining', function(assert) {\n        assert.expect(2);\n\n        if (!isNpm) {\n          var object = objects.objects,\n              actual = _(object)[methodName]();\n\n          assert.deepEqual(actual, object);\n          assert.notStrictEqual(actual, object);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n\n      lodashStable.each(arrayViews, function(type) {\n        QUnit.test('`_.' + methodName + '` should clone ' + type + ' values', function(assert) {\n          assert.expect(10);\n\n          var Ctor = root[type];\n\n          lodashStable.times(2, function(index) {\n            if (Ctor) {\n              var buffer = new ArrayBuffer(24),\n                  view = index ? new Ctor(buffer, 8, 1) : new Ctor(buffer),\n                  actual = func(view);\n\n              assert.deepEqual(actual, view);\n              assert.notStrictEqual(actual, view);\n              assert.strictEqual(actual.buffer === view.buffer, !isDeep);\n              assert.strictEqual(actual.byteOffset, view.byteOffset);\n              assert.strictEqual(actual.length, view.length);\n            }\n            else {\n              skipAssert(assert, 5);\n            }\n          });\n        });\n      });\n\n      lodashStable.forOwn(uncloneable, function(value, key) {\n        QUnit.test('`_.' + methodName + '` should not clone ' + key, function(assert) {\n          assert.expect(3);\n\n          if (value) {\n            var object = { 'a': value, 'b': { 'c': value } },\n                actual = func(object),\n                expected = value === Foo ? { 'c': Foo.c } : {};\n\n            assert.deepEqual(actual, object);\n            assert.notStrictEqual(actual, object);\n            assert.deepEqual(func(value), expected);\n          }\n          else {\n            skipAssert(assert, 3);\n          }\n        });\n      });\n    });\n\n    lodashStable.each(['cloneWith', 'cloneDeepWith'], function(methodName) {\n      var func = _[methodName],\n          isDeep = methodName == 'cloneDeepWith';\n\n      QUnit.test('`_.' + methodName + '` should provide correct `customizer` arguments', function(assert) {\n        assert.expect(1);\n\n        var argsList = [],\n            object = new Foo;\n\n        func(object, function() {\n          var length = arguments.length,\n              args = slice.call(arguments, 0, length - (length > 1 ? 1 : 0));\n\n          argsList.push(args);\n        });\n\n        assert.deepEqual(argsList, isDeep ? [[object], [1, 'a', object]] : [[object]]);\n      });\n\n      QUnit.test('`_.' + methodName + '` should handle cloning when `customizer` returns `undefined`', function(assert) {\n        assert.expect(1);\n\n        var actual = func({ 'a': { 'b': 'c' } }, noop);\n        assert.deepEqual(actual, { 'a': { 'b': 'c' } });\n      });\n\n      lodashStable.forOwn(uncloneable, function(value, key) {\n        QUnit.test('`_.' + methodName + '` should work with a `customizer` callback and ' + key, function(assert) {\n          assert.expect(3);\n\n          var customizer = function(value) {\n            return lodashStable.isPlainObject(value) ? undefined : value;\n          };\n\n          var actual = func(value, customizer);\n          assert.strictEqual(actual, value);\n\n          var object = { 'a': value, 'b': { 'c': value } };\n          actual = func(object, customizer);\n\n          assert.deepEqual(actual, object);\n          assert.notStrictEqual(actual, object);\n        });\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.compact');\n\n  (function() {\n    var largeArray = lodashStable.range(LARGE_ARRAY_SIZE).concat(null);\n\n    QUnit.test('should filter falsey values', function(assert) {\n      assert.expect(1);\n\n      var array = ['0', '1', '2'];\n      assert.deepEqual(_.compact(falsey.concat(array)), array);\n    });\n\n    QUnit.test('should work when in-between lazy operators', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var actual = _(falsey).thru(_.slice).compact().thru(_.slice).value();\n        assert.deepEqual(actual, []);\n\n        actual = _(falsey).thru(_.slice).push(true, 1).compact().push('a').value();\n        assert.deepEqual(actual, [true, 1, 'a']);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _(largeArray).slice(1).compact().reverse().take().value();\n        assert.deepEqual(actual, _.take(_.compact(_.slice(largeArray, 1)).reverse()));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence with a custom `_.iteratee`', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var iteratee = _.iteratee,\n            pass = false;\n\n        _.iteratee = identity;\n\n        try {\n          var actual = _(largeArray).slice(1).compact().value();\n          pass = lodashStable.isEqual(actual, _.compact(_.slice(largeArray, 1)));\n        } catch (e) {console.log(e);}\n\n        assert.ok(pass);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.concat');\n\n  (function() {\n    QUnit.test('should shallow clone `array`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = _.concat(array);\n\n      assert.deepEqual(actual, array);\n      assert.notStrictEqual(actual, array);\n    });\n\n    QUnit.test('should concat arrays and values', function(assert) {\n      assert.expect(2);\n\n      var array = [1],\n          actual = _.concat(array, 2, [3], [[4]]);\n\n      assert.deepEqual(actual, [1, 2, 3, [4]]);\n      assert.deepEqual(array, [1]);\n    });\n\n    QUnit.test('should cast non-array `array` values to arrays', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined, false, true, 1, NaN, 'a'];\n\n      var expected = lodashStable.map(values, function(value, index) {\n        return index ? [value] : [];\n      });\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.concat(value) : _.concat();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(values, function(value) {\n        return [value, 2, [3]];\n      });\n\n      actual = lodashStable.map(values, function(value) {\n        return _.concat(value, [2], [[3]]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat sparse arrays as dense', function(assert) {\n      assert.expect(3);\n\n      var expected = [],\n          actual = _.concat(Array(1), Array(1));\n\n      expected.push(undefined, undefined);\n\n      assert.ok('0'in actual);\n      assert.ok('1' in actual);\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return a new wrapped array', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = [1],\n            wrapped = _(array).concat([2, 3]),\n            actual = wrapped.value();\n\n        assert.deepEqual(array, [1]);\n        assert.deepEqual(actual, [1, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.cond');\n\n  (function() {\n    QUnit.test('should create a conditional function', function(assert) {\n      assert.expect(3);\n\n      var cond = _.cond([\n        [lodashStable.matches({ 'a': 1 }),     stubA],\n        [lodashStable.matchesProperty('b', 1), stubB],\n        [lodashStable.property('c'),           stubC]\n      ]);\n\n      assert.strictEqual(cond({ 'a':  1, 'b': 2, 'c': 3 }), 'a');\n      assert.strictEqual(cond({ 'a':  0, 'b': 1, 'c': 2 }), 'b');\n      assert.strictEqual(cond({ 'a': -1, 'b': 0, 'c': 1 }), 'c');\n    });\n\n    QUnit.test('should provide arguments to functions', function(assert) {\n      assert.expect(2);\n\n      var args1,\n          args2,\n          expected = ['a', 'b', 'c'];\n\n      var cond = _.cond([[\n        function() { args1 || (args1 = slice.call(arguments)); return true; },\n        function() { args2 || (args2 = slice.call(arguments)); }\n      ]]);\n\n      cond('a', 'b', 'c');\n\n      assert.deepEqual(args1, expected);\n      assert.deepEqual(args2, expected);\n    });\n\n    QUnit.test('should work with predicate shorthands', function(assert) {\n      assert.expect(3);\n\n      var cond = _.cond([\n        [{ 'a': 1 }, stubA],\n        [['b', 1],   stubB],\n        ['c',        stubC]\n      ]);\n\n      assert.strictEqual(cond({ 'a':  1, 'b': 2, 'c': 3 }), 'a');\n      assert.strictEqual(cond({ 'a':  0, 'b': 1, 'c': 2 }), 'b');\n      assert.strictEqual(cond({ 'a': -1, 'b': 0, 'c': 1 }), 'c');\n    });\n\n    QUnit.test('should return `undefined` when no condition is met', function(assert) {\n      assert.expect(1);\n\n      var cond = _.cond([[stubFalse, stubA]]);\n      assert.strictEqual(cond({ 'a': 1 }), undefined);\n    });\n\n    QUnit.test('should throw a TypeError if `pairs` is not composed of functions', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([false, true], function(value) {\n        assert.raises(function() { _.cond([[stubTrue, value]])(); }, TypeError);\n      });\n    });\n\n    QUnit.test('should use `this` binding of function for `pairs`', function(assert) {\n      assert.expect(1);\n\n      var cond = _.cond([\n        [function(a) { return this[a]; }, function(a, b) { return this[b]; }]\n      ]);\n\n      var object = { 'cond': cond, 'a': 1, 'b': 2 };\n      assert.strictEqual(object.cond('a', 'b'), 2);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.conforms');\n\n  (function() {\n    QUnit.test('should not change behavior if `source` is modified', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 2 },\n          source = { 'a': function(value) { return value > 1; } },\n          par = _.conforms(source);\n\n      assert.strictEqual(par(object), true);\n\n      source.a = function(value) { return value < 2; };\n      assert.strictEqual(par(object), true);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('conforms methods');\n\n  lodashStable.each(['conforms', 'conformsTo'], function(methodName) {\n    var isConforms = methodName == 'conforms';\n\n    function conforms(source) {\n      return isConforms ? _.conforms(source) : function(object) {\n        return _.conformsTo(object, source);\n      };\n    }\n\n    QUnit.test('`_.' + methodName + '` should check if `object` conforms to `source`', function(assert) {\n      assert.expect(2);\n\n      var objects = [\n        { 'a': 1, 'b': 8 },\n        { 'a': 2, 'b': 4 },\n        { 'a': 3, 'b': 16 }\n      ];\n\n      var par = conforms({\n        'b': function(value) { return value > 4; }\n      });\n\n      var actual = lodashStable.filter(objects, par);\n      assert.deepEqual(actual, [objects[0], objects[2]]);\n\n      par = conforms({\n        'b': function(value) { return value > 8; },\n        'a': function(value) { return value > 1; }\n      });\n\n      actual = lodashStable.filter(objects, par);\n      assert.deepEqual(actual, [objects[2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not match by inherited `source` properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = function(value) {\n          return value > 1;\n        };\n      }\n      Foo.prototype.b = function(value) {\n        return value > 8;\n      };\n\n      var objects = [\n        { 'a': 1, 'b': 8 },\n        { 'a': 2, 'b': 4 },\n        { 'a': 3, 'b': 16 }\n      ];\n\n      var par = conforms(new Foo),\n          actual = lodashStable.filter(objects, par);\n\n      assert.deepEqual(actual, [objects[1], objects[2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not invoke `source` predicates for missing `object` properties', function(assert) {\n      assert.expect(2);\n\n      var count = 0;\n\n      var par = conforms({\n        'a': function() { count++; return true; }\n      });\n\n      assert.strictEqual(par({}), false);\n      assert.strictEqual(count, 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a function for `object`', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.a = 1;\n\n      function Bar() {}\n      Bar.a = 2;\n\n      var par = conforms({\n        'a': function(value) { return value > 1; }\n      });\n\n      assert.strictEqual(par(Foo), false);\n      assert.strictEqual(par(Bar), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a function for `source`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.a = function(value) { return value > 1; };\n\n      var objects = [{ 'a': 1 }, { 'a': 2 }],\n          actual = lodashStable.filter(objects, conforms(Foo));\n\n      assert.deepEqual(actual, [objects[1]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a non-plain `object`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var par = conforms({\n        'b': function(value) { return value > 1; }\n      });\n\n      assert.strictEqual(par(new Foo), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` when `object` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      var par = conforms({\n        'a': function(value) { return value > 1; }\n      });\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? par(value) : par();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing an empty `source` to a nullish `object`', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubTrue),\n          par = conforms({});\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? par(value) : par();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing an empty `source`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1 },\n          expected = lodashStable.map(empties, stubTrue);\n\n      var actual = lodashStable.map(empties, function(value) {\n        var par = conforms(value);\n        return par(object);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.constant');\n\n  (function() {\n    QUnit.test('should create a function that returns `value`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1 },\n          values = Array(2).concat(empties, true, 1, 'a'),\n          constant = _.constant(object);\n\n      var results = lodashStable.map(values, function(value, index) {\n        if (index < 2) {\n          return index ? constant.call({}) : constant();\n        }\n        return constant(value);\n      });\n\n      assert.ok(lodashStable.every(results, function(result) {\n        return result === object;\n      }));\n    });\n\n    QUnit.test('should work with falsey values', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubTrue);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        var constant = index ? _.constant(value) : _.constant(),\n            result = constant();\n\n        return (result === value) || (result !== result && value !== value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(true).constant();\n        assert.ok(wrapped instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.countBy');\n\n  (function() {\n    var array = [6.1, 4.2, 6.3];\n\n    QUnit.test('should transform keys by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.countBy(array, Math.floor);\n      assert.deepEqual(actual, { '4': 1, '6': 2 });\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [4, 6, 6],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '4': 1, '6':  2 }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.countBy(array, value) : _.countBy(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = _.countBy(['one', 'two', 'three'], 'length');\n      assert.deepEqual(actual, { '3': 2, '5': 1 });\n    });\n\n    QUnit.test('should only add values to own, not inherited, properties', function(assert) {\n      assert.expect(2);\n\n      var actual = _.countBy(array, function(n) {\n        return Math.floor(n) > 4 ? 'hasOwnProperty' : 'constructor';\n      });\n\n      assert.deepEqual(actual.constructor, 1);\n      assert.deepEqual(actual.hasOwnProperty, 2);\n    });\n\n    QUnit.test('should work with a number for `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var array = [\n        [1, 'a'],\n        [2, 'a'],\n        [2, 'b']\n      ];\n\n      assert.deepEqual(_.countBy(array, 0), { '1': 1, '2': 2 });\n      assert.deepEqual(_.countBy(array, 1), { 'a': 2, 'b': 1 });\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.countBy({ 'a': 6.1, 'b': 4.2, 'c': 6.3 }, Math.floor);\n      assert.deepEqual(actual, { '4': 1, '6': 2 });\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE).concat(\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 2), LARGE_ARRAY_SIZE),\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 1.5), LARGE_ARRAY_SIZE)\n        );\n\n        var actual = _(array).countBy().map(square).filter(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(_.map(_.countBy(array), square), isEven)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.create');\n\n  (function() {\n    function Shape() {\n      this.x = 0;\n      this.y = 0;\n    }\n\n    function Circle() {\n      Shape.call(this);\n    }\n\n    QUnit.test('should create an object that inherits from the given `prototype` object', function(assert) {\n      assert.expect(3);\n\n      Circle.prototype = _.create(Shape.prototype);\n      Circle.prototype.constructor = Circle;\n\n      var actual = new Circle;\n\n      assert.ok(actual instanceof Circle);\n      assert.ok(actual instanceof Shape);\n      assert.notStrictEqual(Circle.prototype, Shape.prototype);\n    });\n\n    QUnit.test('should assign `properties` to the created object', function(assert) {\n      assert.expect(3);\n\n      var expected = { 'constructor': Circle, 'radius': 0 };\n      Circle.prototype = _.create(Shape.prototype, expected);\n\n      var actual = new Circle;\n\n      assert.ok(actual instanceof Circle);\n      assert.ok(actual instanceof Shape);\n      assert.deepEqual(Circle.prototype, expected);\n    });\n\n    QUnit.test('should assign own properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n        this.c = 3;\n      }\n      Foo.prototype.b = 2;\n\n      assert.deepEqual(_.create({}, new Foo), { 'a': 1, 'c': 3 });\n    });\n\n    QUnit.test('should assign properties that shadow those of `prototype`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      var object = _.create(new Foo, { 'a': 1 });\n      assert.deepEqual(lodashStable.keys(object), ['a']);\n    });\n\n    QUnit.test('should accept a falsey `prototype`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubObject);\n\n      var actual = lodashStable.map(falsey, function(prototype, index) {\n        return index ? _.create(prototype) : _.create();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ignore a primitive `prototype` and use an empty object instead', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(primitives, stubTrue);\n\n      var actual = lodashStable.map(primitives, function(value, index) {\n        return lodashStable.isPlainObject(index ? _.create(value) : _.create());\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [{ 'a': 1 }, { 'a': 1 }, { 'a': 1 }],\n          expected = lodashStable.map(array, stubTrue),\n          objects = lodashStable.map(array, _.create);\n\n      var actual = lodashStable.map(objects, function(object) {\n        return object.a === 1 && !_.keys(object).length;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.curry');\n\n  (function() {\n    function fn(a, b, c, d) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should curry based on the number of arguments given', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curry(fn),\n          expected = [1, 2, 3, 4];\n\n      assert.deepEqual(curried(1)(2)(3)(4), expected);\n      assert.deepEqual(curried(1, 2)(3, 4), expected);\n      assert.deepEqual(curried(1, 2, 3, 4), expected);\n    });\n\n    QUnit.test('should allow specifying `arity`', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curry(fn, 3),\n          expected = [1, 2, 3];\n\n      assert.deepEqual(curried(1)(2, 3), expected);\n      assert.deepEqual(curried(1, 2)(3), expected);\n      assert.deepEqual(curried(1, 2, 3), expected);\n    });\n\n    QUnit.test('should coerce `arity` to an integer', function(assert) {\n      assert.expect(2);\n\n      var values = ['0', 0.6, 'xyz'],\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(arity) {\n        return _.curry(fn, arity)();\n      });\n\n      assert.deepEqual(actual, expected);\n      assert.deepEqual(_.curry(fn, '2')(1)(2), [1, 2]);\n    });\n\n    QUnit.test('should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var curried = _.curry(fn),\n          ph = curried.placeholder;\n\n      assert.deepEqual(curried(1)(ph, 3)(ph, 4)(2), [1, 2, 3, 4]);\n      assert.deepEqual(curried(ph, 2)(1)(ph, 4)(3), [1, 2, 3, 4]);\n      assert.deepEqual(curried(ph, ph, 3)(ph, 2)(ph, 4)(1), [1, 2, 3, 4]);\n      assert.deepEqual(curried(ph, ph, ph, 4)(ph, ph, 3)(ph, 2)(1), [1, 2, 3, 4]);\n    });\n\n    QUnit.test('should persist placeholders', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curry(fn),\n          ph = curried.placeholder,\n          actual = curried(ph, ph, ph, 'd')('a')(ph)('b')('c');\n\n      assert.deepEqual(actual, ['a', 'b', 'c', 'd']);\n    });\n\n    QUnit.test('should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var curried = _.curry(fn),\n            _ph = _.placeholder = {},\n            ph = curried.placeholder;\n\n        assert.deepEqual(curried(1)(_ph, 3)(ph, 4), [1, ph, 3, 4]);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should provide additional arguments after reaching the target arity', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curry(fn, 3);\n      assert.deepEqual(curried(1)(2, 3, 4), [1, 2, 3, 4]);\n      assert.deepEqual(curried(1, 2)(3, 4, 5), [1, 2, 3, 4, 5]);\n      assert.deepEqual(curried(1, 2, 3, 4, 5, 6), [1, 2, 3, 4, 5, 6]);\n    });\n\n    QUnit.test('should create a function with a `length` of `0`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.times(2, function(index) {\n        var curried = index ? _.curry(fn, 4) : _.curry(fn);\n        assert.strictEqual(curried.length, 0);\n        assert.strictEqual(curried(1).length, 0);\n        assert.strictEqual(curried(1, 2).length, 0);\n      });\n    });\n\n    QUnit.test('should ensure `new curried` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var curried = _.curry(Foo),\n          object = {};\n\n      assert.ok(new curried(false) instanceof Foo);\n      assert.strictEqual(new curried(true), object);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(9);\n\n      var fn = function(a, b, c) {\n        var value = this || {};\n        return [value[a], value[b], value[c]];\n      };\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          expected = [1, 2, 3];\n\n      assert.deepEqual(_.curry(_.bind(fn, object), 3)('a')('b')('c'), expected);\n      assert.deepEqual(_.curry(_.bind(fn, object), 3)('a', 'b')('c'), expected);\n      assert.deepEqual(_.curry(_.bind(fn, object), 3)('a', 'b', 'c'), expected);\n\n      assert.deepEqual(_.bind(_.curry(fn), object)('a')('b')('c'), Array(3));\n      assert.deepEqual(_.bind(_.curry(fn), object)('a', 'b')('c'), Array(3));\n      assert.deepEqual(_.bind(_.curry(fn), object)('a', 'b', 'c'), expected);\n\n      object.curried = _.curry(fn);\n      assert.deepEqual(object.curried('a')('b')('c'), Array(3));\n      assert.deepEqual(object.curried('a', 'b')('c'), Array(3));\n      assert.deepEqual(object.curried('a', 'b', 'c'), expected);\n    });\n\n    QUnit.test('should work with partialed methods', function(assert) {\n      assert.expect(2);\n\n      var curried = _.curry(fn),\n          expected = [1, 2, 3, 4];\n\n      var a = _.partial(curried, 1),\n          b = _.bind(a, null, 2),\n          c = _.partialRight(b, 4),\n          d = _.partialRight(b(3), 4);\n\n      assert.deepEqual(c(3), expected);\n      assert.deepEqual(d(), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.curryRight');\n\n  (function() {\n    function fn(a, b, c, d) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should curry based on the number of arguments given', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curryRight(fn),\n          expected = [1, 2, 3, 4];\n\n      assert.deepEqual(curried(4)(3)(2)(1), expected);\n      assert.deepEqual(curried(3, 4)(1, 2), expected);\n      assert.deepEqual(curried(1, 2, 3, 4), expected);\n    });\n\n    QUnit.test('should allow specifying `arity`', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curryRight(fn, 3),\n          expected = [1, 2, 3];\n\n      assert.deepEqual(curried(3)(1, 2), expected);\n      assert.deepEqual(curried(2, 3)(1), expected);\n      assert.deepEqual(curried(1, 2, 3), expected);\n    });\n\n    QUnit.test('should coerce `arity` to an integer', function(assert) {\n      assert.expect(2);\n\n      var values = ['0', 0.6, 'xyz'],\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(arity) {\n        return _.curryRight(fn, arity)();\n      });\n\n      assert.deepEqual(actual, expected);\n      assert.deepEqual(_.curryRight(fn, '2')(1)(2), [2, 1]);\n    });\n\n    QUnit.test('should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var curried = _.curryRight(fn),\n          expected = [1, 2, 3, 4],\n          ph = curried.placeholder;\n\n      assert.deepEqual(curried(4)(2, ph)(1, ph)(3), expected);\n      assert.deepEqual(curried(3, ph)(4)(1, ph)(2), expected);\n      assert.deepEqual(curried(ph, ph, 4)(ph, 3)(ph, 2)(1), expected);\n      assert.deepEqual(curried(ph, ph, ph, 4)(ph, ph, 3)(ph, 2)(1), expected);\n    });\n\n    QUnit.test('should persist placeholders', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curryRight(fn),\n          ph = curried.placeholder,\n          actual = curried('a', ph, ph, ph)('b')(ph)('c')('d');\n\n      assert.deepEqual(actual, ['a', 'b', 'c', 'd']);\n    });\n\n    QUnit.test('should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var curried = _.curryRight(fn),\n            _ph = _.placeholder = {},\n            ph = curried.placeholder;\n\n        assert.deepEqual(curried(4)(2, _ph)(1, ph), [1, 2, ph, 4]);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should provide additional arguments after reaching the target arity', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curryRight(fn, 3);\n      assert.deepEqual(curried(4)(1, 2, 3), [1, 2, 3, 4]);\n      assert.deepEqual(curried(4, 5)(1, 2, 3), [1, 2, 3, 4, 5]);\n      assert.deepEqual(curried(1, 2, 3, 4, 5, 6), [1, 2, 3, 4, 5, 6]);\n    });\n\n    QUnit.test('should create a function with a `length` of `0`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.times(2, function(index) {\n        var curried = index ? _.curryRight(fn, 4) : _.curryRight(fn);\n        assert.strictEqual(curried.length, 0);\n        assert.strictEqual(curried(4).length, 0);\n        assert.strictEqual(curried(3, 4).length, 0);\n      });\n    });\n\n    QUnit.test('should ensure `new curried` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var curried = _.curryRight(Foo),\n          object = {};\n\n      assert.ok(new curried(false) instanceof Foo);\n      assert.strictEqual(new curried(true), object);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(9);\n\n      var fn = function(a, b, c) {\n        var value = this || {};\n        return [value[a], value[b], value[c]];\n      };\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          expected = [1, 2, 3];\n\n      assert.deepEqual(_.curryRight(_.bind(fn, object), 3)('c')('b')('a'), expected);\n      assert.deepEqual(_.curryRight(_.bind(fn, object), 3)('b', 'c')('a'), expected);\n      assert.deepEqual(_.curryRight(_.bind(fn, object), 3)('a', 'b', 'c'), expected);\n\n      assert.deepEqual(_.bind(_.curryRight(fn), object)('c')('b')('a'), Array(3));\n      assert.deepEqual(_.bind(_.curryRight(fn), object)('b', 'c')('a'), Array(3));\n      assert.deepEqual(_.bind(_.curryRight(fn), object)('a', 'b', 'c'), expected);\n\n      object.curried = _.curryRight(fn);\n      assert.deepEqual(object.curried('c')('b')('a'), Array(3));\n      assert.deepEqual(object.curried('b', 'c')('a'), Array(3));\n      assert.deepEqual(object.curried('a', 'b', 'c'), expected);\n    });\n\n    QUnit.test('should work with partialed methods', function(assert) {\n      assert.expect(2);\n\n      var curried = _.curryRight(fn),\n          expected = [1, 2, 3, 4];\n\n      var a = _.partialRight(curried, 4),\n          b = _.partialRight(a, 3),\n          c = _.bind(b, null, 1),\n          d = _.partial(b(2), 1);\n\n      assert.deepEqual(c(2), expected);\n      assert.deepEqual(d(), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('curry methods');\n\n  lodashStable.each(['curry', 'curryRight'], function(methodName) {\n    var func = _[methodName],\n        fn = function(a, b) { return slice.call(arguments); },\n        isCurry = methodName == 'curry';\n\n    QUnit.test('`_.' + methodName + '` should not error on functions with the same name as lodash methods', function(assert) {\n      assert.expect(1);\n\n      function run(a, b) {\n        return a + b;\n      }\n\n      var curried = func(run);\n\n      try {\n        var actual = curried(1)(2);\n      } catch (e) {}\n\n      assert.strictEqual(actual, 3);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work for function names that shadow those on `Object.prototype`', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curry(function hasOwnProperty(a, b, c) {\n        return [a, b, c];\n      });\n\n      var expected = [1, 2, 3];\n\n      assert.deepEqual(curried(1)(2)(3), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(2);\n\n      var array = [fn, fn, fn],\n          object = { 'a': fn, 'b': fn, 'c': fn };\n\n      lodashStable.each([array, object], function(collection) {\n        var curries = lodashStable.map(collection, func),\n            expected = lodashStable.map(collection, lodashStable.constant(isCurry ? ['a', 'b'] : ['b', 'a']));\n\n        var actual = lodashStable.map(curries, function(curried) {\n          return curried('a')('b');\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.debounce');\n\n  (function() {\n    QUnit.test('should debounce a function', function(assert) {\n      assert.expect(6);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var debounced = _.debounce(function(value) {\n        ++callCount;\n        return value;\n      }, 32);\n\n      var results = [debounced('a'), debounced('b'), debounced('c')];\n      assert.deepEqual(results, [undefined, undefined, undefined]);\n      assert.strictEqual(callCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n\n        var results = [debounced('d'), debounced('e'), debounced('f')];\n        assert.deepEqual(results, ['c', 'c', 'c']);\n        assert.strictEqual(callCount, 1);\n      }, 128);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 256);\n    });\n\n    QUnit.test('subsequent debounced calls return the last `func` result', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var debounced = _.debounce(identity, 32);\n      debounced('a');\n\n      setTimeout(function() {\n        assert.notEqual(debounced('b'), 'b');\n      }, 64);\n\n      setTimeout(function() {\n        assert.notEqual(debounced('c'), 'c');\n        done();\n      }, 128);\n    });\n\n    QUnit.test('should not immediately call `func` when `wait` is `0`', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          debounced = _.debounce(function() { ++callCount; }, 0);\n\n      debounced();\n      debounced();\n      assert.strictEqual(callCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        done();\n      }, 5);\n    });\n\n    QUnit.test('should apply default options', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          debounced = _.debounce(function() { callCount++; }, 32, {});\n\n      debounced();\n      assert.strictEqual(callCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should support a `leading` option', function(assert) {\n      assert.expect(4);\n\n      var done = assert.async();\n\n      var callCounts = [0, 0];\n\n      var withLeading = _.debounce(function() {\n        callCounts[0]++;\n      }, 32, { 'leading': true });\n\n      var withLeadingAndTrailing = _.debounce(function() {\n        callCounts[1]++;\n      }, 32, { 'leading': true });\n\n      withLeading();\n      assert.strictEqual(callCounts[0], 1);\n\n      withLeadingAndTrailing();\n      withLeadingAndTrailing();\n      assert.strictEqual(callCounts[1], 1);\n\n      setTimeout(function() {\n        assert.deepEqual(callCounts, [1, 2]);\n\n        withLeading();\n        assert.strictEqual(callCounts[0], 2);\n\n        done();\n      }, 64);\n    });\n\n    QUnit.test('subsequent leading debounced calls return the last `func` result', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var debounced = _.debounce(identity, 32, { 'leading': true, 'trailing': false }),\n          results = [debounced('a'), debounced('b')];\n\n      assert.deepEqual(results, ['a', 'a']);\n\n      setTimeout(function() {\n        var results = [debounced('c'), debounced('d')];\n        assert.deepEqual(results, ['c', 'c']);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should support a `trailing` option', function(assert) {\n      assert.expect(4);\n\n      var done = assert.async();\n\n      var withCount = 0,\n          withoutCount = 0;\n\n      var withTrailing = _.debounce(function() {\n        withCount++;\n      }, 32, { 'trailing': true });\n\n      var withoutTrailing = _.debounce(function() {\n        withoutCount++;\n      }, 32, { 'trailing': false });\n\n      withTrailing();\n      assert.strictEqual(withCount, 0);\n\n      withoutTrailing();\n      assert.strictEqual(withoutCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(withCount, 1);\n        assert.strictEqual(withoutCount, 0);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should support a `maxWait` option', function(assert) {\n      assert.expect(4);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var debounced = _.debounce(function(value) {\n        ++callCount;\n        return value;\n      }, 32, { 'maxWait': 64 });\n\n      debounced();\n      debounced();\n      assert.strictEqual(callCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        debounced();\n        debounced();\n        assert.strictEqual(callCount, 1);\n      }, 128);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 256);\n    });\n\n    QUnit.test('should support `maxWait` in a tight loop', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var limit = (argv || isPhantom) ? 1000 : 320,\n          withCount = 0,\n          withoutCount = 0;\n\n      var withMaxWait = _.debounce(function() {\n        withCount++;\n      }, 64, { 'maxWait': 128 });\n\n      var withoutMaxWait = _.debounce(function() {\n        withoutCount++;\n      }, 96);\n\n      var start = +new Date;\n      while ((new Date - start) < limit) {\n        withMaxWait();\n        withoutMaxWait();\n      }\n      var actual = [Boolean(withoutCount), Boolean(withCount)];\n      setTimeout(function() {\n        assert.deepEqual(actual, [false, true]);\n        done();\n      }, 1);\n    });\n\n    QUnit.test('should queue a trailing call for subsequent debounced calls after `maxWait`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var debounced = _.debounce(function() {\n        ++callCount;\n      }, 200, { 'maxWait': 200 });\n\n      debounced();\n\n      setTimeout(debounced, 190);\n      setTimeout(debounced, 200);\n      setTimeout(debounced, 210);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 500);\n    });\n\n    QUnit.test('should cancel `maxDelayed` when `delayed` is invoked', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var debounced = _.debounce(function() {\n        callCount++;\n      }, 32, { 'maxWait': 64 });\n\n      debounced();\n\n      setTimeout(function() {\n        debounced();\n        assert.strictEqual(callCount, 1);\n      }, 128);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 192);\n    });\n\n    QUnit.test('should invoke the trailing call with the correct arguments and `this` binding', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var actual,\n          callCount = 0,\n          object = {};\n\n      var debounced = _.debounce(function(value) {\n        actual = [this];\n        push.apply(actual, arguments);\n        return ++callCount != 2;\n      }, 32, { 'leading': true, 'maxWait': 64 });\n\n      while (true) {\n        if (!debounced.call(object, 'a')) {\n          break;\n        }\n      }\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        assert.deepEqual(actual, [object, 'a']);\n        done();\n      }, 64);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.deburr');\n\n  (function() {\n    QUnit.test('should convert Latin Unicode letters to basic Latin', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(burredLetters, _.deburr);\n      assert.deepEqual(actual, deburredLetters);\n    });\n\n    QUnit.test('should not deburr Latin mathematical operators', function(assert) {\n      assert.expect(1);\n\n      var operators = ['\\xd7', '\\xf7'],\n          actual = lodashStable.map(operators, _.deburr);\n\n      assert.deepEqual(actual, operators);\n    });\n\n    QUnit.test('should deburr combining diacritical marks', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(comboMarks, lodashStable.constant('ei'));\n\n      var actual = lodashStable.map(comboMarks, function(chr) {\n        return _.deburr('e' + chr + 'i');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.defaults');\n\n  (function() {\n    QUnit.test('should assign source properties if missing on `object`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.defaults({ 'a': 1 }, { 'a': 2, 'b': 2 });\n      assert.deepEqual(actual, { 'a': 1, 'b': 2 });\n    });\n\n    QUnit.test('should accept multiple sources', function(assert) {\n      assert.expect(2);\n\n      var expected = { 'a': 1, 'b': 2, 'c': 3 },\n          actual = _.defaults({ 'a': 1, 'b': 2 }, { 'b': 3 }, { 'c': 3 });\n\n      assert.deepEqual(actual, expected);\n\n      actual = _.defaults({ 'a': 1, 'b': 2 }, { 'b': 3, 'c': 3 }, { 'c': 2 });\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not overwrite `null` values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.defaults({ 'a': null }, { 'a': 1 });\n      assert.strictEqual(actual.a, null);\n    });\n\n    QUnit.test('should overwrite `undefined` values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.defaults({ 'a': undefined }, { 'a': 1 });\n      assert.strictEqual(actual.a, 1);\n    });\n\n    QUnit.test('should assign `undefined` values', function(assert) {\n      assert.expect(1);\n\n      var source = { 'a': undefined, 'b': 1 },\n          actual = _.defaults({}, source);\n\n      assert.deepEqual(actual, { 'a': undefined, 'b': 1 });\n    });\n\n    QUnit.test('should assign properties that shadow those on `Object.prototype`', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'constructor': objectProto.constructor,\n        'hasOwnProperty': objectProto.hasOwnProperty,\n        'isPrototypeOf': objectProto.isPrototypeOf,\n        'propertyIsEnumerable': objectProto.propertyIsEnumerable,\n        'toLocaleString': objectProto.toLocaleString,\n        'toString': objectProto.toString,\n        'valueOf': objectProto.valueOf\n      };\n\n      var source = {\n        'constructor': 1,\n        'hasOwnProperty': 2,\n        'isPrototypeOf': 3,\n        'propertyIsEnumerable': 4,\n        'toLocaleString': 5,\n        'toString': 6,\n        'valueOf': 7\n      };\n\n      var expected = lodashStable.clone(source);\n      assert.deepEqual(_.defaults({}, source), expected);\n\n      expected = lodashStable.clone(object);\n      assert.deepEqual(_.defaults({}, object, source), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.defaultsDeep');\n\n  (function() {\n    QUnit.test('should deep assign source properties if missing on `object`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': 2 }, 'd': 4 },\n          source = { 'a': { 'b': 3, 'c': 3 }, 'e': 5 },\n          expected = { 'a': { 'b': 2, 'c': 3 }, 'd': 4, 'e': 5 };\n\n      assert.deepEqual(_.defaultsDeep(object, source), expected);\n    });\n\n    QUnit.test('should accept multiple sources', function(assert) {\n      assert.expect(2);\n\n      var source1 = { 'a': { 'b': 3 } },\n          source2 = { 'a': { 'c': 3 } },\n          source3 = { 'a': { 'b': 3, 'c': 3 } },\n          source4 = { 'a': { 'c': 4 } },\n          expected = { 'a': { 'b': 2, 'c': 3 } };\n\n      assert.deepEqual(_.defaultsDeep({ 'a': { 'b': 2 } }, source1, source2), expected);\n      assert.deepEqual(_.defaultsDeep({ 'a': { 'b': 2 } }, source3, source4), expected);\n    });\n\n    QUnit.test('should not overwrite `null` values', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': null } },\n          source = { 'a': { 'b': 2 } },\n          actual = _.defaultsDeep(object, source);\n\n      assert.strictEqual(actual.a.b, null);\n    });\n\n    QUnit.test('should not overwrite regexp values', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': /x/ } },\n          source = { 'a': { 'b': /y/ } },\n          actual = _.defaultsDeep(object, source);\n\n      assert.deepEqual(actual.a.b, /x/);\n    });\n\n    QUnit.test('should not convert function properties to objects', function(assert) {\n      assert.expect(2);\n\n      var actual = _.defaultsDeep({}, { 'a': noop });\n      assert.strictEqual(actual.a, noop);\n\n      actual = _.defaultsDeep({}, { 'a': { 'b': noop } });\n      assert.strictEqual(actual.a.b, noop);\n    });\n\n    QUnit.test('should overwrite `undefined` values', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': undefined } },\n          source = { 'a': { 'b': 2 } },\n          actual = _.defaultsDeep(object, source);\n\n      assert.strictEqual(actual.a.b, 2);\n    });\n\n    QUnit.test('should assign `undefined` values', function(assert) {\n      assert.expect(1);\n\n      var source = { 'a': undefined, 'b': { 'c': undefined, 'd': 1 } },\n          expected = lodashStable.cloneDeep(source),\n          actual = _.defaultsDeep({}, source);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should merge sources containing circular references', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': { 'a': 2 }\n      };\n\n      var source = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': {}\n      };\n\n      object.foo.b.c.d = object;\n      source.foo.b.c.d = source;\n      source.bar.b = source.foo.b;\n\n      var actual = _.defaultsDeep(object, source);\n\n      assert.strictEqual(actual.bar.b, actual.foo.b);\n      assert.strictEqual(actual.foo.b.c.d, actual.foo.b.c.d.foo.b.c.d);\n    });\n\n    QUnit.test('should not modify sources', function(assert) {\n      assert.expect(3);\n\n      var source1 = { 'a': 1, 'b': { 'c': 2 } },\n          source2 = { 'b': { 'c': 3, 'd': 3 } },\n          actual = _.defaultsDeep({}, source1, source2);\n\n      assert.deepEqual(actual, { 'a': 1, 'b': { 'c': 2, 'd': 3 } });\n      assert.deepEqual(source1, { 'a': 1, 'b': { 'c': 2 } });\n      assert.deepEqual(source2, { 'b': { 'c': 3, 'd': 3 } });\n    });\n\n    QUnit.test('should not attempt a merge of a string into an array', function(assert) {\n      assert.expect(1);\n\n      var actual = _.defaultsDeep({ 'a': ['abc'] }, { 'a': 'abc' });\n      assert.deepEqual(actual.a, ['abc']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.defaultTo');\n\n  (function() {\n    QUnit.test('should return a default value if `value` is `NaN` or nullish', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return (value == null || value !== value) ? 1 : value;\n      });\n\n      var actual = lodashStable.map(falsey, function(value) {\n        return _.defaultTo(value, 1);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.defer');\n\n  (function() {\n    QUnit.test('should defer `func` execution', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var pass = false;\n      _.defer(function() { pass = true; });\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 32);\n    });\n\n    QUnit.test('should provide additional arguments to `func`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var args;\n\n      _.defer(function() {\n        args = slice.call(arguments);\n      }, 1, 2);\n\n      setTimeout(function() {\n        assert.deepEqual(args, [1, 2]);\n        done();\n      }, 32);\n    });\n\n    QUnit.test('should be cancelable', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var pass = true,\n          timerId = _.defer(function() { pass = false; });\n\n      clearTimeout(timerId);\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 32);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.delay');\n\n  (function() {\n    QUnit.test('should delay `func` execution', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var pass = false;\n      _.delay(function() { pass = true; }, 32);\n\n      setTimeout(function() {\n        assert.notOk(pass);\n      }, 1);\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should provide additional arguments to `func`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var args;\n\n      _.delay(function() {\n        args = slice.call(arguments);\n      }, 32, 1, 2);\n\n      setTimeout(function() {\n        assert.deepEqual(args, [1, 2]);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should use a default `wait` of `0`', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var pass = false;\n      _.delay(function() { pass = true; });\n\n      assert.notOk(pass);\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 0);\n    });\n\n    QUnit.test('should be cancelable', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var pass = true,\n          timerId = _.delay(function() { pass = false; }, 32);\n\n      clearTimeout(timerId);\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should work with mocked `setTimeout`', function(assert) {\n      assert.expect(1);\n\n      if (!isPhantom) {\n        var pass = false,\n            setTimeout = root.setTimeout;\n\n        setProperty(root, 'setTimeout', function(func) { func(); });\n        _.delay(function() { pass = true; }, 32);\n        setProperty(root, 'setTimeout', setTimeout);\n\n        assert.ok(pass);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('difference methods');\n\n  lodashStable.each(['difference', 'differenceBy', 'differenceWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the difference of two arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1], [2, 3]);\n      assert.deepEqual(actual, [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the difference of multiple arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1, 2, 3], [3, 4], [3, 2]);\n      assert.deepEqual(actual, [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      var array = [-0, 0];\n\n      var actual = lodashStable.map(array, function(value) {\n        return func(array, [value]);\n      });\n\n      assert.deepEqual(actual, [[], []]);\n\n      actual = lodashStable.map(func([-0, 1], [1]), lodashStable.toString);\n      assert.deepEqual(actual, ['0']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func([1, NaN, 3], [NaN, 5, NaN]), [1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays', function(assert) {\n      assert.expect(1);\n\n      var array1 = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n          array2 = lodashStable.range(LARGE_ARRAY_SIZE),\n          a = {},\n          b = {},\n          c = {};\n\n      array1.push(a, b, c);\n      array2.push(b, c, a);\n\n      assert.deepEqual(func(array1, array2), [LARGE_ARRAY_SIZE]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      var array = [-0, 0];\n\n      var actual = lodashStable.map(array, function(value) {\n        var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(value));\n        return func(array, largeArray);\n      });\n\n      assert.deepEqual(actual, [[], []]);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubOne);\n      actual = lodashStable.map(func([-0, 1], largeArray), lodashStable.toString);\n      assert.deepEqual(actual, ['0']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `NaN`', function(assert) {\n      assert.expect(1);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubNaN);\n      assert.deepEqual(func([1, NaN, 3], largeArray), [1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of objects', function(assert) {\n      assert.expect(1);\n\n      var object1 = {},\n          object2 = {},\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(object1));\n\n      assert.deepEqual(func([object1, object2], largeArray), [object2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore values that are not array-like', function(assert) {\n      assert.expect(3);\n\n      var array = [1, null, 3];\n\n      assert.deepEqual(func(args, 3, { '0': 1 }), [1, 2, 3]);\n      assert.deepEqual(func(null, array, 1), []);\n      assert.deepEqual(func(array, args, null), [null]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.differenceBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n      assert.deepEqual(actual, [1.2]);\n\n      actual = _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 2 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.differenceBy([2.1, 1.2], [2.3, 3.4], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [2.3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.differenceWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],\n          actual = _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[1]]);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var array = [-0, 1],\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubOne),\n          others = [[1], largeArray],\n          expected = lodashStable.map(others, lodashStable.constant(['-0']));\n\n      var actual = lodashStable.map(others, function(other) {\n        return lodashStable.map(_.differenceWith(array, other, lodashStable.eq), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.divide');\n\n  (function() {\n    QUnit.test('should divide two numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.divide(6, 4), 1.5);\n      assert.strictEqual(_.divide(-6, 4), -1.5);\n      assert.strictEqual(_.divide(-6, -4), 1.5);\n    });\n\n    QUnit.test('should coerce arguments to numbers', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.divide('6', '4'), 1.5);\n      assert.deepEqual(_.divide('x', 'y'), NaN);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.drop');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should drop the first two elements', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.drop(array, 2), [3]);\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [2, 3] : array;\n      });\n\n      var actual = lodashStable.map(falsey, function(n) {\n        return _.drop(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return all elements when `n` < `1`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.drop(array, n), array);\n      });\n    });\n\n    QUnit.test('should return an empty array when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        assert.deepEqual(_.drop(array, n), []);\n      });\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.drop(array, 1.6), [2, 3]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.drop);\n\n      assert.deepEqual(actual, [[2, 3], [5, 6], [8, 9]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            actual = _(array).drop(2).drop().value();\n\n        assert.deepEqual(actual, array.slice(3));\n\n        actual = _(array).filter(predicate).drop(2).drop().value();\n        assert.deepEqual(values, array);\n        assert.deepEqual(actual, _.drop(_.drop(_.filter(array, predicate), 2)));\n\n        actual = _(array).drop(2).dropRight().drop().dropRight(2).value();\n        assert.deepEqual(actual, _.dropRight(_.drop(_.dropRight(_.drop(array, 2))), 2));\n\n        values = [];\n\n        actual = _(array).drop().filter(predicate).drop(2).dropRight().drop().dropRight(2).value();\n        assert.deepEqual(values, array.slice(1));\n        assert.deepEqual(actual, _.dropRight(_.drop(_.dropRight(_.drop(_.filter(_.drop(array), predicate), 2))), 2));\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.dropRight');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should drop the last two elements', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRight(array, 2), [1]);\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [1, 2] : array;\n      });\n\n      var actual = lodashStable.map(falsey, function(n) {\n        return _.dropRight(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return all elements when `n` < `1`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.dropRight(array, n), array);\n      });\n    });\n\n    QUnit.test('should return an empty array when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        assert.deepEqual(_.dropRight(array, n), []);\n      });\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRight(array, 1.6), [1, 2]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.dropRight);\n\n      assert.deepEqual(actual, [[1, 2], [4, 5], [7, 8]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            actual = _(array).dropRight(2).dropRight().value();\n\n        assert.deepEqual(actual, array.slice(0, -3));\n\n        actual = _(array).filter(predicate).dropRight(2).dropRight().value();\n        assert.deepEqual(values, array);\n        assert.deepEqual(actual, _.dropRight(_.dropRight(_.filter(array, predicate), 2)));\n\n        actual = _(array).dropRight(2).drop().dropRight().drop(2).value();\n        assert.deepEqual(actual, _.drop(_.dropRight(_.drop(_.dropRight(array, 2))), 2));\n\n        values = [];\n\n        actual = _(array).dropRight().filter(predicate).dropRight(2).drop().dropRight().drop(2).value();\n        assert.deepEqual(values, array.slice(0, -1));\n        assert.deepEqual(actual, _.drop(_.dropRight(_.drop(_.dropRight(_.filter(_.dropRight(array), predicate), 2))), 2));\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.dropRightWhile');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    var objects = [\n      { 'a': 0, 'b': 0 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 2, 'b': 2 }\n    ];\n\n    QUnit.test('should drop elements while `predicate` returns truthy', function(assert) {\n      assert.expect(1);\n\n      var actual = _.dropRightWhile(array, function(n) {\n        return n > 2;\n      });\n\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.dropRightWhile(array, function() {\n        args = slice.call(arguments);\n      });\n\n      assert.deepEqual(args, [4, 3, array]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRightWhile(objects, { 'b': 2 }), objects.slice(0, 2));\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRightWhile(objects, ['b', 2]), objects.slice(0, 2));\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRightWhile(objects, 'b'), objects.slice(0, 1));\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array).dropRightWhile(function(n) {\n          return n > 2;\n        });\n\n        assert.ok(wrapped instanceof _);\n        assert.deepEqual(wrapped.value(), [1, 2]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.dropWhile');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    var objects = [\n      { 'a': 2, 'b': 2 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 0, 'b': 0 }\n    ];\n\n    QUnit.test('should drop elements while `predicate` returns truthy', function(assert) {\n      assert.expect(1);\n\n      var actual = _.dropWhile(array, function(n) {\n        return n < 3;\n      });\n\n      assert.deepEqual(actual, [3, 4]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.dropWhile(array, function() {\n        args = slice.call(arguments);\n      });\n\n      assert.deepEqual(args, [1, 0, array]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropWhile(objects, { 'b': 2 }), objects.slice(1));\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropWhile(objects, ['b', 2]), objects.slice(1));\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropWhile(objects, 'b'), objects.slice(2));\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 3),\n            predicate = function(n) { return n < 3; },\n            expected = _.dropWhile(array, predicate),\n            wrapped = _(array).dropWhile(predicate);\n\n        assert.deepEqual(wrapped.value(), expected);\n        assert.deepEqual(wrapped.reverse().value(), expected.slice().reverse());\n        assert.strictEqual(wrapped.last(), _.last(expected));\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence with `drop`', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 3);\n\n        var actual = _(array)\n          .dropWhile(function(n) { return n == 1; })\n          .drop()\n          .dropWhile(function(n) { return n == 3; })\n          .value();\n\n        assert.deepEqual(actual, array.slice(3));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.endsWith');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should return `true` if a string ends with `target`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.endsWith(string, 'c'), true);\n    });\n\n    QUnit.test('should return `false` if a string does not end with `target`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.endsWith(string, 'b'), false);\n    });\n\n    QUnit.test('should work with a `position`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.endsWith(string, 'b', 2), true);\n    });\n\n    QUnit.test('should work with `position` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 5, MAX_SAFE_INTEGER, Infinity], function(position) {\n        assert.strictEqual(_.endsWith(string, 'c', position), true);\n      });\n    });\n\n    QUnit.test('should treat falsey `position` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubTrue);\n\n      var actual = lodashStable.map(falsey, function(position) {\n        return _.endsWith(string, position === undefined ? 'c' : '', position);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat a negative `position` as `0`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each([-1, -3, -Infinity], function(position) {\n        assert.ok(lodashStable.every(string, function(chr) {\n          return !_.endsWith(string, chr, position);\n        }));\n        assert.strictEqual(_.endsWith(string, '', position), true);\n      });\n    });\n\n    QUnit.test('should coerce `position` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.endsWith(string, 'ab', 2.2), true);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.eq');\n\n  (function() {\n    QUnit.test('should perform a `SameValueZero` comparison of two values', function(assert) {\n      assert.expect(11);\n\n      assert.strictEqual(_.eq(), true);\n      assert.strictEqual(_.eq(undefined), true);\n      assert.strictEqual(_.eq(0, -0), true);\n      assert.strictEqual(_.eq(NaN, NaN), true);\n      assert.strictEqual(_.eq(1, 1), true);\n\n      assert.strictEqual(_.eq(null, undefined), false);\n      assert.strictEqual(_.eq(1, Object(1)), false);\n      assert.strictEqual(_.eq(1, '1'), false);\n      assert.strictEqual(_.eq(1, '1'), false);\n\n      var object = { 'a': 1 };\n      assert.strictEqual(_.eq(object, object), true);\n      assert.strictEqual(_.eq(object, { 'a': 1 }), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.escape');\n\n  (function() {\n    var escaped = '&amp;&lt;&gt;&quot;&#39;/',\n        unescaped = '&<>\"\\'/';\n\n    escaped += escaped;\n    unescaped += unescaped;\n\n    QUnit.test('should escape values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escape(unescaped), escaped);\n    });\n\n    QUnit.test('should handle strings with nothing to escape', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escape('abc'), 'abc');\n    });\n\n    QUnit.test('should escape the same characters unescaped by `_.unescape`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escape(_.unescape(escaped)), escaped);\n    });\n\n    lodashStable.each(['`', '/'], function(chr) {\n      QUnit.test('should not escape the \"' + chr + '\" character', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.escape(chr), chr);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.escapeRegExp');\n\n  (function() {\n    var escaped = '\\\\^\\\\$\\\\.\\\\*\\\\+\\\\?\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\\\\|\\\\\\\\',\n        unescaped = '^$.*+?()[]{}|\\\\';\n\n    QUnit.test('should escape values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escapeRegExp(unescaped + unescaped), escaped + escaped);\n    });\n\n    QUnit.test('should handle strings with nothing to escape', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escapeRegExp('abc'), 'abc');\n    });\n\n    QUnit.test('should return an empty string for empty values', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined, ''],\n          expected = lodashStable.map(values, stubString);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.escapeRegExp(value) : _.escapeRegExp();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.every');\n\n  (function() {\n    QUnit.test('should return `true` if `predicate` returns truthy for all elements', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(lodashStable.every([true, 1, 'a'], identity), true);\n    });\n\n    QUnit.test('should return `true` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubTrue);\n\n      var actual = lodashStable.map(empties, function(value) {\n        try {\n          return _.every(value, identity);\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` as soon as `predicate` returns falsey', function(assert) {\n      assert.expect(2);\n\n      var count = 0;\n\n      assert.strictEqual(_.every([true, null, true], function(value) {\n        count++;\n        return value;\n      }), false);\n\n      assert.strictEqual(count, 2);\n    });\n\n    QUnit.test('should work with collections of `undefined` values (test in IE < 9)', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.every([undefined, undefined, undefined], identity), false);\n    });\n\n    QUnit.test('should use `_.identity` when `predicate` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var array = [0];\n        return index ? _.every(array, value) : _.every(array);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(values, stubTrue);\n      actual = lodashStable.map(values, function(value, index) {\n        var array = [1];\n        return index ? _.every(array, value) : _.every(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 0, 'b': 1 }, { 'a': 1, 'b': 2 }];\n      assert.strictEqual(_.every(objects, 'a'), false);\n      assert.strictEqual(_.every(objects, 'b'), true);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 0, 'b': 0 }, { 'a': 0, 'b': 1 }];\n      assert.strictEqual(_.every(objects, { 'a': 0 }), true);\n      assert.strictEqual(_.every(objects, { 'b': 1 }), false);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([[1]], _.every);\n      assert.deepEqual(actual, [true]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('strict mode checks');\n\n  lodashStable.each(['assign', 'assignIn', 'bindAll', 'defaults', 'defaultsDeep', 'merge'], function(methodName) {\n    var func = _[methodName],\n        isBindAll = methodName == 'bindAll';\n\n    QUnit.test('`_.' + methodName + '` should ' + (isStrict ? '' : 'not ') + 'throw strict mode errors', function(assert) {\n      assert.expect(1);\n\n      var object = freeze({ 'a': undefined, 'b': function() {} }),\n          pass = !isStrict;\n\n      try {\n        func(object, isBindAll ? 'b' : { 'a': 1 });\n      } catch (e) {\n        pass = !pass;\n      }\n      assert.ok(pass);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.fill');\n\n  (function() {\n    QUnit.test('should use a default `start` of `0` and a default `end` of `length`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a'), ['a', 'a', 'a']);\n    });\n\n    QUnit.test('should use `undefined` for `value` if not given', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = _.fill(array);\n\n      assert.deepEqual(actual, Array(3));\n      assert.ok(lodashStable.every(actual, function(value, index) {\n        return index in actual;\n      }));\n    });\n\n    QUnit.test('should work with a positive `start`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a', 1), [1, 'a', 'a']);\n    });\n\n    QUnit.test('should work with a `start` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(start) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', start), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should treat falsey `start` values as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, lodashStable.constant(['a', 'a', 'a']));\n\n      var actual = lodashStable.map(falsey, function(start) {\n        var array = [1, 2, 3];\n        return _.fill(array, 'a', start);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a negative `start`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a', -1), [1, 2, 'a']);\n    });\n\n    QUnit.test('should work with a negative `start` <= negative `length`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-3, -4, -Infinity], function(start) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', start), ['a', 'a', 'a']);\n      });\n    });\n\n    QUnit.test('should work with `start` >= `end`', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([2, 3], function(start) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', start, 2), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should work with a positive `end`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a', 0, 1), ['a', 2, 3]);\n    });\n\n    QUnit.test('should work with a `end` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(end) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', 0, end), ['a', 'a', 'a']);\n      });\n    });\n\n    QUnit.test('should treat falsey `end` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? ['a', 'a', 'a'] : [1, 2, 3];\n      });\n\n      var actual = lodashStable.map(falsey, function(end) {\n        var array = [1, 2, 3];\n        return _.fill(array, 'a', 0, end);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a negative `end`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a', 0, -1), ['a', 'a', 3]);\n    });\n\n    QUnit.test('should work with a negative `end` <= negative `length`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-3, -4, -Infinity], function(end) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', 0, end), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should coerce `start` and `end` to integers', function(assert) {\n      assert.expect(1);\n\n      var positions = [[0.1, 1.6], ['0', 1], [0, '1'], ['1'], [NaN, 1], [1, NaN]];\n\n      var actual = lodashStable.map(positions, function(pos) {\n        var array = [1, 2, 3];\n        return _.fill.apply(_, [array, 'a'].concat(pos));\n      });\n\n      assert.deepEqual(actual, [['a', 2, 3], ['a', 2, 3], ['a', 2, 3], [1, 'a', 'a'], ['a', 2, 3], [1, 2, 3]]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2], [3, 4]],\n          actual = lodashStable.map(array, _.fill);\n\n      assert.deepEqual(actual, [[0, 0], [1, 1]]);\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var array = [1, 2, 3],\n            wrapped = _(array).fill('a'),\n            actual = wrapped.value();\n\n        assert.ok(wrapped instanceof _);\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, ['a', 'a', 'a']);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.filter');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return elements `predicate` returns truthy for', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.filter(array, isEven), [2]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  lodashStable.each(['find', 'findIndex', 'findKey', 'findLast', 'findLastIndex', 'findLastKey'], function(methodName) {\n    QUnit.module('lodash.' + methodName);\n\n    var array = [1, 2, 3, 4],\n        func = _[methodName];\n\n    var objects = [\n      { 'a': 0, 'b': 0 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 2, 'b': 2 }\n    ];\n\n    var expected = ({\n      'find': [objects[1], undefined, objects[2]],\n      'findIndex': [1, -1, 2],\n      'findKey': ['1', undefined, '2'],\n      'findLast': [objects[2], undefined, objects[2]],\n      'findLastIndex': [2, -1, 2],\n      'findLastKey': ['2', undefined, '2']\n    })[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the found value', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, function(object) { return object.a; }), expected[0]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `' + expected[1] + '` if value is not found', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, function(object) { return object.a === 3; }), expected[1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, { 'b': 2 }), expected[2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, ['b', 2]), expected[2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, 'b'), expected[0]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `' + expected[1] + '` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var emptyValues = lodashStable.endsWith(methodName, 'Index') ? lodashStable.reject(empties, lodashStable.isPlainObject) : empties,\n          expecting = lodashStable.map(emptyValues, lodashStable.constant(expected[1]));\n\n      var actual = lodashStable.map(emptyValues, function(value) {\n        try {\n          return func(value, { 'a': 3 });\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expecting);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      var expected = ({\n        'find': 1,\n        'findIndex': 0,\n        'findKey': '0',\n        'findLast': 4,\n        'findLastIndex': 3,\n        'findLastKey': '3'\n      })[methodName];\n\n      if (!isNpm) {\n        assert.strictEqual(_(array)[methodName](), expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).chain()[methodName]() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should not execute immediately when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(array).chain()[methodName]();\n        assert.strictEqual(wrapped.__wrapped__, array);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work in a lazy sequence', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var largeArray = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            smallArray = array;\n\n        lodashStable.times(2, function(index) {\n          var array = index ? largeArray : smallArray,\n              wrapped = _(array).filter(isEven);\n\n          assert.strictEqual(wrapped[methodName](), func(lodashStable.filter(array, isEven)));\n        });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  });\n\n  _.each(['find', 'findIndex', 'findLast', 'findLastIndex'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should provide correct `predicate` arguments for arrays', function(assert) {\n      assert.expect(1);\n\n      var args,\n          array = ['a'];\n\n      func(array, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, ['a', 0, array]);\n    });\n  });\n\n  _.each(['find', 'findKey', 'findLast', 'findLastKey'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = func({ 'a': 1, 'b': 2, 'c': 3 }, function(n) {\n        return n < 3;\n      });\n\n      var expected = ({\n        'find': 1,\n        'findKey': 'a',\n        'findLast': 2,\n        'findLastKey': 'b'\n      })[methodName];\n\n      assert.strictEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should provide correct `predicate` arguments for objects', function(assert) {\n      assert.expect(1);\n\n      var args,\n          object = { 'a': 1 };\n\n      func(object, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [1, 'a', object]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.find and lodash.findLast');\n\n  lodashStable.each(['find', 'findLast'], function(methodName) {\n    var isFind = methodName == 'find';\n\n    QUnit.test('`_.' + methodName + '` should support shortcut fusion', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var findCount = 0,\n            mapCount = 0,\n            array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            iteratee = function(value) { mapCount++; return square(value); },\n            predicate = function(value) { findCount++; return isEven(value); },\n            actual = _(array).map(iteratee)[methodName](predicate);\n\n        assert.strictEqual(findCount, isFind ? 2 : 1);\n        assert.strictEqual(mapCount, isFind ? 2 : 1);\n        assert.strictEqual(actual, isFind ? 4 : square(LARGE_ARRAY_SIZE));\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.find and lodash.includes');\n\n  lodashStable.each(['includes', 'find'], function(methodName) {\n    var func = _[methodName],\n        isIncludes = methodName == 'includes',\n        resolve = methodName == 'find' ? lodashStable.curry(lodashStable.eq) : identity;\n\n    lodashStable.each({\n      'an `arguments` object': args,\n      'an array': [1, 2, 3]\n    },\n    function(collection, key) {\n      var values = lodashStable.toArray(collection);\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and a positive `fromIndex`', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          isIncludes || values[2],\n          isIncludes ? false : undefined\n        ];\n\n        var actual = [\n          func(collection, resolve(values[2]), 2),\n          func(collection, resolve(values[1]), 2)\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and a `fromIndex` >= `length`', function(assert) {\n        assert.expect(1);\n\n        var indexes = [4, 6, Math.pow(2, 32), Infinity];\n\n        var expected = lodashStable.map(indexes, function() {\n          var result = isIncludes ? false : undefined;\n          return [result, result, result];\n        });\n\n        var actual = lodashStable.map(indexes, function(fromIndex) {\n          return [\n            func(collection, resolve(1), fromIndex),\n            func(collection, resolve(undefined), fromIndex),\n            func(collection, resolve(''), fromIndex)\n          ];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and treat falsey `fromIndex` values as `0`', function(assert) {\n        assert.expect(1);\n\n        var expected = lodashStable.map(falsey, lodashStable.constant(isIncludes || values[0]));\n\n        var actual = lodashStable.map(falsey, function(fromIndex) {\n          return func(collection, resolve(values[0]), fromIndex);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and coerce `fromIndex` to an integer', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          isIncludes || values[0],\n          isIncludes || values[0],\n          isIncludes ? false : undefined\n        ];\n\n        var actual = [\n          func(collection, resolve(values[0]), 0.1),\n          func(collection, resolve(values[0]), NaN),\n          func(collection, resolve(values[0]), '1')\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and a negative `fromIndex`', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          isIncludes || values[2],\n          isIncludes ? false : undefined\n        ];\n\n        var actual = [\n          func(collection, resolve(values[2]), -1),\n          func(collection, resolve(values[1]), -1)\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and a negative `fromIndex` <= `-length`', function(assert) {\n        assert.expect(1);\n\n        var indexes = [-4, -6, -Infinity],\n            expected = lodashStable.map(indexes, lodashStable.constant(isIncludes || values[0]));\n\n        var actual = lodashStable.map(indexes, function(fromIndex) {\n          return func(collection, resolve(values[0]), fromIndex);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.findIndex and lodash.indexOf');\n\n  lodashStable.each(['findIndex', 'indexOf'], function(methodName) {\n    var array = [1, 2, 3, 1, 2, 3],\n        func = _[methodName],\n        resolve = methodName == 'findIndex' ? lodashStable.curry(lodashStable.eq) : identity;\n\n    QUnit.test('`_.' + methodName + '` should return the index of the first matched value', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(3)), 2);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a positive `fromIndex`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(1), 2), 3);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `fromIndex` >= `length`', function(assert) {\n      assert.expect(1);\n\n      var values = [6, 8, Math.pow(2, 32), Infinity],\n          expected = lodashStable.map(values, lodashStable.constant([-1, -1, -1]));\n\n      var actual = lodashStable.map(values, function(fromIndex) {\n        return [\n          func(array, resolve(undefined), fromIndex),\n          func(array, resolve(1), fromIndex),\n          func(array, resolve(''), fromIndex)\n        ];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `fromIndex`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(2), -3), 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `fromIndex` <= `-length`', function(assert) {\n      assert.expect(1);\n\n      var values = [-6, -8, -Infinity],\n          expected = lodashStable.map(values, stubZero);\n\n      var actual = lodashStable.map(values, function(fromIndex) {\n        return func(array, resolve(1), fromIndex);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat falsey `fromIndex` values as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubZero);\n\n      var actual = lodashStable.map(falsey, function(fromIndex) {\n        return func(array, resolve(1), fromIndex);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `fromIndex` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(2), 1.2), 1);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.findLast');\n\n  (function() {\n    var resolve = lodashStable.curry(lodashStable.eq);\n\n    lodashStable.each({\n      'an `arguments` object': args,\n      'an array': [1, 2, 3]\n    },\n    function(collection, key) {\n      var values = lodashStable.toArray(collection);\n\n      QUnit.test('should work with ' + key + ' and a positive `fromIndex`', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          values[1],\n          undefined\n        ];\n\n        var actual = [\n          _.findLast(collection, resolve(values[1]), 1),\n          _.findLast(collection, resolve(values[2]), 1)\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and a `fromIndex` >= `length`', function(assert) {\n        assert.expect(1);\n\n        var indexes = [4, 6, Math.pow(2, 32), Infinity];\n\n        var expected = lodashStable.map(indexes, lodashStable.constant([values[0], undefined, undefined]));\n\n        var actual = lodashStable.map(indexes, function(fromIndex) {\n          return [\n            _.findLast(collection, resolve(1), fromIndex),\n            _.findLast(collection, resolve(undefined), fromIndex),\n            _.findLast(collection, resolve(''), fromIndex)\n          ];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and treat falsey `fromIndex` values correctly', function(assert) {\n        assert.expect(1);\n\n        var expected = lodashStable.map(falsey, function(value) {\n          return value === undefined ? values[3] : undefined;\n        });\n\n        var actual = lodashStable.map(falsey, function(fromIndex) {\n          return _.findLast(collection, resolve(values[3]), fromIndex);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and coerce `fromIndex` to an integer', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          values[0],\n          values[0],\n          undefined\n        ];\n\n        var actual = [\n          _.findLast(collection, resolve(values[0]), 0.1),\n          _.findLast(collection, resolve(values[0]), NaN),\n          _.findLast(collection, resolve(values[2]), '1')\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and a negative `fromIndex`', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          values[1],\n          undefined\n        ];\n\n        var actual = [\n          _.findLast(collection, resolve(values[1]), -2),\n          _.findLast(collection, resolve(values[2]), -2)\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and a negative `fromIndex` <= `-length`', function(assert) {\n        assert.expect(1);\n\n        var indexes = [-4, -6, -Infinity],\n            expected = lodashStable.map(indexes, lodashStable.constant(values[0]));\n\n        var actual = lodashStable.map(indexes, function(fromIndex) {\n          return _.findLast(collection, resolve(values[0]), fromIndex);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.flip');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should flip arguments provided to `func`', function(assert) {\n      assert.expect(1);\n\n      var flipped = _.flip(fn);\n      assert.deepEqual(flipped('a', 'b', 'c', 'd'), ['d', 'c', 'b', 'a']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.flatMapDepth');\n\n  (function() {\n    var array = [1, [2, [3, [4]], 5]];\n\n    QUnit.test('should use a default `depth` of `1`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.flatMapDepth(array, identity), [1, 2, [3, [4]], 5]);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2, [3, [4]], 5]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.flatMapDepth(array, value) : _.flatMapDepth(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat a `depth` of < `1` as a shallow clone', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([-1, 0], function(depth) {\n        assert.deepEqual(_.flatMapDepth(array, identity, depth), [1, [2, [3, [4]], 5]]);\n      });\n    });\n\n    QUnit.test('should coerce `depth` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.flatMapDepth(array, identity, 2.2), [1, 2, 3, [4], 5]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('flatMap methods');\n\n  lodashStable.each(['flatMap', 'flatMapDeep', 'flatMapDepth'], function(methodName) {\n    var func = _[methodName],\n        array = [1, 2, 3, 4];\n\n    function duplicate(n) {\n      return [n, n];\n    }\n\n    QUnit.test('`_.' + methodName + '` should map values in `array` to a new flattened array', function(assert) {\n      assert.expect(1);\n\n      var actual = func(array, duplicate),\n          expected = lodashStable.flatten(lodashStable.map(array, duplicate));\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1, 2] }, { 'a': [3, 4] }];\n      assert.deepEqual(func(objects, 'a'), array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should iterate over own string keyed properties of objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = [1, 2];\n      }\n      Foo.prototype.b = [3, 4];\n\n      var actual = func(new Foo, identity);\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(2);\n\n      var array = [[1, 2], [3, 4]],\n          object = { 'a': [1, 2], 'b': [3, 4] },\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2, 3, 4]));\n\n      lodashStable.each([array, object], function(collection) {\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? func(collection, value) : func(collection);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should accept a falsey `collection`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(collection, index) {\n        try {\n          return index ? func(collection) : func();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(1), []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with objects with non-number length properties', function(assert) {\n      assert.expect(1);\n\n      var object = { 'length': [1, 2] };\n      assert.deepEqual(func(object, identity), [1, 2]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.flattenDepth');\n\n  (function() {\n    var array = [1, [2, [3, [4]], 5]];\n\n    QUnit.test('should use a default `depth` of `1`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.flattenDepth(array), [1, 2, [3, [4]], 5]);\n    });\n\n    QUnit.test('should treat a `depth` of < `1` as a shallow clone', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([-1, 0], function(depth) {\n        assert.deepEqual(_.flattenDepth(array, depth), [1, [2, [3, [4]], 5]]);\n      });\n    });\n\n    QUnit.test('should coerce `depth` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.flattenDepth(array, 2.2), [1, 2, 3, [4], 5]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('flatten methods');\n\n  (function() {\n    var array = [1, [2, [3, [4]], 5]],\n        methodNames = ['flatten', 'flattenDeep', 'flattenDepth'];\n\n    QUnit.test('should flatten `arguments` objects', function(assert) {\n      assert.expect(3);\n\n      var array = [args, [args]];\n\n      assert.deepEqual(_.flatten(array), [1, 2, 3, args]);\n      assert.deepEqual(_.flattenDeep(array), [1, 2, 3, 1, 2, 3]);\n      assert.deepEqual(_.flattenDepth(array, 2), [1, 2, 3, 1, 2, 3]);\n    });\n\n    QUnit.test('should treat sparse arrays as dense', function(assert) {\n      assert.expect(6);\n\n      var array = [[1, 2, 3], Array(3)],\n          expected = [1, 2, 3];\n\n      expected.push(undefined, undefined, undefined);\n\n      lodashStable.each(methodNames, function(methodName) {\n        var actual = _[methodName](array);\n        assert.deepEqual(actual, expected);\n        assert.ok('4' in actual);\n      });\n    });\n\n    QUnit.test('should flatten objects with a truthy `Symbol.isConcatSpreadable` value', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && Symbol.isConcatSpreadable) {\n        var object = { '0': 'a', 'length': 1 },\n            array = [object],\n            expected = lodashStable.map(methodNames, lodashStable.constant(['a']));\n\n        object[Symbol.isConcatSpreadable] = true;\n\n        var actual = lodashStable.map(methodNames, function(methodName) {\n          return _[methodName](array);\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with extremely large arrays', function(assert) {\n      assert.expect(3);\n\n      lodashStable.times(3, function(index) {\n        var expected = Array(5e5);\n        try {\n          var func = _.flatten;\n          if (index == 1) {\n            func = _.flattenDeep;\n          } else if (index == 2) {\n            func = _.flattenDepth;\n          }\n          assert.deepEqual(func([expected]), expected);\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n      });\n    });\n\n    QUnit.test('should work with empty arrays', function(assert) {\n      assert.expect(3);\n\n      var array = [[], [[]], [[], [[[]]]]];\n\n      assert.deepEqual(_.flatten(array), [[], [], [[[]]]]);\n      assert.deepEqual(_.flattenDeep(array), []);\n      assert.deepEqual(_.flattenDepth(array, 2), [[[]]]);\n    });\n\n    QUnit.test('should support flattening of nested arrays', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.flatten(array), [1, 2, [3, [4]], 5]);\n      assert.deepEqual(_.flattenDeep(array), [1, 2, 3, 4, 5]);\n      assert.deepEqual(_.flattenDepth(array, 2), [1, 2, 3, [4], 5]);\n    });\n\n    QUnit.test('should return an empty array for non array-like objects', function(assert) {\n      assert.expect(3);\n\n      var expected = [],\n          nonArray = { '0': 'a' };\n\n      assert.deepEqual(_.flatten(nonArray), expected);\n      assert.deepEqual(_.flattenDeep(nonArray), expected);\n      assert.deepEqual(_.flattenDepth(nonArray, 2), expected);\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var wrapped = _(array),\n            actual = wrapped.flatten();\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.value(), [1, 2, [3, [4]], 5]);\n\n        actual = wrapped.flattenDeep();\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.value(), [1, 2, 3, 4, 5]);\n\n        actual = wrapped.flattenDepth(2);\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.value(), [1, 2, 3, [4], 5]);\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('flow methods');\n\n  lodashStable.each(['flow', 'flowRight'], function(methodName) {\n    var func = _[methodName],\n        isFlow = methodName == 'flow';\n\n    QUnit.test('`_.' + methodName + '` should supply each function with the return value of the previous', function(assert) {\n      assert.expect(1);\n\n      var fixed = function(n) { return n.toFixed(1); },\n          combined = isFlow ? func(add, square, fixed) : func(fixed, square, add);\n\n      assert.strictEqual(combined(1, 2), '9.0');\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a new function', function(assert) {\n      assert.expect(1);\n\n      assert.notStrictEqual(func(noop), noop);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an identity function when no arguments are given', function(assert) {\n      assert.expect(6);\n\n      _.times(2, function(index) {\n        try {\n          var combined = index ? func([]) : func();\n          assert.strictEqual(combined('a'), 'a');\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n        assert.strictEqual(combined.length, 0);\n        assert.notStrictEqual(combined, identity);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a curried function and `_.head`', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curry(identity);\n\n      var combined = isFlow\n        ? func(_.head, curried)\n        : func(curried, _.head);\n\n      assert.strictEqual(combined([1]), 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support shortcut fusion', function(assert) {\n      assert.expect(6);\n\n      var filterCount,\n          mapCount,\n          array = lodashStable.range(LARGE_ARRAY_SIZE),\n          iteratee = function(value) { mapCount++; return square(value); },\n          predicate = function(value) { filterCount++; return isEven(value); };\n\n      lodashStable.times(2, function(index) {\n        var filter1 = _.filter,\n            filter2 = _.curry(_.rearg(_.ary(_.filter, 2), 1, 0), 2),\n            filter3 = (_.filter = index ? filter2 : filter1, filter2(predicate));\n\n        var map1 = _.map,\n            map2 = _.curry(_.rearg(_.ary(_.map, 2), 1, 0), 2),\n            map3 = (_.map = index ? map2 : map1, map2(iteratee));\n\n        var take1 = _.take,\n            take2 = _.curry(_.rearg(_.ary(_.take, 2), 1, 0), 2),\n            take3 = (_.take = index ? take2 : take1, take2(2));\n\n        var combined = isFlow\n          ? func(map3, filter3, _.compact, take3)\n          : func(take3, _.compact, filter3, map3);\n\n        filterCount = mapCount = 0;\n        assert.deepEqual(combined(array), [4, 16]);\n\n        if (!isNpm && WeakMap && WeakMap.name) {\n          assert.strictEqual(filterCount, 5, 'filterCount');\n          assert.strictEqual(mapCount, 5, 'mapCount');\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n        _.filter = filter1;\n        _.map = map1;\n        _.take = take1;\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with curried functions with placeholders', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curry(_.ary(_.map, 2), 2),\n          getProp = curried(curried.placeholder, 'a'),\n          objects = [{ 'a': 1 }, { 'a': 2 }, { 'a': 1 }];\n\n      var combined = isFlow\n        ? func(getProp, _.uniq)\n        : func(_.uniq, getProp);\n\n      assert.deepEqual(combined(objects), [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(noop)[methodName]();\n        assert.ok(wrapped instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.forEach');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.each, _.forEach);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.forEachRight');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.eachRight, _.forEachRight);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('forIn methods');\n\n  lodashStable.each(['forIn', 'forInRight'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` iterates over inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var keys = [];\n      func(new Foo, function(value, key) { keys.push(key); });\n      assert.deepEqual(keys.sort(), ['a', 'b']);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('forOwn methods');\n\n  lodashStable.each(['forOwn', 'forOwnRight'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should iterate over `length` properties', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'zero', '1': 'one', 'length': 2 },\n          props = [];\n\n      func(object, function(value, prop) { props.push(prop); });\n      assert.deepEqual(props.sort(), ['0', '1', 'length']);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('iteration methods');\n\n  (function() {\n    var methods = [\n      '_baseEach',\n      'countBy',\n      'every',\n      'filter',\n      'find',\n      'findIndex',\n      'findKey',\n      'findLast',\n      'findLastIndex',\n      'findLastKey',\n      'forEach',\n      'forEachRight',\n      'forIn',\n      'forInRight',\n      'forOwn',\n      'forOwnRight',\n      'groupBy',\n      'keyBy',\n      'map',\n      'mapKeys',\n      'mapValues',\n      'maxBy',\n      'minBy',\n      'omitBy',\n      'partition',\n      'pickBy',\n      'reject',\n      'some'\n    ];\n\n    var arrayMethods = [\n      'findIndex',\n      'findLastIndex',\n      'maxBy',\n      'minBy'\n    ];\n\n    var collectionMethods = [\n      '_baseEach',\n      'countBy',\n      'every',\n      'filter',\n      'find',\n      'findLast',\n      'forEach',\n      'forEachRight',\n      'groupBy',\n      'keyBy',\n      'map',\n      'partition',\n      'reduce',\n      'reduceRight',\n      'reject',\n      'some'\n    ];\n\n    var forInMethods = [\n      'forIn',\n      'forInRight',\n      'omitBy',\n      'pickBy'\n    ];\n\n    var iterationMethods = [\n      '_baseEach',\n      'forEach',\n      'forEachRight',\n      'forIn',\n      'forInRight',\n      'forOwn',\n      'forOwnRight'\n    ];\n\n    var objectMethods = [\n      'findKey',\n      'findLastKey',\n      'forIn',\n      'forInRight',\n      'forOwn',\n      'forOwnRight',\n      'mapKeys',\n      'mapValues',\n      'omitBy',\n      'pickBy'\n    ];\n\n    var rightMethods = [\n      'findLast',\n      'findLastIndex',\n      'findLastKey',\n      'forEachRight',\n      'forInRight',\n      'forOwnRight'\n    ];\n\n    var unwrappedMethods = [\n      'each',\n      'eachRight',\n      'every',\n      'find',\n      'findIndex',\n      'findKey',\n      'findLast',\n      'findLastIndex',\n      'findLastKey',\n      'forEach',\n      'forEachRight',\n      'forIn',\n      'forInRight',\n      'forOwn',\n      'forOwnRight',\n      'max',\n      'maxBy',\n      'min',\n      'minBy',\n      'some'\n    ];\n\n    lodashStable.each(methods, function(methodName) {\n      var array = [1, 2, 3],\n          func = _[methodName],\n          isBy = /(^partition|By)$/.test(methodName),\n          isFind = /^find/.test(methodName),\n          isOmitPick = /^(?:omit|pick)By$/.test(methodName),\n          isSome = methodName == 'some';\n\n      QUnit.test('`_.' + methodName + '` should provide correct iteratee arguments', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var args,\n              expected = [1, 0, array];\n\n          func(array, function() {\n            args || (args = slice.call(arguments));\n          });\n\n          if (lodashStable.includes(rightMethods, methodName)) {\n            expected[0] = 3;\n            expected[1] = 2;\n          }\n          if (lodashStable.includes(objectMethods, methodName)) {\n            expected[1] += '';\n          }\n          if (isBy) {\n            expected.length = isOmitPick ? 2 : 1;\n          }\n          assert.deepEqual(args, expected);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should treat sparse arrays as dense', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var array = [1];\n          array[2] = 3;\n\n          var expected = lodashStable.includes(objectMethods, methodName)\n            ? [[1, '0', array], [undefined, '1', array], [3, '2', array]]\n            : [[1,  0, array],  [undefined,  1,  array], [3,  2,  array]];\n\n          if (isBy) {\n            expected = lodashStable.map(expected, function(args) {\n              return args.slice(0, isOmitPick ? 2 : 1);\n            });\n          }\n          else if (lodashStable.includes(objectMethods, methodName)) {\n            expected = lodashStable.map(expected, function(args) {\n              args[1] += '';\n              return args;\n            });\n          }\n          if (lodashStable.includes(rightMethods, methodName)) {\n            expected.reverse();\n          }\n          var argsList = [];\n          func(array, function() {\n            argsList.push(slice.call(arguments));\n            return !(isFind || isSome);\n          });\n\n          assert.deepEqual(argsList, expected);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(lodashStable.difference(methods, objectMethods), function(methodName) {\n      var array = [1, 2, 3],\n          func = _[methodName],\n          isEvery = methodName == 'every';\n\n      array.a = 1;\n\n      QUnit.test('`_.' + methodName + '` should not iterate custom properties on arrays', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var keys = [];\n          func(array, function(value, key) {\n            keys.push(key);\n            return isEvery;\n          });\n\n          assert.notOk(lodashStable.includes(keys, 'a'));\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(lodashStable.difference(methods, unwrappedMethods), function(methodName) {\n      var array = [1, 2, 3],\n          isBaseEach = methodName == '_baseEach';\n\n      QUnit.test('`_.' + methodName + '` should return a wrapped value when implicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!(isBaseEach || isNpm)) {\n          var wrapped = _(array)[methodName](noop);\n          assert.ok(wrapped instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(unwrappedMethods, function(methodName) {\n      var array = [1, 2, 3];\n\n      QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          var actual = _(array)[methodName](noop);\n          assert.notOk(actual instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n        assert.expect(2);\n\n        if (!isNpm) {\n          var wrapped = _(array).chain(),\n              actual = wrapped[methodName](noop);\n\n          assert.ok(actual instanceof _);\n          assert.notStrictEqual(actual, wrapped);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n    });\n\n    lodashStable.each(lodashStable.difference(methods, arrayMethods, forInMethods), function(methodName) {\n      var func = _[methodName];\n\n      QUnit.test('`_.' + methodName + '` iterates over own string keyed properties of objects', function(assert) {\n        assert.expect(1);\n\n        function Foo() {\n          this.a = 1;\n        }\n        Foo.prototype.b = 2;\n\n        if (func) {\n          var values = [];\n          func(new Foo, function(value) { values.push(value); });\n          assert.deepEqual(values, [1]);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(iterationMethods, function(methodName) {\n      var array = [1, 2, 3],\n          func = _[methodName];\n\n      QUnit.test('`_.' + methodName + '` should return the collection', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          assert.strictEqual(func(array, Boolean), array);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(collectionMethods, function(methodName) {\n      var func = _[methodName];\n\n      QUnit.test('`_.' + methodName + '` should use `isArrayLike` to determine whether a value is array-like', function(assert) {\n        assert.expect(3);\n\n        if (func) {\n          var isIteratedAsObject = function(object) {\n            var result = false;\n            func(object, function() { result = true; }, 0);\n            return result;\n          };\n\n          var values = [-1, '1', 1.1, Object(1), MAX_SAFE_INTEGER + 1],\n              expected = lodashStable.map(values, stubTrue);\n\n          var actual = lodashStable.map(values, function(length) {\n            return isIteratedAsObject({ 'length': length });\n          });\n\n          var Foo = function(a) {};\n          Foo.a = 1;\n\n          assert.deepEqual(actual, expected);\n          assert.ok(isIteratedAsObject(Foo));\n          assert.notOk(isIteratedAsObject({ 'length': 0 }));\n        }\n        else {\n          skipAssert(assert, 3);\n        }\n      });\n    });\n\n    lodashStable.each(methods, function(methodName) {\n      var func = _[methodName],\n          isFind = /^find/.test(methodName),\n          isSome = methodName == 'some',\n          isReduce = /^reduce/.test(methodName);\n\n      QUnit.test('`_.' + methodName + '` should ignore changes to `length`', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var count = 0,\n              array = [1];\n\n          func(array, function() {\n            if (++count == 1) {\n              array.push(2);\n            }\n            return !(isFind || isSome);\n          }, isReduce ? array : null);\n\n          assert.strictEqual(count, 1);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(lodashStable.difference(lodashStable.union(methods, collectionMethods), arrayMethods), function(methodName) {\n      var func = _[methodName],\n          isFind = /^find/.test(methodName),\n          isSome = methodName == 'some',\n          isReduce = /^reduce/.test(methodName);\n\n      QUnit.test('`_.' + methodName + '` should ignore added `object` properties', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var count = 0,\n              object = { 'a': 1 };\n\n          func(object, function() {\n            if (++count == 1) {\n              object.b = 2;\n            }\n            return !(isFind || isSome);\n          }, isReduce ? object : null);\n\n          assert.strictEqual(count, 1);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('object assignments');\n\n  lodashStable.each(['assign', 'assignIn', 'defaults', 'defaultsDeep', 'merge'], function(methodName) {\n    var func = _[methodName],\n        isAssign = methodName == 'assign',\n        isDefaults = /^defaults/.test(methodName);\n\n    QUnit.test('`_.' + methodName + '` should coerce primitives to objects', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(primitives, function(value) {\n        var object = Object(value);\n        object.a = 1;\n        return object;\n      });\n\n      var actual = lodashStable.map(primitives, function(value) {\n        return func(value, { 'a': 1 });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should assign own ' + (isAssign ? '' : 'and inherited ') + 'string keyed source properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var expected = isAssign ? { 'a': 1 } : { 'a': 1, 'b': 2 };\n      assert.deepEqual(func({}, new Foo), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not skip a trailing function source', function(assert) {\n      assert.expect(1);\n\n      function fn() {}\n      fn.b = 2;\n\n      assert.deepEqual(func({}, { 'a': 1 }, fn), { 'a': 1, 'b': 2 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not error on nullish sources', function(assert) {\n      assert.expect(1);\n\n      try {\n        assert.deepEqual(func({ 'a': 1 }, undefined, { 'b': 2 }, null), { 'a': 1, 'b': 2 });\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should create an object when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var source = { 'a': 1 },\n          values = [null, undefined],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        var object = func(value, source);\n        return object !== source && lodashStable.isEqual(object, source);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      actual = lodashStable.map(values, function(value) {\n        return lodashStable.isEqual(func(value), {});\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.reduce`', function(assert) {\n      assert.expect(2);\n\n      var array = [{ 'a': 1 }, { 'b': 2 }, { 'c': 3 }],\n          expected = { 'a': isDefaults ? 0 : 1, 'b': 2, 'c': 3 };\n\n      function fn() {};\n      fn.a = array[0];\n      fn.b = array[1];\n      fn.c = array[2];\n\n      assert.deepEqual(lodashStable.reduce(array, func, { 'a': 0 }), expected);\n      assert.deepEqual(lodashStable.reduce(fn, func, { 'a': 0 }), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not return the existing wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _({ 'a': 1 }),\n            actual = wrapped[methodName]({ 'b': 2 });\n\n        assert.notStrictEqual(actual, wrapped);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  lodashStable.each(['assign', 'assignIn', 'merge'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should not treat `object` as `source`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      var actual = func(new Foo, { 'b': 2 });\n      assert.notOk(_.has(actual, 'a'));\n    });\n  });\n\n  lodashStable.each(['assign', 'assignIn', 'assignInWith', 'assignWith', 'defaults', 'defaultsDeep', 'merge', 'mergeWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should not assign values that are the same as their destinations', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a'], { 'a': 1 }, NaN], function(value) {\n        var object = {},\n            pass = true;\n\n        defineProperty(object, 'a', {\n          'configurable': true,\n          'enumerable': true,\n          'get': lodashStable.constant(value),\n          'set': function() { pass = false; }\n        });\n\n        func(object, { 'a': value });\n        assert.ok(pass);\n      });\n    });\n  });\n\n  lodashStable.each(['assignWith', 'assignInWith', 'mergeWith'], function(methodName) {\n    var func = _[methodName],\n        isMergeWith = methodName == 'mergeWith';\n\n    QUnit.test('`_.' + methodName + '` should provide correct `customizer` arguments', function(assert) {\n      assert.expect(3);\n\n      var args,\n          object = { 'a': 1 },\n          source = { 'a': 2 },\n          expected = lodashStable.map([1, 2, 'a', object, source], lodashStable.cloneDeep);\n\n      func(object, source, function() {\n        args || (args = lodashStable.map(slice.call(arguments, 0, 5), lodashStable.cloneDeep));\n      });\n\n      assert.deepEqual(args, expected, 'primitive values');\n\n      var argsList = [],\n          objectValue = [1, 2],\n          sourceValue = { 'b': 2 };\n\n      object = { 'a': objectValue };\n      source = { 'a': sourceValue };\n      expected = [lodashStable.map([objectValue, sourceValue, 'a', object, source], lodashStable.cloneDeep)];\n\n      if (isMergeWith) {\n        expected.push(lodashStable.map([undefined, 2, 'b', objectValue, sourceValue], lodashStable.cloneDeep));\n      }\n      func(object, source, function() {\n        argsList.push(lodashStable.map(slice.call(arguments, 0, 5), lodashStable.cloneDeep));\n      });\n\n      assert.deepEqual(argsList, expected, 'object values');\n\n      args = undefined;\n      object = { 'a': 1 };\n      source = { 'b': 2 };\n      expected = lodashStable.map([undefined, 2, 'b', object, source], lodashStable.cloneDeep);\n\n      func(object, source, function() {\n        args || (args = lodashStable.map(slice.call(arguments, 0, 5), lodashStable.cloneDeep));\n      });\n\n      assert.deepEqual(args, expected, 'undefined properties');\n    });\n\n    QUnit.test('`_.' + methodName + '` should not treat the second argument as a `customizer` callback', function(assert) {\n      assert.expect(2);\n\n      function callback() {}\n      callback.b = 2;\n\n      var actual = func({ 'a': 1 }, callback);\n      assert.deepEqual(actual, { 'a': 1, 'b': 2 });\n\n      actual = func({ 'a': 1 }, callback, { 'c': 3 });\n      assert.deepEqual(actual, { 'a': 1, 'b': 2, 'c': 3 });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('exit early');\n\n  lodashStable.each(['_baseEach', 'forEach', 'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'transform'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` can exit early when iterating arrays', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        var array = [1, 2, 3],\n            values = [];\n\n        func(array, function(value, other) {\n          values.push(lodashStable.isArray(value) ? other : value);\n          return false;\n        });\n\n        assert.deepEqual(values, [lodashStable.endsWith(methodName, 'Right') ? 3 : 1]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` can exit early when iterating objects', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        var object = { 'a': 1, 'b': 2, 'c': 3 },\n            values = [];\n\n        func(object, function(value, other) {\n          values.push(lodashStable.isArray(value) ? other : value);\n          return false;\n        });\n\n        assert.strictEqual(values.length, 1);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('`__proto__` property bugs');\n\n  (function() {\n    QUnit.test('should work with the \"__proto__\" key in internal data objects', function(assert) {\n      assert.expect(4);\n\n      var stringLiteral = '__proto__',\n          stringObject = Object(stringLiteral),\n          expected = [stringLiteral, stringObject];\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function(count) {\n        return isEven(count) ? stringLiteral : stringObject;\n      });\n\n      assert.deepEqual(_.difference(largeArray, largeArray), []);\n      assert.deepEqual(_.intersection(largeArray, largeArray), expected);\n      assert.deepEqual(_.uniq(largeArray), expected);\n      assert.deepEqual(_.without.apply(_, [largeArray].concat(largeArray)), []);\n    });\n\n    QUnit.test('should treat \"__proto__\" as a regular key in assignments', function(assert) {\n      assert.expect(2);\n\n      var methods = [\n        'assign',\n        'assignIn',\n        'defaults',\n        'defaultsDeep',\n        'merge'\n      ];\n\n      var source = create(null);\n      source.__proto__ = [];\n\n      var expected = lodashStable.map(methods, stubFalse);\n\n      var actual = lodashStable.map(methods, function(methodName) {\n        var result = _[methodName]({}, source);\n        return result instanceof Array;\n      });\n\n      assert.deepEqual(actual, expected);\n\n      actual = _.groupBy([{ 'a': '__proto__' }], 'a');\n      assert.notOk(actual instanceof Array);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.fromPairs');\n\n  (function() {\n    QUnit.test('should accept a two dimensional array', function(assert) {\n      assert.expect(1);\n\n      var array = [['a', 1], ['b', 2]],\n          object = { 'a': 1, 'b': 2 },\n          actual = _.fromPairs(array);\n\n      assert.deepEqual(actual, object);\n    });\n\n    QUnit.test('should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubObject);\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? _.fromPairs(array) : _.fromPairs();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not support deep paths', function(assert) {\n      assert.expect(1);\n\n      var actual = _.fromPairs([['a.b', 1]]);\n      assert.deepEqual(actual, { 'a.b': 1 });\n    });\n\n    QUnit.test('should support consuming the return value of `_.toPairs`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a.b': 1 };\n      assert.deepEqual(_.fromPairs(_.toPairs(object)), object);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n          return ['key' + index, index];\n        });\n\n        var actual = _(array).fromPairs().map(square).filter(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(_.map(_.fromPairs(array), square), isEven)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.functions');\n\n  (function() {\n    QUnit.test('should return the function names of an object', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 'a', 'b': identity, 'c': /x/, 'd': noop },\n          actual = _.functions(object).sort();\n\n      assert.deepEqual(actual, ['b', 'd']);\n    });\n\n    QUnit.test('should not include inherited functions', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = identity;\n        this.b = 'b';\n      }\n      Foo.prototype.c = noop;\n\n      assert.deepEqual(_.functions(new Foo), ['a']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.groupBy');\n\n  (function() {\n    var array = [6.1, 4.2, 6.3];\n\n    QUnit.test('should transform keys by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.groupBy(array, Math.floor);\n      assert.deepEqual(actual, { '4': [4.2], '6': [6.1, 6.3] });\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [6, 4, 6],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '4': [4], '6':  [6, 6] }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.groupBy(array, value) : _.groupBy(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = _.groupBy(['one', 'two', 'three'], 'length');\n      assert.deepEqual(actual, { '3': ['one', 'two'], '5': ['three'] });\n    });\n\n    QUnit.test('should only add values to own, not inherited, properties', function(assert) {\n      assert.expect(2);\n\n      var actual = _.groupBy(array, function(n) {\n        return Math.floor(n) > 4 ? 'hasOwnProperty' : 'constructor';\n      });\n\n      assert.deepEqual(actual.constructor, [4.2]);\n      assert.deepEqual(actual.hasOwnProperty, [6.1, 6.3]);\n    });\n\n    QUnit.test('should work with a number for `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var array = [\n        [1, 'a'],\n        [2, 'a'],\n        [2, 'b']\n      ];\n\n      assert.deepEqual(_.groupBy(array, 0), { '1': [[1, 'a']], '2': [[2, 'a'], [2, 'b']] });\n      assert.deepEqual(_.groupBy(array, 1), { 'a': [[1, 'a'], [2, 'a']], 'b': [[2, 'b']] });\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.groupBy({ 'a': 6.1, 'b': 4.2, 'c': 6.3 }, Math.floor);\n      assert.deepEqual(actual, { '4': [4.2], '6': [6.1, 6.3] });\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE).concat(\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 2), LARGE_ARRAY_SIZE),\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 1.5), LARGE_ARRAY_SIZE)\n        );\n\n        var iteratee = function(value) { value.push(value[0]); return value; },\n            predicate = function(value) { return isEven(value[0]); },\n            actual = _(array).groupBy().map(iteratee).filter(predicate).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(lodashStable.map(_.groupBy(array), iteratee), predicate)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.gt');\n\n  (function() {\n    QUnit.test('should return `true` if `value` > `other`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.gt(3, 1), true);\n      assert.strictEqual(_.gt('def', 'abc'), true);\n    });\n\n    QUnit.test('should return `false` if `value` is <= `other`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.gt(1, 3), false);\n      assert.strictEqual(_.gt(3, 3), false);\n      assert.strictEqual(_.gt('abc', 'def'), false);\n      assert.strictEqual(_.gt('def', 'def'), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.gte');\n\n  (function() {\n    QUnit.test('should return `true` if `value` >= `other`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.gte(3, 1), true);\n      assert.strictEqual(_.gte(3, 3), true);\n      assert.strictEqual(_.gte('def', 'abc'), true);\n      assert.strictEqual(_.gte('def', 'def'), true);\n    });\n\n    QUnit.test('should return `false` if `value` is less than `other`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.gte(1, 3), false);\n      assert.strictEqual(_.gte('abc', 'def'), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('has methods');\n\n  lodashStable.each(['has', 'hasIn'], function(methodName) {\n    var func = _[methodName],\n        isHas = methodName == 'has',\n        sparseArgs = toArgs([1]),\n        sparseArray = Array(1),\n        sparseString = Object('a');\n\n    delete sparseArgs[0];\n    delete sparseString[0];\n\n    QUnit.test('`_.' + methodName + '` should check for own properties', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1 };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.strictEqual(func(object, path), true);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not use the `hasOwnProperty` method of `object`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'hasOwnProperty': null, 'a': 1 };\n      assert.strictEqual(func(object, 'a'), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support deep paths', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(func(object, path), true);\n      });\n\n      lodashStable.each(['a.a', ['a', 'a']], function(path) {\n        assert.strictEqual(func(object, path), false);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var object = { 'null': 1 , 'undefined': 2, 'fn': 3, '[object Object]': 4 },\n          paths = [null, undefined, fn, {}],\n          expected = lodashStable.map(paths, stubTrue);\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          return func(object, index ? [path] : path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(args, 1), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3];\n\n      lodashStable.each([1, [1]], function(path) {\n        assert.strictEqual(func(array, path), true);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)],\n          expected = lodashStable.map(props, stubTrue);\n\n      var actual = lodashStable.map(props, function(key) {\n        return func(object, key);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a symbol `path`', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n\n      if (Symbol) {\n        Foo.prototype[symbol] = 1;\n\n        var symbol2 = Symbol('b');\n        defineProperty(Foo.prototype, symbol2, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 2\n        });\n\n        var object = isHas ? Foo.prototype : new Foo;\n        assert.strictEqual(func(object, symbol), true);\n        assert.strictEqual(func(object, symbol2), true);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should check for a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1 };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.strictEqual(func(object, path), true);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` for indexes of sparse values', function(assert) {\n      assert.expect(1);\n\n      var values = [sparseArgs, sparseArray, sparseString],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value, 0);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` for indexes of sparse values with deep paths', function(assert) {\n      assert.expect(1);\n\n      var values = [sparseArgs, sparseArray, sparseString],\n          expected = lodashStable.map(values, lodashStable.constant([true, true]));\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.map(['a[0]', ['a', '0']], function(path) {\n          return func({ 'a': value }, path);\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `' + (isHas ? 'false' : 'true') + '` for inherited properties', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.strictEqual(func(new Foo, path), !isHas);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `' + (isHas ? 'false' : 'true') + '` for nested inherited properties', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = { 'b': 1 };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(func(new Foo, path), !isHas);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var actual = lodashStable.map(values, function(value) {\n          return func(value, path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var actual = lodashStable.map(values, function(value) {\n          return func(value, path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` for nullish values of nested objects', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var object = index ? { 'a': value } : {};\n          return func(object, path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` over sparse values of deep paths', function(assert) {\n      assert.expect(1);\n\n      var values = [sparseArgs, sparseArray, sparseString],\n          expected = lodashStable.map(values, lodashStable.constant([false, false]));\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.map(['a[0].b', ['a', '0', 'b']], function(path) {\n          return func({ 'a': value }, path);\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.head');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    QUnit.test('should return the first element', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.head(array), 1);\n    });\n\n    QUnit.test('should return `undefined` when querying empty arrays', function(assert) {\n      assert.expect(1);\n\n      arrayProto[0] = 1;\n      assert.strictEqual(_.head([]), undefined);\n      arrayProto.length = 0;\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.head);\n\n      assert.deepEqual(actual, [1, 4, 7]);\n    });\n\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.first, _.head);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array);\n        assert.strictEqual(wrapped.head(), 1);\n        assert.strictEqual(wrapped.first(), 1);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array).chain();\n        assert.ok(wrapped.head() instanceof _);\n        assert.ok(wrapped.first() instanceof _);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should not execute immediately when explicitly chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array).chain();\n        assert.strictEqual(wrapped.head().__wrapped__, array);\n        assert.strictEqual(wrapped.first().__wrapped__, array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var largeArray = lodashStable.range(LARGE_ARRAY_SIZE),\n            smallArray = array;\n\n        lodashStable.each(['head', 'first'], function(methodName) {\n          lodashStable.times(2, function(index) {\n            var array = index ? largeArray : smallArray,\n                actual = _(array).filter(isEven)[methodName]();\n\n            assert.strictEqual(actual, _[methodName](_.filter(array, isEven)));\n          });\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.identity');\n\n  (function() {\n    QUnit.test('should return the first argument given', function(assert) {\n      assert.expect(1);\n\n      var object = { 'name': 'fred' };\n      assert.strictEqual(_.identity(object), object);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.includes');\n\n  (function() {\n    lodashStable.each({\n      'an `arguments` object': arguments,\n      'an array': [1, 2, 3, 4],\n      'an object': { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n      'a string': '1234'\n    },\n    function(collection, key) {\n      QUnit.test('should work with ' + key + ' and  return `true` for  matched values', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.includes(collection, 3), true);\n      });\n\n      QUnit.test('should work with ' + key + ' and  return `false` for unmatched values', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.includes(collection, 5), false);\n      });\n\n      QUnit.test('should work with ' + key + ' and floor `position` values', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.includes(collection, 2, 1.2), true);\n      });\n\n      QUnit.test('should work with ' + key + ' and return an unwrapped value implicitly when chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          assert.strictEqual(_(collection).includes(3), true);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('should work with ' + key + ' and return a wrapped value when explicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          assert.ok(_(collection).chain().includes(3) instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each({\n      'literal': 'abc',\n      'object': Object('abc')\n    },\n    function(collection, key) {\n      QUnit.test('should work with a string ' + key + ' for `collection`', function(assert) {\n        assert.expect(2);\n\n        assert.strictEqual(_.includes(collection, 'bc'), true);\n        assert.strictEqual(_.includes(collection, 'd'), false);\n      });\n    });\n\n    QUnit.test('should return `false` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubFalse);\n\n      var actual = lodashStable.map(empties, function(value) {\n        try {\n          return _.includes(value);\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a string and a `fromIndex` >= `length`', function(assert) {\n      assert.expect(1);\n\n      var string = '1234',\n          length = string.length,\n          indexes = [4, 6, Math.pow(2, 32), Infinity];\n\n      var expected = lodashStable.map(indexes, function(index) {\n        return [false, false, index == length];\n      });\n\n      var actual = lodashStable.map(indexes, function(fromIndex) {\n        return [\n          _.includes(string, 1, fromIndex),\n          _.includes(string, undefined, fromIndex),\n          _.includes(string, '', fromIndex)\n        ];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.includes([1, NaN, 3], NaN), true);\n    });\n\n    QUnit.test('should match `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.includes([-0], 0), true);\n      assert.strictEqual(_.includes([0], -0), true);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.every`', function(assert) {\n      assert.expect(1);\n\n      var array = [2, 3, 1],\n          values = [1, 2, 3];\n\n      assert.ok(lodashStable.every(values, lodashStable.partial(_.includes, array)));\n    });\n  }(1, 2, 3, 4));\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.initial');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? _.initial(array) : _.initial();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should exclude last element', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.initial(array), [1, 2]);\n    });\n\n    QUnit.test('should return an empty when querying empty arrays', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.initial([]), []);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.initial);\n\n      assert.deepEqual(actual, [[1, 2], [4, 5], [7, 8]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            values = [];\n\n        var actual = _(array).initial().filter(function(value) {\n          values.push(value);\n          return false;\n        })\n        .value();\n\n        assert.deepEqual(actual, []);\n        assert.deepEqual(values, _.initial(array));\n\n        values = [];\n\n        actual = _(array).filter(function(value) {\n          values.push(value);\n          return isEven(value);\n        })\n        .initial()\n        .value();\n\n        assert.deepEqual(actual, _.initial(lodashStable.filter(array, isEven)));\n        assert.deepEqual(values, array);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.inRange');\n\n  (function() {\n    QUnit.test('should work with an `end`', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.inRange(3, 5), true);\n      assert.strictEqual(_.inRange(5, 5), false);\n      assert.strictEqual(_.inRange(6, 5), false);\n    });\n\n    QUnit.test('should work with a `start` and `end`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.inRange(1, 1, 5), true);\n      assert.strictEqual(_.inRange(3, 1, 5), true);\n      assert.strictEqual(_.inRange(0, 1, 5), false);\n      assert.strictEqual(_.inRange(5, 1, 5), false);\n    });\n\n    QUnit.test('should treat falsey `start` as `0`', function(assert) {\n      assert.expect(13);\n\n      lodashStable.each(falsey, function(value, index) {\n        if (index) {\n          assert.strictEqual(_.inRange(0, value), false);\n          assert.strictEqual(_.inRange(0, value, 1), true);\n        } else {\n          assert.strictEqual(_.inRange(0), false);\n        }\n      });\n    });\n\n    QUnit.test('should swap `start` and `end` when `start` > `end`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.inRange(2, 5, 1), true);\n      assert.strictEqual(_.inRange(-3, -2, -6), true);\n    });\n\n    QUnit.test('should work with a floating point `n` value', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.inRange(0.5, 5), true);\n      assert.strictEqual(_.inRange(1.2, 1, 5), true);\n      assert.strictEqual(_.inRange(5.2, 5), false);\n      assert.strictEqual(_.inRange(0.5, 1, 5), false);\n    });\n\n    QUnit.test('should coerce arguments to finite numbers', function(assert) {\n      assert.expect(1);\n\n      var actual = [\n        _.inRange(0, '1'),\n        _.inRange(0, '0', 1),\n        _.inRange(0, 0, '1'),\n        _.inRange(0, NaN, 1),\n        _.inRange(-1, -1, NaN)\n      ];\n\n      assert.deepEqual(actual, lodashStable.map(actual, stubTrue));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('intersection methods');\n\n  lodashStable.each(['intersection', 'intersectionBy', 'intersectionWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the intersection of two arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1], [2, 3]);\n      assert.deepEqual(actual, [2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the intersection of multiple arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1, 2, 3], [3, 4], [3, 2]);\n      assert.deepEqual(actual, [3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an array of unique values', function(assert) {\n      assert.expect(1);\n\n      var actual = func([1, 1, 3, 2, 2], [5, 2, 2, 1, 4], [2, 1, 1]);\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a single array', function(assert) {\n      assert.expect(1);\n\n      var actual = func([1, 1, 3, 2, 2]);\n      assert.deepEqual(actual, [1, 3, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `arguments` objects', function(assert) {\n      assert.expect(2);\n\n      var array = [0, 1, null, 3],\n          expected = [1, 3];\n\n      assert.deepEqual(func(array, args), expected);\n      assert.deepEqual(func(args, array), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat `-0` as `0`', function(assert) {\n      assert.expect(1);\n\n      var values = [-0, 0],\n          expected = lodashStable.map(values, lodashStable.constant(['0']));\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.map(func(values, [value]), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      var actual = func([1, NaN, 3], [NaN, 5, NaN]);\n      assert.deepEqual(actual, [NaN]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `-0` as `0`', function(assert) {\n      assert.expect(1);\n\n      var values = [-0, 0],\n          expected = lodashStable.map(values, lodashStable.constant(['0']));\n\n      var actual = lodashStable.map(values, function(value) {\n        var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(value));\n        return lodashStable.map(func(values, largeArray), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `NaN`', function(assert) {\n      assert.expect(1);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubNaN);\n      assert.deepEqual(func([1, NaN, 3], largeArray), [NaN]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of objects', function(assert) {\n      assert.expect(2);\n\n      var object = {},\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(object));\n\n      assert.deepEqual(func([object], largeArray), [object]);\n      assert.deepEqual(func(lodashStable.range(LARGE_ARRAY_SIZE), [1]), [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat values that are not arrays or `arguments` objects as empty', function(assert) {\n      assert.expect(3);\n\n      var array = [0, 1, null, 3];\n      assert.deepEqual(func(array, 3, { '0': 1 }, null), []);\n      assert.deepEqual(func(null, array, null, [2, 3]), []);\n      assert.deepEqual(func(array, null, args, null), []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _([1, 3, 2])[methodName]([5, 2, 1, 4]);\n        assert.ok(wrapped instanceof _);\n        assert.deepEqual(wrapped.value(), [1, 2]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.intersectionBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n      assert.deepEqual(actual, [2.1]);\n\n      actual = _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 1 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.intersectionBy([2.1, 1.2], [2.3, 3.4], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [2.3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.intersectionWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],\n          others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }],\n          actual = _.intersectionWith(objects, others, lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[0]]);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var array = [-0],\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubZero),\n          others = [[0], largeArray],\n          expected = lodashStable.map(others, lodashStable.constant(['-0']));\n\n      var actual = lodashStable.map(others, function(other) {\n        return lodashStable.map(_.intersectionWith(array, other, lodashStable.eq), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.invert');\n\n  (function() {\n    QUnit.test('should invert an object', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1, 'b': 2 },\n          actual = _.invert(object);\n\n      assert.deepEqual(actual, { '1': 'a', '2': 'b' });\n      assert.deepEqual(_.invert(actual), { 'a': '1', 'b': '2' });\n    });\n\n    QUnit.test('should work with values that shadow keys on `Object.prototype`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 'hasOwnProperty', 'b': 'constructor' };\n      assert.deepEqual(_.invert(object), { 'hasOwnProperty': 'a', 'constructor': 'b' });\n    });\n\n    QUnit.test('should work with an object that has a `length` property', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'a', '1': 'b', 'length': 2 };\n      assert.deepEqual(_.invert(object), { 'a': '0', 'b': '1', '2': 'length' });\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var object = { 'a': 1, 'b': 2 },\n            wrapped = _(object).invert();\n\n        assert.ok(wrapped instanceof _);\n        assert.deepEqual(wrapped.value(), { '1': 'a', '2': 'b' });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.invertBy');\n\n  (function() {\n    var object = { 'a': 1, 'b': 2, 'c': 1 };\n\n    QUnit.test('should transform keys by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'group1': ['a', 'c'], 'group2': ['b'] };\n\n      var actual = _.invertBy(object, function(value) {\n        return 'group' + value;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '1': ['a', 'c'], '2': ['b'] }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.invertBy(object, value) : _.invertBy(object);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should only add multiple values to own, not inherited, properties', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 'hasOwnProperty', 'b': 'constructor' },\n          expected = { 'hasOwnProperty': ['a'], 'constructor': ['b'] };\n\n      assert.ok(lodashStable.isEqual(_.invertBy(object), expected));\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(object).invertBy();\n\n        assert.ok(wrapped instanceof _);\n        assert.deepEqual(wrapped.value(), { '1': ['a', 'c'], '2': ['b'] });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.invoke');\n\n  (function() {\n    QUnit.test('should invoke a method on `object`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': lodashStable.constant('A') },\n          actual = _.invoke(object, 'a');\n\n      assert.strictEqual(actual, 'A');\n    });\n\n    QUnit.test('should support invoking with arguments', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': function(a, b) { return [a, b]; } },\n          actual = _.invoke(object, 'a', 1, 2);\n\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should not error on nullish elements', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(value) {\n        try {\n          return _.invoke(value, 'a.b', 1, 2);\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': stubA, '0': stubB },\n          props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        return _.invoke(object, key);\n      });\n\n      assert.deepEqual(actual, ['a', 'a', 'b', 'b']);\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function(a, b) { return [a, b]; } } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var actual = _.invoke(object, path, 1, 2);\n        assert.deepEqual(actual, [1, 2]);\n      });\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function() { return this.c; }, 'c': 1 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.deepEqual(_.invoke(object, path), 1);\n      });\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var object = { 'a': stubOne };\n        assert.strictEqual(_(object).invoke('a'), 1);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var object = { 'a': stubOne };\n        assert.ok(_(object).chain().invoke('a') instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.invokeMap');\n\n  (function() {\n    QUnit.test('should invoke a methods on each element of `collection`', function(assert) {\n      assert.expect(1);\n\n      var array = ['a', 'b', 'c'],\n          actual = _.invokeMap(array, 'toUpperCase');\n\n      assert.deepEqual(actual, ['A', 'B', 'C']);\n    });\n\n    QUnit.test('should support invoking with arguments', function(assert) {\n      assert.expect(1);\n\n      var array = [function() { return slice.call(arguments); }],\n          actual = _.invokeMap(array, 'call', null, 'a', 'b', 'c');\n\n      assert.deepEqual(actual, [['a', 'b', 'c']]);\n    });\n\n    QUnit.test('should work with a function for `methodName`', function(assert) {\n      assert.expect(1);\n\n      var array = ['a', 'b', 'c'];\n\n      var actual = _.invokeMap(array, function(left, right) {\n        return left + this.toUpperCase() + right;\n      }, '(', ')');\n\n      assert.deepEqual(actual, ['(A)', '(B)', '(C)']);\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          actual = _.invokeMap(object, 'toFixed', 1);\n\n      assert.deepEqual(actual, ['1.0', '2.0', '3.0']);\n    });\n\n    QUnit.test('should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.invokeMap(1), []);\n    });\n\n    QUnit.test('should not error on nullish elements', function(assert) {\n      assert.expect(1);\n\n      var array = ['a', null, undefined, 'd'];\n\n      try {\n        var actual = _.invokeMap(array, 'toUpperCase');\n      } catch (e) {}\n\n      assert.deepEqual(actual, ['A', undefined, undefined, 'D']);\n    });\n\n    QUnit.test('should not error on elements with missing properties', function(assert) {\n      assert.expect(1);\n\n      var objects = lodashStable.map([null, undefined, stubOne], function(value) {\n        return { 'a': value };\n      });\n\n      var expected = lodashStable.map(objects, function(object) {\n        return object.a ? object.a() : undefined;\n      });\n\n      try {\n        var actual = _.invokeMap(objects, 'a');\n      } catch (e) {}\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function() { return this.c; }, 'c': 1 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.deepEqual(_.invokeMap([object], path), [1]);\n      });\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = ['a', 'b', 'c'],\n            wrapped = _(array),\n            actual = wrapped.invokeMap('toUpperCase');\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.valueOf(), ['A', 'B', 'C']);\n\n        actual = wrapped.invokeMap(function(left, right) {\n          return left + this.toUpperCase() + right;\n        }, '(', ')');\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.valueOf(), ['(A)', '(B)', '(C)']);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should support shortcut fusion', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var count = 0,\n            method = function() { count++; return this.index; };\n\n        var array = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n          return { 'index': index, 'method': method };\n        });\n\n        var actual = _(array).invokeMap('method').take(1).value();\n\n        assert.strictEqual(count, 1);\n        assert.deepEqual(actual, [0]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isArguments');\n\n  (function() {\n    QUnit.test('should return `true` for `arguments` objects', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isArguments(args), true);\n      assert.strictEqual(_.isArguments(strictArgs), true);\n    });\n\n    QUnit.test('should return `false` for non `arguments` objects', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isArguments(value) : _.isArguments();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isArguments([1, 2, 3]), false);\n      assert.strictEqual(_.isArguments(true), false);\n      assert.strictEqual(_.isArguments(new Date), false);\n      assert.strictEqual(_.isArguments(new Error), false);\n      assert.strictEqual(_.isArguments(_), false);\n      assert.strictEqual(_.isArguments(slice), false);\n      assert.strictEqual(_.isArguments({ '0': 1, 'callee': noop, 'length': 1 }), false);\n      assert.strictEqual(_.isArguments(1), false);\n      assert.strictEqual(_.isArguments(/x/), false);\n      assert.strictEqual(_.isArguments('a'), false);\n      assert.strictEqual(_.isArguments(symbol), false);\n    });\n\n    QUnit.test('should work with an `arguments` object from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.arguments) {\n        assert.strictEqual(_.isArguments(realm.arguments), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isArray');\n\n  (function() {\n    QUnit.test('should return `true` for arrays', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isArray([1, 2, 3]), true);\n    });\n\n    QUnit.test('should return `false` for non-arrays', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isArray(value) : _.isArray();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isArray(args), false);\n      assert.strictEqual(_.isArray(true), false);\n      assert.strictEqual(_.isArray(new Date), false);\n      assert.strictEqual(_.isArray(new Error), false);\n      assert.strictEqual(_.isArray(_), false);\n      assert.strictEqual(_.isArray(slice), false);\n      assert.strictEqual(_.isArray({ '0': 1, 'length': 1 }), false);\n      assert.strictEqual(_.isArray(1), false);\n      assert.strictEqual(_.isArray(/x/), false);\n      assert.strictEqual(_.isArray('a'), false);\n      assert.strictEqual(_.isArray(symbol), false);\n    });\n\n    QUnit.test('should work with an array from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.array) {\n        assert.strictEqual(_.isArray(realm.array), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isArrayBuffer');\n\n  (function() {\n    QUnit.test('should return `true` for array buffers', function(assert) {\n      assert.expect(1);\n\n      if (ArrayBuffer) {\n        assert.strictEqual(_.isArrayBuffer(arrayBuffer), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non array buffers', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isArrayBuffer(value) : _.isArrayBuffer();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isArrayBuffer(args), false);\n      assert.strictEqual(_.isArrayBuffer([1]), false);\n      assert.strictEqual(_.isArrayBuffer(true), false);\n      assert.strictEqual(_.isArrayBuffer(new Date), false);\n      assert.strictEqual(_.isArrayBuffer(new Error), false);\n      assert.strictEqual(_.isArrayBuffer(_), false);\n      assert.strictEqual(_.isArrayBuffer(slice), false);\n      assert.strictEqual(_.isArrayBuffer({ 'a': 1 }), false);\n      assert.strictEqual(_.isArrayBuffer(1), false);\n      assert.strictEqual(_.isArrayBuffer(/x/), false);\n      assert.strictEqual(_.isArrayBuffer('a'), false);\n      assert.strictEqual(_.isArrayBuffer(symbol), false);\n    });\n\n    QUnit.test('should work with array buffers from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.arrayBuffer) {\n        assert.strictEqual(_.isArrayBuffer(realm.arrayBuffer), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isArrayLike');\n\n  (function() {\n    QUnit.test('should return `true` for array-like values', function(assert) {\n      assert.expect(1);\n\n      var values = [args, [1, 2, 3], { '0': 'a', 'length': 1 }, 'a'],\n          expected = lodashStable.map(values, stubTrue),\n          actual = lodashStable.map(values, _.isArrayLike);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-arrays', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === '';\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isArrayLike(value) : _.isArrayLike();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isArrayLike(true), false);\n      assert.strictEqual(_.isArrayLike(new Date), false);\n      assert.strictEqual(_.isArrayLike(new Error), false);\n      assert.strictEqual(_.isArrayLike(_), false);\n      assert.strictEqual(_.isArrayLike(asyncFunc), false);\n      assert.strictEqual(_.isArrayLike(genFunc), false);\n      assert.strictEqual(_.isArrayLike(slice), false);\n      assert.strictEqual(_.isArrayLike({ 'a': 1 }), false);\n      assert.strictEqual(_.isArrayLike(1), false);\n      assert.strictEqual(_.isArrayLike(/x/), false);\n      assert.strictEqual(_.isArrayLike(symbol), false);\n    });\n\n    QUnit.test('should work with an array from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        var values = [realm.arguments, realm.array, realm.string],\n            expected = lodashStable.map(values, stubTrue),\n            actual = lodashStable.map(values, _.isArrayLike);\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isBoolean');\n\n  (function() {\n    QUnit.test('should return `true` for booleans', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.isBoolean(true), true);\n      assert.strictEqual(_.isBoolean(false), true);\n      assert.strictEqual(_.isBoolean(Object(true)), true);\n      assert.strictEqual(_.isBoolean(Object(false)), true);\n    });\n\n    QUnit.test('should return `false` for non-booleans', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === false;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isBoolean(value) : _.isBoolean();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isBoolean(args), false);\n      assert.strictEqual(_.isBoolean([1, 2, 3]), false);\n      assert.strictEqual(_.isBoolean(new Date), false);\n      assert.strictEqual(_.isBoolean(new Error), false);\n      assert.strictEqual(_.isBoolean(_), false);\n      assert.strictEqual(_.isBoolean(slice), false);\n      assert.strictEqual(_.isBoolean({ 'a': 1 }), false);\n      assert.strictEqual(_.isBoolean(1), false);\n      assert.strictEqual(_.isBoolean(/x/), false);\n      assert.strictEqual(_.isBoolean('a'), false);\n      assert.strictEqual(_.isBoolean(symbol), false);\n    });\n\n    QUnit.test('should work with a boolean from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.boolean) {\n        assert.strictEqual(_.isBoolean(realm.boolean), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isBuffer');\n\n  (function() {\n    QUnit.test('should return `true` for buffers', function(assert) {\n      assert.expect(1);\n\n      if (Buffer) {\n        assert.strictEqual(_.isBuffer(new Buffer(2)), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-buffers', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isBuffer(value) : _.isBuffer();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isBuffer(args), false);\n      assert.strictEqual(_.isBuffer([1]), false);\n      assert.strictEqual(_.isBuffer(true), false);\n      assert.strictEqual(_.isBuffer(new Date), false);\n      assert.strictEqual(_.isBuffer(new Error), false);\n      assert.strictEqual(_.isBuffer(_), false);\n      assert.strictEqual(_.isBuffer(slice), false);\n      assert.strictEqual(_.isBuffer({ 'a': 1 }), false);\n      assert.strictEqual(_.isBuffer(1), false);\n      assert.strictEqual(_.isBuffer(/x/), false);\n      assert.strictEqual(_.isBuffer('a'), false);\n      assert.strictEqual(_.isBuffer(symbol), false);\n    });\n\n    QUnit.test('should return `false` if `Buffer` is not defined', function(assert) {\n      assert.expect(1);\n\n      if (!isStrict && Buffer && lodashBizarro) {\n        assert.strictEqual(lodashBizarro.isBuffer(new Buffer(2)), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isDate');\n\n  (function() {\n    QUnit.test('should return `true` for dates', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isDate(new Date), true);\n    });\n\n    QUnit.test('should return `false` for non-dates', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isDate(value) : _.isDate();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isDate(args), false);\n      assert.strictEqual(_.isDate([1, 2, 3]), false);\n      assert.strictEqual(_.isDate(true), false);\n      assert.strictEqual(_.isDate(new Error), false);\n      assert.strictEqual(_.isDate(_), false);\n      assert.strictEqual(_.isDate(slice), false);\n      assert.strictEqual(_.isDate({ 'a': 1 }), false);\n      assert.strictEqual(_.isDate(1), false);\n      assert.strictEqual(_.isDate(/x/), false);\n      assert.strictEqual(_.isDate('a'), false);\n      assert.strictEqual(_.isDate(symbol), false);\n    });\n\n    QUnit.test('should work with a date object from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.date) {\n        assert.strictEqual(_.isDate(realm.date), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isElement');\n\n  (function() {\n    QUnit.test('should return `true` for elements', function(assert) {\n      assert.expect(1);\n\n      if (document) {\n        assert.strictEqual(_.isElement(body), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `true` for non-plain objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.nodeType = 1;\n      }\n\n      assert.strictEqual(_.isElement(new Foo), true);\n    });\n\n    QUnit.test('should return `false` for non DOM elements', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isElement(value) : _.isElement();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isElement(args), false);\n      assert.strictEqual(_.isElement([1, 2, 3]), false);\n      assert.strictEqual(_.isElement(true), false);\n      assert.strictEqual(_.isElement(new Date), false);\n      assert.strictEqual(_.isElement(new Error), false);\n      assert.strictEqual(_.isElement(_), false);\n      assert.strictEqual(_.isElement(slice), false);\n      assert.strictEqual(_.isElement({ 'a': 1 }), false);\n      assert.strictEqual(_.isElement(1), false);\n      assert.strictEqual(_.isElement(/x/), false);\n      assert.strictEqual(_.isElement('a'), false);\n      assert.strictEqual(_.isElement(symbol), false);\n    });\n\n    QUnit.test('should return `false` for plain objects', function(assert) {\n      assert.expect(6);\n\n      assert.strictEqual(_.isElement({ 'nodeType': 1 }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': Object(1) }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': true }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': [1] }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': '1' }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': '001' }), false);\n    });\n\n    QUnit.test('should work with a DOM element from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.element) {\n        assert.strictEqual(_.isElement(realm.element), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isEmpty');\n\n  (function() {\n    QUnit.test('should return `true` for empty values', function(assert) {\n      assert.expect(10);\n\n      var expected = lodashStable.map(empties, stubTrue),\n          actual = lodashStable.map(empties, _.isEmpty);\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isEmpty(true), true);\n      assert.strictEqual(_.isEmpty(slice), true);\n      assert.strictEqual(_.isEmpty(1), true);\n      assert.strictEqual(_.isEmpty(NaN), true);\n      assert.strictEqual(_.isEmpty(/x/), true);\n      assert.strictEqual(_.isEmpty(symbol), true);\n      assert.strictEqual(_.isEmpty(), true);\n\n      if (Buffer) {\n        assert.strictEqual(_.isEmpty(new Buffer(0)), true);\n        assert.strictEqual(_.isEmpty(new Buffer(1)), false);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should return `false` for non-empty values', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isEmpty([0]), false);\n      assert.strictEqual(_.isEmpty({ 'a': 0 }), false);\n      assert.strictEqual(_.isEmpty('a'), false);\n    });\n\n    QUnit.test('should work with an object that has a `length` property', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isEmpty({ 'length': 0 }), false);\n    });\n\n    QUnit.test('should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isEmpty(args), false);\n    });\n\n    QUnit.test('should work with prototytpe objects', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype = { 'constructor': Foo };\n\n      assert.strictEqual(_.isEmpty(Foo.prototype), true);\n\n      Foo.prototype.a = 1;\n      assert.strictEqual(_.isEmpty(Foo.prototype), false);\n    });\n\n    QUnit.test('should work with jQuery/MooTools DOM query collections', function(assert) {\n      assert.expect(1);\n\n      function Foo(elements) {\n        push.apply(this, elements);\n      }\n      Foo.prototype = { 'length': 0, 'splice': arrayProto.splice };\n\n      assert.strictEqual(_.isEmpty(new Foo([])), true);\n    });\n\n    QUnit.test('should work with maps', function(assert) {\n      assert.expect(4);\n\n      if (Map) {\n        lodashStable.each([new Map, realm.map], function(map) {\n          assert.strictEqual(_.isEmpty(map), true);\n          map.set('a', 1);\n          assert.strictEqual(_.isEmpty(map), false);\n          map.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should work with sets', function(assert) {\n      assert.expect(4);\n\n      if (Set) {\n        lodashStable.each([new Set, realm.set], function(set) {\n          assert.strictEqual(_.isEmpty(set), true);\n          set.add(1);\n          assert.strictEqual(_.isEmpty(set), false);\n          set.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should not treat objects with negative lengths as array-like', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.length = -1;\n\n      assert.strictEqual(_.isEmpty(new Foo), true);\n    });\n\n    QUnit.test('should not treat objects with lengths larger than `MAX_SAFE_INTEGER` as array-like', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.length = MAX_SAFE_INTEGER + 1;\n\n      assert.strictEqual(_.isEmpty(new Foo), true);\n    });\n\n    QUnit.test('should not treat objects with non-number lengths as array-like', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isEmpty({ 'length': '0' }), false);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_({}).isEmpty(), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_({}).chain().isEmpty() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isEqual');\n\n  (function() {\n    var symbol1 = Symbol ? Symbol('a') : true,\n        symbol2 = Symbol ? Symbol('b') : false;\n\n    QUnit.test('should compare primitives', function(assert) {\n      assert.expect(1);\n\n      var pairs = [\n        [1, 1, true], [1, Object(1), true], [1, '1', false], [1, 2, false],\n        [-0, -0, true], [0, 0, true], [0, Object(0), true], [Object(0), Object(0), true], [-0, 0, true], [0, '0', false], [0, null, false],\n        [NaN, NaN, true], [NaN, Object(NaN), true], [Object(NaN), Object(NaN), true], [NaN, 'a', false], [NaN, Infinity, false],\n        ['a', 'a', true], ['a', Object('a'), true], [Object('a'), Object('a'), true], ['a', 'b', false], ['a', ['a'], false],\n        [true, true, true], [true, Object(true), true], [Object(true), Object(true), true], [true, 1, false], [true, 'a', false],\n        [false, false, true], [false, Object(false), true], [Object(false), Object(false), true], [false, 0, false], [false, '', false],\n        [symbol1, symbol1, true], [symbol1, Object(symbol1), true], [Object(symbol1), Object(symbol1), true], [symbol1, symbol2, false],\n        [null, null, true], [null, undefined, false], [null, {}, false], [null, '', false],\n        [undefined, undefined, true], [undefined, null, false], [undefined, '', false]\n      ];\n\n      var expected = lodashStable.map(pairs, function(pair) {\n        return pair[2];\n      });\n\n      var actual = lodashStable.map(pairs, function(pair) {\n        return _.isEqual(pair[0], pair[1]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should compare arrays', function(assert) {\n      assert.expect(6);\n\n      var array1 = [true, null, 1, 'a', undefined],\n          array2 = [true, null, 1, 'a', undefined];\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [[1, 2, 3], new Date(2012, 4, 23), /x/, { 'e': 1 }];\n      array2 = [[1, 2, 3], new Date(2012, 4, 23), /x/, { 'e': 1 }];\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [1];\n      array1[2] = 3;\n\n      array2 = [1];\n      array2[1] = undefined;\n      array2[2] = 3;\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [Object(1), false, Object('a'), /x/, new Date(2012, 4, 23), ['a', 'b', [Object('c')]], { 'a': 1 }];\n      array2 = [1, Object(false), 'a', /x/, new Date(2012, 4, 23), ['a', Object('b'), ['c']], { 'a': 1 }];\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [1, 2, 3];\n      array2 = [3, 2, 1];\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n\n      array1 = [1, 2];\n      array2 = [1, 2, 3];\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n    });\n\n    QUnit.test('should treat arrays with identical values but different non-index properties as equal', function(assert) {\n      assert.expect(3);\n\n      var array1 = [1, 2, 3],\n          array2 = [1, 2, 3];\n\n      array1.every = array1.filter = array1.forEach =\n      array1.indexOf = array1.lastIndexOf = array1.map =\n      array1.some = array1.reduce = array1.reduceRight = null;\n\n      array2.concat = array2.join = array2.pop =\n      array2.reverse = array2.shift = array2.slice =\n      array2.sort = array2.splice = array2.unshift = null;\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [1, 2, 3];\n      array1.a = 1;\n\n      array2 = [1, 2, 3];\n      array2.b = 1;\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = /c/.exec('abcde');\n      array2 = ['c'];\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n    });\n\n    QUnit.test('should compare sparse arrays', function(assert) {\n      assert.expect(3);\n\n      var array = Array(1);\n\n      assert.strictEqual(_.isEqual(array, Array(1)), true);\n      assert.strictEqual(_.isEqual(array, [undefined]), true);\n      assert.strictEqual(_.isEqual(array, Array(2)), false);\n    });\n\n    QUnit.test('should compare plain objects', function(assert) {\n      assert.expect(5);\n\n      var object1 = { 'a': true, 'b': null, 'c': 1, 'd': 'a', 'e': undefined },\n          object2 = { 'a': true, 'b': null, 'c': 1, 'd': 'a', 'e': undefined };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n\n      object1 = { 'a': [1, 2, 3], 'b': new Date(2012, 4, 23), 'c': /x/, 'd': { 'e': 1 } };\n      object2 = { 'a': [1, 2, 3], 'b': new Date(2012, 4, 23), 'c': /x/, 'd': { 'e': 1 } };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n\n      object1 = { 'a': 1, 'b': 2, 'c': 3 };\n      object2 = { 'a': 3, 'b': 2, 'c': 1 };\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n\n      object1 = { 'a': 1, 'b': 2, 'c': 3 };\n      object2 = { 'd': 1, 'e': 2, 'f': 3 };\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n\n      object1 = { 'a': 1, 'b': 2 };\n      object2 = { 'a': 1, 'b': 2, 'c': 3 };\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n    });\n\n    QUnit.test('should compare objects regardless of key order', function(assert) {\n      assert.expect(1);\n\n      var object1 = { 'a': 1, 'b': 2, 'c': 3 },\n          object2 = { 'c': 3, 'a': 1, 'b': 2 };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n    });\n\n    QUnit.test('should compare nested objects', function(assert) {\n      assert.expect(1);\n\n      var object1 = {\n        'a': [1, 2, 3],\n        'b': true,\n        'c': Object(1),\n        'd': 'a',\n        'e': {\n          'f': ['a', Object('b'), 'c'],\n          'g': Object(false),\n          'h': new Date(2012, 4, 23),\n          'i': noop,\n          'j': 'a'\n        }\n      };\n\n      var object2 = {\n        'a': [1, Object(2), 3],\n        'b': Object(true),\n        'c': 1,\n        'd': Object('a'),\n        'e': {\n          'f': ['a', 'b', 'c'],\n          'g': false,\n          'h': new Date(2012, 4, 23),\n          'i': noop,\n          'j': 'a'\n        }\n      };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n    });\n\n    QUnit.test('should compare object instances', function(assert) {\n      assert.expect(4);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.a = 1;\n\n      function Bar() {\n        this.a = 1;\n      }\n      Bar.prototype.a = 2;\n\n      assert.strictEqual(_.isEqual(new Foo, new Foo), true);\n      assert.strictEqual(_.isEqual(new Foo, new Bar), false);\n      assert.strictEqual(_.isEqual({ 'a': 1 }, new Foo), false);\n      assert.strictEqual(_.isEqual({ 'a': 2 }, new Bar), false);\n    });\n\n    QUnit.test('should compare objects with constructor properties', function(assert) {\n      assert.expect(5);\n\n      assert.strictEqual(_.isEqual({ 'constructor': 1 },   { 'constructor': 1 }), true);\n      assert.strictEqual(_.isEqual({ 'constructor': 1 },   { 'constructor': '1' }), false);\n      assert.strictEqual(_.isEqual({ 'constructor': [1] }, { 'constructor': [1] }), true);\n      assert.strictEqual(_.isEqual({ 'constructor': [1] }, { 'constructor': ['1'] }), false);\n      assert.strictEqual(_.isEqual({ 'constructor': Object }, {}), false);\n    });\n\n    QUnit.test('should compare arrays with circular references', function(assert) {\n      assert.expect(4);\n\n      var array1 = [],\n          array2 = [];\n\n      array1.push(array1);\n      array2.push(array2);\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1.push('b');\n      array2.push('b');\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1.push('c');\n      array2.push('d');\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n\n      array1 = ['a', 'b', 'c'];\n      array1[1] = array1;\n      array2 = ['a', ['a', 'b', 'c'], 'c'];\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n    });\n\n    QUnit.test('should have transitive equivalence for circular references of arrays', function(assert) {\n      assert.expect(3);\n\n      var array1 = [],\n          array2 = [array1],\n          array3 = [array2];\n\n      array1[0] = array1;\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n      assert.strictEqual(_.isEqual(array2, array3), true);\n      assert.strictEqual(_.isEqual(array1, array3), true);\n    });\n\n    QUnit.test('should compare objects with circular references', function(assert) {\n      assert.expect(4);\n\n      var object1 = {},\n          object2 = {};\n\n      object1.a = object1;\n      object2.a = object2;\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n\n      object1.b = 0;\n      object2.b = Object(0);\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n\n      object1.c = Object(1);\n      object2.c = Object(2);\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n\n      object1 = { 'a': 1, 'b': 2, 'c': 3 };\n      object1.b = object1;\n      object2 = { 'a': 1, 'b': { 'a': 1, 'b': 2, 'c': 3 }, 'c': 3 };\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n    });\n\n    QUnit.test('should have transitive equivalence for circular references of objects', function(assert) {\n      assert.expect(3);\n\n      var object1 = {},\n          object2 = { 'a': object1 },\n          object3 = { 'a': object2 };\n\n      object1.a = object1;\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n      assert.strictEqual(_.isEqual(object2, object3), true);\n      assert.strictEqual(_.isEqual(object1, object3), true);\n    });\n\n    QUnit.test('should compare objects with multiple circular references', function(assert) {\n      assert.expect(3);\n\n      var array1 = [{}],\n          array2 = [{}];\n\n      (array1[0].a = array1).push(array1);\n      (array2[0].a = array2).push(array2);\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1[0].b = 0;\n      array2[0].b = Object(0);\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1[0].c = Object(1);\n      array2[0].c = Object(2);\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n    });\n\n    QUnit.test('should compare objects with complex circular references', function(assert) {\n      assert.expect(1);\n\n      var object1 = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': { 'a': 2 }\n      };\n\n      var object2 = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': { 'a': 2 }\n      };\n\n      object1.foo.b.c.d = object1;\n      object1.bar.b = object1.foo.b;\n\n      object2.foo.b.c.d = object2;\n      object2.bar.b = object2.foo.b;\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n    });\n\n    QUnit.test('should compare objects with shared property values', function(assert) {\n      assert.expect(1);\n\n      var object1 = {\n        'a': [1, 2]\n      };\n\n      var object2 = {\n        'a': [1, 2],\n        'b': [1, 2]\n      };\n\n      object1.b = object1.a;\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n    });\n\n    QUnit.test('should treat objects created by `Object.create(null)` like plain objects', function(assert) {\n      assert.expect(2);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.constructor = null;\n\n      var object1 = create(null);\n      object1.a = 1;\n\n      var object2 = { 'a': 1 };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n      assert.strictEqual(_.isEqual(new Foo, object2), false);\n    });\n\n    QUnit.test('should avoid common type coercions', function(assert) {\n      assert.expect(9);\n\n      assert.strictEqual(_.isEqual(true, Object(false)), false);\n      assert.strictEqual(_.isEqual(Object(false), Object(0)), false);\n      assert.strictEqual(_.isEqual(false, Object('')), false);\n      assert.strictEqual(_.isEqual(Object(36), Object('36')), false);\n      assert.strictEqual(_.isEqual(0, ''), false);\n      assert.strictEqual(_.isEqual(1, true), false);\n      assert.strictEqual(_.isEqual(1337756400000, new Date(2012, 4, 23)), false);\n      assert.strictEqual(_.isEqual('36', 36), false);\n      assert.strictEqual(_.isEqual(36, '36'), false);\n    });\n\n    QUnit.test('should compare `arguments` objects', function(assert) {\n      assert.expect(2);\n\n      var args1 = (function() { return arguments; }()),\n          args2 = (function() { return arguments; }()),\n          args3 = (function() { return arguments; }(1, 2));\n\n      assert.strictEqual(_.isEqual(args1, args2), true);\n      assert.strictEqual(_.isEqual(args1, args3), false);\n    });\n\n    QUnit.test('should treat `arguments` objects like `Object` objects', function(assert) {\n      assert.expect(4);\n\n      var object = { '0': 1, '1': 2, '2': 3 };\n\n      function Foo() {}\n      Foo.prototype = object;\n\n      assert.strictEqual(_.isEqual(args, object), true);\n      assert.strictEqual(_.isEqual(object, args), true);\n      assert.strictEqual(_.isEqual(args, new Foo), false);\n      assert.strictEqual(_.isEqual(new Foo, args), false);\n    });\n\n    QUnit.test('should compare array buffers', function(assert) {\n      assert.expect(2);\n\n      if (ArrayBuffer) {\n        var buffer = new Int8Array([-1]).buffer;\n\n        assert.strictEqual(_.isEqual(buffer, new Uint8Array([255]).buffer), true);\n        assert.strictEqual(_.isEqual(buffer, new ArrayBuffer(1)), false);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should compare array views', function(assert) {\n      assert.expect(2);\n\n      lodashStable.times(2, function(index) {\n        var ns = index ? realm : root;\n\n        var pairs = lodashStable.map(arrayViews, function(type, viewIndex) {\n          var otherType = arrayViews[(viewIndex + 1) % arrayViews.length],\n              CtorA = ns[type] || function(n) { this.n = n; },\n              CtorB = ns[otherType] || function(n) { this.n = n; },\n              bufferA = ns[type] ? new ns.ArrayBuffer(8) : 8,\n              bufferB = ns[otherType] ? new ns.ArrayBuffer(8) : 8,\n              bufferC = ns[otherType] ? new ns.ArrayBuffer(16) : 16;\n\n          return [new CtorA(bufferA), new CtorA(bufferA), new CtorB(bufferB), new CtorB(bufferC)];\n        });\n\n        var expected = lodashStable.map(pairs, lodashStable.constant([true, false, false]));\n\n        var actual = lodashStable.map(pairs, function(pair) {\n          return [_.isEqual(pair[0], pair[1]), _.isEqual(pair[0], pair[2]), _.isEqual(pair[2], pair[3])];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should compare buffers', function(assert) {\n      assert.expect(3);\n\n      if (Buffer) {\n        var buffer = new Buffer([1]);\n\n        assert.strictEqual(_.isEqual(buffer, new Buffer([1])), true);\n        assert.strictEqual(_.isEqual(buffer, new Buffer([2])), false);\n        assert.strictEqual(_.isEqual(buffer, new Uint8Array([1])), false);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should compare date objects', function(assert) {\n      assert.expect(4);\n\n      var date = new Date(2012, 4, 23);\n\n      assert.strictEqual(_.isEqual(date, new Date(2012, 4, 23)), true);\n      assert.strictEqual(_.isEqual(new Date('a'), new Date('b')), true);\n      assert.strictEqual(_.isEqual(date, new Date(2013, 3, 25)), false);\n      assert.strictEqual(_.isEqual(date, { 'getTime': lodashStable.constant(+date) }), false);\n    });\n\n    QUnit.test('should compare error objects', function(assert) {\n      assert.expect(1);\n\n      var pairs = lodashStable.map([\n        'Error',\n        'EvalError',\n        'RangeError',\n        'ReferenceError',\n        'SyntaxError',\n        'TypeError',\n        'URIError'\n      ], function(type, index, errorTypes) {\n        var otherType = errorTypes[++index % errorTypes.length],\n            CtorA = root[type],\n            CtorB = root[otherType];\n\n        return [new CtorA('a'), new CtorA('a'), new CtorB('a'), new CtorB('b')];\n      });\n\n      var expected = lodashStable.map(pairs, lodashStable.constant([true, false, false]));\n\n      var actual = lodashStable.map(pairs, function(pair) {\n        return [_.isEqual(pair[0], pair[1]), _.isEqual(pair[0], pair[2]), _.isEqual(pair[2], pair[3])];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should compare functions', function(assert) {\n      assert.expect(2);\n\n      function a() { return 1 + 2; }\n      function b() { return 1 + 2; }\n\n      assert.strictEqual(_.isEqual(a, a), true);\n      assert.strictEqual(_.isEqual(a, b), false);\n    });\n\n    QUnit.test('should compare maps', function(assert) {\n      assert.expect(8);\n\n      if (Map) {\n        lodashStable.each([[map, new Map], [map, realm.map]], function(maps) {\n          var map1 = maps[0],\n              map2 = maps[1];\n\n          map1.set('a', 1);\n          map2.set('b', 2);\n          assert.strictEqual(_.isEqual(map1, map2), false);\n\n          map1.set('b', 2);\n          map2.set('a', 1);\n          assert.strictEqual(_.isEqual(map1, map2), true);\n\n          map1.delete('a');\n          map1.set('a', 1);\n          assert.strictEqual(_.isEqual(map1, map2), true);\n\n          map2.delete('a');\n          assert.strictEqual(_.isEqual(map1, map2), false);\n\n          map1.clear();\n          map2.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('should compare maps with circular references', function(assert) {\n      assert.expect(2);\n\n      if (Map) {\n        var map1 = new Map,\n            map2 = new Map;\n\n        map1.set('a', map1);\n        map2.set('a', map2);\n        assert.strictEqual(_.isEqual(map1, map2), true);\n\n        map1.set('b', 1);\n        map2.set('b', 2);\n        assert.strictEqual(_.isEqual(map1, map2), false);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should compare promises by reference', function(assert) {\n      assert.expect(4);\n\n      if (promise) {\n        lodashStable.each([[promise, Promise.resolve(1)], [promise, realm.promise]], function(promises) {\n          var promise1 = promises[0],\n              promise2 = promises[1];\n\n          assert.strictEqual(_.isEqual(promise1, promise2), false);\n          assert.strictEqual(_.isEqual(promise1, promise1), true);\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should compare regexes', function(assert) {\n      assert.expect(5);\n\n      assert.strictEqual(_.isEqual(/x/gim, /x/gim), true);\n      assert.strictEqual(_.isEqual(/x/gim, /x/mgi), true);\n      assert.strictEqual(_.isEqual(/x/gi, /x/g), false);\n      assert.strictEqual(_.isEqual(/x/, /y/), false);\n      assert.strictEqual(_.isEqual(/x/g, { 'global': true, 'ignoreCase': false, 'multiline': false, 'source': 'x' }), false);\n    });\n\n    QUnit.test('should compare sets', function(assert) {\n      assert.expect(8);\n\n      if (Set) {\n        lodashStable.each([[set, new Set], [set, realm.set]], function(sets) {\n          var set1 = sets[0],\n              set2 = sets[1];\n\n          set1.add(1);\n          set2.add(2);\n          assert.strictEqual(_.isEqual(set1, set2), false);\n\n          set1.add(2);\n          set2.add(1);\n          assert.strictEqual(_.isEqual(set1, set2), true);\n\n          set1.delete(1);\n          set1.add(1);\n          assert.strictEqual(_.isEqual(set1, set2), true);\n\n          set2.delete(1);\n          assert.strictEqual(_.isEqual(set1, set2), false);\n\n          set1.clear();\n          set2.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('should compare sets with circular references', function(assert) {\n      assert.expect(2);\n\n      if (Set) {\n        var set1 = new Set,\n            set2 = new Set;\n\n        set1.add(set1);\n        set2.add(set2);\n        assert.strictEqual(_.isEqual(set1, set2), true);\n\n        set1.add(1);\n        set2.add(2);\n        assert.strictEqual(_.isEqual(set1, set2), false);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should compare symbol properties', function(assert) {\n      assert.expect(3);\n\n      if (Symbol) {\n        var object1 = { 'a': 1 },\n            object2 = { 'a': 1 };\n\n        object1[symbol1] = { 'a': { 'b': 2 } };\n        object2[symbol1] = { 'a': { 'b': 2 } };\n\n        defineProperty(object2, symbol2, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 2\n        });\n\n        assert.strictEqual(_.isEqual(object1, object2), true);\n\n        object2[symbol1] = { 'a': 1 };\n        assert.strictEqual(_.isEqual(object1, object2), false);\n\n        delete object2[symbol1];\n        object2[Symbol('a')] = { 'a': { 'b': 2 } };\n        assert.strictEqual(_.isEqual(object1, object2), false);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should compare wrapped values', function(assert) {\n      assert.expect(32);\n\n      var stamp = +new Date;\n\n      var values = [\n        [[1, 2], [1, 2], [1, 2, 3]],\n        [true, true, false],\n        [new Date(stamp), new Date(stamp), new Date(stamp - 100)],\n        [{ 'a': 1, 'b': 2 }, { 'a': 1, 'b': 2 }, { 'a': 1, 'b': 1 }],\n        [1, 1, 2],\n        [NaN, NaN, Infinity],\n        [/x/, /x/, /x/i],\n        ['a', 'a', 'A']\n      ];\n\n      lodashStable.each(values, function(vals) {\n        if (!isNpm) {\n          var wrapped1 = _(vals[0]),\n              wrapped2 = _(vals[1]),\n              actual = wrapped1.isEqual(wrapped2);\n\n          assert.strictEqual(actual, true);\n          assert.strictEqual(_.isEqual(_(actual), _(true)), true);\n\n          wrapped1 = _(vals[0]);\n          wrapped2 = _(vals[2]);\n\n          actual = wrapped1.isEqual(wrapped2);\n          assert.strictEqual(actual, false);\n          assert.strictEqual(_.isEqual(_(actual), _(false)), true);\n        }\n        else {\n          skipAssert(assert, 4);\n        }\n      });\n    });\n\n    QUnit.test('should compare wrapped and non-wrapped values', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var object1 = _({ 'a': 1, 'b': 2 }),\n            object2 = { 'a': 1, 'b': 2 };\n\n        assert.strictEqual(object1.isEqual(object2), true);\n        assert.strictEqual(_.isEqual(object1, object2), true);\n\n        object1 = _({ 'a': 1, 'b': 2 });\n        object2 = { 'a': 1, 'b': 1 };\n\n        assert.strictEqual(object1.isEqual(object2), false);\n        assert.strictEqual(_.isEqual(object1, object2), false);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should work as an iteratee for `_.every`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.every([1, 1, 1], lodashStable.partial(_.isEqual, 1));\n      assert.ok(actual);\n    });\n\n    QUnit.test('should not error on DOM elements', function(assert) {\n      assert.expect(1);\n\n      if (document) {\n        var element1 = document.createElement('div'),\n            element2 = element1.cloneNode(true);\n\n        try {\n          assert.strictEqual(_.isEqual(element1, element2), false);\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `true` for like-objects from different documents', function(assert) {\n      assert.expect(4);\n\n      if (realm.object) {\n        assert.strictEqual(_.isEqual([1], realm.array), true);\n        assert.strictEqual(_.isEqual([2], realm.array), false);\n        assert.strictEqual(_.isEqual({ 'a': 1 }, realm.object), true);\n        assert.strictEqual(_.isEqual({ 'a': 2 }, realm.object), false);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should return `false` for objects with custom `toString` methods', function(assert) {\n      assert.expect(1);\n\n      var primitive,\n          object = { 'toString': function() { return primitive; } },\n          values = [true, null, 1, 'a', undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        primitive = value;\n        return _.isEqual(object, value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_('a').isEqual('a'), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_('a').chain().isEqual('a') instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isEqualWith');\n\n  (function() {\n    QUnit.test('should provide correct `customizer` arguments', function(assert) {\n      assert.expect(1);\n\n      var argsList = [],\n          object1 = { 'a': [1, 2], 'b': null },\n          object2 = { 'a': [1, 2], 'b': null };\n\n      object1.b = object2;\n      object2.b = object1;\n\n      var expected = [\n        [object1, object2],\n        [object1.a, object2.a, 'a', object1, object2],\n        [object1.a[0], object2.a[0], 0, object1.a, object2.a],\n        [object1.a[1], object2.a[1], 1, object1.a, object2.a],\n        [object1.b, object2.b, 'b', object1.b, object2.b]\n      ];\n\n      _.isEqualWith(object1, object2, function(assert) {\n        var length = arguments.length,\n            args = slice.call(arguments, 0, length - (length > 2 ? 1 : 0));\n\n        argsList.push(args);\n      });\n\n      assert.deepEqual(argsList, expected);\n    });\n\n    QUnit.test('should handle comparisons when `customizer` returns `undefined`', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isEqualWith('a', 'a', noop), true);\n      assert.strictEqual(_.isEqualWith(['a'], ['a'], noop), true);\n      assert.strictEqual(_.isEqualWith({ '0': 'a' }, { '0': 'a' }, noop), true);\n    });\n\n    QUnit.test('should not handle comparisons when `customizer` returns `true`', function(assert) {\n      assert.expect(3);\n\n      var customizer = function(value) {\n        return _.isString(value) || undefined;\n      };\n\n      assert.strictEqual(_.isEqualWith('a', 'b', customizer), true);\n      assert.strictEqual(_.isEqualWith(['a'], ['b'], customizer), true);\n      assert.strictEqual(_.isEqualWith({ '0': 'a' }, { '0': 'b' }, customizer), true);\n    });\n\n    QUnit.test('should not handle comparisons when `customizer` returns `false`', function(assert) {\n      assert.expect(3);\n\n      var customizer = function(value) {\n        return _.isString(value) ? false : undefined;\n      };\n\n      assert.strictEqual(_.isEqualWith('a', 'a', customizer), false);\n      assert.strictEqual(_.isEqualWith(['a'], ['a'], customizer), false);\n      assert.strictEqual(_.isEqualWith({ '0': 'a' }, { '0': 'a' }, customizer), false);\n    });\n\n    QUnit.test('should return a boolean value even when `customizer` does not', function(assert) {\n      assert.expect(2);\n\n      var actual = _.isEqualWith('a', 'b', stubC);\n      assert.strictEqual(actual, true);\n\n      var values = _.without(falsey, undefined),\n          expected = lodashStable.map(values, stubFalse);\n\n      actual = [];\n      lodashStable.each(values, function(value) {\n        actual.push(_.isEqualWith('a', 'a', lodashStable.constant(value)));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ensure `customizer` is a function', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3],\n          eq = _.partial(_.isEqualWith, array),\n          actual = lodashStable.map([array, [1, 0, 3]], eq);\n\n      assert.deepEqual(actual, [true, false]);\n    });\n\n    QUnit.test('should call `customizer` for values maps and sets', function(assert) {\n      assert.expect(2);\n\n      var value = { 'a': { 'b': 2 } };\n\n      if (Map) {\n        var map1 = new Map;\n        map1.set('a', value);\n\n        var map2 = new Map;\n        map2.set('a', value);\n      }\n      if (Set) {\n        var set1 = new Set;\n        set1.add(value);\n\n        var set2 = new Set;\n        set2.add(value);\n      }\n      lodashStable.each([[map1, map2], [set1, set2]], function(pair, index) {\n        if (pair[0]) {\n          var argsList = [],\n              array = lodashStable.toArray(pair[0]);\n\n          var expected = [\n            [pair[0], pair[1]],\n            [array[0], array[0], 0, array, array],\n            [array[0][0], array[0][0], 0, array[0], array[0]],\n            [array[0][1], array[0][1], 1, array[0], array[0]]\n          ];\n\n          if (index) {\n            expected.length = 2;\n          }\n          _.isEqualWith(pair[0], pair[1], function() {\n            var length = arguments.length,\n                args = slice.call(arguments, 0, length - (length > 2 ? 1 : 0));\n\n            argsList.push(args);\n          });\n\n          assert.deepEqual(argsList, expected, index ? 'Set' : 'Map');\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isError');\n\n  (function() {\n    QUnit.test('should return `true` for error objects', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(errors, stubTrue);\n\n      var actual = lodashStable.map(errors, function(error) {\n        return _.isError(error) === true;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `true` for subclassed values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isError(new CustomError('x')), true);\n    });\n\n    QUnit.test('should return `false` for non error objects', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isError(value) : _.isError();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isError(args), false);\n      assert.strictEqual(_.isError([1, 2, 3]), false);\n      assert.strictEqual(_.isError(true), false);\n      assert.strictEqual(_.isError(new Date), false);\n      assert.strictEqual(_.isError(_), false);\n      assert.strictEqual(_.isError(slice), false);\n      assert.strictEqual(_.isError({ 'a': 1 }), false);\n      assert.strictEqual(_.isError(1), false);\n      assert.strictEqual(_.isError(/x/), false);\n      assert.strictEqual(_.isError('a'), false);\n      assert.strictEqual(_.isError(symbol), false);\n    });\n\n    QUnit.test('should return `false` for plain objects', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isError({ 'name': 'Error', 'message': '' }), false);\n    });\n\n    QUnit.test('should work with an error object from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.errors) {\n        var expected = lodashStable.map(realm.errors, stubTrue);\n\n        var actual = lodashStable.map(realm.errors, function(error) {\n          return _.isError(error) === true;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isFinite');\n\n  (function() {\n    QUnit.test('should return `true` for finite values', function(assert) {\n      assert.expect(1);\n\n      var values = [0, 1, 3.14, -1],\n          expected = lodashStable.map(values, stubTrue),\n          actual = lodashStable.map(values, _.isFinite);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-finite values', function(assert) {\n      assert.expect(1);\n\n      var values = [NaN, Infinity, -Infinity, Object(1)],\n          expected = lodashStable.map(values, stubFalse),\n          actual = lodashStable.map(values, _.isFinite);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-numeric values', function(assert) {\n      assert.expect(10);\n\n      var values = [undefined, [], true, '', ' ', '2px'],\n          expected = lodashStable.map(values, stubFalse),\n          actual = lodashStable.map(values, _.isFinite);\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isFinite(args), false);\n      assert.strictEqual(_.isFinite([1, 2, 3]), false);\n      assert.strictEqual(_.isFinite(true), false);\n      assert.strictEqual(_.isFinite(new Date), false);\n      assert.strictEqual(_.isFinite(new Error), false);\n      assert.strictEqual(_.isFinite({ 'a': 1 }), false);\n      assert.strictEqual(_.isFinite(/x/), false);\n      assert.strictEqual(_.isFinite('a'), false);\n      assert.strictEqual(_.isFinite(symbol), false);\n    });\n\n    QUnit.test('should return `false` for numeric string values', function(assert) {\n      assert.expect(1);\n\n      var values = ['2', '0', '08'],\n          expected = lodashStable.map(values, stubFalse),\n          actual = lodashStable.map(values, _.isFinite);\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isFunction');\n\n  (function() {\n    QUnit.test('should return `true` for functions', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isFunction(_), true);\n      assert.strictEqual(_.isFunction(slice), true);\n    });\n\n    QUnit.test('should return `true` for async functions', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isFunction(asyncFunc), typeof asyncFunc == 'function');\n    });\n\n    QUnit.test('should return `true` for generator functions', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isFunction(genFunc), typeof genFunc == 'function');\n    });\n\n    QUnit.test('should return `true` for the `Proxy` constructor', function(assert) {\n      assert.expect(1);\n\n      if (Proxy) {\n        assert.strictEqual(_.isFunction(Proxy), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `true` for array view constructors', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(arrayViews, function(type) {\n        return objToString.call(root[type]) == funcTag;\n      });\n\n      var actual = lodashStable.map(arrayViews, function(type) {\n        return _.isFunction(root[type]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-functions', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isFunction(value) : _.isFunction();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isFunction(args), false);\n      assert.strictEqual(_.isFunction([1, 2, 3]), false);\n      assert.strictEqual(_.isFunction(true), false);\n      assert.strictEqual(_.isFunction(new Date), false);\n      assert.strictEqual(_.isFunction(new Error), false);\n      assert.strictEqual(_.isFunction({ 'a': 1 }), false);\n      assert.strictEqual(_.isFunction(1), false);\n      assert.strictEqual(_.isFunction(/x/), false);\n      assert.strictEqual(_.isFunction('a'), false);\n      assert.strictEqual(_.isFunction(symbol), false);\n\n      if (document) {\n        assert.strictEqual(_.isFunction(document.getElementsByTagName('body')), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with a function from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.function) {\n        assert.strictEqual(_.isFunction(realm.function), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('isInteger methods');\n\n  lodashStable.each(['isInteger', 'isSafeInteger'], function(methodName) {\n    var func = _[methodName],\n        isSafe = methodName == 'isSafeInteger';\n\n    QUnit.test('`_.' + methodName + '` should return `true` for integer values', function(assert) {\n      assert.expect(2);\n\n      var values = [-1, 0, 1],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value);\n      });\n\n      assert.deepEqual(actual, expected);\n      assert.strictEqual(func(MAX_INTEGER), !isSafe);\n    });\n\n    QUnit.test('should return `false` for non-integer number values', function(assert) {\n      assert.expect(1);\n\n      var values = [NaN, Infinity, -Infinity, Object(1), 3.14],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-numeric values', function(assert) {\n      assert.expect(10);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === 0;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? func(value) : func();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(func(args), false);\n      assert.strictEqual(func([1, 2, 3]), false);\n      assert.strictEqual(func(true), false);\n      assert.strictEqual(func(new Date), false);\n      assert.strictEqual(func(new Error), false);\n      assert.strictEqual(func({ 'a': 1 }), false);\n      assert.strictEqual(func(/x/), false);\n      assert.strictEqual(func('a'), false);\n      assert.strictEqual(func(symbol), false);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isLength');\n\n  (function() {\n    QUnit.test('should return `true` for lengths', function(assert) {\n      assert.expect(1);\n\n      var values = [0, 3, MAX_SAFE_INTEGER],\n          expected = lodashStable.map(values, stubTrue),\n          actual = lodashStable.map(values, _.isLength);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-lengths', function(assert) {\n      assert.expect(1);\n\n      var values = [-1, '1', 1.1, MAX_SAFE_INTEGER + 1],\n          expected = lodashStable.map(values, stubFalse),\n          actual = lodashStable.map(values, _.isLength);\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isMap');\n\n  (function() {\n    QUnit.test('should return `true` for maps', function(assert) {\n      assert.expect(1);\n\n      if (Map) {\n        assert.strictEqual(_.isMap(map), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-maps', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isMap(value) : _.isMap();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isMap(args), false);\n      assert.strictEqual(_.isMap([1, 2, 3]), false);\n      assert.strictEqual(_.isMap(true), false);\n      assert.strictEqual(_.isMap(new Date), false);\n      assert.strictEqual(_.isMap(new Error), false);\n      assert.strictEqual(_.isMap(_), false);\n      assert.strictEqual(_.isMap(slice), false);\n      assert.strictEqual(_.isMap({ 'a': 1 }), false);\n      assert.strictEqual(_.isMap(1), false);\n      assert.strictEqual(_.isMap(/x/), false);\n      assert.strictEqual(_.isMap('a'), false);\n      assert.strictEqual(_.isMap(symbol), false);\n      assert.strictEqual(_.isMap(weakMap), false);\n    });\n\n    QUnit.test('should work for objects with a non-function `constructor` (test in IE 11)', function(assert) {\n      assert.expect(1);\n\n      var values = [false, true],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.isMap({ 'constructor': value });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with maps from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.map) {\n        assert.strictEqual(_.isMap(realm.map), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isMatchWith');\n\n  (function() {\n    QUnit.test('should provide correct `customizer` arguments', function(assert) {\n      assert.expect(1);\n\n      var argsList = [],\n          object1 = { 'a': [1, 2], 'b': null },\n          object2 = { 'a': [1, 2], 'b': null };\n\n      object1.b = object2;\n      object2.b = object1;\n\n      var expected = [\n        [object1.a, object2.a, 'a', object1, object2],\n        [object1.a[0], object2.a[0], 0, object1.a, object2.a],\n        [object1.a[1], object2.a[1], 1, object1.a, object2.a],\n        [object1.b, object2.b, 'b', object1, object2],\n        [object1.b.a, object2.b.a, 'a', object1.b, object2.b],\n        [object1.b.a[0], object2.b.a[0], 0, object1.b.a, object2.b.a],\n        [object1.b.a[1], object2.b.a[1], 1, object1.b.a, object2.b.a],\n        [object1.b.b, object2.b.b, 'b', object1.b, object2.b]\n      ];\n\n      _.isMatchWith(object1, object2, function(assert) {\n        argsList.push(slice.call(arguments, 0, -1));\n      });\n\n      assert.deepEqual(argsList, expected);\n    });\n\n    QUnit.test('should handle comparisons when `customizer` returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isMatchWith({ 'a': 1 }, { 'a': 1 }, noop), true);\n    });\n\n    QUnit.test('should not handle comparisons when `customizer` returns `true`', function(assert) {\n      assert.expect(2);\n\n      var customizer = function(value) {\n        return _.isString(value) || undefined;\n      };\n\n      assert.strictEqual(_.isMatchWith(['a'], ['b'], customizer), true);\n      assert.strictEqual(_.isMatchWith({ '0': 'a' }, { '0': 'b' }, customizer), true);\n    });\n\n    QUnit.test('should not handle comparisons when `customizer` returns `false`', function(assert) {\n      assert.expect(2);\n\n      var customizer = function(value) {\n        return _.isString(value) ? false : undefined;\n      };\n\n      assert.strictEqual(_.isMatchWith(['a'], ['a'], customizer), false);\n      assert.strictEqual(_.isMatchWith({ '0': 'a' }, { '0': 'a' }, customizer), false);\n    });\n\n    QUnit.test('should return a boolean value even when `customizer` does not', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1 },\n          actual = _.isMatchWith(object, { 'a': 1 }, stubA);\n\n      assert.strictEqual(actual, true);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      actual = [];\n      lodashStable.each(falsey, function(value) {\n        actual.push(_.isMatchWith(object, { 'a': 2 }, lodashStable.constant(value)));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should provide `stack` to `customizer`', function(assert) {\n      assert.expect(1);\n\n      var actual;\n\n      _.isMatchWith({ 'a': 1 }, { 'a': 1 }, function() {\n        actual = _.last(arguments);\n      });\n\n      assert.ok(isNpm\n        ? actual.constructor.name == 'Stack'\n        : actual instanceof mapCaches.Stack\n      );\n    });\n\n    QUnit.test('should ensure `customizer` is a function', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1 },\n          matches = _.partial(_.isMatchWith, object),\n          actual = lodashStable.map([object, { 'a': 2 }], matches);\n\n      assert.deepEqual(actual, [true, false]);\n    });\n\n    QUnit.test('should call `customizer` for values maps and sets', function(assert) {\n      assert.expect(2);\n\n      var value = { 'a': { 'b': 2 } };\n\n      if (Map) {\n        var map1 = new Map;\n        map1.set('a', value);\n\n        var map2 = new Map;\n        map2.set('a', value);\n      }\n      if (Set) {\n        var set1 = new Set;\n        set1.add(value);\n\n        var set2 = new Set;\n        set2.add(value);\n      }\n      lodashStable.each([[map1, map2], [set1, set2]], function(pair, index) {\n        if (pair[0]) {\n          var argsList = [],\n              array = lodashStable.toArray(pair[0]),\n              object1 = { 'a': pair[0] },\n              object2 = { 'a': pair[1] };\n\n          var expected = [\n            [pair[0], pair[1], 'a', object1, object2],\n            [array[0], array[0], 0, array, array],\n            [array[0][0], array[0][0], 0, array[0], array[0]],\n            [array[0][1], array[0][1], 1, array[0], array[0]]\n          ];\n\n          if (index) {\n            expected.length = 2;\n          }\n          _.isMatchWith({ 'a': pair[0] }, { 'a': pair[1] }, function() {\n            argsList.push(slice.call(arguments, 0, -1));\n          });\n\n          assert.deepEqual(argsList, expected, index ? 'Set' : 'Map');\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNaN');\n\n  (function() {\n    QUnit.test('should return `true` for NaNs', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isNaN(NaN), true);\n      assert.strictEqual(_.isNaN(Object(NaN)), true);\n    });\n\n    QUnit.test('should return `false` for non-NaNs', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value !== value;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNaN(value) : _.isNaN();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNaN(args), false);\n      assert.strictEqual(_.isNaN([1, 2, 3]), false);\n      assert.strictEqual(_.isNaN(true), false);\n      assert.strictEqual(_.isNaN(new Date), false);\n      assert.strictEqual(_.isNaN(new Error), false);\n      assert.strictEqual(_.isNaN(_), false);\n      assert.strictEqual(_.isNaN(slice), false);\n      assert.strictEqual(_.isNaN({ 'a': 1 }), false);\n      assert.strictEqual(_.isNaN(1), false);\n      assert.strictEqual(_.isNaN(Object(1)), false);\n      assert.strictEqual(_.isNaN(/x/), false);\n      assert.strictEqual(_.isNaN('a'), false);\n      assert.strictEqual(_.isNaN(symbol), false);\n    });\n\n    QUnit.test('should work with `NaN` from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        assert.strictEqual(_.isNaN(realm.nan), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNative');\n\n  (function() {\n    QUnit.test('should return `true` for native methods', function(assert) {\n      assert.expect(1);\n\n      var values = [Array, body && body.cloneNode, create, root.encodeURI, Promise, slice, Uint8Array],\n          expected = lodashStable.map(values, Boolean),\n          actual = lodashStable.map(values, _.isNative);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-native methods', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNative(value) : _.isNative();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNative(args), false);\n      assert.strictEqual(_.isNative([1, 2, 3]), false);\n      assert.strictEqual(_.isNative(true), false);\n      assert.strictEqual(_.isNative(new Date), false);\n      assert.strictEqual(_.isNative(new Error), false);\n      assert.strictEqual(_.isNative(_), false);\n      assert.strictEqual(_.isNative({ 'a': 1 }), false);\n      assert.strictEqual(_.isNative(1), false);\n      assert.strictEqual(_.isNative(/x/), false);\n      assert.strictEqual(_.isNative('a'), false);\n      assert.strictEqual(_.isNative(symbol), false);\n    });\n\n    QUnit.test('should work with native functions from another realm', function(assert) {\n      assert.expect(2);\n\n      if (realm.element) {\n        assert.strictEqual(_.isNative(realm.element.cloneNode), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n      if (realm.object) {\n        assert.strictEqual(_.isNative(realm.object.valueOf), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should throw an error if core-js is detected', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var lodash = _.runInContext({\n          '__core-js_shared__': {}\n        });\n\n        assert.raises(function() { lodash.isNative(noop); });\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should detect methods masquerading as native (test in Node.js)', function(assert) {\n      assert.expect(2);\n\n      if (!amd && _._baseEach) {\n        var path = require('path'),\n            basePath = path.dirname(filePath),\n            uid = 'e0gvgyrad1jor',\n            coreKey = '__core-js_shared__',\n            fakeSrcKey = 'Symbol(src)_1.' + uid;\n\n        root[coreKey] = { 'keys': { 'IE_PROTO': 'Symbol(IE_PROTO)_3.' + uid } };\n        emptyObject(require.cache);\n\n        var baseIsNative = interopRequire(path.join(basePath, '_baseIsNative'));\n        assert.strictEqual(baseIsNative(slice), true);\n\n        slice[fakeSrcKey] = slice + '';\n        assert.strictEqual(baseIsNative(slice), false);\n\n        delete slice[fakeSrcKey];\n        delete root[coreKey];\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNil');\n\n  (function() {\n    QUnit.test('should return `true` for nullish values', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isNil(null), true);\n      assert.strictEqual(_.isNil(), true);\n      assert.strictEqual(_.isNil(undefined), true);\n    });\n\n    QUnit.test('should return `false` for non-nullish values', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value == null;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNil(value) : _.isNil();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNil(args), false);\n      assert.strictEqual(_.isNil([1, 2, 3]), false);\n      assert.strictEqual(_.isNil(true), false);\n      assert.strictEqual(_.isNil(new Date), false);\n      assert.strictEqual(_.isNil(new Error), false);\n      assert.strictEqual(_.isNil(_), false);\n      assert.strictEqual(_.isNil(slice), false);\n      assert.strictEqual(_.isNil({ 'a': 1 }), false);\n      assert.strictEqual(_.isNil(1), false);\n      assert.strictEqual(_.isNil(/x/), false);\n      assert.strictEqual(_.isNil('a'), false);\n\n      if (Symbol) {\n        assert.strictEqual(_.isNil(symbol), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with nils from another realm', function(assert) {\n      assert.expect(2);\n\n      if (realm.object) {\n        assert.strictEqual(_.isNil(realm.null), true);\n        assert.strictEqual(_.isNil(realm.undefined), true);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNull');\n\n  (function() {\n    QUnit.test('should return `true` for `null` values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isNull(null), true);\n    });\n\n    QUnit.test('should return `false` for non `null` values', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === null;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNull(value) : _.isNull();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNull(args), false);\n      assert.strictEqual(_.isNull([1, 2, 3]), false);\n      assert.strictEqual(_.isNull(true), false);\n      assert.strictEqual(_.isNull(new Date), false);\n      assert.strictEqual(_.isNull(new Error), false);\n      assert.strictEqual(_.isNull(_), false);\n      assert.strictEqual(_.isNull(slice), false);\n      assert.strictEqual(_.isNull({ 'a': 1 }), false);\n      assert.strictEqual(_.isNull(1), false);\n      assert.strictEqual(_.isNull(/x/), false);\n      assert.strictEqual(_.isNull('a'), false);\n      assert.strictEqual(_.isNull(symbol), false);\n    });\n\n    QUnit.test('should work with nulls from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        assert.strictEqual(_.isNull(realm.null), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNumber');\n\n  (function() {\n    QUnit.test('should return `true` for numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isNumber(0), true);\n      assert.strictEqual(_.isNumber(Object(0)), true);\n      assert.strictEqual(_.isNumber(NaN), true);\n    });\n\n    QUnit.test('should return `false` for non-numbers', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return typeof value == 'number';\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNumber(value) : _.isNumber();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNumber(args), false);\n      assert.strictEqual(_.isNumber([1, 2, 3]), false);\n      assert.strictEqual(_.isNumber(true), false);\n      assert.strictEqual(_.isNumber(new Date), false);\n      assert.strictEqual(_.isNumber(new Error), false);\n      assert.strictEqual(_.isNumber(_), false);\n      assert.strictEqual(_.isNumber(slice), false);\n      assert.strictEqual(_.isNumber({ 'a': 1 }), false);\n      assert.strictEqual(_.isNumber(/x/), false);\n      assert.strictEqual(_.isNumber('a'), false);\n      assert.strictEqual(_.isNumber(symbol), false);\n    });\n\n    QUnit.test('should work with numbers from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.number) {\n        assert.strictEqual(_.isNumber(realm.number), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isObject');\n\n  (function() {\n    QUnit.test('should return `true` for objects', function(assert) {\n      assert.expect(13);\n\n      assert.strictEqual(_.isObject(args), true);\n      assert.strictEqual(_.isObject([1, 2, 3]), true);\n      assert.strictEqual(_.isObject(Object(false)), true);\n      assert.strictEqual(_.isObject(new Date), true);\n      assert.strictEqual(_.isObject(new Error), true);\n      assert.strictEqual(_.isObject(_), true);\n      assert.strictEqual(_.isObject(slice), true);\n      assert.strictEqual(_.isObject({ 'a': 1 }), true);\n      assert.strictEqual(_.isObject(Object(0)), true);\n      assert.strictEqual(_.isObject(/x/), true);\n      assert.strictEqual(_.isObject(Object('a')), true);\n\n      if (document) {\n        assert.strictEqual(_.isObject(body), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n      if (Symbol) {\n        assert.strictEqual(_.isObject(Object(symbol)), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-objects', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(true, 1, 'a', symbol),\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.isObject(value) : _.isObject();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with objects from another realm', function(assert) {\n      assert.expect(8);\n\n      if (realm.element) {\n        assert.strictEqual(_.isObject(realm.element), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n      if (realm.object) {\n        assert.strictEqual(_.isObject(realm.boolean), true);\n        assert.strictEqual(_.isObject(realm.date), true);\n        assert.strictEqual(_.isObject(realm.function), true);\n        assert.strictEqual(_.isObject(realm.number), true);\n        assert.strictEqual(_.isObject(realm.object), true);\n        assert.strictEqual(_.isObject(realm.regexp), true);\n        assert.strictEqual(_.isObject(realm.string), true);\n      }\n      else {\n        skipAssert(assert, 7);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isObjectLike');\n\n  (function() {\n    QUnit.test('should return `true` for objects', function(assert) {\n      assert.expect(9);\n\n      assert.strictEqual(_.isObjectLike(args), true);\n      assert.strictEqual(_.isObjectLike([1, 2, 3]), true);\n      assert.strictEqual(_.isObjectLike(Object(false)), true);\n      assert.strictEqual(_.isObjectLike(new Date), true);\n      assert.strictEqual(_.isObjectLike(new Error), true);\n      assert.strictEqual(_.isObjectLike({ 'a': 1 }), true);\n      assert.strictEqual(_.isObjectLike(Object(0)), true);\n      assert.strictEqual(_.isObjectLike(/x/), true);\n      assert.strictEqual(_.isObjectLike(Object('a')), true);\n    });\n\n    QUnit.test('should return `false` for non-objects', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(true, _, slice, 1, 'a', symbol),\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.isObjectLike(value) : _.isObjectLike();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with objects from another realm', function(assert) {\n      assert.expect(6);\n\n      if (realm.object) {\n        assert.strictEqual(_.isObjectLike(realm.boolean), true);\n        assert.strictEqual(_.isObjectLike(realm.date), true);\n        assert.strictEqual(_.isObjectLike(realm.number), true);\n        assert.strictEqual(_.isObjectLike(realm.object), true);\n        assert.strictEqual(_.isObjectLike(realm.regexp), true);\n        assert.strictEqual(_.isObjectLike(realm.string), true);\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isPlainObject');\n\n  (function() {\n    var element = document && document.createElement('div');\n\n    QUnit.test('should detect plain objects', function(assert) {\n      assert.expect(5);\n\n      function Foo(a) {\n        this.a = 1;\n      }\n\n      assert.strictEqual(_.isPlainObject({}), true);\n      assert.strictEqual(_.isPlainObject({ 'a': 1 }), true);\n      assert.strictEqual(_.isPlainObject({ 'constructor': Foo }), true);\n      assert.strictEqual(_.isPlainObject([1, 2, 3]), false);\n      assert.strictEqual(_.isPlainObject(new Foo(1)), false);\n    });\n\n    QUnit.test('should return `true` for objects with a `[[Prototype]]` of `null`', function(assert) {\n      assert.expect(2);\n\n      var object = create(null);\n      assert.strictEqual(_.isPlainObject(object), true);\n\n      object.constructor = objectProto.constructor;\n      assert.strictEqual(_.isPlainObject(object), true);\n    });\n\n    QUnit.test('should return `true` for objects with a `valueOf` property', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isPlainObject({ 'valueOf': 0 }), true);\n    });\n\n    QUnit.test('should return `true` for objects with a writable `Symbol.toStringTag` property', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && Symbol.toStringTag) {\n        var object = {};\n        object[Symbol.toStringTag] = 'X';\n\n        assert.deepEqual(_.isPlainObject(object), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for objects with a custom `[[Prototype]]`', function(assert) {\n      assert.expect(1);\n\n      var object = create({ 'a': 1 });\n      assert.strictEqual(_.isPlainObject(object), false);\n    });\n\n    QUnit.test('should return `false` for DOM elements', function(assert) {\n      assert.expect(1);\n\n      if (element) {\n        assert.strictEqual(_.isPlainObject(element), false);\n      } else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-Object objects', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isPlainObject(arguments), false);\n      assert.strictEqual(_.isPlainObject(Error), false);\n      assert.strictEqual(_.isPlainObject(Math), false);\n    });\n\n    QUnit.test('should return `false` for non-objects', function(assert) {\n      assert.expect(4);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isPlainObject(value) : _.isPlainObject();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isPlainObject(true), false);\n      assert.strictEqual(_.isPlainObject('a'), false);\n      assert.strictEqual(_.isPlainObject(symbol), false);\n    });\n\n    QUnit.test('should return `false` for objects with a read-only `Symbol.toStringTag` property', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && Symbol.toStringTag) {\n        var object = {};\n        defineProperty(object, Symbol.toStringTag, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': false,\n          'value': 'X'\n        });\n\n        assert.deepEqual(_.isPlainObject(object), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should not mutate `value`', function(assert) {\n      assert.expect(2);\n\n      if (Symbol && Symbol.toStringTag) {\n        var proto = {};\n        proto[Symbol.toStringTag] = undefined;\n        var object = create(proto);\n\n        assert.strictEqual(_.isPlainObject(object), false);\n        assert.notOk(lodashStable.has(object, Symbol.toStringTag));\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work with objects from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        assert.strictEqual(_.isPlainObject(realm.object), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isRegExp');\n\n  (function() {\n    QUnit.test('should return `true` for regexes', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isRegExp(/x/), true);\n      assert.strictEqual(_.isRegExp(RegExp('x')), true);\n    });\n\n    QUnit.test('should return `false` for non-regexes', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isRegExp(value) : _.isRegExp();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isRegExp(args), false);\n      assert.strictEqual(_.isRegExp([1, 2, 3]), false);\n      assert.strictEqual(_.isRegExp(true), false);\n      assert.strictEqual(_.isRegExp(new Date), false);\n      assert.strictEqual(_.isRegExp(new Error), false);\n      assert.strictEqual(_.isRegExp(_), false);\n      assert.strictEqual(_.isRegExp(slice), false);\n      assert.strictEqual(_.isRegExp({ 'a': 1 }), false);\n      assert.strictEqual(_.isRegExp(1), false);\n      assert.strictEqual(_.isRegExp('a'), false);\n      assert.strictEqual(_.isRegExp(symbol), false);\n    });\n\n    QUnit.test('should work with regexes from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.regexp) {\n        assert.strictEqual(_.isRegExp(realm.regexp), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isSet');\n\n  (function() {\n    QUnit.test('should return `true` for sets', function(assert) {\n      assert.expect(1);\n\n      if (Set) {\n        assert.strictEqual(_.isSet(set), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-sets', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isSet(value) : _.isSet();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isSet(args), false);\n      assert.strictEqual(_.isSet([1, 2, 3]), false);\n      assert.strictEqual(_.isSet(true), false);\n      assert.strictEqual(_.isSet(new Date), false);\n      assert.strictEqual(_.isSet(new Error), false);\n      assert.strictEqual(_.isSet(_), false);\n      assert.strictEqual(_.isSet(slice), false);\n      assert.strictEqual(_.isSet({ 'a': 1 }), false);\n      assert.strictEqual(_.isSet(1), false);\n      assert.strictEqual(_.isSet(/x/), false);\n      assert.strictEqual(_.isSet('a'), false);\n      assert.strictEqual(_.isSet(symbol), false);\n      assert.strictEqual(_.isSet(weakSet), false);\n    });\n\n    QUnit.test('should work for objects with a non-function `constructor` (test in IE 11)', function(assert) {\n      assert.expect(1);\n\n      var values = [false, true],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.isSet({ 'constructor': value });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with weak sets from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.set) {\n        assert.strictEqual(_.isSet(realm.set), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isString');\n\n  (function() {\n    QUnit.test('should return `true` for strings', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isString('a'), true);\n      assert.strictEqual(_.isString(Object('a')), true);\n    });\n\n    QUnit.test('should return `false` for non-strings', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === '';\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isString(value) : _.isString();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isString(args), false);\n      assert.strictEqual(_.isString([1, 2, 3]), false);\n      assert.strictEqual(_.isString(true), false);\n      assert.strictEqual(_.isString(new Date), false);\n      assert.strictEqual(_.isString(new Error), false);\n      assert.strictEqual(_.isString(_), false);\n      assert.strictEqual(_.isString(slice), false);\n      assert.strictEqual(_.isString({ '0': 1, 'length': 1 }), false);\n      assert.strictEqual(_.isString(1), false);\n      assert.strictEqual(_.isString(/x/), false);\n      assert.strictEqual(_.isString(symbol), false);\n    });\n\n    QUnit.test('should work with strings from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.string) {\n        assert.strictEqual(_.isString(realm.string), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isSymbol');\n\n  (function() {\n    QUnit.test('should return `true` for symbols', function(assert) {\n      assert.expect(2);\n\n      if (Symbol) {\n        assert.strictEqual(_.isSymbol(symbol), true);\n        assert.strictEqual(_.isSymbol(Object(symbol)), true);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should return `false` for non-symbols', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isSymbol(value) : _.isSymbol();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isSymbol(args), false);\n      assert.strictEqual(_.isSymbol([1, 2, 3]), false);\n      assert.strictEqual(_.isSymbol(true), false);\n      assert.strictEqual(_.isSymbol(new Date), false);\n      assert.strictEqual(_.isSymbol(new Error), false);\n      assert.strictEqual(_.isSymbol(_), false);\n      assert.strictEqual(_.isSymbol(slice), false);\n      assert.strictEqual(_.isSymbol({ '0': 1, 'length': 1 }), false);\n      assert.strictEqual(_.isSymbol(1), false);\n      assert.strictEqual(_.isSymbol(/x/), false);\n      assert.strictEqual(_.isSymbol('a'), false);\n    });\n\n    QUnit.test('should work with symbols from another realm', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && realm.symbol) {\n        assert.strictEqual(_.isSymbol(realm.symbol), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isTypedArray');\n\n  (function() {\n    QUnit.test('should return `true` for typed arrays', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(typedArrays, function(type) {\n        return type in root;\n      });\n\n      var actual = lodashStable.map(typedArrays, function(type) {\n        var Ctor = root[type];\n        return Ctor ? _.isTypedArray(new Ctor(new ArrayBuffer(8))) : false;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non typed arrays', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isTypedArray(value) : _.isTypedArray();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isTypedArray(args), false);\n      assert.strictEqual(_.isTypedArray([1, 2, 3]), false);\n      assert.strictEqual(_.isTypedArray(true), false);\n      assert.strictEqual(_.isTypedArray(new Date), false);\n      assert.strictEqual(_.isTypedArray(new Error), false);\n      assert.strictEqual(_.isTypedArray(_), false);\n      assert.strictEqual(_.isTypedArray(slice), false);\n      assert.strictEqual(_.isTypedArray({ 'a': 1 }), false);\n      assert.strictEqual(_.isTypedArray(1), false);\n      assert.strictEqual(_.isTypedArray(/x/), false);\n      assert.strictEqual(_.isTypedArray('a'), false);\n      assert.strictEqual(_.isTypedArray(symbol), false);\n    });\n\n    QUnit.test('should work with typed arrays from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        var props = lodashStable.invokeMap(typedArrays, 'toLowerCase');\n\n        var expected = lodashStable.map(props, function(key) {\n          return realm[key] !== undefined;\n        });\n\n        var actual = lodashStable.map(props, function(key) {\n          var value = realm[key];\n          return value ? _.isTypedArray(value) : false;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isUndefined');\n\n  (function() {\n    QUnit.test('should return `true` for `undefined` values', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isUndefined(), true);\n      assert.strictEqual(_.isUndefined(undefined), true);\n    });\n\n    QUnit.test('should return `false` for non `undefined` values', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isUndefined(value) : _.isUndefined();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isUndefined(args), false);\n      assert.strictEqual(_.isUndefined([1, 2, 3]), false);\n      assert.strictEqual(_.isUndefined(true), false);\n      assert.strictEqual(_.isUndefined(new Date), false);\n      assert.strictEqual(_.isUndefined(new Error), false);\n      assert.strictEqual(_.isUndefined(_), false);\n      assert.strictEqual(_.isUndefined(slice), false);\n      assert.strictEqual(_.isUndefined({ 'a': 1 }), false);\n      assert.strictEqual(_.isUndefined(1), false);\n      assert.strictEqual(_.isUndefined(/x/), false);\n      assert.strictEqual(_.isUndefined('a'), false);\n\n      if (Symbol) {\n        assert.strictEqual(_.isUndefined(symbol), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with `undefined` from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        assert.strictEqual(_.isUndefined(realm.undefined), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isWeakMap');\n\n  (function() {\n    QUnit.test('should return `true` for weak maps', function(assert) {\n      assert.expect(1);\n\n      if (WeakMap) {\n        assert.strictEqual(_.isWeakMap(weakMap), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non weak maps', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isWeakMap(value) : _.isWeakMap();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isWeakMap(args), false);\n      assert.strictEqual(_.isWeakMap([1, 2, 3]), false);\n      assert.strictEqual(_.isWeakMap(true), false);\n      assert.strictEqual(_.isWeakMap(new Date), false);\n      assert.strictEqual(_.isWeakMap(new Error), false);\n      assert.strictEqual(_.isWeakMap(_), false);\n      assert.strictEqual(_.isWeakMap(slice), false);\n      assert.strictEqual(_.isWeakMap({ 'a': 1 }), false);\n      assert.strictEqual(_.isWeakMap(map), false);\n      assert.strictEqual(_.isWeakMap(1), false);\n      assert.strictEqual(_.isWeakMap(/x/), false);\n      assert.strictEqual(_.isWeakMap('a'), false);\n      assert.strictEqual(_.isWeakMap(symbol), false);\n    });\n\n    QUnit.test('should work for objects with a non-function `constructor` (test in IE 11)', function(assert) {\n      assert.expect(1);\n\n      var values = [false, true],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.isWeakMap({ 'constructor': value });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with weak maps from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.weakMap) {\n        assert.strictEqual(_.isWeakMap(realm.weakMap), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isWeakSet');\n\n  (function() {\n    QUnit.test('should return `true` for weak sets', function(assert) {\n      assert.expect(1);\n\n      if (WeakSet) {\n        assert.strictEqual(_.isWeakSet(weakSet), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non weak sets', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isWeakSet(value) : _.isWeakSet();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isWeakSet(args), false);\n      assert.strictEqual(_.isWeakSet([1, 2, 3]), false);\n      assert.strictEqual(_.isWeakSet(true), false);\n      assert.strictEqual(_.isWeakSet(new Date), false);\n      assert.strictEqual(_.isWeakSet(new Error), false);\n      assert.strictEqual(_.isWeakSet(_), false);\n      assert.strictEqual(_.isWeakSet(slice), false);\n      assert.strictEqual(_.isWeakSet({ 'a': 1 }), false);\n      assert.strictEqual(_.isWeakSet(1), false);\n      assert.strictEqual(_.isWeakSet(/x/), false);\n      assert.strictEqual(_.isWeakSet('a'), false);\n      assert.strictEqual(_.isWeakSet(set), false);\n      assert.strictEqual(_.isWeakSet(symbol), false);\n    });\n\n    QUnit.test('should work with weak sets from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.weakSet) {\n        assert.strictEqual(_.isWeakSet(realm.weakSet), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('isType checks');\n\n  (function() {\n    QUnit.test('should return `false` for subclassed values', function(assert) {\n      assert.expect(7);\n\n      var funcs = [\n        'isArray', 'isBoolean', 'isDate', 'isFunction',\n        'isNumber', 'isRegExp', 'isString'\n      ];\n\n      lodashStable.each(funcs, function(methodName) {\n        function Foo() {}\n        Foo.prototype = root[methodName.slice(2)].prototype;\n\n        var object = new Foo;\n        if (objToString.call(object) == objectTag) {\n          assert.strictEqual(_[methodName](object), false, '`_.' + methodName + '` returns `false`');\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    QUnit.test('should not error on host objects (test in IE)', function(assert) {\n      assert.expect(26);\n\n      var funcs = [\n        'isArguments', 'isArray', 'isArrayBuffer', 'isArrayLike', 'isBoolean',\n        'isBuffer', 'isDate', 'isElement', 'isError', 'isFinite', 'isFunction',\n        'isInteger', 'isMap', 'isNaN', 'isNil', 'isNull', 'isNumber', 'isObject',\n        'isObjectLike', 'isRegExp', 'isSet', 'isSafeInteger', 'isString',\n        'isUndefined', 'isWeakMap', 'isWeakSet'\n      ];\n\n      lodashStable.each(funcs, function(methodName) {\n        if (xml) {\n          _[methodName](xml);\n          assert.ok(true, '`_.' + methodName + '` should not error');\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.iteratee');\n\n  (function() {\n    QUnit.test('should provide arguments to `func`', function(assert) {\n      assert.expect(1);\n\n      var fn = function() { return slice.call(arguments); },\n          iteratee = _.iteratee(fn),\n          actual = iteratee('a', 'b', 'c', 'd', 'e', 'f');\n\n      assert.deepEqual(actual, ['a', 'b', 'c', 'd', 'e', 'f']);\n    });\n\n    QUnit.test('should return `_.identity` when `func` is nullish', function(assert) {\n      assert.expect(1);\n\n      var object = {},\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([!isNpm && _.identity, object]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var identity = index ? _.iteratee(value) : _.iteratee();\n        return [!isNpm && identity, identity(object)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an iteratee created by `_.matches` when `func` is an object', function(assert) {\n      assert.expect(2);\n\n      var matches = _.iteratee({ 'a': 1, 'b': 2 });\n      assert.strictEqual(matches({ 'a': 1, 'b': 2, 'c': 3 }), true);\n      assert.strictEqual(matches({ 'b': 2 }), false);\n    });\n\n    QUnit.test('should not change `_.matches` behavior if `source` is modified', function(assert) {\n      assert.expect(9);\n\n      var sources = [\n        { 'a': { 'b': 2, 'c': 3 } },\n        { 'a': 1, 'b': 2 },\n        { 'a': 1 }\n      ];\n\n      lodashStable.each(sources, function(source, index) {\n        var object = lodashStable.cloneDeep(source),\n            matches = _.iteratee(source);\n\n        assert.strictEqual(matches(object), true);\n\n        if (index) {\n          source.a = 2;\n          source.b = 1;\n          source.c = 3;\n        } else {\n          source.a.b = 1;\n          source.a.c = 2;\n          source.a.d = 3;\n        }\n        assert.strictEqual(matches(object), true);\n        assert.strictEqual(matches(source), false);\n      });\n    });\n\n    QUnit.test('should return an iteratee created by `_.matchesProperty` when `func` is an array', function(assert) {\n      assert.expect(3);\n\n      var array = ['a', undefined],\n          matches = _.iteratee([0, 'a']);\n\n      assert.strictEqual(matches(array), true);\n\n      matches = _.iteratee(['0', 'a']);\n      assert.strictEqual(matches(array), true);\n\n      matches = _.iteratee([1, undefined]);\n      assert.strictEqual(matches(array), true);\n    });\n\n    QUnit.test('should support deep paths for `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': { 'c': 1, 'd': 2 } } },\n          matches = _.iteratee(['a.b', { 'c': 1 }]);\n\n      assert.strictEqual(matches(object), true);\n    });\n\n    QUnit.test('should not change `_.matchesProperty` behavior if `source` is modified', function(assert) {\n      assert.expect(9);\n\n      var sources = [\n        { 'a': { 'b': 2, 'c': 3 } },\n        { 'a': 1, 'b': 2 },\n        { 'a': 1 }\n      ];\n\n      lodashStable.each(sources, function(source, index) {\n        var object = { 'a': lodashStable.cloneDeep(source) },\n            matches = _.iteratee(['a', source]);\n\n        assert.strictEqual(matches(object), true);\n\n        if (index) {\n          source.a = 2;\n          source.b = 1;\n          source.c = 3;\n        } else {\n          source.a.b = 1;\n          source.a.c = 2;\n          source.a.d = 3;\n        }\n        assert.strictEqual(matches(object), true);\n        assert.strictEqual(matches({ 'a': source }), false);\n      });\n    });\n\n    QUnit.test('should return an iteratee created by `_.property` when `func` is a number or string', function(assert) {\n      assert.expect(2);\n\n      var array = ['a'],\n          prop = _.iteratee(0);\n\n      assert.strictEqual(prop(array), 'a');\n\n      prop = _.iteratee('0');\n      assert.strictEqual(prop(array), 'a');\n    });\n\n    QUnit.test('should support deep paths for `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': 2 } },\n          prop = _.iteratee('a.b');\n\n      assert.strictEqual(prop(object), 2);\n    });\n\n    QUnit.test('should work with functions created by `_.partial` and `_.partialRight`', function(assert) {\n      assert.expect(2);\n\n      var fn = function() {\n        var result = [this.a];\n        push.apply(result, arguments);\n        return result;\n      };\n\n      var expected = [1, 2, 3],\n          object = { 'a': 1 , 'iteratee': _.iteratee(_.partial(fn, 2)) };\n\n      assert.deepEqual(object.iteratee(3), expected);\n\n      object.iteratee = _.iteratee(_.partialRight(fn, 3));\n      assert.deepEqual(object.iteratee(2), expected);\n    });\n\n    QUnit.test('should use internal `iteratee` if external is unavailable', function(assert) {\n      assert.expect(1);\n\n      var iteratee = _.iteratee;\n      delete _.iteratee;\n\n      assert.deepEqual(_.map([{ 'a': 1 }], 'a'), [1]);\n\n      _.iteratee = iteratee;\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var fn = function() { return this instanceof Number; },\n          array = [fn, fn, fn],\n          iteratees = lodashStable.map(array, _.iteratee),\n          expected = lodashStable.map(array, stubFalse);\n\n      var actual = lodashStable.map(iteratees, function(iteratee) {\n        return iteratee();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('custom `_.iteratee` methods');\n\n  (function() {\n    var array = ['one', 'two', 'three'],\n        getPropA = _.partial(_.property, 'a'),\n        getPropB = _.partial(_.property, 'b'),\n        getLength = _.partial(_.property, 'length'),\n        iteratee = _.iteratee;\n\n    var getSum = function() {\n      return function(result, object) {\n        return result + object.a;\n      };\n    };\n\n    var objects = [\n      { 'a': 0, 'b': 0 },\n      { 'a': 1, 'b': 0 },\n      { 'a': 1, 'b': 1 }\n    ];\n\n    QUnit.test('`_.countBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getLength;\n        assert.deepEqual(_.countBy(array), { '3': 2, '5': 1 });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.differenceBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.differenceBy(objects, [objects[1]]), [objects[0]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.dropRightWhile` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.dropRightWhile(objects), objects.slice(0, 2));\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.dropWhile` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.dropWhile(objects.reverse()).reverse(), objects.reverse().slice(0, 2));\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.every` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.every(objects.slice(1)), true);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.filter` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 0 }, { 'a': 1 }];\n\n        _.iteratee = getPropA;\n        assert.deepEqual(_.filter(objects), [objects[1]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.find` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.find(objects), objects[1]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findIndex` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.findIndex(objects), 1);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findLast` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.findLast(objects), objects[2]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findLastIndex` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.findLastIndex(objects), 2);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findKey` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.strictEqual(_.findKey(objects), '2');\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findLastKey` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.strictEqual(_.findLastKey(objects), '2');\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.groupBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getLength;\n        assert.deepEqual(_.groupBy(array), { '3': ['one', 'two'], '5': ['three'] });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.intersectionBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.intersectionBy(objects, [objects[2]]), [objects[1]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.keyBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getLength;\n        assert.deepEqual(_.keyBy(array), { '3': 'two', '5': 'three' });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.map` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.map(objects), [0, 1, 1]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.mapKeys` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.mapKeys({ 'a': { 'b': 2 } }), { '2':  { 'b': 2 } });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.mapValues` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.mapValues({ 'a': { 'b': 2 } }), { 'a': 2 });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.maxBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.maxBy(objects), objects[2]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.meanBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.meanBy(objects), 2 / 3);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.minBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.minBy(objects), objects[0]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.partition` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 1 }, { 'a': 1 }, { 'b': 2 }];\n\n        _.iteratee = getPropA;\n        assert.deepEqual(_.partition(objects), [objects.slice(0, 2), objects.slice(2)]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.pullAllBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.pullAllBy(objects.slice(), [{ 'a': 1, 'b': 0 }]), [objects[0]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.reduce` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getSum;\n        assert.strictEqual(_.reduce(objects, undefined, 0), 2);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.reduceRight` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getSum;\n        assert.strictEqual(_.reduceRight(objects, undefined, 0), 2);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.reject` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 0 }, { 'a': 1 }];\n\n        _.iteratee = getPropA;\n        assert.deepEqual(_.reject(objects), [objects[0]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.remove` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 0 }, { 'a': 1 }];\n\n        _.iteratee = getPropA;\n        _.remove(objects);\n        assert.deepEqual(objects, [{ 'a': 0 }]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.some` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.strictEqual(_.some(objects), true);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.sortBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.sortBy(objects.slice().reverse()), [objects[0], objects[2], objects[1]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.sortedIndexBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 30 }, { 'a': 50 }];\n\n        _.iteratee = getPropA;\n        assert.strictEqual(_.sortedIndexBy(objects, { 'a': 40 }), 1);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.sortedLastIndexBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 30 }, { 'a': 50 }];\n\n        _.iteratee = getPropA;\n        assert.strictEqual(_.sortedLastIndexBy(objects, { 'a': 40 }), 1);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.sumBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.strictEqual(_.sumBy(objects), 1);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.takeRightWhile` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.takeRightWhile(objects), objects.slice(2));\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.takeWhile` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.takeWhile(objects.reverse()), objects.reverse().slice(2));\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.transform` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = function() {\n          return function(result, object) {\n            result.sum += object.a;\n          };\n        };\n\n        assert.deepEqual(_.transform(objects, undefined, { 'sum': 0 }), { 'sum': 2 });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.uniqBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.uniqBy(objects), [objects[0], objects[2]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.unionBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.unionBy(objects.slice(0, 1), [objects[2]]), [objects[0], objects[2]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.xorBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.xorBy(objects, objects.slice(1)), [objects[0]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.join');\n\n  (function() {\n    var array = ['a', 'b', 'c'];\n\n    QUnit.test('should return join all array elements into a string', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.join(array, '~'), 'a~b~c');\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array);\n        assert.strictEqual(wrapped.join('~'), 'a~b~c');\n        assert.strictEqual(wrapped.value(), array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).chain().join('~') instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.keyBy');\n\n  (function() {\n    var array = [\n      { 'dir': 'left', 'code': 97 },\n      { 'dir': 'right', 'code': 100 }\n    ];\n\n    QUnit.test('should transform keys by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } };\n\n      var actual = _.keyBy(array, function(object) {\n        return String.fromCharCode(object.code);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [4, 6, 6],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '4': 4, '6': 6 }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.keyBy(array, value) : _.keyBy(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } },\n          actual = _.keyBy(array, 'dir');\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should only add values to own, not inherited, properties', function(assert) {\n      assert.expect(2);\n\n      var actual = _.keyBy([6.1, 4.2, 6.3], function(n) {\n        return Math.floor(n) > 4 ? 'hasOwnProperty' : 'constructor';\n      });\n\n      assert.deepEqual(actual.constructor, 4.2);\n      assert.deepEqual(actual.hasOwnProperty, 6.3);\n    });\n\n    QUnit.test('should work with a number for `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var array = [\n        [1, 'a'],\n        [2, 'a'],\n        [2, 'b']\n      ];\n\n      assert.deepEqual(_.keyBy(array, 0), { '1': [1, 'a'], '2': [2, 'b'] });\n      assert.deepEqual(_.keyBy(array, 1), { 'a': [2, 'a'], 'b': [2, 'b'] });\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.keyBy({ 'a': 6.1, 'b': 4.2, 'c': 6.3 }, Math.floor);\n      assert.deepEqual(actual, { '4': 4.2, '6': 6.3 });\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE).concat(\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 2), LARGE_ARRAY_SIZE),\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 1.5), LARGE_ARRAY_SIZE)\n        );\n\n        var actual = _(array).keyBy().map(square).filter(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(_.map(_.keyBy(array), square), isEven)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('keys methods');\n\n  lodashStable.each(['keys', 'keysIn'], function(methodName) {\n    var func = _[methodName],\n        isKeys = methodName == 'keys';\n\n    QUnit.test('`_.' + methodName + '` should return the string keyed property names of `object`', function(assert) {\n      assert.expect(1);\n\n      var actual = func({ 'a': 1, 'b': 1 }).sort();\n\n      assert.deepEqual(actual, ['a', 'b']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isKeys ? 'not ' : '') + 'include inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var expected = isKeys ? ['a'] : ['a', 'b'],\n          actual = func(new Foo).sort();\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat sparse arrays as dense', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      array[2] = 3;\n\n      var actual = func(array).sort();\n\n      assert.deepEqual(actual, ['0', '1', '2']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return keys for custom properties on arrays', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      array.a = 1;\n\n      var actual = func(array).sort();\n\n      assert.deepEqual(actual, ['0', 'a']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isKeys ? 'not ' : '') + 'include inherited string keyed properties of arrays', function(assert) {\n      assert.expect(1);\n\n      arrayProto.a = 1;\n\n      var expected = isKeys ? ['0'] : ['0', 'a'],\n          actual = func([1]).sort();\n\n      assert.deepEqual(actual, expected);\n\n      delete arrayProto.a;\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var values = [args, strictArgs],\n          expected = lodashStable.map(values, lodashStable.constant(['0', '1', '2']));\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value).sort();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return keys for custom properties on `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var values = [args, strictArgs],\n          expected = lodashStable.map(values, lodashStable.constant(['0', '1', '2', 'a']));\n\n      var actual = lodashStable.map(values, function(value) {\n        value.a = 1;\n        var result = func(value).sort();\n        delete value.a;\n        return result;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isKeys ? 'not ' : '') + 'include inherited string keyed properties of `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var values = [args, strictArgs],\n          expected = lodashStable.map(values, lodashStable.constant(isKeys ? ['0', '1', '2'] : ['0', '1', '2', 'a']));\n\n      var actual = lodashStable.map(values, function(value) {\n        objectProto.a = 1;\n        var result = func(value).sort();\n        delete objectProto.a;\n        return result;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with string objects', function(assert) {\n      assert.expect(1);\n\n      var actual = func(Object('abc')).sort();\n\n      assert.deepEqual(actual, ['0', '1', '2']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return keys for custom properties on string objects', function(assert) {\n      assert.expect(1);\n\n      var object = Object('a');\n      object.a = 1;\n\n      var actual = func(object).sort();\n\n      assert.deepEqual(actual, ['0', 'a']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isKeys ? 'not ' : '') + 'include inherited string keyed properties of string objects', function(assert) {\n      assert.expect(1);\n\n      stringProto.a = 1;\n\n      var expected = isKeys ? ['0'] : ['0', 'a'],\n          actual = func(Object('a')).sort();\n\n      assert.deepEqual(actual, expected);\n\n      delete stringProto.a;\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with array-like objects', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'a', 'length': 1 },\n          actual = func(object).sort();\n\n      assert.deepEqual(actual, ['0', 'length']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce primitives to objects (test in IE 9)', function(assert) {\n      assert.expect(2);\n\n      var expected = lodashStable.map(primitives, function(value) {\n        return typeof value == 'string' ? ['0'] : [];\n      });\n\n      var actual = lodashStable.map(primitives, func);\n      assert.deepEqual(actual, expected);\n\n      // IE 9 doesn't box numbers in for-in loops.\n      numberProto.a = 1;\n      assert.deepEqual(func(0), isKeys ? [] : ['a']);\n      delete numberProto.a;\n    });\n\n    QUnit.test('`_.' + methodName + '` skips the `constructor` property on prototype objects', function(assert) {\n      assert.expect(3);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      var expected = ['a'];\n      assert.deepEqual(func(Foo.prototype), expected);\n\n      Foo.prototype = { 'constructor': Foo, 'a': 1 };\n      assert.deepEqual(func(Foo.prototype), expected);\n\n      var Fake = { 'prototype': {} };\n      Fake.prototype.constructor = Fake;\n      assert.deepEqual(func(Fake.prototype), ['constructor']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an empty array when `object` is nullish', function(assert) {\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        objectProto.a = 1;\n        var result = index ? func(value) : func();\n        delete objectProto.a;\n        return result;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.last');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    QUnit.test('should return the last element', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.last(array), 4);\n    });\n\n    QUnit.test('should return `undefined` when querying empty arrays', function(assert) {\n      assert.expect(1);\n\n      var array = [];\n      array['-1'] = 1;\n\n      assert.strictEqual(_.last([]), undefined);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.last);\n\n      assert.deepEqual(actual, [3, 6, 9]);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_(array).last(), 4);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).chain().last() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should not execute immediately when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(array).chain().last();\n        assert.strictEqual(wrapped.__wrapped__, array);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var largeArray = lodashStable.range(LARGE_ARRAY_SIZE),\n            smallArray = array;\n\n        lodashStable.times(2, function(index) {\n          var array = index ? largeArray : smallArray,\n              wrapped = _(array).filter(isEven);\n\n          assert.strictEqual(wrapped.last(), _.last(_.filter(array, isEven)));\n        });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.lowerCase');\n\n  (function() {\n    QUnit.test('should lowercase as space-separated words', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.lowerCase('--Foo-Bar--'), 'foo bar');\n      assert.strictEqual(_.lowerCase('fooBar'), 'foo bar');\n      assert.strictEqual(_.lowerCase('__FOO_BAR__'), 'foo bar');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.lowerFirst');\n\n  (function() {\n    QUnit.test('should lowercase only the first character', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.lowerFirst('fred'), 'fred');\n      assert.strictEqual(_.lowerFirst('Fred'), 'fred');\n      assert.strictEqual(_.lowerFirst('FRED'), 'fRED');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.lt');\n\n  (function() {\n    QUnit.test('should return `true` if `value` is less than `other`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.lt(1, 3), true);\n      assert.strictEqual(_.lt('abc', 'def'), true);\n    });\n\n    QUnit.test('should return `false` if `value` >= `other`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.lt(3, 1), false);\n      assert.strictEqual(_.lt(3, 3), false);\n      assert.strictEqual(_.lt('def', 'abc'), false);\n      assert.strictEqual(_.lt('def', 'def'), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.lte');\n\n  (function() {\n    QUnit.test('should return `true` if `value` is <= `other`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.lte(1, 3), true);\n      assert.strictEqual(_.lte(3, 3), true);\n      assert.strictEqual(_.lte('abc', 'def'), true);\n      assert.strictEqual(_.lte('def', 'def'), true);\n    });\n\n    QUnit.test('should return `false` if `value` > `other`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.lt(3, 1), false);\n      assert.strictEqual(_.lt('def', 'abc'), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.findLastIndex and lodash.lastIndexOf');\n\n  lodashStable.each(['findLastIndex', 'lastIndexOf'], function(methodName) {\n    var array = [1, 2, 3, 1, 2, 3],\n        func = _[methodName],\n        resolve = methodName == 'findLastIndex' ? lodashStable.curry(lodashStable.eq) : identity;\n\n    QUnit.test('`_.' + methodName + '` should return the index of the last matched value', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(3)), 5);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a positive `fromIndex`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(1), 2), 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `fromIndex` >= `length`', function(assert) {\n      assert.expect(1);\n\n      var values = [6, 8, Math.pow(2, 32), Infinity],\n          expected = lodashStable.map(values, lodashStable.constant([-1, 3, -1]));\n\n      var actual = lodashStable.map(values, function(fromIndex) {\n        return [\n          func(array, resolve(undefined), fromIndex),\n          func(array, resolve(1), fromIndex),\n          func(array, resolve(''), fromIndex)\n        ];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `fromIndex`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(2), -3), 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `fromIndex` <= `-length`', function(assert) {\n      assert.expect(1);\n\n      var values = [-6, -8, -Infinity],\n          expected = lodashStable.map(values, stubZero);\n\n      var actual = lodashStable.map(values, function(fromIndex) {\n        return func(array, resolve(1), fromIndex);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat falsey `fromIndex` values correctly', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? 5 : -1;\n      });\n\n      var actual = lodashStable.map(falsey, function(fromIndex) {\n        return func(array, resolve(3), fromIndex);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `fromIndex` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(2), 4.2), 4);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('indexOf methods');\n\n  lodashStable.each(['indexOf', 'lastIndexOf', 'sortedIndexOf', 'sortedLastIndexOf'], function(methodName) {\n    var func = _[methodName],\n        isIndexOf = !/last/i.test(methodName),\n        isSorted = /^sorted/.test(methodName);\n\n    QUnit.test('`_.' + methodName + '` should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, lodashStable.constant(-1));\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? func(array) : func();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `-1` for an unmatched value', function(assert) {\n      assert.expect(5);\n\n      var array = [1, 2, 3],\n          empty = [];\n\n      assert.strictEqual(func(array, 4), -1);\n      assert.strictEqual(func(array, 4, true), -1);\n      assert.strictEqual(func(array, undefined, true), -1);\n\n      assert.strictEqual(func(empty, undefined), -1);\n      assert.strictEqual(func(empty, undefined, true), -1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not match values on empty arrays', function(assert) {\n      assert.expect(2);\n\n      var array = [];\n      array[-1] = 0;\n\n      assert.strictEqual(func(array, undefined), -1);\n      assert.strictEqual(func(array, 0, true), -1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(3);\n\n      var array = isSorted\n        ? [1, 2, NaN, NaN]\n        : [1, NaN, 3, NaN, 5, NaN];\n\n      if (isSorted) {\n        assert.strictEqual(func(array, NaN, true), isIndexOf ? 2 : 3);\n        skipAssert(assert, 2);\n      }\n      else {\n        assert.strictEqual(func(array, NaN), isIndexOf ? 1 : 5);\n        assert.strictEqual(func(array, NaN, 2), isIndexOf ? 3 : 1);\n        assert.strictEqual(func(array, NaN, -2), isIndexOf ? 5 : 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(func([-0], 0), 0);\n      assert.strictEqual(func([0], -0), 0);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.map');\n\n  (function() {\n    var array = [1, 2];\n\n    QUnit.test('should map values in `collection` to a new array', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1, 'b': 2 },\n          expected = ['1', '2'];\n\n      assert.deepEqual(_.map(array, String), expected);\n      assert.deepEqual(_.map(object, String), expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 'x' }, { 'a': 'y' }];\n      assert.deepEqual(_.map(objects, 'a'), ['x', 'y']);\n    });\n\n    QUnit.test('should iterate over own string keyed properties of objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var actual = _.map(new Foo, identity);\n      assert.deepEqual(actual, [1]);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1, 'b': 2 },\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2]));\n\n      lodashStable.each([array, object], function(collection) {\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? _.map(collection, value) : _.map(collection);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should accept a falsey `collection`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(collection, index) {\n        try {\n          return index ? _.map(collection) : _.map();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.map(1), []);\n    });\n\n    QUnit.test('should treat a nodelist as an array-like object', function(assert) {\n      assert.expect(1);\n\n      if (document) {\n        var actual = _.map(document.getElementsByTagName('body'), function(element) {\n          return element.nodeName.toLowerCase();\n        });\n\n        assert.deepEqual(actual, ['body']);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with objects with non-number length properties', function(assert) {\n      assert.expect(1);\n\n      var value = { 'value': 'x' },\n          object = { 'length': { 'value': 'x' } };\n\n      assert.deepEqual(_.map(object, identity), [value]);\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).map(noop) instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should provide correct `predicate` arguments in a lazy sequence', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var args,\n            array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            expected = [1, 0, _.map(array.slice(1), square)];\n\n        _(array).slice(1).map(function(value, index, array) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, [1, 0, array.slice(1)]);\n\n        args = undefined;\n        _(array).slice(1).map(square).map(function(value, index, array) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        args = undefined;\n        _(array).slice(1).map(square).map(function(value, index) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        args = undefined;\n        _(array).slice(1).map(square).map(function(value) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, [1]);\n\n        args = undefined;\n        _(array).slice(1).map(square).map(function() {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mapKeys');\n\n  (function() {\n    var array = [1, 2],\n        object = { 'a': 1, 'b': 2 };\n\n    QUnit.test('should map keys in `object` to a new object', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapKeys(object, String);\n      assert.deepEqual(actual, { '1': 1, '2': 2 });\n    });\n\n    QUnit.test('should treat arrays like objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapKeys(array, String);\n      assert.deepEqual(actual, { '1': 1, '2': 2 });\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapKeys({ 'a': { 'b': 'c' } }, 'b');\n      assert.deepEqual(actual, { 'c': { 'b': 'c' } });\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2 },\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '1': 1, '2': 2 }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.mapKeys(object, value) : _.mapKeys(object);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mapValues');\n\n  (function() {\n    var array = [1, 2],\n        object = { 'a': 1, 'b': 2 };\n\n    QUnit.test('should map values in `object` to a new object', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapValues(object, String);\n      assert.deepEqual(actual, { 'a': '1', 'b': '2' });\n    });\n\n    QUnit.test('should treat arrays like objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapValues(array, String);\n      assert.deepEqual(actual, { '0': '1', '1': '2' });\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapValues({ 'a': { 'b': 2 } }, 'b');\n      assert.deepEqual(actual, { 'a': 2 });\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2 },\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([true, false]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var result = index ? _.mapValues(object, value) : _.mapValues(object);\n        return [lodashStable.isEqual(result, object), result === object];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mapKeys and lodash.mapValues');\n\n  lodashStable.each(['mapKeys', 'mapValues'], function(methodName) {\n    var func = _[methodName],\n        object = { 'a': 1, 'b': 2 };\n\n    QUnit.test('`_.' + methodName + '` should iterate over own string keyed properties of objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 'a';\n      }\n      Foo.prototype.b = 'b';\n\n      var actual = func(new Foo, function(value, key) { return key; });\n      assert.deepEqual(actual, { 'a': 'a' });\n    });\n\n    QUnit.test('`_.' + methodName + '` should accept a falsey `object`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubObject);\n\n      var actual = lodashStable.map(falsey, function(object, index) {\n        try {\n          return index ? func(object) : func();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(object)[methodName](noop) instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  QUnit.module('lodash.matches');\n\n  (function() {\n    QUnit.test('should not change behavior if `source` is modified', function(assert) {\n      assert.expect(9);\n\n      var sources = [\n        { 'a': { 'b': 2, 'c': 3 } },\n        { 'a': 1, 'b': 2 },\n        { 'a': 1 }\n      ];\n\n      lodashStable.each(sources, function(source, index) {\n        var object = lodashStable.cloneDeep(source),\n            par = _.matches(source);\n\n        assert.strictEqual(par(object), true);\n\n        if (index) {\n          source.a = 2;\n          source.b = 1;\n          source.c = 3;\n        } else {\n          source.a.b = 1;\n          source.a.c = 2;\n          source.a.d = 3;\n        }\n        assert.strictEqual(par(object), true);\n        assert.strictEqual(par(source), false);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('matches methods');\n\n  lodashStable.each(['matches', 'isMatch'], function(methodName) {\n    var isMatches = methodName == 'matches';\n\n    function matches(source) {\n      return isMatches ? _.matches(source) : function(object) {\n        return _.isMatch(object, source);\n      };\n    }\n\n    QUnit.test('`_.' + methodName + '` should perform a deep comparison between `source` and `object`', function(assert) {\n      assert.expect(5);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          par = matches({ 'a': 1 });\n\n      assert.strictEqual(par(object), true);\n\n      par = matches({ 'b': 1 });\n      assert.strictEqual(par(object), false);\n\n      par = matches({ 'a': 1, 'c': 3 });\n      assert.strictEqual(par(object), true);\n\n      par = matches({ 'c': 3, 'd': 4 });\n      assert.strictEqual(par(object), false);\n\n      object = { 'a': { 'b': { 'c': 1, 'd': 2 }, 'e': 3 }, 'f': 4 };\n      par = matches({ 'a': { 'b': { 'c': 1 } } });\n\n      assert.strictEqual(par(object), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match inherited string keyed `object` properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var object = { 'a': new Foo },\n          par = matches({ 'a': { 'b': 2 } });\n\n      assert.strictEqual(par(object), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not match by inherited `source` properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var objects = [{ 'a': 1 }, { 'a': 1, 'b': 2 }],\n          source = new Foo,\n          actual = lodashStable.map(objects, matches(source)),\n          expected = lodashStable.map(objects, stubTrue);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should compare a variety of `source` property values', function(assert) {\n      assert.expect(2);\n\n      var object1 = { 'a': false, 'b': true, 'c': '3', 'd': 4, 'e': [5], 'f': { 'g': 6 } },\n          object2 = { 'a': 0, 'b': 1, 'c': 3, 'd': '4', 'e': ['5'], 'f': { 'g': '6' } },\n          par = matches(object1);\n\n      assert.strictEqual(par(object1), true);\n      assert.strictEqual(par(object2), false);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      var object1 = { 'a': -0 },\n          object2 = { 'a': 0 },\n          par = matches(object1);\n\n      assert.strictEqual(par(object2), true);\n\n      par = matches(object2);\n      assert.strictEqual(par(object1), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should compare functions by reference', function(assert) {\n      assert.expect(3);\n\n      var object1 = { 'a': lodashStable.noop },\n          object2 = { 'a': noop },\n          object3 = { 'a': {} },\n          par = matches(object1);\n\n      assert.strictEqual(par(object1), true);\n      assert.strictEqual(par(object2), false);\n      assert.strictEqual(par(object3), false);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a function for `object`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.a = { 'b': 2, 'c': 3 };\n\n      var par = matches({ 'a': { 'b': 2 } });\n      assert.strictEqual(par(Foo), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a function for `source`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.a = 1;\n      Foo.b = function() {};\n      Foo.c = 3;\n\n      var objects = [{ 'a': 1 }, { 'a': 1, 'b': Foo.b, 'c': 3 }],\n          actual = lodashStable.map(objects, matches(Foo));\n\n      assert.deepEqual(actual, [false, true]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a non-plain `object`', function(assert) {\n      assert.expect(1);\n\n      function Foo(object) { lodashStable.assign(this, object); }\n\n      var object = new Foo({ 'a': new Foo({ 'b': 2, 'c': 3 }) }),\n          par = matches({ 'a': { 'b': 2 } });\n\n      assert.strictEqual(par(object), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should partial match arrays', function(assert) {\n      assert.expect(3);\n\n      var objects = [{ 'a': ['b'] }, { 'a': ['c', 'd'] }],\n          actual = lodashStable.filter(objects, matches({ 'a': ['d'] }));\n\n      assert.deepEqual(actual, [objects[1]]);\n\n      actual = lodashStable.filter(objects, matches({ 'a': ['b', 'd'] }));\n      assert.deepEqual(actual, []);\n\n      actual = lodashStable.filter(objects, matches({ 'a': ['d', 'b'] }));\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should partial match arrays with duplicate values', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1, 2] }, { 'a': [2, 2] }],\n          actual = lodashStable.filter(objects, matches({ 'a': [2, 2] }));\n\n      assert.deepEqual(actual, [objects[1]]);\n    });\n\n    QUnit.test('should partial match arrays of objects', function(assert) {\n      assert.expect(1);\n\n      var objects = [\n        { 'a': [{ 'b': 1, 'c': 2 }, { 'b': 4, 'c': 5, 'd': 6 }] },\n        { 'a': [{ 'b': 1, 'c': 2 }, { 'b': 4, 'c': 6, 'd': 7 }] }\n      ];\n\n      var actual = lodashStable.filter(objects, matches({ 'a': [{ 'b': 1 }, { 'b': 4, 'c': 5 }] }));\n      assert.deepEqual(actual, [objects[0]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should partial match maps', function(assert) {\n      assert.expect(3);\n\n      if (Map) {\n        var objects = [{ 'a': new Map }, { 'a': new Map }];\n        objects[0].a.set('a', 1);\n        objects[1].a.set('a', 1);\n        objects[1].a.set('b', 2);\n\n        var map = new Map;\n        map.set('b', 2);\n        var actual = lodashStable.filter(objects, matches({ 'a': map }));\n\n        assert.deepEqual(actual, [objects[1]]);\n\n        map.delete('b');\n        actual = lodashStable.filter(objects, matches({ 'a': map }));\n\n        assert.deepEqual(actual, objects);\n\n        map.set('c', 3);\n        actual = lodashStable.filter(objects, matches({ 'a': map }));\n\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should partial match sets', function(assert) {\n      assert.expect(3);\n\n      if (Set) {\n        var objects = [{ 'a': new Set }, { 'a': new Set }];\n        objects[0].a.add(1);\n        objects[1].a.add(1);\n        objects[1].a.add(2);\n\n        var set = new Set;\n        set.add(2);\n        var actual = lodashStable.filter(objects, matches({ 'a': set }));\n\n        assert.deepEqual(actual, [objects[1]]);\n\n        set.delete(2);\n        actual = lodashStable.filter(objects, matches({ 'a': set }));\n\n        assert.deepEqual(actual, objects);\n\n        set.add(3);\n        actual = lodashStable.filter(objects, matches({ 'a': set }));\n\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `undefined` values', function(assert) {\n      assert.expect(3);\n\n      var objects = [{ 'a': 1 }, { 'a': 1, 'b': 1 }, { 'a': 1, 'b': undefined }],\n          actual = lodashStable.map(objects, matches({ 'b': undefined })),\n          expected = [false, false, true];\n\n      assert.deepEqual(actual, expected);\n\n      actual = lodashStable.map(objects, matches({ 'a': 1, 'b': undefined }));\n\n      assert.deepEqual(actual, expected);\n\n      objects = [{ 'a': { 'b': 2 } }, { 'a': { 'b': 2, 'c': 3 } }, { 'a': { 'b': 2, 'c': undefined } }];\n      actual = lodashStable.map(objects, matches({ 'a': { 'c': undefined } }));\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `undefined` values on primitives', function(assert) {\n      assert.expect(3);\n\n      numberProto.a = 1;\n      numberProto.b = undefined;\n\n      try {\n        var par = matches({ 'b': undefined });\n        assert.strictEqual(par(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      try {\n        par = matches({ 'a': 1, 'b': undefined });\n        assert.strictEqual(par(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      numberProto.a = { 'b': 1, 'c': undefined };\n      try {\n        par = matches({ 'a': { 'c': undefined } });\n        assert.strictEqual(par(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      delete numberProto.a;\n      delete numberProto.b;\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` when `object` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse),\n          par = matches({ 'a': 1 });\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? par(value) : par();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing an empty `source`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1 },\n          expected = lodashStable.map(empties, stubTrue);\n\n      var actual = lodashStable.map(empties, function(value) {\n        var par = matches(value);\n        return par(object);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing an empty `source` to a nullish `object`', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubTrue),\n          par = matches({});\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? par(value) : par();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing a `source` of empty arrays and objects', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1], 'b': { 'c': 1 } }, { 'a': [2, 3], 'b': { 'd': 2 } }],\n          actual = lodashStable.filter(objects, matches({ 'a': [], 'b': {} }));\n\n      assert.deepEqual(actual, objects);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.matchesProperty');\n\n  (function() {\n    QUnit.test('should create a function that performs a deep comparison between a property value and `srcValue`', function(assert) {\n      assert.expect(6);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          matches = _.matchesProperty('a', 1);\n\n      assert.strictEqual(matches.length, 1);\n      assert.strictEqual(matches(object), true);\n\n      matches = _.matchesProperty('b', 3);\n      assert.strictEqual(matches(object), false);\n\n      matches = _.matchesProperty('a', { 'a': 1, 'c': 3 });\n      assert.strictEqual(matches({ 'a': object }), true);\n\n      matches = _.matchesProperty('a', { 'c': 3, 'd': 4 });\n      assert.strictEqual(matches(object), false);\n\n      object = { 'a': { 'b': { 'c': 1, 'd': 2 }, 'e': 3 }, 'f': 4 };\n      matches = _.matchesProperty('a', { 'b': { 'c': 1 } });\n\n      assert.strictEqual(matches(object), true);\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var matches = _.matchesProperty(path, 2);\n        assert.strictEqual(matches(object), true);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3];\n\n      lodashStable.each([1, [1]], function(path) {\n        var matches = _.matchesProperty(path, 2);\n        assert.strictEqual(matches(array), true);\n      });\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object1 = { '-0': 'a' },\n          object2 = { '0': 'b' },\n          pairs = [[object1, object2], [object1, object2], [object2, object1], [object2, object1]],\n          props = [-0, Object(-0), 0, Object(0)],\n          values = ['a', 'a', 'b', 'b'],\n          expected = lodashStable.map(props, lodashStable.constant([true, false]));\n\n      var actual = lodashStable.map(props, function(key, index) {\n        var matches = _.matchesProperty(key, values[index]),\n            pair = pairs[index];\n\n        return [matches(pair[0]), matches(pair[1])];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var object = { 'null': 1, 'undefined': 2, 'fn': 3, '[object Object]': 4 },\n          paths = [null, undefined, fn, {}],\n          expected = lodashStable.map(paths, stubTrue);\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var matches = _.matchesProperty(index ? [path] : path, object[path]);\n          return matches(object);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should match a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var matches = _.matchesProperty(path, 1);\n        assert.strictEqual(matches(object), true);\n      });\n    });\n\n    QUnit.test('should return `false` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var matches = _.matchesProperty(path, 1);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          try {\n            return index ? matches(value) : matches();\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `false` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var matches = _.matchesProperty(path, 1);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          try {\n            return index ? matches(value) : matches();\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `false` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var object = {};\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        var matches = _.matchesProperty(path, 1);\n        assert.strictEqual(matches(object), false);\n      });\n    });\n\n    QUnit.test('should match inherited string keyed `srcValue` properties', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.b = 2;\n\n      var object = { 'a': new Foo };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var matches = _.matchesProperty(path, { 'b': 2 });\n        assert.strictEqual(matches(object), true);\n      });\n    });\n\n    QUnit.test('should not match by inherited `srcValue` properties', function(assert) {\n      assert.expect(2);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var objects = [{ 'a': { 'a': 1 } }, { 'a': { 'a': 1, 'b': 2 } }],\n          expected = lodashStable.map(objects, stubTrue);\n\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.deepEqual(lodashStable.map(objects, _.matchesProperty(path, new Foo)), expected);\n      });\n    });\n\n    QUnit.test('should compare a variety of values', function(assert) {\n      assert.expect(2);\n\n      var object1 = { 'a': false, 'b': true, 'c': '3', 'd': 4, 'e': [5], 'f': { 'g': 6 } },\n          object2 = { 'a': 0, 'b': 1, 'c': 3, 'd': '4', 'e': ['5'], 'f': { 'g': '6' } },\n          matches = _.matchesProperty('a', object1);\n\n      assert.strictEqual(matches({ 'a': object1 }), true);\n      assert.strictEqual(matches({ 'a': object2 }), false);\n    });\n\n    QUnit.test('should match `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      var matches = _.matchesProperty('a', -0);\n      assert.strictEqual(matches({ 'a': 0 }), true);\n\n      matches = _.matchesProperty('a', 0);\n      assert.strictEqual(matches({ 'a': -0 }), true);\n    });\n\n    QUnit.test('should compare functions by reference', function(assert) {\n      assert.expect(3);\n\n      var object1 = { 'a': lodashStable.noop },\n          object2 = { 'a': noop },\n          object3 = { 'a': {} },\n          matches = _.matchesProperty('a', object1);\n\n      assert.strictEqual(matches({ 'a': object1 }), true);\n      assert.strictEqual(matches({ 'a': object2 }), false);\n      assert.strictEqual(matches({ 'a': object3 }), false);\n    });\n\n    QUnit.test('should work with a function for `srcValue`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.a = 1;\n      Foo.b = function() {};\n      Foo.c = 3;\n\n      var objects = [{ 'a': { 'a': 1 } }, { 'a': { 'a': 1, 'b': Foo.b, 'c': 3 } }],\n          actual = lodashStable.map(objects, _.matchesProperty('a', Foo));\n\n      assert.deepEqual(actual, [false, true]);\n    });\n\n    QUnit.test('should work with a non-plain `srcValue`', function(assert) {\n      assert.expect(1);\n\n      function Foo(object) { lodashStable.assign(this, object); }\n\n      var object = new Foo({ 'a': new Foo({ 'b': 1, 'c': 2 }) }),\n          matches = _.matchesProperty('a', { 'b': 1 });\n\n      assert.strictEqual(matches(object), true);\n    });\n\n    QUnit.test('should partial match arrays', function(assert) {\n      assert.expect(3);\n\n      var objects = [{ 'a': ['b'] }, { 'a': ['c', 'd'] }],\n          actual = lodashStable.filter(objects, _.matchesProperty('a', ['d']));\n\n      assert.deepEqual(actual, [objects[1]]);\n\n      actual = lodashStable.filter(objects, _.matchesProperty('a', ['b', 'd']));\n      assert.deepEqual(actual, []);\n\n      actual = lodashStable.filter(objects, _.matchesProperty('a', ['d', 'b']));\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('should partial match arrays with duplicate values', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1, 2] }, { 'a': [2, 2] }],\n          actual = lodashStable.filter(objects, _.matchesProperty('a', [2, 2]));\n\n      assert.deepEqual(actual, [objects[1]]);\n    });\n\n    QUnit.test('should partial match arrays of objects', function(assert) {\n      assert.expect(1);\n\n      var objects = [\n        { 'a': [{ 'a': 1, 'b': 2 }, { 'a': 4, 'b': 5, 'c': 6 }] },\n        { 'a': [{ 'a': 1, 'b': 2 }, { 'a': 4, 'b': 6, 'c': 7 }] }\n      ];\n\n      var actual = lodashStable.filter(objects, _.matchesProperty('a', [{ 'a': 1 }, { 'a': 4, 'b': 5 }]));\n      assert.deepEqual(actual, [objects[0]]);\n    });\n    QUnit.test('should partial match maps', function(assert) {\n      assert.expect(3);\n\n      if (Map) {\n        var objects = [{ 'a': new Map }, { 'a': new Map }];\n        objects[0].a.set('a', 1);\n        objects[1].a.set('a', 1);\n        objects[1].a.set('b', 2);\n\n        var map = new Map;\n        map.set('b', 2);\n        var actual = lodashStable.filter(objects, _.matchesProperty('a', map));\n\n        assert.deepEqual(actual, [objects[1]]);\n\n        map.delete('b');\n        actual = lodashStable.filter(objects, _.matchesProperty('a', map));\n\n        assert.deepEqual(actual, objects);\n\n        map.set('c', 3);\n        actual = lodashStable.filter(objects, _.matchesProperty('a', map));\n\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should partial match sets', function(assert) {\n      assert.expect(3);\n\n      if (Set) {\n        var objects = [{ 'a': new Set }, { 'a': new Set }];\n        objects[0].a.add(1);\n        objects[1].a.add(1);\n        objects[1].a.add(2);\n\n        var set = new Set;\n        set.add(2);\n        var actual = lodashStable.filter(objects, _.matchesProperty('a', set));\n\n        assert.deepEqual(actual, [objects[1]]);\n\n        set.delete(2);\n        actual = lodashStable.filter(objects, _.matchesProperty('a', set));\n\n        assert.deepEqual(actual, objects);\n\n        set.add(3);\n        actual = lodashStable.filter(objects, _.matchesProperty('a', set));\n\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should match `undefined` values', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 1 }, { 'a': 1, 'b': 1 }, { 'a': 1, 'b': undefined }],\n          actual = lodashStable.map(objects, _.matchesProperty('b', undefined)),\n          expected = [false, false, true];\n\n      assert.deepEqual(actual, expected);\n\n      objects = [{ 'a': { 'a': 1 } }, { 'a': { 'a': 1, 'b': 1 } }, { 'a': { 'a': 1, 'b': undefined } }];\n      actual = lodashStable.map(objects, _.matchesProperty('a', { 'b': undefined }));\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should match `undefined` values of nested objects', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': { 'b': undefined } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var matches = _.matchesProperty(path, undefined);\n        assert.strictEqual(matches(object), true);\n      });\n\n      lodashStable.each(['a.a', ['a', 'a']], function(path) {\n        var matches = _.matchesProperty(path, undefined);\n        assert.strictEqual(matches(object), false);\n      });\n    });\n\n    QUnit.test('should match `undefined` values on primitives', function(assert) {\n      assert.expect(2);\n\n      numberProto.a = 1;\n      numberProto.b = undefined;\n\n      try {\n        var matches = _.matchesProperty('b', undefined);\n        assert.strictEqual(matches(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      numberProto.a = { 'b': 1, 'c': undefined };\n      try {\n        matches = _.matchesProperty('a', { 'c': undefined });\n        assert.strictEqual(matches(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      delete numberProto.a;\n      delete numberProto.b;\n    });\n\n    QUnit.test('should return `true` when comparing a `srcValue` of empty arrays and objects', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1], 'b': { 'c': 1 } }, { 'a': [2, 3], 'b': { 'd': 2 } }],\n          matches = _.matchesProperty('a', { 'a': [], 'b': {} });\n\n      var actual = lodashStable.filter(objects, function(object) {\n        return matches({ 'a': object });\n      });\n\n      assert.deepEqual(actual, objects);\n    });\n\n    QUnit.test('should not change behavior if `srcValue` is modified', function(assert) {\n      assert.expect(9);\n\n      lodashStable.each([{ 'a': { 'b': 2, 'c': 3 } }, { 'a': 1, 'b': 2 }, { 'a': 1 }], function(source, index) {\n        var object = lodashStable.cloneDeep(source),\n            matches = _.matchesProperty('a', source);\n\n        assert.strictEqual(matches({ 'a': object }), true);\n\n        if (index) {\n          source.a = 2;\n          source.b = 1;\n          source.c = 3;\n        } else {\n          source.a.b = 1;\n          source.a.c = 2;\n          source.a.d = 3;\n        }\n        assert.strictEqual(matches({ 'a': object }), true);\n        assert.strictEqual(matches({ 'a': source }), false);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.max');\n\n  (function() {\n    QUnit.test('should return the largest value from a collection', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.max([1, 2, 3]), 3);\n    });\n\n    QUnit.test('should return `undefined` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat([[]]),\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? _.max(value) : _.max();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with non-numeric collection values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.max(['a', 'b']), 'b');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mean');\n\n  (function() {\n    QUnit.test('should return the mean of an array of numbers', function(assert) {\n      assert.expect(1);\n\n      var array = [4, 2, 8, 6];\n      assert.strictEqual(_.mean(array), 5);\n    });\n\n    QUnit.test('should return `NaN` when passing empty `array` values', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubNaN),\n          actual = lodashStable.map(empties, _.mean);\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.meanBy');\n\n  (function() {\n    var objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }];\n\n    QUnit.test('should work with an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.meanBy(objects, function(object) {\n        return object.a;\n      });\n\n      assert.deepEqual(actual, 2);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.meanBy(objects, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [{ 'a': 2 }]);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var arrays = [[2], [3], [1]];\n      assert.strictEqual(_.meanBy(arrays, 0), 2);\n      assert.strictEqual(_.meanBy(objects, 'a'), 2);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.memoize');\n\n  (function() {\n    function CustomCache() {\n      this.clear();\n    }\n\n    CustomCache.prototype = {\n      'clear': function() {\n        this.__data__ = [];\n        return this;\n      },\n      'get': function(key) {\n        var entry = lodashStable.find(this.__data__, ['key', key]);\n        return entry && entry.value;\n      },\n      'has': function(key) {\n        return lodashStable.some(this.__data__, ['key', key]);\n      },\n      'set': function(key, value) {\n        this.__data__.push({ 'key': key, 'value': value });\n        return this;\n      }\n    };\n\n    function ImmutableCache() {\n      this.__data__ = [];\n    }\n\n    ImmutableCache.prototype = lodashStable.create(CustomCache.prototype, {\n      'constructor': ImmutableCache,\n      'clear': function() {\n        return new ImmutableCache;\n      },\n      'set': function(key, value) {\n        var result = new ImmutableCache;\n        result.__data__ = this.__data__.concat({ 'key': key, 'value': value });\n        return result;\n      }\n    });\n\n    QUnit.test('should memoize results based on the first argument given', function(assert) {\n      assert.expect(2);\n\n      var memoized = _.memoize(function(a, b, c) {\n        return a + b + c;\n      });\n\n      assert.strictEqual(memoized(1, 2, 3), 6);\n      assert.strictEqual(memoized(1, 3, 5), 6);\n    });\n\n    QUnit.test('should support a `resolver`', function(assert) {\n      assert.expect(2);\n\n      var fn = function(a, b, c) { return a + b + c; },\n          memoized = _.memoize(fn, fn);\n\n      assert.strictEqual(memoized(1, 2, 3), 6);\n      assert.strictEqual(memoized(1, 3, 5), 9);\n    });\n\n    QUnit.test('should use `this` binding of function for `resolver`', function(assert) {\n      assert.expect(2);\n\n      var fn = function(a, b, c) { return a + this.b + this.c; },\n          memoized = _.memoize(fn, fn);\n\n      var object = { 'memoized': memoized, 'b': 2, 'c': 3 };\n      assert.strictEqual(object.memoized(1), 6);\n\n      object.b = 3;\n      object.c = 5;\n      assert.strictEqual(object.memoized(1), 9);\n    });\n\n    QUnit.test('should throw a TypeError if `resolve` is truthy and not a function', function(assert) {\n      assert.expect(1);\n\n      assert.raises(function() { _.memoize(noop, true); }, TypeError);\n    });\n\n    QUnit.test('should not error if `resolver` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(resolver, index) {\n        try {\n          return _.isFunction(index ? _.memoize(noop, resolver) : _.memoize(noop));\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should check cache for own properties', function(assert) {\n      assert.expect(1);\n\n      var props = [\n        'constructor',\n        'hasOwnProperty',\n        'isPrototypeOf',\n        'propertyIsEnumerable',\n        'toLocaleString',\n        'toString',\n        'valueOf'\n      ];\n\n      var memoized = _.memoize(identity);\n\n      var actual = lodashStable.map(props, function(value) {\n        return memoized(value);\n      });\n\n      assert.deepEqual(actual, props);\n    });\n\n    QUnit.test('should cache the `__proto__` key', function(assert) {\n      assert.expect(8);\n\n      var array = [],\n          key = '__proto__';\n\n      lodashStable.times(2, function(index) {\n        var count = 0,\n            resolver = index ? identity : undefined;\n\n        var memoized = _.memoize(function() {\n          count++;\n          return array;\n        }, resolver);\n\n        var cache = memoized.cache;\n\n        memoized(key);\n        memoized(key);\n\n        assert.strictEqual(count, 1);\n        assert.strictEqual(cache.get(key), array);\n        assert.notOk(cache.__data__ instanceof Array);\n        assert.strictEqual(cache.delete(key), true);\n      });\n    });\n\n    QUnit.test('should allow `_.memoize.Cache` to be customized', function(assert) {\n      assert.expect(4);\n\n      var oldCache = _.memoize.Cache;\n      _.memoize.Cache = CustomCache;\n\n      var memoized = _.memoize(function(object) {\n        return object.id;\n      });\n\n      var cache = memoized.cache,\n          key1 = { 'id': 'a' },\n          key2 = { 'id': 'b' };\n\n      assert.strictEqual(memoized(key1), 'a');\n      assert.strictEqual(cache.has(key1), true);\n\n      assert.strictEqual(memoized(key2), 'b');\n      assert.strictEqual(cache.has(key2), true);\n\n      _.memoize.Cache = oldCache;\n    });\n\n    QUnit.test('should works with an immutable `_.memoize.Cache` ', function(assert) {\n      assert.expect(2);\n\n      var oldCache = _.memoize.Cache;\n      _.memoize.Cache = ImmutableCache;\n\n      var memoized = _.memoize(function(object) {\n        return object.id;\n      });\n\n      var key1 = { 'id': 'a' },\n          key2 = { 'id': 'b' };\n\n      memoized(key1);\n      memoized(key2);\n\n      var cache = memoized.cache;\n      assert.strictEqual(cache.has(key1), true);\n      assert.strictEqual(cache.has(key2), true);\n\n      _.memoize.Cache = oldCache;\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('memoizeCapped');\n\n  (function() {\n    var func = _._memoizeCapped;\n\n    QUnit.test('should enforce a max cache size of `MAX_MEMOIZE_SIZE`', function(assert) {\n      assert.expect(2);\n\n      if (func) {\n        var memoized = func(identity),\n            cache = memoized.cache;\n\n        lodashStable.times(MAX_MEMOIZE_SIZE, memoized);\n        assert.strictEqual(cache.size, MAX_MEMOIZE_SIZE);\n\n        memoized(MAX_MEMOIZE_SIZE);\n        assert.strictEqual(cache.size, 1);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.merge');\n\n  (function() {\n    QUnit.test('should merge `source` into `object`', function(assert) {\n      assert.expect(1);\n\n      var names = {\n        'characters': [\n          { 'name': 'barney' },\n          { 'name': 'fred' }\n        ]\n      };\n\n      var ages = {\n        'characters': [\n          { 'age': 36 },\n          { 'age': 40 }\n        ]\n      };\n\n      var heights = {\n        'characters': [\n          { 'height': '5\\'4\"' },\n          { 'height': '5\\'5\"' }\n        ]\n      };\n\n      var expected = {\n        'characters': [\n          { 'name': 'barney', 'age': 36, 'height': '5\\'4\"' },\n          { 'name': 'fred', 'age': 40, 'height': '5\\'5\"' }\n        ]\n      };\n\n      assert.deepEqual(_.merge(names, ages, heights), expected);\n    });\n\n    QUnit.test('should merge sources containing circular references', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'foo': { 'a': 1 },\n        'bar': { 'a': 2 }\n      };\n\n      var source = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': {}\n      };\n\n      source.foo.b.c.d = source;\n      source.bar.b = source.foo.b;\n\n      var actual = _.merge(object, source);\n\n      assert.notStrictEqual(actual.bar.b, actual.foo.b);\n      assert.strictEqual(actual.foo.b.c.d, actual.foo.b.c.d.foo.b.c.d);\n    });\n\n    QUnit.test('should work with four arguments', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': 4 },\n          actual = _.merge({ 'a': 1 }, { 'a': 2 }, { 'a': 3 }, expected);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should merge onto function `object` values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n\n      var source = { 'a': 1 },\n          actual = _.merge(Foo, source);\n\n      assert.strictEqual(actual, Foo);\n      assert.strictEqual(Foo.a, 1);\n    });\n\n    QUnit.test('should not merge onto function values of sources', function(assert) {\n      assert.expect(3);\n\n      var source1 = { 'a': function() {} },\n          source2 = { 'a': { 'b': 2 } },\n          actual = _.merge({}, source1, source2);\n\n      assert.deepEqual(actual, { 'a': { 'b': 2 } });\n\n      actual = _.merge(source1, source2);\n\n      assert.strictEqual(typeof actual.a, 'function');\n      assert.strictEqual(actual.a.b, 2);\n    });\n\n    QUnit.test('should merge onto non-plain `object` values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n\n      var object = new Foo,\n          actual = _.merge(object, { 'a': 1 });\n\n      assert.strictEqual(actual, object);\n      assert.strictEqual(object.a, 1);\n    });\n\n    QUnit.test('should treat sparse array sources as dense', function(assert) {\n      assert.expect(2);\n\n      var array = [1];\n      array[2] = 3;\n\n      var actual = _.merge([], array),\n          expected = array.slice();\n\n      expected[1] = undefined;\n\n      assert.ok('1' in actual);\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should merge `arguments` objects', function(assert) {\n      assert.expect(7);\n\n      var object1 = { 'value': args },\n          object2 = { 'value': { '3': 4 } },\n          expected = { '0': 1, '1': 2, '2': 3, '3': 4 },\n          actual = _.merge(object1, object2);\n\n      assert.notOk('3' in args);\n      assert.notOk(_.isArguments(actual.value));\n      assert.deepEqual(actual.value, expected);\n      object1.value = args;\n\n      actual = _.merge(object2, object1);\n      assert.notOk(_.isArguments(actual.value));\n      assert.deepEqual(actual.value, expected);\n\n      expected = { '0': 1, '1': 2, '2': 3 };\n\n      actual = _.merge({}, object1);\n      assert.notOk(_.isArguments(actual.value));\n      assert.deepEqual(actual.value, expected);\n    });\n\n    QUnit.test('should merge typed arrays', function(assert) {\n      assert.expect(4);\n\n      var array1 = [0],\n          array2 = [0, 0],\n          array3 = [0, 0, 0, 0],\n          array4 = [0, 0, 0, 0, 0, 0, 0, 0];\n\n      var arrays = [array2, array1, array4, array3, array2, array4, array4, array3, array2],\n          buffer = ArrayBuffer && new ArrayBuffer(8);\n\n      var expected = lodashStable.map(typedArrays, function(type, index) {\n        var array = arrays[index].slice();\n        array[0] = 1;\n        return root[type] ? { 'value': array } : false;\n      });\n\n      var actual = lodashStable.map(typedArrays, function(type) {\n        var Ctor = root[type];\n        return Ctor ? _.merge({ 'value': new Ctor(buffer) }, { 'value': [1] }) : false;\n      });\n\n      assert.ok(lodashStable.isArray(actual));\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(typedArrays, function(type, index) {\n        var array = arrays[index].slice();\n        array.push(1);\n        return root[type] ? { 'value': array } : false;\n      });\n\n      actual = lodashStable.map(typedArrays, function(type, index) {\n        var Ctor = root[type],\n            array = lodashStable.range(arrays[index].length);\n\n        array.push(1);\n        return Ctor ? _.merge({ 'value': array }, { 'value': new Ctor(buffer) }) : false;\n      });\n\n      assert.ok(lodashStable.isArray(actual));\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should assign `null` values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.merge({ 'a': 1 }, { 'a': null });\n      assert.strictEqual(actual.a, null);\n    });\n\n    QUnit.test('should assign non array/buffer/typed-array/plain-object source values directly', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n\n      var values = [new Foo, new Boolean, new Date, Foo, new Number, new String, new RegExp],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        var object = _.merge({}, { 'a': value, 'b': { 'c': value } });\n        return object.a === value && object.b.c === value;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should clone buffer source values', function(assert) {\n      assert.expect(3);\n\n      if (Buffer) {\n        var buffer = new Buffer([1]),\n            actual = _.merge({}, { 'value': buffer }).value;\n\n        assert.ok(lodashStable.isBuffer(actual));\n        assert.strictEqual(actual[0], buffer[0]);\n        assert.notStrictEqual(actual, buffer);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should deep clone array/typed-array/plain-object source values', function(assert) {\n      assert.expect(1);\n\n      var typedArray = Uint8Array\n        ? new Uint8Array([1])\n        : { 'buffer': [1] };\n\n      var props = ['0', 'buffer', 'a'],\n          values = [[{ 'a': 1 }], typedArray, { 'a': [1] }],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var key = props[index],\n            object = _.merge({}, { 'value': value }),\n            subValue = value[key],\n            newValue = object.value,\n            newSubValue = newValue[key];\n\n        return (\n          newValue !== value &&\n          newSubValue !== subValue &&\n          lodashStable.isEqual(newValue, value)\n        );\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not augment source objects', function(assert) {\n      assert.expect(6);\n\n      var source1 = { 'a': [{ 'a': 1 }] },\n          source2 = { 'a': [{ 'b': 2 }] },\n          actual = _.merge({}, source1, source2);\n\n      assert.deepEqual(source1.a, [{ 'a': 1 }]);\n      assert.deepEqual(source2.a, [{ 'b': 2 }]);\n      assert.deepEqual(actual.a, [{ 'a': 1, 'b': 2 }]);\n\n      var source1 = { 'a': [[1, 2, 3]] },\n          source2 = { 'a': [[3, 4]] },\n          actual = _.merge({}, source1, source2);\n\n      assert.deepEqual(source1.a, [[1, 2, 3]]);\n      assert.deepEqual(source2.a, [[3, 4]]);\n      assert.deepEqual(actual.a, [[3, 4, 3]]);\n    });\n\n    QUnit.test('should merge plain objects onto non-plain objects', function(assert) {\n      assert.expect(4);\n\n      function Foo(object) {\n        lodashStable.assign(this, object);\n      }\n\n      var object = { 'a': 1 },\n          actual = _.merge(new Foo, object);\n\n      assert.ok(actual instanceof Foo);\n      assert.deepEqual(actual, new Foo(object));\n\n      actual = _.merge([new Foo], [object]);\n      assert.ok(actual[0] instanceof Foo);\n      assert.deepEqual(actual, [new Foo(object)]);\n    });\n\n    QUnit.test('should not overwrite existing values with `undefined` values of object sources', function(assert) {\n      assert.expect(1);\n\n      var actual = _.merge({ 'a': 1 }, { 'a': undefined, 'b': undefined });\n      assert.deepEqual(actual, { 'a': 1, 'b': undefined });\n    });\n\n    QUnit.test('should not overwrite existing values with `undefined` values of array sources', function(assert) {\n      assert.expect(2);\n\n      var array = [1];\n      array[2] = 3;\n\n      var actual = _.merge([4, 5, 6], array),\n          expected = [1, 5, 3];\n\n      assert.deepEqual(actual, expected);\n\n      array = [1, , 3];\n      array[1] = undefined;\n\n      actual = _.merge([4, 5, 6], array);\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should skip merging when `object` and `source` are the same value', function(assert) {\n      assert.expect(1);\n\n      var object = {},\n          pass = true;\n\n      defineProperty(object, 'a', {\n        'configurable': true,\n        'enumerable': true,\n        'get': function() { pass = false; },\n        'set': function() { pass = false; }\n      });\n\n      _.merge(object, object);\n      assert.ok(pass);\n    });\n\n    QUnit.test('should convert values to arrays when merging arrays of `source`', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { '1': 'y', 'b': 'z', 'length': 2 } },\n          actual = _.merge(object, { 'a': ['x'] });\n\n      assert.deepEqual(actual, { 'a': ['x', 'y'] });\n\n      actual = _.merge({ 'a': {} }, { 'a': [] });\n      assert.deepEqual(actual, { 'a': [] });\n    });\n\n    QUnit.test('should not convert strings to arrays when merging arrays of `source`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 'abcde' },\n          actual = _.merge(object, { 'a': ['x', 'y', 'z'] });\n\n      assert.deepEqual(actual, { 'a': ['x', 'y', 'z'] });\n    });\n\n    QUnit.test('should not error on DOM elements', function(assert) {\n      assert.expect(1);\n\n      var object1 = { 'el': document && document.createElement('div') },\n          object2 = { 'el': document && document.createElement('div') },\n          pairs = [[{}, object1], [object1, object2]],\n          expected = lodashStable.map(pairs, stubTrue);\n\n      var actual = lodashStable.map(pairs, function(pair) {\n        try {\n          return _.merge(pair[0], pair[1]).el === pair[1].el;\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mergeWith');\n\n  (function() {\n    QUnit.test('should handle merging when `customizer` returns `undefined`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.mergeWith({ 'a': { 'b': [1, 1] } }, { 'a': { 'b': [0] } }, noop);\n      assert.deepEqual(actual, { 'a': { 'b': [0, 1] } });\n\n      actual = _.mergeWith([], [undefined], identity);\n      assert.deepEqual(actual, [undefined]);\n    });\n\n    QUnit.test('should clone sources when `customizer` returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      var source1 = { 'a': { 'b': { 'c': 1 } } },\n          source2 = { 'a': { 'b': { 'd': 2 } } };\n\n      _.mergeWith({}, source1, source2, noop);\n      assert.deepEqual(source1.a.b, { 'c': 1 });\n    });\n\n    QUnit.test('should defer to `customizer` for non `undefined` results', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mergeWith({ 'a': { 'b': [0, 1] } }, { 'a': { 'b': [2] } }, function(a, b) {\n        return lodashStable.isArray(a) ? a.concat(b) : undefined;\n      });\n\n      assert.deepEqual(actual, { 'a': { 'b': [0, 1, 2] } });\n    });\n\n    QUnit.test('should provide `stack` to `customizer`', function(assert) {\n      assert.expect(1);\n\n      var actual;\n\n      _.mergeWith({}, { 'a': { 'b': 2 } }, function() {\n        actual = _.last(arguments);\n      });\n\n      assert.ok(isNpm\n        ? actual.constructor.name == 'Stack'\n        : actual instanceof mapCaches.Stack\n      );\n    });\n\n    QUnit.test('should overwrite primitives with source object clones', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mergeWith({ 'a': 0 }, { 'a': { 'b': ['c'] } }, function(a, b) {\n        return lodashStable.isArray(a) ? a.concat(b) : undefined;\n      });\n\n      assert.deepEqual(actual, { 'a': { 'b': ['c'] } });\n    });\n\n    QUnit.test('should pop the stack of sources for each sibling property', function(assert) {\n      assert.expect(1);\n\n      var array = ['b', 'c'],\n          object = { 'a': ['a'] },\n          source = { 'a': array, 'b': array };\n\n      var actual = _.mergeWith(object, source, function(a, b) {\n        return lodashStable.isArray(a) ? a.concat(b) : undefined;\n      });\n\n      assert.deepEqual(actual, { 'a': ['a', 'b', 'c'], 'b': ['b', 'c'] });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.method');\n\n  (function() {\n    QUnit.test('should create a function that calls a method of a given object', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': stubOne };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method.length, 1);\n        assert.strictEqual(method(object), 1);\n      });\n    });\n\n    QUnit.test('should work with deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': stubTwo } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(object), 2);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = lodashStable.times(3, _.constant);\n\n      lodashStable.each([1, [1]], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(array), 1);\n      });\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var expected = [1, 2, 3, 4],\n          object = { 'null': stubOne, 'undefined': stubTwo, 'fn': stubThree, '[object Object]': stubFour },\n          paths = [null, undefined, fn, {}];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var method = _.method(index ? [path] : path);\n          return method(object);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should work with inherited property values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = stubOne;\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(new Foo), 1);\n      });\n    });\n\n    QUnit.test('should use a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': stubOne, 'a': { 'b': stubTwo } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(object), 1);\n      });\n    });\n\n    QUnit.test('should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var method = _.method(path);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? method(value) : method();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var method = _.method(path);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? method(value) : method();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var object = {};\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(object), undefined);\n      });\n    });\n\n    QUnit.test('should apply partial arguments to function', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'fn': function() {\n          return slice.call(arguments);\n        }\n      };\n\n      lodashStable.each(['fn', ['fn']], function(path) {\n        var method = _.method(path, 1, 2, 3);\n        assert.deepEqual(method(object), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function() { return this.c; }, 'c': 1 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(object), 1);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.methodOf');\n\n  (function() {\n    QUnit.test('should create a function that calls a method of a given key', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': stubOne };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var methodOf = _.methodOf(object);\n        assert.strictEqual(methodOf.length, 1);\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n\n    QUnit.test('should work with deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': stubTwo } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var methodOf = _.methodOf(object);\n        assert.strictEqual(methodOf(path), 2);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = lodashStable.times(3, _.constant);\n\n      lodashStable.each([1, [1]], function(path) {\n        var methodOf = _.methodOf(array);\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var expected = [1, 2, 3, 4],\n          object = { 'null': stubOne, 'undefined': stubTwo, 'fn': stubThree, '[object Object]': stubFour },\n          paths = [null, undefined, fn, {}];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var methodOf = _.methodOf(object);\n          return methodOf(index ? [path] : path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should work with inherited property values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = stubOne;\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var methodOf = _.methodOf(new Foo);\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n\n    QUnit.test('should use a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': stubOne, 'a': { 'b': stubTwo } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var methodOf = _.methodOf(object);\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n\n    QUnit.test('should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var methodOf = index ? _.methodOf() : _.methodOf(value);\n          return methodOf(path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var methodOf = index ? _.methodOf() : _.methodOf(value);\n          return methodOf(path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var object = {},\n          methodOf = _.methodOf(object);\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        assert.strictEqual(methodOf(path), undefined);\n      });\n    });\n\n    QUnit.test('should apply partial arguments to function', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'fn': function() {\n          return slice.call(arguments);\n        }\n      };\n\n      var methodOf = _.methodOf(object, 1, 2, 3);\n\n      lodashStable.each(['fn', ['fn']], function(path) {\n        assert.deepEqual(methodOf(path), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function() { return this.c; }, 'c': 1 } },\n          methodOf = _.methodOf(object);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.min');\n\n  (function() {\n    QUnit.test('should return the smallest value from a collection', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.min([1, 2, 3]), 1);\n    });\n\n    QUnit.test('should return `undefined` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat([[]]),\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? _.min(value) : _.min();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with non-numeric collection values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.min(['a', 'b']), 'a');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('extremum methods');\n\n  lodashStable.each(['max', 'maxBy', 'min', 'minBy'], function(methodName) {\n    var func = _[methodName],\n        isMax = /^max/.test(methodName);\n\n    QUnit.test('`_.' + methodName + '` should work with Date objects', function(assert) {\n      assert.expect(1);\n\n      var curr = new Date,\n          past = new Date(0);\n\n      assert.strictEqual(func([curr, past]), isMax ? curr : past);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with extremely large arrays', function(assert) {\n      assert.expect(1);\n\n      var array = lodashStable.range(0, 5e5);\n      assert.strictEqual(func(array), isMax ? 499999 : 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work when chaining on an array with only one value', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _([40])[methodName]();\n        assert.strictEqual(actual, 40);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  lodashStable.each(['maxBy', 'minBy'], function(methodName) {\n    var array = [1, 2, 3],\n        func = _[methodName],\n        isMax = methodName == 'maxBy';\n\n    QUnit.test('`_.' + methodName + '` should work with an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = func(array, function(n) {\n        return -n;\n      });\n\n      assert.strictEqual(actual, isMax ? 1 : 3);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }],\n          actual = func(objects, 'a');\n\n      assert.deepEqual(actual, objects[isMax ? 1 : 2]);\n\n      var arrays = [[2], [3], [1]];\n      actual = func(arrays, 0);\n\n      assert.deepEqual(actual, arrays[isMax ? 1 : 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work when `iteratee` returns +/-Infinity', function(assert) {\n      assert.expect(1);\n\n      var value = isMax ? -Infinity : Infinity,\n          object = { 'a': value };\n\n      var actual = func([object, { 'a': value }], function(object) {\n        return object.a;\n      });\n\n      assert.strictEqual(actual, object);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mixin');\n\n  (function() {\n    function reset(wrapper) {\n      delete wrapper.a;\n      delete wrapper.prototype.a;\n      delete wrapper.b;\n      delete wrapper.prototype.b;\n    }\n\n    function Wrapper(value) {\n      if (!(this instanceof Wrapper)) {\n        return new Wrapper(value);\n      }\n      if (_.has(value, '__wrapped__')) {\n        var actions = slice.call(value.__actions__),\n            chain = value.__chain__;\n\n        value = value.__wrapped__;\n      }\n      this.__wrapped__ = value;\n      this.__actions__ = actions || [];\n      this.__chain__ = chain || false;\n    }\n\n    Wrapper.prototype.value = function() {\n      return getUnwrappedValue(this);\n    };\n\n    var array = ['a'],\n        source = { 'a': function(array) { return array[0]; }, 'b': 'B' };\n\n    QUnit.test('should mixin `source` methods into lodash', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        _.mixin(source);\n\n        assert.strictEqual(_.a(array), 'a');\n        assert.strictEqual(_(array).a().value(), 'a');\n        assert.notOk('b' in _);\n        assert.notOk('b' in _.prototype);\n\n        reset(_);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should mixin chaining methods by reference', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        _.mixin(source);\n        _.a = stubB;\n\n        assert.strictEqual(_.a(array), 'b');\n        assert.strictEqual(_(array).a().value(), 'a');\n\n        reset(_);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should use a default `object` of `this`', function(assert) {\n      assert.expect(3);\n\n      var object = lodashStable.create(_);\n      object.mixin(source);\n\n      assert.strictEqual(object.a(array), 'a');\n      assert.notOk('a' in _);\n      assert.notOk('a' in _.prototype);\n\n      reset(_);\n    });\n\n    QUnit.test('should accept an `object`', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n      _.mixin(object, source);\n      assert.strictEqual(object.a(array), 'a');\n    });\n\n    QUnit.test('should accept a function `object`', function(assert) {\n      assert.expect(2);\n\n      _.mixin(Wrapper, source);\n\n      var wrapped = Wrapper(array),\n          actual = wrapped.a();\n\n      assert.strictEqual(actual.value(), 'a');\n      assert.ok(actual instanceof Wrapper);\n\n      reset(Wrapper);\n    });\n\n    QUnit.test('should return `object`', function(assert) {\n      assert.expect(3);\n\n      var object = {};\n      assert.strictEqual(_.mixin(object, source), object);\n      assert.strictEqual(_.mixin(Wrapper, source), Wrapper);\n      assert.strictEqual(_.mixin(), _);\n\n      reset(Wrapper);\n    });\n\n    QUnit.test('should not assign inherited `source` methods', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.a = noop;\n\n      var object = {};\n      assert.strictEqual(_.mixin(object, new Foo), object);\n    });\n\n    QUnit.test('should accept an `options`', function(assert) {\n      assert.expect(8);\n\n      function message(func, chain) {\n        return (func === _ ? 'lodash' : 'given') + ' function should ' + (chain ? '' : 'not ') + 'chain';\n      }\n\n      lodashStable.each([_, Wrapper], function(func) {\n        lodashStable.each([{ 'chain': false }, { 'chain': true }], function(options) {\n          if (!isNpm) {\n            if (func === _) {\n              _.mixin(source, options);\n            } else {\n              _.mixin(func, source, options);\n            }\n            var wrapped = func(array),\n                actual = wrapped.a();\n\n            if (options.chain) {\n              assert.strictEqual(actual.value(), 'a', message(func, true));\n              assert.ok(actual instanceof func, message(func, true));\n            } else {\n              assert.strictEqual(actual, 'a', message(func, false));\n              assert.notOk(actual instanceof func, message(func, false));\n            }\n            reset(func);\n          }\n          else {\n            skipAssert(assert, 2);\n          }\n        });\n      });\n    });\n\n    QUnit.test('should not extend lodash when an `object` is given with an empty `options` object', function(assert) {\n      assert.expect(1);\n\n      _.mixin({ 'a': noop }, {});\n      assert.notOk('a' in _);\n      reset(_);\n    });\n\n    QUnit.test('should not error for non-object `options` values', function(assert) {\n      assert.expect(2);\n\n      var pass = true;\n\n      try {\n        _.mixin({}, source, 1);\n      } catch (e) {\n        pass = false;\n      }\n      assert.ok(pass);\n\n      pass = true;\n\n      try {\n        _.mixin(source, 1);\n      } catch (e) {\n        pass = false;\n      }\n      assert.ok(pass);\n\n      reset(_);\n    });\n\n    QUnit.test('should not return the existing wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([_, Wrapper], function(func) {\n        if (!isNpm) {\n          if (func === _) {\n            var wrapped = _(source),\n                actual = wrapped.mixin();\n\n            assert.strictEqual(actual.value(), _);\n          }\n          else {\n            wrapped = _(func);\n            actual = wrapped.mixin(source);\n            assert.notStrictEqual(actual, wrapped);\n          }\n          reset(func);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    QUnit.test('should produce methods that work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        _.mixin({ 'a': _.countBy, 'b': _.filter });\n\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            actual = _(array).a().map(square).b(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.b(_.map(_.a(array), square), isEven)));\n\n        reset(_);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.multiply');\n\n  (function() {\n    QUnit.test('should multiply two numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.multiply(6, 4), 24);\n      assert.strictEqual(_.multiply(-6, 4), -24);\n      assert.strictEqual(_.multiply(-6, -4), 24);\n    });\n\n    QUnit.test('should coerce arguments to numbers', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.multiply('6', '4'), 24);\n      assert.deepEqual(_.multiply('x', 'y'), NaN);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.orderBy');\n\n  (function() {\n    var objects = [\n      { 'a': 'x', 'b': 3 },\n      { 'a': 'y', 'b': 4 },\n      { 'a': 'x', 'b': 1 },\n      { 'a': 'y', 'b': 2 }\n    ];\n\n    QUnit.test('should sort by a single property by a specified order', function(assert) {\n      assert.expect(1);\n\n      var actual = _.orderBy(objects, 'a', 'desc');\n      assert.deepEqual(actual, [objects[1], objects[3], objects[0], objects[2]]);\n    });\n\n    QUnit.test('should sort by multiple properties by specified orders', function(assert) {\n      assert.expect(1);\n\n      var actual = _.orderBy(objects, ['a', 'b'], ['desc', 'asc']);\n      assert.deepEqual(actual, [objects[3], objects[1], objects[2], objects[0]]);\n    });\n\n    QUnit.test('should sort by a property in ascending order when its order is not specified', function(assert) {\n      assert.expect(2);\n\n      var expected = [objects[2], objects[0], objects[3], objects[1]],\n          actual = _.orderBy(objects, ['a', 'b']);\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(falsey, lodashStable.constant([objects[3], objects[1], objects[2], objects[0]]));\n\n      actual = lodashStable.map(falsey, function(order, index) {\n        return _.orderBy(objects, ['a', 'b'], index ? ['desc', order] : ['desc']);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `orders` specified as string objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.orderBy(objects, ['a'], [Object('desc')]);\n      assert.deepEqual(actual, [objects[1], objects[3], objects[0], objects[2]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.overArgs');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should transform each argument', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, doubled, square);\n      assert.deepEqual(over(5, 10), [10, 100]);\n    });\n\n    QUnit.test('should use `_.identity` when a predicate is nullish', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, undefined, null);\n      assert.deepEqual(over('a', 'b'), ['a', 'b']);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, 'b', 'a');\n      assert.deepEqual(over({ 'b': 2 }, { 'a': 1 }), [2, 1]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, { 'b': 1 }, { 'a': 1 });\n      assert.deepEqual(over({ 'b': 2 }, { 'a': 1 }), [false, true]);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, [['b', 1], ['a', 1]]);\n      assert.deepEqual(over({ 'b': 2 }, { 'a': 1 }), [false, true]);\n    });\n\n    QUnit.test('should differentiate between `_.property` and `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overArgs(fn, ['a', 1]);\n      assert.deepEqual(over({ 'a': 1 }, { '1': 2 }), [1, 2]);\n\n      over = _.overArgs(fn, [['a', 1]]);\n      assert.deepEqual(over({ 'a': 1 }), [true]);\n    });\n\n    QUnit.test('should flatten `transforms`', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, [doubled, square], String);\n      assert.deepEqual(over(5, 10, 15), [10, 100, '15']);\n    });\n\n    QUnit.test('should not transform any argument greater than the number of transforms', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, doubled, square);\n      assert.deepEqual(over(5, 10, 18), [10, 100, 18]);\n    });\n\n    QUnit.test('should not transform any arguments if no transforms are given', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn);\n      assert.deepEqual(over(5, 10, 18), [5, 10, 18]);\n    });\n\n    QUnit.test('should not pass `undefined` if there are more transforms than arguments', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, doubled, identity);\n      assert.deepEqual(over(5), [10]);\n    });\n\n    QUnit.test('should provide the correct argument to each transform', function(assert) {\n      assert.expect(1);\n\n      var argsList = [],\n          transform = function() { argsList.push(slice.call(arguments)); },\n          over = _.overArgs(noop, transform, transform, transform);\n\n      over('a', 'b');\n      assert.deepEqual(argsList, [['a'], ['b']]);\n    });\n\n    QUnit.test('should use `this` binding of function for `transforms`', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(function(x) {\n        return this[x];\n      }, function(x) {\n        return this === x;\n      });\n\n      var object = { 'over': over, 'true': 1 };\n      assert.strictEqual(object.over(object), 1);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.negate');\n\n  (function() {\n    QUnit.test('should create a function that negates the result of `func`', function(assert) {\n      assert.expect(2);\n\n      var negate = _.negate(isEven);\n\n      assert.strictEqual(negate(1), true);\n      assert.strictEqual(negate(2), false);\n    });\n\n    QUnit.test('should create a function that negates the result of `func`', function(assert) {\n      assert.expect(2);\n\n      var negate = _.negate(isEven);\n\n      assert.strictEqual(negate(1), true);\n      assert.strictEqual(negate(2), false);\n    });\n\n    QUnit.test('should create a function that accepts multiple arguments', function(assert) {\n      assert.expect(1);\n\n      var argCount,\n          count = 5,\n          negate = _.negate(function() { argCount = arguments.length; }),\n          expected = lodashStable.times(count, stubTrue);\n\n      var actual = lodashStable.times(count, function(index) {\n        switch (index) {\n          case 0: negate(); break;\n          case 1: negate(1); break;\n          case 2: negate(1, 2); break;\n          case 3: negate(1, 2, 3); break;\n          case 4: negate(1, 2, 3, 4);\n        }\n        return argCount == index;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.noConflict');\n\n  (function() {\n    QUnit.test('should return the `lodash` function', function(assert) {\n      assert.expect(2);\n\n      if (!isModularize) {\n        assert.strictEqual(_.noConflict(), oldDash);\n        assert.notStrictEqual(root._, oldDash);\n        root._ = oldDash;\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should restore `_` only if `lodash` is the current `_` value', function(assert) {\n      assert.expect(2);\n\n      if (!isModularize) {\n        var object = root._ = {};\n        assert.strictEqual(_.noConflict(), oldDash);\n        assert.strictEqual(root._, object);\n        root._ = oldDash;\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work with a `root` of `this`', function(assert) {\n      assert.expect(2);\n\n      if (!coverage && !document && !isModularize && realm.object) {\n        var fs = require('fs'),\n            vm = require('vm'),\n            expected = {},\n            context = vm.createContext({ '_': expected, 'console': console }),\n            source = fs.readFileSync(filePath, 'utf8');\n\n        vm.runInContext(source + '\\nthis.lodash = this._.noConflict()', context);\n\n        assert.strictEqual(context._, expected);\n        assert.ok(context.lodash);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.now');\n\n  (function() {\n    QUnit.test('should return the number of milliseconds that have elapsed since the Unix epoch', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var stamp = +new Date,\n          actual = _.now();\n\n      assert.ok(actual >= stamp);\n\n      setTimeout(function() {\n        assert.ok(_.now() > actual);\n        done();\n      }, 32);\n    });\n\n    QUnit.test('should work with mocked `Date.now`', function(assert) {\n      assert.expect(1);\n\n      var now = Date.now;\n      Date.now = stubA;\n\n      var actual = _.now();\n      Date.now = now;\n\n      assert.strictEqual(actual, 'a');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.nth');\n\n  (function() {\n    var array = ['a', 'b', 'c', 'd'];\n\n    QUnit.test('should get the nth element of `array`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(array, function(value, index) {\n        return _.nth(array, index);\n      });\n\n      assert.deepEqual(actual, array);\n    });\n\n    QUnit.test('should work with a negative `n`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(lodashStable.range(1, array.length + 1), function(n) {\n        return _.nth(array, -n);\n      });\n\n      assert.deepEqual(actual, ['d', 'c', 'b', 'a']);\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(2);\n\n      var values = falsey,\n          expected = lodashStable.map(values, stubA);\n\n      var actual = lodashStable.map(values, function(n) {\n        return n ? _.nth(array, n) : _.nth(array);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      values = ['1', 1.6];\n      expected = lodashStable.map(values, stubB);\n\n      actual = lodashStable.map(values, function(n) {\n        return _.nth(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `undefined` for empty arrays', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined, []],\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(array) {\n        return _.nth(array, 1);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `undefined` for non-indexes', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2],\n          values = [Infinity, array.length],\n          expected = lodashStable.map(values, noop);\n\n      array[-1] = 3;\n\n      var actual = lodashStable.map(values, function(n) {\n        return _.nth(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.nthArg');\n\n  (function() {\n    var args = ['a', 'b', 'c', 'd'];\n\n    QUnit.test('should create a function that returns its nth argument', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(args, function(value, index) {\n        var func = _.nthArg(index);\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, args);\n    });\n\n    QUnit.test('should work with a negative `n`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(lodashStable.range(1, args.length + 1), function(n) {\n        var func = _.nthArg(-n);\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, ['d', 'c', 'b', 'a']);\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(2);\n\n      var values = falsey,\n          expected = lodashStable.map(values, stubA);\n\n      var actual = lodashStable.map(values, function(n) {\n        var func = n ? _.nthArg(n) : _.nthArg();\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      values = ['1', 1.6];\n      expected = lodashStable.map(values, stubB);\n\n      actual = lodashStable.map(values, function(n) {\n        var func = _.nthArg(n);\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `undefined` for empty arrays', function(assert) {\n      assert.expect(1);\n\n      var func = _.nthArg(1);\n      assert.strictEqual(func(), undefined);\n    });\n\n    QUnit.test('should return `undefined` for non-indexes', function(assert) {\n      assert.expect(1);\n\n      var values = [Infinity, args.length],\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(n) {\n        var func = _.nthArg(n);\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.omit');\n\n  (function() {\n    var args = toArgs(['a', 'c']),\n        object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n        nested = { 'a': 1, 'b': { 'c': 2, 'd': 3 } };\n\n    QUnit.test('should flatten `paths`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.omit(object, 'a', 'c'), { 'b': 2, 'd': 4 });\n      assert.deepEqual(_.omit(object, ['a', 'd'], 'c'), { 'b': 2 });\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.omit(nested, 'b.c'), { 'a': 1, 'b': { 'd': 3} });\n    });\n\n    QUnit.test('should support path arrays', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } },\n          actual = _.omit(object, [['a.b']]);\n\n      assert.deepEqual(actual, { 'a': { 'b': 2 } });\n    });\n\n    QUnit.test('should omit a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.deepEqual(_.omit(object, path), { 'a': { 'b': 2 } });\n      });\n    });\n\n    QUnit.test('should coerce `paths` to strings', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.omit({ '0': 'a' }, 0), {});\n    });\n\n    QUnit.test('should return an empty object when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([null, undefined], function(value) {\n        objectProto.a = 1;\n        var actual = _.omit(value, 'valueOf');\n        delete objectProto.a;\n        assert.deepEqual(actual, {});\n      });\n    });\n\n    QUnit.test('should work with a primitive `object`', function(assert) {\n      assert.expect(1);\n\n      stringProto.a = 1;\n      stringProto.b = 2;\n\n      assert.deepEqual(_.omit('', 'b'), { 'a': 1 });\n\n      delete stringProto.a;\n      delete stringProto.b;\n    });\n\n    QUnit.test('should work with `arguments` object `paths`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.omit(object, args), { 'b': 2, 'd': 4 });\n    });\n\n    QUnit.test('should not mutate `object`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a'], 'a.b', ['a.b']], function(path) {\n        var object = { 'a': { 'b': 2 } };\n        _.omit(object, path);\n        assert.deepEqual(object, { 'a': { 'b': 2 } });\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.omitBy');\n\n  (function() {\n    QUnit.test('should work with a predicate argument', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\n\n      var actual = _.omitBy(object, function(n) {\n        return n != 2 && n != 4;\n      });\n\n      assert.deepEqual(actual, { 'b': 2, 'd': 4 });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('omit methods');\n\n  lodashStable.each(['omit', 'omitBy'], function(methodName) {\n    var expected = { 'b': 2, 'd': 4 },\n        func = _[methodName],\n        object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n        resolve = lodashStable.nthArg(1);\n\n    if (methodName == 'omitBy') {\n      resolve = function(object, props) {\n        props = lodashStable.castArray(props);\n        return function(value) {\n          return lodashStable.some(props, function(key) {\n            key = lodashStable.isSymbol(key) ? key : lodashStable.toString(key);\n            return object[key] === value;\n          });\n        };\n      };\n    }\n    QUnit.test('`_.' + methodName + '` should create an object with omitted string keyed properties', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(object, resolve(object, 'a')), { 'b': 2, 'c': 3, 'd': 4 });\n      assert.deepEqual(func(object, resolve(object, ['a', 'c'])), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should include inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype = object;\n\n      assert.deepEqual(func(new Foo, resolve(object, ['a', 'c'])), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)],\n          expected = [{ '0': 'b' }, { '0': 'b' }, { '-0': 'a' }, { '-0': 'a' }];\n\n      var actual = lodashStable.map(props, function(key) {\n        return func(object, resolve(object, key));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should include symbols', function(assert) {\n      assert.expect(3);\n\n      function Foo() {\n        this.a = 0;\n        this[symbol] = 1;\n      }\n\n      if (Symbol) {\n        var symbol2 = Symbol('b');\n        Foo.prototype[symbol2] = 2;\n\n        var symbol3 = Symbol('c');\n        defineProperty(Foo.prototype, symbol3, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 3\n        });\n\n        var foo = new Foo,\n            actual = func(foo, resolve(foo, 'a'));\n\n        assert.strictEqual(actual[symbol], 1);\n        assert.strictEqual(actual[symbol2], 2);\n        assert.notOk(symbol3 in actual);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should create an object with omitted symbols', function(assert) {\n      assert.expect(8);\n\n      function Foo() {\n        this.a = 0;\n        this[symbol] = 1;\n      }\n\n      if (Symbol) {\n        var symbol2 = Symbol('b');\n        Foo.prototype[symbol2] = 2;\n\n        var symbol3 = Symbol('c');\n        defineProperty(Foo.prototype, symbol3, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 3\n        });\n\n        var foo = new Foo,\n            actual = func(foo, resolve(foo, symbol));\n\n        assert.strictEqual(actual.a, 0);\n        assert.notOk(symbol in actual);\n        assert.strictEqual(actual[symbol2], 2);\n        assert.notOk(symbol3 in actual);\n\n        actual = func(foo, resolve(foo, symbol2));\n\n        assert.strictEqual(actual.a, 0);\n        assert.strictEqual(actual[symbol], 1);\n        assert.notOk(symbol2 in actual);\n        assert.notOk(symbol3 in actual);\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with an array `object`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(func(array, resolve(array, ['0', '2'])), { '1': 2 });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.once');\n\n  (function() {\n    QUnit.test('should invoke `func` once', function(assert) {\n      assert.expect(2);\n\n      var count = 0,\n          once = _.once(function() { return ++count; });\n\n      once();\n      assert.strictEqual(once(), 1);\n      assert.strictEqual(count, 1);\n    });\n\n    QUnit.test('should ignore recursive calls', function(assert) {\n      assert.expect(2);\n\n      var count = 0;\n\n      var once = _.once(function() {\n        once();\n        return ++count;\n      });\n\n      assert.strictEqual(once(), 1);\n      assert.strictEqual(count, 1);\n    });\n\n    QUnit.test('should not throw more than once', function(assert) {\n      assert.expect(2);\n\n      var once = _.once(function() {\n        throw new Error;\n      });\n\n      assert.raises(once);\n\n      once();\n      assert.ok(true);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.over');\n\n  (function() {\n    QUnit.test('should create a function that invokes `iteratees`', function(assert) {\n      assert.expect(1);\n\n      var over = _.over(Math.max, Math.min);\n      assert.deepEqual(over(1, 2, 3, 4), [4, 1]);\n    });\n\n    QUnit.test('should use `_.identity` when a predicate is nullish', function(assert) {\n      assert.expect(1);\n\n      var over = _.over(undefined, null);\n      assert.deepEqual(over('a', 'b', 'c'), ['a', 'a']);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.over('b', 'a');\n      assert.deepEqual(over({ 'a': 1, 'b': 2 }), [2, 1]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.over({ 'b': 1 }, { 'a': 1 });\n      assert.deepEqual(over({ 'a': 1, 'b': 2 }), [false, true]);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.over([['b', 2], ['a', 2]]);\n\n      assert.deepEqual(over({ 'a': 1, 'b': 2 }), [true, false]);\n      assert.deepEqual(over({ 'a': 2, 'b': 1 }), [false, true]);\n    });\n\n    QUnit.test('should differentiate between `_.property` and `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(4);\n\n      var over = _.over(['a', 1]);\n\n      assert.deepEqual(over({ 'a': 1, '1': 2 }), [1, 2]);\n      assert.deepEqual(over({ 'a': 2, '1': 1 }), [2, 1]);\n\n      over = _.over([['a', 1]]);\n\n      assert.deepEqual(over({ 'a': 1 }), [true]);\n      assert.deepEqual(over({ 'a': 2 }), [false]);\n    });\n\n    QUnit.test('should provide arguments to predicates', function(assert) {\n      assert.expect(1);\n\n      var over = _.over(function() {\n        return slice.call(arguments);\n      });\n\n      assert.deepEqual(over('a', 'b', 'c'), [['a', 'b', 'c']]);\n    });\n\n    QUnit.test('should use `this` binding of function for `iteratees`', function(assert) {\n      assert.expect(1);\n\n      var over = _.over(function() { return this.b; }, function() { return this.a; }),\n          object = { 'over': over, 'a': 1, 'b': 2 };\n\n      assert.deepEqual(object.over(), [2, 1]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.overEvery');\n\n  (function() {\n    QUnit.test('should create a function that returns `true` if all predicates return truthy', function(assert) {\n      assert.expect(1);\n\n      var over = _.overEvery(stubTrue, stubOne, stubA);\n      assert.strictEqual(over(), true);\n    });\n\n    QUnit.test('should return `false` as soon as a predicate returns falsey', function(assert) {\n      assert.expect(2);\n\n      var count = 0,\n          countFalse = function() { count++; return false; },\n          countTrue = function() { count++; return true; },\n          over = _.overEvery(countTrue, countFalse, countTrue);\n\n      assert.strictEqual(over(), false);\n      assert.strictEqual(count, 2);\n    });\n\n    QUnit.test('should use `_.identity` when a predicate is nullish', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery(undefined, null);\n\n      assert.strictEqual(over(true), true);\n      assert.strictEqual(over(false), false);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery('b', 'a');\n\n      assert.strictEqual(over({ 'a': 1, 'b': 1 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 1 }), false);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery({ 'b': 2 }, { 'a': 1 });\n\n      assert.strictEqual(over({ 'a': 1, 'b': 2 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 2 }), false);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery([['b', 2], ['a', 1]]);\n\n      assert.strictEqual(over({ 'a': 1, 'b': 2 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 2 }), false);\n    });\n\n    QUnit.test('should differentiate between `_.property` and `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(5);\n\n      var over = _.overEvery(['a', 1]);\n\n      assert.strictEqual(over({ 'a': 1, '1': 1 }), true);\n      assert.strictEqual(over({ 'a': 1, '1': 0 }), false);\n      assert.strictEqual(over({ 'a': 0, '1': 1 }), false);\n\n      over = _.overEvery([['a', 1]]);\n\n      assert.strictEqual(over({ 'a': 1 }), true);\n      assert.strictEqual(over({ 'a': 2 }), false);\n    });\n\n    QUnit.test('should flatten `predicates`', function(assert) {\n      assert.expect(1);\n\n      var over = _.overEvery(stubTrue, [stubFalse]);\n      assert.strictEqual(over(), false);\n    });\n\n    QUnit.test('should provide arguments to predicates', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      var over = _.overEvery(function() {\n        args = slice.call(arguments);\n      });\n\n      over('a', 'b', 'c');\n      assert.deepEqual(args, ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should use `this` binding of function for `predicates`', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery(function() { return this.b; }, function() { return this.a; }),\n          object = { 'over': over, 'a': 1, 'b': 2 };\n\n      assert.strictEqual(object.over(), true);\n\n      object.a = 0;\n      assert.strictEqual(object.over(), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.overSome');\n\n  (function() {\n    QUnit.test('should create a function that returns `true` if any predicates return truthy', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome(stubFalse, stubOne, stubString);\n      assert.strictEqual(over(), true);\n\n      over = _.overSome(stubNull, stubA, stubZero);\n      assert.strictEqual(over(), true);\n    });\n\n    QUnit.test('should return `true` as soon as `predicate` returns truthy', function(assert) {\n      assert.expect(2);\n\n      var count = 0,\n          countFalse = function() { count++; return false; },\n          countTrue = function() { count++; return true; },\n          over = _.overSome(countFalse, countTrue, countFalse);\n\n      assert.strictEqual(over(), true);\n      assert.strictEqual(count, 2);\n    });\n\n    QUnit.test('should return `false` if all predicates return falsey', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome(stubFalse, stubFalse, stubFalse);\n      assert.strictEqual(over(), false);\n\n      over = _.overSome(stubNull, stubZero, stubString);\n      assert.strictEqual(over(), false);\n    });\n\n    QUnit.test('should use `_.identity` when a predicate is nullish', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome(undefined, null);\n\n      assert.strictEqual(over(true), true);\n      assert.strictEqual(over(false), false);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome('b', 'a');\n\n      assert.strictEqual(over({ 'a': 1, 'b': 0 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 0 }), false);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome({ 'b': 2 }, { 'a': 1 });\n\n      assert.strictEqual(over({ 'a': 0, 'b': 2 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 0 }), false);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome([['b', 2], ['a', 1]]);\n\n      assert.strictEqual(over({ 'a': 0, 'b': 2 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 0 }), false);\n    });\n\n    QUnit.test('should differentiate between `_.property` and `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(5);\n\n      var over = _.overSome(['a', 1]);\n\n      assert.strictEqual(over({ 'a': 0, '1': 0 }), false);\n      assert.strictEqual(over({ 'a': 1, '1': 0 }), true);\n      assert.strictEqual(over({ 'a': 0, '1': 1 }), true);\n\n      over = _.overSome([['a', 1]]);\n\n      assert.strictEqual(over({ 'a': 1 }), true);\n      assert.strictEqual(over({ 'a': 2 }), false);\n    });\n\n    QUnit.test('should flatten `predicates`', function(assert) {\n      assert.expect(1);\n\n      var over = _.overSome(stubFalse, [stubTrue]);\n      assert.strictEqual(over(), true);\n    });\n\n    QUnit.test('should provide arguments to predicates', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      var over = _.overSome(function() {\n        args = slice.call(arguments);\n      });\n\n      over('a', 'b', 'c');\n      assert.deepEqual(args, ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should use `this` binding of function for `predicates`', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome(function() { return this.b; }, function() { return this.a; }),\n          object = { 'over': over, 'a': 1, 'b': 2 };\n\n      assert.strictEqual(object.over(), true);\n\n      object.a = object.b = 0;\n      assert.strictEqual(object.over(), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pad');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should pad a string to a given length', function(assert) {\n      assert.expect(1);\n\n      var values = [, undefined],\n          expected = lodashStable.map(values, lodashStable.constant(' abc  '));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.pad(string, 6, value) : _.pad(string, 6);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should truncate pad characters to fit the pad length', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.pad(string, 8), '  abc   ');\n      assert.strictEqual(_.pad(string, 8, '_-'), '_-abc_-_');\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(1);\n\n      var values = [Object(string), { 'toString': lodashStable.constant(string) }],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.pad(value, 6) === ' abc  ';\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.padEnd');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should pad a string to a given length', function(assert) {\n      assert.expect(1);\n\n      var values = [, undefined],\n          expected = lodashStable.map(values, lodashStable.constant('abc   '));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.padEnd(string, 6, value) : _.padEnd(string, 6);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should truncate pad characters to fit the pad length', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.padEnd(string, 6, '_-'), 'abc_-_');\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(1);\n\n      var values = [Object(string), { 'toString': lodashStable.constant(string) }],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.padEnd(value, 6) === 'abc   ';\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.padStart');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should pad a string to a given length', function(assert) {\n      assert.expect(1);\n\n      var values = [, undefined],\n          expected = lodashStable.map(values, lodashStable.constant('   abc'));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.padStart(string, 6, value) : _.padStart(string, 6);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should truncate pad characters to fit the pad length', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.padStart(string, 6, '_-'), '_-_abc');\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(1);\n\n      var values = [Object(string), { 'toString': lodashStable.constant(string) }],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.padStart(value, 6) === '   abc';\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('pad methods');\n\n  lodashStable.each(['pad', 'padStart', 'padEnd'], function(methodName) {\n    var func = _[methodName],\n        isPad = methodName == 'pad',\n        isStart = methodName == 'padStart',\n        string = 'abc';\n\n    QUnit.test('`_.' + methodName + '` should not pad if string is >= `length`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(func(string, 2), string);\n      assert.strictEqual(func(string, 3), string);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat negative `length` as `0`', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([0, -2], function(length) {\n        assert.strictEqual(func(string, length), string);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `length` to a number', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each(['', '4'], function(length) {\n        var actual = length ? (isStart ? ' abc' : 'abc ') : string;\n        assert.strictEqual(func(string, length), actual);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat nullish values as empty strings', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each([undefined, '_-'], function(chars) {\n        var expected = chars ? (isPad ? '__' : chars) : '  ';\n        assert.strictEqual(func(null, 2, chars), expected);\n        assert.strictEqual(func(undefined, 2, chars), expected);\n        assert.strictEqual(func('', 2, chars), expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `string` when `chars` coerces to an empty string', function(assert) {\n      assert.expect(1);\n\n      var values = ['', Object('')],\n          expected = lodashStable.map(values, lodashStable.constant(string));\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.pad(string, 6, value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.parseInt');\n\n  (function() {\n    QUnit.test('should accept a `radix`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.range(2, 37);\n\n      var actual = lodashStable.map(expected, function(radix) {\n        return _.parseInt('10', radix);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use a radix of `10`, for non-hexadecimals, if `radix` is `undefined` or `0`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.parseInt('10'), 10);\n      assert.strictEqual(_.parseInt('10', 0), 10);\n      assert.strictEqual(_.parseInt('10', 10), 10);\n      assert.strictEqual(_.parseInt('10', undefined), 10);\n    });\n\n    QUnit.test('should use a radix of `16`, for hexadecimals, if `radix` is `undefined` or `0`', function(assert) {\n      assert.expect(8);\n\n      lodashStable.each(['0x20', '0X20'], function(string) {\n        assert.strictEqual(_.parseInt(string), 32);\n        assert.strictEqual(_.parseInt(string, 0), 32);\n        assert.strictEqual(_.parseInt(string, 16), 32);\n        assert.strictEqual(_.parseInt(string, undefined), 32);\n      });\n    });\n\n    QUnit.test('should use a radix of `10` for string with leading zeros', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.parseInt('08'), 8);\n      assert.strictEqual(_.parseInt('08', 10), 8);\n    });\n\n    QUnit.test('should parse strings with leading whitespace', function(assert) {\n      assert.expect(2);\n\n      var expected = [8, 8, 10, 10, 32, 32, 32, 32];\n\n      lodashStable.times(2, function(index) {\n        var actual = [],\n            func = (index ? (lodashBizarro || {}) : _).parseInt;\n\n        if (func) {\n          lodashStable.times(2, function(otherIndex) {\n            var string = otherIndex ? '10' : '08';\n            actual.push(\n              func(whitespace + string, 10),\n              func(whitespace + string)\n            );\n          });\n\n          lodashStable.each(['0x20', '0X20'], function(string) {\n            actual.push(\n              func(whitespace + string),\n              func(whitespace + string, 16)\n            );\n          });\n\n          assert.deepEqual(actual, expected);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    QUnit.test('should coerce `radix` to a number', function(assert) {\n      assert.expect(2);\n\n      var object = { 'valueOf': stubZero };\n      assert.strictEqual(_.parseInt('08', object), 8);\n      assert.strictEqual(_.parseInt('0x20', object), 32);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(2);\n\n      var strings = lodashStable.map(['6', '08', '10'], Object),\n          actual = lodashStable.map(strings, _.parseInt);\n\n      assert.deepEqual(actual, [6, 8, 10]);\n\n      actual = lodashStable.map('123', _.parseInt);\n      assert.deepEqual(actual, [1, 2, 3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('partial methods');\n\n  lodashStable.each(['partial', 'partialRight'], function(methodName) {\n    var func = _[methodName],\n        isPartial = methodName == 'partial',\n        ph = func.placeholder;\n\n    QUnit.test('`_.' + methodName + '` partially applies arguments', function(assert) {\n      assert.expect(1);\n\n      var par = func(identity, 'a');\n      assert.strictEqual(par(), 'a');\n    });\n\n    QUnit.test('`_.' + methodName + '` creates a function that can be invoked with additional arguments', function(assert) {\n      assert.expect(1);\n\n      var fn = function(a, b) { return [a, b]; },\n          par = func(fn, 'a'),\n          expected = isPartial ? ['a', 'b'] : ['b', 'a'];\n\n      assert.deepEqual(par('b'), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` works when there are no partially applied arguments and the created function is invoked without additional arguments', function(assert) {\n      assert.expect(1);\n\n      var fn = function() { return arguments.length; },\n          par = func(fn);\n\n      assert.strictEqual(par(), 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` works when there are no partially applied arguments and the created function is invoked with additional arguments', function(assert) {\n      assert.expect(1);\n\n      var par = func(identity);\n      assert.strictEqual(par('a'), 'a');\n    });\n\n    QUnit.test('`_.' + methodName + '` should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var fn = function() { return slice.call(arguments); },\n          par = func(fn, ph, 'b', ph);\n\n      assert.deepEqual(par('a', 'c'), ['a', 'b', 'c']);\n      assert.deepEqual(par('a'), ['a', 'b', undefined]);\n      assert.deepEqual(par(), [undefined, 'b', undefined]);\n\n      if (isPartial) {\n        assert.deepEqual(par('a', 'c', 'd'), ['a', 'b', 'c', 'd']);\n      } else {\n        par = func(fn, ph, 'c', ph);\n        assert.deepEqual(par('a', 'b', 'd'), ['a', 'b', 'c', 'd']);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var _ph = _.placeholder = {},\n            fn = function() { return slice.call(arguments); },\n            par = func(fn, _ph, 'b', ph),\n            expected = isPartial ? ['a', 'b', ph, 'c'] : ['a', 'c', 'b', ph];\n\n        assert.deepEqual(par('a', 'c'), expected);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` creates a function with a `length` of `0`', function(assert) {\n      assert.expect(1);\n\n      var fn = function(a, b, c) {},\n          par = func(fn, 'a');\n\n      assert.strictEqual(par.length, 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ensure `new par` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var object = {},\n          par = func(Foo);\n\n      assert.ok(new par instanceof Foo);\n      assert.strictEqual(new par(true), object);\n    });\n\n    QUnit.test('`_.' + methodName + '` should clone metadata for created functions', function(assert) {\n      assert.expect(3);\n\n      function greet(greeting, name) {\n        return greeting + ' ' + name;\n      }\n\n      var par1 = func(greet, 'hi'),\n          par2 = func(par1, 'barney'),\n          par3 = func(par1, 'pebbles');\n\n      assert.strictEqual(par1('fred'), isPartial ? 'hi fred' : 'fred hi');\n      assert.strictEqual(par2(), isPartial ? 'hi barney'  : 'barney hi');\n      assert.strictEqual(par3(), isPartial ? 'hi pebbles' : 'pebbles hi');\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with curried functions', function(assert) {\n      assert.expect(2);\n\n      var fn = function(a, b, c) { return a + b + c; },\n          curried = _.curry(func(fn, 1), 2);\n\n      assert.strictEqual(curried(2, 3), 6);\n      assert.strictEqual(curried(2)(3), 6);\n    });\n\n    QUnit.test('should work with placeholders and curried functions', function(assert) {\n      assert.expect(1);\n\n      var fn = function() { return slice.call(arguments); },\n          curried = _.curry(fn),\n          par = func(curried, ph, 'b', ph, 'd');\n\n      assert.deepEqual(par('a', 'c'), ['a', 'b', 'c', 'd']);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.partialRight');\n\n  (function() {\n    QUnit.test('should work as a deep `_.defaults`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': 2 } },\n          source = { 'a': { 'b': 3, 'c': 3 } },\n          expected = { 'a': { 'b': 2, 'c': 3 } };\n\n      var defaultsDeep = _.partialRight(_.mergeWith, function deep(value, other) {\n        return lodashStable.isObject(value) ? _.mergeWith(value, other, deep) : value;\n      });\n\n      assert.deepEqual(defaultsDeep(object, source), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('methods using `createWrapper`');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    var ph1 = _.bind.placeholder,\n        ph2 = _.bindKey.placeholder,\n        ph3 = _.partial.placeholder,\n        ph4 = _.partialRight.placeholder;\n\n    QUnit.test('should work with combinations of partial functions', function(assert) {\n      assert.expect(1);\n\n      var a = _.partial(fn),\n          b = _.partialRight(a, 3),\n          c = _.partial(b, 1);\n\n      assert.deepEqual(c(2), [1, 2, 3]);\n    });\n\n    QUnit.test('should work with combinations of bound and partial functions', function(assert) {\n      assert.expect(3);\n\n      var fn = function() {\n        var result = [this.a];\n        push.apply(result, arguments);\n        return result;\n      };\n\n      var expected = [1, 2, 3, 4],\n          object = { 'a': 1, 'fn': fn };\n\n      var a = _.bindKey(object, 'fn'),\n          b = _.partialRight(a, 4),\n          c = _.partial(b, 2);\n\n      assert.deepEqual(c(3), expected);\n\n      a = _.bind(fn, object);\n      b = _.partialRight(a, 4);\n      c = _.partial(b, 2);\n\n      assert.deepEqual(c(3), expected);\n\n      a = _.partial(fn, 2);\n      b = _.bind(a, object);\n      c = _.partialRight(b, 4);\n\n      assert.deepEqual(c(3), expected);\n    });\n\n    QUnit.test('should ensure `new combo` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(a, b, c) {\n        return b === 0 && object;\n      }\n\n      var combo = _.partial(_.partialRight(Foo, 3), 1),\n          object = {};\n\n      assert.ok(new combo(2) instanceof Foo);\n      assert.strictEqual(new combo(0), object);\n    });\n\n    QUnit.test('should work with combinations of functions with placeholders', function(assert) {\n      assert.expect(3);\n\n      var expected = [1, 2, 3, 4, 5, 6],\n          object = { 'fn': fn };\n\n      var a = _.bindKey(object, 'fn', ph2, 2),\n          b = _.partialRight(a, ph4, 6),\n          c = _.partial(b, 1, ph3, 4);\n\n      assert.deepEqual(c(3, 5), expected);\n\n      a = _.bind(fn, object, ph1, 2);\n      b = _.partialRight(a, ph4, 6);\n      c = _.partial(b, 1, ph3, 4);\n\n      assert.deepEqual(c(3, 5), expected);\n\n      a = _.partial(fn, ph3, 2);\n      b = _.bind(a, object, 1, ph1, 4);\n      c = _.partialRight(b, ph4, 6);\n\n      assert.deepEqual(c(3, 5), expected);\n    });\n\n    QUnit.test('should work with combinations of functions with overlapping placeholders', function(assert) {\n      assert.expect(3);\n\n      var expected = [1, 2, 3, 4],\n          object = { 'fn': fn };\n\n      var a = _.bindKey(object, 'fn', ph2, 2),\n          b = _.partialRight(a, ph4, 4),\n          c = _.partial(b, ph3, 3);\n\n      assert.deepEqual(c(1), expected);\n\n      a = _.bind(fn, object, ph1, 2);\n      b = _.partialRight(a, ph4, 4);\n      c = _.partial(b, ph3, 3);\n\n      assert.deepEqual(c(1), expected);\n\n      a = _.partial(fn, ph3, 2);\n      b = _.bind(a, object, ph1, 3);\n      c = _.partialRight(b, ph4, 4);\n\n      assert.deepEqual(c(1), expected);\n    });\n\n    QUnit.test('should work with recursively bound functions', function(assert) {\n      assert.expect(1);\n\n      var fn = function() {\n        return this.a;\n      };\n\n      var a = _.bind(fn, { 'a': 1 }),\n          b = _.bind(a,  { 'a': 2 }),\n          c = _.bind(b,  { 'a': 3 });\n\n      assert.strictEqual(c(), 1);\n    });\n\n    QUnit.test('should work when hot', function(assert) {\n      assert.expect(12);\n\n      lodashStable.times(2, function(index) {\n        var fn = function() {\n          var result = [this];\n          push.apply(result, arguments);\n          return result;\n        };\n\n        var object = {},\n            bound1 = index ? _.bind(fn, object, 1) : _.bind(fn, object),\n            expected = [object, 1, 2, 3];\n\n        var actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var bound2 = index ? _.bind(bound1, null, 2) : _.bind(bound1);\n          return index ? bound2(3) : bound2(1, 2, 3);\n        }));\n\n        assert.deepEqual(actual, expected);\n\n        actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var bound1 = index ? _.bind(fn, object, 1) : _.bind(fn, object),\n              bound2 = index ? _.bind(bound1, null, 2) : _.bind(bound1);\n\n          return index ? bound2(3) : bound2(1, 2, 3);\n        }));\n\n        assert.deepEqual(actual, expected);\n      });\n\n      lodashStable.each(['curry', 'curryRight'], function(methodName, index) {\n        var fn = function(a, b, c) { return [a, b, c]; },\n            curried = _[methodName](fn),\n            expected = index ? [3, 2, 1] :  [1, 2, 3];\n\n        var actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          return curried(1)(2)(3);\n        }));\n\n        assert.deepEqual(actual, expected);\n\n        actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var curried = _[methodName](fn);\n          return curried(1)(2)(3);\n        }));\n\n        assert.deepEqual(actual, expected);\n      });\n\n      lodashStable.each(['partial', 'partialRight'], function(methodName, index) {\n        var func = _[methodName],\n            fn = function() { return slice.call(arguments); },\n            par1 = func(fn, 1),\n            expected = index ? [3, 2, 1] : [1, 2, 3];\n\n        var actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var par2 = func(par1, 2);\n          return par2(3);\n        }));\n\n        assert.deepEqual(actual, expected);\n\n        actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var par1 = func(fn, 1),\n              par2 = func(par1, 2);\n\n          return par2(3);\n        }));\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.partition');\n\n  (function() {\n    var array = [1, 0, 1];\n\n    QUnit.test('should split elements into two groups by `predicate`', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.partition([], identity), [[], []]);\n      assert.deepEqual(_.partition(array, stubTrue), [array, []]);\n      assert.deepEqual(_.partition(array, stubFalse), [[], array]);\n    });\n\n    QUnit.test('should use `_.identity` when `predicate` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([[1, 1], [0]]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.partition(array, value) : _.partition(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 1 }, { 'a': 1 }, { 'b': 2 }],\n          actual = _.partition(objects, 'a');\n\n      assert.deepEqual(actual, [objects.slice(0, 2), objects.slice(2)]);\n    });\n\n    QUnit.test('should work with a number for `predicate`', function(assert) {\n      assert.expect(2);\n\n      var array = [\n        [1, 0],\n        [0, 1],\n        [1, 0]\n      ];\n\n      assert.deepEqual(_.partition(array, 0), [[array[0], array[2]], [array[1]]]);\n      assert.deepEqual(_.partition(array, 1), [[array[1]], [array[0], array[2]]]);\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.partition({ 'a': 1.1, 'b': 0.2, 'c': 1.3 }, Math.floor);\n      assert.deepEqual(actual, [[1.1, 1.3], [0.2]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pick');\n\n  (function() {\n    var args = toArgs(['a', 'c']),\n        object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n        nested = { 'a': 1, 'b': { 'c': 2, 'd': 3 } };\n\n    QUnit.test('should flatten `paths`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.pick(object, 'a', 'c'), { 'a': 1, 'c': 3 });\n      assert.deepEqual(_.pick(object, ['a', 'd'], 'c'), { 'a': 1, 'c': 3, 'd': 4 });\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.pick(nested, 'b.c'), { 'b': { 'c': 2 } });\n    });\n\n    QUnit.test('should support path arrays', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } },\n          actual = _.pick(object, [['a.b']]);\n\n      assert.deepEqual(actual, { 'a.b': 1 });\n    });\n\n    QUnit.test('should pick a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.deepEqual(_.pick(object, path), { 'a.b': 1 });\n      });\n    });\n\n    QUnit.test('should coerce `paths` to strings', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.pick({ '0': 'a', '1': 'b' }, 0), { '0': 'a' });\n    });\n\n    QUnit.test('should return an empty object when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([null, undefined], function(value) {\n        assert.deepEqual(_.pick(value, 'valueOf'), {});\n      });\n    });\n\n    QUnit.test('should work with a primitive `object`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.pick('', 'slice'), { 'slice': ''.slice });\n    });\n\n    QUnit.test('should work with `arguments` object `paths`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.pick(object, args), { 'a': 1, 'c': 3 });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pickBy');\n\n  (function() {\n    QUnit.test('should work with a predicate argument', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\n\n      var actual = _.pickBy(object, function(n) {\n        return n == 1 || n == 3;\n      });\n\n      assert.deepEqual(actual, { 'a': 1, 'c': 3 });\n    });\n\n    QUnit.test('should not treat keys with dots as deep paths', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a.b.c': 1 },\n          actual = _.pickBy(object, stubTrue);\n\n      assert.deepEqual(actual, { 'a.b.c': 1 });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('pick methods');\n\n  lodashStable.each(['pick', 'pickBy'], function(methodName) {\n    var expected = { 'a': 1, 'c': 3 },\n        func = _[methodName],\n        isPick = methodName == 'pick',\n        object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n        resolve = lodashStable.nthArg(1);\n\n    if (methodName == 'pickBy') {\n      resolve = function(object, props) {\n        props = lodashStable.castArray(props);\n        return function(value) {\n          return lodashStable.some(props, function(key) {\n            key = lodashStable.isSymbol(key) ? key : lodashStable.toString(key);\n            return object[key] === value;\n          });\n        };\n      };\n    }\n    QUnit.test('`_.' + methodName + '` should create an object of picked string keyed properties', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(object, resolve(object, 'a')), { 'a': 1 });\n      assert.deepEqual(func(object, resolve(object, ['a', 'c'])), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should pick inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype = object;\n\n      var foo = new Foo;\n      assert.deepEqual(func(foo, resolve(foo, ['a', 'c'])), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)],\n          expected = [{ '-0': 'a' }, { '-0': 'a' }, { '0': 'b' }, { '0': 'b' }];\n\n      var actual = lodashStable.map(props, function(key) {\n        return func(object, resolve(object, key));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should pick symbols', function(assert) {\n      assert.expect(3);\n\n      function Foo() {\n        this[symbol] = 1;\n      }\n\n      if (Symbol) {\n        var symbol2 = Symbol('b');\n        Foo.prototype[symbol2] = 2;\n\n        var symbol3 = Symbol('c');\n        defineProperty(Foo.prototype, symbol3, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 3\n        });\n\n        var foo = new Foo,\n            actual = func(foo, resolve(foo, [symbol, symbol2, symbol3]));\n\n        assert.strictEqual(actual[symbol], 1);\n        assert.strictEqual(actual[symbol2], 2);\n\n        if (isPick) {\n          assert.strictEqual(actual[symbol3], 3);\n        } else {\n          assert.notOk(symbol3 in actual);\n        }\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with an array `object`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(func(array, resolve(array, '1')), { '1': 2 });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.property');\n\n  (function() {\n    QUnit.test('should create a function that plucks a property value of a given object', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': 1 };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop.length, 1);\n        assert.strictEqual(prop(object), 1);\n      });\n    });\n\n    QUnit.test('should pluck deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(object), 2);\n      });\n    });\n\n    QUnit.test('should pluck inherited property values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(new Foo), 1);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3];\n\n      lodashStable.each([1, [1]], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(array), 2);\n      });\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        var prop = _.property(key);\n        return prop(object);\n      });\n\n      assert.deepEqual(actual, ['a', 'a', 'b', 'b']);\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var expected = [1, 2, 3, 4],\n          object = { 'null': 1, 'undefined': 2, 'fn': 3, '[object Object]': 4 },\n          paths = [null, undefined, fn, {}];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var prop = _.property(index ? [path] : path);\n          return prop(object);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should pluck a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(object), 1);\n      });\n    });\n\n    QUnit.test('should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var prop = _.property(path);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? prop(value) : prop();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var prop = _.property(path);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? prop(value) : prop();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var object = {};\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(object), undefined);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.propertyOf');\n\n  (function() {\n    QUnit.test('should create a function that plucks a property value of a given key', function(assert) {\n      assert.expect(3);\n\n      var object = { 'a': 1 },\n          propOf = _.propertyOf(object);\n\n      assert.strictEqual(propOf.length, 1);\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.strictEqual(propOf(path), 1);\n      });\n    });\n\n    QUnit.test('should pluck deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': 2 } },\n          propOf = _.propertyOf(object);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(propOf(path), 2);\n      });\n    });\n\n    QUnit.test('should pluck inherited property values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var propOf = _.propertyOf(new Foo);\n\n      lodashStable.each(['b', ['b']], function(path) {\n        assert.strictEqual(propOf(path), 2);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          propOf = _.propertyOf(array);\n\n      lodashStable.each([1, [1]], function(path) {\n        assert.strictEqual(propOf(path), 2);\n      });\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        var propOf = _.propertyOf(object);\n        return propOf(key);\n      });\n\n      assert.deepEqual(actual, ['a', 'a', 'b', 'b']);\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var expected = [1, 2, 3, 4],\n          object = { 'null': 1, 'undefined': 2, 'fn': 3, '[object Object]': 4 },\n          paths = [null, undefined, fn, {}];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var propOf = _.propertyOf(object);\n          return propOf(index ? [path] : path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should pluck a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } },\n          propOf = _.propertyOf(object);\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.strictEqual(propOf(path), 1);\n      });\n    });\n\n    QUnit.test('should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var propOf = index ? _.propertyOf(value) : _.propertyOf();\n          return propOf(path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var propOf = index ? _.propertyOf(value) : _.propertyOf();\n          return propOf(path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var propOf = _.propertyOf({});\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        assert.strictEqual(propOf(path), undefined);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pullAll');\n\n  (function() {\n    QUnit.test('should work with the same value for `array` and `values`', function(assert) {\n      assert.expect(1);\n\n      var array = [{ 'a': 1 }, { 'b': 2 }],\n          actual = _.pullAll(array, array);\n\n      assert.deepEqual(actual, []);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pullAllBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n      var actual = _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], function(object) {\n        return object.x;\n      });\n\n      assert.deepEqual(actual, [{ 'x': 2 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args,\n          array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n      _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [{ 'x': 1 }]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pullAllWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 1 }, { 'x': 2, 'y': 2 }, { 'x': 3, 'y': 3 }],\n          expected = [objects[0], objects[2]],\n          actual = _.pullAllWith(objects, [{ 'x': 2, 'y': 2 }], lodashStable.isEqual);\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('pull methods');\n\n  lodashStable.each(['pull', 'pullAll', 'pullAllWith'], function(methodName) {\n    var func = _[methodName],\n        isPull = methodName == 'pull';\n\n    function pull(array, values) {\n      return isPull\n        ? func.apply(undefined, [array].concat(values))\n        : func(array, values);\n    }\n\n    QUnit.test('`_.' + methodName + '` should modify and return the array', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = pull(array, [1, 3]);\n\n      assert.strictEqual(actual, array);\n      assert.deepEqual(array, [2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve holes in arrays', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4];\n      delete array[1];\n      delete array[3];\n\n      pull(array, [1]);\n      assert.notOk('0' in array);\n      assert.notOk('2' in array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat holes as `undefined`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      delete array[1];\n\n      pull(array, [undefined]);\n      assert.deepEqual(array, [1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, NaN, 3, NaN];\n\n      pull(array, [NaN]);\n      assert.deepEqual(array, [1, 3]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pullAt');\n\n  (function() {\n    QUnit.test('should modify the array and return removed elements', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = _.pullAt(array, [0, 1]);\n\n      assert.deepEqual(array, [3]);\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should work with unsorted indexes', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n          actual = _.pullAt(array, [1, 3, 11, 7, 5, 9]);\n\n      assert.deepEqual(array, [1, 3, 5, 7, 9, 11]);\n      assert.deepEqual(actual, [2, 4, 12, 8, 6, 10]);\n    });\n\n    QUnit.test('should work with repeated indexes', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4],\n          actual = _.pullAt(array, [0, 2, 0, 1, 0, 2]);\n\n      assert.deepEqual(array, [4]);\n      assert.deepEqual(actual, [1, 3, 1, 2, 1, 3]);\n    });\n\n    QUnit.test('should use `undefined` for nonexistent indexes', function(assert) {\n      assert.expect(2);\n\n      var array = ['a', 'b', 'c'],\n          actual = _.pullAt(array, [2, 4, 0]);\n\n      assert.deepEqual(array, ['b']);\n      assert.deepEqual(actual, ['c', undefined, 'a']);\n    });\n\n    QUnit.test('should flatten `indexes`', function(assert) {\n      assert.expect(4);\n\n      var array = ['a', 'b', 'c'];\n      assert.deepEqual(_.pullAt(array, 2, 0), ['c', 'a']);\n      assert.deepEqual(array, ['b']);\n\n      array = ['a', 'b', 'c', 'd'];\n      assert.deepEqual(_.pullAt(array, [3, 0], 2), ['d', 'a', 'c']);\n      assert.deepEqual(array, ['b']);\n    });\n\n    QUnit.test('should return an empty array when no indexes are given', function(assert) {\n      assert.expect(4);\n\n      var array = ['a', 'b', 'c'],\n          actual = _.pullAt(array);\n\n      assert.deepEqual(array, ['a', 'b', 'c']);\n      assert.deepEqual(actual, []);\n\n      actual = _.pullAt(array, [], []);\n\n      assert.deepEqual(array, ['a', 'b', 'c']);\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('should work with non-index paths', function(assert) {\n      assert.expect(2);\n\n      var values = lodashStable.reject(empties, function(value) {\n        return (value === 0) || lodashStable.isArray(value);\n      }).concat(-1, 1.1);\n\n      var array = lodashStable.transform(values, function(result, value) {\n        result[value] = 1;\n      }, []);\n\n      var expected = lodashStable.map(values, stubOne),\n          actual = _.pullAt(array, values);\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(values, noop);\n      actual = lodashStable.at(array, values);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        var array = [-1];\n        array['-0'] = -2;\n        return _.pullAt(array, key);\n      });\n\n      assert.deepEqual(actual, [[-2], [-2], [-1], [-1]]);\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(3);\n\n      var array = [];\n      array.a = { 'b': 2 };\n\n      var actual = _.pullAt(array, 'a.b');\n\n      assert.deepEqual(actual, [2]);\n      assert.deepEqual(array.a, {});\n\n      try {\n        actual = _.pullAt(array, 'a.b.c');\n      } catch (e) {}\n\n      assert.deepEqual(actual, [undefined]);\n    });\n\n    QUnit.test('should work with a falsey `array` when keys are given', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.slice(),\n          expected = lodashStable.map(values, lodashStable.constant(Array(4)));\n\n      var actual = lodashStable.map(values, function(array) {\n        try {\n          return _.pullAt(array, 0, 1, 'pop', 'push');\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.random');\n\n  (function() {\n    var array = Array(1000);\n\n    QUnit.test('should return `0` or `1` when no arguments are given', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.uniq(lodashStable.map(array, function() {\n        return _.random();\n      })).sort();\n\n      assert.deepEqual(actual, [0, 1]);\n    });\n\n    QUnit.test('should support a `min` and `max`', function(assert) {\n      assert.expect(1);\n\n      var min = 5,\n          max = 10;\n\n      assert.ok(lodashStable.some(array, function() {\n        var result = _.random(min, max);\n        return result >= min && result <= max;\n      }));\n    });\n\n    QUnit.test('should support not providing a `max`', function(assert) {\n      assert.expect(1);\n\n      var min = 0,\n          max = 5;\n\n      assert.ok(lodashStable.some(array, function() {\n        var result = _.random(max);\n        return result >= min && result <= max;\n      }));\n    });\n\n    QUnit.test('should swap `min` and `max` when `min` > `max`', function(assert) {\n      assert.expect(1);\n\n      var min = 4,\n          max = 2,\n          expected = [2, 3, 4];\n\n      var actual = lodashStable.uniq(lodashStable.map(array, function() {\n        return _.random(min, max);\n      })).sort();\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should support large integer values', function(assert) {\n      assert.expect(2);\n\n      var min = Math.pow(2, 31),\n          max = Math.pow(2, 62);\n\n      assert.ok(lodashStable.every(array, function() {\n        var result = _.random(min, max);\n        return result >= min && result <= max;\n      }));\n\n      assert.ok(lodashStable.some(array, function() {\n        return _.random(MAX_INTEGER);\n      }));\n    });\n\n    QUnit.test('should coerce arguments to finite numbers', function(assert) {\n      assert.expect(1);\n\n      var actual = [\n        _.random(NaN, NaN),\n        _.random('1', '1'),\n        _.random(Infinity, Infinity)\n      ];\n\n      assert.deepEqual(actual, [0, 1, MAX_INTEGER]);\n    });\n\n    QUnit.test('should support floats', function(assert) {\n      assert.expect(2);\n\n      var min = 1.5,\n          max = 1.6,\n          actual = _.random(min, max);\n\n      assert.ok(actual % 1);\n      assert.ok(actual >= min && actual <= max);\n    });\n\n    QUnit.test('should support providing a `floating`', function(assert) {\n      assert.expect(3);\n\n      var actual = _.random(true);\n      assert.ok(actual % 1 && actual >= 0 && actual <= 1);\n\n      actual = _.random(2, true);\n      assert.ok(actual % 1 && actual >= 0 && actual <= 2);\n\n      actual = _.random(2, 4, true);\n      assert.ok(actual % 1 && actual >= 2 && actual <= 4);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3],\n          expected = lodashStable.map(array, stubTrue),\n          randoms = lodashStable.map(array, _.random);\n\n      var actual = lodashStable.map(randoms, function(result, index) {\n        return result >= 0 && result <= array[index] && (result % 1) == 0;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('range methods');\n\n  lodashStable.each(['range', 'rangeRight'], function(methodName) {\n    var func = _[methodName],\n        isRange = methodName == 'range';\n\n    function resolve(range) {\n      return isRange ? range : range.reverse();\n    }\n\n    QUnit.test('`_.' + methodName + '` should infer the sign of `step` when only `end` is given', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(4), resolve([0, 1, 2, 3]));\n      assert.deepEqual(func(-4), resolve([0, -1, -2, -3]));\n    });\n\n    QUnit.test('`_.' + methodName + '` should infer the sign of `step` when only `start` and `end` are given', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(1, 5), resolve([1, 2, 3, 4]));\n      assert.deepEqual(func(5, 1), resolve([5, 4, 3, 2]));\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `start`, `end`, and `step`', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(func(0, -4, -1), resolve([0, -1, -2, -3]));\n      assert.deepEqual(func(5, 1, -1), resolve([5, 4, 3, 2]));\n      assert.deepEqual(func(0, 20, 5), resolve([0, 5, 10, 15]));\n    });\n\n    QUnit.test('`_.' + methodName + '` should support a `step` of `0`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(1, 4, 0), [1, 1, 1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `step` larger than `end`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(1, 5, 20), [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `step`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(0, -4, -1), resolve([0, -1, -2, -3]));\n      assert.deepEqual(func(21, 10, -3), resolve([21, 18, 15, 12]));\n    });\n\n    QUnit.test('`_.' + methodName + '` should support `start` of `-0`', function(assert) {\n      assert.expect(1);\n\n      var actual = func(-0, 1);\n      assert.strictEqual(1 / actual[0], -Infinity);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat falsey `start` as `0`', function(assert) {\n      assert.expect(13);\n\n      lodashStable.each(falsey, function(value, index) {\n        if (index) {\n          assert.deepEqual(func(value), []);\n          assert.deepEqual(func(value, 1), [0]);\n        } else {\n          assert.deepEqual(func(), []);\n        }\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce arguments to finite numbers', function(assert) {\n      assert.expect(1);\n\n      var actual = [\n        func('1'),\n        func('0', 1),\n        func(0, 1, '1'),\n        func(NaN),\n        func(NaN, NaN)\n      ];\n\n      assert.deepEqual(actual, [[0], [0], [0], [], []]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          object = { 'a': 1, 'b': 2, 'c': 3 },\n          expected = lodashStable.map([[0], [0, 1], [0, 1, 2]], resolve);\n\n      lodashStable.each([array, object], function(collection) {\n        var actual = lodashStable.map(collection, func);\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.rearg');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should reorder arguments provided to `func`', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [2, 0, 1]);\n      assert.deepEqual(rearged('b', 'c', 'a'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should work with repeated indexes', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [1, 1, 1]);\n      assert.deepEqual(rearged('c', 'a', 'b'), ['a', 'a', 'a']);\n    });\n\n    QUnit.test('should use `undefined` for nonexistent indexes', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [1, 4]);\n      assert.deepEqual(rearged('b', 'a', 'c'), ['a', undefined, 'c']);\n    });\n\n    QUnit.test('should use `undefined` for non-index values', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.reject(empties, function(value) {\n        return (value === 0) || lodashStable.isArray(value);\n      }).concat(-1, 1.1);\n\n      var expected = lodashStable.map(values, lodashStable.constant([undefined, 'b', 'c']));\n\n      var actual = lodashStable.map(values, function(value) {\n        var rearged = _.rearg(fn, [value]);\n        return rearged('a', 'b', 'c');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not rearrange arguments when no indexes are given', function(assert) {\n      assert.expect(2);\n\n      var rearged = _.rearg(fn);\n      assert.deepEqual(rearged('a', 'b', 'c'), ['a', 'b', 'c']);\n\n      rearged = _.rearg(fn, [], []);\n      assert.deepEqual(rearged('a', 'b', 'c'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should accept multiple index arguments', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, 2, 0, 1);\n      assert.deepEqual(rearged('b', 'c', 'a'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should accept multiple arrays of indexes', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [2], [0, 1]);\n      assert.deepEqual(rearged('b', 'c', 'a'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should work with fewer indexes than arguments', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [1, 0]);\n      assert.deepEqual(rearged('b', 'a', 'c'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should work on functions that have been rearged', function(assert) {\n      assert.expect(1);\n\n      var rearged1 = _.rearg(fn, 2, 1, 0),\n          rearged2 = _.rearg(rearged1, 1, 0, 2);\n\n      assert.deepEqual(rearged2('b', 'c', 'a'), ['a', 'b', 'c']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.reduce');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should use the first element of a collection as the default `accumulator`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.reduce(array), 1);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments when iterating an array', function(assert) {\n      assert.expect(2);\n\n      var args;\n\n      _.reduce(array, function() {\n        args || (args = slice.call(arguments));\n      }, 0);\n\n      assert.deepEqual(args, [0, 1, 0, array]);\n\n      args = undefined;\n      _.reduce(array, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [1, 2, 1, array]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments when iterating an object', function(assert) {\n      assert.expect(2);\n\n      var args,\n          object = { 'a': 1, 'b': 2 },\n          firstKey = _.head(_.keys(object));\n\n      var expected = firstKey == 'a'\n        ? [0, 1, 'a', object]\n        : [0, 2, 'b', object];\n\n      _.reduce(object, function() {\n        args || (args = slice.call(arguments));\n      }, 0);\n\n      assert.deepEqual(args, expected);\n\n      args = undefined;\n      expected = firstKey == 'a'\n        ? [1, 2, 'b', object]\n        : [2, 1, 'a', object];\n\n      _.reduce(object, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.reduceRight');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should use the last element of a collection as the default `accumulator`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.reduceRight(array), 3);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments when iterating an array', function(assert) {\n      assert.expect(2);\n\n      var args;\n\n      _.reduceRight(array, function() {\n        args || (args = slice.call(arguments));\n      }, 0);\n\n      assert.deepEqual(args, [0, 3, 2, array]);\n\n      args = undefined;\n      _.reduceRight(array, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [3, 2, 1, array]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments when iterating an object', function(assert) {\n      assert.expect(2);\n\n      var args,\n          object = { 'a': 1, 'b': 2 },\n          isFIFO = lodashStable.keys(object)[0] == 'a';\n\n      var expected = isFIFO\n        ? [0, 2, 'b', object]\n        : [0, 1, 'a', object];\n\n      _.reduceRight(object, function() {\n        args || (args = slice.call(arguments));\n      }, 0);\n\n      assert.deepEqual(args, expected);\n\n      args = undefined;\n      expected = isFIFO\n        ? [2, 1, 'a', object]\n        : [1, 2, 'b', object];\n\n      _.reduceRight(object, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('reduce methods');\n\n  lodashStable.each(['reduce', 'reduceRight'], function(methodName) {\n    var func = _[methodName],\n        array = [1, 2, 3],\n        isReduce = methodName == 'reduce';\n\n    QUnit.test('`_.' + methodName + '` should reduce a collection to a single value', function(assert) {\n      assert.expect(1);\n\n      var actual = func(['a', 'b', 'c'], function(accumulator, value) {\n        return accumulator + value;\n      }, '');\n\n      assert.strictEqual(actual, isReduce ? 'abc' : 'cba');\n    });\n\n    QUnit.test('`_.' + methodName + '` should support empty collections without an initial `accumulator` value', function(assert) {\n      assert.expect(1);\n\n      var actual = [],\n          expected = lodashStable.map(empties, noop);\n\n      lodashStable.each(empties, function(value) {\n        try {\n          actual.push(func(value, noop));\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support empty collections with an initial `accumulator` value', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, lodashStable.constant('x'));\n\n      var actual = lodashStable.map(empties, function(value) {\n        try {\n          return func(value, noop, 'x');\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle an initial `accumulator` value of `undefined`', function(assert) {\n      assert.expect(1);\n\n      var actual = func([], noop, undefined);\n      assert.strictEqual(actual, undefined);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `undefined` for empty collections when no `accumulator` is given (test in IE > 9 and modern browsers)', function(assert) {\n      assert.expect(2);\n\n      var array = [],\n          object = { '0': 1, 'length': 0 };\n\n      if ('__proto__' in array) {\n        array.__proto__ = object;\n        assert.strictEqual(func(array, noop), undefined);\n      }\n      else {\n        skipAssert(assert);\n      }\n      assert.strictEqual(func(object, noop), undefined);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_(array)[methodName](add), 6);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).chain()[methodName](add) instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.reject');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return elements the `predicate` returns falsey for', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.reject(array, isEven), [1, 3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('filter methods');\n\n  lodashStable.each(['filter', 'reject'], function(methodName) {\n    var array = [1, 2, 3, 4],\n        func = _[methodName],\n        isFilter = methodName == 'filter',\n        objects = [{ 'a': 0 }, { 'a': 1 }];\n\n    QUnit.test('`_.' + methodName + '` should not modify the resulting value from within `predicate`', function(assert) {\n      assert.expect(1);\n\n      var actual = func([0], function(value, index, array) {\n        array[index] = 1;\n        return isFilter;\n      });\n\n      assert.deepEqual(actual, [0]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(objects, 'a'), [objects[isFilter ? 1 : 0]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(objects, objects[1]), [objects[isFilter ? 1 : 0]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not modify wrapped values', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array);\n\n        var actual = wrapped[methodName](function(n) {\n          return n < 3;\n        });\n\n        assert.deepEqual(actual.value(), isFilter ? [1, 2] : [3, 4]);\n\n        actual = wrapped[methodName](function(n) {\n          return n > 2;\n        });\n\n        assert.deepEqual(actual.value(), isFilter ? [3, 4] : [1, 2]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work in a lazy sequence', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            predicate = function(value) { return isFilter ? isEven(value) : !isEven(value); };\n\n        var object = lodashStable.zipObject(lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n          return ['key' + index, index];\n        }));\n\n        var actual = _(array).slice(1).map(square)[methodName](predicate).value();\n        assert.deepEqual(actual, _[methodName](lodashStable.map(array.slice(1), square), predicate));\n\n        actual = _(object).mapValues(square)[methodName](predicate).value();\n        assert.deepEqual(actual, _[methodName](lodashStable.mapValues(object, square), predicate));\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should provide correct `predicate` arguments in a lazy sequence', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var args,\n            array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            expected = [1, 0, lodashStable.map(array.slice(1), square)];\n\n        _(array).slice(1)[methodName](function(value, index, array) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, [1, 0, array.slice(1)]);\n\n        args = undefined;\n        _(array).slice(1).map(square)[methodName](function(value, index, array) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        args = undefined;\n        _(array).slice(1).map(square)[methodName](function(value, index) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        args = undefined;\n        _(array).slice(1).map(square)[methodName](function(value) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, [1]);\n\n        args = undefined;\n        _(array).slice(1).map(square)[methodName](function() {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.remove');\n\n  (function() {\n    QUnit.test('should modify the array and return removed elements', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4],\n          actual = _.remove(array, isEven);\n\n      assert.deepEqual(array, [1, 3]);\n      assert.deepEqual(actual, [2, 4]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var argsList = [],\n          array = [1, 2, 3],\n          clone = array.slice();\n\n      _.remove(array, function(n, index) {\n        var args = slice.call(arguments);\n        args[2] = args[2].slice();\n        argsList.push(args);\n        return isEven(index);\n      });\n\n      assert.deepEqual(argsList, [[1, 0, clone], [2, 1, clone], [3, 2, clone]]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 0, 'b': 1 }, { 'a': 1, 'b': 2 }];\n      _.remove(objects, { 'a': 1 });\n      assert.deepEqual(objects, [{ 'a': 0, 'b': 1 }]);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 0, 'b': 1 }, { 'a': 1, 'b': 2 }];\n      _.remove(objects, ['a', 1]);\n      assert.deepEqual(objects, [{ 'a': 0, 'b': 1 }]);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 0 }, { 'a': 1 }];\n      _.remove(objects, 'a');\n      assert.deepEqual(objects, [{ 'a': 0 }]);\n    });\n\n    QUnit.test('should preserve holes in arrays', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4];\n      delete array[1];\n      delete array[3];\n\n      _.remove(array, function(n) {\n        return n === 1;\n      });\n\n      assert.notOk('0' in array);\n      assert.notOk('2' in array);\n    });\n\n    QUnit.test('should treat holes as `undefined`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      delete array[1];\n\n      _.remove(array, function(n) {\n        return n == null;\n      });\n\n      assert.deepEqual(array, [1, 3]);\n    });\n\n    QUnit.test('should not mutate the array until all elements to remove are determined', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n\n      _.remove(array, function(n, index) {\n        return isEven(index);\n      });\n\n      assert.deepEqual(array, [2]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.repeat');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should repeat a string `n` times', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.repeat('*', 3), '***');\n      assert.strictEqual(_.repeat(string, 2), 'abcabc');\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? string : '';\n      });\n\n      var actual = lodashStable.map(falsey, function(n, index) {\n        return index ? _.repeat(string, n) : _.repeat(string);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty string if `n` is <= `0`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.repeat(string, 0), '');\n      assert.strictEqual(_.repeat(string, -2), '');\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.repeat(string, '2'), 'abcabc');\n      assert.strictEqual(_.repeat(string, 2.6), 'abcabc');\n      assert.strictEqual(_.repeat('*', { 'valueOf': stubThree }), '***');\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.repeat(Object(string), 2), 'abcabc');\n      assert.strictEqual(_.repeat({ 'toString': lodashStable.constant('*') }, 3), '***');\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(['a', 'b', 'c'], _.repeat);\n      assert.deepEqual(actual, ['a', 'b', 'c']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.replace');\n\n  (function() {\n    QUnit.test('should replace the matched pattern', function(assert) {\n      assert.expect(2);\n\n      var string = 'abcde';\n      assert.strictEqual(_.replace(string, 'de', '123'), 'abc123');\n      assert.strictEqual(_.replace(string, /[bd]/g, '-'), 'a-c-e');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.result');\n\n  (function() {\n    var object = { 'a': 1, 'b': stubB };\n\n    QUnit.test('should invoke function values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.result(object, 'b'), 'b');\n    });\n\n    QUnit.test('should invoke default function values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.result(object, 'c', object.b);\n      assert.strictEqual(actual, 'b');\n    });\n\n    QUnit.test('should invoke nested function values', function(assert) {\n      assert.expect(2);\n\n      var value = { 'a': lodashStable.constant({ 'b': stubB }) };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(_.result(value, path), 'b');\n      });\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var value = { 'a': { 'b': function() { return this.c; }, 'c': 1 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(_.result(value, path), 1);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.get and lodash.result');\n\n  lodashStable.each(['get', 'result'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should get string keyed property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1 };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.strictEqual(func(object, path), 1);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        return func(object, key);\n      });\n\n      assert.deepEqual(actual, ['a', 'a', 'b', 'b']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should get symbol keyed property values', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        var object = {};\n        object[symbol] = 1;\n\n        assert.strictEqual(func(object, symbol), 1);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should get deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(func(object, path), 2);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should get a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.strictEqual(func(object, path), 1);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not coerce array paths to strings', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a,b,c': 3, 'a': { 'b': { 'c': 4 } } };\n      assert.strictEqual(func(object, ['a', 'b', 'c']), 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not ignore empty brackets', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { '': 1 } };\n      assert.strictEqual(func(object, 'a[]'), 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle empty paths', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([['', ''], [[], ['']]], function(pair) {\n        assert.strictEqual(func({}, pair[0]), undefined);\n        assert.strictEqual(func({ '': 3 }, pair[1]), 3);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle complex paths', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { '-1.23': { '[\"b\"]': { 'c': { \"['d']\": { '\\ne\\n': { 'f': { 'g': 8 } } } } } } } };\n\n      var paths = [\n        'a[-1.23][\"[\\\\\"b\\\\\"]\"].c[\\'[\\\\\\'d\\\\\\']\\'][\\ne\\n][f].g',\n        ['a', '-1.23', '[\"b\"]', 'c', \"['d']\", '\\ne\\n', 'f', 'g']\n      ];\n\n      lodashStable.each(paths, function(path) {\n        assert.strictEqual(func(object, path), 8);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        assert.strictEqual(func(null, path), undefined);\n        assert.strictEqual(func(undefined, path), undefined);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, noop),\n          paths = ['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']];\n\n      lodashStable.each(paths, function(path) {\n        var actual = lodashStable.map(values, function(value) {\n          return func(value, path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': [, null] };\n\n      lodashStable.each(['a[1].b.c', ['a', '1', 'b', 'c']], function(path) {\n        assert.strictEqual(func(object, path), undefined);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should be able to return `null` values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': null } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(func(object, path), null);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should follow `path` over non-plain objects', function(assert) {\n      assert.expect(2);\n\n      var paths = ['a.b', ['a', 'b']];\n\n      lodashStable.each(paths, function(path) {\n        numberProto.a = { 'b': 2 };\n        assert.strictEqual(func(0, path), 2);\n        delete numberProto.a;\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the default value for `undefined` values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': {} },\n          values = empties.concat(true, new Date, 1, /x/, 'a'),\n          expected = lodashStable.map(values, function(value) { return [value, value]; });\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var actual = lodashStable.map(values, function(value) {\n          return [func(object, path, value), func(null, path, value)];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the default value when `path` is empty', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func({}, [], 'a'), 'a');\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.rest');\n\n  (function() {\n    function fn(a, b, c) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should apply a rest parameter to `func`', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(fn);\n      assert.deepEqual(rest(1, 2, 3, 4), [1, 2, [3, 4]]);\n    });\n\n    QUnit.test('should work with `start`', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(fn, 1);\n      assert.deepEqual(rest(1, 2, 3, 4), [1, [2, 3, 4]]);\n    });\n\n    QUnit.test('should treat `start` as `0` for `NaN` or negative values', function(assert) {\n      assert.expect(1);\n\n      var values = [-1, NaN, 'a'],\n          expected = lodashStable.map(values, lodashStable.constant([[1, 2, 3, 4]]));\n\n      var actual = lodashStable.map(values, function(value) {\n        var rest = _.rest(fn, value);\n        return rest(1, 2, 3, 4);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce `start` to an integer', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(fn, 1.6);\n      assert.deepEqual(rest(1, 2, 3), [1, [2, 3]]);\n    });\n\n    QUnit.test('should use an empty array when `start` is not reached', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(fn);\n      assert.deepEqual(rest(1), [1, undefined, []]);\n    });\n\n    QUnit.test('should work on functions with more than three parameters', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(function(a, b, c, d) {\n        return slice.call(arguments);\n      });\n\n      assert.deepEqual(rest(1, 2, 3, 4, 5), [1, 2, 3, [4, 5]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.reverse');\n\n  (function() {\n    var largeArray = lodashStable.range(LARGE_ARRAY_SIZE).concat(null),\n        smallArray = [0, 1, 2, null];\n\n    QUnit.test('should reverse `array`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = _.reverse(array);\n\n      assert.strictEqual(actual, array);\n      assert.deepEqual(array, [3, 2, 1]);\n    });\n\n    QUnit.test('should return the wrapped reversed `array`', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var array = (index ? largeArray : smallArray).slice(),\n              clone = array.slice(),\n              wrapped = _(array).reverse(),\n              actual = wrapped.value();\n\n          assert.ok(wrapped instanceof _);\n          assert.strictEqual(actual, array);\n          assert.deepEqual(actual, clone.slice().reverse());\n        });\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var array = (index ? largeArray : smallArray).slice(),\n              expected = array.slice(),\n              actual = _(array).slice(1).reverse().value();\n\n          assert.deepEqual(actual, expected.slice(1).reverse());\n          assert.deepEqual(array, expected);\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should be lazy when in a lazy sequence', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var spy = {\n          'toString': function() {\n            throw new Error('spy was revealed');\n          }\n        };\n\n        var array = largeArray.concat(spy),\n            expected = array.slice();\n\n        try {\n          var wrapped = _(array).slice(1).map(String).reverse(),\n              actual = wrapped.last();\n        } catch (e) {}\n\n        assert.ok(wrapped instanceof _);\n        assert.strictEqual(actual, '1');\n        assert.deepEqual(array, expected);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should work in a hybrid sequence', function(assert) {\n      assert.expect(8);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var clone = (index ? largeArray : smallArray).slice();\n\n          lodashStable.each(['map', 'filter'], function(methodName) {\n            var array = clone.slice(),\n                expected = clone.slice(1, -1).reverse(),\n                actual = _(array)[methodName](identity).thru(_.compact).reverse().value();\n\n            assert.deepEqual(actual, expected);\n\n            array = clone.slice();\n            actual = _(array).thru(_.compact)[methodName](identity).pull(1).push(3).reverse().value();\n\n            assert.deepEqual(actual, [3].concat(expected.slice(0, -1)));\n          });\n        });\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('should track the `__chain__` value of a wrapper', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var array = (index ? largeArray : smallArray).slice(),\n              expected = array.slice().reverse(),\n              wrapped = _(array).chain().reverse().head();\n\n          assert.ok(wrapped instanceof _);\n          assert.strictEqual(wrapped.value(), _.head(expected));\n          assert.deepEqual(array, expected);\n        });\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('round methods');\n\n  lodashStable.each(['ceil', 'floor', 'round'], function(methodName) {\n    var func = _[methodName],\n        isCeil = methodName == 'ceil',\n        isFloor = methodName == 'floor';\n\n    QUnit.test('`_.' + methodName + '` should return a rounded number without a precision', function(assert) {\n      assert.expect(1);\n\n      var actual = func(4.006);\n      assert.strictEqual(actual, isCeil ? 5 : 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a precision of `0`', function(assert) {\n      assert.expect(1);\n\n      var actual = func(4.006, 0);\n      assert.strictEqual(actual, isCeil ? 5 : 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a positive precision', function(assert) {\n      assert.expect(2);\n\n      var actual = func(4.016, 2);\n      assert.strictEqual(actual, isFloor ? 4.01 : 4.02);\n\n      actual = func(4.1, 2);\n      assert.strictEqual(actual, 4.1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative precision', function(assert) {\n      assert.expect(1);\n\n      var actual = func(4160, -2);\n      assert.strictEqual(actual, isFloor ? 4100 : 4200);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `precision` to an integer', function(assert) {\n      assert.expect(3);\n\n      var actual = func(4.006, NaN);\n      assert.strictEqual(actual, isCeil ? 5 : 4);\n\n      var expected = isFloor ? 4.01 : 4.02;\n\n      actual = func(4.016, 2.6);\n      assert.strictEqual(actual, expected);\n\n      actual = func(4.016, '+2');\n      assert.strictEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with exponential notation and `precision`', function(assert) {\n      assert.expect(3);\n\n      var actual = func(5e1, 2);\n      assert.deepEqual(actual, 50);\n\n      actual = func('5e', 1);\n      assert.deepEqual(actual, NaN);\n\n      actual = func('5e1e1', 1);\n      assert.deepEqual(actual, NaN);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var values = [[0], [-0], ['0'], ['-0'], [0, 1], [-0, 1], ['0', 1], ['-0', 1]],\n          expected = [Infinity, -Infinity, Infinity, -Infinity, Infinity, -Infinity, Infinity, -Infinity];\n\n      var actual = lodashStable.map(values, function(args) {\n        return 1 / func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not return `NaN` for large `precision` values', function(assert) {\n      assert.expect(1);\n\n      var results = [\n        _.round(10.0000001, 1000),\n        _.round(MAX_SAFE_INTEGER, 293)\n      ];\n\n      var expected = lodashStable.map(results, stubFalse),\n          actual = lodashStable.map(results, lodashStable.isNaN);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.runInContext');\n\n  (function() {\n    QUnit.test('should not require a fully populated `context` object', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var lodash = _.runInContext({\n          'setTimeout': function(func) { func(); }\n        });\n\n        var pass = false;\n        lodash.delay(function() { pass = true; }, 32);\n        assert.ok(pass);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should use a zeroed `_.uniqueId` counter', function(assert) {\n      assert.expect(3);\n\n      if (!isModularize) {\n        lodashStable.times(2, _.uniqueId);\n\n        var oldId = Number(_.uniqueId()),\n            lodash = _.runInContext();\n\n        assert.ok(_.uniqueId() > oldId);\n\n        var id = lodash.uniqueId();\n        assert.strictEqual(id, '1');\n        assert.ok(id < oldId);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sample');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return a random element', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sample(array);\n      assert.ok(lodashStable.includes(array, actual));\n    });\n\n    QUnit.test('should return `undefined` when sampling empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, noop);\n\n      var actual = lodashStable.transform(empties, function(result, value) {\n        try {\n          result.push(_.sample(value));\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should sample an object', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          actual = _.sample(object);\n\n      assert.ok(lodashStable.includes(array, actual));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sampleSize');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return an array of random elements', function(assert) {\n      assert.expect(2);\n\n      var actual = _.sampleSize(array, 2);\n\n      assert.strictEqual(actual.length, 2);\n      assert.deepEqual(lodashStable.difference(actual, array), []);\n    });\n\n    QUnit.test('should contain elements of the collection', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sampleSize(array, array.length).sort();\n\n      assert.deepEqual(actual, array);\n    });\n\n    QUnit.test('should treat falsey `size` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? ['a'] : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(size, index) {\n        return index ? _.sampleSize(['a'], size) : _.sampleSize(['a']);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty array when `n` < `1` or `NaN`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.sampleSize(array, n), []);\n      });\n    });\n\n    QUnit.test('should return all elements when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        var actual = _.sampleSize(array, n).sort();\n        assert.deepEqual(actual, array);\n      });\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sampleSize(array, 1.6);\n      assert.strictEqual(actual.length, 1);\n    });\n\n    QUnit.test('should return an empty array for empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubArray);\n\n      var actual = lodashStable.transform(empties, function(result, value) {\n        try {\n          result.push(_.sampleSize(value, 1));\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should sample an object', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          actual = _.sampleSize(object, 2);\n\n      assert.strictEqual(actual.length, 2);\n      assert.deepEqual(lodashStable.difference(actual, lodashStable.values(object)), []);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([['a']], _.sampleSize);\n      assert.deepEqual(actual, [['a']]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.setWith');\n\n  (function() {\n    QUnit.test('should work with a `customizer` callback', function(assert) {\n      assert.expect(1);\n\n      var actual = _.setWith({ '0': {} }, '[0][1][2]', 3, function(value) {\n        return lodashStable.isObject(value) ? undefined : {};\n      });\n\n      assert.deepEqual(actual, { '0': { '1': { '2': 3 } } });\n    });\n\n    QUnit.test('should work with a `customizer` that returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.setWith({}, 'a[0].b.c', 4, noop);\n      assert.deepEqual(actual, { 'a': [{ 'b': { 'c': 4 } }] });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('set methods');\n\n  lodashStable.each(['update', 'updateWith', 'set', 'setWith'], function(methodName) {\n    var func = _[methodName],\n        isUpdate = /^update/.test(methodName);\n\n    var oldValue = 1,\n        value = 2,\n        updater = isUpdate ? lodashStable.constant(value) : value;\n\n    QUnit.test('`_.' + methodName + '` should set property values', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var object = { 'a': oldValue },\n            actual = func(object, path, updater);\n\n        assert.strictEqual(actual, object);\n        assert.strictEqual(object.a, value);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var props = [-0, Object(-0), 0, Object(0)],\n          expected = lodashStable.map(props, lodashStable.constant(value));\n\n      var actual = lodashStable.map(props, function(key) {\n        var object = { '-0': 'a', '0': 'b' };\n        func(object, key, updater);\n        return object[lodashStable.toString(key)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should unset symbol keyed property values', function(assert) {\n      assert.expect(2);\n\n      if (Symbol) {\n        var object = {};\n        object[symbol] = 1;\n\n        assert.strictEqual(_.unset(object, symbol), true);\n        assert.notOk(symbol in object);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should set deep property values', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var object = { 'a': { 'b': oldValue } },\n            actual = func(object, path, updater);\n\n        assert.strictEqual(actual, object);\n        assert.strictEqual(object.a.b, value);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should set a key over a path', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var object = { 'a.b': oldValue },\n            actual = func(object, path, updater);\n\n        assert.strictEqual(actual, object);\n        assert.deepEqual(object, { 'a.b': value });\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not coerce array paths to strings', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a,b,c': 1, 'a': { 'b': { 'c': 1 } } };\n\n      func(object, ['a', 'b', 'c'], updater);\n      assert.strictEqual(object.a.b.c, value);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not ignore empty brackets', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n\n      func(object, 'a[]', updater);\n      assert.deepEqual(object, { 'a': { '': value } });\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle empty paths', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([['', ''], [[], ['']]], function(pair, index) {\n        var object = {};\n\n        func(object, pair[0], updater);\n        assert.deepEqual(object, index ? {} : { '': value });\n\n        func(object, pair[1], updater);\n        assert.deepEqual(object, { '': value });\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle complex paths', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { '1.23': { '[\"b\"]': { 'c': { \"['d']\": { '\\ne\\n': { 'f': { 'g': oldValue } } } } } } } };\n\n      var paths = [\n        'a[-1.23][\"[\\\\\"b\\\\\"]\"].c[\\'[\\\\\\'d\\\\\\']\\'][\\ne\\n][f].g',\n        ['a', '-1.23', '[\"b\"]', 'c', \"['d']\", '\\ne\\n', 'f', 'g']\n      ];\n\n      lodashStable.each(paths, function(path) {\n        func(object, path, updater);\n        assert.strictEqual(object.a[-1.23]['[\"b\"]'].c[\"['d']\"]['\\ne\\n'].f.g, value);\n        object.a[-1.23]['[\"b\"]'].c[\"['d']\"]['\\ne\\n'].f.g = oldValue;\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should create parts of `path` that are missing', function(assert) {\n      assert.expect(6);\n\n      var object = {};\n\n      lodashStable.each(['a[1].b.c', ['a', '1', 'b', 'c']], function(path) {\n        var actual = func(object, path, updater);\n\n        assert.strictEqual(actual, object);\n        assert.deepEqual(actual, { 'a': [undefined, { 'b': { 'c': value } }] });\n        assert.notOk('0' in object.a);\n\n        delete object.a;\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not error when `object` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined],\n          expected = [[null, null], [undefined, undefined]];\n\n      var actual = lodashStable.map(values, function(value) {\n        try {\n          return [func(value, 'a.b', updater), func(value, ['a', 'b'], updater)];\n        } catch (e) {\n          return e.message;\n        }\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should overwrite primitives in the path', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var object = { 'a': '' };\n\n        func(object, path, updater);\n        assert.deepEqual(object, { 'a': { 'b': 2 } });\n      });;\n    });\n\n    QUnit.test('`_.' + methodName + '` should not create an array for missing non-index property names that start with numbers', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n\n      func(object, ['1a', '2b', '3c'], updater);\n      assert.deepEqual(object, { '1a': { '2b': { '3c': value } } });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not assign values that are the same as their destinations', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a'], { 'a': 1 }, NaN], function(value) {\n        var object = {},\n            pass = true,\n            updater = isUpdate ? lodashStable.constant(value) : value;\n\n        defineProperty(object, 'a', {\n          'configurable': true,\n          'enumerable': true,\n          'get': lodashStable.constant(value),\n          'set': function() { pass = false; }\n        });\n\n        func(object, 'a', updater);\n        assert.ok(pass);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.shuffle');\n\n  (function() {\n    var array = [1, 2, 3],\n        object = { 'a': 1, 'b': 2, 'c': 3 };\n\n    QUnit.test('should return a new array', function(assert) {\n      assert.expect(1);\n\n      assert.notStrictEqual(_.shuffle(array), array);\n    });\n\n    QUnit.test('should contain the same elements after a collection is shuffled', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.shuffle(array).sort(), array);\n      assert.deepEqual(_.shuffle(object).sort(), array);\n    });\n\n    QUnit.test('should shuffle small collections', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.times(1000, function(assert) {\n        return _.shuffle([1, 2]);\n      });\n\n      assert.deepEqual(lodashStable.sortBy(lodashStable.uniqBy(actual, String), '0'), [[1, 2], [2, 1]]);\n    });\n\n    QUnit.test('should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.shuffle(1), []);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.size');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return the number of own enumerable string keyed properties of an object', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size({ 'one': 1, 'two': 2, 'three': 3 }), 3);\n    });\n\n    QUnit.test('should return the length of an array', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size(array), 3);\n    });\n\n    QUnit.test('should accept a falsey `object`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubZero);\n\n      var actual = lodashStable.map(falsey, function(object, index) {\n        try {\n          return index ? _.size(object) : _.size();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size(args), 3);\n    });\n\n    QUnit.test('should work with jQuery/MooTools DOM query collections', function(assert) {\n      assert.expect(1);\n\n      function Foo(elements) {\n        push.apply(this, elements);\n      }\n      Foo.prototype = { 'length': 0, 'splice': arrayProto.splice };\n\n      assert.strictEqual(_.size(new Foo(array)), 3);\n    });\n\n    QUnit.test('should work with maps', function(assert) {\n      assert.expect(2);\n\n      if (Map) {\n        lodashStable.each([new Map, realm.map], function(map) {\n          map.set('a', 1);\n          map.set('b', 2);\n          assert.strictEqual(_.size(map), 2);\n          map.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work with sets', function(assert) {\n      assert.expect(2);\n\n      if (Set) {\n        lodashStable.each([new Set, realm.set], function(set) {\n          set.add(1);\n          set.add(2);\n          assert.strictEqual(_.size(set), 2);\n          set.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should not treat objects with negative lengths as array-like', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size({ 'length': -1 }), 1);\n    });\n\n    QUnit.test('should not treat objects with lengths larger than `MAX_SAFE_INTEGER` as array-like', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size({ 'length': MAX_SAFE_INTEGER + 1 }), 1);\n    });\n\n    QUnit.test('should not treat objects with non-number lengths as array-like', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size({ 'length': '0' }), 1);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.slice');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should use a default `start` of `0` and a default `end` of `length`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.slice(array);\n      assert.deepEqual(actual, array);\n      assert.notStrictEqual(actual, array);\n    });\n\n    QUnit.test('should work with a positive `start`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.slice(array, 1), [2, 3]);\n      assert.deepEqual(_.slice(array, 1, 3), [2, 3]);\n    });\n\n    QUnit.test('should work with a `start` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(start) {\n        assert.deepEqual(_.slice(array, start), []);\n      });\n    });\n\n    QUnit.test('should treat falsey `start` values as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, lodashStable.constant(array));\n\n      var actual = lodashStable.map(falsey, function(start) {\n        return _.slice(array, start);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a negative `start`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.slice(array, -1), [3]);\n    });\n\n    QUnit.test('should work with a negative `start` <= negative `length`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-3, -4, -Infinity], function(start) {\n        assert.deepEqual(_.slice(array, start), array);\n      });\n    });\n\n    QUnit.test('should work with `start` >= `end`', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([2, 3], function(start) {\n        assert.deepEqual(_.slice(array, start, 2), []);\n      });\n    });\n\n    QUnit.test('should work with a positive `end`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.slice(array, 0, 1), [1]);\n    });\n\n    QUnit.test('should work with a `end` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(end) {\n        assert.deepEqual(_.slice(array, 0, end), array);\n      });\n    });\n\n    QUnit.test('should treat falsey `end` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? array : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(end, index) {\n        return index ? _.slice(array, 0, end) : _.slice(array, 0);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a negative `end`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.slice(array, 0, -1), [1, 2]);\n    });\n\n    QUnit.test('should work with a negative `end` <= negative `length`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-3, -4, -Infinity], function(end) {\n        assert.deepEqual(_.slice(array, 0, end), []);\n      });\n    });\n\n    QUnit.test('should coerce `start` and `end` to integers', function(assert) {\n      assert.expect(1);\n\n      var positions = [[0.1, 1.6], ['0', 1], [0, '1'], ['1'], [NaN, 1], [1, NaN]];\n\n      var actual = lodashStable.map(positions, function(pos) {\n        return _.slice.apply(_, [array].concat(pos));\n      });\n\n      assert.deepEqual(actual, [[1], [1], [1], [2, 3], [1], []]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(2);\n\n      var array = [[1], [2, 3]],\n          actual = lodashStable.map(array, _.slice);\n\n      assert.deepEqual(actual, array);\n      assert.notStrictEqual(actual, array);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(38);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            length = array.length,\n            wrapped = _(array);\n\n        lodashStable.each(['map', 'filter'], function(methodName) {\n          assert.deepEqual(wrapped[methodName]().slice(0, -1).value(), array.slice(0, -1));\n          assert.deepEqual(wrapped[methodName]().slice(1).value(), array.slice(1));\n          assert.deepEqual(wrapped[methodName]().slice(1, 3).value(), array.slice(1, 3));\n          assert.deepEqual(wrapped[methodName]().slice(-1).value(), array.slice(-1));\n\n          assert.deepEqual(wrapped[methodName]().slice(length).value(), array.slice(length));\n          assert.deepEqual(wrapped[methodName]().slice(3, 2).value(), array.slice(3, 2));\n          assert.deepEqual(wrapped[methodName]().slice(0, -length).value(), array.slice(0, -length));\n          assert.deepEqual(wrapped[methodName]().slice(0, null).value(), array.slice(0, null));\n\n          assert.deepEqual(wrapped[methodName]().slice(0, length).value(), array.slice(0, length));\n          assert.deepEqual(wrapped[methodName]().slice(-length).value(), array.slice(-length));\n          assert.deepEqual(wrapped[methodName]().slice(null).value(), array.slice(null));\n\n          assert.deepEqual(wrapped[methodName]().slice(0, 1).value(), array.slice(0, 1));\n          assert.deepEqual(wrapped[methodName]().slice(NaN, '1').value(), array.slice(NaN, '1'));\n\n          assert.deepEqual(wrapped[methodName]().slice(0.1, 1.1).value(), array.slice(0.1, 1.1));\n          assert.deepEqual(wrapped[methodName]().slice('0', 1).value(), array.slice('0', 1));\n          assert.deepEqual(wrapped[methodName]().slice(0, '1').value(), array.slice(0, '1'));\n          assert.deepEqual(wrapped[methodName]().slice('1').value(), array.slice('1'));\n          assert.deepEqual(wrapped[methodName]().slice(NaN, 1).value(), array.slice(NaN, 1));\n          assert.deepEqual(wrapped[methodName]().slice(1, NaN).value(), array.slice(1, NaN));\n        });\n      }\n      else {\n        skipAssert(assert, 38);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.some');\n\n  (function() {\n    QUnit.test('should return `true` if `predicate` returns truthy for any element', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.some([false, 1, ''], identity), true);\n      assert.strictEqual(_.some([null, 'a', 0], identity), true);\n    });\n\n    QUnit.test('should return `false` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubFalse);\n\n      var actual = lodashStable.map(empties, function(value) {\n        try {\n          return _.some(value, identity);\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `true` as soon as `predicate` returns truthy', function(assert) {\n      assert.expect(2);\n\n      var count = 0;\n\n      assert.strictEqual(_.some([null, true, null], function(value) {\n        count++;\n        return value;\n      }), true);\n\n      assert.strictEqual(count, 2);\n    });\n\n    QUnit.test('should return `false` if `predicate` returns falsey for all elements', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.some([false, false, false], identity), false);\n      assert.strictEqual(_.some([null, 0, ''], identity), false);\n    });\n\n    QUnit.test('should use `_.identity` when `predicate` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var array = [0, 0];\n        return index ? _.some(array, value) : _.some(array);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(values, stubTrue);\n      actual = lodashStable.map(values, function(value, index) {\n        var array = [0, 1];\n        return index ? _.some(array, value) : _.some(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 0, 'b': 0 }, { 'a': 0, 'b': 1 }];\n      assert.strictEqual(_.some(objects, 'a'), false);\n      assert.strictEqual(_.some(objects, 'b'), true);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 0, 'b': 0 }, { 'a': 1, 'b': 1}];\n      assert.strictEqual(_.some(objects, { 'a': 0 }), true);\n      assert.strictEqual(_.some(objects, { 'b': 2 }), false);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([[1]], _.some);\n      assert.deepEqual(actual, [true]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sortBy');\n\n  (function() {\n    var objects = [\n      { 'a': 'x', 'b': 3 },\n      { 'a': 'y', 'b': 4 },\n      { 'a': 'x', 'b': 1 },\n      { 'a': 'y', 'b': 2 }\n    ];\n\n    QUnit.test('should sort in ascending order by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(_.sortBy(objects, function(object) {\n        return object.b;\n      }), 'b');\n\n      assert.deepEqual(actual, [1, 2, 3, 4]);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [3, 2, 1],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2, 3]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.sortBy(array, value) : _.sortBy(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(_.sortBy(objects.concat(undefined), 'b'), 'b');\n      assert.deepEqual(actual, [1, 2, 3, 4, undefined]);\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sortBy({ 'a': 1, 'b': 2, 'c': 3 }, Math.sin);\n      assert.deepEqual(actual, [3, 1, 2]);\n    });\n\n    QUnit.test('should move `NaN`, nullish, and symbol values to the end', function(assert) {\n      assert.expect(2);\n\n      var symbol1 = Symbol ? Symbol('a') : null,\n          symbol2 = Symbol ? Symbol('b') : null,\n          array = [NaN, undefined, null, 4, symbol1, null, 1, symbol2, undefined, 3, NaN, 2],\n          expected = [1, 2, 3, 4, symbol1, symbol2, null, null, undefined, undefined, NaN, NaN];\n\n      assert.deepEqual(_.sortBy(array), expected);\n\n      array = [NaN, undefined, symbol1, null, 'd', null, 'a', symbol2, undefined, 'c', NaN, 'b'];\n      expected = ['a', 'b', 'c', 'd', symbol1, symbol2, null, null, undefined, undefined, NaN, NaN];\n\n      assert.deepEqual(_.sortBy(array), expected);\n    });\n\n    QUnit.test('should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.sortBy(1), []);\n    });\n\n    QUnit.test('should coerce arrays returned from `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sortBy(objects, function(object) {\n        var result = [object.a, object.b];\n        result.toString = function() { return String(this[0]); };\n        return result;\n      });\n\n      assert.deepEqual(actual, [objects[0], objects[2], objects[1], objects[3]]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([[2, 1, 3], [3, 2, 1]], _.sortBy);\n      assert.deepEqual(actual, [[1, 2, 3], [1, 2, 3]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sortBy methods');\n\n  lodashStable.each(['orderBy', 'sortBy'], function(methodName) {\n    var func = _[methodName];\n\n    function Pair(a, b, c) {\n      this.a = a;\n      this.b = b;\n      this.c = c;\n    }\n\n    var objects = [\n      { 'a': 'x', 'b': 3 },\n      { 'a': 'y', 'b': 4 },\n      { 'a': 'x', 'b': 1 },\n      { 'a': 'y', 'b': 2 }\n    ];\n\n    var stableArray = [\n      new Pair(1, 1, 1), new Pair(1, 2, 1),\n      new Pair(1, 1, 1), new Pair(1, 2, 1),\n      new Pair(1, 3, 1), new Pair(1, 4, 1),\n      new Pair(1, 5, 1), new Pair(1, 6, 1),\n      new Pair(2, 1, 2), new Pair(2, 2, 2),\n      new Pair(2, 3, 2), new Pair(2, 4, 2),\n      new Pair(2, 5, 2), new Pair(2, 6, 2),\n      new Pair(undefined, 1, 1), new Pair(undefined, 2, 1),\n      new Pair(undefined, 3, 1), new Pair(undefined, 4, 1),\n      new Pair(undefined, 5, 1), new Pair(undefined, 6, 1)\n    ];\n\n    var stableObject = lodashStable.zipObject('abcdefghijklmnopqrst'.split(''), stableArray);\n\n    QUnit.test('`_.' + methodName + '` should sort multiple properties in ascending order', function(assert) {\n      assert.expect(1);\n\n      var actual = func(objects, ['a', 'b']);\n      assert.deepEqual(actual, [objects[2], objects[0], objects[3], objects[1]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support iteratees', function(assert) {\n      assert.expect(1);\n\n      var actual = func(objects, ['a', function(object) { return object.b; }]);\n      assert.deepEqual(actual, [objects[2], objects[0], objects[3], objects[1]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should perform a stable sort (test in IE > 8 and V8)', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([stableArray, stableObject], function(value, index) {\n        var actual = func(value, ['a', 'c']);\n        assert.deepEqual(actual, stableArray, index ? 'object' : 'array');\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not error on nullish elements', function(assert) {\n      assert.expect(1);\n\n      try {\n        var actual = func(objects.concat(null, undefined), ['a', 'b']);\n      } catch (e) {}\n\n      assert.deepEqual(actual, [objects[2], objects[0], objects[3], objects[1], null, undefined]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.reduce`', function(assert) {\n      assert.expect(3);\n\n      var objects = [\n        { 'a': 'x', '0': 3 },\n        { 'a': 'y', '0': 4 },\n        { 'a': 'x', '0': 1 },\n        { 'a': 'y', '0': 2 }\n      ];\n\n      var funcs = [func, lodashStable.partialRight(func, 'bogus')];\n\n      lodashStable.each(['a', 0, [0]], function(props, index) {\n        var expected = lodashStable.map(funcs, lodashStable.constant(\n          index\n            ? [objects[2], objects[3], objects[0], objects[1]]\n            : [objects[0], objects[2], objects[1], objects[3]]\n        ));\n\n        var actual = lodashStable.map(funcs, function(func) {\n          return lodashStable.reduce([props], func, objects);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sortedIndex methods');\n\n  lodashStable.each(['sortedIndex', 'sortedLastIndex'], function(methodName) {\n    var func = _[methodName],\n        isSortedIndex = methodName == 'sortedIndex';\n\n    QUnit.test('`_.' + methodName + '` should return the insert index', function(assert) {\n      assert.expect(1);\n\n      var array = [30, 50],\n          values = [30, 40, 50],\n          expected = isSortedIndex ? [0, 1, 1] : [1, 1, 2];\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(array, value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with an array of strings', function(assert) {\n      assert.expect(1);\n\n      var array = ['a', 'c'],\n          values = ['a', 'b', 'c'],\n          expected = isSortedIndex ? [0, 1, 1] : [1, 1, 2];\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(array, value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should accept a nullish `array` and a `value`', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([0, 0, 0]));\n\n      var actual = lodashStable.map(values, function(array) {\n        return [func(array, 1), func(array, undefined), func(array, NaN)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should align with `_.sortBy`', function(assert) {\n      assert.expect(12);\n\n      var symbol1 = Symbol ? Symbol('a') : null,\n          symbol2 = Symbol ? Symbol('b') : null,\n          symbol3 = Symbol ? Symbol('c') : null,\n          expected = [1, '2', {}, symbol1, symbol2, null, undefined, NaN, NaN];\n\n      lodashStable.each([\n        [NaN, symbol1, null, 1, '2', {}, symbol2, NaN, undefined],\n        ['2', null, 1, symbol1, NaN, {}, NaN, symbol2, undefined]\n      ], function(array) {\n        assert.deepEqual(_.sortBy(array), expected);\n        assert.strictEqual(func(expected, 3), 2);\n        assert.strictEqual(func(expected, symbol3), isSortedIndex ? 3 : (Symbol ? 5 : 6));\n        assert.strictEqual(func(expected, null), isSortedIndex ? (Symbol ? 5 : 3) : 6);\n        assert.strictEqual(func(expected, undefined), isSortedIndex ? 6 : 7);\n        assert.strictEqual(func(expected, NaN), isSortedIndex ? 7 : 9);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should align with `_.sortBy` for nulls', function(assert) {\n      assert.expect(3);\n\n      var array = [null, null];\n\n      assert.strictEqual(func(array, null), isSortedIndex ? 0 : 2);\n      assert.strictEqual(func(array, 1), 0);\n      assert.strictEqual(func(array, 'a'), 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should align with `_.sortBy` for symbols', function(assert) {\n      assert.expect(3);\n\n      var symbol1 = Symbol ? Symbol('a') : null,\n          symbol2 = Symbol ? Symbol('b') : null,\n          symbol3 = Symbol ? Symbol('c') : null,\n          array = [symbol1, symbol2];\n\n      assert.strictEqual(func(array, symbol3), isSortedIndex ? 0 : 2);\n      assert.strictEqual(func(array, 1), 0);\n      assert.strictEqual(func(array, 'a'), 0);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sortedIndexBy methods');\n\n  lodashStable.each(['sortedIndexBy', 'sortedLastIndexBy'], function(methodName) {\n    var func = _[methodName],\n        isSortedIndexBy = methodName == 'sortedIndexBy';\n\n    QUnit.test('`_.' + methodName + '` should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      func([30, 50], 40, function(assert) {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [40]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 30 }, { 'x': 50 }],\n          actual = func(objects, { 'x': 40 }, 'x');\n\n      assert.strictEqual(actual, 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support arrays larger than `MAX_ARRAY_LENGTH / 2`', function(assert) {\n      assert.expect(12);\n\n      lodashStable.each([Math.ceil(MAX_ARRAY_LENGTH / 2), MAX_ARRAY_LENGTH], function(length) {\n        var array = [],\n            values = [MAX_ARRAY_LENGTH, NaN, undefined];\n\n        array.length = length;\n\n        lodashStable.each(values, function(value) {\n          var steps = 0;\n\n          var actual = func(array, value, function(value) {\n            steps++;\n            return value;\n          });\n\n          var expected = (isSortedIndexBy ? !lodashStable.isNaN(value) : lodashStable.isFinite(value))\n            ? 0\n            : Math.min(length, MAX_ARRAY_INDEX);\n\n          assert.ok(steps == 32 || steps == 33);\n          assert.strictEqual(actual, expected);\n        });\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sortedIndexOf methods');\n\n  lodashStable.each(['sortedIndexOf', 'sortedLastIndexOf'], function(methodName) {\n    var func = _[methodName],\n        isSortedIndexOf = methodName == 'sortedIndexOf';\n\n    QUnit.test('`_.' + methodName + '` should perform a binary search', function(assert) {\n      assert.expect(1);\n\n      var sorted = [4, 4, 5, 5, 6, 6];\n      assert.deepEqual(func(sorted, 5), isSortedIndexOf ? 2 : 3);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sortedUniq');\n\n  (function() {\n    QUnit.test('should return unique values of a sorted array', function(assert) {\n      assert.expect(3);\n\n      var expected = [1, 2, 3];\n\n      lodashStable.each([[1, 2, 3], [1, 1, 2, 2, 3], [1, 2, 3, 3, 3, 3, 3]], function(array) {\n        assert.deepEqual(_.sortedUniq(array), expected);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.split');\n\n  (function() {\n    QUnit.test('should split a string by `separator`', function(assert) {\n      assert.expect(3);\n\n      var string = 'abcde';\n      assert.deepEqual(_.split(string, 'c'), ['ab', 'de']);\n      assert.deepEqual(_.split(string, /[bd]/), ['a', 'c', 'e']);\n      assert.deepEqual(_.split(string, '', 2), ['a', 'b']);\n    });\n\n    QUnit.test('should return an array containing an empty string for empty values', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined, ''],\n          expected = lodashStable.map(values, lodashStable.constant(['']));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.split(value) : _.split();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var strings = ['abc', 'def', 'ghi'],\n          actual = lodashStable.map(strings, _.split);\n\n      assert.deepEqual(actual, [['abc'], ['def'], ['ghi']]);\n    });\n\n    QUnit.test('should allow mixed string and array prototype methods', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _('abc');\n        assert.strictEqual(wrapped.split('b').join(','), 'a,c');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.spread');\n\n  (function() {\n    function fn(a, b, c) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should spread arguments to `func`', function(assert) {\n      assert.expect(2);\n\n      var spread = _.spread(fn),\n          expected = [1, 2];\n\n      assert.deepEqual(spread([1, 2]), expected);\n      assert.deepEqual(spread([1, 2], 3), expected);\n    });\n\n    QUnit.test('should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var spread = _.spread(stubTrue),\n          expected = lodashStable.map(falsey, stubTrue);\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? spread(array) : spread();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `start`', function(assert) {\n      assert.expect(2);\n\n      var spread = _.spread(fn, 1),\n          expected = [1, 2, 3];\n\n      assert.deepEqual(spread(1, [2, 3]), expected);\n      assert.deepEqual(spread(1, [2, 3], 4), expected);\n    });\n\n    QUnit.test('should treat `start` as `0` for negative or `NaN` values', function(assert) {\n      assert.expect(1);\n\n      var values = [-1, NaN, 'a'],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2]));\n\n      var actual = lodashStable.map(values, function(value) {\n        var spread = _.spread(fn, value);\n        return spread([1, 2]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce `start` to an integer', function(assert) {\n      assert.expect(2);\n\n      var spread = _.spread(fn, 1.6),\n          expected = [1, 2, 3];\n\n      assert.deepEqual(spread(1, [2, 3]), expected);\n      assert.deepEqual(spread(1, [2, 3], 4), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.startCase');\n\n  (function() {\n    QUnit.test('should uppercase only the first character of each word', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.startCase('--foo-bar--'), 'Foo Bar');\n      assert.strictEqual(_.startCase('fooBar'), 'Foo Bar');\n      assert.strictEqual(_.startCase('__FOO_BAR__'), 'FOO BAR');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.startsWith');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should return `true` if a string starts with `target`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.startsWith(string, 'a'), true);\n    });\n\n    QUnit.test('should return `false` if a string does not start with `target`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.startsWith(string, 'b'), false);\n    });\n\n    QUnit.test('should work with a `position`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.startsWith(string, 'b', 1), true);\n    });\n\n    QUnit.test('should work with `position` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 5, MAX_SAFE_INTEGER, Infinity], function(position) {\n        assert.strictEqual(_.startsWith(string, 'a', position), false);\n      });\n    });\n\n    QUnit.test('should treat falsey `position` values as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubTrue);\n\n      var actual = lodashStable.map(falsey, function(position) {\n        return _.startsWith(string, 'a', position);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat a negative `position` as `0`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each([-1, -3, -Infinity], function(position) {\n        assert.strictEqual(_.startsWith(string, 'a', position), true);\n        assert.strictEqual(_.startsWith(string, 'b', position), false);\n      });\n    });\n\n    QUnit.test('should coerce `position` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.startsWith(string, 'bc', 1.2), true);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.startsWith and lodash.endsWith');\n\n  lodashStable.each(['startsWith', 'endsWith'], function(methodName) {\n    var func = _[methodName],\n        isStartsWith = methodName == 'startsWith';\n\n    var string = 'abc',\n        chr = isStartsWith ? 'a' : 'c';\n\n    QUnit.test('`_.' + methodName + '` should coerce `string` to a string', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(func(Object(string), chr), true);\n      assert.strictEqual(func({ 'toString': lodashStable.constant(string) }, chr), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `target` to a string', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(func(string, Object(chr)), true);\n      assert.strictEqual(func(string, { 'toString': lodashStable.constant(chr) }), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `position` to a number', function(assert) {\n      assert.expect(2);\n\n      var position = isStartsWith ? 1 : 2;\n\n      assert.strictEqual(func(string, 'b', Object(position)), true);\n      assert.strictEqual(func(string, 'b', { 'toString': lodashStable.constant(String(position)) }), true);\n    });\n\n    QUnit.test('should return `true` when `target` is an empty string regardless of `position`', function(assert) {\n      assert.expect(1);\n\n      var positions = [-Infinity, NaN, -3, -1, 0, 1, 2, 3, 5, MAX_SAFE_INTEGER, Infinity];\n\n      assert.ok(lodashStable.every(positions, function(position) {\n        return func(string, '', position);\n      }));\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('stub methods');\n\n  lodashStable.each(['noop', 'stubTrue', 'stubFalse', 'stubArray', 'stubObject', 'stubString'], function(methodName) {\n    var func = _[methodName];\n\n    var pair = ({\n      'stubArray': [[], 'an empty array'],\n      'stubFalse': [false, '`false`'],\n      'stubObject': [{}, 'an empty object'],\n      'stubString': ['', 'an empty string'],\n      'stubTrue': [true, '`true`'],\n      'noop': [undefined, '`undefined`']\n    })[methodName];\n\n    var values = Array(2).concat(empties, true, 1, 'a'),\n        expected = lodashStable.map(values, lodashStable.constant(pair[0]));\n\n    QUnit.test('`_.' + methodName + '` should return ' + pair[1], function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        if (index < 2) {\n          return index ? func.call({}) : func();\n        }\n        return func(value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.subtract');\n\n  (function() {\n    QUnit.test('should subtract two numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.subtract(6, 4), 2);\n      assert.strictEqual(_.subtract(-6, 4), -10);\n      assert.strictEqual(_.subtract(-6, -4), -2);\n    });\n\n    QUnit.test('should coerce arguments to numbers', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.subtract('6', '4'), 2);\n      assert.deepEqual(_.subtract('x', 'y'), NaN);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('math operator methods');\n\n  lodashStable.each(['add', 'divide', 'multiply', 'subtract'], function(methodName) {\n    var func = _[methodName],\n        isAddSub = methodName == 'add' || methodName == 'subtract';\n\n    QUnit.test('`_.' + methodName + '` should return `' + (isAddSub ? 0 : 1) + '` when no arguments are given', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(), isAddSub ? 0 : 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with only one defined argument', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(func(6), 6);\n      assert.strictEqual(func(6, undefined), 6);\n      assert.strictEqual(func(undefined, 4), 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(2);\n\n      var values = [0, '0', -0, '-0'],\n          expected = [[0, Infinity], ['0', Infinity], [-0, -Infinity], ['-0', -Infinity]];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(values, function(value) {\n          var result = index ? func(undefined, value) : func(value);\n          return [result, 1 / result];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert objects to `NaN`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(0, {}), NaN);\n      assert.deepEqual(func({}, 0), NaN);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert symbols to `NaN`', function(assert) {\n      assert.expect(2);\n\n      if (Symbol) {\n        assert.deepEqual(func(0, symbol), NaN);\n        assert.deepEqual(func(symbol, 0), NaN);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _(1)[methodName](2);\n        assert.notOk(actual instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _(1).chain()[methodName](2);\n        assert.ok(actual instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sumBy');\n\n  (function() {\n    var array = [6, 4, 2],\n        objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }];\n\n    QUnit.test('should work with an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sumBy(objects, function(object) {\n        return object.a;\n      });\n\n      assert.deepEqual(actual, 6);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.sumBy(array, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [6]);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var arrays = [[2], [3], [1]];\n      assert.strictEqual(_.sumBy(arrays, 0), 6);\n      assert.strictEqual(_.sumBy(objects, 'a'), 6);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sum methods');\n\n  lodashStable.each(['sum', 'sumBy'], function(methodName) {\n    var array = [6, 4, 2],\n        func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the sum of an array of numbers', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array), 12);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `0` when passing empty `array` values', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubZero);\n\n      var actual = lodashStable.map(empties, function(value) {\n        return func(value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should skip `undefined` values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func([1, undefined]), 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not skip `NaN` values', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func([1, NaN]), NaN);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not coerce values to numbers', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(['1', '2']), '12');\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.tail');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? _.tail(array) : _.tail();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should exclude the first element', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.tail(array), [2, 3]);\n    });\n\n    QUnit.test('should return an empty when querying empty arrays', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.tail([]), []);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.tail);\n\n      assert.deepEqual(actual, [[2, 3], [5, 6], [8, 9]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            values = [];\n\n        var actual = _(array).tail().filter(function(value) {\n          values.push(value);\n          return false;\n        })\n        .value();\n\n        assert.deepEqual(actual, []);\n        assert.deepEqual(values, array.slice(1));\n\n        values = [];\n\n        actual = _(array).filter(function(value) {\n          values.push(value);\n          return isEven(value);\n        })\n        .tail()\n        .value();\n\n        assert.deepEqual(actual, _.tail(_.filter(array, isEven)));\n        assert.deepEqual(values, array);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should not execute subsequent iteratees on an empty array in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            iteratee = function() { pass = false; },\n            pass = true,\n            actual = _(array).slice(0, 1).tail().map(iteratee).value();\n\n        assert.ok(pass);\n        assert.deepEqual(actual, []);\n\n        pass = true;\n        actual = _(array).filter().slice(0, 1).tail().map(iteratee).value();\n\n        assert.ok(pass);\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.take');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should take the first two elements', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.take(array, 2), [1, 2]);\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [1] : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(n) {\n        return _.take(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty array when `n` < `1`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.take(array, n), []);\n      });\n    });\n\n    QUnit.test('should return all elements when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        assert.deepEqual(_.take(array, n), array);\n      });\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.take);\n\n      assert.deepEqual(actual, [[1], [4], [7]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            actual = _(array).take(2).take().value();\n\n        assert.deepEqual(actual, _.take(_.take(array, 2)));\n\n        actual = _(array).filter(predicate).take(2).take().value();\n        assert.deepEqual(values, [1, 2]);\n        assert.deepEqual(actual, _.take(_.take(_.filter(array, predicate), 2)));\n\n        actual = _(array).take(6).takeRight(4).take(2).takeRight().value();\n        assert.deepEqual(actual, _.takeRight(_.take(_.takeRight(_.take(array, 6), 4), 2)));\n\n        values = [];\n\n        actual = _(array).take(array.length - 1).filter(predicate).take(6).takeRight(4).take(2).takeRight().value();\n        assert.deepEqual(values, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n        assert.deepEqual(actual, _.takeRight(_.take(_.takeRight(_.take(_.filter(_.take(array, array.length - 1), predicate), 6), 4), 2)));\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.takeRight');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should take the last two elements', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeRight(array, 2), [2, 3]);\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [3] : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(n) {\n        return _.takeRight(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty array when `n` < `1`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.takeRight(array, n), []);\n      });\n    });\n\n    QUnit.test('should return all elements when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        assert.deepEqual(_.takeRight(array, n), array);\n      });\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.takeRight);\n\n      assert.deepEqual(actual, [[3], [6], [9]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            actual = _(array).takeRight(2).takeRight().value();\n\n        assert.deepEqual(actual, _.takeRight(_.takeRight(array)));\n\n        actual = _(array).filter(predicate).takeRight(2).takeRight().value();\n        assert.deepEqual(values, array);\n        assert.deepEqual(actual, _.takeRight(_.takeRight(_.filter(array, predicate), 2)));\n\n        actual = _(array).takeRight(6).take(4).takeRight(2).take().value();\n        assert.deepEqual(actual, _.take(_.takeRight(_.take(_.takeRight(array, 6), 4), 2)));\n\n        values = [];\n\n        actual = _(array).filter(predicate).takeRight(6).take(4).takeRight(2).take().value();\n        assert.deepEqual(values, array);\n        assert.deepEqual(actual, _.take(_.takeRight(_.take(_.takeRight(_.filter(array, predicate), 6), 4), 2)));\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.takeRightWhile');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    var objects = [\n      { 'a': 0, 'b': 0 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 2, 'b': 2 }\n    ];\n\n    QUnit.test('should take elements while `predicate` returns truthy', function(assert) {\n      assert.expect(1);\n\n      var actual = _.takeRightWhile(array, function(n) {\n        return n > 2;\n      });\n\n      assert.deepEqual(actual, [3, 4]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.takeRightWhile(array, function() {\n        args = slice.call(arguments);\n      });\n\n      assert.deepEqual(args, [4, 3, array]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeRightWhile(objects, { 'b': 2 }), objects.slice(2));\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeRightWhile(objects, ['b', 2]), objects.slice(2));\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeRightWhile(objects, 'b'), objects.slice(1));\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            predicate = function(n) { return n > 2; },\n            expected = _.takeRightWhile(array, predicate),\n            wrapped = _(array).takeRightWhile(predicate);\n\n        assert.deepEqual(wrapped.value(), expected);\n        assert.deepEqual(wrapped.reverse().value(), expected.slice().reverse());\n        assert.strictEqual(wrapped.last(), _.last(expected));\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should provide correct `predicate` arguments in a lazy sequence', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var args,\n            array = lodashStable.range(LARGE_ARRAY_SIZE + 1);\n\n        var expected = [\n          square(LARGE_ARRAY_SIZE),\n          LARGE_ARRAY_SIZE - 1,\n          lodashStable.map(array.slice(1), square)\n        ];\n\n        _(array).slice(1).takeRightWhile(function(value, index, array) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, [LARGE_ARRAY_SIZE, LARGE_ARRAY_SIZE - 1, array.slice(1)]);\n\n        _(array).slice(1).map(square).takeRightWhile(function(value, index, array) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        _(array).slice(1).map(square).takeRightWhile(function(value, index) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        _(array).slice(1).map(square).takeRightWhile(function(index) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, [square(LARGE_ARRAY_SIZE)]);\n\n        _(array).slice(1).map(square).takeRightWhile(function() {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.takeWhile');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    var objects = [\n      { 'a': 2, 'b': 2 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 0, 'b': 0 }\n    ];\n\n    QUnit.test('should take elements while `predicate` returns truthy', function(assert) {\n      assert.expect(1);\n\n      var actual = _.takeWhile(array, function(n) {\n        return n < 3;\n      });\n\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.takeWhile(array, function() {\n        args = slice.call(arguments);\n      });\n\n      assert.deepEqual(args, [1, 0, array]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeWhile(objects, { 'b': 2 }), objects.slice(0, 1));\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeWhile(objects, ['b', 2]), objects.slice(0, 1));\n    });\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeWhile(objects, 'b'), objects.slice(0, 2));\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            predicate = function(n) { return n < 3; },\n            expected = _.takeWhile(array, predicate),\n            wrapped = _(array).takeWhile(predicate);\n\n        assert.deepEqual(wrapped.value(), expected);\n        assert.deepEqual(wrapped.reverse().value(), expected.slice().reverse());\n        assert.strictEqual(wrapped.last(), _.last(expected));\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence with `take`', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE);\n\n        var actual = _(array)\n          .takeWhile(function(n) { return n < 4; })\n          .take(2)\n          .takeWhile(function(n) { return n == 0; })\n          .value();\n\n        assert.deepEqual(actual, [0]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should provide correct `predicate` arguments in a lazy sequence', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var args,\n            array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            expected = [1, 0, lodashStable.map(array.slice(1), square)];\n\n        _(array).slice(1).takeWhile(function(value, index, array) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, [1, 0, array.slice(1)]);\n\n        _(array).slice(1).map(square).takeWhile(function(value, index, array) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        _(array).slice(1).map(square).takeWhile(function(value, index) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        _(array).slice(1).map(square).takeWhile(function(value) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, [1]);\n\n        _(array).slice(1).map(square).takeWhile(function() {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.tap');\n\n  (function() {\n    QUnit.test('should intercept and return the given value', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var intercepted,\n            array = [1, 2, 3];\n\n        var actual = _.tap(array, function(value) {\n          intercepted = value;\n        });\n\n        assert.strictEqual(actual, array);\n        assert.strictEqual(intercepted, array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should intercept unwrapped values and return wrapped values when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var intercepted,\n            array = [1, 2, 3];\n\n        var wrapped = _(array).tap(function(value) {\n          intercepted = value;\n          value.pop();\n        });\n\n        assert.ok(wrapped instanceof _);\n\n        wrapped.value();\n        assert.strictEqual(intercepted, array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.template');\n\n  (function() {\n    QUnit.test('should escape values in \"escape\" delimiters', function(assert) {\n      assert.expect(1);\n\n      var strings = ['<p><%- value %></p>', '<p><%-value%></p>', '<p><%-\\nvalue\\n%></p>'],\n          expected = lodashStable.map(strings, lodashStable.constant('<p>&amp;&lt;&gt;&quot;&#39;/</p>')),\n          data = { 'value': '&<>\"\\'/' };\n\n      var actual = lodashStable.map(strings, function(string) {\n        return _.template(string)(data);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not reference `_.escape` when \"escape\" delimiters are not used', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= typeof __e %>');\n      assert.strictEqual(compiled({}), 'undefined');\n    });\n\n    QUnit.test('should evaluate JavaScript in \"evaluate\" delimiters', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template(\n        '<ul><%\\\n        for (var key in collection) {\\\n          %><li><%= collection[key] %></li><%\\\n        } %></ul>'\n      );\n\n      var data = { 'collection': { 'a': 'A', 'b': 'B' } },\n          actual = compiled(data);\n\n      assert.strictEqual(actual, '<ul><li>A</li><li>B</li></ul>');\n    });\n\n    QUnit.test('should support \"evaluate\" delimiters with single line comments (test production builds)', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<% // A code comment. %><% if (value) { %>yap<% } else { %>nope<% } %>'),\n          data = { 'value': true };\n\n      assert.strictEqual(compiled(data), 'yap');\n    });\n\n    QUnit.test('should support referencing variables declared in \"evaluate\" delimiters from other delimiters', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<% var b = a; %><%= b.value %>'),\n          data = { 'a': { 'value': 1 } };\n\n      assert.strictEqual(compiled(data), '1');\n    });\n\n    QUnit.test('should interpolate data properties in \"interpolate\" delimiters', function(assert) {\n      assert.expect(1);\n\n      var strings = ['<%= a %>BC', '<%=a%>BC', '<%=\\na\\n%>BC'],\n          expected = lodashStable.map(strings, lodashStable.constant('ABC')),\n          data = { 'a': 'A' };\n\n      var actual = lodashStable.map(strings, function(string) {\n        return _.template(string)(data);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should support \"interpolate\" delimiters with escaped values', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= a ? \"a=\\\\\"A\\\\\"\" : \"\" %>'),\n          data = { 'a': true };\n\n      assert.strictEqual(compiled(data), 'a=\"A\"');\n    });\n\n    QUnit.test('should support \"interpolate\" delimiters containing ternary operators', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= value ? value : \"b\" %>'),\n          data = { 'value': 'a' };\n\n      assert.strictEqual(compiled(data), 'a');\n    });\n\n    QUnit.test('should support \"interpolate\" delimiters containing global values', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= typeof Math.abs %>');\n\n      try {\n        var actual = compiled();\n      } catch (e) {}\n\n      assert.strictEqual(actual, 'function');\n    });\n\n    QUnit.test('should support complex \"interpolate\" delimiters', function(assert) {\n      assert.expect(22);\n\n      lodashStable.forOwn({\n        '<%= a + b %>': '3',\n        '<%= b - a %>': '1',\n        '<%= a = b %>': '2',\n        '<%= !a %>': 'false',\n        '<%= ~a %>': '-2',\n        '<%= a * b %>': '2',\n        '<%= a / b %>': '0.5',\n        '<%= a % b %>': '1',\n        '<%= a >> b %>': '0',\n        '<%= a << b %>': '4',\n        '<%= a & b %>': '0',\n        '<%= a ^ b %>': '3',\n        '<%= a | b %>': '3',\n        '<%= {}.toString.call(0) %>': numberTag,\n        '<%= a.toFixed(2) %>': '1.00',\n        '<%= obj[\"a\"] %>': '1',\n        '<%= delete a %>': 'true',\n        '<%= \"a\" in obj %>': 'true',\n        '<%= obj instanceof Object %>': 'true',\n        '<%= new Boolean %>': 'false',\n        '<%= typeof a %>': 'number',\n        '<%= void a %>': ''\n      },\n      function(value, key) {\n        var compiled = _.template(key),\n            data = { 'a': 1, 'b': 2 };\n\n        assert.strictEqual(compiled(data), value, key);\n      });\n    });\n\n    QUnit.test('should support ES6 template delimiters', function(assert) {\n      assert.expect(2);\n\n      var data = { 'value': 2 };\n      assert.strictEqual(_.template('1${value}3')(data), '123');\n      assert.strictEqual(_.template('${\"{\" + value + \"\\\\}\"}')(data), '{2}');\n    });\n\n    QUnit.test('should support the \"imports\" option', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= a %>', { 'imports': { 'a': 1 } });\n      assert.strictEqual(compiled({}), '1');\n    });\n\n    QUnit.test('should support the \"variable\" options', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template(\n        '<% _.each( data.a, function( value ) { %>' +\n            '<%= value.valueOf() %>' +\n        '<% }) %>', { 'variable': 'data' }\n      );\n\n      var data = { 'a': [1, 2, 3] };\n\n      try {\n        assert.strictEqual(compiled(data), '123');\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n    });\n\n    QUnit.test('should support custom delimiters', function(assert) {\n      assert.expect(2);\n\n      lodashStable.times(2, function(index) {\n        var settingsClone = lodashStable.clone(_.templateSettings);\n\n        var settings = lodashStable.assign(index ? _.templateSettings : {}, {\n          'escape': /\\{\\{-([\\s\\S]+?)\\}\\}/g,\n          'evaluate': /\\{\\{([\\s\\S]+?)\\}\\}/g,\n          'interpolate': /\\{\\{=([\\s\\S]+?)\\}\\}/g\n        });\n\n        var expected = '<ul><li>0: a &amp; A</li><li>1: b &amp; B</li></ul>',\n            compiled = _.template('<ul>{{ _.each(collection, function(value, index) {}}<li>{{= index }}: {{- value }}</li>{{}); }}</ul>', index ? null : settings),\n            data = { 'collection': ['a & A', 'b & B'] };\n\n        assert.strictEqual(compiled(data), expected);\n        lodashStable.assign(_.templateSettings, settingsClone);\n      });\n    });\n\n    QUnit.test('should support custom delimiters containing special characters', function(assert) {\n      assert.expect(2);\n\n      lodashStable.times(2, function(index) {\n        var settingsClone = lodashStable.clone(_.templateSettings);\n\n        var settings = lodashStable.assign(index ? _.templateSettings : {}, {\n          'escape': /<\\?-([\\s\\S]+?)\\?>/g,\n          'evaluate': /<\\?([\\s\\S]+?)\\?>/g,\n          'interpolate': /<\\?=([\\s\\S]+?)\\?>/g\n        });\n\n        var expected = '<ul><li>0: a &amp; A</li><li>1: b &amp; B</li></ul>',\n            compiled = _.template('<ul><? _.each(collection, function(value, index) { ?><li><?= index ?>: <?- value ?></li><? }); ?></ul>', index ? null : settings),\n            data = { 'collection': ['a & A', 'b & B'] };\n\n        assert.strictEqual(compiled(data), expected);\n        lodashStable.assign(_.templateSettings, settingsClone);\n      });\n    });\n\n    QUnit.test('should use a `with` statement by default', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= index %><%= collection[index] %><% _.each(collection, function(value, index) { %><%= index %><% }); %>'),\n          actual = compiled({ 'index': 1, 'collection': ['a', 'b', 'c'] });\n\n      assert.strictEqual(actual, '1b012');\n    });\n\n    QUnit.test('should use `_.templateSettings.imports._.templateSettings`', function(assert) {\n      assert.expect(1);\n\n      var lodash = _.templateSettings.imports._,\n          settingsClone = lodashStable.clone(lodash.templateSettings);\n\n      lodash.templateSettings = lodashStable.assign(lodash.templateSettings, {\n        'interpolate': /\\{\\{=([\\s\\S]+?)\\}\\}/g\n      });\n\n      var compiled = _.template('{{= a }}');\n      assert.strictEqual(compiled({ 'a': 1 }), '1');\n\n      if (settingsClone) {\n        lodashStable.assign(lodash.templateSettings, settingsClone);\n      } else {\n        delete lodash.templateSettings;\n      }\n    });\n\n    QUnit.test('should fallback to `_.templateSettings`', function(assert) {\n      assert.expect(1);\n\n      var lodash = _.templateSettings.imports._,\n          delimiter = _.templateSettings.interpolate;\n\n      _.templateSettings.imports._ = { 'escape': lodashStable.escape };\n      _.templateSettings.interpolate = /\\{\\{=([\\s\\S]+?)\\}\\}/g;\n\n      var compiled = _.template('{{= a }}');\n      assert.strictEqual(compiled({ 'a': 1 }), '1');\n\n      _.templateSettings.imports._ = lodash;\n      _.templateSettings.interpolate = delimiter;\n    });\n\n    QUnit.test('should ignore `null` delimiters', function(assert) {\n      assert.expect(3);\n\n      var delimiter = {\n        'escape': /\\{\\{-([\\s\\S]+?)\\}\\}/g,\n        'evaluate': /\\{\\{([\\s\\S]+?)\\}\\}/g,\n        'interpolate': /\\{\\{=([\\s\\S]+?)\\}\\}/g\n      };\n\n      lodashStable.forOwn({\n        'escape': '{{- a }}',\n        'evaluate': '{{ print(a) }}',\n        'interpolate': '{{= a }}'\n      },\n      function(value, key) {\n        var settings = { 'escape': null, 'evaluate': null, 'interpolate': null };\n        settings[key] = delimiter[key];\n\n        var expected = '1 <%- a %> <% print(a) %> <%= a %>',\n            compiled = _.template(value + ' <%- a %> <% print(a) %> <%= a %>', settings),\n            data = { 'a': 1 };\n\n        assert.strictEqual(compiled(data), expected);\n      });\n    });\n\n    QUnit.test('should work without delimiters', function(assert) {\n      assert.expect(1);\n\n      var expected = 'abc';\n      assert.strictEqual(_.template(expected)({}), expected);\n    });\n\n    QUnit.test('should work with `this` references', function(assert) {\n      assert.expect(2);\n\n      var compiled = _.template('a<%= this.String(\"b\") %>c');\n      assert.strictEqual(compiled(), 'abc');\n\n      var object = { 'b': 'B' };\n      object.compiled = _.template('A<%= this.b %>C', { 'variable': 'obj' });\n      assert.strictEqual(object.compiled(), 'ABC');\n    });\n\n    QUnit.test('should work with backslashes', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= a %> \\\\b'),\n          data = { 'a': 'A' };\n\n      assert.strictEqual(compiled(data), 'A \\\\b');\n    });\n\n    QUnit.test('should work with escaped characters in string literals', function(assert) {\n      assert.expect(2);\n\n      var compiled = _.template('<% print(\"\\'\\\\n\\\\r\\\\t\\\\u2028\\\\u2029\\\\\\\\\") %>');\n      assert.strictEqual(compiled(), \"'\\n\\r\\t\\u2028\\u2029\\\\\");\n\n      var data = { 'a': 'A' };\n      compiled = _.template('\\'\\n\\r\\t<%= a %>\\u2028\\u2029\\\\\"');\n      assert.strictEqual(compiled(data), '\\'\\n\\r\\tA\\u2028\\u2029\\\\\"');\n    });\n\n    QUnit.test('should handle \\\\u2028 & \\\\u2029 characters', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('\\u2028<%= \"\\\\u2028\\\\u2029\" %>\\u2029');\n      assert.strictEqual(compiled(), '\\u2028\\u2028\\u2029\\u2029');\n    });\n\n    QUnit.test('should work with statements containing quotes', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template(\"<%\\\n        if (a == 'A' || a == \\\"a\\\") {\\\n          %>'a',\\\"A\\\"<%\\\n        } %>\"\n      );\n\n      var data = { 'a': 'A' };\n      assert.strictEqual(compiled(data), \"'a',\\\"A\\\"\");\n    });\n\n    QUnit.test('should work with templates containing newlines and comments', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%\\n\\\n        // A code comment.\\n\\\n        if (value) { value += 3; }\\n\\\n        %><p><%= value %></p>'\n      );\n\n      assert.strictEqual(compiled({ 'value': 3 }), '<p>6</p>');\n    });\n\n    QUnit.test('should tokenize delimiters', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<span class=\"icon-<%= type %>2\"></span>'),\n          data = { 'type': 1 };\n\n      assert.strictEqual(compiled(data), '<span class=\"icon-12\"></span>');\n    });\n\n    QUnit.test('should evaluate delimiters once', function(assert) {\n      assert.expect(1);\n\n      var actual = [],\n          compiled = _.template('<%= func(\"a\") %><%- func(\"b\") %><% func(\"c\") %>'),\n          data = { 'func': function(value) { actual.push(value); } };\n\n      compiled(data);\n      assert.deepEqual(actual, ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should match delimiters before escaping text', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<<\\n a \\n>>', { 'evaluate': /<<(.*?)>>/g });\n      assert.strictEqual(compiled(), '<<\\n a \\n>>');\n    });\n\n    QUnit.test('should resolve nullish values to an empty string', function(assert) {\n      assert.expect(3);\n\n      var compiled = _.template('<%= a %><%- a %>'),\n          data = { 'a': null };\n\n      assert.strictEqual(compiled(data), '');\n\n      data = { 'a': undefined };\n      assert.strictEqual(compiled(data), '');\n\n      data = { 'a': {} };\n      compiled = _.template('<%= a.b %><%- a.b %>');\n      assert.strictEqual(compiled(data), '');\n    });\n\n    QUnit.test('should return an empty string for empty values', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined, ''],\n          expected = lodashStable.map(values, stubString),\n          data = { 'a': 1 };\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var compiled = index ? _.template(value) : _.template();\n        return compiled(data);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should parse delimiters without newlines', function(assert) {\n      assert.expect(1);\n\n      var expected = '<<\\nprint(\"<p>\" + (value ? \"yes\" : \"no\") + \"</p>\")\\n>>',\n          compiled = _.template(expected, { 'evaluate': /<<(.+?)>>/g }),\n          data = { 'value': true };\n\n      assert.strictEqual(compiled(data), expected);\n    });\n\n    QUnit.test('should support recursive calls', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= a %><% a = _.template(c)(obj) %><%= a %>'),\n          data = { 'a': 'A', 'b': 'B', 'c': '<%= b %>' };\n\n      assert.strictEqual(compiled(data), 'AB');\n    });\n\n    QUnit.test('should coerce `text` to a string', function(assert) {\n      assert.expect(1);\n\n      var object = { 'toString': lodashStable.constant('<%= a %>') },\n          data = { 'a': 1 };\n\n      assert.strictEqual(_.template(object)(data), '1');\n    });\n\n    QUnit.test('should not modify the `options` object', function(assert) {\n      assert.expect(1);\n\n      var options = {};\n      _.template('', options);\n      assert.deepEqual(options, {});\n    });\n\n    QUnit.test('should not modify `_.templateSettings` when `options` are given', function(assert) {\n      assert.expect(2);\n\n      var data = { 'a': 1 };\n\n      assert.notOk('a' in _.templateSettings);\n      _.template('', {}, data);\n      assert.notOk('a' in _.templateSettings);\n\n      delete _.templateSettings.a;\n    });\n\n    QUnit.test('should not error for non-object `data` and `options` values', function(assert) {\n      assert.expect(2);\n\n      _.template('')(1);\n      assert.ok(true, '`data` value');\n\n      _.template('', 1)(1);\n      assert.ok(true, '`options` value');\n    });\n\n    QUnit.test('should expose the source on compiled templates', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('x'),\n          values = [String(compiled), compiled.source],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.includes(value, '__p');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should expose the source on SyntaxErrors', function(assert) {\n      assert.expect(1);\n\n      try {\n        _.template('<% if x %>');\n      } catch (e) {\n        var source = e.source;\n      }\n      assert.ok(lodashStable.includes(source, '__p'));\n    });\n\n    QUnit.test('should not include sourceURLs in the source', function(assert) {\n      assert.expect(1);\n\n      var options = { 'sourceURL': '/a/b/c' },\n          compiled = _.template('x', options),\n          values = [compiled.source, undefined];\n\n      try {\n        _.template('<% if x %>', options);\n      } catch (e) {\n        values[1] = e.source;\n      }\n      var expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.includes(value, 'sourceURL');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = ['<%= a %>', '<%- b %>', '<% print(c) %>'],\n          compiles = lodashStable.map(array, _.template),\n          data = { 'a': 'one', 'b': '\"two\"', 'c': 'three' };\n\n      var actual = lodashStable.map(compiles, function(compiled) {\n        return compiled(data);\n      });\n\n      assert.deepEqual(actual, ['one', '&quot;two&quot;', 'three']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.truncate');\n\n  (function() {\n    var string = 'hi-diddly-ho there, neighborino';\n\n    QUnit.test('should use a default `length` of `30`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.truncate(string), 'hi-diddly-ho there, neighbo...');\n    });\n\n    QUnit.test('should not truncate if `string` is <= `length`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.truncate(string, { 'length': string.length }), string);\n      assert.strictEqual(_.truncate(string, { 'length': string.length + 2 }), string);\n    });\n\n    QUnit.test('should truncate string the given length', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.truncate(string, { 'length': 24 }), 'hi-diddly-ho there, n...');\n    });\n\n    QUnit.test('should support a `omission` option', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.truncate(string, { 'omission': ' [...]' }), 'hi-diddly-ho there, neig [...]');\n    });\n\n    QUnit.test('should coerce nullish `omission` values to strings', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.truncate(string, { 'omission': null }), 'hi-diddly-ho there, neighbnull');\n      assert.strictEqual(_.truncate(string, { 'omission': undefined }), 'hi-diddly-ho there, nundefined');\n    });\n\n    QUnit.test('should support a `length` option', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.truncate(string, { 'length': 4 }), 'h...');\n    });\n\n    QUnit.test('should support a `separator` option', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.truncate(string, { 'length': 24, 'separator': ' ' }), 'hi-diddly-ho there,...');\n      assert.strictEqual(_.truncate(string, { 'length': 24, 'separator': /,? +/ }), 'hi-diddly-ho there...');\n      assert.strictEqual(_.truncate(string, { 'length': 24, 'separator': /,? +/g }), 'hi-diddly-ho there...');\n    });\n\n    QUnit.test('should treat negative `length` as `0`', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([0, -2], function(length) {\n        assert.strictEqual(_.truncate(string, { 'length': length }), '...');\n      });\n    });\n\n    QUnit.test('should coerce `length` to an integer', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['', NaN, 4.6, '4'], function(length, index) {\n        var actual = index > 1 ? 'h...' : '...';\n        assert.strictEqual(_.truncate(string, { 'length': { 'valueOf': lodashStable.constant(length) } }), actual);\n      });\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.truncate(Object(string), { 'length': 4 }), 'h...');\n      assert.strictEqual(_.truncate({ 'toString': lodashStable.constant(string) }, { 'length': 5 }), 'hi...');\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([string, string, string], _.truncate),\n          truncated = 'hi-diddly-ho there, neighbo...';\n\n      assert.deepEqual(actual, [truncated, truncated, truncated]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.throttle');\n\n  (function() {\n    QUnit.test('should throttle a function', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          throttled = _.throttle(function() { callCount++; }, 32);\n\n      throttled();\n      throttled();\n      throttled();\n\n      var lastCount = callCount;\n      assert.ok(callCount);\n\n      setTimeout(function() {\n        assert.ok(callCount > lastCount);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('subsequent calls should return the result of the first call', function(assert) {\n      assert.expect(5);\n\n      var done = assert.async();\n\n      var throttled = _.throttle(identity, 32),\n          results = [throttled('a'), throttled('b')];\n\n      assert.deepEqual(results, ['a', 'a']);\n\n      setTimeout(function() {\n        var results = [throttled('c'), throttled('d')];\n        assert.notEqual(results[0], 'a');\n        assert.notStrictEqual(results[0], undefined);\n\n        assert.notEqual(results[1], 'd');\n        assert.notStrictEqual(results[1], undefined);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should clear timeout when `func` is called', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      if (!isModularize) {\n        var callCount = 0,\n            dateCount = 0;\n\n        var lodash = _.runInContext({\n          'Date': {\n            'now': function() {\n              return ++dateCount == 5 ? Infinity : +new Date;\n            }\n          }\n        });\n\n        var throttled = lodash.throttle(function() { callCount++; }, 32);\n\n        throttled();\n        throttled();\n\n        setTimeout(function() {\n          assert.strictEqual(callCount, 2);\n          done();\n        }, 64);\n      }\n      else {\n        skipAssert(assert);\n        done();\n      }\n    });\n\n    QUnit.test('should not trigger a trailing call when invoked once', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          throttled = _.throttle(function() { callCount++; }, 32);\n\n      throttled();\n      assert.strictEqual(callCount, 1);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        done();\n      }, 64);\n    });\n\n    lodashStable.times(2, function(index) {\n      QUnit.test('should trigger a call when invoked repeatedly' + (index ? ' and `leading` is `false`' : ''), function(assert) {\n        assert.expect(1);\n\n        var done = assert.async();\n\n        var callCount = 0,\n            limit = (argv || isPhantom) ? 1000 : 320,\n            options = index ? { 'leading': false } : {},\n            throttled = _.throttle(function() { callCount++; }, 32, options);\n\n        var start = +new Date;\n        while ((new Date - start) < limit) {\n          throttled();\n        }\n        var actual = callCount > 1;\n        setTimeout(function() {\n          assert.ok(actual);\n          done();\n        }, 1);\n      });\n    });\n\n    QUnit.test('should trigger a second throttled call as soon as possible', function(assert) {\n      assert.expect(3);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var throttled = _.throttle(function() {\n        callCount++;\n      }, 128, { 'leading': false });\n\n      throttled();\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        throttled();\n      }, 192);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n      }, 254);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 384);\n    });\n\n    QUnit.test('should apply default options', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          throttled = _.throttle(function() { callCount++; }, 32, {});\n\n      throttled();\n      throttled();\n      assert.strictEqual(callCount, 1);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 128);\n    });\n\n    QUnit.test('should support a `leading` option', function(assert) {\n      assert.expect(2);\n\n      var withLeading = _.throttle(identity, 32, { 'leading': true });\n      assert.strictEqual(withLeading('a'), 'a');\n\n      var withoutLeading = _.throttle(identity, 32, { 'leading': false });\n      assert.strictEqual(withoutLeading('a'), undefined);\n    });\n\n    QUnit.test('should support a `trailing` option', function(assert) {\n      assert.expect(6);\n\n      var done = assert.async();\n\n      var withCount = 0,\n          withoutCount = 0;\n\n      var withTrailing = _.throttle(function(value) {\n        withCount++;\n        return value;\n      }, 64, { 'trailing': true });\n\n      var withoutTrailing = _.throttle(function(value) {\n        withoutCount++;\n        return value;\n      }, 64, { 'trailing': false });\n\n      assert.strictEqual(withTrailing('a'), 'a');\n      assert.strictEqual(withTrailing('b'), 'a');\n\n      assert.strictEqual(withoutTrailing('a'), 'a');\n      assert.strictEqual(withoutTrailing('b'), 'a');\n\n      setTimeout(function() {\n        assert.strictEqual(withCount, 2);\n        assert.strictEqual(withoutCount, 1);\n        done();\n      }, 256);\n    });\n\n    QUnit.test('should not update `lastCalled`, at the end of the timeout, when `trailing` is `false`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var throttled = _.throttle(function() {\n        callCount++;\n      }, 64, { 'trailing': false });\n\n      throttled();\n      throttled();\n\n      setTimeout(function() {\n        throttled();\n        throttled();\n      }, 96);\n\n      setTimeout(function() {\n        assert.ok(callCount > 1);\n        done();\n      }, 192);\n    });\n\n    QUnit.test('should work with a system time of `0`', function(assert) {\n      assert.expect(3);\n\n      var done = assert.async();\n\n      if (!isModularize) {\n        var callCount = 0,\n            dateCount = 0;\n\n        var lodash = _.runInContext({\n          'Date': {\n            'now': function() {\n              return ++dateCount < 4 ? 0 : +new Date;\n            }\n          }\n        });\n\n        var throttled = lodash.throttle(function(value) {\n          callCount++;\n          return value;\n        }, 32);\n\n        var results = [throttled('a'), throttled('b'), throttled('c')];\n        assert.deepEqual(results, ['a', 'a', 'a']);\n        assert.strictEqual(callCount, 1);\n\n        setTimeout(function() {\n          assert.strictEqual(callCount, 2);\n          done();\n        }, 64);\n      }\n      else {\n        skipAssert(assert, 3);\n        done();\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.debounce and lodash.throttle');\n\n  lodashStable.each(['debounce', 'throttle'], function(methodName) {\n    var func = _[methodName],\n        isDebounce = methodName == 'debounce';\n\n    QUnit.test('`_.' + methodName + '` should not error for non-object `options` values', function(assert) {\n      assert.expect(1);\n\n      func(noop, 32, 1);\n      assert.ok(true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should use a default `wait` of `0`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          funced = func(function() { callCount++; });\n\n      funced();\n\n      setTimeout(function() {\n        funced();\n        assert.strictEqual(callCount, isDebounce ? 1 : 2);\n        done();\n      }, 32);\n    });\n\n    QUnit.test('`_.' + methodName + '` should invoke `func` with the correct `this` binding', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var actual = [],\n          object = { 'funced': func(function() { actual.push(this); }, 32) },\n          expected = lodashStable.times(isDebounce ? 1 : 2, lodashStable.constant(object));\n\n      object.funced();\n      if (!isDebounce) {\n        object.funced();\n      }\n      setTimeout(function() {\n        assert.deepEqual(actual, expected);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('`_.' + methodName + '` supports recursive calls', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var actual = [],\n          args = lodashStable.map(['a', 'b', 'c'], function(chr) { return [{}, chr]; }),\n          expected = args.slice(),\n          queue = args.slice();\n\n      var funced = func(function() {\n        var current = [this];\n        push.apply(current, arguments);\n        actual.push(current);\n\n        var next = queue.shift();\n        if (next) {\n          funced.call(next[0], next[1]);\n        }\n      }, 32);\n\n      var next = queue.shift();\n      funced.call(next[0], next[1]);\n      assert.deepEqual(actual, expected.slice(0, isDebounce ? 0 : 1));\n\n      setTimeout(function() {\n        assert.deepEqual(actual, expected.slice(0, actual.length));\n        done();\n      }, 256);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work if the system time is set backwards', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      if (!isModularize) {\n        var callCount = 0,\n            dateCount = 0;\n\n        var lodash = _.runInContext({\n          'Date': {\n            'now': function() {\n              return ++dateCount == 4\n                ? +new Date(2012, 3, 23, 23, 27, 18)\n                : +new Date;\n            }\n          }\n        });\n\n        var funced = lodash[methodName](function() {\n          callCount++;\n        }, 32);\n\n        funced();\n\n        setTimeout(function() {\n          funced();\n          assert.strictEqual(callCount, isDebounce ? 1 : 2);\n          done();\n        }, 64);\n      }\n      else {\n        skipAssert(assert);\n        done();\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should support cancelling delayed calls', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var funced = func(function() {\n        callCount++;\n      }, 32, { 'leading': false });\n\n      funced();\n      funced.cancel();\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 0);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('`_.' + methodName + '` should reset `lastCalled` after cancelling', function(assert) {\n      assert.expect(3);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var funced = func(function() {\n        return ++callCount;\n      }, 32, { 'leading': true });\n\n      assert.strictEqual(funced(), 1);\n      funced.cancel();\n\n      assert.strictEqual(funced(), 2);\n      funced();\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 3);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support flushing delayed calls', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var funced = func(function() {\n        return ++callCount;\n      }, 32, { 'leading': false });\n\n      funced();\n      assert.strictEqual(funced.flush(), 1);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('`_.' + methodName + '` should noop `cancel` and `flush` when nothing is queued', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          funced = func(function() { callCount++; }, 32);\n\n      funced.cancel();\n      assert.strictEqual(funced.flush(), undefined);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 0);\n        done();\n      }, 64);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.times');\n\n  (function() {\n    QUnit.test('should coerce non-finite `n` values to `0`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-Infinity, NaN, Infinity], function(n) {\n        assert.deepEqual(_.times(n), []);\n      });\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      var actual = _.times(2.6, _.identity);\n      assert.deepEqual(actual, [0, 1]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.times(1, function(assert) {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [0]);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([0, 1, 2]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.times(3, value) : _.times(3);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an array of the results of each `iteratee` execution', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.times(3, doubled), [0, 2, 4]);\n    });\n\n    QUnit.test('should return an empty array for falsey and negative `n` values', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(-1, -Infinity),\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.times(value) : _.times();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.deepEqual(_(3).times(), [0, 1, 2]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(3).chain().times() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toArray');\n\n  (function() {\n    QUnit.test('should convert objects to arrays', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.toArray({ 'a': 1, 'b': 2 }), [1, 2]);\n    });\n\n    QUnit.test('should convert iterables to arrays', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && Symbol.iterator) {\n        var object = { '0': 'a', 'length': 1 };\n        object[Symbol.iterator] = arrayProto[Symbol.iterator];\n\n        assert.deepEqual(_.toArray(object), ['a']);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should convert maps to arrays', function(assert) {\n      assert.expect(1);\n\n      if (Map) {\n        var map = new Map;\n        map.set('a', 1);\n        map.set('b', 2);\n        assert.deepEqual(_.toArray(map), [['a', 1], ['b', 2]]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should convert strings to arrays', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.toArray(''), []);\n      assert.deepEqual(_.toArray('ab'), ['a', 'b']);\n      assert.deepEqual(_.toArray(Object('ab')), ['a', 'b']);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE + 1);\n\n        var object = lodashStable.zipObject(lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n          return ['key' + index, index];\n        }));\n\n        var actual = _(array).slice(1).map(String).toArray().value();\n        assert.deepEqual(actual, lodashStable.map(array.slice(1), String));\n\n        actual = _(object).toArray().slice(1).map(String).value();\n        assert.deepEqual(actual, _.map(_.toArray(object).slice(1), String));\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toLower');\n\n  (function() {\n    QUnit.test('should convert whole string to lower case', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.toLower('--Foo-Bar--'), '--foo-bar--');\n      assert.deepEqual(_.toLower('fooBar'), 'foobar');\n      assert.deepEqual(_.toLower('__FOO_BAR__'), '__foo_bar__');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toUpper');\n\n  (function() {\n    QUnit.test('should convert whole string to upper case', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.toUpper('--Foo-Bar'), '--FOO-BAR');\n      assert.deepEqual(_.toUpper('fooBar'), 'FOOBAR');\n      assert.deepEqual(_.toUpper('__FOO_BAR__'), '__FOO_BAR__');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.slice and lodash.toArray');\n\n  lodashStable.each(['slice', 'toArray'], function(methodName) {\n    var array = [1, 2, 3],\n        func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return a dense array', function(assert) {\n      assert.expect(3);\n\n      var sparse = Array(3);\n      sparse[1] = 2;\n\n      var actual = func(sparse);\n\n      assert.ok('0' in actual);\n      assert.ok('2' in actual);\n      assert.deepEqual(actual, sparse);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat array-like objects like arrays', function(assert) {\n      assert.expect(2);\n\n      var object = { '0': 'a', 'length': 1 };\n      assert.deepEqual(func(object), ['a']);\n      assert.deepEqual(func(args), array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a shallow clone of arrays', function(assert) {\n      assert.expect(2);\n\n      var actual = func(array);\n      assert.deepEqual(actual, array);\n      assert.notStrictEqual(actual, array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a node list for `collection`', function(assert) {\n      assert.expect(1);\n\n      if (document) {\n        try {\n          var actual = func(document.getElementsByTagName('body'));\n        } catch (e) {}\n\n        assert.deepEqual(actual, [body]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('toInteger methods');\n\n  lodashStable.each(['toInteger', 'toSafeInteger'], function(methodName) {\n    var func = _[methodName],\n        isSafe = methodName == 'toSafeInteger';\n\n    QUnit.test('`_.' + methodName + '` should convert values to integers', function(assert) {\n      assert.expect(6);\n\n      assert.strictEqual(func(-5.6), -5);\n      assert.strictEqual(func('5.6'), 5);\n      assert.strictEqual(func(), 0);\n      assert.strictEqual(func(NaN), 0);\n\n      var expected = isSafe ? MAX_SAFE_INTEGER : MAX_INTEGER;\n      assert.strictEqual(func(Infinity), expected);\n      assert.strictEqual(func(-Infinity), -expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support `value` of `-0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / func(-0), -Infinity);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toLength');\n\n  (function() {\n    QUnit.test('should return a valid length', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.toLength(-1), 0);\n      assert.strictEqual(_.toLength('1'), 1);\n      assert.strictEqual(_.toLength(1.1), 1);\n      assert.strictEqual(_.toLength(MAX_INTEGER), MAX_ARRAY_LENGTH);\n    });\n\n    QUnit.test('should return `value` if a valid length', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.toLength(0), 0);\n      assert.strictEqual(_.toLength(3), 3);\n      assert.strictEqual(_.toLength(MAX_ARRAY_LENGTH), MAX_ARRAY_LENGTH);\n    });\n\n    QUnit.test('should convert `-0` to `0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.toLength(-0), Infinity);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('number coercion methods');\n\n  lodashStable.each(['toFinite', 'toInteger', 'toNumber', 'toSafeInteger'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(2);\n\n      var values = [0, '0', -0, '-0'],\n          expected = [[0, Infinity], [0, Infinity], [-0, -Infinity], [-0, -Infinity]];\n\n      lodashStable.times(2, function(index) {\n        var others = lodashStable.map(values, index ? Object : identity);\n\n        var actual = lodashStable.map(others, function(value) {\n          var result = func(value);\n          return [result, 1 / result];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  lodashStable.each(['toFinite', 'toInteger', 'toLength', 'toNumber', 'toSafeInteger'], function(methodName) {\n    var func = _[methodName],\n        isToFinite = methodName == 'toFinite',\n        isToLength = methodName == 'toLength',\n        isToNumber = methodName == 'toNumber',\n        isToSafeInteger = methodName == 'toSafeInteger';\n\n    function negative(string) {\n      return '-' + string;\n    }\n\n    function pad(string) {\n      return whitespace + string + whitespace;\n    }\n\n    function positive(string) {\n      return '+' + string;\n    }\n\n    QUnit.test('`_.' + methodName + '` should pass thru primitive number values', function(assert) {\n      assert.expect(1);\n\n      var values = [0, 1, NaN];\n\n      var expected = lodashStable.map(values, function(value) {\n        return (!isToNumber && value !== value) ? 0 : value;\n      });\n\n      var actual = lodashStable.map(values, func);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert number primitives and objects to numbers', function(assert) {\n      assert.expect(1);\n\n      var values = [2, 1.2, MAX_SAFE_INTEGER, MAX_INTEGER, Infinity, NaN];\n\n      var expected = lodashStable.map(values, function(value) {\n        if (!isToNumber) {\n          if (!isToFinite && value == 1.2) {\n            value = 1;\n          }\n          else if (value == Infinity) {\n            value = MAX_INTEGER;\n          }\n          else if (value !== value) {\n            value = 0;\n          }\n          if (isToLength || isToSafeInteger) {\n            value = Math.min(value, isToLength ? MAX_ARRAY_LENGTH : MAX_SAFE_INTEGER);\n          }\n        }\n        var neg = isToLength ? 0 : -value;\n        return [value, value, neg, neg];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return [func(value), func(Object(value)), func(-value), func(Object(-value))];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert string primitives and objects to numbers', function(assert) {\n      assert.expect(1);\n\n      var transforms = [identity, pad, positive, negative];\n\n      var values = [\n        '10', '1.234567890', (MAX_SAFE_INTEGER + ''),\n        '1e+308', '1e308', '1E+308', '1E308',\n        '5e-324', '5E-324',\n        'Infinity', 'NaN'\n      ];\n\n      var expected = lodashStable.map(values, function(value) {\n        var n = +value;\n        if (!isToNumber) {\n          if (!isToFinite && n == 1.234567890) {\n            n = 1;\n          }\n          else if (n == Infinity) {\n            n = MAX_INTEGER;\n          }\n          else if ((!isToFinite && n == Number.MIN_VALUE) || n !== n) {\n            n = 0;\n          }\n          if (isToLength || isToSafeInteger) {\n            n = Math.min(n, isToLength ? MAX_ARRAY_LENGTH : MAX_SAFE_INTEGER);\n          }\n        }\n        var neg = isToLength ? 0 : -n;\n        return [n, n, n, n, n, n, neg, neg];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.flatMap(transforms, function(mod) {\n          return [func(mod(value)), func(Object(mod(value)))];\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert binary/octal strings to numbers', function(assert) {\n      assert.expect(1);\n\n      var numbers = [42, 5349, 1715004],\n          transforms = [identity, pad],\n          values = ['0b101010', '0o12345', '0x1a2b3c'];\n\n      var expected = lodashStable.map(numbers, function(n) {\n        return lodashStable.times(8, lodashStable.constant(n));\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        var upper = value.toUpperCase();\n        return lodashStable.flatMap(transforms, function(mod) {\n          return [func(mod(value)), func(Object(mod(value))), func(mod(upper)), func(Object(mod(upper)))];\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert invalid binary/octal strings to `' + (isToNumber ? 'NaN' : '0') + '`', function(assert) {\n      assert.expect(1);\n\n      var transforms = [identity, pad, positive, negative],\n          values = ['0b', '0o', '0x', '0b1010102', '0o123458', '0x1a2b3x'];\n\n      var expected = lodashStable.map(values, function(n) {\n        return lodashStable.times(8, lodashStable.constant(isToNumber ? NaN : 0));\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.flatMap(transforms, function(mod) {\n          return [func(mod(value)), func(Object(mod(value)))];\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert symbols to `' + (isToNumber ? 'NaN' : '0') + '`', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        var object1 = Object(symbol),\n            object2 = Object(symbol),\n            values = [symbol, object1, object2],\n            expected = lodashStable.map(values, lodashStable.constant(isToNumber ? NaN : 0));\n\n        object2.valueOf = undefined;\n        var actual = lodashStable.map(values, func);\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert empty values to `0` or `NaN`', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(whitespace);\n\n      var expected = lodashStable.map(values, function(value) {\n        return (isToNumber && value !== whitespace) ? Number(value) : 0;\n      });\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? func(value) : func();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce objects to numbers', function(assert) {\n      assert.expect(1);\n\n      var values = [\n        {},\n        [],\n        [1],\n        [1, 2],\n        { 'valueOf': '1.1' },\n        { 'valueOf': '1.1', 'toString': lodashStable.constant('2.2') },\n        { 'valueOf': lodashStable.constant('1.1'), 'toString': '2.2' },\n        { 'valueOf': lodashStable.constant('1.1'), 'toString': lodashStable.constant('2.2') },\n        { 'valueOf': lodashStable.constant('-0x1a2b3c') },\n        { 'toString': lodashStable.constant('-0x1a2b3c') },\n        { 'valueOf': lodashStable.constant('0o12345') },\n        { 'toString': lodashStable.constant('0o12345') },\n        { 'valueOf': lodashStable.constant('0b101010') },\n        { 'toString': lodashStable.constant('0b101010') }\n      ];\n\n      var expected = [\n        NaN,  0,   1,   NaN,\n        NaN,  2.2, 1.1, 1.1,\n        NaN,  NaN,\n        5349, 5349,\n        42,   42\n      ];\n\n      if (isToFinite) {\n        expected = [\n          0,    0,    1,   0,\n          0,    2.2,  1.1, 1.1,\n          0,    0,\n          5349, 5349,\n          42,   42\n        ];\n      }\n      else if (!isToNumber) {\n        expected = [\n          0,    0,    1, 0,\n          0,    2,    1, 1,\n          0,    0,\n          5349, 5349,\n          42,   42\n        ];\n      }\n      var actual = lodashStable.map(values, func);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toPairs');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.entries, _.toPairs);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toPairsIn');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.entriesIn, _.toPairsIn);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('toPairs methods');\n\n  lodashStable.each(['toPairs', 'toPairsIn'], function(methodName) {\n    var func = _[methodName],\n        isToPairs = methodName == 'toPairs';\n\n    QUnit.test('`_.' + methodName + '` should create an array of string keyed-value pairs', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2 },\n          actual = lodashStable.sortBy(func(object), 0);\n\n      assert.deepEqual(actual, [['a', 1], ['b', 2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isToPairs ? 'not ' : '') + 'include inherited string keyed property values', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var expected = isToPairs ? [['a', 1]] : [['a', 1], ['b', 2]],\n          actual = lodashStable.sortBy(func(new Foo), 0);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert objects with a `length` property', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'a', '1': 'b', 'length': 2 },\n          actual = lodashStable.sortBy(func(object), 0);\n\n      assert.deepEqual(actual, [['0', 'a'], ['1', 'b'], ['length', 2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert maps', function(assert) {\n      assert.expect(1);\n\n      if (Map) {\n        var map = new Map;\n        map.set('a', 1);\n        map.set('b', 2);\n        assert.deepEqual(func(map), [['a', 1], ['b', 2]]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert sets', function(assert) {\n      assert.expect(1);\n\n      if (Set) {\n        var set = new Set;\n        set.add(1);\n        set.add(2);\n        assert.deepEqual(func(set), [[1, 1], [2, 2]]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert strings', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each(['xo', Object('xo')], function(string) {\n        var actual = lodashStable.sortBy(func(string), 0);\n        assert.deepEqual(actual, [['0', 'x'], ['1', 'o']]);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toPath');\n\n  (function() {\n    QUnit.test('should convert a string to a path', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.toPath('a.b.c'), ['a', 'b', 'c']);\n      assert.deepEqual(_.toPath('a[0].b.c'), ['a', '0', 'b', 'c']);\n    });\n\n    QUnit.test('should coerce array elements to strings', function(assert) {\n      assert.expect(4);\n\n      var array = ['a', 'b', 'c'];\n\n      lodashStable.each([array, lodashStable.map(array, Object)], function(value) {\n        var actual = _.toPath(value);\n        assert.deepEqual(actual, array);\n        assert.notStrictEqual(actual, array);\n      });\n    });\n\n    QUnit.test('should return new path array', function(assert) {\n      assert.expect(1);\n\n      assert.notStrictEqual(_.toPath('a.b.c'), _.toPath('a.b.c'));\n    });\n\n    QUnit.test('should not coerce symbols to strings', function(assert) {\n      assert.expect(4);\n\n      if (Symbol) {\n        var object = Object(symbol);\n        lodashStable.each([symbol, object, [symbol], [object]], function(value) {\n          var actual = _.toPath(value);\n          assert.ok(lodashStable.isSymbol(actual[0]));\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should handle complex paths', function(assert) {\n      assert.expect(1);\n\n      var actual = _.toPath('a[-1.23][\"[\\\\\"b\\\\\"]\"].c[\\'[\\\\\\'d\\\\\\']\\'][\\ne\\n][f].g');\n      assert.deepEqual(actual, ['a', '-1.23', '[\"b\"]', 'c', \"['d']\", '\\ne\\n', 'f', 'g']);\n    });\n\n    QUnit.test('should handle consecutive empty brackets and dots', function(assert) {\n      assert.expect(12);\n\n      var expected = ['', 'a'];\n      assert.deepEqual(_.toPath('.a'), expected);\n      assert.deepEqual(_.toPath('[].a'), expected);\n\n      expected = ['', '', 'a'];\n      assert.deepEqual(_.toPath('..a'), expected);\n      assert.deepEqual(_.toPath('[][].a'), expected);\n\n      expected = ['a', '', 'b'];\n      assert.deepEqual(_.toPath('a..b'), expected);\n      assert.deepEqual(_.toPath('a[].b'), expected);\n\n      expected = ['a', '', '', 'b'];\n      assert.deepEqual(_.toPath('a...b'), expected);\n      assert.deepEqual(_.toPath('a[][].b'), expected);\n\n      expected = ['a', ''];\n      assert.deepEqual(_.toPath('a.'), expected);\n      assert.deepEqual(_.toPath('a[]'), expected);\n\n      expected = ['a', '', ''];\n      assert.deepEqual(_.toPath('a..'), expected);\n      assert.deepEqual(_.toPath('a[][]'), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toPlainObject');\n\n  (function() {\n    QUnit.test('should flatten inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.b = 2;\n      }\n      Foo.prototype.c = 3;\n\n      var actual = lodashStable.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n      assert.deepEqual(actual, { 'a': 1, 'b': 2, 'c': 3 });\n    });\n\n    QUnit.test('should convert `arguments` objects to plain objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.toPlainObject(args),\n          expected = { '0': 1, '1': 2, '2': 3 };\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should convert arrays to plain objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.toPlainObject(['a', 'b', 'c']),\n          expected = { '0': 'a', '1': 'b', '2': 'c' };\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toString');\n\n  (function() {\n    QUnit.test('should treat nullish values as empty strings', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubString);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.toString(value) : _.toString();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var values = [-0, Object(-0), 0, Object(0)],\n          expected = ['-0', '-0', '0', '0'],\n          actual = lodashStable.map(values, _.toString);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should preserve the sign of `0` in an array', function(assert) {\n      assert.expect(1);\n\n      var values = [-0, Object(-0), 0, Object(0)];\n      assert.deepEqual(_.toString(values), '-0,-0,0,0');\n    });\n\n    QUnit.test('should not error on symbols', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        try {\n          assert.strictEqual(_.toString(symbol), 'Symbol(a)');\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should not error on an array of symbols', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        try {\n          assert.strictEqual(_.toString([symbol]), 'Symbol(a)');\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return the `toString` result of the wrapped value', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _([1, 2, 3]);\n        assert.strictEqual(wrapped.toString(), '1,2,3');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.transform');\n\n  (function() {\n    function Foo() {\n      this.a = 1;\n      this.b = 2;\n      this.c = 3;\n    }\n\n    QUnit.test('should create an object with the same `[[Prototype]]` as `object` when `accumulator` is nullish', function(assert) {\n      assert.expect(4);\n\n      var accumulators = [, null, undefined],\n          object = new Foo,\n          expected = lodashStable.map(accumulators, stubTrue);\n\n      var iteratee = function(result, value, key) {\n        result[key] = square(value);\n      };\n\n      var mapper = function(accumulator, index) {\n        return index ? _.transform(object, iteratee, accumulator) : _.transform(object, iteratee);\n      };\n\n      var results = lodashStable.map(accumulators, mapper);\n\n      var actual = lodashStable.map(results, function(result) {\n        return result instanceof Foo;\n      });\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(accumulators, lodashStable.constant({ 'a': 1, 'b': 4, 'c': 9 }));\n      actual = lodashStable.map(results, lodashStable.toPlainObject);\n\n      assert.deepEqual(actual, expected);\n\n      object = { 'a': 1, 'b': 2, 'c': 3 };\n      actual = lodashStable.map(accumulators, mapper);\n\n      assert.deepEqual(actual, expected);\n\n      object = [1, 2, 3];\n      expected = lodashStable.map(accumulators, lodashStable.constant([1, 4, 9]));\n      actual = lodashStable.map(accumulators, mapper);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should create regular arrays from typed arrays', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(typedArrays, stubTrue);\n\n      var actual = lodashStable.map(typedArrays, function(type) {\n        var Ctor = root[type],\n            array = Ctor ? new Ctor(new ArrayBuffer(24)) : [];\n\n        return lodashStable.isArray(_.transform(array, noop));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should support an `accumulator` value', function(assert) {\n      assert.expect(6);\n\n      var values = [new Foo, [1, 2, 3], { 'a': 1, 'b': 2, 'c': 3 }],\n          expected = lodashStable.map(values, lodashStable.constant([1, 4, 9]));\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.transform(value, function(result, value) {\n          result.push(square(value));\n        }, []);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      var object = { 'a': 1, 'b': 4, 'c': 9 },\n      expected = [object, { '0': 1, '1': 4, '2': 9 }, object];\n\n      actual = lodashStable.map(values, function(value) {\n        return _.transform(value, function(result, value, key) {\n          result[key] = square(value);\n        }, {});\n      });\n\n      assert.deepEqual(actual, expected);\n\n      lodashStable.each([[], {}], function(accumulator) {\n        var actual = lodashStable.map(values, function(value) {\n          return _.transform(value, noop, accumulator);\n        });\n\n        assert.ok(lodashStable.every(actual, function(result) {\n          return result === accumulator;\n        }));\n\n        assert.strictEqual(_.transform(null, null, accumulator), accumulator);\n      });\n    });\n\n    QUnit.test('should treat sparse arrays as dense', function(assert) {\n      assert.expect(1);\n\n      var actual = _.transform(Array(1), function(result, value, index) {\n        result[index] = String(value);\n      });\n\n      assert.deepEqual(actual, ['undefined']);\n    });\n\n    QUnit.test('should work without an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      assert.ok(_.transform(new Foo) instanceof Foo);\n    });\n\n    QUnit.test('should ensure `object` is an object before using its `[[Prototype]]`', function(assert) {\n      assert.expect(2);\n\n      var Ctors = [Boolean, Boolean, Number, Number, Number, String, String],\n          values = [false, true, 0, 1, NaN, '', 'a'],\n          expected = lodashStable.map(values, stubObject);\n\n      var results = lodashStable.map(values, function(value) {\n        return _.transform(value);\n      });\n\n      assert.deepEqual(results, expected);\n\n      expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(results, function(value, index) {\n        return value instanceof Ctors[index];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ensure `object` constructor is a function before using its `[[Prototype]]`', function(assert) {\n      assert.expect(1);\n\n      Foo.prototype.constructor = null;\n      assert.notOk(_.transform(new Foo) instanceof Foo);\n      Foo.prototype.constructor = Foo;\n    });\n\n    QUnit.test('should create an empty object when given a falsey `object`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubObject);\n\n      var actual = lodashStable.map(falsey, function(object, index) {\n        return index ? _.transform(object) : _.transform();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    lodashStable.each({\n      'array': [1, 2, 3],\n      'object': { 'a': 1, 'b': 2, 'c': 3 }\n    },\n    function(object, key) {\n      QUnit.test('should provide correct `iteratee` arguments when transforming an ' + key, function(assert) {\n        assert.expect(2);\n\n        var args;\n\n        _.transform(object, function() {\n          args || (args = slice.call(arguments));\n        });\n\n        var first = args[0];\n        if (key == 'array') {\n          assert.ok(first !== object && lodashStable.isArray(first));\n          assert.deepEqual(args, [first, 1, 0, object]);\n        } else {\n          assert.ok(first !== object && lodashStable.isPlainObject(first));\n          assert.deepEqual(args, [first, 1, 'a', object]);\n        }\n      });\n    });\n\n    QUnit.test('should create an object from the same realm as `object`', function(assert) {\n      assert.expect(1);\n\n      var objects = lodashStable.filter(realm, function(value) {\n        return lodashStable.isObject(value) && !lodashStable.isElement(value);\n      });\n\n      var expected = lodashStable.map(objects, stubTrue);\n\n      var actual = lodashStable.map(objects, function(object) {\n        var Ctor = object.constructor,\n            result = _.transform(object);\n\n        if (result === object) {\n          return false;\n        }\n        if (lodashStable.isTypedArray(object)) {\n          return result instanceof Array;\n        }\n        return result instanceof Ctor || !(new Ctor instanceof Ctor);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('trim methods');\n\n  lodashStable.each(['trim', 'trimStart', 'trimEnd'], function(methodName, index) {\n    var func = _[methodName],\n        parts = [];\n\n    if (index != 2) {\n      parts.push('leading');\n    }\n    if (index != 1) {\n      parts.push('trailing');\n    }\n    parts = parts.join(' and ');\n\n    QUnit.test('`_.' + methodName + '` should remove ' + parts + ' whitespace', function(assert) {\n      assert.expect(1);\n\n      var string = whitespace + 'a b c' + whitespace,\n          expected = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : '');\n\n      assert.strictEqual(func(string), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `string` to a string', function(assert) {\n      assert.expect(1);\n\n      var object = { 'toString': lodashStable.constant(whitespace + 'a b c' + whitespace) },\n          expected = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : '');\n\n      assert.strictEqual(func(object), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should remove ' + parts + ' `chars`', function(assert) {\n      assert.expect(1);\n\n      var string = '-_-a-b-c-_-',\n          expected = (index == 2 ? '-_-' : '') + 'a-b-c' + (index == 1 ? '-_-' : '');\n\n      assert.strictEqual(func(string, '_-'), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `chars` to a string', function(assert) {\n      assert.expect(1);\n\n      var object = { 'toString': lodashStable.constant('_-') },\n          string = '-_-a-b-c-_-',\n          expected = (index == 2 ? '-_-' : '') + 'a-b-c' + (index == 1 ? '-_-' : '');\n\n      assert.strictEqual(func(string, object), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an empty string for empty values and `chars`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each([null, '_-'], function(chars) {\n        assert.strictEqual(func(null, chars), '');\n        assert.strictEqual(func(undefined, chars), '');\n        assert.strictEqual(func('', chars), '');\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `undefined` or empty string values for `chars`', function(assert) {\n      assert.expect(2);\n\n      var string = whitespace + 'a b c' + whitespace,\n          expected = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : '');\n\n      assert.strictEqual(func(string, undefined), expected);\n      assert.strictEqual(func(string, ''), string);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var string = Object(whitespace + 'a b c' + whitespace),\n          trimmed = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : ''),\n          actual = lodashStable.map([string, string, string], func);\n\n      assert.deepEqual(actual, [trimmed, trimmed, trimmed]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var string = whitespace + 'a b c' + whitespace,\n            expected = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : '');\n\n        assert.strictEqual(_(string)[methodName](), expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var string = whitespace + 'a b c' + whitespace;\n        assert.ok(_(string).chain()[methodName]() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('uncommon symbols');\n\n  (function() {\n    var flag = '\\ud83c\\uddfa\\ud83c\\uddf8',\n        heart = '\\u2764' + emojiVar,\n        hearts = '\\ud83d\\udc95',\n        comboGlyph = '\\ud83d\\udc68\\u200d' + heart + '\\u200d\\ud83d\\udc8B\\u200d\\ud83d\\udc68',\n        hashKeycap = '#' + emojiVar + '\\u20e3',\n        leafs = '\\ud83c\\udf42',\n        mic = '\\ud83c\\udf99',\n        noMic = mic + '\\u20e0',\n        raisedHand = '\\u270B' + emojiVar,\n        rocket = '\\ud83d\\ude80',\n        thumbsUp = '\\ud83d\\udc4d';\n\n    QUnit.test('should account for astral symbols', function(assert) {\n      assert.expect(34);\n\n      var allHearts = _.repeat(hearts, 10),\n          chars = hearts + comboGlyph,\n          string = 'A ' + leafs + ', ' + comboGlyph + ', and ' + rocket,\n          trimChars = comboGlyph + hearts,\n          trimString = trimChars + string + trimChars;\n\n      assert.strictEqual(_.camelCase(hearts + ' the ' + leafs), hearts + 'The' + leafs);\n      assert.strictEqual(_.camelCase(string), 'a' + leafs + comboGlyph + 'And' + rocket);\n      assert.strictEqual(_.capitalize(rocket), rocket);\n\n      assert.strictEqual(_.pad(string, 16), ' ' + string + '  ');\n      assert.strictEqual(_.padStart(string, 16), '   ' + string);\n      assert.strictEqual(_.padEnd(string, 16), string + '   ');\n\n      assert.strictEqual(_.pad(string, 16, chars), hearts + string + chars);\n      assert.strictEqual(_.padStart(string, 16, chars), chars + hearts + string);\n      assert.strictEqual(_.padEnd(string, 16, chars), string + chars + hearts);\n\n      assert.strictEqual(_.size(string), 13);\n      assert.deepEqual(_.split(string, ' '), ['A', leafs + ',', comboGlyph + ',', 'and', rocket]);\n      assert.deepEqual(_.split(string, ' ', 3), ['A', leafs + ',', comboGlyph + ',']);\n      assert.deepEqual(_.split(string, undefined), [string]);\n      assert.deepEqual(_.split(string, undefined, -1), [string]);\n      assert.deepEqual(_.split(string, undefined, 0), []);\n\n      var expected = ['A', ' ', leafs, ',', ' ', comboGlyph, ',', ' ', 'a', 'n', 'd', ' ', rocket];\n\n      assert.deepEqual(_.split(string, ''), expected);\n      assert.deepEqual(_.split(string, '', 6), expected.slice(0, 6));\n      assert.deepEqual(_.toArray(string), expected);\n\n      assert.strictEqual(_.trim(trimString, chars), string);\n      assert.strictEqual(_.trimStart(trimString, chars), string + trimChars);\n      assert.strictEqual(_.trimEnd(trimString, chars), trimChars + string);\n\n      assert.strictEqual(_.truncate(string, { 'length': 13 }), string);\n      assert.strictEqual(_.truncate(string, { 'length': 6 }), 'A ' + leafs + '...');\n\n      assert.deepEqual(_.words(string), ['A', leafs, comboGlyph, 'and', rocket]);\n      assert.deepEqual(_.toArray(hashKeycap), [hashKeycap]);\n      assert.deepEqual(_.toArray(noMic), [noMic]);\n\n      lodashStable.times(2, function(index) {\n        var separator = index ? RegExp(hearts) : hearts,\n            options = { 'length': 4, 'separator': separator },\n            actual = _.truncate(string, options);\n\n        assert.strictEqual(actual, 'A...');\n        assert.strictEqual(actual.length, 4);\n\n        actual = _.truncate(allHearts, options);\n        assert.strictEqual(actual, hearts + '...');\n        assert.strictEqual(actual.length, 5);\n      });\n    });\n\n    QUnit.test('should account for combining diacritical marks', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.map(comboMarks, function(mark) {\n        return 'o' + mark;\n      });\n\n      var expected = lodashStable.map(values, function(value) {\n        return [1, [value], [value]];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return [_.size(value), _.toArray(value), _.words(value)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should account for fitzpatrick modifiers', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.map(fitzModifiers, function(modifier) {\n        return thumbsUp + modifier;\n      });\n\n      var expected = lodashStable.map(values, function(value) {\n        return [1, [value], [value]];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return [_.size(value), _.toArray(value), _.words(value)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should account for regional symbols', function(assert) {\n      assert.expect(6);\n\n      var pair = flag.match(/\\ud83c[\\udde6-\\uddff]/g),\n          regionals = pair.join(' ');\n\n      assert.strictEqual(_.size(flag), 1);\n      assert.strictEqual(_.size(regionals), 3);\n\n      assert.deepEqual(_.toArray(flag), [flag]);\n      assert.deepEqual(_.toArray(regionals), [pair[0], ' ', pair[1]]);\n\n      assert.deepEqual(_.words(flag), [flag]);\n      assert.deepEqual(_.words(regionals), [pair[0], pair[1]]);\n    });\n\n    QUnit.test('should account for variation selectors', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.size(heart), 1);\n      assert.deepEqual(_.toArray(heart), [heart]);\n      assert.deepEqual(_.words(heart), [heart]);\n    });\n\n    QUnit.test('should account for variation selectors with fitzpatrick modifiers', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.map(fitzModifiers, function(modifier) {\n        return raisedHand + modifier;\n      });\n\n      var expected = lodashStable.map(values, function(value) {\n        return [1, [value], [value]];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return [_.size(value), _.toArray(value), _.words(value)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should match lone surrogates', function(assert) {\n      assert.expect(3);\n\n      var pair = hearts.split(''),\n          surrogates = pair[0] + ' ' + pair[1];\n\n      assert.strictEqual(_.size(surrogates), 3);\n      assert.deepEqual(_.toArray(surrogates), [pair[0], ' ', pair[1]]);\n      assert.deepEqual(_.words(surrogates), []);\n    });\n\n    QUnit.test('should match side by side fitzpatrick modifiers separately ', function(assert) {\n      assert.expect(1);\n\n      var string = fitzModifiers[0] + fitzModifiers[0];\n      assert.deepEqual(_.toArray(string), [fitzModifiers[0], fitzModifiers[0]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unary');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should cap the number of arguments provided to `func`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(['6', '8', '10'], _.unary(parseInt));\n      assert.deepEqual(actual, [6, 8, 10]);\n    });\n\n    QUnit.test('should not force a minimum argument count', function(assert) {\n      assert.expect(1);\n\n      var capped = _.unary(fn);\n      assert.deepEqual(capped(), []);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(1);\n\n      var capped = _.unary(function(a, b) { return this; }),\n          object = { 'capped': capped };\n\n      assert.strictEqual(object.capped(), object);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unescape');\n\n  (function() {\n    var escaped = '&amp;&lt;&gt;&quot;&#39;/',\n        unescaped = '&<>\"\\'/';\n\n    escaped += escaped;\n    unescaped += unescaped;\n\n    QUnit.test('should unescape entities in order', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.unescape('&amp;lt;'), '&lt;');\n    });\n\n    QUnit.test('should unescape the proper entities', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.unescape(escaped), unescaped);\n    });\n\n    QUnit.test('should handle strings with nothing to unescape', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.unescape('abc'), 'abc');\n    });\n\n    QUnit.test('should unescape the same characters escaped by `_.escape`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.unescape(_.escape(unescaped)), unescaped);\n    });\n\n    lodashStable.each(['&#96;', '&#x2F;'], function(entity) {\n      QUnit.test('should not unescape the \"' + entity + '\" entity', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.unescape(entity), entity);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('union methods');\n\n  lodashStable.each(['union', 'unionBy', 'unionWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the union of two arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2], [1, 2]);\n      assert.deepEqual(actual, [2, 1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the union of multiple arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2], [1, 2], [2, 3]);\n      assert.deepEqual(actual, [2, 1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not flatten nested arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([1, 3, 2], [1, [5]], [2, [4]]);\n      assert.deepEqual(actual, [1, 3, 2, [5], [4]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore values that are not arrays or `arguments` objects', function(assert) {\n      assert.expect(3);\n\n      var array = [0];\n      assert.deepEqual(func(array, 3, { '0': 1 }, null), array);\n      assert.deepEqual(func(null, array, null, [2, 1]), [0, 2, 1]);\n      assert.deepEqual(func(array, null, args, null), [0, 1, 2, 3]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unionBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.unionBy([2.1], [1.2, 2.3], Math.floor);\n      assert.deepEqual(actual, [2.1, 1.2]);\n\n      actual = _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 1 }, { 'x': 2 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.unionBy([2.1], [1.2, 2.3], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [2.1]);\n    });\n\n    QUnit.test('should output values from the first possible array', function(assert) {\n      assert.expect(1);\n\n      var actual = _.unionBy([{ 'x': 1, 'y': 1 }], [{ 'x': 1, 'y': 2 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 1, 'y': 1 }]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unionWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],\n          others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }],\n          actual = _.unionWith(objects, others, lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[0], objects[1], others[0]]);\n    });\n\n    QUnit.test('should output values from the first possible array', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 1 }],\n          others = [{ 'x': 1, 'y': 2 }];\n\n      var actual = _.unionWith(objects, others, function(a, b) {\n        return a.x == b.x;\n      });\n\n      assert.deepEqual(actual, [{ 'x': 1, 'y': 1 }]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('uniq methods');\n\n  lodashStable.each(['uniq', 'uniqBy', 'uniqWith', 'sortedUniq', 'sortedUniqBy'], function(methodName) {\n    var func = _[methodName],\n        isSorted = /^sorted/.test(methodName),\n        objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }, { 'a': 2 }, { 'a': 3 }, { 'a': 1 }];\n\n    if (isSorted) {\n      objects = _.sortBy(objects, 'a');\n    }\n    else {\n      QUnit.test('`_.' + methodName + '` should return unique values of an unsorted array', function(assert) {\n        assert.expect(1);\n\n        var array = [2, 1, 2];\n        assert.deepEqual(func(array), [2, 1]);\n      });\n    }\n    QUnit.test('`_.' + methodName + '` should return unique values of a sorted array', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 2];\n      assert.deepEqual(func(array), [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat object instances as unique', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(objects), objects);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat `-0` as `0`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(func([-0, 0]), lodashStable.toString);\n      assert.deepEqual(actual, ['0']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func([NaN, NaN]), [NaN]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays', function(assert) {\n      assert.expect(1);\n\n      var largeArray = [],\n          expected = [0, {}, 'a'],\n          count = Math.ceil(LARGE_ARRAY_SIZE / expected.length);\n\n      lodashStable.each(expected, function(value) {\n        lodashStable.times(count, function() {\n          largeArray.push(value);\n        });\n      });\n\n      assert.deepEqual(func(largeArray), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `-0` as `0`', function(assert) {\n      assert.expect(1);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n        return isEven(index) ? -0 : 0;\n      });\n\n      var actual = lodashStable.map(func(largeArray), lodashStable.toString);\n      assert.deepEqual(actual, ['0']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of boolean, `NaN`, and nullish values', function(assert) {\n      assert.expect(1);\n\n      var largeArray = [],\n          expected = [null, undefined, false, true, NaN],\n          count = Math.ceil(LARGE_ARRAY_SIZE / expected.length);\n\n      lodashStable.each(expected, function(value) {\n        lodashStable.times(count, function() {\n          largeArray.push(value);\n        });\n      });\n\n      assert.deepEqual(func(largeArray), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of symbols', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, Symbol);\n        assert.deepEqual(func(largeArray), largeArray);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of well-known symbols', function(assert) {\n      assert.expect(1);\n\n      // See http://www.ecma-international.org/ecma-262/6.0/#sec-well-known-symbols.\n      if (Symbol) {\n        var expected = [\n          Symbol.hasInstance, Symbol.isConcatSpreadable, Symbol.iterator,\n          Symbol.match, Symbol.replace, Symbol.search, Symbol.species,\n          Symbol.split, Symbol.toPrimitive, Symbol.toStringTag, Symbol.unscopables\n        ];\n\n        var largeArray = [],\n            count = Math.ceil(LARGE_ARRAY_SIZE / expected.length);\n\n        expected = lodashStable.map(expected, function(symbol) {\n          return symbol || {};\n        });\n\n        lodashStable.each(expected, function(value) {\n          lodashStable.times(count, function() {\n            largeArray.push(value);\n          });\n        });\n\n        assert.deepEqual(func(largeArray), expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should distinguish between numbers and numeric strings', function(assert) {\n      assert.expect(1);\n\n      var largeArray = [],\n          expected = ['2', 2, Object('2'), Object(2)],\n          count = Math.ceil(LARGE_ARRAY_SIZE / expected.length);\n\n      lodashStable.each(expected, function(value) {\n        lodashStable.times(count, function() {\n          largeArray.push(value);\n        });\n      });\n\n      assert.deepEqual(func(largeArray), expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.uniq');\n\n  (function() {\n    QUnit.test('should perform an unsorted uniq when used as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[2, 1, 2], [1, 2, 1]],\n          actual = lodashStable.map(array, lodashStable.uniq);\n\n      assert.deepEqual(actual, [[2, 1], [1, 2]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('uniqBy methods');\n\n  lodashStable.each(['uniqBy', 'sortedUniqBy'], function(methodName) {\n    var func = _[methodName],\n        isSorted = methodName == 'sortedUniqBy',\n        objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }, { 'a': 2 }, { 'a': 3 }, { 'a': 1 }];\n\n    if (isSorted) {\n      objects = _.sortBy(objects, 'a');\n    }\n    QUnit.test('`_.' + methodName + '` should work with an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var expected = isSorted ? [{ 'a': 1 }, { 'a': 2 }, { 'a': 3 }] : objects.slice(0, 3);\n\n      var actual = func(objects, function(object) {\n        return object.a;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with large arrays', function(assert) {\n      assert.expect(2);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function() {\n        return [1, 2];\n      });\n\n      var actual = func(largeArray, String);\n      assert.strictEqual(actual[0], largeArray[0]);\n      assert.deepEqual(actual, [[1, 2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      func(objects, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [objects[0]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var expected = isSorted ? [{ 'a': 1 }, { 'a': 2 }, { 'a': 3 }] : objects.slice(0, 3),\n          actual = func(objects, 'a');\n\n      assert.deepEqual(actual, expected);\n\n      var arrays = [[2], [3], [1], [2], [3], [1]];\n      if (isSorted) {\n        arrays = lodashStable.sortBy(arrays, 0);\n      }\n      expected = isSorted ? [[1], [2], [3]] : arrays.slice(0, 3);\n      actual = func(arrays, 0);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    lodashStable.each({\n      'an array': [0, 'a'],\n      'an object': { '0': 'a' },\n      'a number': 0,\n      'a string': '0'\n    },\n    function(iteratee, key) {\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' for `iteratee`', function(assert) {\n        assert.expect(1);\n\n        var actual = func([['a'], ['a'], ['b']], iteratee);\n        assert.deepEqual(actual, [['a'], ['b']]);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.uniqWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }],\n          actual = _.uniqWith(objects, lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[0], objects[1]]);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n        return isEven(index) ? -0 : 0;\n      });\n\n      var arrays = [[-0, 0], largeArray],\n          expected = lodashStable.map(arrays, lodashStable.constant(['-0']));\n\n      var actual = lodashStable.map(arrays, function(array) {\n        return lodashStable.map(_.uniqWith(array, lodashStable.eq), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.uniqueId');\n\n  (function() {\n    QUnit.test('should generate unique ids', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.times(1000, function(assert) {\n        return _.uniqueId();\n      });\n\n      assert.strictEqual(lodashStable.uniq(actual).length, actual.length);\n    });\n\n    QUnit.test('should return a string value when not providing a `prefix`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(typeof _.uniqueId(), 'string');\n    });\n\n    QUnit.test('should coerce the prefix argument to a string', function(assert) {\n      assert.expect(1);\n\n      var actual = [_.uniqueId(3), _.uniqueId(2), _.uniqueId(1)];\n      assert.ok(/3\\d+,2\\d+,1\\d+/.test(actual));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unset');\n\n  (function() {\n    QUnit.test('should unset property values', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var object = { 'a': 1, 'c': 2 };\n        assert.strictEqual(_.unset(object, path), true);\n        assert.deepEqual(object, { 'c': 2 });\n      });\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var props = [-0, Object(-0), 0, Object(0)],\n          expected = lodashStable.map(props, lodashStable.constant([true, false]));\n\n      var actual = lodashStable.map(props, function(key) {\n        var object = { '-0': 'a', '0': 'b' };\n        return [_.unset(object, key), lodashStable.toString(key) in object];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should unset symbol keyed property values', function(assert) {\n      assert.expect(2);\n\n      if (Symbol) {\n        var object = {};\n        object[symbol] = 1;\n\n        assert.strictEqual(_.unset(object, symbol), true);\n        assert.notOk(symbol in object);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should unset deep property values', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var object = { 'a': { 'b': null } };\n        assert.strictEqual(_.unset(object, path), true);\n        assert.deepEqual(object, { 'a': {} });\n      });\n    });\n\n    QUnit.test('should handle complex paths', function(assert) {\n      assert.expect(4);\n\n      var paths = [\n        'a[-1.23][\"[\\\\\"b\\\\\"]\"].c[\\'[\\\\\\'d\\\\\\']\\'][\\ne\\n][f].g',\n        ['a', '-1.23', '[\"b\"]', 'c', \"['d']\", '\\ne\\n', 'f', 'g']\n      ];\n\n      lodashStable.each(paths, function(path) {\n        var object = { 'a': { '-1.23': { '[\"b\"]': { 'c': { \"['d']\": { '\\ne\\n': { 'f': { 'g': 8 } } } } } } } };\n        assert.strictEqual(_.unset(object, path), true);\n        assert.notOk('g' in object.a[-1.23]['[\"b\"]'].c[\"['d']\"]['\\ne\\n'].f);\n      });\n    });\n\n    QUnit.test('should return `true` for nonexistent paths', function(assert) {\n      assert.expect(5);\n\n      var object = { 'a': { 'b': { 'c': null } } };\n\n      lodashStable.each(['z', 'a.z', 'a.b.z', 'a.b.c.z'], function(path) {\n        assert.strictEqual(_.unset(object, path), true);\n      });\n\n      assert.deepEqual(object, { 'a': { 'b': { 'c': null } } });\n    });\n\n    QUnit.test('should not error when `object` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined],\n          expected = [[true, true], [true, true]];\n\n      var actual = lodashStable.map(values, function(value) {\n        try {\n          return [_.unset(value, 'a.b'), _.unset(value, ['a', 'b'])];\n        } catch (e) {\n          return e.message;\n        }\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should follow `path` over non-plain objects', function(assert) {\n      assert.expect(8);\n\n      var object = { 'a': '' },\n          paths = ['constructor.prototype.a', ['constructor', 'prototype', 'a']];\n\n      lodashStable.each(paths, function(path) {\n        numberProto.a = 1;\n\n        var actual = _.unset(0, path);\n        assert.strictEqual(actual, true);\n        assert.notOk('a' in numberProto);\n\n        delete numberProto.a;\n      });\n\n      lodashStable.each(['a.replace.b', ['a', 'replace', 'b']], function(path) {\n        stringProto.replace.b = 1;\n\n        var actual = _.unset(object, path);\n        assert.strictEqual(actual, true);\n        assert.notOk('a' in stringProto.replace);\n\n        delete stringProto.replace.b;\n      });\n    });\n\n    QUnit.test('should return `false` for non-configurable properties', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n\n      if (!isStrict) {\n        defineProperty(object, 'a', {\n          'configurable': false,\n          'enumerable': true,\n          'writable': true,\n          'value': 1,\n        });\n        assert.strictEqual(_.unset(object, 'a'), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unzipWith');\n\n  (function() {\n    QUnit.test('should unzip arrays combining regrouped elements with `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 4], [2, 5], [3, 6]];\n\n      var actual = _.unzipWith(array, function(a, b, c) {\n        return a + b + c;\n      });\n\n      assert.deepEqual(actual, [6, 15]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.unzipWith([[1, 3, 5], [2, 4, 6]], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [1, 2]);\n    });\n\n    QUnit.test('should perform a basic unzip when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 3], [2, 4]],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant(_.unzip(array)));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.unzipWith(array, value) : _.unzipWith(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.updateWith');\n\n  (function() {\n    QUnit.test('should work with a `customizer` callback', function(assert) {\n      assert.expect(1);\n\n      var actual = _.updateWith({ '0': {} }, '[0][1][2]', stubThree, function(value) {\n        return lodashStable.isObject(value) ? undefined : {};\n      });\n\n      assert.deepEqual(actual, { '0': { '1': { '2': 3 } } });\n    });\n\n    QUnit.test('should work with a `customizer` that returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.updateWith({}, 'a[0].b.c', stubFour, noop);\n      assert.deepEqual(actual, { 'a': [{ 'b': { 'c': 4 } }] });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('update methods');\n\n  lodashStable.each(['update', 'updateWith'], function(methodName) {\n    var func = _[methodName],\n        oldValue = 1;\n\n    QUnit.test('`_.' + methodName + '` should invoke `updater` with the value on `path` of `object`', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': [{ 'b': { 'c': oldValue } }] },\n          expected = oldValue + 1;\n\n      lodashStable.each(['a[0].b.c', ['a', '0', 'b', 'c']], function(path) {\n        func(object, path, function(n) {\n          assert.strictEqual(n, oldValue);\n          return ++n;\n        });\n\n        assert.strictEqual(object.a[0].b.c, expected);\n        object.a[0].b.c = oldValue;\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.upperCase');\n\n  (function() {\n    QUnit.test('should uppercase as space-separated words', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.upperCase('--foo-bar--'), 'FOO BAR');\n      assert.strictEqual(_.upperCase('fooBar'), 'FOO BAR');\n      assert.strictEqual(_.upperCase('__foo_bar__'), 'FOO BAR');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.upperFirst');\n\n  (function() {\n    QUnit.test('should uppercase only the first character', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.upperFirst('fred'), 'Fred');\n      assert.strictEqual(_.upperFirst('Fred'), 'Fred');\n      assert.strictEqual(_.upperFirst('FRED'), 'FRED');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('values methods');\n\n  lodashStable.each(['values', 'valuesIn'], function(methodName) {\n    var func = _[methodName],\n        isValues = methodName == 'values';\n\n    QUnit.test('`_.' + methodName + '` should get string keyed values of `object`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2 },\n          actual = func(object).sort();\n\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with an object that has a `length` property', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'a', '1': 'b', 'length': 2 },\n          actual = func(object).sort();\n\n      assert.deepEqual(actual, [2, 'a', 'b']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isValues ? 'not ' : '') + 'include inherited string keyed property values', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var expected = isValues ? [1] : [1, 2],\n          actual = func(new Foo).sort();\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var values = [args, strictArgs],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2, 3]));\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value).sort();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.without');\n\n  (function() {\n    QUnit.test('should return the difference of values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.without([2, 1, 2, 3], 1, 2);\n      assert.deepEqual(actual, [3]);\n    });\n\n    QUnit.test('should use strict equality to determine the values to reject', function(assert) {\n      assert.expect(2);\n\n      var object1 = { 'a': 1 },\n          object2 = { 'b': 2 },\n          array = [object1, object2];\n\n      assert.deepEqual(_.without(array, { 'a': 1 }), array);\n      assert.deepEqual(_.without(array, object1), [object2]);\n    });\n\n    QUnit.test('should remove all occurrences of each value from an array', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3, 1, 2, 3];\n      assert.deepEqual(_.without(array, 1, 2), [3, 3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.words');\n\n  (function() {\n    QUnit.test('should match words containing Latin Unicode letters', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(burredLetters, function(letter) {\n        return [letter];\n      });\n\n      var actual = lodashStable.map(burredLetters, function(letter) {\n        return _.words(letter);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should support a `pattern`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.words('abcd', /ab|cd/g), ['ab', 'cd']);\n      assert.deepEqual(_.words('abcd', 'ab|cd'), ['ab']);\n    });\n\n    QUnit.test('should work with compound words', function(assert) {\n      assert.expect(12);\n\n      assert.deepEqual(_.words('12ft'), ['12', 'ft']);\n      assert.deepEqual(_.words('aeiouAreVowels'), ['aeiou', 'Are', 'Vowels']);\n      assert.deepEqual(_.words('enable 6h format'), ['enable', '6', 'h', 'format']);\n      assert.deepEqual(_.words('enable 24H format'), ['enable', '24', 'H', 'format']);\n      assert.deepEqual(_.words('isISO8601'), ['is', 'ISO', '8601']);\n      assert.deepEqual(_.words('LETTERSAeiouAreVowels'), ['LETTERS', 'Aeiou', 'Are', 'Vowels']);\n      assert.deepEqual(_.words('tooLegit2Quit'), ['too', 'Legit', '2', 'Quit']);\n      assert.deepEqual(_.words('walk500Miles'), ['walk', '500', 'Miles']);\n      assert.deepEqual(_.words('xhr2Request'), ['xhr', '2', 'Request']);\n      assert.deepEqual(_.words('XMLHttp'), ['XML', 'Http']);\n      assert.deepEqual(_.words('XmlHTTP'), ['Xml', 'HTTP']);\n      assert.deepEqual(_.words('XmlHttp'), ['Xml', 'Http']);\n    });\n\n    QUnit.test('should work with compound words containing diacritical marks', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.words('LETTERS\u00c6iouAreVowels'), ['LETTERS', '\u00c6iou', 'Are', 'Vowels']);\n      assert.deepEqual(_.words('\u00e6iouAreVowels'), ['\u00e6iou', 'Are', 'Vowels']);\n      assert.deepEqual(_.words('\u00e6iou2Consonants'), ['\u00e6iou', '2', 'Consonants']);\n    });\n\n    QUnit.test('should not treat contractions as separate words', function(assert) {\n      assert.expect(4);\n\n      var postfixes = ['d', 'll', 'm', 're', 's', 't', 've'];\n\n      lodashStable.each([\"'\", '\\u2019'], function(apos) {\n        lodashStable.times(2, function(index) {\n          var actual = lodashStable.map(postfixes, function(postfix) {\n            var string = 'a b' + apos + postfix +  ' c';\n            return _.words(string[index ? 'toUpperCase' : 'toLowerCase']());\n          });\n\n          var expected = lodashStable.map(postfixes, function(postfix) {\n            var words = ['a', 'b' + apos + postfix, 'c'];\n            return lodashStable.map(words, function(word) {\n              return word[index ? 'toUpperCase' : 'toLowerCase']();\n            });\n          });\n\n          assert.deepEqual(actual, expected);\n        });\n      });\n    });\n\n    QUnit.test('should not treat ordinal numbers as separate words', function(assert) {\n      assert.expect(2);\n\n      var ordinals = ['1st', '2nd', '3rd', '4th'];\n\n      lodashStable.times(2, function(index) {\n        var expected = lodashStable.map(ordinals, function(ordinal) {\n          return [ordinal[index ? 'toUpperCase' : 'toLowerCase']()];\n        });\n\n        var actual = lodashStable.map(expected, function(words) {\n          return _.words(words[0]);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should not treat mathematical operators as words', function(assert) {\n      assert.expect(1);\n\n      var operators = ['\\xac', '\\xb1', '\\xd7', '\\xf7'],\n          expected = lodashStable.map(operators, stubArray),\n          actual = lodashStable.map(operators, _.words);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not treat punctuation as words', function(assert) {\n      assert.expect(1);\n\n      var marks = [\n        '\\u2012', '\\u2013', '\\u2014', '\\u2015',\n        '\\u2024', '\\u2025', '\\u2026',\n        '\\u205d', '\\u205e'\n      ];\n\n      var expected = lodashStable.map(marks, stubArray),\n          actual = lodashStable.map(marks, _.words);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var strings = lodashStable.map(['a', 'b', 'c'], Object),\n          actual = lodashStable.map(strings, _.words);\n\n      assert.deepEqual(actual, [['a'], ['b'], ['c']]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.wrap');\n\n  (function() {\n    QUnit.test('should create a wrapped function', function(assert) {\n      assert.expect(1);\n\n      var p = _.wrap(lodashStable.escape, function(func, text) {\n        return '<p>' + func(text) + '</p>';\n      });\n\n      assert.strictEqual(p('fred, barney, & pebbles'), '<p>fred, barney, &amp; pebbles</p>');\n    });\n\n    QUnit.test('should provide correct `wrapper` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      var wrapped = _.wrap(noop, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      wrapped(1, 2, 3);\n      assert.deepEqual(args, [noop, 1, 2, 3]);\n    });\n\n    QUnit.test('should use `_.identity` when `wrapper` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubA);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var wrapped = index ? _.wrap('a', value) : _.wrap('a');\n        return wrapped('b', 'c');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(1);\n\n      var p = _.wrap(lodashStable.escape, function(func) {\n        return '<p>' + func(this.text) + '</p>';\n      });\n\n      var object = { 'p': p, 'text': 'fred, barney, & pebbles' };\n      assert.strictEqual(object.p(), '<p>fred, barney, &amp; pebbles</p>');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('xor methods');\n\n  lodashStable.each(['xor', 'xorBy', 'xorWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the symmetric difference of two arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1], [2, 3]);\n      assert.deepEqual(actual, [1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the symmetric difference of multiple arrays', function(assert) {\n      assert.expect(2);\n\n      var actual = func([2, 1], [2, 3], [3, 4]);\n      assert.deepEqual(actual, [1, 4]);\n\n      actual = func([1, 2], [2, 1], [1, 2]);\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an empty array when comparing the same array', function(assert) {\n      assert.expect(1);\n\n      var array = [1],\n          actual = func(array, array, array);\n\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an array of unique values', function(assert) {\n      assert.expect(2);\n\n      var actual = func([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]);\n      assert.deepEqual(actual, [1, 4]);\n\n      actual = func([1, 1]);\n      assert.deepEqual(actual, [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a new array when a single array is given', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      assert.notStrictEqual(func(array), array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore individual secondary arguments', function(assert) {\n      assert.expect(1);\n\n      var array = [0];\n      assert.deepEqual(func(array, 3, null, { '0': 1 }), array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore values that are not arrays or `arguments` objects', function(assert) {\n      assert.expect(3);\n\n      var array = [1, 2];\n      assert.deepEqual(func(array, 3, { '0': 1 }, null), array);\n      assert.deepEqual(func(null, array, null, [2, 3]), [1, 3]);\n      assert.deepEqual(func(array, null, args, null), [3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _([1, 2, 3])[methodName]([5, 2, 1, 4]);\n        assert.ok(wrapped instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work when in a lazy sequence before `head` or `last`', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            wrapped = _(array).slice(1)[methodName]([LARGE_ARRAY_SIZE, LARGE_ARRAY_SIZE + 1]);\n\n        var actual = lodashStable.map(['head', 'last'], function(methodName) {\n          return wrapped[methodName]();\n        });\n\n        assert.deepEqual(actual, [1, LARGE_ARRAY_SIZE + 1]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.xorBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n      assert.deepEqual(actual, [1.2, 3.4]);\n\n      actual = _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 2 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.xorBy([2.1, 1.2], [2.3, 3.4], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [2.3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.xorWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],\n          others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }],\n          actual = _.xorWith(objects, others, lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[1], others[0]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('zipObject methods');\n\n  lodashStable.each(['zipObject', 'zipObjectDeep'], function(methodName) {\n    var func = _[methodName],\n        object = { 'barney': 36, 'fred': 40 },\n        isDeep = methodName == 'zipObjectDeep';\n\n    QUnit.test('`_.' + methodName + '` should zip together key/value arrays into an object', function(assert) {\n      assert.expect(1);\n\n      var actual = func(['barney', 'fred'], [36, 40]);\n      assert.deepEqual(actual, object);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore extra `values`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(['a'], [1, 2]), { 'a': 1 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should assign `undefined` values for extra `keys`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(['a', 'b'], [1]), { 'a': 1, 'b': undefined });\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isDeep ? '' : 'not ') + 'support deep paths', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each(['a.b.c', ['a', 'b', 'c']], function(path, index) {\n        var expected = isDeep ? ({ 'a': { 'b': { 'c': 1 } } }) : (index ? { 'a,b,c': 1 } : { 'a.b.c': 1 });\n        assert.deepEqual(func([path], [1]), expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var values = lodashStable.range(LARGE_ARRAY_SIZE),\n            props = lodashStable.map(values, function(value) { return 'key' + value; }),\n            actual = _(props)[methodName](values).map(square).filter(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(_.map(func(props, values), square), isEven)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.zipWith');\n\n  (function() {\n    QUnit.test('should zip arrays combining grouped elements with `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var array1 = [1, 2, 3],\n          array2 = [4, 5, 6],\n          array3 = [7, 8, 9];\n\n      var actual = _.zipWith(array1, array2, array3, function(a, b, c) {\n        return a + b + c;\n      });\n\n      assert.deepEqual(actual, [12, 15, 18]);\n\n      var actual = _.zipWith(array1, [], function(a, b) {\n        return a + (b || 0);\n      });\n\n      assert.deepEqual(actual, [1, 2, 3]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.zipWith([1, 2], [3, 4], [5, 6], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [1, 3, 5]);\n    });\n\n    QUnit.test('should perform a basic zip when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array1 = [1, 2],\n          array2 = [3, 4],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant(_.zip(array1, array2)));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.zipWith(array1, array2, value) : _.zipWith(array1, array2);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unzip and lodash.zip');\n\n  lodashStable.each(['unzip', 'zip'], function(methodName, index) {\n    var func = _[methodName];\n    func = lodashStable.bind(index ? func.apply : func.call, func, null);\n\n    var object = {\n      'an empty array': [\n        [],\n        []\n      ],\n      '0-tuples': [\n        [[], []],\n        []\n      ],\n      '2-tuples': [\n        [['barney', 'fred'], [36, 40]],\n        [['barney', 36], ['fred', 40]]\n      ],\n      '3-tuples': [\n        [['barney', 'fred'], [36, 40], [false, true]],\n        [['barney', 36, false], ['fred', 40, true]]\n      ]\n    };\n\n    lodashStable.forOwn(object, function(pair, key) {\n      QUnit.test('`_.' + methodName + '` should work with ' + key, function(assert) {\n        assert.expect(2);\n\n        var actual = func(pair[0]);\n        assert.deepEqual(actual, pair[1]);\n        assert.deepEqual(func(actual), actual.length ? pair[0] : []);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with tuples of different lengths', function(assert) {\n      assert.expect(4);\n\n      var pair = [\n        [['barney', 36], ['fred', 40, false]],\n        [['barney', 'fred'], [36, 40], [undefined, false]]\n      ];\n\n      var actual = func(pair[0]);\n      assert.ok('0' in actual[2]);\n      assert.deepEqual(actual, pair[1]);\n\n      actual = func(actual);\n      assert.ok('2' in actual[0]);\n      assert.deepEqual(actual, [['barney', 36, undefined], ['fred', 40, false]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat falsey values as empty arrays', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(value) {\n        return func([value, value, value]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore values that are not arrays or `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2], [3, 4], null, undefined, { '0': 1 }];\n      assert.deepEqual(func(array), [[1, 3], [2, 4]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support consuming its return value', function(assert) {\n      assert.expect(1);\n\n      var expected = [['barney', 'fred'], [36, 40]];\n      assert.deepEqual(func(func(func(func(expected)))), expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).commit');\n\n  (function() {\n    QUnit.test('should execute the chained sequence and returns the wrapped result', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = [1],\n            wrapped = _(array).push(2).push(3);\n\n        assert.deepEqual(array, [1]);\n\n        var otherWrapper = wrapped.commit();\n        assert.ok(otherWrapper instanceof _);\n        assert.deepEqual(otherWrapper.value(), [1, 2, 3]);\n        assert.deepEqual(wrapped.value(), [1, 2, 3, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should track the `__chain__` value of a wrapper', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _([1]).chain().commit().head();\n        assert.ok(wrapped instanceof _);\n        assert.strictEqual(wrapped.value(), 1);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).next');\n\n  lodashStable.each([false, true], function(implicit) {\n    function chain(value) {\n      return implicit ? _(value) : _.chain(value);\n    }\n\n    var chainType = 'in an ' + (implicit ? 'implicit' : 'explict') + ' chain';\n\n    QUnit.test('should follow the iterator protocol ' + chainType, function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var wrapped = chain([1, 2]);\n\n        assert.deepEqual(wrapped.next(), { 'done': false, 'value': 1 });\n        assert.deepEqual(wrapped.next(), { 'done': false, 'value': 2 });\n        assert.deepEqual(wrapped.next(), { 'done': true,  'value': undefined });\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should act as an iterable ' + chainType, function(assert) {\n      assert.expect(2);\n\n      if (!isNpm && Symbol && Symbol.iterator) {\n        var array = [1, 2],\n            wrapped = chain(array);\n\n        assert.strictEqual(wrapped[Symbol.iterator](), wrapped);\n        assert.deepEqual(lodashStable.toArray(wrapped), array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should use `_.toArray` to generate the iterable result ' + chainType, function(assert) {\n      assert.expect(3);\n\n      if (!isNpm && Array.from) {\n        var hearts = '\\ud83d\\udc95',\n            values = [[1], { 'a': 1 }, hearts];\n\n        lodashStable.each(values, function(value) {\n          var wrapped = chain(value);\n          assert.deepEqual(Array.from(wrapped), _.toArray(value));\n        });\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should reset the iterator correctly ' + chainType, function(assert) {\n      assert.expect(4);\n\n      if (!isNpm && Symbol && Symbol.iterator) {\n        var array = [1, 2],\n            wrapped = chain(array);\n\n        assert.deepEqual(lodashStable.toArray(wrapped), array);\n        assert.deepEqual(lodashStable.toArray(wrapped), [], 'produces an empty array for exhausted iterator');\n\n        var other = wrapped.filter();\n        assert.deepEqual(lodashStable.toArray(other), array, 'reset for new chain segments');\n        assert.deepEqual(lodashStable.toArray(wrapped), [], 'iterator is still exhausted');\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence ' + chainType, function(assert) {\n      assert.expect(3);\n\n      if (!isNpm && Symbol && Symbol.iterator) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            wrapped = chain(array);\n\n        assert.deepEqual(lodashStable.toArray(wrapped), array);\n\n        wrapped = wrapped.filter(predicate);\n        assert.deepEqual(lodashStable.toArray(wrapped), _.filter(array, isEven), 'reset for new lazy chain segments');\n        assert.deepEqual(values, array, 'memoizes iterator values');\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).plant');\n\n  (function() {\n    QUnit.test('should clone the chained sequence planting `value` as the wrapped value', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array1 = [5, null, 3, null, 1],\n            array2 = [10, null, 8, null, 6],\n            wrapped1 = _(array1).thru(_.compact).map(square).takeRight(2).sort(),\n            wrapped2 = wrapped1.plant(array2);\n\n        assert.deepEqual(wrapped2.value(), [36, 64]);\n        assert.deepEqual(wrapped1.value(), [1, 9]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should clone `chainAll` settings', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array1 = [2, 4],\n            array2 = [6, 8],\n            wrapped1 = _(array1).chain().map(square),\n            wrapped2 = wrapped1.plant(array2);\n\n        assert.deepEqual(wrapped2.head().value(), 36);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should reset iterator data on cloned sequences', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm && Symbol && Symbol.iterator) {\n        var array1 = [2, 4],\n            array2 = [6, 8],\n            wrapped1 = _(array1).map(square);\n\n        assert.deepEqual(lodashStable.toArray(wrapped1), [4, 16]);\n        assert.deepEqual(lodashStable.toArray(wrapped1), []);\n\n        var wrapped2 = wrapped1.plant(array2);\n        assert.deepEqual(lodashStable.toArray(wrapped2), [36, 64]);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).pop');\n\n  (function() {\n    QUnit.test('should remove elements from the end of `array`', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var array = [1, 2],\n            wrapped = _(array);\n\n        assert.strictEqual(wrapped.pop(), 2);\n        assert.deepEqual(wrapped.value(), [1]);\n        assert.strictEqual(wrapped.pop(), 1);\n\n        var actual = wrapped.value();\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).pop() : _().pop();\n            return result === undefined;\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).push');\n\n  (function() {\n    QUnit.test('should append elements to `array`', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = [1],\n            wrapped = _(array).push(2, 3),\n            actual = wrapped.value();\n\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, [1, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).push(1).value() : _().push(1).value();\n            return lodashStable.eq(result, value);\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).shift');\n\n  (function() {\n    QUnit.test('should remove elements from the front of `array`', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var array = [1, 2],\n            wrapped = _(array);\n\n        assert.strictEqual(wrapped.shift(), 1);\n        assert.deepEqual(wrapped.value(), [2]);\n        assert.strictEqual(wrapped.shift(), 2);\n\n        var actual = wrapped.value();\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).shift() : _().shift();\n            return result === undefined;\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).sort');\n\n  (function() {\n    QUnit.test('should return the wrapped sorted `array`', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = [3, 1, 2],\n            wrapped = _(array).sort(),\n            actual = wrapped.value();\n\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, [1, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).sort().value() : _().sort().value();\n            return lodashStable.eq(result, value);\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).splice');\n\n  (function() {\n    QUnit.test('should support removing and inserting elements', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var array = [1, 2],\n            wrapped = _(array);\n\n        assert.deepEqual(wrapped.splice(1, 1, 3).value(), [2]);\n        assert.deepEqual(wrapped.value(), [1, 3]);\n        assert.deepEqual(wrapped.splice(0, 2).value(), [1, 3]);\n\n        var actual = wrapped.value();\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).splice(0, 1).value() : _().splice(0, 1).value();\n            return lodashStable.isEqual(result, []);\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).unshift');\n\n  (function() {\n    QUnit.test('should prepend elements to `array`', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = [3],\n            wrapped = _(array).unshift(1, 2),\n            actual = wrapped.value();\n\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, [1, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).unshift(1).value() : _().unshift(1).value();\n            return lodashStable.eq(result, value);\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).value');\n\n  (function() {\n    QUnit.test('should execute the chained sequence and extract the unwrapped value', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = [1],\n            wrapped = _(array).push(2).push(3);\n\n        assert.deepEqual(array, [1]);\n        assert.deepEqual(wrapped.value(), [1, 2, 3]);\n        assert.deepEqual(wrapped.value(), [1, 2, 3, 2, 3]);\n        assert.deepEqual(array, [1, 2, 3, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should return the `valueOf` result of the wrapped value', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(123);\n        assert.strictEqual(Number(wrapped), 123);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should stringify the wrapped value when used by `JSON.stringify`', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm && JSON) {\n        var wrapped = _([1, 2, 3]);\n        assert.strictEqual(JSON.stringify(wrapped), '[1,2,3]');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var expected = _.prototype.value;\n        assert.strictEqual(_.prototype.toJSON, expected);\n        assert.strictEqual(_.prototype.valueOf, expected);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...) methods that return the wrapped modified array');\n\n  (function() {\n    var funcs = [\n      'push',\n      'reverse',\n      'sort',\n      'unshift'\n    ];\n\n    lodashStable.each(funcs, function(methodName) {\n      QUnit.test('`_(...).' + methodName + '` should return a new wrapper', function(assert) {\n        assert.expect(2);\n\n        if (!isNpm) {\n          var array = [1, 2, 3],\n              wrapped = _(array),\n              actual = wrapped[methodName]();\n\n          assert.ok(actual instanceof _);\n          assert.notStrictEqual(actual, wrapped);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...) methods that return new wrapped values');\n\n  (function() {\n    var funcs = [\n      'castArray',\n      'concat',\n      'difference',\n      'differenceBy',\n      'differenceWith',\n      'intersection',\n      'intersectionBy',\n      'intersectionWith',\n      'pull',\n      'pullAll',\n      'pullAt',\n      'sampleSize',\n      'shuffle',\n      'slice',\n      'splice',\n      'split',\n      'toArray',\n      'union',\n      'unionBy',\n      'unionWith',\n      'uniq',\n      'uniqBy',\n      'uniqWith',\n      'words',\n      'xor',\n      'xorBy',\n      'xorWith'\n    ];\n\n    lodashStable.each(funcs, function(methodName) {\n      QUnit.test('`_(...).' + methodName + '` should return a new wrapped value', function(assert) {\n        assert.expect(2);\n\n        if (!isNpm) {\n          var value = methodName == 'split' ? 'abc' : [1, 2, 3],\n              wrapped = _(value),\n              actual = wrapped[methodName]();\n\n          assert.ok(actual instanceof _);\n          assert.notStrictEqual(actual, wrapped);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...) methods that return unwrapped values');\n\n  (function() {\n    var funcs = [\n      'add',\n      'camelCase',\n      'capitalize',\n      'ceil',\n      'clone',\n      'deburr',\n      'defaultTo',\n      'divide',\n      'endsWith',\n      'escape',\n      'escapeRegExp',\n      'every',\n      'find',\n      'floor',\n      'has',\n      'hasIn',\n      'head',\n      'includes',\n      'isArguments',\n      'isArray',\n      'isArrayBuffer',\n      'isArrayLike',\n      'isBoolean',\n      'isBuffer',\n      'isDate',\n      'isElement',\n      'isEmpty',\n      'isEqual',\n      'isError',\n      'isFinite',\n      'isFunction',\n      'isInteger',\n      'isMap',\n      'isNaN',\n      'isNative',\n      'isNil',\n      'isNull',\n      'isNumber',\n      'isObject',\n      'isObjectLike',\n      'isPlainObject',\n      'isRegExp',\n      'isSafeInteger',\n      'isSet',\n      'isString',\n      'isUndefined',\n      'isWeakMap',\n      'isWeakSet',\n      'join',\n      'kebabCase',\n      'last',\n      'lowerCase',\n      'lowerFirst',\n      'max',\n      'maxBy',\n      'min',\n      'minBy',\n      'multiply',\n      'nth',\n      'pad',\n      'padEnd',\n      'padStart',\n      'parseInt',\n      'pop',\n      'random',\n      'reduce',\n      'reduceRight',\n      'repeat',\n      'replace',\n      'round',\n      'sample',\n      'shift',\n      'size',\n      'snakeCase',\n      'some',\n      'startCase',\n      'startsWith',\n      'subtract',\n      'sum',\n      'toFinite',\n      'toInteger',\n      'toLower',\n      'toNumber',\n      'toSafeInteger',\n      'toString',\n      'toUpper',\n      'trim',\n      'trimEnd',\n      'trimStart',\n      'truncate',\n      'unescape',\n      'upperCase',\n      'upperFirst'\n    ];\n\n    lodashStable.each(funcs, function(methodName) {\n      QUnit.test('`_(...).' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          var actual = _()[methodName]();\n          assert.notOk(actual instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_(...).' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          var actual = _().chain()[methodName]();\n          assert.ok(actual instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('\"Arrays\" category methods');\n\n  (function() {\n    var args = toArgs([1, null, [3], null, 5]),\n        sortedArgs = toArgs([1, [3], 5, null, null]),\n        array = [1, 2, 3, 4, 5, 6];\n\n    QUnit.test('should work with `arguments` objects', function(assert) {\n      assert.expect(30);\n\n      function message(methodName) {\n        return '`_.' + methodName + '` should work with `arguments` objects';\n      }\n\n      assert.deepEqual(_.difference(args, [null]), [1, [3], 5], message('difference'));\n      assert.deepEqual(_.difference(array, args), [2, 3, 4, 6], '_.difference should work with `arguments` objects as secondary arguments');\n\n      assert.deepEqual(_.union(args, [null, 6]), [1, null, [3], 5, 6], message('union'));\n      assert.deepEqual(_.union(array, args), array.concat([null, [3]]), '_.union should work with `arguments` objects as secondary arguments');\n\n      assert.deepEqual(_.compact(args), [1, [3], 5], message('compact'));\n      assert.deepEqual(_.drop(args, 3), [null, 5], message('drop'));\n      assert.deepEqual(_.dropRight(args, 3), [1, null], message('dropRight'));\n      assert.deepEqual(_.dropRightWhile(args,identity), [1, null, [3], null], message('dropRightWhile'));\n      assert.deepEqual(_.dropWhile(args,identity), [null, [3], null, 5], message('dropWhile'));\n      assert.deepEqual(_.findIndex(args, identity), 0, message('findIndex'));\n      assert.deepEqual(_.findLastIndex(args, identity), 4, message('findLastIndex'));\n      assert.deepEqual(_.flatten(args), [1, null, 3, null, 5], message('flatten'));\n      assert.deepEqual(_.head(args), 1, message('head'));\n      assert.deepEqual(_.indexOf(args, 5), 4, message('indexOf'));\n      assert.deepEqual(_.initial(args), [1, null, [3], null], message('initial'));\n      assert.deepEqual(_.intersection(args, [1]), [1], message('intersection'));\n      assert.deepEqual(_.last(args), 5, message('last'));\n      assert.deepEqual(_.lastIndexOf(args, 1), 0, message('lastIndexOf'));\n      assert.deepEqual(_.sortedIndex(sortedArgs, 6), 3, message('sortedIndex'));\n      assert.deepEqual(_.sortedIndexOf(sortedArgs, 5), 2, message('sortedIndexOf'));\n      assert.deepEqual(_.sortedLastIndex(sortedArgs, 5), 3, message('sortedLastIndex'));\n      assert.deepEqual(_.sortedLastIndexOf(sortedArgs, 1), 0, message('sortedLastIndexOf'));\n      assert.deepEqual(_.tail(args, 4), [null, [3], null, 5], message('tail'));\n      assert.deepEqual(_.take(args, 2), [1, null], message('take'));\n      assert.deepEqual(_.takeRight(args, 1), [5], message('takeRight'));\n      assert.deepEqual(_.takeRightWhile(args, identity), [5], message('takeRightWhile'));\n      assert.deepEqual(_.takeWhile(args, identity), [1], message('takeWhile'));\n      assert.deepEqual(_.uniq(args), [1, null, [3], 5], message('uniq'));\n      assert.deepEqual(_.without(args, null), [1, [3], 5], message('without'));\n      assert.deepEqual(_.zip(args, args), [[1, 1], [null, null], [[3], [3]], [null, null], [5, 5]], message('zip'));\n    });\n\n    QUnit.test('should accept falsey primary arguments', function(assert) {\n      assert.expect(4);\n\n      function message(methodName) {\n        return '`_.' + methodName + '` should accept falsey primary arguments';\n      }\n\n      assert.deepEqual(_.difference(null, array), [], message('difference'));\n      assert.deepEqual(_.intersection(null, array), [], message('intersection'));\n      assert.deepEqual(_.union(null, array), array, message('union'));\n      assert.deepEqual(_.xor(null, array), array, message('xor'));\n    });\n\n    QUnit.test('should accept falsey secondary arguments', function(assert) {\n      assert.expect(3);\n\n      function message(methodName) {\n        return '`_.' + methodName + '` should accept falsey secondary arguments';\n      }\n\n      assert.deepEqual(_.difference(array, null), array, message('difference'));\n      assert.deepEqual(_.intersection(array, null), [], message('intersection'));\n      assert.deepEqual(_.union(array, null), array, message('union'));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('\"Strings\" category methods');\n\n  (function() {\n    var stringMethods = [\n      'camelCase',\n      'capitalize',\n      'escape',\n      'kebabCase',\n      'lowerCase',\n      'lowerFirst',\n      'pad',\n      'padEnd',\n      'padStart',\n      'repeat',\n      'snakeCase',\n      'toLower',\n      'toUpper',\n      'trim',\n      'trimEnd',\n      'trimStart',\n      'truncate',\n      'unescape',\n      'upperCase',\n      'upperFirst'\n    ];\n\n    lodashStable.each(stringMethods, function(methodName) {\n      var func = _[methodName];\n\n      QUnit.test('`_.' + methodName + '` should return an empty string for empty values', function(assert) {\n        assert.expect(1);\n\n        var values = [, null, undefined, ''],\n            expected = lodashStable.map(values, stubString);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? func(value) : func();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash methods');\n\n  (function() {\n    var allMethods = lodashStable.reject(_.functions(_).sort(), function(methodName) {\n      return lodashStable.startsWith(methodName, '_');\n    });\n\n    var checkFuncs = [\n      'after',\n      'ary',\n      'before',\n      'bind',\n      'curry',\n      'curryRight',\n      'debounce',\n      'defer',\n      'delay',\n      'flip',\n      'flow',\n      'flowRight',\n      'memoize',\n      'negate',\n      'once',\n      'partial',\n      'partialRight',\n      'rearg',\n      'rest',\n      'spread',\n      'throttle',\n      'unary'\n    ];\n\n    var noBinding = [\n      'flip',\n      'memoize',\n      'negate',\n      'once',\n      'overArgs',\n      'partial',\n      'partialRight',\n      'rearg',\n      'rest',\n      'spread'\n    ];\n\n    var rejectFalsey = [\n      'tap',\n      'thru'\n    ].concat(checkFuncs);\n\n    var returnArrays = [\n      'at',\n      'chunk',\n      'compact',\n      'difference',\n      'drop',\n      'filter',\n      'flatten',\n      'functions',\n      'initial',\n      'intersection',\n      'invokeMap',\n      'keys',\n      'map',\n      'orderBy',\n      'pull',\n      'pullAll',\n      'pullAt',\n      'range',\n      'rangeRight',\n      'reject',\n      'remove',\n      'shuffle',\n      'sortBy',\n      'tail',\n      'take',\n      'times',\n      'toArray',\n      'toPairs',\n      'toPairsIn',\n      'union',\n      'uniq',\n      'values',\n      'without',\n      'xor',\n      'zip'\n    ];\n\n    var acceptFalsey = lodashStable.difference(allMethods, rejectFalsey);\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(316);\n\n      var arrays = lodashStable.map(falsey, stubArray);\n\n      lodashStable.each(acceptFalsey, function(methodName) {\n        var expected = arrays,\n            func = _[methodName];\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          return index ? func(value) : func();\n        });\n\n        if (methodName == 'noConflict') {\n          root._ = oldDash;\n        }\n        else if (methodName == 'pull' || methodName == 'pullAll') {\n          expected = falsey;\n        }\n        if (lodashStable.includes(returnArrays, methodName) && methodName != 'sample') {\n          assert.deepEqual(actual, expected, '_.' + methodName + ' returns an array');\n        }\n        assert.ok(true, '`_.' + methodName + '` accepts falsey arguments');\n      });\n\n      // Skip tests for missing methods of modularized builds.\n      lodashStable.each(['chain', 'noConflict', 'runInContext'], function(methodName) {\n        if (!_[methodName]) {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    QUnit.test('should return an array', function(assert) {\n      assert.expect(70);\n\n      var array = [1, 2, 3];\n\n      lodashStable.each(returnArrays, function(methodName) {\n        var actual,\n            func = _[methodName];\n\n        switch (methodName) {\n          case 'invokeMap':\n            actual = func(array, 'toFixed');\n            break;\n          case 'sample':\n            actual = func(array, 1);\n            break;\n          default:\n            actual = func(array);\n        }\n        assert.ok(lodashStable.isArray(actual), '_.' + methodName + ' returns an array');\n\n        var isPull = methodName == 'pull' || methodName == 'pullAll';\n        assert.strictEqual(actual === array, isPull, '_.' + methodName + ' should ' + (isPull ? '' : 'not ') + 'return the given array');\n      });\n    });\n\n    QUnit.test('should throw an error for falsey arguments', function(assert) {\n      assert.expect(24);\n\n      lodashStable.each(rejectFalsey, function(methodName) {\n        var expected = lodashStable.map(falsey, stubTrue),\n            func = _[methodName];\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          var pass = !index && /^(?:backflow|compose|cond|flow(Right)?|over(?:Every|Some)?)$/.test(methodName);\n\n          try {\n            index ? func(value) : func();\n          } catch (e) {\n            pass = !pass && (e instanceof TypeError) &&\n              (!lodashStable.includes(checkFuncs, methodName) || (e.message == FUNC_ERROR_TEXT));\n          }\n          return pass;\n        });\n\n        assert.deepEqual(actual, expected, '`_.' + methodName + '` rejects falsey arguments');\n      });\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(30);\n\n      lodashStable.each(noBinding, function(methodName) {\n        var fn = function() { return this.a; },\n            func = _[methodName],\n            isNegate = methodName == 'negate',\n            object = { 'a': 1 },\n            expected = isNegate ? false : 1;\n\n        var wrapper = func(_.bind(fn, object));\n        assert.strictEqual(wrapper(), expected, '`_.' + methodName + '` can consume a bound function');\n\n        wrapper = _.bind(func(fn), object);\n        assert.strictEqual(wrapper(), expected, '`_.' + methodName + '` can be bound');\n\n        object.wrapper = func(fn);\n        assert.strictEqual(object.wrapper(), expected, '`_.' + methodName + '` uses the `this` of its parent object');\n      });\n    });\n\n    QUnit.test('should not contain minified method names (test production builds)', function(assert) {\n      assert.expect(1);\n\n      var shortNames = ['_', 'at', 'eq', 'gt', 'lt'];\n      assert.ok(lodashStable.every(_.functions(_), function(methodName) {\n        return methodName.length > 2 || lodashStable.includes(shortNames, methodName);\n      }));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.config.asyncRetries = 10;\n  QUnit.config.hidepassed = true;\n\n  if (!document) {\n    QUnit.config.noglobals = true;\n    QUnit.load();\n    QUnit.start();\n  }\n}.call(this));\n"], "fixing_code": ["/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.4';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)',\n      rsOrdUpper = '\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the value at `key`, unless `key` is \"__proto__\".\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function safeGet(object, key) {\n    return key == '__proto__'\n      ? undefined\n      : object[key];\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */\n    function cloneMap(map, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n      return arrayReduce(array, addMapEntry, new map.constructor);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */\n    function cloneSet(set, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n      return arrayReduce(array, addSetEntry, new set.constructor);\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, cloneFunc, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return cloneMap(object, isDeep, cloneFunc);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return cloneSet(object, isDeep, cloneFunc);\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (reLeadingDot.test(string)) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            result = wait - timeSinceLastCall;\n\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(args) {\n      args.push(undefined, customDefaultsAssignIn);\n      return apply(assignInWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('d\u00e9j\u00e0 vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n", ";(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used to detect when a function becomes hot. */\n  var HOT_COUNT = 150;\n\n  /** Used as the size to cover large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;\n\n  /** `Object#toString` result references. */\n  var funcTag = '[object Function]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]';\n\n  /** Used as a reference to the global object. */\n  var root = (typeof global == 'object' && global) || this;\n\n  /** Used to store lodash to test for bad extensions/shims. */\n  var lodashBizarro = root.lodashBizarro;\n\n  /** Used for native method references. */\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype,\n      numberProto = Number.prototype,\n      stringProto = String.prototype;\n\n  /** Method and object shortcuts. */\n  var phantom = root.phantom,\n      process = root.process,\n      amd = root.define ? define.amd : undefined,\n      args = toArgs([1, 2, 3]),\n      argv = process ? process.argv : undefined,\n      defineProperty = Object.defineProperty,\n      document = phantom ? undefined : root.document,\n      body = root.document ? root.document.body : undefined,\n      create = Object.create,\n      fnToString = funcProto.toString,\n      freeze = Object.freeze,\n      getSymbols = Object.getOwnPropertySymbols,\n      identity = function(value) { return value; },\n      noop = function() {},\n      objToString = objectProto.toString,\n      params = argv,\n      push = arrayProto.push,\n      realm = {},\n      slice = arrayProto.slice,\n      strictArgs = (function() { 'use strict'; return arguments; }(1, 2, 3));\n\n  var ArrayBuffer = root.ArrayBuffer,\n      Buffer = root.Buffer,\n      Map = root.Map,\n      Promise = root.Promise,\n      Proxy = root.Proxy,\n      Set = root.Set,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      WeakMap = root.WeakMap,\n      WeakSet = root.WeakSet;\n\n  var arrayBuffer = ArrayBuffer ? new ArrayBuffer(2) : undefined,\n      map = Map ? new Map : undefined,\n      promise = Promise ? Promise.resolve(1) : undefined,\n      set = Set ? new Set : undefined,\n      symbol = Symbol ? Symbol('a') : undefined,\n      weakMap = WeakMap ? new WeakMap : undefined,\n      weakSet = WeakSet ? new WeakSet : undefined;\n\n  /** Math helpers. */\n  var add = function(x, y) { return x + y; },\n      doubled = function(n) { return n * 2; },\n      isEven = function(n) { return n % 2 == 0; },\n      square = function(n) { return n * n; };\n\n  /** Stub functions. */\n  var stubA = function() { return 'a'; },\n      stubB = function() { return 'b'; },\n      stubC = function() { return 'c'; };\n\n  var stubTrue = function() { return true; },\n      stubFalse = function() { return false; };\n\n  var stubNaN = function() { return NaN; },\n      stubNull = function() { return null; };\n\n  var stubZero = function() { return 0; },\n      stubOne = function() { return 1; },\n      stubTwo = function() { return 2; },\n      stubThree = function() { return 3; },\n      stubFour = function() { return 4; };\n\n  var stubArray = function() { return []; },\n      stubObject = function() { return {}; },\n      stubString = function() { return ''; };\n\n  /** List of Latin Unicode letters. */\n  var burredLetters = [\n    // Latin-1 Supplement letters.\n    '\\xc0', '\\xc1', '\\xc2', '\\xc3', '\\xc4', '\\xc5', '\\xc6', '\\xc7', '\\xc8', '\\xc9', '\\xca', '\\xcb', '\\xcc', '\\xcd', '\\xce', '\\xcf',\n    '\\xd0', '\\xd1', '\\xd2', '\\xd3', '\\xd4', '\\xd5', '\\xd6',         '\\xd8', '\\xd9', '\\xda', '\\xdb', '\\xdc', '\\xdd', '\\xde', '\\xdf',\n    '\\xe0', '\\xe1', '\\xe2', '\\xe3', '\\xe4', '\\xe5', '\\xe6', '\\xe7', '\\xe8', '\\xe9', '\\xea', '\\xeb', '\\xec', '\\xed', '\\xee', '\\xef',\n    '\\xf0', '\\xf1', '\\xf2', '\\xf3', '\\xf4', '\\xf5', '\\xf6',         '\\xf8', '\\xf9', '\\xfa', '\\xfb', '\\xfc', '\\xfd', '\\xfe', '\\xff',\n    // Latin Extended-A letters.\n    '\\u0100', '\\u0101', '\\u0102', '\\u0103', '\\u0104', '\\u0105', '\\u0106', '\\u0107', '\\u0108', '\\u0109', '\\u010a', '\\u010b', '\\u010c', '\\u010d', '\\u010e', '\\u010f',\n    '\\u0110', '\\u0111', '\\u0112', '\\u0113', '\\u0114', '\\u0115', '\\u0116', '\\u0117', '\\u0118', '\\u0119', '\\u011a', '\\u011b', '\\u011c', '\\u011d', '\\u011e', '\\u011f',\n    '\\u0120', '\\u0121', '\\u0122', '\\u0123', '\\u0124', '\\u0125', '\\u0126', '\\u0127', '\\u0128', '\\u0129', '\\u012a', '\\u012b', '\\u012c', '\\u012d', '\\u012e', '\\u012f',\n    '\\u0130', '\\u0131', '\\u0132', '\\u0133', '\\u0134', '\\u0135', '\\u0136', '\\u0137', '\\u0138', '\\u0139', '\\u013a', '\\u013b', '\\u013c', '\\u013d', '\\u013e', '\\u013f',\n    '\\u0140', '\\u0141', '\\u0142', '\\u0143', '\\u0144', '\\u0145', '\\u0146', '\\u0147', '\\u0148', '\\u0149', '\\u014a', '\\u014b', '\\u014c', '\\u014d', '\\u014e', '\\u014f',\n    '\\u0150', '\\u0151', '\\u0152', '\\u0153', '\\u0154', '\\u0155', '\\u0156', '\\u0157', '\\u0158', '\\u0159', '\\u015a', '\\u015b', '\\u015c', '\\u015d', '\\u015e', '\\u015f',\n    '\\u0160', '\\u0161', '\\u0162', '\\u0163', '\\u0164', '\\u0165', '\\u0166', '\\u0167', '\\u0168', '\\u0169', '\\u016a', '\\u016b', '\\u016c', '\\u016d', '\\u016e', '\\u016f',\n    '\\u0170', '\\u0171', '\\u0172', '\\u0173', '\\u0174', '\\u0175', '\\u0176', '\\u0177', '\\u0178', '\\u0179', '\\u017a', '\\u017b', '\\u017c', '\\u017d', '\\u017e', '\\u017f'\n  ];\n\n  /** List of combining diacritical marks. */\n  var comboMarks = [\n    '\\u0300', '\\u0301', '\\u0302', '\\u0303', '\\u0304', '\\u0305', '\\u0306', '\\u0307', '\\u0308', '\\u0309', '\\u030a', '\\u030b', '\\u030c', '\\u030d', '\\u030e', '\\u030f',\n    '\\u0310', '\\u0311', '\\u0312', '\\u0313', '\\u0314', '\\u0315', '\\u0316', '\\u0317', '\\u0318', '\\u0319', '\\u031a', '\\u031b', '\\u031c', '\\u031d', '\\u031e', '\\u031f',\n    '\\u0320', '\\u0321', '\\u0322', '\\u0323', '\\u0324', '\\u0325', '\\u0326', '\\u0327', '\\u0328', '\\u0329', '\\u032a', '\\u032b', '\\u032c', '\\u032d', '\\u032e', '\\u032f',\n    '\\u0330', '\\u0331', '\\u0332', '\\u0333', '\\u0334', '\\u0335', '\\u0336', '\\u0337', '\\u0338', '\\u0339', '\\u033a', '\\u033b', '\\u033c', '\\u033d', '\\u033e', '\\u033f',\n    '\\u0340', '\\u0341', '\\u0342', '\\u0343', '\\u0344', '\\u0345', '\\u0346', '\\u0347', '\\u0348', '\\u0349', '\\u034a', '\\u034b', '\\u034c', '\\u034d', '\\u034e', '\\u034f',\n    '\\u0350', '\\u0351', '\\u0352', '\\u0353', '\\u0354', '\\u0355', '\\u0356', '\\u0357', '\\u0358', '\\u0359', '\\u035a', '\\u035b', '\\u035c', '\\u035d', '\\u035e', '\\u035f',\n    '\\u0360', '\\u0361', '\\u0362', '\\u0363', '\\u0364', '\\u0365', '\\u0366', '\\u0367', '\\u0368', '\\u0369', '\\u036a', '\\u036b', '\\u036c', '\\u036d', '\\u036e', '\\u036f',\n    '\\ufe20', '\\ufe21', '\\ufe22', '\\ufe23'\n  ];\n\n  /** List of converted Latin Unicode letters. */\n  var deburredLetters = [\n    // Converted Latin-1 Supplement letters.\n    'A',  'A', 'A', 'A', 'A', 'A', 'Ae', 'C',  'E', 'E', 'E', 'E', 'I', 'I', 'I',\n    'I',  'D', 'N', 'O', 'O', 'O', 'O',  'O',  'O', 'U', 'U', 'U', 'U', 'Y', 'Th',\n    'ss', 'a', 'a', 'a', 'a', 'a', 'a',  'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i',  'i',\n    'i',  'd', 'n', 'o', 'o', 'o', 'o',  'o',  'o', 'u', 'u', 'u', 'u', 'y', 'th', 'y',\n    // Converted Latin Extended-A letters.\n    'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c',\n    'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e',\n    'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h',\n    'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j',\n    'K', 'k', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l',\n    'N', 'n', 'N', 'n', 'N', 'n', \"'n\", 'N', 'n',\n    'O', 'o', 'O', 'o', 'O', 'o', 'Oe', 'oe',\n    'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's',\n    'T', 't', 'T', 't', 'T', 't',\n    'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u',\n    'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's'\n  ];\n\n  /** Used to provide falsey values to methods. */\n  var falsey = [, null, undefined, false, 0, NaN, ''];\n\n  /** Used to specify the emoji style glyph variant of characters. */\n  var emojiVar = '\\ufe0f';\n\n  /** Used to provide empty values to methods. */\n  var empties = [[], {}].concat(falsey.slice(1));\n\n  /** Used to test error objects. */\n  var errors = [\n    new Error,\n    new EvalError,\n    new RangeError,\n    new ReferenceError,\n    new SyntaxError,\n    new TypeError,\n    new URIError\n  ];\n\n  /** List of fitzpatrick modifiers. */\n  var fitzModifiers = [\n    '\\ud83c\\udffb',\n    '\\ud83c\\udffc',\n    '\\ud83c\\udffd',\n    '\\ud83c\\udffe',\n    '\\ud83c\\udfff'\n  ];\n\n  /** Used to provide primitive values to methods. */\n  var primitives = [null, undefined, false, true, 1, NaN, 'a'];\n\n  /** Used to check whether methods support typed arrays. */\n  var typedArrays = [\n    'Float32Array',\n    'Float64Array',\n    'Int8Array',\n    'Int16Array',\n    'Int32Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'Uint16Array',\n    'Uint32Array'\n  ];\n\n  /** Used to check whether methods support array views. */\n  var arrayViews = typedArrays.concat('DataView');\n\n  /** The file path of the lodash file to test. */\n  var filePath = (function() {\n    var min = 2,\n        result = params || [];\n\n    if (phantom) {\n      min = 0;\n      result = params = phantom.args || require('system').args;\n    }\n    var last = result[result.length - 1];\n    result = (result.length > min && !/test(?:\\.js)?$/.test(last)) ? last : '../lodash.js';\n\n    if (!amd) {\n      try {\n        result = require('fs').realpathSync(result);\n      } catch (e) {}\n\n      try {\n        result = require.resolve(result);\n      } catch (e) {}\n    }\n    return result;\n  }());\n\n  /** The `ui` object. */\n  var ui = root.ui || (root.ui = {\n    'buildPath': filePath,\n    'loaderPath': '',\n    'isModularize': /\\b(?:amd|commonjs|es|node|npm|(index|main)\\.js)\\b/.test(filePath),\n    'isStrict': /\\bes\\b/.test(filePath) || 'default' in require(filePath),\n    'urlParams': {}\n  });\n\n  /** The basename of the lodash file to test. */\n  var basename = /[\\w.-]+$/.exec(filePath)[0];\n\n  /** Used to indicate testing a modularized build. */\n  var isModularize = ui.isModularize;\n\n  /** Detect if testing `npm` modules. */\n  var isNpm = isModularize && /\\bnpm\\b/.test([ui.buildPath, ui.urlParams.build]);\n\n  /** Detect if running in PhantomJS. */\n  var isPhantom = phantom || (typeof callPhantom == 'function');\n\n  /** Detect if lodash is in strict mode. */\n  var isStrict = ui.isStrict;\n\n  /*--------------------------------------------------------------------------*/\n\n  // Leak to avoid sporadic `noglobals` fails on Edge in Sauce Labs.\n  root.msWDfn = undefined;\n\n  // Assign `setTimeout` to itself to avoid being flagged as a leak.\n  setProperty(root, 'setTimeout', setTimeout);\n\n  // Exit early if going to run tests in a PhantomJS web page.\n  if (phantom && isModularize) {\n    var page = require('webpage').create();\n\n    page.onCallback = function(details) {\n      var coverage = details.coverage;\n      if (coverage) {\n        var fs = require('fs'),\n            cwd = fs.workingDirectory,\n            sep = fs.separator;\n\n        fs.write([cwd, 'coverage', 'coverage.json'].join(sep), JSON.stringify(coverage));\n      }\n      phantom.exit(details.failed ? 1 : 0);\n    };\n\n    page.onConsoleMessage = function(message) {\n      console.log(message);\n    };\n\n    page.onInitialized = function() {\n      page.evaluate(function() {\n        document.addEventListener('DOMContentLoaded', function() {\n          QUnit.done(function(details) {\n            details.coverage = window.__coverage__;\n            callPhantom(details);\n          });\n        });\n      });\n    };\n\n    page.open(filePath, function(status) {\n      if (status != 'success') {\n        console.log('PhantomJS failed to load page: ' + filePath);\n        phantom.exit(1);\n      }\n    });\n\n    console.log('test.js invoked with arguments: ' + JSON.stringify(slice.call(params)));\n    return;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /** Used to test Web Workers. */\n  var Worker = !(ui.isForeign || ui.isSauceLabs || isModularize) &&\n    (document && document.origin != 'null') && root.Worker;\n\n  /** Used to test host objects in IE. */\n  try {\n    var xml = new ActiveXObject('Microsoft.XMLDOM');\n  } catch (e) {}\n\n  /** Poison the free variable `root` in Node.js */\n  try {\n    defineProperty(global.root, 'root', {\n      'configurable': false,\n      'enumerable': false,\n      'get': function() { throw new ReferenceError; }\n    });\n  } catch (e) {}\n\n  /** Load QUnit and extras. */\n  var QUnit = root.QUnit || require('qunit-extras');\n\n  /** Load stable Lodash. */\n  var lodashStable = root.lodashStable;\n  if (!lodashStable) {\n    try {\n      lodashStable = interopRequire('../node_modules/lodash/lodash.js');\n    } catch (e) {\n      console.log('Error: The stable lodash dev dependency should be at least a version behind master branch.');\n      return;\n    }\n    lodashStable = lodashStable.noConflict();\n  }\n\n  /** The `lodash` function to test. */\n  var _ = root._ || (root._ = interopRequire(filePath));\n\n  /** Used to test pseudo private map caches. */\n  var mapCaches = (function() {\n    var MapCache = _.memoize.Cache;\n    var result = {\n      'Hash': new MapCache().__data__.hash.constructor,\n      'MapCache': MapCache\n    };\n    _.isMatchWith({ 'a': 1 }, { 'a': 1 }, function() {\n      var stack = lodashStable.last(arguments);\n      result.ListCache = stack.__data__.constructor;\n      result.Stack = stack.constructor;\n    });\n    return result;\n  }());\n\n  /** Used to detect instrumented istanbul code coverage runs. */\n  var coverage = root.__coverage__ || root[lodashStable.find(lodashStable.keys(root), function(key) {\n    return /^(?:\\$\\$cov_\\d+\\$\\$)$/.test(key);\n  })];\n\n  /** Used to test async functions. */\n  var asyncFunc = lodashStable.attempt(function() {\n    return Function('return async () => {}');\n  });\n\n  /** Used to test generator functions. */\n  var genFunc = lodashStable.attempt(function() {\n    return Function('return function*(){}');\n  });\n\n  /** Used to restore the `_` reference. */\n  var oldDash = root._;\n\n  /**\n   * Used to check for problems removing whitespace. For a whitespace reference,\n   * see [V8's unit test](https://code.google.com/p/v8/source/browse/branches/bleeding_edge/test/mjsunit/whitespaces.js).\n   */\n  var whitespace = lodashStable.filter([\n    // Basic whitespace characters.\n    ' ', '\\t', '\\x0b', '\\f', '\\xa0', '\\ufeff',\n\n    // Line terminators.\n    '\\n', '\\r', '\\u2028', '\\u2029',\n\n    // Unicode category \"Zs\" space separators.\n    '\\u1680', '\\u180e', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005',\n    '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u202f', '\\u205f', '\\u3000'\n  ],\n  function(chr) { return /\\s/.exec(chr); })\n  .join('');\n\n  /**\n   * Creates a custom error object.\n   *\n   * @private\n   * @constructor\n   * @param {string} message The error message.\n   */\n  function CustomError(message) {\n    this.name = 'CustomError';\n    this.message = message;\n  }\n\n  CustomError.prototype = lodashStable.create(Error.prototype, {\n    'constructor': CustomError\n  });\n\n  /**\n   * Removes all own enumerable string keyed properties from a given object.\n   *\n   * @private\n   * @param {Object} object The object to empty.\n   */\n  function emptyObject(object) {\n    lodashStable.forOwn(object, function(value, key, object) {\n      delete object[key];\n    });\n  }\n\n  /**\n   * Extracts the unwrapped value from its wrapper.\n   *\n   * @private\n   * @param {Object} wrapper The wrapper to unwrap.\n   * @returns {*} Returns the unwrapped value.\n   */\n  function getUnwrappedValue(wrapper) {\n    var index = -1,\n        actions = wrapper.__actions__,\n        length = actions.length,\n        result = wrapper.__wrapped__;\n\n    while (++index < length) {\n      var args = [result],\n          action = actions[index];\n\n      push.apply(args, action.args);\n      result = action.func.apply(action.thisArg, args);\n    }\n    return result;\n  }\n\n  /**\n   * Loads the module of `id`. If the module has an `exports.default`, the\n   * exported default value is returned as the resolved module.\n   *\n   * @private\n   * @param {string} id The identifier of the module to resolve.\n   * @returns {*} Returns the resolved module.\n   */\n  function interopRequire(id) {\n    var result = require(id);\n    return 'default' in result ? result['default'] : result;\n  }\n\n  /**\n   * Sets a non-enumerable property value on `object`.\n   *\n   * Note: This function is used to avoid a bug in older versions of V8 where\n   * overwriting non-enumerable built-ins makes them enumerable.\n   * See https://code.google.com/p/v8/issues/detail?id=1623\n   *\n   * @private\n   * @param {Object} object The object modify.\n   * @param {string} key The name of the property to set.\n   * @param {*} value The property value.\n   */\n  function setProperty(object, key, value) {\n    try {\n      defineProperty(object, key, {\n        'configurable': true,\n        'enumerable': false,\n        'writable': true,\n        'value': value\n      });\n    } catch (e) {\n      object[key] = value;\n    }\n    return object;\n  }\n\n  /**\n   * Skips a given number of tests with a passing result.\n   *\n   * @private\n   * @param {Object} assert The QUnit assert object.\n   * @param {number} [count=1] The number of tests to skip.\n   */\n  function skipAssert(assert, count) {\n    count || (count = 1);\n    while (count--) {\n      assert.ok(true, 'test skipped');\n    }\n  }\n\n  /**\n   * Converts `array` to an `arguments` object.\n   *\n   * @private\n   * @param {Array} array The array to convert.\n   * @returns {Object} Returns the converted `arguments` object.\n   */\n  function toArgs(array) {\n    return (function() { return arguments; }.apply(undefined, array));\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Add bizarro values.\n  (function() {\n    if (document || (typeof require != 'function')) {\n      return;\n    }\n    var nativeString = fnToString.call(toString),\n        reToString = /toString/g;\n\n    function createToString(funcName) {\n      return lodashStable.constant(nativeString.replace(reToString, funcName));\n    }\n\n    // Allow bypassing native checks.\n    setProperty(funcProto, 'toString', function wrapper() {\n      setProperty(funcProto, 'toString', fnToString);\n      var result = lodashStable.has(this, 'toString') ? this.toString() : fnToString.call(this);\n      setProperty(funcProto, 'toString', wrapper);\n      return result;\n    });\n\n    // Add prototype extensions.\n    funcProto._method = noop;\n\n    // Set bad shims.\n    setProperty(Object, 'create', undefined);\n    setProperty(Object, 'getOwnPropertySymbols', undefined);\n\n    var _propertyIsEnumerable = objectProto.propertyIsEnumerable;\n    setProperty(objectProto, 'propertyIsEnumerable', function(key) {\n      return !(key == 'valueOf' && this && this.valueOf === 1) && _propertyIsEnumerable.call(this, key);\n    });\n\n    if (Buffer) {\n      defineProperty(root, 'Buffer', {\n        'configurable': true,\n        'enumerable': true,\n        'get': function get() {\n          var caller = get.caller,\n              name = caller ? caller.name : '';\n\n          if (!(name == 'runInContext' || name.length == 1 || /\\b_\\.isBuffer\\b/.test(caller))) {\n            return Buffer;\n          }\n        }\n      });\n    }\n    if (Map) {\n      setProperty(root, 'Map', (function() {\n        var count = 0;\n        return function() {\n          if (count++) {\n            return new Map;\n          }\n          setProperty(root, 'Map', Map);\n          return {};\n        };\n      }()));\n\n      setProperty(root.Map, 'toString', createToString('Map'));\n    }\n    setProperty(root, 'Promise', noop);\n    setProperty(root, 'Set', noop);\n    setProperty(root, 'Symbol', undefined);\n    setProperty(root, 'WeakMap', noop);\n\n    // Fake `WinRTError`.\n    setProperty(root, 'WinRTError', Error);\n\n    // Clear cache so lodash can be reloaded.\n    emptyObject(require.cache);\n\n    // Load lodash and expose it to the bad extensions/shims.\n    lodashBizarro = interopRequire(filePath);\n    root._ = oldDash;\n\n    // Restore built-in methods.\n    setProperty(Object, 'create', create);\n    setProperty(objectProto, 'propertyIsEnumerable', _propertyIsEnumerable);\n    setProperty(root, 'Buffer', Buffer);\n\n    if (getSymbols) {\n      Object.getOwnPropertySymbols = getSymbols;\n    } else {\n      delete Object.getOwnPropertySymbols;\n    }\n    if (Map) {\n      setProperty(root, 'Map', Map);\n    } else {\n      delete root.Map;\n    }\n    if (Promise) {\n      setProperty(root, 'Promise', Promise);\n    } else {\n      delete root.Promise;\n    }\n    if (Set) {\n      setProperty(root, 'Set', Set);\n    } else {\n      delete root.Set;\n    }\n    if (Symbol) {\n      setProperty(root, 'Symbol', Symbol);\n    } else {\n      delete root.Symbol;\n    }\n    if (WeakMap) {\n      setProperty(root, 'WeakMap', WeakMap);\n    } else {\n      delete root.WeakMap;\n    }\n    delete root.WinRTError;\n    delete funcProto._method;\n  }());\n\n  // Add other realm values from the `vm` module.\n  lodashStable.attempt(function() {\n    lodashStable.assign(realm, require('vm').runInNewContext([\n      '(function() {',\n      '  var noop = function() {},',\n      '      root = this;',\n      '',\n      '  var object = {',\n      \"    'ArrayBuffer': root.ArrayBuffer,\",\n      \"    'arguments': (function() { return arguments; }(1, 2, 3)),\",\n      \"    'array': [1],\",\n      \"    'arrayBuffer': root.ArrayBuffer ? new root.ArrayBuffer : undefined,\",\n      \"    'boolean': Object(false),\",\n      \"    'date': new Date,\",\n      \"    'errors': [new Error, new EvalError, new RangeError, new ReferenceError, new SyntaxError, new TypeError, new URIError],\",\n      \"    'function': noop,\",\n      \"    'map': root.Map ? new root.Map : undefined,\",\n      \"    'nan': NaN,\",\n      \"    'null': null,\",\n      \"    'number': Object(0),\",\n      \"    'object': { 'a': 1 },\",\n      \"    'promise': root.Promise ? Promise.resolve(1) : undefined,\",\n      \"    'regexp': /x/,\",\n      \"    'set': root.Set ? new root.Set : undefined,\",\n      \"    'string': Object('a'),\",\n      \"    'symbol': root.Symbol ? root.Symbol() : undefined,\",\n      \"    'undefined': undefined,\",\n      \"    'weakMap': root.WeakMap ? new root.WeakMap : undefined,\",\n      \"    'weakSet': root.WeakSet ? new root.WeakSet : undefined\",\n      '  };',\n      '',\n      \"  ['\" + arrayViews.join(\"', '\") + \"'].forEach(function(type) {\",\n      '    var Ctor = root[type]',\n      '    object[type] = Ctor;',\n      '    object[type.toLowerCase()] = Ctor ? new Ctor(new ArrayBuffer(24)) : undefined;',\n      '  });',\n      '',\n      '  return object;',\n      '}());'\n    ].join('\\n')));\n  });\n\n  // Add other realm values from an iframe.\n  lodashStable.attempt(function() {\n    _._realm = realm;\n\n    var iframe = document.createElement('iframe');\n    iframe.frameBorder = iframe.height = iframe.width = 0;\n    body.appendChild(iframe);\n\n    var idoc = (idoc = iframe.contentDocument || iframe.contentWindow).document || idoc;\n    idoc.write([\n      '<html>',\n      '<body>',\n      '<script>',\n      'var _ = parent._,',\n      '    noop = function() {},',\n      '    root = this;',\n      '',\n      'var object = {',\n      \"  'ArrayBuffer': root.ArrayBuffer,\",\n      \"  'arguments': (function() { return arguments; }(1, 2, 3)),\",\n      \"  'array': [1],\",\n      \"  'arrayBuffer': root.ArrayBuffer ? new root.ArrayBuffer : undefined,\",\n      \"  'boolean': Object(false),\",\n      \"  'date': new Date,\",\n      \"  'element': document.body,\",\n      \"  'errors': [new Error, new EvalError, new RangeError, new ReferenceError, new SyntaxError, new TypeError, new URIError],\",\n      \"  'function': noop,\",\n      \"  'map': root.Map ? new root.Map : undefined,\",\n      \"  'nan': NaN,\",\n      \"  'null': null,\",\n      \"  'number': Object(0),\",\n      \"  'object': { 'a': 1 },\",\n      \"  'promise': root.Promise ? Promise.resolve(1) : undefined,\",\n      \"  'regexp': /x/,\",\n      \"  'set': root.Set ? new root.Set : undefined,\",\n      \"  'string': Object('a'),\",\n      \"  'symbol': root.Symbol ? root.Symbol() : undefined,\",\n      \"  'undefined': undefined,\",\n      \"  'weakMap': root.WeakMap ? new root.WeakMap : undefined,\",\n      \"  'weakSet': root.WeakSet ? new root.WeakSet : undefined\",\n      '};',\n      '',\n      \"_.each(['\" + arrayViews.join(\"', '\") + \"'], function(type) {\",\n      '  var Ctor = root[type];',\n      '  object[type] = Ctor;',\n      '  object[type.toLowerCase()] = Ctor ? new Ctor(new ArrayBuffer(24)) : undefined;',\n      '});',\n      '',\n      '_.assign(_._realm, object);',\n      '</script>',\n      '</body>',\n      '</html>'\n    ].join('\\n'));\n\n    idoc.close();\n    delete _._realm;\n  });\n\n  // Add a web worker.\n  lodashStable.attempt(function() {\n    var worker = new Worker('./asset/worker.js?t=' + (+new Date));\n    worker.addEventListener('message', function(e) {\n      _._VERSION = e.data || '';\n    }, false);\n\n    worker.postMessage(ui.buildPath);\n  });\n\n  // Expose internal modules for better code coverage.\n  lodashStable.attempt(function() {\n    var path = require('path'),\n        basePath = path.dirname(filePath);\n\n    if (isModularize && !(amd || isNpm)) {\n      lodashStable.each([\n        'baseEach',\n        'isIndex',\n        'isIterateeCall',\n        'memoizeCapped'\n      ], function(funcName) {\n        _['_' + funcName] = interopRequire(path.join(basePath, '_' + funcName));\n      });\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  if (params) {\n    console.log('Running lodash tests.');\n    console.log('test.js invoked with arguments: ' + JSON.stringify(slice.call(params)));\n  }\n\n  QUnit.module(basename);\n\n  (function() {\n    QUnit.test('should support loading ' + basename + ' as the \"lodash\" module', function(assert) {\n      assert.expect(1);\n\n      if (amd) {\n        assert.strictEqual((lodashModule || {}).moduleName, 'lodash');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should support loading ' + basename + ' with the Require.js \"shim\" configuration option', function(assert) {\n      assert.expect(1);\n\n      if (amd && lodashStable.includes(ui.loaderPath, 'requirejs')) {\n        assert.strictEqual((shimmedModule || {}).moduleName, 'shimmed');\n      } else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should support loading ' + basename + ' as the \"underscore\" module', function(assert) {\n      assert.expect(1);\n\n      if (amd) {\n        assert.strictEqual((underscoreModule || {}).moduleName, 'underscore');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should support loading ' + basename + ' in a web worker', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      if (Worker) {\n        var limit = 30000 / QUnit.config.asyncRetries,\n            start = +new Date;\n\n        var attempt = function() {\n          var actual = _._VERSION;\n          if ((new Date - start) < limit && typeof actual != 'string') {\n            setTimeout(attempt, 16);\n            return;\n          }\n          assert.strictEqual(actual, _.VERSION);\n          done();\n        };\n\n        attempt();\n      }\n      else {\n        skipAssert(assert);\n        done();\n      }\n    });\n\n    QUnit.test('should not add `Function.prototype` extensions to lodash', function(assert) {\n      assert.expect(1);\n\n      if (lodashBizarro) {\n        assert.notOk('_method' in lodashBizarro);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should avoid non-native built-ins', function(assert) {\n      assert.expect(6);\n\n      function message(lodashMethod, nativeMethod) {\n        return '`' + lodashMethod + '` should avoid overwritten native `' + nativeMethod + '`';\n      }\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var object = { 'a': 1 },\n          otherObject = { 'b': 2 },\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(object));\n\n      if (lodashBizarro) {\n        try {\n          var actual = lodashBizarro.create(Foo.prototype);\n        } catch (e) {\n          actual = null;\n        }\n        var label = message('_.create', 'Object.create');\n        assert.ok(actual instanceof Foo, label);\n\n        try {\n          actual = [\n            lodashBizarro.difference([object, otherObject], largeArray),\n            lodashBizarro.intersection(largeArray, [object]),\n            lodashBizarro.uniq(largeArray)\n          ];\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.difference`, `_.intersection`, and `_.uniq', 'Map');\n        assert.deepEqual(actual, [[otherObject], [object], [object]], label);\n\n        try {\n          if (Symbol) {\n            object[symbol] = {};\n          }\n          actual = [\n            lodashBizarro.clone(object),\n            lodashBizarro.cloneDeep(object)\n          ];\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.clone` and `_.cloneDeep', 'Object.getOwnPropertySymbols');\n        assert.deepEqual(actual, [object, object], label);\n\n        try {\n          // Avoid buggy symbol detection in Babel's `_typeof` helper.\n          var symObject = setProperty(Object(symbol), 'constructor', Object);\n          actual = [\n            Symbol ? lodashBizarro.clone(symObject) : {},\n            Symbol ? lodashBizarro.isEqual(symObject, Object(symbol)) : false,\n            Symbol ? lodashBizarro.toString(symObject) : ''\n          ];\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.clone`, `_.isEqual`, and `_.toString', 'Symbol');\n        assert.deepEqual(actual, [{}, false, ''], label);\n\n        try {\n          var map = new lodashBizarro.memoize.Cache;\n          actual = map.set('a', 1).get('a');\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.memoize.Cache', 'Map');\n        assert.deepEqual(actual, 1, label);\n\n        try {\n          map = new (Map || Object);\n          if (Symbol && Symbol.iterator) {\n            map[Symbol.iterator] = null;\n          }\n          actual = lodashBizarro.toArray(map);\n        } catch (e) {\n          actual = null;\n        }\n        label = message('_.toArray', 'Map');\n        assert.deepEqual(actual, [], label);\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('isIndex');\n\n  (function() {\n    var func = _._isIndex;\n\n    QUnit.test('should return `true` for indexes', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        var values = [[0], ['0'], ['1'], [3, 4], [MAX_SAFE_INTEGER - 1]],\n            expected = lodashStable.map(values, stubTrue);\n\n        var actual = lodashStable.map(values, function(args) {\n          return func.apply(undefined, args);\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-indexes', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        var values = [['1abc'], ['07'], ['0001'], [-1], [3, 3], [1.1], [MAX_SAFE_INTEGER]],\n            expected = lodashStable.map(values, stubFalse);\n\n        var actual = lodashStable.map(values, function(args) {\n          return func.apply(undefined, args);\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('isIterateeCall');\n\n  (function() {\n    var array = [1],\n        func = _._isIterateeCall,\n        object =  { 'a': 1 };\n\n    QUnit.test('should return `true` for iteratee calls', function(assert) {\n      assert.expect(3);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      if (func) {\n        assert.strictEqual(func(1, 0, array), true);\n        assert.strictEqual(func(1, 'a', object), true);\n        assert.strictEqual(func(1, 'a', new Foo), true);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should return `false` for non-iteratee calls', function(assert) {\n      assert.expect(4);\n\n      if (func) {\n        assert.strictEqual(func(2, 0, array), false);\n        assert.strictEqual(func(1, 1.1, array), false);\n        assert.strictEqual(func(1, 0, { 'length': MAX_SAFE_INTEGER + 1 }), false);\n        assert.strictEqual(func(1, 'b', object), false);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should work with `NaN` values', function(assert) {\n      assert.expect(2);\n\n      if (func) {\n        assert.strictEqual(func(NaN, 0, [NaN]), true);\n        assert.strictEqual(func(NaN, 'a', { 'a': NaN }), true);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should not error when `index` is an object without a `toString` method', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        try {\n          var actual = func(1, { 'toString': null }, [1]);\n        } catch (e) {\n          var message = e.message;\n        }\n        assert.strictEqual(actual, false, message || '');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('map caches');\n\n  (function() {\n    var keys = [null, undefined, false, true, 1, -Infinity, NaN, {}, 'a', symbol || noop];\n\n    var pairs = lodashStable.map(keys, function(key, index) {\n      var lastIndex = keys.length - 1;\n      return [key, keys[lastIndex - index]];\n    });\n\n    function createCaches(pairs) {\n      var largeStack = new mapCaches.Stack(pairs),\n          length = pairs ? pairs.length : 0;\n\n      lodashStable.times(LARGE_ARRAY_SIZE - length, function() {\n        largeStack.set({}, {});\n      });\n\n      return {\n        'hashes': new mapCaches.Hash(pairs),\n        'list caches': new mapCaches.ListCache(pairs),\n        'map caches': new mapCaches.MapCache(pairs),\n        'stack caches': new mapCaches.Stack(pairs),\n        'large stacks': largeStack\n      };\n    }\n\n    lodashStable.forOwn(createCaches(pairs), function(cache, kind) {\n      var isLarge = /^large/.test(kind);\n\n      QUnit.test('should implement a `Map` interface for ' + kind, function(assert) {\n        assert.expect(83);\n\n        lodashStable.each(keys, function(key, index) {\n          var value = pairs[index][1];\n\n          assert.deepEqual(cache.get(key), value);\n          assert.strictEqual(cache.has(key), true);\n          assert.strictEqual(cache.delete(key), true);\n          assert.strictEqual(cache.has(key), false);\n          assert.strictEqual(cache.get(key), undefined);\n          assert.strictEqual(cache.delete(key), false);\n          assert.strictEqual(cache.set(key, value), cache);\n          assert.strictEqual(cache.has(key), true);\n        });\n\n        assert.strictEqual(cache.size, isLarge ? LARGE_ARRAY_SIZE : keys.length);\n        assert.strictEqual(cache.clear(), undefined);\n        assert.ok(lodashStable.every(keys, function(key) {\n          return !cache.has(key);\n        }));\n      });\n    });\n\n    lodashStable.forOwn(createCaches(), function(cache, kind) {\n      QUnit.test('should support changing values of ' + kind, function(assert) {\n        assert.expect(10);\n\n        lodashStable.each(keys, function(key) {\n          cache.set(key, 1).set(key, 2);\n          assert.strictEqual(cache.get(key), 2);\n        });\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash constructor');\n\n  (function() {\n    var values = empties.concat(true, 1, 'a'),\n        expected = lodashStable.map(values, stubTrue);\n\n    QUnit.test('should create a new instance when called without the `new` operator', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = lodashStable.map(values, function(value) {\n          return _(value) instanceof _;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return the given `lodash` instances', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = lodashStable.map(values, function(value) {\n          var wrapped = _(value);\n          return _(wrapped) === wrapped;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should convert foreign wrapped values to `lodash` instances', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm && lodashBizarro) {\n        var actual = lodashStable.map(values, function(value) {\n          var wrapped = _(lodashBizarro(value)),\n              unwrapped = wrapped.value();\n\n          return wrapped instanceof _ &&\n            ((unwrapped === value) || (unwrapped !== unwrapped && value !== value));\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.add');\n\n  (function() {\n    QUnit.test('should add two numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.add(6, 4), 10);\n      assert.strictEqual(_.add(-6, 4), -2);\n      assert.strictEqual(_.add(-6, -4), -10);\n    });\n\n    QUnit.test('should not coerce arguments to numbers', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.add('6', '4'), '64');\n      assert.strictEqual(_.add('x', 'y'), 'xy');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.after');\n\n  (function() {\n    function after(n, times) {\n      var count = 0;\n      lodashStable.times(times, _.after(n, function() { count++; }));\n      return count;\n    }\n\n    QUnit.test('should create a function that invokes `func` after `n` calls', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(after(5, 5), 1, 'after(n) should invoke `func` after being called `n` times');\n      assert.strictEqual(after(5, 4), 0, 'after(n) should not invoke `func` before being called `n` times');\n      assert.strictEqual(after(0, 0), 0, 'after(0) should not invoke `func` immediately');\n      assert.strictEqual(after(0, 1), 1, 'after(0) should invoke `func` when called once');\n    });\n\n    QUnit.test('should coerce `n` values of `NaN` to `0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(after(NaN, 1), 1);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(2);\n\n      var after = _.after(1, function(assert) { return ++this.count; }),\n          object = { 'after': after, 'count': 0 };\n\n      object.after();\n      assert.strictEqual(object.after(), 2);\n      assert.strictEqual(object.count, 2);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.ary');\n\n  (function() {\n    function fn(a, b, c) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should cap the number of arguments provided to `func`', function(assert) {\n      assert.expect(2);\n\n      var actual = lodashStable.map(['6', '8', '10'], _.ary(parseInt, 1));\n      assert.deepEqual(actual, [6, 8, 10]);\n\n      var capped = _.ary(fn, 2);\n      assert.deepEqual(capped('a', 'b', 'c', 'd'), ['a', 'b']);\n    });\n\n    QUnit.test('should use `func.length` if `n` is not given', function(assert) {\n      assert.expect(1);\n\n      var capped = _.ary(fn);\n      assert.deepEqual(capped('a', 'b', 'c', 'd'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should treat a negative `n` as `0`', function(assert) {\n      assert.expect(1);\n\n      var capped = _.ary(fn, -1);\n\n      try {\n        var actual = capped('a');\n      } catch (e) {}\n\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      var values = ['1', 1.6, 'xyz'],\n          expected = [['a'], ['a'], []];\n\n      var actual = lodashStable.map(values, function(n) {\n        var capped = _.ary(fn, n);\n        return capped('a', 'b');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not force a minimum argument count', function(assert) {\n      assert.expect(1);\n\n      var args = ['a', 'b', 'c'],\n          capped = _.ary(fn, 3);\n\n      var expected = lodashStable.map(args, function(arg, index) {\n        return args.slice(0, index);\n      });\n\n      var actual = lodashStable.map(expected, function(array) {\n        return capped.apply(undefined, array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(1);\n\n      var capped = _.ary(function(a, b) { return this; }, 1),\n          object = { 'capped': capped };\n\n      assert.strictEqual(object.capped(), object);\n    });\n\n    QUnit.test('should use the existing `ary` if smaller', function(assert) {\n      assert.expect(1);\n\n      var capped = _.ary(_.ary(fn, 1), 2);\n      assert.deepEqual(capped('a', 'b', 'c'), ['a']);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var funcs = lodashStable.map([fn], _.ary),\n          actual = funcs[0]('a', 'b', 'c');\n\n      assert.deepEqual(actual, ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should work when combined with other methods that use metadata', function(assert) {\n      assert.expect(2);\n\n      var array = ['a', 'b', 'c'],\n          includes = _.curry(_.rearg(_.ary(_.includes, 2), 1, 0), 2);\n\n      assert.strictEqual(includes('b')(array, 2), true);\n\n      if (!isNpm) {\n        includes = _(_.includes).ary(2).rearg(1, 0).curry(2).value();\n        assert.strictEqual(includes('b')(array, 2), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.assignIn');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.extend, _.assignIn);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.assign and lodash.assignIn');\n\n  lodashStable.each(['assign', 'assignIn'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should assign source properties to `object`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func({ 'a': 1 }, { 'b': 2 }), { 'a': 1, 'b': 2 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should accept multiple sources', function(assert) {\n      assert.expect(2);\n\n      var expected = { 'a': 1, 'b': 2, 'c': 3 };\n      assert.deepEqual(func({ 'a': 1 }, { 'b': 2 }, { 'c': 3 }), expected);\n      assert.deepEqual(func({ 'a': 1 }, { 'b': 2, 'c': 2 }, { 'c': 3 }), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should overwrite destination properties', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': 3, 'b': 2, 'c': 1 };\n      assert.deepEqual(func({ 'a': 1, 'b': 2 }, expected), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should assign source properties with nullish values', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': null, 'b': undefined, 'c': null };\n      assert.deepEqual(func({ 'a': 1, 'b': 2 }, expected), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should skip assignments if values are the same', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n\n      var descriptor = {\n        'configurable': true,\n        'enumerable': true,\n        'set': function() { throw new Error; }\n      };\n\n      var source = {\n        'a': 1,\n        'b': undefined,\n        'c': NaN,\n        'd': undefined,\n        'constructor': Object,\n        'toString': lodashStable.constant('source')\n      };\n\n      defineProperty(object, 'a', lodashStable.assign({}, descriptor, {\n        'get': stubOne\n      }));\n\n      defineProperty(object, 'b', lodashStable.assign({}, descriptor, {\n        'get': noop\n      }));\n\n      defineProperty(object, 'c', lodashStable.assign({}, descriptor, {\n        'get': stubNaN\n      }));\n\n      defineProperty(object, 'constructor', lodashStable.assign({}, descriptor, {\n        'get': lodashStable.constant(Object)\n      }));\n\n      try {\n        var actual = func(object, source);\n      } catch (e) {}\n\n      assert.deepEqual(actual, source);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat sparse array sources as dense', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      array[2] = 3;\n\n      assert.deepEqual(func({}, array), { '0': 1, '1': undefined, '2': 3 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should assign values of prototype objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      assert.deepEqual(func({}, Foo.prototype), { 'a': 1 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce string sources to objects', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func({}, 'a'), { '0': 'a' });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.assignInWith');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.extendWith, _.assignInWith);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.assignWith and lodash.assignInWith');\n\n  lodashStable.each(['assignWith', 'assignInWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should work with a `customizer` callback', function(assert) {\n      assert.expect(1);\n\n      var actual = func({ 'a': 1, 'b': 2 }, { 'a': 3, 'c': 3 }, function(a, b) {\n        return a === undefined ? b : a;\n      });\n\n      assert.deepEqual(actual, { 'a': 1, 'b': 2, 'c': 3 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `customizer` that returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': 1 };\n      assert.deepEqual(func({}, expected, noop), expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.at');\n\n  (function() {\n    var array = ['a', 'b', 'c'],\n        object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n    QUnit.test('should return the elements corresponding to the specified keys', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(array, [0, 2]);\n      assert.deepEqual(actual, ['a', 'c']);\n    });\n\n    QUnit.test('should return `undefined` for nonexistent keys', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(array, [2, 4, 0]);\n      assert.deepEqual(actual, ['c', undefined, 'a']);\n    });\n\n    QUnit.test('should work with non-index keys on array values', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.reject(empties, function(value) {\n        return (value === 0) || lodashStable.isArray(value);\n      }).concat(-1, 1.1);\n\n      var array = lodashStable.transform(values, function(result, value) {\n        result[value] = 1;\n      }, []);\n\n      var expected = lodashStable.map(values, stubOne),\n          actual = _.at(array, values);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty array when no keys are given', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.at(array), []);\n      assert.deepEqual(_.at(array, [], []), []);\n    });\n\n    QUnit.test('should accept multiple key arguments', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(['a', 'b', 'c', 'd'], 3, 0, 2);\n      assert.deepEqual(actual, ['d', 'a', 'c']);\n    });\n\n    QUnit.test('should work with a falsey `object` when keys are given', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, lodashStable.constant(Array(4)));\n\n      var actual = lodashStable.map(falsey, function(object) {\n        try {\n          return _.at(object, 0, 1, 'pop', 'push');\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with an `arguments` object for `object`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(args, [2, 0]);\n      assert.deepEqual(actual, [3, 1]);\n    });\n\n    QUnit.test('should work with `arguments` object as secondary arguments', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at([1, 2, 3, 4, 5], args);\n      assert.deepEqual(actual, [2, 3, 4]);\n    });\n\n    QUnit.test('should work with an object for `object`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.at(object, ['a[0].b.c', 'a[1]']);\n      assert.deepEqual(actual, [3, 4]);\n    });\n\n    QUnit.test('should pluck inherited property values', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var actual = _.at(new Foo, 'b');\n      assert.deepEqual(actual, [2]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var largeArray = lodashStable.range(LARGE_ARRAY_SIZE),\n            smallArray = array;\n\n        lodashStable.each([[2], ['2'], [2, 1]], function(paths) {\n          lodashStable.times(2, function(index) {\n            var array = index ? largeArray : smallArray,\n                wrapped = _(array).map(identity).at(paths);\n\n            assert.deepEqual(wrapped.value(), _.at(_.map(array, identity), paths));\n          });\n        });\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n\n    QUnit.test('should support shortcut fusion', function(assert) {\n      assert.expect(8);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            count = 0,\n            iteratee = function(value) { count++; return square(value); },\n            lastIndex = LARGE_ARRAY_SIZE - 1;\n\n        lodashStable.each([lastIndex, lastIndex + '', LARGE_ARRAY_SIZE, []], function(n, index) {\n          count = 0;\n          var actual = _(array).map(iteratee).at(n).value(),\n              expected = index < 2 ? 1 : 0;\n\n          assert.strictEqual(count, expected);\n\n          expected = index == 3 ? [] : [index == 2 ? undefined : square(lastIndex)];\n          assert.deepEqual(actual, expected);\n        });\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('work with an object for `object` when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var paths = ['a[0].b.c', 'a[1]'],\n            actual = _(object).map(identity).at(paths).value();\n\n        assert.deepEqual(actual, _.at(_.map(object, identity), paths));\n\n        var indexObject = { '0': 1 };\n        actual = _(indexObject).at(0).value();\n        assert.deepEqual(actual, _.at(indexObject, 0));\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.attempt');\n\n  (function() {\n    QUnit.test('should return the result of `func`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.attempt(lodashStable.constant('x')), 'x');\n    });\n\n    QUnit.test('should provide additional arguments to `func`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.attempt(function() { return slice.call(arguments); }, 1, 2);\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should return the caught error', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(errors, stubTrue);\n\n      var actual = lodashStable.map(errors, function(error) {\n        return _.attempt(function() { throw error; }) === error;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce errors to error objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.attempt(function() { throw 'x'; });\n      assert.ok(lodashStable.isEqual(actual, Error('x')));\n    });\n\n    QUnit.test('should preserve custom errors', function(assert) {\n      assert.expect(1);\n\n      var actual = _.attempt(function() { throw new CustomError('x'); });\n      assert.ok(actual instanceof CustomError);\n    });\n\n    QUnit.test('should work with an error object from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.errors) {\n        var expected = lodashStable.map(realm.errors, stubTrue);\n\n        var actual = lodashStable.map(realm.errors, function(error) {\n          return _.attempt(function() { throw error; }) === error;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_(lodashStable.constant('x')).attempt(), 'x');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(lodashStable.constant('x')).chain().attempt() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.before');\n\n  (function() {\n    function before(n, times) {\n      var count = 0;\n      lodashStable.times(times, _.before(n, function() { count++; }));\n      return count;\n    }\n\n    QUnit.test('should create a function that invokes `func` after `n` calls', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(before(5, 4), 4, 'before(n) should invoke `func` before being called `n` times');\n      assert.strictEqual(before(5, 6), 4, 'before(n) should not invoke `func` after being called `n - 1` times');\n      assert.strictEqual(before(0, 0), 0, 'before(0) should not invoke `func` immediately');\n      assert.strictEqual(before(0, 1), 0, 'before(0) should not invoke `func` when called');\n    });\n\n    QUnit.test('should coerce `n` values of `NaN` to `0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(before(NaN, 1), 0);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(2);\n\n      var before = _.before(2, function(assert) { return ++this.count; }),\n          object = { 'before': before, 'count': 0 };\n\n      object.before();\n      assert.strictEqual(object.before(), 1);\n      assert.strictEqual(object.count, 1);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.bind');\n\n  (function() {\n    function fn() {\n      var result = [this];\n      push.apply(result, arguments);\n      return result;\n    }\n\n    QUnit.test('should bind a function to an object', function(assert) {\n      assert.expect(1);\n\n      var object = {},\n          bound = _.bind(fn, object);\n\n      assert.deepEqual(bound('a'), [object, 'a']);\n    });\n\n    QUnit.test('should accept a falsey `thisArg`', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.reject(falsey.slice(1), function(value) { return value == null; }),\n          expected = lodashStable.map(values, function(value) { return [value]; });\n\n      var actual = lodashStable.map(values, function(value) {\n        try {\n          var bound = _.bind(fn, value);\n          return bound();\n        } catch (e) {}\n      });\n\n      assert.ok(lodashStable.every(actual, function(value, index) {\n        return lodashStable.isEqual(value, expected[index]);\n      }));\n    });\n\n    QUnit.test('should bind a function to nullish values', function(assert) {\n      assert.expect(6);\n\n      var bound = _.bind(fn, null),\n          actual = bound('a');\n\n      assert.ok((actual[0] === null) || (actual[0] && actual[0].Array));\n      assert.strictEqual(actual[1], 'a');\n\n      lodashStable.times(2, function(index) {\n        bound = index ? _.bind(fn, undefined) : _.bind(fn);\n        actual = bound('b');\n\n        assert.ok((actual[0] === undefined) || (actual[0] && actual[0].Array));\n        assert.strictEqual(actual[1], 'b');\n      });\n    });\n\n    QUnit.test('should partially apply arguments ', function(assert) {\n      assert.expect(4);\n\n      var object = {},\n          bound = _.bind(fn, object, 'a');\n\n      assert.deepEqual(bound(), [object, 'a']);\n\n      bound = _.bind(fn, object, 'a');\n      assert.deepEqual(bound('b'), [object, 'a', 'b']);\n\n      bound = _.bind(fn, object, 'a', 'b');\n      assert.deepEqual(bound(), [object, 'a', 'b']);\n      assert.deepEqual(bound('c', 'd'), [object, 'a', 'b', 'c', 'd']);\n    });\n\n    QUnit.test('should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var object = {},\n          ph = _.bind.placeholder,\n          bound = _.bind(fn, object, ph, 'b', ph);\n\n      assert.deepEqual(bound('a', 'c'), [object, 'a', 'b', 'c']);\n      assert.deepEqual(bound('a'), [object, 'a', 'b', undefined]);\n      assert.deepEqual(bound('a', 'c', 'd'), [object, 'a', 'b', 'c', 'd']);\n      assert.deepEqual(bound(), [object, undefined, 'b', undefined]);\n    });\n\n    QUnit.test('should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var _ph = _.placeholder = {},\n            ph = _.bind.placeholder,\n            object = {},\n            bound = _.bind(fn, object, _ph, 'b', ph);\n\n        assert.deepEqual(bound('a', 'c'), [object, 'a', 'b', ph, 'c']);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should create a function with a `length` of `0`', function(assert) {\n      assert.expect(2);\n\n      var fn = function(a, b, c) {},\n          bound = _.bind(fn, {});\n\n      assert.strictEqual(bound.length, 0);\n\n      bound = _.bind(fn, {}, 1);\n      assert.strictEqual(bound.length, 0);\n    });\n\n    QUnit.test('should ignore binding when called with the `new` operator', function(assert) {\n      assert.expect(3);\n\n      function Foo() {\n        return this;\n      }\n\n      var bound = _.bind(Foo, { 'a': 1 }),\n          newBound = new bound;\n\n      assert.strictEqual(bound().a, 1);\n      assert.strictEqual(newBound.a, undefined);\n      assert.ok(newBound instanceof Foo);\n    });\n\n    QUnit.test('should handle a number of arguments when called with the `new` operator', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        return this;\n      }\n\n      function Bar() {}\n\n      var thisArg = { 'a': 1 },\n          boundFoo = _.bind(Foo, thisArg),\n          boundBar = _.bind(Bar, thisArg),\n          count = 9,\n          expected = lodashStable.times(count, lodashStable.constant([undefined, undefined]));\n\n      var actual = lodashStable.times(count, function(index) {\n        try {\n          switch (index) {\n            case 0: return [new boundFoo().a, new boundBar().a];\n            case 1: return [new boundFoo(1).a, new boundBar(1).a];\n            case 2: return [new boundFoo(1, 2).a, new boundBar(1, 2).a];\n            case 3: return [new boundFoo(1, 2, 3).a, new boundBar(1, 2, 3).a];\n            case 4: return [new boundFoo(1, 2, 3, 4).a, new boundBar(1, 2, 3, 4).a];\n            case 5: return [new boundFoo(1, 2, 3, 4, 5).a, new boundBar(1, 2, 3, 4, 5).a];\n            case 6: return [new boundFoo(1, 2, 3, 4, 5, 6).a, new boundBar(1, 2, 3, 4, 5, 6).a];\n            case 7: return [new boundFoo(1, 2, 3, 4, 5, 6, 7).a, new boundBar(1, 2, 3, 4, 5, 6, 7).a];\n            case 8: return [new boundFoo(1, 2, 3, 4, 5, 6, 7, 8).a, new boundBar(1, 2, 3, 4, 5, 6, 7, 8).a];\n          }\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ensure `new bound` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var bound = _.bind(Foo),\n          object = {};\n\n      assert.ok(new bound instanceof Foo);\n      assert.strictEqual(new bound(true), object);\n    });\n\n    QUnit.test('should append array arguments to partially applied arguments', function(assert) {\n      assert.expect(1);\n\n      var object = {},\n          bound = _.bind(fn, object, 'a');\n\n      assert.deepEqual(bound(['b'], 'c'), [object, 'a', ['b'], 'c']);\n    });\n\n    QUnit.test('should not rebind functions', function(assert) {\n      assert.expect(3);\n\n      var object1 = {},\n          object2 = {},\n          object3 = {};\n\n      var bound1 = _.bind(fn, object1),\n          bound2 = _.bind(bound1, object2, 'a'),\n          bound3 = _.bind(bound1, object3, 'b');\n\n      assert.deepEqual(bound1(), [object1]);\n      assert.deepEqual(bound2(), [object1, 'a']);\n      assert.deepEqual(bound3(), [object1, 'b']);\n    });\n\n    QUnit.test('should not error when instantiating bound built-ins', function(assert) {\n      assert.expect(2);\n\n      var Ctor = _.bind(Date, null),\n          expected = new Date(2012, 4, 23, 0, 0, 0, 0);\n\n      try {\n        var actual = new Ctor(2012, 4, 23, 0, 0, 0, 0);\n      } catch (e) {}\n\n      assert.deepEqual(actual, expected);\n\n      Ctor = _.bind(Date, null, 2012, 4, 23);\n\n      try {\n        actual = new Ctor(0, 0, 0, 0);\n      } catch (e) {}\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not error when calling bound class constructors with the `new` operator', function(assert) {\n      assert.expect(1);\n\n      var createCtor = lodashStable.attempt(Function, '\"use strict\";return class A{}');\n\n      if (typeof createCtor == 'function') {\n        var bound = _.bind(createCtor()),\n            count = 8,\n            expected = lodashStable.times(count, stubTrue);\n\n        var actual = lodashStable.times(count, function(index) {\n          try {\n            switch (index) {\n              case 0: return !!(new bound);\n              case 1: return !!(new bound(1));\n              case 2: return !!(new bound(1, 2));\n              case 3: return !!(new bound(1, 2, 3));\n              case 4: return !!(new bound(1, 2, 3, 4));\n              case 5: return !!(new bound(1, 2, 3, 4, 5));\n              case 6: return !!(new bound(1, 2, 3, 4, 5, 6));\n              case 7: return !!(new bound(1, 2, 3, 4, 5, 6, 7));\n            }\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var object = {},\n            bound = _(fn).bind({}, 'a', 'b');\n\n        assert.ok(bound instanceof _);\n\n        var actual = bound.value()('c');\n        assert.deepEqual(actual, [object, 'a', 'b', 'c']);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.bindAll');\n\n  (function() {\n    var args = toArgs(['a']);\n\n    var source = {\n      '_n0': -2,\n      '_p0': -1,\n      '_a': 1,\n      '_b': 2,\n      '_c': 3,\n      '_d': 4,\n      '-0': function() { return this._n0; },\n      '0': function() { return this._p0; },\n      'a': function() { return this._a; },\n      'b': function() { return this._b; },\n      'c': function() { return this._c; },\n      'd': function() { return this._d; }\n    };\n\n    QUnit.test('should accept individual method names', function(assert) {\n      assert.expect(1);\n\n      var object = lodashStable.cloneDeep(source);\n      _.bindAll(object, 'a', 'b');\n\n      var actual = lodashStable.map(['a', 'b', 'c'], function(key) {\n        return object[key].call({});\n      });\n\n      assert.deepEqual(actual, [1, 2, undefined]);\n    });\n\n    QUnit.test('should accept arrays of method names', function(assert) {\n      assert.expect(1);\n\n      var object = lodashStable.cloneDeep(source);\n      _.bindAll(object, ['a', 'b'], ['c']);\n\n      var actual = lodashStable.map(['a', 'b', 'c', 'd'], function(key) {\n        return object[key].call({});\n      });\n\n      assert.deepEqual(actual, [1, 2, 3, undefined]);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        var object = lodashStable.cloneDeep(source);\n        _.bindAll(object, key);\n        return object[lodashStable.toString(key)].call({});\n      });\n\n      assert.deepEqual(actual, [-2, -2, -1, -1]);\n    });\n\n    QUnit.test('should work with an array `object`', function(assert) {\n      assert.expect(1);\n\n      var array = ['push', 'pop'];\n      _.bindAll(array);\n      assert.strictEqual(array.pop, arrayProto.pop);\n    });\n\n    QUnit.test('should work with `arguments` objects as secondary arguments', function(assert) {\n      assert.expect(1);\n\n      var object = lodashStable.cloneDeep(source);\n      _.bindAll(object, args);\n\n      var actual = lodashStable.map(args, function(key) {\n        return object[key].call({});\n      });\n\n      assert.deepEqual(actual, [1]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.bindKey');\n\n  (function() {\n    QUnit.test('should work when the target function is overwritten', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'user': 'fred',\n        'greet': function(greeting) {\n          return this.user + ' says: ' + greeting;\n        }\n      };\n\n      var bound = _.bindKey(object, 'greet', 'hi');\n      assert.strictEqual(bound(), 'fred says: hi');\n\n      object.greet = function(greeting) {\n        return this.user + ' says: ' + greeting + '!';\n      };\n\n      assert.strictEqual(bound(), 'fred says: hi!');\n    });\n\n    QUnit.test('should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var object = {\n        'fn': function() {\n          return slice.call(arguments);\n        }\n      };\n\n      var ph = _.bindKey.placeholder,\n          bound = _.bindKey(object, 'fn', ph, 'b', ph);\n\n      assert.deepEqual(bound('a', 'c'), ['a', 'b', 'c']);\n      assert.deepEqual(bound('a'), ['a', 'b', undefined]);\n      assert.deepEqual(bound('a', 'c', 'd'), ['a', 'b', 'c', 'd']);\n      assert.deepEqual(bound(), [undefined, 'b', undefined]);\n    });\n\n    QUnit.test('should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var object = {\n          'fn': function() {\n            return slice.call(arguments);\n          }\n        };\n\n        var _ph = _.placeholder = {},\n            ph = _.bindKey.placeholder,\n            bound = _.bindKey(object, 'fn', _ph, 'b', ph);\n\n        assert.deepEqual(bound('a', 'c'), ['a', 'b', ph, 'c']);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should ensure `new bound` is an instance of `object[key]`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var object = { 'Foo': Foo },\n          bound = _.bindKey(object, 'Foo');\n\n      assert.ok(new bound instanceof Foo);\n      assert.strictEqual(new bound(true), object);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('case methods');\n\n  lodashStable.each(['camel', 'kebab', 'lower', 'snake', 'start', 'upper'], function(caseName) {\n    var methodName = caseName + 'Case',\n        func = _[methodName];\n\n    var strings = [\n      'foo bar', 'Foo bar', 'foo Bar', 'Foo Bar',\n      'FOO BAR', 'fooBar', '--foo-bar--', '__foo_bar__'\n    ];\n\n    var converted = (function() {\n      switch (caseName) {\n        case 'camel': return 'fooBar';\n        case 'kebab': return 'foo-bar';\n        case 'lower': return 'foo bar';\n        case 'snake': return 'foo_bar';\n        case 'start': return 'Foo Bar';\n        case 'upper': return 'FOO BAR';\n      }\n    }());\n\n    QUnit.test('`_.' + methodName + '` should convert `string` to ' + caseName + ' case', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(strings, function(string) {\n        var expected = (caseName == 'start' && string == 'FOO BAR') ? string : converted;\n        return func(string) === expected;\n      });\n\n      assert.deepEqual(actual, lodashStable.map(strings, stubTrue));\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle double-converting strings', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(strings, function(string) {\n        var expected = (caseName == 'start' && string == 'FOO BAR') ? string : converted;\n        return func(func(string)) === expected;\n      });\n\n      assert.deepEqual(actual, lodashStable.map(strings, stubTrue));\n    });\n\n    QUnit.test('`_.' + methodName + '` should deburr letters', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(burredLetters, function(burred, index) {\n        var letter = deburredLetters[index].replace(/['\\u2019]/g, '');\n        if (caseName == 'start') {\n          letter = letter == 'IJ' ? letter : lodashStable.capitalize(letter);\n        } else if (caseName == 'upper') {\n          letter = letter.toUpperCase();\n        } else {\n          letter = letter.toLowerCase();\n        }\n        return func(burred) === letter;\n      });\n\n      assert.deepEqual(actual, lodashStable.map(burredLetters, stubTrue));\n    });\n\n    QUnit.test('`_.' + methodName + '` should remove contraction apostrophes', function(assert) {\n      assert.expect(2);\n\n      var postfixes = ['d', 'll', 'm', 're', 's', 't', 've'];\n\n      lodashStable.each([\"'\", '\\u2019'], function(apos) {\n        var actual = lodashStable.map(postfixes, function(postfix) {\n          return func('a b' + apos + postfix +  ' c');\n        });\n\n        var expected = lodashStable.map(postfixes, function(postfix) {\n          switch (caseName) {\n            case 'camel': return 'aB'  + postfix + 'C';\n            case 'kebab': return 'a-b' + postfix + '-c';\n            case 'lower': return 'a b' + postfix + ' c';\n            case 'snake': return 'a_b' + postfix + '_c';\n            case 'start': return 'A B' + postfix + ' C';\n            case 'upper': return 'A B' + postfix.toUpperCase() + ' C';\n          }\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should remove Latin mathematical operators', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(['\\xd7', '\\xf7'], func);\n      assert.deepEqual(actual, ['', '']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `string` to a string', function(assert) {\n      assert.expect(2);\n\n      var string = 'foo bar';\n      assert.strictEqual(func(Object(string)), converted);\n      assert.strictEqual(func({ 'toString': lodashStable.constant(string) }), converted);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value implicitly when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_('foo bar')[methodName](), converted);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_('foo bar').chain()[methodName]() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  (function() {\n    QUnit.test('should get the original value after cycling through all case methods', function(assert) {\n      assert.expect(1);\n\n      var funcs = [_.camelCase, _.kebabCase, _.lowerCase, _.snakeCase, _.startCase, _.lowerCase, _.camelCase];\n\n      var actual = lodashStable.reduce(funcs, function(result, func) {\n        return func(result);\n      }, 'enable 6h format');\n\n      assert.strictEqual(actual, 'enable6HFormat');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.camelCase');\n\n  (function() {\n    QUnit.test('should work with numbers', function(assert) {\n      assert.expect(6);\n\n      assert.strictEqual(_.camelCase('12 feet'), '12Feet');\n      assert.strictEqual(_.camelCase('enable 6h format'), 'enable6HFormat');\n      assert.strictEqual(_.camelCase('enable 24H format'), 'enable24HFormat');\n      assert.strictEqual(_.camelCase('too legit 2 quit'), 'tooLegit2Quit');\n      assert.strictEqual(_.camelCase('walk 500 miles'), 'walk500Miles');\n      assert.strictEqual(_.camelCase('xhr2 request'), 'xhr2Request');\n    });\n\n    QUnit.test('should handle acronyms', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each(['safe HTML', 'safeHTML'], function(string) {\n        assert.strictEqual(_.camelCase(string), 'safeHtml');\n      });\n\n      lodashStable.each(['escape HTML entities', 'escapeHTMLEntities'], function(string) {\n        assert.strictEqual(_.camelCase(string), 'escapeHtmlEntities');\n      });\n\n      lodashStable.each(['XMLHttpRequest', 'XmlHTTPRequest'], function(string) {\n        assert.strictEqual(_.camelCase(string), 'xmlHttpRequest');\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.capitalize');\n\n  (function() {\n    QUnit.test('should capitalize the first character of a string', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.capitalize('fred'), 'Fred');\n      assert.strictEqual(_.capitalize('Fred'), 'Fred');\n      assert.strictEqual(_.capitalize(' fred'), ' fred');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.castArray');\n\n  (function() {\n    QUnit.test('should wrap non-array items in an array', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(true, 1, 'a', { 'a': 1 }),\n          expected = lodashStable.map(values, function(value) { return [value]; }),\n          actual = lodashStable.map(values, _.castArray);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return array values by reference', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      assert.strictEqual(_.castArray(array), array);\n    });\n\n    QUnit.test('should return an empty array when no arguments are given', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.castArray(), []);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.chain');\n\n  (function() {\n    QUnit.test('should return a wrapped value', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _.chain({ 'a': 0 });\n        assert.ok(actual instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return existing wrapped values', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _({ 'a': 0 });\n        assert.strictEqual(_.chain(wrapped), wrapped);\n        assert.strictEqual(wrapped.chain(), wrapped);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should enable chaining for methods that return unwrapped values', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = ['c', 'b', 'a'];\n\n        assert.ok(_.chain(array).head() instanceof _);\n        assert.ok(_(array).chain().head() instanceof _);\n\n        assert.ok(_.chain(array).isArray() instanceof _);\n        assert.ok(_(array).chain().isArray() instanceof _);\n\n        assert.ok(_.chain(array).sortBy().head() instanceof _);\n        assert.ok(_(array).chain().sortBy().head() instanceof _);\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n\n    QUnit.test('should chain multiple methods', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var array = ['one two three four', 'five six seven eight', 'nine ten eleven twelve'],\n              expected = { ' ': 9, 'e': 14, 'f': 2, 'g': 1, 'h': 2, 'i': 4, 'l': 2, 'n': 6, 'o': 3, 'r': 2, 's': 2, 't': 5, 'u': 1, 'v': 4, 'w': 2, 'x': 1 },\n              wrapped = index ? _(array).chain() : _.chain(array);\n\n          var actual = wrapped\n            .chain()\n            .map(function(value) { return value.split(''); })\n            .flatten()\n            .reduce(function(object, chr) {\n              object[chr] || (object[chr] = 0);\n              object[chr]++;\n              return object;\n            }, {})\n            .value();\n\n          assert.deepEqual(actual, expected);\n\n          array = [1, 2, 3, 4, 5, 6];\n          wrapped = index ? _(array).chain() : _.chain(array);\n          actual = wrapped\n            .chain()\n            .filter(function(n) { return n % 2 != 0; })\n            .reject(function(n) { return n % 3 == 0; })\n            .sortBy(function(n) { return -n; })\n            .value();\n\n          assert.deepEqual(actual, [5, 1]);\n\n          array = [3, 4];\n          wrapped = index ? _(array).chain() : _.chain(array);\n          actual = wrapped\n            .reverse()\n            .concat([2, 1])\n            .unshift(5)\n            .tap(function(value) { value.pop(); })\n            .map(square)\n            .value();\n\n          assert.deepEqual(actual, [25, 16, 9, 4]);\n        });\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.chunk');\n\n  (function() {\n    var array = [0, 1, 2, 3, 4, 5];\n\n    QUnit.test('should return chunked arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = _.chunk(array, 3);\n      assert.deepEqual(actual, [[0, 1, 2], [3, 4, 5]]);\n    });\n\n    QUnit.test('should return the last chunk as remaining elements', function(assert) {\n      assert.expect(1);\n\n      var actual = _.chunk(array, 4);\n      assert.deepEqual(actual, [[0, 1, 2, 3], [4, 5]]);\n    });\n\n    QUnit.test('should treat falsey `size` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [[0], [1], [2], [3], [4], [5]] : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(size, index) {\n        return index ? _.chunk(array, size) : _.chunk(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ensure the minimum `size` is `0`', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.reject(falsey, lodashStable.isUndefined).concat(-1, -Infinity),\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(n) {\n        return _.chunk(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce `size` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.chunk(array, array.length / 4), [[0], [1], [2], [3], [4], [5]]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([[1, 2], [3, 4]], _.chunk);\n      assert.deepEqual(actual, [[[1], [2]], [[3], [4]]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.clamp');\n\n  (function() {\n    QUnit.test('should work with a `max`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.clamp(5, 3), 3);\n      assert.strictEqual(_.clamp(1, 3), 1);\n    });\n\n    QUnit.test('should clamp negative numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.clamp(-10, -5, 5), -5);\n      assert.strictEqual(_.clamp(-10.2, -5.5, 5.5), -5.5);\n      assert.strictEqual(_.clamp(-Infinity, -5, 5), -5);\n    });\n\n    QUnit.test('should clamp positive numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.clamp(10, -5, 5), 5);\n      assert.strictEqual(_.clamp(10.6, -5.6, 5.4), 5.4);\n      assert.strictEqual(_.clamp(Infinity, -5, 5), 5);\n    });\n\n    QUnit.test('should not alter negative numbers in range', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.clamp(-4, -5, 5), -4);\n      assert.strictEqual(_.clamp(-5, -5, 5), -5);\n      assert.strictEqual(_.clamp(-5.5, -5.6, 5.6), -5.5);\n    });\n\n    QUnit.test('should not alter positive numbers in range', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.clamp(4, -5, 5), 4);\n      assert.strictEqual(_.clamp(5, -5, 5), 5);\n      assert.strictEqual(_.clamp(4.5, -5.1, 5.2), 4.5);\n    });\n\n    QUnit.test('should not alter `0` in range', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.clamp(0, -5, 5), Infinity);\n    });\n\n    QUnit.test('should clamp to `0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.clamp(-10, 0, 5), Infinity);\n    });\n\n    QUnit.test('should not alter `-0` in range', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.clamp(-0, -5, 5), -Infinity);\n    });\n\n    QUnit.test('should clamp to `-0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.clamp(-10, -0, 5), -Infinity);\n    });\n\n    QUnit.test('should return `NaN` when `number` is `NaN`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.clamp(NaN, -5, 5), NaN);\n    });\n\n    QUnit.test('should coerce `min` and `max` of `NaN` to `0`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.clamp(1, -5, NaN), 0);\n      assert.deepEqual(_.clamp(-1, NaN, 5), 0);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('clone methods');\n\n  (function() {\n    function Foo() {\n      this.a = 1;\n    }\n    Foo.prototype.b = 1;\n    Foo.c = function() {};\n\n    if (Map) {\n      var map = new Map;\n      map.set('a', 1);\n      map.set('b', 2);\n    }\n    if (Set) {\n      var set = new Set;\n      set.add(1);\n      set.add(2);\n    }\n    var objects = {\n      '`arguments` objects': arguments,\n      'arrays': ['a', ''],\n      'array-like objects': { '0': 'a', 'length': 1 },\n      'booleans': false,\n      'boolean objects': Object(false),\n      'date objects': new Date,\n      'Foo instances': new Foo,\n      'objects': { 'a': 0, 'b': 1, 'c': 2 },\n      'objects with object values': { 'a': /a/, 'b': ['B'], 'c': { 'C': 1 } },\n      'objects from another document': realm.object || {},\n      'maps': map,\n      'null values': null,\n      'numbers': 0,\n      'number objects': Object(0),\n      'regexes': /a/gim,\n      'sets': set,\n      'strings': 'a',\n      'string objects': Object('a'),\n      'undefined values': undefined\n    };\n\n    objects.arrays.length = 3;\n\n    var uncloneable = {\n      'DOM elements': body,\n      'functions': Foo,\n      'async functions': asyncFunc,\n      'generator functions': genFunc,\n      'the `Proxy` constructor': Proxy\n    };\n\n    lodashStable.each(errors, function(error) {\n      uncloneable[error.name + 's'] = error;\n    });\n\n    QUnit.test('`_.clone` should perform a shallow clone', function(assert) {\n      assert.expect(2);\n\n      var array = [{ 'a': 0 }, { 'b': 1 }],\n          actual = _.clone(array);\n\n      assert.deepEqual(actual, array);\n      assert.ok(actual !== array && actual[0] === array[0]);\n    });\n\n    QUnit.test('`_.cloneDeep` should deep clone objects with circular references', function(assert) {\n      assert.expect(1);\n\n      var object = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': {}\n      };\n\n      object.foo.b.c.d = object;\n      object.bar.b = object.foo.b;\n\n      var actual = _.cloneDeep(object);\n      assert.ok(actual.bar.b === actual.foo.b && actual === actual.foo.b.c.d && actual !== object);\n    });\n\n    QUnit.test('`_.cloneDeep` should deep clone objects with lots of circular references', function(assert) {\n      assert.expect(2);\n\n      var cyclical = {};\n      lodashStable.times(LARGE_ARRAY_SIZE + 1, function(index) {\n        cyclical['v' + index] = [index ? cyclical['v' + (index - 1)] : cyclical];\n      });\n\n      var clone = _.cloneDeep(cyclical),\n          actual = clone['v' + LARGE_ARRAY_SIZE][0];\n\n      assert.strictEqual(actual, clone['v' + (LARGE_ARRAY_SIZE - 1)]);\n      assert.notStrictEqual(actual, cyclical['v' + (LARGE_ARRAY_SIZE - 1)]);\n    });\n\n    QUnit.test('`_.cloneDeepWith` should provide `stack` to `customizer`', function(assert) {\n      assert.expect(1);\n\n      var actual;\n\n      _.cloneDeepWith({ 'a': 1 }, function() {\n        actual = _.last(arguments);\n      });\n\n      assert.ok(isNpm\n        ? actual.constructor.name == 'Stack'\n        : actual instanceof mapCaches.Stack\n      );\n    });\n\n    lodashStable.each(['clone', 'cloneDeep'], function(methodName) {\n      var func = _[methodName],\n          isDeep = methodName == 'cloneDeep';\n\n      lodashStable.forOwn(objects, function(object, kind) {\n        QUnit.test('`_.' + methodName + '` should clone ' + kind, function(assert) {\n          assert.expect(2);\n\n          var actual = func(object);\n          assert.ok(lodashStable.isEqual(actual, object));\n\n          if (lodashStable.isObject(object)) {\n            assert.notStrictEqual(actual, object);\n          } else {\n            assert.strictEqual(actual, object);\n          }\n        });\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone array buffers', function(assert) {\n        assert.expect(2);\n\n        if (ArrayBuffer) {\n          var actual = func(arrayBuffer);\n          assert.strictEqual(actual.byteLength, arrayBuffer.byteLength);\n          assert.notStrictEqual(actual, arrayBuffer);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone buffers', function(assert) {\n        assert.expect(4);\n\n        if (Buffer) {\n          var buffer = new Buffer([1, 2]),\n              actual = func(buffer);\n\n          assert.strictEqual(actual.byteLength, buffer.byteLength);\n          assert.strictEqual(actual.inspect(), buffer.inspect());\n          assert.notStrictEqual(actual, buffer);\n\n          buffer[0] = 2;\n          assert.strictEqual(actual[0], isDeep ? 2 : 1);\n        }\n        else {\n          skipAssert(assert, 4);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone `index` and `input` array properties', function(assert) {\n        assert.expect(2);\n\n        var array = /c/.exec('abcde'),\n            actual = func(array);\n\n        assert.strictEqual(actual.index, 2);\n        assert.strictEqual(actual.input, 'abcde');\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone `lastIndex` regexp property', function(assert) {\n        assert.expect(1);\n\n        var regexp = /c/g;\n        regexp.exec('abcde');\n\n        assert.strictEqual(func(regexp).lastIndex, 3);\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone expando properties', function(assert) {\n        assert.expect(1);\n\n        var values = lodashStable.map([false, true, 1, 'a'], function(value) {\n          var object = Object(value);\n          object.a = 1;\n          return object;\n        });\n\n        var expected = lodashStable.map(values, stubTrue);\n\n        var actual = lodashStable.map(values, function(value) {\n          return func(value).a === 1;\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone prototype objects', function(assert) {\n        assert.expect(2);\n\n        var actual = func(Foo.prototype);\n\n        assert.notOk(actual instanceof Foo);\n        assert.deepEqual(actual, { 'b': 1 });\n      });\n\n      QUnit.test('`_.' + methodName + '` should set the `[[Prototype]]` of a clone', function(assert) {\n        assert.expect(1);\n\n        assert.ok(func(new Foo) instanceof Foo);\n      });\n\n      QUnit.test('`_.' + methodName + '` should set the `[[Prototype]]` of a clone even when the `constructor` is incorrect', function(assert) {\n        assert.expect(1);\n\n        Foo.prototype.constructor = Object;\n        assert.ok(func(new Foo) instanceof Foo);\n        Foo.prototype.constructor = Foo;\n      });\n\n      QUnit.test('`_.' + methodName + '` should ensure `value` constructor is a function before using its `[[Prototype]]`', function(assert) {\n        assert.expect(1);\n\n        Foo.prototype.constructor = null;\n        assert.notOk(func(new Foo) instanceof Foo);\n        Foo.prototype.constructor = Foo;\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone properties that shadow those on `Object.prototype`', function(assert) {\n        assert.expect(2);\n\n        var object = {\n          'constructor': objectProto.constructor,\n          'hasOwnProperty': objectProto.hasOwnProperty,\n          'isPrototypeOf': objectProto.isPrototypeOf,\n          'propertyIsEnumerable': objectProto.propertyIsEnumerable,\n          'toLocaleString': objectProto.toLocaleString,\n          'toString': objectProto.toString,\n          'valueOf': objectProto.valueOf\n        };\n\n        var actual = func(object);\n\n        assert.deepEqual(actual, object);\n        assert.notStrictEqual(actual, object);\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone symbol properties', function(assert) {\n        assert.expect(7);\n\n        function Foo() {\n          this[symbol] = { 'c': 1 };\n        }\n\n        if (Symbol) {\n          var symbol2 = Symbol('b');\n          Foo.prototype[symbol2] = 2;\n\n          var symbol3 = Symbol('c');\n          defineProperty(Foo.prototype, symbol3, {\n            'configurable': true,\n            'enumerable': false,\n            'writable': true,\n            'value': 3\n          });\n\n          var object = { 'a': { 'b': new Foo } };\n          object[symbol] = { 'b': 1 };\n\n          var actual = func(object);\n          if (isDeep) {\n            assert.notStrictEqual(actual[symbol], object[symbol]);\n            assert.notStrictEqual(actual.a, object.a);\n          } else {\n            assert.strictEqual(actual[symbol], object[symbol]);\n            assert.strictEqual(actual.a, object.a);\n          }\n          assert.deepEqual(actual[symbol], object[symbol]);\n          assert.deepEqual(getSymbols(actual.a.b), [symbol]);\n          assert.deepEqual(actual.a.b[symbol], object.a.b[symbol]);\n          assert.deepEqual(actual.a.b[symbol2], object.a.b[symbol2]);\n          assert.deepEqual(actual.a.b[symbol3], object.a.b[symbol3])\n        }\n        else {\n          skipAssert(assert, 7);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should clone symbol objects', function(assert) {\n        assert.expect(4);\n\n        if (Symbol) {\n          assert.strictEqual(func(symbol), symbol);\n\n          var object = Object(symbol),\n              actual = func(object);\n\n          assert.strictEqual(typeof actual, 'object');\n          assert.strictEqual(typeof actual.valueOf(), 'symbol');\n          assert.notStrictEqual(actual, object);\n        }\n        else {\n          skipAssert(assert, 4);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should not clone symbol primitives', function(assert) {\n        assert.expect(1);\n\n        if (Symbol) {\n          assert.strictEqual(func(symbol), symbol);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should not error on DOM elements', function(assert) {\n        assert.expect(1);\n\n        if (document) {\n          var element = document.createElement('div');\n\n          try {\n            assert.deepEqual(func(element), {});\n          } catch (e) {\n            assert.ok(false, e.message);\n          }\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should create an object from the same realm as `value`', function(assert) {\n        assert.expect(1);\n\n        var props = [];\n\n        var objects = lodashStable.transform(_, function(result, value, key) {\n          if (lodashStable.startsWith(key, '_') && lodashStable.isObject(value) &&\n              !lodashStable.isArguments(value) && !lodashStable.isElement(value) &&\n              !lodashStable.isFunction(value)) {\n            props.push(lodashStable.capitalize(lodashStable.camelCase(key)));\n            result.push(value);\n          }\n        }, []);\n\n        var expected = lodashStable.map(objects, stubTrue);\n\n        var actual = lodashStable.map(objects, function(object) {\n          var Ctor = object.constructor,\n              result = func(object);\n\n          return result !== object && ((result instanceof Ctor) || !(new Ctor instanceof Ctor));\n        });\n\n        assert.deepEqual(actual, expected, props.join(', '));\n      });\n\n      QUnit.test('`_.' + methodName + '` should perform a ' + (isDeep ? 'deep' : 'shallow') + ' clone when used as an iteratee for methods like `_.map`', function(assert) {\n        assert.expect(2);\n\n        var expected = [{ 'a': [0] }, { 'b': [1] }],\n            actual = lodashStable.map(expected, func);\n\n        assert.deepEqual(actual, expected);\n\n        if (isDeep) {\n          assert.ok(actual[0] !== expected[0] && actual[0].a !== expected[0].a && actual[1].b !== expected[1].b);\n        } else {\n          assert.ok(actual[0] !== expected[0] && actual[0].a === expected[0].a && actual[1].b === expected[1].b);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should return a unwrapped value when chaining', function(assert) {\n        assert.expect(2);\n\n        if (!isNpm) {\n          var object = objects.objects,\n              actual = _(object)[methodName]();\n\n          assert.deepEqual(actual, object);\n          assert.notStrictEqual(actual, object);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n\n      lodashStable.each(arrayViews, function(type) {\n        QUnit.test('`_.' + methodName + '` should clone ' + type + ' values', function(assert) {\n          assert.expect(10);\n\n          var Ctor = root[type];\n\n          lodashStable.times(2, function(index) {\n            if (Ctor) {\n              var buffer = new ArrayBuffer(24),\n                  view = index ? new Ctor(buffer, 8, 1) : new Ctor(buffer),\n                  actual = func(view);\n\n              assert.deepEqual(actual, view);\n              assert.notStrictEqual(actual, view);\n              assert.strictEqual(actual.buffer === view.buffer, !isDeep);\n              assert.strictEqual(actual.byteOffset, view.byteOffset);\n              assert.strictEqual(actual.length, view.length);\n            }\n            else {\n              skipAssert(assert, 5);\n            }\n          });\n        });\n      });\n\n      lodashStable.forOwn(uncloneable, function(value, key) {\n        QUnit.test('`_.' + methodName + '` should not clone ' + key, function(assert) {\n          assert.expect(3);\n\n          if (value) {\n            var object = { 'a': value, 'b': { 'c': value } },\n                actual = func(object),\n                expected = value === Foo ? { 'c': Foo.c } : {};\n\n            assert.deepEqual(actual, object);\n            assert.notStrictEqual(actual, object);\n            assert.deepEqual(func(value), expected);\n          }\n          else {\n            skipAssert(assert, 3);\n          }\n        });\n      });\n    });\n\n    lodashStable.each(['cloneWith', 'cloneDeepWith'], function(methodName) {\n      var func = _[methodName],\n          isDeep = methodName == 'cloneDeepWith';\n\n      QUnit.test('`_.' + methodName + '` should provide correct `customizer` arguments', function(assert) {\n        assert.expect(1);\n\n        var argsList = [],\n            object = new Foo;\n\n        func(object, function() {\n          var length = arguments.length,\n              args = slice.call(arguments, 0, length - (length > 1 ? 1 : 0));\n\n          argsList.push(args);\n        });\n\n        assert.deepEqual(argsList, isDeep ? [[object], [1, 'a', object]] : [[object]]);\n      });\n\n      QUnit.test('`_.' + methodName + '` should handle cloning when `customizer` returns `undefined`', function(assert) {\n        assert.expect(1);\n\n        var actual = func({ 'a': { 'b': 'c' } }, noop);\n        assert.deepEqual(actual, { 'a': { 'b': 'c' } });\n      });\n\n      lodashStable.forOwn(uncloneable, function(value, key) {\n        QUnit.test('`_.' + methodName + '` should work with a `customizer` callback and ' + key, function(assert) {\n          assert.expect(3);\n\n          var customizer = function(value) {\n            return lodashStable.isPlainObject(value) ? undefined : value;\n          };\n\n          var actual = func(value, customizer);\n          assert.strictEqual(actual, value);\n\n          var object = { 'a': value, 'b': { 'c': value } };\n          actual = func(object, customizer);\n\n          assert.deepEqual(actual, object);\n          assert.notStrictEqual(actual, object);\n        });\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.compact');\n\n  (function() {\n    var largeArray = lodashStable.range(LARGE_ARRAY_SIZE).concat(null);\n\n    QUnit.test('should filter falsey values', function(assert) {\n      assert.expect(1);\n\n      var array = ['0', '1', '2'];\n      assert.deepEqual(_.compact(falsey.concat(array)), array);\n    });\n\n    QUnit.test('should work when in-between lazy operators', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var actual = _(falsey).thru(_.slice).compact().thru(_.slice).value();\n        assert.deepEqual(actual, []);\n\n        actual = _(falsey).thru(_.slice).push(true, 1).compact().push('a').value();\n        assert.deepEqual(actual, [true, 1, 'a']);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _(largeArray).slice(1).compact().reverse().take().value();\n        assert.deepEqual(actual, _.take(_.compact(_.slice(largeArray, 1)).reverse()));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence with a custom `_.iteratee`', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var iteratee = _.iteratee,\n            pass = false;\n\n        _.iteratee = identity;\n\n        try {\n          var actual = _(largeArray).slice(1).compact().value();\n          pass = lodashStable.isEqual(actual, _.compact(_.slice(largeArray, 1)));\n        } catch (e) {console.log(e);}\n\n        assert.ok(pass);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.concat');\n\n  (function() {\n    QUnit.test('should shallow clone `array`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = _.concat(array);\n\n      assert.deepEqual(actual, array);\n      assert.notStrictEqual(actual, array);\n    });\n\n    QUnit.test('should concat arrays and values', function(assert) {\n      assert.expect(2);\n\n      var array = [1],\n          actual = _.concat(array, 2, [3], [[4]]);\n\n      assert.deepEqual(actual, [1, 2, 3, [4]]);\n      assert.deepEqual(array, [1]);\n    });\n\n    QUnit.test('should cast non-array `array` values to arrays', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined, false, true, 1, NaN, 'a'];\n\n      var expected = lodashStable.map(values, function(value, index) {\n        return index ? [value] : [];\n      });\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.concat(value) : _.concat();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(values, function(value) {\n        return [value, 2, [3]];\n      });\n\n      actual = lodashStable.map(values, function(value) {\n        return _.concat(value, [2], [[3]]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat sparse arrays as dense', function(assert) {\n      assert.expect(3);\n\n      var expected = [],\n          actual = _.concat(Array(1), Array(1));\n\n      expected.push(undefined, undefined);\n\n      assert.ok('0'in actual);\n      assert.ok('1' in actual);\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return a new wrapped array', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = [1],\n            wrapped = _(array).concat([2, 3]),\n            actual = wrapped.value();\n\n        assert.deepEqual(array, [1]);\n        assert.deepEqual(actual, [1, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.cond');\n\n  (function() {\n    QUnit.test('should create a conditional function', function(assert) {\n      assert.expect(3);\n\n      var cond = _.cond([\n        [lodashStable.matches({ 'a': 1 }),     stubA],\n        [lodashStable.matchesProperty('b', 1), stubB],\n        [lodashStable.property('c'),           stubC]\n      ]);\n\n      assert.strictEqual(cond({ 'a':  1, 'b': 2, 'c': 3 }), 'a');\n      assert.strictEqual(cond({ 'a':  0, 'b': 1, 'c': 2 }), 'b');\n      assert.strictEqual(cond({ 'a': -1, 'b': 0, 'c': 1 }), 'c');\n    });\n\n    QUnit.test('should provide arguments to functions', function(assert) {\n      assert.expect(2);\n\n      var args1,\n          args2,\n          expected = ['a', 'b', 'c'];\n\n      var cond = _.cond([[\n        function() { args1 || (args1 = slice.call(arguments)); return true; },\n        function() { args2 || (args2 = slice.call(arguments)); }\n      ]]);\n\n      cond('a', 'b', 'c');\n\n      assert.deepEqual(args1, expected);\n      assert.deepEqual(args2, expected);\n    });\n\n    QUnit.test('should work with predicate shorthands', function(assert) {\n      assert.expect(3);\n\n      var cond = _.cond([\n        [{ 'a': 1 }, stubA],\n        [['b', 1],   stubB],\n        ['c',        stubC]\n      ]);\n\n      assert.strictEqual(cond({ 'a':  1, 'b': 2, 'c': 3 }), 'a');\n      assert.strictEqual(cond({ 'a':  0, 'b': 1, 'c': 2 }), 'b');\n      assert.strictEqual(cond({ 'a': -1, 'b': 0, 'c': 1 }), 'c');\n    });\n\n    QUnit.test('should return `undefined` when no condition is met', function(assert) {\n      assert.expect(1);\n\n      var cond = _.cond([[stubFalse, stubA]]);\n      assert.strictEqual(cond({ 'a': 1 }), undefined);\n    });\n\n    QUnit.test('should throw a TypeError if `pairs` is not composed of functions', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([false, true], function(value) {\n        assert.raises(function() { _.cond([[stubTrue, value]])(); }, TypeError);\n      });\n    });\n\n    QUnit.test('should use `this` binding of function for `pairs`', function(assert) {\n      assert.expect(1);\n\n      var cond = _.cond([\n        [function(a) { return this[a]; }, function(a, b) { return this[b]; }]\n      ]);\n\n      var object = { 'cond': cond, 'a': 1, 'b': 2 };\n      assert.strictEqual(object.cond('a', 'b'), 2);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.conforms');\n\n  (function() {\n    QUnit.test('should not change behavior if `source` is modified', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 2 },\n          source = { 'a': function(value) { return value > 1; } },\n          par = _.conforms(source);\n\n      assert.strictEqual(par(object), true);\n\n      source.a = function(value) { return value < 2; };\n      assert.strictEqual(par(object), true);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('conforms methods');\n\n  lodashStable.each(['conforms', 'conformsTo'], function(methodName) {\n    var isConforms = methodName == 'conforms';\n\n    function conforms(source) {\n      return isConforms ? _.conforms(source) : function(object) {\n        return _.conformsTo(object, source);\n      };\n    }\n\n    QUnit.test('`_.' + methodName + '` should check if `object` conforms to `source`', function(assert) {\n      assert.expect(2);\n\n      var objects = [\n        { 'a': 1, 'b': 8 },\n        { 'a': 2, 'b': 4 },\n        { 'a': 3, 'b': 16 }\n      ];\n\n      var par = conforms({\n        'b': function(value) { return value > 4; }\n      });\n\n      var actual = lodashStable.filter(objects, par);\n      assert.deepEqual(actual, [objects[0], objects[2]]);\n\n      par = conforms({\n        'b': function(value) { return value > 8; },\n        'a': function(value) { return value > 1; }\n      });\n\n      actual = lodashStable.filter(objects, par);\n      assert.deepEqual(actual, [objects[2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not match by inherited `source` properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = function(value) {\n          return value > 1;\n        };\n      }\n      Foo.prototype.b = function(value) {\n        return value > 8;\n      };\n\n      var objects = [\n        { 'a': 1, 'b': 8 },\n        { 'a': 2, 'b': 4 },\n        { 'a': 3, 'b': 16 }\n      ];\n\n      var par = conforms(new Foo),\n          actual = lodashStable.filter(objects, par);\n\n      assert.deepEqual(actual, [objects[1], objects[2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not invoke `source` predicates for missing `object` properties', function(assert) {\n      assert.expect(2);\n\n      var count = 0;\n\n      var par = conforms({\n        'a': function() { count++; return true; }\n      });\n\n      assert.strictEqual(par({}), false);\n      assert.strictEqual(count, 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a function for `object`', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.a = 1;\n\n      function Bar() {}\n      Bar.a = 2;\n\n      var par = conforms({\n        'a': function(value) { return value > 1; }\n      });\n\n      assert.strictEqual(par(Foo), false);\n      assert.strictEqual(par(Bar), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a function for `source`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.a = function(value) { return value > 1; };\n\n      var objects = [{ 'a': 1 }, { 'a': 2 }],\n          actual = lodashStable.filter(objects, conforms(Foo));\n\n      assert.deepEqual(actual, [objects[1]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a non-plain `object`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var par = conforms({\n        'b': function(value) { return value > 1; }\n      });\n\n      assert.strictEqual(par(new Foo), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` when `object` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      var par = conforms({\n        'a': function(value) { return value > 1; }\n      });\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? par(value) : par();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing an empty `source` to a nullish `object`', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubTrue),\n          par = conforms({});\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? par(value) : par();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing an empty `source`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1 },\n          expected = lodashStable.map(empties, stubTrue);\n\n      var actual = lodashStable.map(empties, function(value) {\n        var par = conforms(value);\n        return par(object);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.constant');\n\n  (function() {\n    QUnit.test('should create a function that returns `value`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1 },\n          values = Array(2).concat(empties, true, 1, 'a'),\n          constant = _.constant(object);\n\n      var results = lodashStable.map(values, function(value, index) {\n        if (index < 2) {\n          return index ? constant.call({}) : constant();\n        }\n        return constant(value);\n      });\n\n      assert.ok(lodashStable.every(results, function(result) {\n        return result === object;\n      }));\n    });\n\n    QUnit.test('should work with falsey values', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubTrue);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        var constant = index ? _.constant(value) : _.constant(),\n            result = constant();\n\n        return (result === value) || (result !== result && value !== value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(true).constant();\n        assert.ok(wrapped instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.countBy');\n\n  (function() {\n    var array = [6.1, 4.2, 6.3];\n\n    QUnit.test('should transform keys by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.countBy(array, Math.floor);\n      assert.deepEqual(actual, { '4': 1, '6': 2 });\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [4, 6, 6],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '4': 1, '6':  2 }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.countBy(array, value) : _.countBy(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = _.countBy(['one', 'two', 'three'], 'length');\n      assert.deepEqual(actual, { '3': 2, '5': 1 });\n    });\n\n    QUnit.test('should only add values to own, not inherited, properties', function(assert) {\n      assert.expect(2);\n\n      var actual = _.countBy(array, function(n) {\n        return Math.floor(n) > 4 ? 'hasOwnProperty' : 'constructor';\n      });\n\n      assert.deepEqual(actual.constructor, 1);\n      assert.deepEqual(actual.hasOwnProperty, 2);\n    });\n\n    QUnit.test('should work with a number for `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var array = [\n        [1, 'a'],\n        [2, 'a'],\n        [2, 'b']\n      ];\n\n      assert.deepEqual(_.countBy(array, 0), { '1': 1, '2': 2 });\n      assert.deepEqual(_.countBy(array, 1), { 'a': 2, 'b': 1 });\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.countBy({ 'a': 6.1, 'b': 4.2, 'c': 6.3 }, Math.floor);\n      assert.deepEqual(actual, { '4': 1, '6': 2 });\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE).concat(\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 2), LARGE_ARRAY_SIZE),\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 1.5), LARGE_ARRAY_SIZE)\n        );\n\n        var actual = _(array).countBy().map(square).filter(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(_.map(_.countBy(array), square), isEven)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.create');\n\n  (function() {\n    function Shape() {\n      this.x = 0;\n      this.y = 0;\n    }\n\n    function Circle() {\n      Shape.call(this);\n    }\n\n    QUnit.test('should create an object that inherits from the given `prototype` object', function(assert) {\n      assert.expect(3);\n\n      Circle.prototype = _.create(Shape.prototype);\n      Circle.prototype.constructor = Circle;\n\n      var actual = new Circle;\n\n      assert.ok(actual instanceof Circle);\n      assert.ok(actual instanceof Shape);\n      assert.notStrictEqual(Circle.prototype, Shape.prototype);\n    });\n\n    QUnit.test('should assign `properties` to the created object', function(assert) {\n      assert.expect(3);\n\n      var expected = { 'constructor': Circle, 'radius': 0 };\n      Circle.prototype = _.create(Shape.prototype, expected);\n\n      var actual = new Circle;\n\n      assert.ok(actual instanceof Circle);\n      assert.ok(actual instanceof Shape);\n      assert.deepEqual(Circle.prototype, expected);\n    });\n\n    QUnit.test('should assign own properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n        this.c = 3;\n      }\n      Foo.prototype.b = 2;\n\n      assert.deepEqual(_.create({}, new Foo), { 'a': 1, 'c': 3 });\n    });\n\n    QUnit.test('should assign properties that shadow those of `prototype`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      var object = _.create(new Foo, { 'a': 1 });\n      assert.deepEqual(lodashStable.keys(object), ['a']);\n    });\n\n    QUnit.test('should accept a falsey `prototype`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubObject);\n\n      var actual = lodashStable.map(falsey, function(prototype, index) {\n        return index ? _.create(prototype) : _.create();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ignore a primitive `prototype` and use an empty object instead', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(primitives, stubTrue);\n\n      var actual = lodashStable.map(primitives, function(value, index) {\n        return lodashStable.isPlainObject(index ? _.create(value) : _.create());\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [{ 'a': 1 }, { 'a': 1 }, { 'a': 1 }],\n          expected = lodashStable.map(array, stubTrue),\n          objects = lodashStable.map(array, _.create);\n\n      var actual = lodashStable.map(objects, function(object) {\n        return object.a === 1 && !_.keys(object).length;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.curry');\n\n  (function() {\n    function fn(a, b, c, d) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should curry based on the number of arguments given', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curry(fn),\n          expected = [1, 2, 3, 4];\n\n      assert.deepEqual(curried(1)(2)(3)(4), expected);\n      assert.deepEqual(curried(1, 2)(3, 4), expected);\n      assert.deepEqual(curried(1, 2, 3, 4), expected);\n    });\n\n    QUnit.test('should allow specifying `arity`', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curry(fn, 3),\n          expected = [1, 2, 3];\n\n      assert.deepEqual(curried(1)(2, 3), expected);\n      assert.deepEqual(curried(1, 2)(3), expected);\n      assert.deepEqual(curried(1, 2, 3), expected);\n    });\n\n    QUnit.test('should coerce `arity` to an integer', function(assert) {\n      assert.expect(2);\n\n      var values = ['0', 0.6, 'xyz'],\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(arity) {\n        return _.curry(fn, arity)();\n      });\n\n      assert.deepEqual(actual, expected);\n      assert.deepEqual(_.curry(fn, '2')(1)(2), [1, 2]);\n    });\n\n    QUnit.test('should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var curried = _.curry(fn),\n          ph = curried.placeholder;\n\n      assert.deepEqual(curried(1)(ph, 3)(ph, 4)(2), [1, 2, 3, 4]);\n      assert.deepEqual(curried(ph, 2)(1)(ph, 4)(3), [1, 2, 3, 4]);\n      assert.deepEqual(curried(ph, ph, 3)(ph, 2)(ph, 4)(1), [1, 2, 3, 4]);\n      assert.deepEqual(curried(ph, ph, ph, 4)(ph, ph, 3)(ph, 2)(1), [1, 2, 3, 4]);\n    });\n\n    QUnit.test('should persist placeholders', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curry(fn),\n          ph = curried.placeholder,\n          actual = curried(ph, ph, ph, 'd')('a')(ph)('b')('c');\n\n      assert.deepEqual(actual, ['a', 'b', 'c', 'd']);\n    });\n\n    QUnit.test('should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var curried = _.curry(fn),\n            _ph = _.placeholder = {},\n            ph = curried.placeholder;\n\n        assert.deepEqual(curried(1)(_ph, 3)(ph, 4), [1, ph, 3, 4]);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should provide additional arguments after reaching the target arity', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curry(fn, 3);\n      assert.deepEqual(curried(1)(2, 3, 4), [1, 2, 3, 4]);\n      assert.deepEqual(curried(1, 2)(3, 4, 5), [1, 2, 3, 4, 5]);\n      assert.deepEqual(curried(1, 2, 3, 4, 5, 6), [1, 2, 3, 4, 5, 6]);\n    });\n\n    QUnit.test('should create a function with a `length` of `0`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.times(2, function(index) {\n        var curried = index ? _.curry(fn, 4) : _.curry(fn);\n        assert.strictEqual(curried.length, 0);\n        assert.strictEqual(curried(1).length, 0);\n        assert.strictEqual(curried(1, 2).length, 0);\n      });\n    });\n\n    QUnit.test('should ensure `new curried` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var curried = _.curry(Foo),\n          object = {};\n\n      assert.ok(new curried(false) instanceof Foo);\n      assert.strictEqual(new curried(true), object);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(9);\n\n      var fn = function(a, b, c) {\n        var value = this || {};\n        return [value[a], value[b], value[c]];\n      };\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          expected = [1, 2, 3];\n\n      assert.deepEqual(_.curry(_.bind(fn, object), 3)('a')('b')('c'), expected);\n      assert.deepEqual(_.curry(_.bind(fn, object), 3)('a', 'b')('c'), expected);\n      assert.deepEqual(_.curry(_.bind(fn, object), 3)('a', 'b', 'c'), expected);\n\n      assert.deepEqual(_.bind(_.curry(fn), object)('a')('b')('c'), Array(3));\n      assert.deepEqual(_.bind(_.curry(fn), object)('a', 'b')('c'), Array(3));\n      assert.deepEqual(_.bind(_.curry(fn), object)('a', 'b', 'c'), expected);\n\n      object.curried = _.curry(fn);\n      assert.deepEqual(object.curried('a')('b')('c'), Array(3));\n      assert.deepEqual(object.curried('a', 'b')('c'), Array(3));\n      assert.deepEqual(object.curried('a', 'b', 'c'), expected);\n    });\n\n    QUnit.test('should work with partialed methods', function(assert) {\n      assert.expect(2);\n\n      var curried = _.curry(fn),\n          expected = [1, 2, 3, 4];\n\n      var a = _.partial(curried, 1),\n          b = _.bind(a, null, 2),\n          c = _.partialRight(b, 4),\n          d = _.partialRight(b(3), 4);\n\n      assert.deepEqual(c(3), expected);\n      assert.deepEqual(d(), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.curryRight');\n\n  (function() {\n    function fn(a, b, c, d) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should curry based on the number of arguments given', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curryRight(fn),\n          expected = [1, 2, 3, 4];\n\n      assert.deepEqual(curried(4)(3)(2)(1), expected);\n      assert.deepEqual(curried(3, 4)(1, 2), expected);\n      assert.deepEqual(curried(1, 2, 3, 4), expected);\n    });\n\n    QUnit.test('should allow specifying `arity`', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curryRight(fn, 3),\n          expected = [1, 2, 3];\n\n      assert.deepEqual(curried(3)(1, 2), expected);\n      assert.deepEqual(curried(2, 3)(1), expected);\n      assert.deepEqual(curried(1, 2, 3), expected);\n    });\n\n    QUnit.test('should coerce `arity` to an integer', function(assert) {\n      assert.expect(2);\n\n      var values = ['0', 0.6, 'xyz'],\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(arity) {\n        return _.curryRight(fn, arity)();\n      });\n\n      assert.deepEqual(actual, expected);\n      assert.deepEqual(_.curryRight(fn, '2')(1)(2), [2, 1]);\n    });\n\n    QUnit.test('should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var curried = _.curryRight(fn),\n          expected = [1, 2, 3, 4],\n          ph = curried.placeholder;\n\n      assert.deepEqual(curried(4)(2, ph)(1, ph)(3), expected);\n      assert.deepEqual(curried(3, ph)(4)(1, ph)(2), expected);\n      assert.deepEqual(curried(ph, ph, 4)(ph, 3)(ph, 2)(1), expected);\n      assert.deepEqual(curried(ph, ph, ph, 4)(ph, ph, 3)(ph, 2)(1), expected);\n    });\n\n    QUnit.test('should persist placeholders', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curryRight(fn),\n          ph = curried.placeholder,\n          actual = curried('a', ph, ph, ph)('b')(ph)('c')('d');\n\n      assert.deepEqual(actual, ['a', 'b', 'c', 'd']);\n    });\n\n    QUnit.test('should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var curried = _.curryRight(fn),\n            _ph = _.placeholder = {},\n            ph = curried.placeholder;\n\n        assert.deepEqual(curried(4)(2, _ph)(1, ph), [1, 2, ph, 4]);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should provide additional arguments after reaching the target arity', function(assert) {\n      assert.expect(3);\n\n      var curried = _.curryRight(fn, 3);\n      assert.deepEqual(curried(4)(1, 2, 3), [1, 2, 3, 4]);\n      assert.deepEqual(curried(4, 5)(1, 2, 3), [1, 2, 3, 4, 5]);\n      assert.deepEqual(curried(1, 2, 3, 4, 5, 6), [1, 2, 3, 4, 5, 6]);\n    });\n\n    QUnit.test('should create a function with a `length` of `0`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.times(2, function(index) {\n        var curried = index ? _.curryRight(fn, 4) : _.curryRight(fn);\n        assert.strictEqual(curried.length, 0);\n        assert.strictEqual(curried(4).length, 0);\n        assert.strictEqual(curried(3, 4).length, 0);\n      });\n    });\n\n    QUnit.test('should ensure `new curried` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var curried = _.curryRight(Foo),\n          object = {};\n\n      assert.ok(new curried(false) instanceof Foo);\n      assert.strictEqual(new curried(true), object);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(9);\n\n      var fn = function(a, b, c) {\n        var value = this || {};\n        return [value[a], value[b], value[c]];\n      };\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          expected = [1, 2, 3];\n\n      assert.deepEqual(_.curryRight(_.bind(fn, object), 3)('c')('b')('a'), expected);\n      assert.deepEqual(_.curryRight(_.bind(fn, object), 3)('b', 'c')('a'), expected);\n      assert.deepEqual(_.curryRight(_.bind(fn, object), 3)('a', 'b', 'c'), expected);\n\n      assert.deepEqual(_.bind(_.curryRight(fn), object)('c')('b')('a'), Array(3));\n      assert.deepEqual(_.bind(_.curryRight(fn), object)('b', 'c')('a'), Array(3));\n      assert.deepEqual(_.bind(_.curryRight(fn), object)('a', 'b', 'c'), expected);\n\n      object.curried = _.curryRight(fn);\n      assert.deepEqual(object.curried('c')('b')('a'), Array(3));\n      assert.deepEqual(object.curried('b', 'c')('a'), Array(3));\n      assert.deepEqual(object.curried('a', 'b', 'c'), expected);\n    });\n\n    QUnit.test('should work with partialed methods', function(assert) {\n      assert.expect(2);\n\n      var curried = _.curryRight(fn),\n          expected = [1, 2, 3, 4];\n\n      var a = _.partialRight(curried, 4),\n          b = _.partialRight(a, 3),\n          c = _.bind(b, null, 1),\n          d = _.partial(b(2), 1);\n\n      assert.deepEqual(c(2), expected);\n      assert.deepEqual(d(), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('curry methods');\n\n  lodashStable.each(['curry', 'curryRight'], function(methodName) {\n    var func = _[methodName],\n        fn = function(a, b) { return slice.call(arguments); },\n        isCurry = methodName == 'curry';\n\n    QUnit.test('`_.' + methodName + '` should not error on functions with the same name as lodash methods', function(assert) {\n      assert.expect(1);\n\n      function run(a, b) {\n        return a + b;\n      }\n\n      var curried = func(run);\n\n      try {\n        var actual = curried(1)(2);\n      } catch (e) {}\n\n      assert.strictEqual(actual, 3);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work for function names that shadow those on `Object.prototype`', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curry(function hasOwnProperty(a, b, c) {\n        return [a, b, c];\n      });\n\n      var expected = [1, 2, 3];\n\n      assert.deepEqual(curried(1)(2)(3), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(2);\n\n      var array = [fn, fn, fn],\n          object = { 'a': fn, 'b': fn, 'c': fn };\n\n      lodashStable.each([array, object], function(collection) {\n        var curries = lodashStable.map(collection, func),\n            expected = lodashStable.map(collection, lodashStable.constant(isCurry ? ['a', 'b'] : ['b', 'a']));\n\n        var actual = lodashStable.map(curries, function(curried) {\n          return curried('a')('b');\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.debounce');\n\n  (function() {\n    QUnit.test('should debounce a function', function(assert) {\n      assert.expect(6);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var debounced = _.debounce(function(value) {\n        ++callCount;\n        return value;\n      }, 32);\n\n      var results = [debounced('a'), debounced('b'), debounced('c')];\n      assert.deepEqual(results, [undefined, undefined, undefined]);\n      assert.strictEqual(callCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n\n        var results = [debounced('d'), debounced('e'), debounced('f')];\n        assert.deepEqual(results, ['c', 'c', 'c']);\n        assert.strictEqual(callCount, 1);\n      }, 128);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 256);\n    });\n\n    QUnit.test('subsequent debounced calls return the last `func` result', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var debounced = _.debounce(identity, 32);\n      debounced('a');\n\n      setTimeout(function() {\n        assert.notEqual(debounced('b'), 'b');\n      }, 64);\n\n      setTimeout(function() {\n        assert.notEqual(debounced('c'), 'c');\n        done();\n      }, 128);\n    });\n\n    QUnit.test('should not immediately call `func` when `wait` is `0`', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          debounced = _.debounce(function() { ++callCount; }, 0);\n\n      debounced();\n      debounced();\n      assert.strictEqual(callCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        done();\n      }, 5);\n    });\n\n    QUnit.test('should apply default options', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          debounced = _.debounce(function() { callCount++; }, 32, {});\n\n      debounced();\n      assert.strictEqual(callCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should support a `leading` option', function(assert) {\n      assert.expect(4);\n\n      var done = assert.async();\n\n      var callCounts = [0, 0];\n\n      var withLeading = _.debounce(function() {\n        callCounts[0]++;\n      }, 32, { 'leading': true });\n\n      var withLeadingAndTrailing = _.debounce(function() {\n        callCounts[1]++;\n      }, 32, { 'leading': true });\n\n      withLeading();\n      assert.strictEqual(callCounts[0], 1);\n\n      withLeadingAndTrailing();\n      withLeadingAndTrailing();\n      assert.strictEqual(callCounts[1], 1);\n\n      setTimeout(function() {\n        assert.deepEqual(callCounts, [1, 2]);\n\n        withLeading();\n        assert.strictEqual(callCounts[0], 2);\n\n        done();\n      }, 64);\n    });\n\n    QUnit.test('subsequent leading debounced calls return the last `func` result', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var debounced = _.debounce(identity, 32, { 'leading': true, 'trailing': false }),\n          results = [debounced('a'), debounced('b')];\n\n      assert.deepEqual(results, ['a', 'a']);\n\n      setTimeout(function() {\n        var results = [debounced('c'), debounced('d')];\n        assert.deepEqual(results, ['c', 'c']);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should support a `trailing` option', function(assert) {\n      assert.expect(4);\n\n      var done = assert.async();\n\n      var withCount = 0,\n          withoutCount = 0;\n\n      var withTrailing = _.debounce(function() {\n        withCount++;\n      }, 32, { 'trailing': true });\n\n      var withoutTrailing = _.debounce(function() {\n        withoutCount++;\n      }, 32, { 'trailing': false });\n\n      withTrailing();\n      assert.strictEqual(withCount, 0);\n\n      withoutTrailing();\n      assert.strictEqual(withoutCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(withCount, 1);\n        assert.strictEqual(withoutCount, 0);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should support a `maxWait` option', function(assert) {\n      assert.expect(4);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var debounced = _.debounce(function(value) {\n        ++callCount;\n        return value;\n      }, 32, { 'maxWait': 64 });\n\n      debounced();\n      debounced();\n      assert.strictEqual(callCount, 0);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        debounced();\n        debounced();\n        assert.strictEqual(callCount, 1);\n      }, 128);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 256);\n    });\n\n    QUnit.test('should support `maxWait` in a tight loop', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var limit = (argv || isPhantom) ? 1000 : 320,\n          withCount = 0,\n          withoutCount = 0;\n\n      var withMaxWait = _.debounce(function() {\n        withCount++;\n      }, 64, { 'maxWait': 128 });\n\n      var withoutMaxWait = _.debounce(function() {\n        withoutCount++;\n      }, 96);\n\n      var start = +new Date;\n      while ((new Date - start) < limit) {\n        withMaxWait();\n        withoutMaxWait();\n      }\n      var actual = [Boolean(withoutCount), Boolean(withCount)];\n      setTimeout(function() {\n        assert.deepEqual(actual, [false, true]);\n        done();\n      }, 1);\n    });\n\n    QUnit.test('should queue a trailing call for subsequent debounced calls after `maxWait`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var debounced = _.debounce(function() {\n        ++callCount;\n      }, 200, { 'maxWait': 200 });\n\n      debounced();\n\n      setTimeout(debounced, 190);\n      setTimeout(debounced, 200);\n      setTimeout(debounced, 210);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 500);\n    });\n\n    QUnit.test('should cancel `maxDelayed` when `delayed` is invoked', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var debounced = _.debounce(function() {\n        callCount++;\n      }, 32, { 'maxWait': 64 });\n\n      debounced();\n\n      setTimeout(function() {\n        debounced();\n        assert.strictEqual(callCount, 1);\n      }, 128);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 192);\n    });\n\n    QUnit.test('should invoke the trailing call with the correct arguments and `this` binding', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var actual,\n          callCount = 0,\n          object = {};\n\n      var debounced = _.debounce(function(value) {\n        actual = [this];\n        push.apply(actual, arguments);\n        return ++callCount != 2;\n      }, 32, { 'leading': true, 'maxWait': 64 });\n\n      while (true) {\n        if (!debounced.call(object, 'a')) {\n          break;\n        }\n      }\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        assert.deepEqual(actual, [object, 'a']);\n        done();\n      }, 64);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.deburr');\n\n  (function() {\n    QUnit.test('should convert Latin Unicode letters to basic Latin', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(burredLetters, _.deburr);\n      assert.deepEqual(actual, deburredLetters);\n    });\n\n    QUnit.test('should not deburr Latin mathematical operators', function(assert) {\n      assert.expect(1);\n\n      var operators = ['\\xd7', '\\xf7'],\n          actual = lodashStable.map(operators, _.deburr);\n\n      assert.deepEqual(actual, operators);\n    });\n\n    QUnit.test('should deburr combining diacritical marks', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(comboMarks, lodashStable.constant('ei'));\n\n      var actual = lodashStable.map(comboMarks, function(chr) {\n        return _.deburr('e' + chr + 'i');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.defaults');\n\n  (function() {\n    QUnit.test('should assign source properties if missing on `object`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.defaults({ 'a': 1 }, { 'a': 2, 'b': 2 });\n      assert.deepEqual(actual, { 'a': 1, 'b': 2 });\n    });\n\n    QUnit.test('should accept multiple sources', function(assert) {\n      assert.expect(2);\n\n      var expected = { 'a': 1, 'b': 2, 'c': 3 },\n          actual = _.defaults({ 'a': 1, 'b': 2 }, { 'b': 3 }, { 'c': 3 });\n\n      assert.deepEqual(actual, expected);\n\n      actual = _.defaults({ 'a': 1, 'b': 2 }, { 'b': 3, 'c': 3 }, { 'c': 2 });\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not overwrite `null` values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.defaults({ 'a': null }, { 'a': 1 });\n      assert.strictEqual(actual.a, null);\n    });\n\n    QUnit.test('should overwrite `undefined` values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.defaults({ 'a': undefined }, { 'a': 1 });\n      assert.strictEqual(actual.a, 1);\n    });\n\n    QUnit.test('should assign `undefined` values', function(assert) {\n      assert.expect(1);\n\n      var source = { 'a': undefined, 'b': 1 },\n          actual = _.defaults({}, source);\n\n      assert.deepEqual(actual, { 'a': undefined, 'b': 1 });\n    });\n\n    QUnit.test('should assign properties that shadow those on `Object.prototype`', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'constructor': objectProto.constructor,\n        'hasOwnProperty': objectProto.hasOwnProperty,\n        'isPrototypeOf': objectProto.isPrototypeOf,\n        'propertyIsEnumerable': objectProto.propertyIsEnumerable,\n        'toLocaleString': objectProto.toLocaleString,\n        'toString': objectProto.toString,\n        'valueOf': objectProto.valueOf\n      };\n\n      var source = {\n        'constructor': 1,\n        'hasOwnProperty': 2,\n        'isPrototypeOf': 3,\n        'propertyIsEnumerable': 4,\n        'toLocaleString': 5,\n        'toString': 6,\n        'valueOf': 7\n      };\n\n      var expected = lodashStable.clone(source);\n      assert.deepEqual(_.defaults({}, source), expected);\n\n      expected = lodashStable.clone(object);\n      assert.deepEqual(_.defaults({}, object, source), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.defaultsDeep');\n\n  (function() {\n    QUnit.test('should deep assign source properties if missing on `object`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': 2 }, 'd': 4 },\n          source = { 'a': { 'b': 3, 'c': 3 }, 'e': 5 },\n          expected = { 'a': { 'b': 2, 'c': 3 }, 'd': 4, 'e': 5 };\n\n      assert.deepEqual(_.defaultsDeep(object, source), expected);\n    });\n\n    QUnit.test('should accept multiple sources', function(assert) {\n      assert.expect(2);\n\n      var source1 = { 'a': { 'b': 3 } },\n          source2 = { 'a': { 'c': 3 } },\n          source3 = { 'a': { 'b': 3, 'c': 3 } },\n          source4 = { 'a': { 'c': 4 } },\n          expected = { 'a': { 'b': 2, 'c': 3 } };\n\n      assert.deepEqual(_.defaultsDeep({ 'a': { 'b': 2 } }, source1, source2), expected);\n      assert.deepEqual(_.defaultsDeep({ 'a': { 'b': 2 } }, source3, source4), expected);\n    });\n\n    QUnit.test('should not overwrite `null` values', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': null } },\n          source = { 'a': { 'b': 2 } },\n          actual = _.defaultsDeep(object, source);\n\n      assert.strictEqual(actual.a.b, null);\n    });\n\n    QUnit.test('should not overwrite regexp values', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': /x/ } },\n          source = { 'a': { 'b': /y/ } },\n          actual = _.defaultsDeep(object, source);\n\n      assert.deepEqual(actual.a.b, /x/);\n    });\n\n    QUnit.test('should not convert function properties to objects', function(assert) {\n      assert.expect(2);\n\n      var actual = _.defaultsDeep({}, { 'a': noop });\n      assert.strictEqual(actual.a, noop);\n\n      actual = _.defaultsDeep({}, { 'a': { 'b': noop } });\n      assert.strictEqual(actual.a.b, noop);\n    });\n\n    QUnit.test('should overwrite `undefined` values', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': undefined } },\n          source = { 'a': { 'b': 2 } },\n          actual = _.defaultsDeep(object, source);\n\n      assert.strictEqual(actual.a.b, 2);\n    });\n\n    QUnit.test('should assign `undefined` values', function(assert) {\n      assert.expect(1);\n\n      var source = { 'a': undefined, 'b': { 'c': undefined, 'd': 1 } },\n          expected = lodashStable.cloneDeep(source),\n          actual = _.defaultsDeep({}, source);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should merge sources containing circular references', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': { 'a': 2 }\n      };\n\n      var source = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': {}\n      };\n\n      object.foo.b.c.d = object;\n      source.foo.b.c.d = source;\n      source.bar.b = source.foo.b;\n\n      var actual = _.defaultsDeep(object, source);\n\n      assert.strictEqual(actual.bar.b, actual.foo.b);\n      assert.strictEqual(actual.foo.b.c.d, actual.foo.b.c.d.foo.b.c.d);\n    });\n\n    QUnit.test('should not modify sources', function(assert) {\n      assert.expect(3);\n\n      var source1 = { 'a': 1, 'b': { 'c': 2 } },\n          source2 = { 'b': { 'c': 3, 'd': 3 } },\n          actual = _.defaultsDeep({}, source1, source2);\n\n      assert.deepEqual(actual, { 'a': 1, 'b': { 'c': 2, 'd': 3 } });\n      assert.deepEqual(source1, { 'a': 1, 'b': { 'c': 2 } });\n      assert.deepEqual(source2, { 'b': { 'c': 3, 'd': 3 } });\n    });\n\n    QUnit.test('should not attempt a merge of a string into an array', function(assert) {\n      assert.expect(1);\n\n      var actual = _.defaultsDeep({ 'a': ['abc'] }, { 'a': 'abc' });\n      assert.deepEqual(actual.a, ['abc']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.defaultTo');\n\n  (function() {\n    QUnit.test('should return a default value if `value` is `NaN` or nullish', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return (value == null || value !== value) ? 1 : value;\n      });\n\n      var actual = lodashStable.map(falsey, function(value) {\n        return _.defaultTo(value, 1);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.defer');\n\n  (function() {\n    QUnit.test('should defer `func` execution', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var pass = false;\n      _.defer(function() { pass = true; });\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 32);\n    });\n\n    QUnit.test('should provide additional arguments to `func`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var args;\n\n      _.defer(function() {\n        args = slice.call(arguments);\n      }, 1, 2);\n\n      setTimeout(function() {\n        assert.deepEqual(args, [1, 2]);\n        done();\n      }, 32);\n    });\n\n    QUnit.test('should be cancelable', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var pass = true,\n          timerId = _.defer(function() { pass = false; });\n\n      clearTimeout(timerId);\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 32);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.delay');\n\n  (function() {\n    QUnit.test('should delay `func` execution', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var pass = false;\n      _.delay(function() { pass = true; }, 32);\n\n      setTimeout(function() {\n        assert.notOk(pass);\n      }, 1);\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should provide additional arguments to `func`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var args;\n\n      _.delay(function() {\n        args = slice.call(arguments);\n      }, 32, 1, 2);\n\n      setTimeout(function() {\n        assert.deepEqual(args, [1, 2]);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should use a default `wait` of `0`', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var pass = false;\n      _.delay(function() { pass = true; });\n\n      assert.notOk(pass);\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 0);\n    });\n\n    QUnit.test('should be cancelable', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var pass = true,\n          timerId = _.delay(function() { pass = false; }, 32);\n\n      clearTimeout(timerId);\n\n      setTimeout(function() {\n        assert.ok(pass);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should work with mocked `setTimeout`', function(assert) {\n      assert.expect(1);\n\n      if (!isPhantom) {\n        var pass = false,\n            setTimeout = root.setTimeout;\n\n        setProperty(root, 'setTimeout', function(func) { func(); });\n        _.delay(function() { pass = true; }, 32);\n        setProperty(root, 'setTimeout', setTimeout);\n\n        assert.ok(pass);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('difference methods');\n\n  lodashStable.each(['difference', 'differenceBy', 'differenceWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the difference of two arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1], [2, 3]);\n      assert.deepEqual(actual, [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the difference of multiple arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1, 2, 3], [3, 4], [3, 2]);\n      assert.deepEqual(actual, [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      var array = [-0, 0];\n\n      var actual = lodashStable.map(array, function(value) {\n        return func(array, [value]);\n      });\n\n      assert.deepEqual(actual, [[], []]);\n\n      actual = lodashStable.map(func([-0, 1], [1]), lodashStable.toString);\n      assert.deepEqual(actual, ['0']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func([1, NaN, 3], [NaN, 5, NaN]), [1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays', function(assert) {\n      assert.expect(1);\n\n      var array1 = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n          array2 = lodashStable.range(LARGE_ARRAY_SIZE),\n          a = {},\n          b = {},\n          c = {};\n\n      array1.push(a, b, c);\n      array2.push(b, c, a);\n\n      assert.deepEqual(func(array1, array2), [LARGE_ARRAY_SIZE]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      var array = [-0, 0];\n\n      var actual = lodashStable.map(array, function(value) {\n        var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(value));\n        return func(array, largeArray);\n      });\n\n      assert.deepEqual(actual, [[], []]);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubOne);\n      actual = lodashStable.map(func([-0, 1], largeArray), lodashStable.toString);\n      assert.deepEqual(actual, ['0']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `NaN`', function(assert) {\n      assert.expect(1);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubNaN);\n      assert.deepEqual(func([1, NaN, 3], largeArray), [1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of objects', function(assert) {\n      assert.expect(1);\n\n      var object1 = {},\n          object2 = {},\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(object1));\n\n      assert.deepEqual(func([object1, object2], largeArray), [object2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore values that are not array-like', function(assert) {\n      assert.expect(3);\n\n      var array = [1, null, 3];\n\n      assert.deepEqual(func(args, 3, { '0': 1 }), [1, 2, 3]);\n      assert.deepEqual(func(null, array, 1), []);\n      assert.deepEqual(func(array, args, null), [null]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.differenceBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n      assert.deepEqual(actual, [1.2]);\n\n      actual = _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 2 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.differenceBy([2.1, 1.2], [2.3, 3.4], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [2.3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.differenceWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],\n          actual = _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[1]]);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var array = [-0, 1],\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubOne),\n          others = [[1], largeArray],\n          expected = lodashStable.map(others, lodashStable.constant(['-0']));\n\n      var actual = lodashStable.map(others, function(other) {\n        return lodashStable.map(_.differenceWith(array, other, lodashStable.eq), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.divide');\n\n  (function() {\n    QUnit.test('should divide two numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.divide(6, 4), 1.5);\n      assert.strictEqual(_.divide(-6, 4), -1.5);\n      assert.strictEqual(_.divide(-6, -4), 1.5);\n    });\n\n    QUnit.test('should coerce arguments to numbers', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.divide('6', '4'), 1.5);\n      assert.deepEqual(_.divide('x', 'y'), NaN);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.drop');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should drop the first two elements', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.drop(array, 2), [3]);\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [2, 3] : array;\n      });\n\n      var actual = lodashStable.map(falsey, function(n) {\n        return _.drop(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return all elements when `n` < `1`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.drop(array, n), array);\n      });\n    });\n\n    QUnit.test('should return an empty array when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        assert.deepEqual(_.drop(array, n), []);\n      });\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.drop(array, 1.6), [2, 3]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.drop);\n\n      assert.deepEqual(actual, [[2, 3], [5, 6], [8, 9]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            actual = _(array).drop(2).drop().value();\n\n        assert.deepEqual(actual, array.slice(3));\n\n        actual = _(array).filter(predicate).drop(2).drop().value();\n        assert.deepEqual(values, array);\n        assert.deepEqual(actual, _.drop(_.drop(_.filter(array, predicate), 2)));\n\n        actual = _(array).drop(2).dropRight().drop().dropRight(2).value();\n        assert.deepEqual(actual, _.dropRight(_.drop(_.dropRight(_.drop(array, 2))), 2));\n\n        values = [];\n\n        actual = _(array).drop().filter(predicate).drop(2).dropRight().drop().dropRight(2).value();\n        assert.deepEqual(values, array.slice(1));\n        assert.deepEqual(actual, _.dropRight(_.drop(_.dropRight(_.drop(_.filter(_.drop(array), predicate), 2))), 2));\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.dropRight');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should drop the last two elements', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRight(array, 2), [1]);\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [1, 2] : array;\n      });\n\n      var actual = lodashStable.map(falsey, function(n) {\n        return _.dropRight(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return all elements when `n` < `1`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.dropRight(array, n), array);\n      });\n    });\n\n    QUnit.test('should return an empty array when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        assert.deepEqual(_.dropRight(array, n), []);\n      });\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRight(array, 1.6), [1, 2]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.dropRight);\n\n      assert.deepEqual(actual, [[1, 2], [4, 5], [7, 8]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            actual = _(array).dropRight(2).dropRight().value();\n\n        assert.deepEqual(actual, array.slice(0, -3));\n\n        actual = _(array).filter(predicate).dropRight(2).dropRight().value();\n        assert.deepEqual(values, array);\n        assert.deepEqual(actual, _.dropRight(_.dropRight(_.filter(array, predicate), 2)));\n\n        actual = _(array).dropRight(2).drop().dropRight().drop(2).value();\n        assert.deepEqual(actual, _.drop(_.dropRight(_.drop(_.dropRight(array, 2))), 2));\n\n        values = [];\n\n        actual = _(array).dropRight().filter(predicate).dropRight(2).drop().dropRight().drop(2).value();\n        assert.deepEqual(values, array.slice(0, -1));\n        assert.deepEqual(actual, _.drop(_.dropRight(_.drop(_.dropRight(_.filter(_.dropRight(array), predicate), 2))), 2));\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.dropRightWhile');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    var objects = [\n      { 'a': 0, 'b': 0 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 2, 'b': 2 }\n    ];\n\n    QUnit.test('should drop elements while `predicate` returns truthy', function(assert) {\n      assert.expect(1);\n\n      var actual = _.dropRightWhile(array, function(n) {\n        return n > 2;\n      });\n\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.dropRightWhile(array, function() {\n        args = slice.call(arguments);\n      });\n\n      assert.deepEqual(args, [4, 3, array]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRightWhile(objects, { 'b': 2 }), objects.slice(0, 2));\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRightWhile(objects, ['b', 2]), objects.slice(0, 2));\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropRightWhile(objects, 'b'), objects.slice(0, 1));\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array).dropRightWhile(function(n) {\n          return n > 2;\n        });\n\n        assert.ok(wrapped instanceof _);\n        assert.deepEqual(wrapped.value(), [1, 2]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.dropWhile');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    var objects = [\n      { 'a': 2, 'b': 2 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 0, 'b': 0 }\n    ];\n\n    QUnit.test('should drop elements while `predicate` returns truthy', function(assert) {\n      assert.expect(1);\n\n      var actual = _.dropWhile(array, function(n) {\n        return n < 3;\n      });\n\n      assert.deepEqual(actual, [3, 4]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.dropWhile(array, function() {\n        args = slice.call(arguments);\n      });\n\n      assert.deepEqual(args, [1, 0, array]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropWhile(objects, { 'b': 2 }), objects.slice(1));\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropWhile(objects, ['b', 2]), objects.slice(1));\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.dropWhile(objects, 'b'), objects.slice(2));\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 3),\n            predicate = function(n) { return n < 3; },\n            expected = _.dropWhile(array, predicate),\n            wrapped = _(array).dropWhile(predicate);\n\n        assert.deepEqual(wrapped.value(), expected);\n        assert.deepEqual(wrapped.reverse().value(), expected.slice().reverse());\n        assert.strictEqual(wrapped.last(), _.last(expected));\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence with `drop`', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 3);\n\n        var actual = _(array)\n          .dropWhile(function(n) { return n == 1; })\n          .drop()\n          .dropWhile(function(n) { return n == 3; })\n          .value();\n\n        assert.deepEqual(actual, array.slice(3));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.endsWith');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should return `true` if a string ends with `target`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.endsWith(string, 'c'), true);\n    });\n\n    QUnit.test('should return `false` if a string does not end with `target`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.endsWith(string, 'b'), false);\n    });\n\n    QUnit.test('should work with a `position`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.endsWith(string, 'b', 2), true);\n    });\n\n    QUnit.test('should work with `position` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 5, MAX_SAFE_INTEGER, Infinity], function(position) {\n        assert.strictEqual(_.endsWith(string, 'c', position), true);\n      });\n    });\n\n    QUnit.test('should treat falsey `position` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubTrue);\n\n      var actual = lodashStable.map(falsey, function(position) {\n        return _.endsWith(string, position === undefined ? 'c' : '', position);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat a negative `position` as `0`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each([-1, -3, -Infinity], function(position) {\n        assert.ok(lodashStable.every(string, function(chr) {\n          return !_.endsWith(string, chr, position);\n        }));\n        assert.strictEqual(_.endsWith(string, '', position), true);\n      });\n    });\n\n    QUnit.test('should coerce `position` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.endsWith(string, 'ab', 2.2), true);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.eq');\n\n  (function() {\n    QUnit.test('should perform a `SameValueZero` comparison of two values', function(assert) {\n      assert.expect(11);\n\n      assert.strictEqual(_.eq(), true);\n      assert.strictEqual(_.eq(undefined), true);\n      assert.strictEqual(_.eq(0, -0), true);\n      assert.strictEqual(_.eq(NaN, NaN), true);\n      assert.strictEqual(_.eq(1, 1), true);\n\n      assert.strictEqual(_.eq(null, undefined), false);\n      assert.strictEqual(_.eq(1, Object(1)), false);\n      assert.strictEqual(_.eq(1, '1'), false);\n      assert.strictEqual(_.eq(1, '1'), false);\n\n      var object = { 'a': 1 };\n      assert.strictEqual(_.eq(object, object), true);\n      assert.strictEqual(_.eq(object, { 'a': 1 }), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.escape');\n\n  (function() {\n    var escaped = '&amp;&lt;&gt;&quot;&#39;/',\n        unescaped = '&<>\"\\'/';\n\n    escaped += escaped;\n    unescaped += unescaped;\n\n    QUnit.test('should escape values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escape(unescaped), escaped);\n    });\n\n    QUnit.test('should handle strings with nothing to escape', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escape('abc'), 'abc');\n    });\n\n    QUnit.test('should escape the same characters unescaped by `_.unescape`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escape(_.unescape(escaped)), escaped);\n    });\n\n    lodashStable.each(['`', '/'], function(chr) {\n      QUnit.test('should not escape the \"' + chr + '\" character', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.escape(chr), chr);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.escapeRegExp');\n\n  (function() {\n    var escaped = '\\\\^\\\\$\\\\.\\\\*\\\\+\\\\?\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\\\\|\\\\\\\\',\n        unescaped = '^$.*+?()[]{}|\\\\';\n\n    QUnit.test('should escape values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escapeRegExp(unescaped + unescaped), escaped + escaped);\n    });\n\n    QUnit.test('should handle strings with nothing to escape', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.escapeRegExp('abc'), 'abc');\n    });\n\n    QUnit.test('should return an empty string for empty values', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined, ''],\n          expected = lodashStable.map(values, stubString);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.escapeRegExp(value) : _.escapeRegExp();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.every');\n\n  (function() {\n    QUnit.test('should return `true` if `predicate` returns truthy for all elements', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(lodashStable.every([true, 1, 'a'], identity), true);\n    });\n\n    QUnit.test('should return `true` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubTrue);\n\n      var actual = lodashStable.map(empties, function(value) {\n        try {\n          return _.every(value, identity);\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` as soon as `predicate` returns falsey', function(assert) {\n      assert.expect(2);\n\n      var count = 0;\n\n      assert.strictEqual(_.every([true, null, true], function(value) {\n        count++;\n        return value;\n      }), false);\n\n      assert.strictEqual(count, 2);\n    });\n\n    QUnit.test('should work with collections of `undefined` values (test in IE < 9)', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.every([undefined, undefined, undefined], identity), false);\n    });\n\n    QUnit.test('should use `_.identity` when `predicate` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var array = [0];\n        return index ? _.every(array, value) : _.every(array);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(values, stubTrue);\n      actual = lodashStable.map(values, function(value, index) {\n        var array = [1];\n        return index ? _.every(array, value) : _.every(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 0, 'b': 1 }, { 'a': 1, 'b': 2 }];\n      assert.strictEqual(_.every(objects, 'a'), false);\n      assert.strictEqual(_.every(objects, 'b'), true);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 0, 'b': 0 }, { 'a': 0, 'b': 1 }];\n      assert.strictEqual(_.every(objects, { 'a': 0 }), true);\n      assert.strictEqual(_.every(objects, { 'b': 1 }), false);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([[1]], _.every);\n      assert.deepEqual(actual, [true]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('strict mode checks');\n\n  lodashStable.each(['assign', 'assignIn', 'bindAll', 'defaults', 'defaultsDeep', 'merge'], function(methodName) {\n    var func = _[methodName],\n        isBindAll = methodName == 'bindAll';\n\n    QUnit.test('`_.' + methodName + '` should ' + (isStrict ? '' : 'not ') + 'throw strict mode errors', function(assert) {\n      assert.expect(1);\n\n      var object = freeze({ 'a': undefined, 'b': function() {} }),\n          pass = !isStrict;\n\n      try {\n        func(object, isBindAll ? 'b' : { 'a': 1 });\n      } catch (e) {\n        pass = !pass;\n      }\n      assert.ok(pass);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.fill');\n\n  (function() {\n    QUnit.test('should use a default `start` of `0` and a default `end` of `length`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a'), ['a', 'a', 'a']);\n    });\n\n    QUnit.test('should use `undefined` for `value` if not given', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = _.fill(array);\n\n      assert.deepEqual(actual, Array(3));\n      assert.ok(lodashStable.every(actual, function(value, index) {\n        return index in actual;\n      }));\n    });\n\n    QUnit.test('should work with a positive `start`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a', 1), [1, 'a', 'a']);\n    });\n\n    QUnit.test('should work with a `start` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(start) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', start), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should treat falsey `start` values as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, lodashStable.constant(['a', 'a', 'a']));\n\n      var actual = lodashStable.map(falsey, function(start) {\n        var array = [1, 2, 3];\n        return _.fill(array, 'a', start);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a negative `start`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a', -1), [1, 2, 'a']);\n    });\n\n    QUnit.test('should work with a negative `start` <= negative `length`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-3, -4, -Infinity], function(start) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', start), ['a', 'a', 'a']);\n      });\n    });\n\n    QUnit.test('should work with `start` >= `end`', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([2, 3], function(start) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', start, 2), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should work with a positive `end`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a', 0, 1), ['a', 2, 3]);\n    });\n\n    QUnit.test('should work with a `end` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(end) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', 0, end), ['a', 'a', 'a']);\n      });\n    });\n\n    QUnit.test('should treat falsey `end` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? ['a', 'a', 'a'] : [1, 2, 3];\n      });\n\n      var actual = lodashStable.map(falsey, function(end) {\n        var array = [1, 2, 3];\n        return _.fill(array, 'a', 0, end);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a negative `end`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a', 0, -1), ['a', 'a', 3]);\n    });\n\n    QUnit.test('should work with a negative `end` <= negative `length`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-3, -4, -Infinity], function(end) {\n        var array = [1, 2, 3];\n        assert.deepEqual(_.fill(array, 'a', 0, end), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should coerce `start` and `end` to integers', function(assert) {\n      assert.expect(1);\n\n      var positions = [[0.1, 1.6], ['0', 1], [0, '1'], ['1'], [NaN, 1], [1, NaN]];\n\n      var actual = lodashStable.map(positions, function(pos) {\n        var array = [1, 2, 3];\n        return _.fill.apply(_, [array, 'a'].concat(pos));\n      });\n\n      assert.deepEqual(actual, [['a', 2, 3], ['a', 2, 3], ['a', 2, 3], [1, 'a', 'a'], ['a', 2, 3], [1, 2, 3]]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2], [3, 4]],\n          actual = lodashStable.map(array, _.fill);\n\n      assert.deepEqual(actual, [[0, 0], [1, 1]]);\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var array = [1, 2, 3],\n            wrapped = _(array).fill('a'),\n            actual = wrapped.value();\n\n        assert.ok(wrapped instanceof _);\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, ['a', 'a', 'a']);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.filter');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return elements `predicate` returns truthy for', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.filter(array, isEven), [2]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  lodashStable.each(['find', 'findIndex', 'findKey', 'findLast', 'findLastIndex', 'findLastKey'], function(methodName) {\n    QUnit.module('lodash.' + methodName);\n\n    var array = [1, 2, 3, 4],\n        func = _[methodName];\n\n    var objects = [\n      { 'a': 0, 'b': 0 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 2, 'b': 2 }\n    ];\n\n    var expected = ({\n      'find': [objects[1], undefined, objects[2]],\n      'findIndex': [1, -1, 2],\n      'findKey': ['1', undefined, '2'],\n      'findLast': [objects[2], undefined, objects[2]],\n      'findLastIndex': [2, -1, 2],\n      'findLastKey': ['2', undefined, '2']\n    })[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the found value', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, function(object) { return object.a; }), expected[0]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `' + expected[1] + '` if value is not found', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, function(object) { return object.a === 3; }), expected[1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, { 'b': 2 }), expected[2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, ['b', 2]), expected[2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(objects, 'b'), expected[0]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `' + expected[1] + '` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var emptyValues = lodashStable.endsWith(methodName, 'Index') ? lodashStable.reject(empties, lodashStable.isPlainObject) : empties,\n          expecting = lodashStable.map(emptyValues, lodashStable.constant(expected[1]));\n\n      var actual = lodashStable.map(emptyValues, function(value) {\n        try {\n          return func(value, { 'a': 3 });\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expecting);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      var expected = ({\n        'find': 1,\n        'findIndex': 0,\n        'findKey': '0',\n        'findLast': 4,\n        'findLastIndex': 3,\n        'findLastKey': '3'\n      })[methodName];\n\n      if (!isNpm) {\n        assert.strictEqual(_(array)[methodName](), expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).chain()[methodName]() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should not execute immediately when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(array).chain()[methodName]();\n        assert.strictEqual(wrapped.__wrapped__, array);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work in a lazy sequence', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var largeArray = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            smallArray = array;\n\n        lodashStable.times(2, function(index) {\n          var array = index ? largeArray : smallArray,\n              wrapped = _(array).filter(isEven);\n\n          assert.strictEqual(wrapped[methodName](), func(lodashStable.filter(array, isEven)));\n        });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  });\n\n  _.each(['find', 'findIndex', 'findLast', 'findLastIndex'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should provide correct `predicate` arguments for arrays', function(assert) {\n      assert.expect(1);\n\n      var args,\n          array = ['a'];\n\n      func(array, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, ['a', 0, array]);\n    });\n  });\n\n  _.each(['find', 'findKey', 'findLast', 'findLastKey'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = func({ 'a': 1, 'b': 2, 'c': 3 }, function(n) {\n        return n < 3;\n      });\n\n      var expected = ({\n        'find': 1,\n        'findKey': 'a',\n        'findLast': 2,\n        'findLastKey': 'b'\n      })[methodName];\n\n      assert.strictEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should provide correct `predicate` arguments for objects', function(assert) {\n      assert.expect(1);\n\n      var args,\n          object = { 'a': 1 };\n\n      func(object, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [1, 'a', object]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.find and lodash.findLast');\n\n  lodashStable.each(['find', 'findLast'], function(methodName) {\n    var isFind = methodName == 'find';\n\n    QUnit.test('`_.' + methodName + '` should support shortcut fusion', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var findCount = 0,\n            mapCount = 0,\n            array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            iteratee = function(value) { mapCount++; return square(value); },\n            predicate = function(value) { findCount++; return isEven(value); },\n            actual = _(array).map(iteratee)[methodName](predicate);\n\n        assert.strictEqual(findCount, isFind ? 2 : 1);\n        assert.strictEqual(mapCount, isFind ? 2 : 1);\n        assert.strictEqual(actual, isFind ? 4 : square(LARGE_ARRAY_SIZE));\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.find and lodash.includes');\n\n  lodashStable.each(['includes', 'find'], function(methodName) {\n    var func = _[methodName],\n        isIncludes = methodName == 'includes',\n        resolve = methodName == 'find' ? lodashStable.curry(lodashStable.eq) : identity;\n\n    lodashStable.each({\n      'an `arguments` object': args,\n      'an array': [1, 2, 3]\n    },\n    function(collection, key) {\n      var values = lodashStable.toArray(collection);\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and a positive `fromIndex`', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          isIncludes || values[2],\n          isIncludes ? false : undefined\n        ];\n\n        var actual = [\n          func(collection, resolve(values[2]), 2),\n          func(collection, resolve(values[1]), 2)\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and a `fromIndex` >= `length`', function(assert) {\n        assert.expect(1);\n\n        var indexes = [4, 6, Math.pow(2, 32), Infinity];\n\n        var expected = lodashStable.map(indexes, function() {\n          var result = isIncludes ? false : undefined;\n          return [result, result, result];\n        });\n\n        var actual = lodashStable.map(indexes, function(fromIndex) {\n          return [\n            func(collection, resolve(1), fromIndex),\n            func(collection, resolve(undefined), fromIndex),\n            func(collection, resolve(''), fromIndex)\n          ];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and treat falsey `fromIndex` values as `0`', function(assert) {\n        assert.expect(1);\n\n        var expected = lodashStable.map(falsey, lodashStable.constant(isIncludes || values[0]));\n\n        var actual = lodashStable.map(falsey, function(fromIndex) {\n          return func(collection, resolve(values[0]), fromIndex);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and coerce `fromIndex` to an integer', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          isIncludes || values[0],\n          isIncludes || values[0],\n          isIncludes ? false : undefined\n        ];\n\n        var actual = [\n          func(collection, resolve(values[0]), 0.1),\n          func(collection, resolve(values[0]), NaN),\n          func(collection, resolve(values[0]), '1')\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and a negative `fromIndex`', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          isIncludes || values[2],\n          isIncludes ? false : undefined\n        ];\n\n        var actual = [\n          func(collection, resolve(values[2]), -1),\n          func(collection, resolve(values[1]), -1)\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' and a negative `fromIndex` <= `-length`', function(assert) {\n        assert.expect(1);\n\n        var indexes = [-4, -6, -Infinity],\n            expected = lodashStable.map(indexes, lodashStable.constant(isIncludes || values[0]));\n\n        var actual = lodashStable.map(indexes, function(fromIndex) {\n          return func(collection, resolve(values[0]), fromIndex);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.findIndex and lodash.indexOf');\n\n  lodashStable.each(['findIndex', 'indexOf'], function(methodName) {\n    var array = [1, 2, 3, 1, 2, 3],\n        func = _[methodName],\n        resolve = methodName == 'findIndex' ? lodashStable.curry(lodashStable.eq) : identity;\n\n    QUnit.test('`_.' + methodName + '` should return the index of the first matched value', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(3)), 2);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a positive `fromIndex`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(1), 2), 3);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `fromIndex` >= `length`', function(assert) {\n      assert.expect(1);\n\n      var values = [6, 8, Math.pow(2, 32), Infinity],\n          expected = lodashStable.map(values, lodashStable.constant([-1, -1, -1]));\n\n      var actual = lodashStable.map(values, function(fromIndex) {\n        return [\n          func(array, resolve(undefined), fromIndex),\n          func(array, resolve(1), fromIndex),\n          func(array, resolve(''), fromIndex)\n        ];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `fromIndex`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(2), -3), 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `fromIndex` <= `-length`', function(assert) {\n      assert.expect(1);\n\n      var values = [-6, -8, -Infinity],\n          expected = lodashStable.map(values, stubZero);\n\n      var actual = lodashStable.map(values, function(fromIndex) {\n        return func(array, resolve(1), fromIndex);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat falsey `fromIndex` values as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubZero);\n\n      var actual = lodashStable.map(falsey, function(fromIndex) {\n        return func(array, resolve(1), fromIndex);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `fromIndex` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(2), 1.2), 1);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.findLast');\n\n  (function() {\n    var resolve = lodashStable.curry(lodashStable.eq);\n\n    lodashStable.each({\n      'an `arguments` object': args,\n      'an array': [1, 2, 3]\n    },\n    function(collection, key) {\n      var values = lodashStable.toArray(collection);\n\n      QUnit.test('should work with ' + key + ' and a positive `fromIndex`', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          values[1],\n          undefined\n        ];\n\n        var actual = [\n          _.findLast(collection, resolve(values[1]), 1),\n          _.findLast(collection, resolve(values[2]), 1)\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and a `fromIndex` >= `length`', function(assert) {\n        assert.expect(1);\n\n        var indexes = [4, 6, Math.pow(2, 32), Infinity];\n\n        var expected = lodashStable.map(indexes, lodashStable.constant([values[0], undefined, undefined]));\n\n        var actual = lodashStable.map(indexes, function(fromIndex) {\n          return [\n            _.findLast(collection, resolve(1), fromIndex),\n            _.findLast(collection, resolve(undefined), fromIndex),\n            _.findLast(collection, resolve(''), fromIndex)\n          ];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and treat falsey `fromIndex` values correctly', function(assert) {\n        assert.expect(1);\n\n        var expected = lodashStable.map(falsey, function(value) {\n          return value === undefined ? values[3] : undefined;\n        });\n\n        var actual = lodashStable.map(falsey, function(fromIndex) {\n          return _.findLast(collection, resolve(values[3]), fromIndex);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and coerce `fromIndex` to an integer', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          values[0],\n          values[0],\n          undefined\n        ];\n\n        var actual = [\n          _.findLast(collection, resolve(values[0]), 0.1),\n          _.findLast(collection, resolve(values[0]), NaN),\n          _.findLast(collection, resolve(values[2]), '1')\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and a negative `fromIndex`', function(assert) {\n        assert.expect(1);\n\n        var expected = [\n          values[1],\n          undefined\n        ];\n\n        var actual = [\n          _.findLast(collection, resolve(values[1]), -2),\n          _.findLast(collection, resolve(values[2]), -2)\n        ];\n\n        assert.deepEqual(actual, expected);\n      });\n\n      QUnit.test('should work with ' + key + ' and a negative `fromIndex` <= `-length`', function(assert) {\n        assert.expect(1);\n\n        var indexes = [-4, -6, -Infinity],\n            expected = lodashStable.map(indexes, lodashStable.constant(values[0]));\n\n        var actual = lodashStable.map(indexes, function(fromIndex) {\n          return _.findLast(collection, resolve(values[0]), fromIndex);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.flip');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should flip arguments provided to `func`', function(assert) {\n      assert.expect(1);\n\n      var flipped = _.flip(fn);\n      assert.deepEqual(flipped('a', 'b', 'c', 'd'), ['d', 'c', 'b', 'a']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.flatMapDepth');\n\n  (function() {\n    var array = [1, [2, [3, [4]], 5]];\n\n    QUnit.test('should use a default `depth` of `1`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.flatMapDepth(array, identity), [1, 2, [3, [4]], 5]);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2, [3, [4]], 5]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.flatMapDepth(array, value) : _.flatMapDepth(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat a `depth` of < `1` as a shallow clone', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([-1, 0], function(depth) {\n        assert.deepEqual(_.flatMapDepth(array, identity, depth), [1, [2, [3, [4]], 5]]);\n      });\n    });\n\n    QUnit.test('should coerce `depth` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.flatMapDepth(array, identity, 2.2), [1, 2, 3, [4], 5]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('flatMap methods');\n\n  lodashStable.each(['flatMap', 'flatMapDeep', 'flatMapDepth'], function(methodName) {\n    var func = _[methodName],\n        array = [1, 2, 3, 4];\n\n    function duplicate(n) {\n      return [n, n];\n    }\n\n    QUnit.test('`_.' + methodName + '` should map values in `array` to a new flattened array', function(assert) {\n      assert.expect(1);\n\n      var actual = func(array, duplicate),\n          expected = lodashStable.flatten(lodashStable.map(array, duplicate));\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1, 2] }, { 'a': [3, 4] }];\n      assert.deepEqual(func(objects, 'a'), array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should iterate over own string keyed properties of objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = [1, 2];\n      }\n      Foo.prototype.b = [3, 4];\n\n      var actual = func(new Foo, identity);\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(2);\n\n      var array = [[1, 2], [3, 4]],\n          object = { 'a': [1, 2], 'b': [3, 4] },\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2, 3, 4]));\n\n      lodashStable.each([array, object], function(collection) {\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? func(collection, value) : func(collection);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should accept a falsey `collection`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(collection, index) {\n        try {\n          return index ? func(collection) : func();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(1), []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with objects with non-number length properties', function(assert) {\n      assert.expect(1);\n\n      var object = { 'length': [1, 2] };\n      assert.deepEqual(func(object, identity), [1, 2]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.flattenDepth');\n\n  (function() {\n    var array = [1, [2, [3, [4]], 5]];\n\n    QUnit.test('should use a default `depth` of `1`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.flattenDepth(array), [1, 2, [3, [4]], 5]);\n    });\n\n    QUnit.test('should treat a `depth` of < `1` as a shallow clone', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([-1, 0], function(depth) {\n        assert.deepEqual(_.flattenDepth(array, depth), [1, [2, [3, [4]], 5]]);\n      });\n    });\n\n    QUnit.test('should coerce `depth` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.flattenDepth(array, 2.2), [1, 2, 3, [4], 5]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('flatten methods');\n\n  (function() {\n    var array = [1, [2, [3, [4]], 5]],\n        methodNames = ['flatten', 'flattenDeep', 'flattenDepth'];\n\n    QUnit.test('should flatten `arguments` objects', function(assert) {\n      assert.expect(3);\n\n      var array = [args, [args]];\n\n      assert.deepEqual(_.flatten(array), [1, 2, 3, args]);\n      assert.deepEqual(_.flattenDeep(array), [1, 2, 3, 1, 2, 3]);\n      assert.deepEqual(_.flattenDepth(array, 2), [1, 2, 3, 1, 2, 3]);\n    });\n\n    QUnit.test('should treat sparse arrays as dense', function(assert) {\n      assert.expect(6);\n\n      var array = [[1, 2, 3], Array(3)],\n          expected = [1, 2, 3];\n\n      expected.push(undefined, undefined, undefined);\n\n      lodashStable.each(methodNames, function(methodName) {\n        var actual = _[methodName](array);\n        assert.deepEqual(actual, expected);\n        assert.ok('4' in actual);\n      });\n    });\n\n    QUnit.test('should flatten objects with a truthy `Symbol.isConcatSpreadable` value', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && Symbol.isConcatSpreadable) {\n        var object = { '0': 'a', 'length': 1 },\n            array = [object],\n            expected = lodashStable.map(methodNames, lodashStable.constant(['a']));\n\n        object[Symbol.isConcatSpreadable] = true;\n\n        var actual = lodashStable.map(methodNames, function(methodName) {\n          return _[methodName](array);\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with extremely large arrays', function(assert) {\n      assert.expect(3);\n\n      lodashStable.times(3, function(index) {\n        var expected = Array(5e5);\n        try {\n          var func = _.flatten;\n          if (index == 1) {\n            func = _.flattenDeep;\n          } else if (index == 2) {\n            func = _.flattenDepth;\n          }\n          assert.deepEqual(func([expected]), expected);\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n      });\n    });\n\n    QUnit.test('should work with empty arrays', function(assert) {\n      assert.expect(3);\n\n      var array = [[], [[]], [[], [[[]]]]];\n\n      assert.deepEqual(_.flatten(array), [[], [], [[[]]]]);\n      assert.deepEqual(_.flattenDeep(array), []);\n      assert.deepEqual(_.flattenDepth(array, 2), [[[]]]);\n    });\n\n    QUnit.test('should support flattening of nested arrays', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.flatten(array), [1, 2, [3, [4]], 5]);\n      assert.deepEqual(_.flattenDeep(array), [1, 2, 3, 4, 5]);\n      assert.deepEqual(_.flattenDepth(array, 2), [1, 2, 3, [4], 5]);\n    });\n\n    QUnit.test('should return an empty array for non array-like objects', function(assert) {\n      assert.expect(3);\n\n      var expected = [],\n          nonArray = { '0': 'a' };\n\n      assert.deepEqual(_.flatten(nonArray), expected);\n      assert.deepEqual(_.flattenDeep(nonArray), expected);\n      assert.deepEqual(_.flattenDepth(nonArray, 2), expected);\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var wrapped = _(array),\n            actual = wrapped.flatten();\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.value(), [1, 2, [3, [4]], 5]);\n\n        actual = wrapped.flattenDeep();\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.value(), [1, 2, 3, 4, 5]);\n\n        actual = wrapped.flattenDepth(2);\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.value(), [1, 2, 3, [4], 5]);\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('flow methods');\n\n  lodashStable.each(['flow', 'flowRight'], function(methodName) {\n    var func = _[methodName],\n        isFlow = methodName == 'flow';\n\n    QUnit.test('`_.' + methodName + '` should supply each function with the return value of the previous', function(assert) {\n      assert.expect(1);\n\n      var fixed = function(n) { return n.toFixed(1); },\n          combined = isFlow ? func(add, square, fixed) : func(fixed, square, add);\n\n      assert.strictEqual(combined(1, 2), '9.0');\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a new function', function(assert) {\n      assert.expect(1);\n\n      assert.notStrictEqual(func(noop), noop);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an identity function when no arguments are given', function(assert) {\n      assert.expect(6);\n\n      _.times(2, function(index) {\n        try {\n          var combined = index ? func([]) : func();\n          assert.strictEqual(combined('a'), 'a');\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n        assert.strictEqual(combined.length, 0);\n        assert.notStrictEqual(combined, identity);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a curried function and `_.head`', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curry(identity);\n\n      var combined = isFlow\n        ? func(_.head, curried)\n        : func(curried, _.head);\n\n      assert.strictEqual(combined([1]), 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support shortcut fusion', function(assert) {\n      assert.expect(6);\n\n      var filterCount,\n          mapCount,\n          array = lodashStable.range(LARGE_ARRAY_SIZE),\n          iteratee = function(value) { mapCount++; return square(value); },\n          predicate = function(value) { filterCount++; return isEven(value); };\n\n      lodashStable.times(2, function(index) {\n        var filter1 = _.filter,\n            filter2 = _.curry(_.rearg(_.ary(_.filter, 2), 1, 0), 2),\n            filter3 = (_.filter = index ? filter2 : filter1, filter2(predicate));\n\n        var map1 = _.map,\n            map2 = _.curry(_.rearg(_.ary(_.map, 2), 1, 0), 2),\n            map3 = (_.map = index ? map2 : map1, map2(iteratee));\n\n        var take1 = _.take,\n            take2 = _.curry(_.rearg(_.ary(_.take, 2), 1, 0), 2),\n            take3 = (_.take = index ? take2 : take1, take2(2));\n\n        var combined = isFlow\n          ? func(map3, filter3, _.compact, take3)\n          : func(take3, _.compact, filter3, map3);\n\n        filterCount = mapCount = 0;\n        assert.deepEqual(combined(array), [4, 16]);\n\n        if (!isNpm && WeakMap && WeakMap.name) {\n          assert.strictEqual(filterCount, 5, 'filterCount');\n          assert.strictEqual(mapCount, 5, 'mapCount');\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n        _.filter = filter1;\n        _.map = map1;\n        _.take = take1;\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with curried functions with placeholders', function(assert) {\n      assert.expect(1);\n\n      var curried = _.curry(_.ary(_.map, 2), 2),\n          getProp = curried(curried.placeholder, 'a'),\n          objects = [{ 'a': 1 }, { 'a': 2 }, { 'a': 1 }];\n\n      var combined = isFlow\n        ? func(getProp, _.uniq)\n        : func(_.uniq, getProp);\n\n      assert.deepEqual(combined(objects), [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(noop)[methodName]();\n        assert.ok(wrapped instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.forEach');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.each, _.forEach);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.forEachRight');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.eachRight, _.forEachRight);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('forIn methods');\n\n  lodashStable.each(['forIn', 'forInRight'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` iterates over inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var keys = [];\n      func(new Foo, function(value, key) { keys.push(key); });\n      assert.deepEqual(keys.sort(), ['a', 'b']);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('forOwn methods');\n\n  lodashStable.each(['forOwn', 'forOwnRight'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should iterate over `length` properties', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'zero', '1': 'one', 'length': 2 },\n          props = [];\n\n      func(object, function(value, prop) { props.push(prop); });\n      assert.deepEqual(props.sort(), ['0', '1', 'length']);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('iteration methods');\n\n  (function() {\n    var methods = [\n      '_baseEach',\n      'countBy',\n      'every',\n      'filter',\n      'find',\n      'findIndex',\n      'findKey',\n      'findLast',\n      'findLastIndex',\n      'findLastKey',\n      'forEach',\n      'forEachRight',\n      'forIn',\n      'forInRight',\n      'forOwn',\n      'forOwnRight',\n      'groupBy',\n      'keyBy',\n      'map',\n      'mapKeys',\n      'mapValues',\n      'maxBy',\n      'minBy',\n      'omitBy',\n      'partition',\n      'pickBy',\n      'reject',\n      'some'\n    ];\n\n    var arrayMethods = [\n      'findIndex',\n      'findLastIndex',\n      'maxBy',\n      'minBy'\n    ];\n\n    var collectionMethods = [\n      '_baseEach',\n      'countBy',\n      'every',\n      'filter',\n      'find',\n      'findLast',\n      'forEach',\n      'forEachRight',\n      'groupBy',\n      'keyBy',\n      'map',\n      'partition',\n      'reduce',\n      'reduceRight',\n      'reject',\n      'some'\n    ];\n\n    var forInMethods = [\n      'forIn',\n      'forInRight',\n      'omitBy',\n      'pickBy'\n    ];\n\n    var iterationMethods = [\n      '_baseEach',\n      'forEach',\n      'forEachRight',\n      'forIn',\n      'forInRight',\n      'forOwn',\n      'forOwnRight'\n    ];\n\n    var objectMethods = [\n      'findKey',\n      'findLastKey',\n      'forIn',\n      'forInRight',\n      'forOwn',\n      'forOwnRight',\n      'mapKeys',\n      'mapValues',\n      'omitBy',\n      'pickBy'\n    ];\n\n    var rightMethods = [\n      'findLast',\n      'findLastIndex',\n      'findLastKey',\n      'forEachRight',\n      'forInRight',\n      'forOwnRight'\n    ];\n\n    var unwrappedMethods = [\n      'each',\n      'eachRight',\n      'every',\n      'find',\n      'findIndex',\n      'findKey',\n      'findLast',\n      'findLastIndex',\n      'findLastKey',\n      'forEach',\n      'forEachRight',\n      'forIn',\n      'forInRight',\n      'forOwn',\n      'forOwnRight',\n      'max',\n      'maxBy',\n      'min',\n      'minBy',\n      'some'\n    ];\n\n    lodashStable.each(methods, function(methodName) {\n      var array = [1, 2, 3],\n          func = _[methodName],\n          isBy = /(^partition|By)$/.test(methodName),\n          isFind = /^find/.test(methodName),\n          isOmitPick = /^(?:omit|pick)By$/.test(methodName),\n          isSome = methodName == 'some';\n\n      QUnit.test('`_.' + methodName + '` should provide correct iteratee arguments', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var args,\n              expected = [1, 0, array];\n\n          func(array, function() {\n            args || (args = slice.call(arguments));\n          });\n\n          if (lodashStable.includes(rightMethods, methodName)) {\n            expected[0] = 3;\n            expected[1] = 2;\n          }\n          if (lodashStable.includes(objectMethods, methodName)) {\n            expected[1] += '';\n          }\n          if (isBy) {\n            expected.length = isOmitPick ? 2 : 1;\n          }\n          assert.deepEqual(args, expected);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should treat sparse arrays as dense', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var array = [1];\n          array[2] = 3;\n\n          var expected = lodashStable.includes(objectMethods, methodName)\n            ? [[1, '0', array], [undefined, '1', array], [3, '2', array]]\n            : [[1,  0, array],  [undefined,  1,  array], [3,  2,  array]];\n\n          if (isBy) {\n            expected = lodashStable.map(expected, function(args) {\n              return args.slice(0, isOmitPick ? 2 : 1);\n            });\n          }\n          else if (lodashStable.includes(objectMethods, methodName)) {\n            expected = lodashStable.map(expected, function(args) {\n              args[1] += '';\n              return args;\n            });\n          }\n          if (lodashStable.includes(rightMethods, methodName)) {\n            expected.reverse();\n          }\n          var argsList = [];\n          func(array, function() {\n            argsList.push(slice.call(arguments));\n            return !(isFind || isSome);\n          });\n\n          assert.deepEqual(argsList, expected);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(lodashStable.difference(methods, objectMethods), function(methodName) {\n      var array = [1, 2, 3],\n          func = _[methodName],\n          isEvery = methodName == 'every';\n\n      array.a = 1;\n\n      QUnit.test('`_.' + methodName + '` should not iterate custom properties on arrays', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var keys = [];\n          func(array, function(value, key) {\n            keys.push(key);\n            return isEvery;\n          });\n\n          assert.notOk(lodashStable.includes(keys, 'a'));\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(lodashStable.difference(methods, unwrappedMethods), function(methodName) {\n      var array = [1, 2, 3],\n          isBaseEach = methodName == '_baseEach';\n\n      QUnit.test('`_.' + methodName + '` should return a wrapped value when implicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!(isBaseEach || isNpm)) {\n          var wrapped = _(array)[methodName](noop);\n          assert.ok(wrapped instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(unwrappedMethods, function(methodName) {\n      var array = [1, 2, 3];\n\n      QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          var actual = _(array)[methodName](noop);\n          assert.notOk(actual instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n        assert.expect(2);\n\n        if (!isNpm) {\n          var wrapped = _(array).chain(),\n              actual = wrapped[methodName](noop);\n\n          assert.ok(actual instanceof _);\n          assert.notStrictEqual(actual, wrapped);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n    });\n\n    lodashStable.each(lodashStable.difference(methods, arrayMethods, forInMethods), function(methodName) {\n      var func = _[methodName];\n\n      QUnit.test('`_.' + methodName + '` iterates over own string keyed properties of objects', function(assert) {\n        assert.expect(1);\n\n        function Foo() {\n          this.a = 1;\n        }\n        Foo.prototype.b = 2;\n\n        if (func) {\n          var values = [];\n          func(new Foo, function(value) { values.push(value); });\n          assert.deepEqual(values, [1]);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(iterationMethods, function(methodName) {\n      var array = [1, 2, 3],\n          func = _[methodName];\n\n      QUnit.test('`_.' + methodName + '` should return the collection', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          assert.strictEqual(func(array, Boolean), array);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(collectionMethods, function(methodName) {\n      var func = _[methodName];\n\n      QUnit.test('`_.' + methodName + '` should use `isArrayLike` to determine whether a value is array-like', function(assert) {\n        assert.expect(3);\n\n        if (func) {\n          var isIteratedAsObject = function(object) {\n            var result = false;\n            func(object, function() { result = true; }, 0);\n            return result;\n          };\n\n          var values = [-1, '1', 1.1, Object(1), MAX_SAFE_INTEGER + 1],\n              expected = lodashStable.map(values, stubTrue);\n\n          var actual = lodashStable.map(values, function(length) {\n            return isIteratedAsObject({ 'length': length });\n          });\n\n          var Foo = function(a) {};\n          Foo.a = 1;\n\n          assert.deepEqual(actual, expected);\n          assert.ok(isIteratedAsObject(Foo));\n          assert.notOk(isIteratedAsObject({ 'length': 0 }));\n        }\n        else {\n          skipAssert(assert, 3);\n        }\n      });\n    });\n\n    lodashStable.each(methods, function(methodName) {\n      var func = _[methodName],\n          isFind = /^find/.test(methodName),\n          isSome = methodName == 'some',\n          isReduce = /^reduce/.test(methodName);\n\n      QUnit.test('`_.' + methodName + '` should ignore changes to `length`', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var count = 0,\n              array = [1];\n\n          func(array, function() {\n            if (++count == 1) {\n              array.push(2);\n            }\n            return !(isFind || isSome);\n          }, isReduce ? array : null);\n\n          assert.strictEqual(count, 1);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each(lodashStable.difference(lodashStable.union(methods, collectionMethods), arrayMethods), function(methodName) {\n      var func = _[methodName],\n          isFind = /^find/.test(methodName),\n          isSome = methodName == 'some',\n          isReduce = /^reduce/.test(methodName);\n\n      QUnit.test('`_.' + methodName + '` should ignore added `object` properties', function(assert) {\n        assert.expect(1);\n\n        if (func) {\n          var count = 0,\n              object = { 'a': 1 };\n\n          func(object, function() {\n            if (++count == 1) {\n              object.b = 2;\n            }\n            return !(isFind || isSome);\n          }, isReduce ? object : null);\n\n          assert.strictEqual(count, 1);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('object assignments');\n\n  lodashStable.each(['assign', 'assignIn', 'defaults', 'defaultsDeep', 'merge'], function(methodName) {\n    var func = _[methodName],\n        isAssign = methodName == 'assign',\n        isDefaults = /^defaults/.test(methodName);\n\n    QUnit.test('`_.' + methodName + '` should coerce primitives to objects', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(primitives, function(value) {\n        var object = Object(value);\n        object.a = 1;\n        return object;\n      });\n\n      var actual = lodashStable.map(primitives, function(value) {\n        return func(value, { 'a': 1 });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should assign own ' + (isAssign ? '' : 'and inherited ') + 'string keyed source properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var expected = isAssign ? { 'a': 1 } : { 'a': 1, 'b': 2 };\n      assert.deepEqual(func({}, new Foo), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not skip a trailing function source', function(assert) {\n      assert.expect(1);\n\n      function fn() {}\n      fn.b = 2;\n\n      assert.deepEqual(func({}, { 'a': 1 }, fn), { 'a': 1, 'b': 2 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not error on nullish sources', function(assert) {\n      assert.expect(1);\n\n      try {\n        assert.deepEqual(func({ 'a': 1 }, undefined, { 'b': 2 }, null), { 'a': 1, 'b': 2 });\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should create an object when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var source = { 'a': 1 },\n          values = [null, undefined],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        var object = func(value, source);\n        return object !== source && lodashStable.isEqual(object, source);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      actual = lodashStable.map(values, function(value) {\n        return lodashStable.isEqual(func(value), {});\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.reduce`', function(assert) {\n      assert.expect(2);\n\n      var array = [{ 'a': 1 }, { 'b': 2 }, { 'c': 3 }],\n          expected = { 'a': isDefaults ? 0 : 1, 'b': 2, 'c': 3 };\n\n      function fn() {};\n      fn.a = array[0];\n      fn.b = array[1];\n      fn.c = array[2];\n\n      assert.deepEqual(lodashStable.reduce(array, func, { 'a': 0 }), expected);\n      assert.deepEqual(lodashStable.reduce(fn, func, { 'a': 0 }), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not return the existing wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _({ 'a': 1 }),\n            actual = wrapped[methodName]({ 'b': 2 });\n\n        assert.notStrictEqual(actual, wrapped);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  lodashStable.each(['assign', 'assignIn', 'merge'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should not treat `object` as `source`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      var actual = func(new Foo, { 'b': 2 });\n      assert.notOk(_.has(actual, 'a'));\n    });\n  });\n\n  lodashStable.each(['assign', 'assignIn', 'assignInWith', 'assignWith', 'defaults', 'defaultsDeep', 'merge', 'mergeWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should not assign values that are the same as their destinations', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a'], { 'a': 1 }, NaN], function(value) {\n        var object = {},\n            pass = true;\n\n        defineProperty(object, 'a', {\n          'configurable': true,\n          'enumerable': true,\n          'get': lodashStable.constant(value),\n          'set': function() { pass = false; }\n        });\n\n        func(object, { 'a': value });\n        assert.ok(pass);\n      });\n    });\n  });\n\n  lodashStable.each(['assignWith', 'assignInWith', 'mergeWith'], function(methodName) {\n    var func = _[methodName],\n        isMergeWith = methodName == 'mergeWith';\n\n    QUnit.test('`_.' + methodName + '` should provide correct `customizer` arguments', function(assert) {\n      assert.expect(3);\n\n      var args,\n          object = { 'a': 1 },\n          source = { 'a': 2 },\n          expected = lodashStable.map([1, 2, 'a', object, source], lodashStable.cloneDeep);\n\n      func(object, source, function() {\n        args || (args = lodashStable.map(slice.call(arguments, 0, 5), lodashStable.cloneDeep));\n      });\n\n      assert.deepEqual(args, expected, 'primitive values');\n\n      var argsList = [],\n          objectValue = [1, 2],\n          sourceValue = { 'b': 2 };\n\n      object = { 'a': objectValue };\n      source = { 'a': sourceValue };\n      expected = [lodashStable.map([objectValue, sourceValue, 'a', object, source], lodashStable.cloneDeep)];\n\n      if (isMergeWith) {\n        expected.push(lodashStable.map([undefined, 2, 'b', objectValue, sourceValue], lodashStable.cloneDeep));\n      }\n      func(object, source, function() {\n        argsList.push(lodashStable.map(slice.call(arguments, 0, 5), lodashStable.cloneDeep));\n      });\n\n      assert.deepEqual(argsList, expected, 'object values');\n\n      args = undefined;\n      object = { 'a': 1 };\n      source = { 'b': 2 };\n      expected = lodashStable.map([undefined, 2, 'b', object, source], lodashStable.cloneDeep);\n\n      func(object, source, function() {\n        args || (args = lodashStable.map(slice.call(arguments, 0, 5), lodashStable.cloneDeep));\n      });\n\n      assert.deepEqual(args, expected, 'undefined properties');\n    });\n\n    QUnit.test('`_.' + methodName + '` should not treat the second argument as a `customizer` callback', function(assert) {\n      assert.expect(2);\n\n      function callback() {}\n      callback.b = 2;\n\n      var actual = func({ 'a': 1 }, callback);\n      assert.deepEqual(actual, { 'a': 1, 'b': 2 });\n\n      actual = func({ 'a': 1 }, callback, { 'c': 3 });\n      assert.deepEqual(actual, { 'a': 1, 'b': 2, 'c': 3 });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('exit early');\n\n  lodashStable.each(['_baseEach', 'forEach', 'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'transform'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` can exit early when iterating arrays', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        var array = [1, 2, 3],\n            values = [];\n\n        func(array, function(value, other) {\n          values.push(lodashStable.isArray(value) ? other : value);\n          return false;\n        });\n\n        assert.deepEqual(values, [lodashStable.endsWith(methodName, 'Right') ? 3 : 1]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` can exit early when iterating objects', function(assert) {\n      assert.expect(1);\n\n      if (func) {\n        var object = { 'a': 1, 'b': 2, 'c': 3 },\n            values = [];\n\n        func(object, function(value, other) {\n          values.push(lodashStable.isArray(value) ? other : value);\n          return false;\n        });\n\n        assert.strictEqual(values.length, 1);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('`__proto__` property bugs');\n\n  (function() {\n    QUnit.test('should work with the \"__proto__\" key in internal data objects', function(assert) {\n      assert.expect(4);\n\n      var stringLiteral = '__proto__',\n          stringObject = Object(stringLiteral),\n          expected = [stringLiteral, stringObject];\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function(count) {\n        return isEven(count) ? stringLiteral : stringObject;\n      });\n\n      assert.deepEqual(_.difference(largeArray, largeArray), []);\n      assert.deepEqual(_.intersection(largeArray, largeArray), expected);\n      assert.deepEqual(_.uniq(largeArray), expected);\n      assert.deepEqual(_.without.apply(_, [largeArray].concat(largeArray)), []);\n    });\n\n    QUnit.test('should treat \"__proto__\" as a regular key in assignments', function(assert) {\n      assert.expect(2);\n\n      var methods = [\n        'assign',\n        'assignIn',\n        'defaults',\n        'defaultsDeep',\n        'merge'\n      ];\n\n      var source = create(null);\n      source.__proto__ = [];\n\n      var expected = lodashStable.map(methods, stubFalse);\n\n      var actual = lodashStable.map(methods, function(methodName) {\n        var result = _[methodName]({}, source);\n        return result instanceof Array;\n      });\n\n      assert.deepEqual(actual, expected);\n\n      actual = _.groupBy([{ 'a': '__proto__' }], 'a');\n      assert.notOk(actual instanceof Array);\n    });\n\n    QUnit.test('should not merge \"__proto__\" properties', function(assert) {\n      assert.expect(1);\n\n      if (JSON) {\n        _.merge({}, JSON.parse('{\"__proto__\":{\"a\":1}}'));\n\n        var actual = \"a\" in objectProto;\n        delete objectProto.a;\n\n        assert.notOk(actual);\n      } else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.fromPairs');\n\n  (function() {\n    QUnit.test('should accept a two dimensional array', function(assert) {\n      assert.expect(1);\n\n      var array = [['a', 1], ['b', 2]],\n          object = { 'a': 1, 'b': 2 },\n          actual = _.fromPairs(array);\n\n      assert.deepEqual(actual, object);\n    });\n\n    QUnit.test('should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubObject);\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? _.fromPairs(array) : _.fromPairs();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not support deep paths', function(assert) {\n      assert.expect(1);\n\n      var actual = _.fromPairs([['a.b', 1]]);\n      assert.deepEqual(actual, { 'a.b': 1 });\n    });\n\n    QUnit.test('should support consuming the return value of `_.toPairs`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a.b': 1 };\n      assert.deepEqual(_.fromPairs(_.toPairs(object)), object);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n          return ['key' + index, index];\n        });\n\n        var actual = _(array).fromPairs().map(square).filter(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(_.map(_.fromPairs(array), square), isEven)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.functions');\n\n  (function() {\n    QUnit.test('should return the function names of an object', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 'a', 'b': identity, 'c': /x/, 'd': noop },\n          actual = _.functions(object).sort();\n\n      assert.deepEqual(actual, ['b', 'd']);\n    });\n\n    QUnit.test('should not include inherited functions', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = identity;\n        this.b = 'b';\n      }\n      Foo.prototype.c = noop;\n\n      assert.deepEqual(_.functions(new Foo), ['a']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.groupBy');\n\n  (function() {\n    var array = [6.1, 4.2, 6.3];\n\n    QUnit.test('should transform keys by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.groupBy(array, Math.floor);\n      assert.deepEqual(actual, { '4': [4.2], '6': [6.1, 6.3] });\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [6, 4, 6],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '4': [4], '6':  [6, 6] }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.groupBy(array, value) : _.groupBy(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = _.groupBy(['one', 'two', 'three'], 'length');\n      assert.deepEqual(actual, { '3': ['one', 'two'], '5': ['three'] });\n    });\n\n    QUnit.test('should only add values to own, not inherited, properties', function(assert) {\n      assert.expect(2);\n\n      var actual = _.groupBy(array, function(n) {\n        return Math.floor(n) > 4 ? 'hasOwnProperty' : 'constructor';\n      });\n\n      assert.deepEqual(actual.constructor, [4.2]);\n      assert.deepEqual(actual.hasOwnProperty, [6.1, 6.3]);\n    });\n\n    QUnit.test('should work with a number for `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var array = [\n        [1, 'a'],\n        [2, 'a'],\n        [2, 'b']\n      ];\n\n      assert.deepEqual(_.groupBy(array, 0), { '1': [[1, 'a']], '2': [[2, 'a'], [2, 'b']] });\n      assert.deepEqual(_.groupBy(array, 1), { 'a': [[1, 'a'], [2, 'a']], 'b': [[2, 'b']] });\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.groupBy({ 'a': 6.1, 'b': 4.2, 'c': 6.3 }, Math.floor);\n      assert.deepEqual(actual, { '4': [4.2], '6': [6.1, 6.3] });\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE).concat(\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 2), LARGE_ARRAY_SIZE),\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 1.5), LARGE_ARRAY_SIZE)\n        );\n\n        var iteratee = function(value) { value.push(value[0]); return value; },\n            predicate = function(value) { return isEven(value[0]); },\n            actual = _(array).groupBy().map(iteratee).filter(predicate).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(lodashStable.map(_.groupBy(array), iteratee), predicate)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.gt');\n\n  (function() {\n    QUnit.test('should return `true` if `value` > `other`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.gt(3, 1), true);\n      assert.strictEqual(_.gt('def', 'abc'), true);\n    });\n\n    QUnit.test('should return `false` if `value` is <= `other`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.gt(1, 3), false);\n      assert.strictEqual(_.gt(3, 3), false);\n      assert.strictEqual(_.gt('abc', 'def'), false);\n      assert.strictEqual(_.gt('def', 'def'), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.gte');\n\n  (function() {\n    QUnit.test('should return `true` if `value` >= `other`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.gte(3, 1), true);\n      assert.strictEqual(_.gte(3, 3), true);\n      assert.strictEqual(_.gte('def', 'abc'), true);\n      assert.strictEqual(_.gte('def', 'def'), true);\n    });\n\n    QUnit.test('should return `false` if `value` is less than `other`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.gte(1, 3), false);\n      assert.strictEqual(_.gte('abc', 'def'), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('has methods');\n\n  lodashStable.each(['has', 'hasIn'], function(methodName) {\n    var func = _[methodName],\n        isHas = methodName == 'has',\n        sparseArgs = toArgs([1]),\n        sparseArray = Array(1),\n        sparseString = Object('a');\n\n    delete sparseArgs[0];\n    delete sparseString[0];\n\n    QUnit.test('`_.' + methodName + '` should check for own properties', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1 };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.strictEqual(func(object, path), true);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not use the `hasOwnProperty` method of `object`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'hasOwnProperty': null, 'a': 1 };\n      assert.strictEqual(func(object, 'a'), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support deep paths', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(func(object, path), true);\n      });\n\n      lodashStable.each(['a.a', ['a', 'a']], function(path) {\n        assert.strictEqual(func(object, path), false);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var object = { 'null': 1 , 'undefined': 2, 'fn': 3, '[object Object]': 4 },\n          paths = [null, undefined, fn, {}],\n          expected = lodashStable.map(paths, stubTrue);\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          return func(object, index ? [path] : path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(args, 1), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3];\n\n      lodashStable.each([1, [1]], function(path) {\n        assert.strictEqual(func(array, path), true);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)],\n          expected = lodashStable.map(props, stubTrue);\n\n      var actual = lodashStable.map(props, function(key) {\n        return func(object, key);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a symbol `path`', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n\n      if (Symbol) {\n        Foo.prototype[symbol] = 1;\n\n        var symbol2 = Symbol('b');\n        defineProperty(Foo.prototype, symbol2, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 2\n        });\n\n        var object = isHas ? Foo.prototype : new Foo;\n        assert.strictEqual(func(object, symbol), true);\n        assert.strictEqual(func(object, symbol2), true);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should check for a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1 };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.strictEqual(func(object, path), true);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` for indexes of sparse values', function(assert) {\n      assert.expect(1);\n\n      var values = [sparseArgs, sparseArray, sparseString],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value, 0);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` for indexes of sparse values with deep paths', function(assert) {\n      assert.expect(1);\n\n      var values = [sparseArgs, sparseArray, sparseString],\n          expected = lodashStable.map(values, lodashStable.constant([true, true]));\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.map(['a[0]', ['a', '0']], function(path) {\n          return func({ 'a': value }, path);\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `' + (isHas ? 'false' : 'true') + '` for inherited properties', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.strictEqual(func(new Foo, path), !isHas);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `' + (isHas ? 'false' : 'true') + '` for nested inherited properties', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = { 'b': 1 };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(func(new Foo, path), !isHas);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var actual = lodashStable.map(values, function(value) {\n          return func(value, path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var actual = lodashStable.map(values, function(value) {\n          return func(value, path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` for nullish values of nested objects', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var object = index ? { 'a': value } : {};\n          return func(object, path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` over sparse values of deep paths', function(assert) {\n      assert.expect(1);\n\n      var values = [sparseArgs, sparseArray, sparseString],\n          expected = lodashStable.map(values, lodashStable.constant([false, false]));\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.map(['a[0].b', ['a', '0', 'b']], function(path) {\n          return func({ 'a': value }, path);\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.head');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    QUnit.test('should return the first element', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.head(array), 1);\n    });\n\n    QUnit.test('should return `undefined` when querying empty arrays', function(assert) {\n      assert.expect(1);\n\n      arrayProto[0] = 1;\n      assert.strictEqual(_.head([]), undefined);\n      arrayProto.length = 0;\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.head);\n\n      assert.deepEqual(actual, [1, 4, 7]);\n    });\n\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.first, _.head);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array);\n        assert.strictEqual(wrapped.head(), 1);\n        assert.strictEqual(wrapped.first(), 1);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array).chain();\n        assert.ok(wrapped.head() instanceof _);\n        assert.ok(wrapped.first() instanceof _);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should not execute immediately when explicitly chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array).chain();\n        assert.strictEqual(wrapped.head().__wrapped__, array);\n        assert.strictEqual(wrapped.first().__wrapped__, array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var largeArray = lodashStable.range(LARGE_ARRAY_SIZE),\n            smallArray = array;\n\n        lodashStable.each(['head', 'first'], function(methodName) {\n          lodashStable.times(2, function(index) {\n            var array = index ? largeArray : smallArray,\n                actual = _(array).filter(isEven)[methodName]();\n\n            assert.strictEqual(actual, _[methodName](_.filter(array, isEven)));\n          });\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.identity');\n\n  (function() {\n    QUnit.test('should return the first argument given', function(assert) {\n      assert.expect(1);\n\n      var object = { 'name': 'fred' };\n      assert.strictEqual(_.identity(object), object);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.includes');\n\n  (function() {\n    lodashStable.each({\n      'an `arguments` object': arguments,\n      'an array': [1, 2, 3, 4],\n      'an object': { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n      'a string': '1234'\n    },\n    function(collection, key) {\n      QUnit.test('should work with ' + key + ' and  return `true` for  matched values', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.includes(collection, 3), true);\n      });\n\n      QUnit.test('should work with ' + key + ' and  return `false` for unmatched values', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.includes(collection, 5), false);\n      });\n\n      QUnit.test('should work with ' + key + ' and floor `position` values', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.includes(collection, 2, 1.2), true);\n      });\n\n      QUnit.test('should work with ' + key + ' and return an unwrapped value implicitly when chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          assert.strictEqual(_(collection).includes(3), true);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('should work with ' + key + ' and return a wrapped value when explicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          assert.ok(_(collection).chain().includes(3) instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    lodashStable.each({\n      'literal': 'abc',\n      'object': Object('abc')\n    },\n    function(collection, key) {\n      QUnit.test('should work with a string ' + key + ' for `collection`', function(assert) {\n        assert.expect(2);\n\n        assert.strictEqual(_.includes(collection, 'bc'), true);\n        assert.strictEqual(_.includes(collection, 'd'), false);\n      });\n    });\n\n    QUnit.test('should return `false` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubFalse);\n\n      var actual = lodashStable.map(empties, function(value) {\n        try {\n          return _.includes(value);\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a string and a `fromIndex` >= `length`', function(assert) {\n      assert.expect(1);\n\n      var string = '1234',\n          length = string.length,\n          indexes = [4, 6, Math.pow(2, 32), Infinity];\n\n      var expected = lodashStable.map(indexes, function(index) {\n        return [false, false, index == length];\n      });\n\n      var actual = lodashStable.map(indexes, function(fromIndex) {\n        return [\n          _.includes(string, 1, fromIndex),\n          _.includes(string, undefined, fromIndex),\n          _.includes(string, '', fromIndex)\n        ];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.includes([1, NaN, 3], NaN), true);\n    });\n\n    QUnit.test('should match `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.includes([-0], 0), true);\n      assert.strictEqual(_.includes([0], -0), true);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.every`', function(assert) {\n      assert.expect(1);\n\n      var array = [2, 3, 1],\n          values = [1, 2, 3];\n\n      assert.ok(lodashStable.every(values, lodashStable.partial(_.includes, array)));\n    });\n  }(1, 2, 3, 4));\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.initial');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? _.initial(array) : _.initial();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should exclude last element', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.initial(array), [1, 2]);\n    });\n\n    QUnit.test('should return an empty when querying empty arrays', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.initial([]), []);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.initial);\n\n      assert.deepEqual(actual, [[1, 2], [4, 5], [7, 8]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            values = [];\n\n        var actual = _(array).initial().filter(function(value) {\n          values.push(value);\n          return false;\n        })\n        .value();\n\n        assert.deepEqual(actual, []);\n        assert.deepEqual(values, _.initial(array));\n\n        values = [];\n\n        actual = _(array).filter(function(value) {\n          values.push(value);\n          return isEven(value);\n        })\n        .initial()\n        .value();\n\n        assert.deepEqual(actual, _.initial(lodashStable.filter(array, isEven)));\n        assert.deepEqual(values, array);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.inRange');\n\n  (function() {\n    QUnit.test('should work with an `end`', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.inRange(3, 5), true);\n      assert.strictEqual(_.inRange(5, 5), false);\n      assert.strictEqual(_.inRange(6, 5), false);\n    });\n\n    QUnit.test('should work with a `start` and `end`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.inRange(1, 1, 5), true);\n      assert.strictEqual(_.inRange(3, 1, 5), true);\n      assert.strictEqual(_.inRange(0, 1, 5), false);\n      assert.strictEqual(_.inRange(5, 1, 5), false);\n    });\n\n    QUnit.test('should treat falsey `start` as `0`', function(assert) {\n      assert.expect(13);\n\n      lodashStable.each(falsey, function(value, index) {\n        if (index) {\n          assert.strictEqual(_.inRange(0, value), false);\n          assert.strictEqual(_.inRange(0, value, 1), true);\n        } else {\n          assert.strictEqual(_.inRange(0), false);\n        }\n      });\n    });\n\n    QUnit.test('should swap `start` and `end` when `start` > `end`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.inRange(2, 5, 1), true);\n      assert.strictEqual(_.inRange(-3, -2, -6), true);\n    });\n\n    QUnit.test('should work with a floating point `n` value', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.inRange(0.5, 5), true);\n      assert.strictEqual(_.inRange(1.2, 1, 5), true);\n      assert.strictEqual(_.inRange(5.2, 5), false);\n      assert.strictEqual(_.inRange(0.5, 1, 5), false);\n    });\n\n    QUnit.test('should coerce arguments to finite numbers', function(assert) {\n      assert.expect(1);\n\n      var actual = [\n        _.inRange(0, '1'),\n        _.inRange(0, '0', 1),\n        _.inRange(0, 0, '1'),\n        _.inRange(0, NaN, 1),\n        _.inRange(-1, -1, NaN)\n      ];\n\n      assert.deepEqual(actual, lodashStable.map(actual, stubTrue));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('intersection methods');\n\n  lodashStable.each(['intersection', 'intersectionBy', 'intersectionWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the intersection of two arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1], [2, 3]);\n      assert.deepEqual(actual, [2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the intersection of multiple arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1, 2, 3], [3, 4], [3, 2]);\n      assert.deepEqual(actual, [3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an array of unique values', function(assert) {\n      assert.expect(1);\n\n      var actual = func([1, 1, 3, 2, 2], [5, 2, 2, 1, 4], [2, 1, 1]);\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a single array', function(assert) {\n      assert.expect(1);\n\n      var actual = func([1, 1, 3, 2, 2]);\n      assert.deepEqual(actual, [1, 3, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `arguments` objects', function(assert) {\n      assert.expect(2);\n\n      var array = [0, 1, null, 3],\n          expected = [1, 3];\n\n      assert.deepEqual(func(array, args), expected);\n      assert.deepEqual(func(args, array), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat `-0` as `0`', function(assert) {\n      assert.expect(1);\n\n      var values = [-0, 0],\n          expected = lodashStable.map(values, lodashStable.constant(['0']));\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.map(func(values, [value]), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      var actual = func([1, NaN, 3], [NaN, 5, NaN]);\n      assert.deepEqual(actual, [NaN]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `-0` as `0`', function(assert) {\n      assert.expect(1);\n\n      var values = [-0, 0],\n          expected = lodashStable.map(values, lodashStable.constant(['0']));\n\n      var actual = lodashStable.map(values, function(value) {\n        var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(value));\n        return lodashStable.map(func(values, largeArray), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `NaN`', function(assert) {\n      assert.expect(1);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubNaN);\n      assert.deepEqual(func([1, NaN, 3], largeArray), [NaN]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of objects', function(assert) {\n      assert.expect(2);\n\n      var object = {},\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, lodashStable.constant(object));\n\n      assert.deepEqual(func([object], largeArray), [object]);\n      assert.deepEqual(func(lodashStable.range(LARGE_ARRAY_SIZE), [1]), [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat values that are not arrays or `arguments` objects as empty', function(assert) {\n      assert.expect(3);\n\n      var array = [0, 1, null, 3];\n      assert.deepEqual(func(array, 3, { '0': 1 }, null), []);\n      assert.deepEqual(func(null, array, null, [2, 3]), []);\n      assert.deepEqual(func(array, null, args, null), []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _([1, 3, 2])[methodName]([5, 2, 1, 4]);\n        assert.ok(wrapped instanceof _);\n        assert.deepEqual(wrapped.value(), [1, 2]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.intersectionBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n      assert.deepEqual(actual, [2.1]);\n\n      actual = _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 1 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.intersectionBy([2.1, 1.2], [2.3, 3.4], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [2.3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.intersectionWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],\n          others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }],\n          actual = _.intersectionWith(objects, others, lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[0]]);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var array = [-0],\n          largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubZero),\n          others = [[0], largeArray],\n          expected = lodashStable.map(others, lodashStable.constant(['-0']));\n\n      var actual = lodashStable.map(others, function(other) {\n        return lodashStable.map(_.intersectionWith(array, other, lodashStable.eq), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.invert');\n\n  (function() {\n    QUnit.test('should invert an object', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1, 'b': 2 },\n          actual = _.invert(object);\n\n      assert.deepEqual(actual, { '1': 'a', '2': 'b' });\n      assert.deepEqual(_.invert(actual), { 'a': '1', 'b': '2' });\n    });\n\n    QUnit.test('should work with values that shadow keys on `Object.prototype`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 'hasOwnProperty', 'b': 'constructor' };\n      assert.deepEqual(_.invert(object), { 'hasOwnProperty': 'a', 'constructor': 'b' });\n    });\n\n    QUnit.test('should work with an object that has a `length` property', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'a', '1': 'b', 'length': 2 };\n      assert.deepEqual(_.invert(object), { 'a': '0', 'b': '1', '2': 'length' });\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var object = { 'a': 1, 'b': 2 },\n            wrapped = _(object).invert();\n\n        assert.ok(wrapped instanceof _);\n        assert.deepEqual(wrapped.value(), { '1': 'a', '2': 'b' });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.invertBy');\n\n  (function() {\n    var object = { 'a': 1, 'b': 2, 'c': 1 };\n\n    QUnit.test('should transform keys by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'group1': ['a', 'c'], 'group2': ['b'] };\n\n      var actual = _.invertBy(object, function(value) {\n        return 'group' + value;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '1': ['a', 'c'], '2': ['b'] }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.invertBy(object, value) : _.invertBy(object);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should only add multiple values to own, not inherited, properties', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 'hasOwnProperty', 'b': 'constructor' },\n          expected = { 'hasOwnProperty': ['a'], 'constructor': ['b'] };\n\n      assert.ok(lodashStable.isEqual(_.invertBy(object), expected));\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(object).invertBy();\n\n        assert.ok(wrapped instanceof _);\n        assert.deepEqual(wrapped.value(), { '1': ['a', 'c'], '2': ['b'] });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.invoke');\n\n  (function() {\n    QUnit.test('should invoke a method on `object`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': lodashStable.constant('A') },\n          actual = _.invoke(object, 'a');\n\n      assert.strictEqual(actual, 'A');\n    });\n\n    QUnit.test('should support invoking with arguments', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': function(a, b) { return [a, b]; } },\n          actual = _.invoke(object, 'a', 1, 2);\n\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should not error on nullish elements', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(value) {\n        try {\n          return _.invoke(value, 'a.b', 1, 2);\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': stubA, '0': stubB },\n          props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        return _.invoke(object, key);\n      });\n\n      assert.deepEqual(actual, ['a', 'a', 'b', 'b']);\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function(a, b) { return [a, b]; } } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var actual = _.invoke(object, path, 1, 2);\n        assert.deepEqual(actual, [1, 2]);\n      });\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function() { return this.c; }, 'c': 1 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.deepEqual(_.invoke(object, path), 1);\n      });\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var object = { 'a': stubOne };\n        assert.strictEqual(_(object).invoke('a'), 1);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var object = { 'a': stubOne };\n        assert.ok(_(object).chain().invoke('a') instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.invokeMap');\n\n  (function() {\n    QUnit.test('should invoke a methods on each element of `collection`', function(assert) {\n      assert.expect(1);\n\n      var array = ['a', 'b', 'c'],\n          actual = _.invokeMap(array, 'toUpperCase');\n\n      assert.deepEqual(actual, ['A', 'B', 'C']);\n    });\n\n    QUnit.test('should support invoking with arguments', function(assert) {\n      assert.expect(1);\n\n      var array = [function() { return slice.call(arguments); }],\n          actual = _.invokeMap(array, 'call', null, 'a', 'b', 'c');\n\n      assert.deepEqual(actual, [['a', 'b', 'c']]);\n    });\n\n    QUnit.test('should work with a function for `methodName`', function(assert) {\n      assert.expect(1);\n\n      var array = ['a', 'b', 'c'];\n\n      var actual = _.invokeMap(array, function(left, right) {\n        return left + this.toUpperCase() + right;\n      }, '(', ')');\n\n      assert.deepEqual(actual, ['(A)', '(B)', '(C)']);\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          actual = _.invokeMap(object, 'toFixed', 1);\n\n      assert.deepEqual(actual, ['1.0', '2.0', '3.0']);\n    });\n\n    QUnit.test('should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.invokeMap(1), []);\n    });\n\n    QUnit.test('should not error on nullish elements', function(assert) {\n      assert.expect(1);\n\n      var array = ['a', null, undefined, 'd'];\n\n      try {\n        var actual = _.invokeMap(array, 'toUpperCase');\n      } catch (e) {}\n\n      assert.deepEqual(actual, ['A', undefined, undefined, 'D']);\n    });\n\n    QUnit.test('should not error on elements with missing properties', function(assert) {\n      assert.expect(1);\n\n      var objects = lodashStable.map([null, undefined, stubOne], function(value) {\n        return { 'a': value };\n      });\n\n      var expected = lodashStable.map(objects, function(object) {\n        return object.a ? object.a() : undefined;\n      });\n\n      try {\n        var actual = _.invokeMap(objects, 'a');\n      } catch (e) {}\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function() { return this.c; }, 'c': 1 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.deepEqual(_.invokeMap([object], path), [1]);\n      });\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = ['a', 'b', 'c'],\n            wrapped = _(array),\n            actual = wrapped.invokeMap('toUpperCase');\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.valueOf(), ['A', 'B', 'C']);\n\n        actual = wrapped.invokeMap(function(left, right) {\n          return left + this.toUpperCase() + right;\n        }, '(', ')');\n\n        assert.ok(actual instanceof _);\n        assert.deepEqual(actual.valueOf(), ['(A)', '(B)', '(C)']);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should support shortcut fusion', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var count = 0,\n            method = function() { count++; return this.index; };\n\n        var array = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n          return { 'index': index, 'method': method };\n        });\n\n        var actual = _(array).invokeMap('method').take(1).value();\n\n        assert.strictEqual(count, 1);\n        assert.deepEqual(actual, [0]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isArguments');\n\n  (function() {\n    QUnit.test('should return `true` for `arguments` objects', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isArguments(args), true);\n      assert.strictEqual(_.isArguments(strictArgs), true);\n    });\n\n    QUnit.test('should return `false` for non `arguments` objects', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isArguments(value) : _.isArguments();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isArguments([1, 2, 3]), false);\n      assert.strictEqual(_.isArguments(true), false);\n      assert.strictEqual(_.isArguments(new Date), false);\n      assert.strictEqual(_.isArguments(new Error), false);\n      assert.strictEqual(_.isArguments(_), false);\n      assert.strictEqual(_.isArguments(slice), false);\n      assert.strictEqual(_.isArguments({ '0': 1, 'callee': noop, 'length': 1 }), false);\n      assert.strictEqual(_.isArguments(1), false);\n      assert.strictEqual(_.isArguments(/x/), false);\n      assert.strictEqual(_.isArguments('a'), false);\n      assert.strictEqual(_.isArguments(symbol), false);\n    });\n\n    QUnit.test('should work with an `arguments` object from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.arguments) {\n        assert.strictEqual(_.isArguments(realm.arguments), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isArray');\n\n  (function() {\n    QUnit.test('should return `true` for arrays', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isArray([1, 2, 3]), true);\n    });\n\n    QUnit.test('should return `false` for non-arrays', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isArray(value) : _.isArray();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isArray(args), false);\n      assert.strictEqual(_.isArray(true), false);\n      assert.strictEqual(_.isArray(new Date), false);\n      assert.strictEqual(_.isArray(new Error), false);\n      assert.strictEqual(_.isArray(_), false);\n      assert.strictEqual(_.isArray(slice), false);\n      assert.strictEqual(_.isArray({ '0': 1, 'length': 1 }), false);\n      assert.strictEqual(_.isArray(1), false);\n      assert.strictEqual(_.isArray(/x/), false);\n      assert.strictEqual(_.isArray('a'), false);\n      assert.strictEqual(_.isArray(symbol), false);\n    });\n\n    QUnit.test('should work with an array from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.array) {\n        assert.strictEqual(_.isArray(realm.array), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isArrayBuffer');\n\n  (function() {\n    QUnit.test('should return `true` for array buffers', function(assert) {\n      assert.expect(1);\n\n      if (ArrayBuffer) {\n        assert.strictEqual(_.isArrayBuffer(arrayBuffer), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non array buffers', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isArrayBuffer(value) : _.isArrayBuffer();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isArrayBuffer(args), false);\n      assert.strictEqual(_.isArrayBuffer([1]), false);\n      assert.strictEqual(_.isArrayBuffer(true), false);\n      assert.strictEqual(_.isArrayBuffer(new Date), false);\n      assert.strictEqual(_.isArrayBuffer(new Error), false);\n      assert.strictEqual(_.isArrayBuffer(_), false);\n      assert.strictEqual(_.isArrayBuffer(slice), false);\n      assert.strictEqual(_.isArrayBuffer({ 'a': 1 }), false);\n      assert.strictEqual(_.isArrayBuffer(1), false);\n      assert.strictEqual(_.isArrayBuffer(/x/), false);\n      assert.strictEqual(_.isArrayBuffer('a'), false);\n      assert.strictEqual(_.isArrayBuffer(symbol), false);\n    });\n\n    QUnit.test('should work with array buffers from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.arrayBuffer) {\n        assert.strictEqual(_.isArrayBuffer(realm.arrayBuffer), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isArrayLike');\n\n  (function() {\n    QUnit.test('should return `true` for array-like values', function(assert) {\n      assert.expect(1);\n\n      var values = [args, [1, 2, 3], { '0': 'a', 'length': 1 }, 'a'],\n          expected = lodashStable.map(values, stubTrue),\n          actual = lodashStable.map(values, _.isArrayLike);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-arrays', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === '';\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isArrayLike(value) : _.isArrayLike();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isArrayLike(true), false);\n      assert.strictEqual(_.isArrayLike(new Date), false);\n      assert.strictEqual(_.isArrayLike(new Error), false);\n      assert.strictEqual(_.isArrayLike(_), false);\n      assert.strictEqual(_.isArrayLike(asyncFunc), false);\n      assert.strictEqual(_.isArrayLike(genFunc), false);\n      assert.strictEqual(_.isArrayLike(slice), false);\n      assert.strictEqual(_.isArrayLike({ 'a': 1 }), false);\n      assert.strictEqual(_.isArrayLike(1), false);\n      assert.strictEqual(_.isArrayLike(/x/), false);\n      assert.strictEqual(_.isArrayLike(symbol), false);\n    });\n\n    QUnit.test('should work with an array from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        var values = [realm.arguments, realm.array, realm.string],\n            expected = lodashStable.map(values, stubTrue),\n            actual = lodashStable.map(values, _.isArrayLike);\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isBoolean');\n\n  (function() {\n    QUnit.test('should return `true` for booleans', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.isBoolean(true), true);\n      assert.strictEqual(_.isBoolean(false), true);\n      assert.strictEqual(_.isBoolean(Object(true)), true);\n      assert.strictEqual(_.isBoolean(Object(false)), true);\n    });\n\n    QUnit.test('should return `false` for non-booleans', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === false;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isBoolean(value) : _.isBoolean();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isBoolean(args), false);\n      assert.strictEqual(_.isBoolean([1, 2, 3]), false);\n      assert.strictEqual(_.isBoolean(new Date), false);\n      assert.strictEqual(_.isBoolean(new Error), false);\n      assert.strictEqual(_.isBoolean(_), false);\n      assert.strictEqual(_.isBoolean(slice), false);\n      assert.strictEqual(_.isBoolean({ 'a': 1 }), false);\n      assert.strictEqual(_.isBoolean(1), false);\n      assert.strictEqual(_.isBoolean(/x/), false);\n      assert.strictEqual(_.isBoolean('a'), false);\n      assert.strictEqual(_.isBoolean(symbol), false);\n    });\n\n    QUnit.test('should work with a boolean from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.boolean) {\n        assert.strictEqual(_.isBoolean(realm.boolean), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isBuffer');\n\n  (function() {\n    QUnit.test('should return `true` for buffers', function(assert) {\n      assert.expect(1);\n\n      if (Buffer) {\n        assert.strictEqual(_.isBuffer(new Buffer(2)), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-buffers', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isBuffer(value) : _.isBuffer();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isBuffer(args), false);\n      assert.strictEqual(_.isBuffer([1]), false);\n      assert.strictEqual(_.isBuffer(true), false);\n      assert.strictEqual(_.isBuffer(new Date), false);\n      assert.strictEqual(_.isBuffer(new Error), false);\n      assert.strictEqual(_.isBuffer(_), false);\n      assert.strictEqual(_.isBuffer(slice), false);\n      assert.strictEqual(_.isBuffer({ 'a': 1 }), false);\n      assert.strictEqual(_.isBuffer(1), false);\n      assert.strictEqual(_.isBuffer(/x/), false);\n      assert.strictEqual(_.isBuffer('a'), false);\n      assert.strictEqual(_.isBuffer(symbol), false);\n    });\n\n    QUnit.test('should return `false` if `Buffer` is not defined', function(assert) {\n      assert.expect(1);\n\n      if (!isStrict && Buffer && lodashBizarro) {\n        assert.strictEqual(lodashBizarro.isBuffer(new Buffer(2)), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isDate');\n\n  (function() {\n    QUnit.test('should return `true` for dates', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isDate(new Date), true);\n    });\n\n    QUnit.test('should return `false` for non-dates', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isDate(value) : _.isDate();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isDate(args), false);\n      assert.strictEqual(_.isDate([1, 2, 3]), false);\n      assert.strictEqual(_.isDate(true), false);\n      assert.strictEqual(_.isDate(new Error), false);\n      assert.strictEqual(_.isDate(_), false);\n      assert.strictEqual(_.isDate(slice), false);\n      assert.strictEqual(_.isDate({ 'a': 1 }), false);\n      assert.strictEqual(_.isDate(1), false);\n      assert.strictEqual(_.isDate(/x/), false);\n      assert.strictEqual(_.isDate('a'), false);\n      assert.strictEqual(_.isDate(symbol), false);\n    });\n\n    QUnit.test('should work with a date object from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.date) {\n        assert.strictEqual(_.isDate(realm.date), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isElement');\n\n  (function() {\n    QUnit.test('should return `true` for elements', function(assert) {\n      assert.expect(1);\n\n      if (document) {\n        assert.strictEqual(_.isElement(body), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `true` for non-plain objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.nodeType = 1;\n      }\n\n      assert.strictEqual(_.isElement(new Foo), true);\n    });\n\n    QUnit.test('should return `false` for non DOM elements', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isElement(value) : _.isElement();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isElement(args), false);\n      assert.strictEqual(_.isElement([1, 2, 3]), false);\n      assert.strictEqual(_.isElement(true), false);\n      assert.strictEqual(_.isElement(new Date), false);\n      assert.strictEqual(_.isElement(new Error), false);\n      assert.strictEqual(_.isElement(_), false);\n      assert.strictEqual(_.isElement(slice), false);\n      assert.strictEqual(_.isElement({ 'a': 1 }), false);\n      assert.strictEqual(_.isElement(1), false);\n      assert.strictEqual(_.isElement(/x/), false);\n      assert.strictEqual(_.isElement('a'), false);\n      assert.strictEqual(_.isElement(symbol), false);\n    });\n\n    QUnit.test('should return `false` for plain objects', function(assert) {\n      assert.expect(6);\n\n      assert.strictEqual(_.isElement({ 'nodeType': 1 }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': Object(1) }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': true }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': [1] }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': '1' }), false);\n      assert.strictEqual(_.isElement({ 'nodeType': '001' }), false);\n    });\n\n    QUnit.test('should work with a DOM element from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.element) {\n        assert.strictEqual(_.isElement(realm.element), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isEmpty');\n\n  (function() {\n    QUnit.test('should return `true` for empty values', function(assert) {\n      assert.expect(10);\n\n      var expected = lodashStable.map(empties, stubTrue),\n          actual = lodashStable.map(empties, _.isEmpty);\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isEmpty(true), true);\n      assert.strictEqual(_.isEmpty(slice), true);\n      assert.strictEqual(_.isEmpty(1), true);\n      assert.strictEqual(_.isEmpty(NaN), true);\n      assert.strictEqual(_.isEmpty(/x/), true);\n      assert.strictEqual(_.isEmpty(symbol), true);\n      assert.strictEqual(_.isEmpty(), true);\n\n      if (Buffer) {\n        assert.strictEqual(_.isEmpty(new Buffer(0)), true);\n        assert.strictEqual(_.isEmpty(new Buffer(1)), false);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should return `false` for non-empty values', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isEmpty([0]), false);\n      assert.strictEqual(_.isEmpty({ 'a': 0 }), false);\n      assert.strictEqual(_.isEmpty('a'), false);\n    });\n\n    QUnit.test('should work with an object that has a `length` property', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isEmpty({ 'length': 0 }), false);\n    });\n\n    QUnit.test('should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isEmpty(args), false);\n    });\n\n    QUnit.test('should work with prototytpe objects', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype = { 'constructor': Foo };\n\n      assert.strictEqual(_.isEmpty(Foo.prototype), true);\n\n      Foo.prototype.a = 1;\n      assert.strictEqual(_.isEmpty(Foo.prototype), false);\n    });\n\n    QUnit.test('should work with jQuery/MooTools DOM query collections', function(assert) {\n      assert.expect(1);\n\n      function Foo(elements) {\n        push.apply(this, elements);\n      }\n      Foo.prototype = { 'length': 0, 'splice': arrayProto.splice };\n\n      assert.strictEqual(_.isEmpty(new Foo([])), true);\n    });\n\n    QUnit.test('should work with maps', function(assert) {\n      assert.expect(4);\n\n      if (Map) {\n        lodashStable.each([new Map, realm.map], function(map) {\n          assert.strictEqual(_.isEmpty(map), true);\n          map.set('a', 1);\n          assert.strictEqual(_.isEmpty(map), false);\n          map.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should work with sets', function(assert) {\n      assert.expect(4);\n\n      if (Set) {\n        lodashStable.each([new Set, realm.set], function(set) {\n          assert.strictEqual(_.isEmpty(set), true);\n          set.add(1);\n          assert.strictEqual(_.isEmpty(set), false);\n          set.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should not treat objects with negative lengths as array-like', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.length = -1;\n\n      assert.strictEqual(_.isEmpty(new Foo), true);\n    });\n\n    QUnit.test('should not treat objects with lengths larger than `MAX_SAFE_INTEGER` as array-like', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.length = MAX_SAFE_INTEGER + 1;\n\n      assert.strictEqual(_.isEmpty(new Foo), true);\n    });\n\n    QUnit.test('should not treat objects with non-number lengths as array-like', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isEmpty({ 'length': '0' }), false);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_({}).isEmpty(), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_({}).chain().isEmpty() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isEqual');\n\n  (function() {\n    var symbol1 = Symbol ? Symbol('a') : true,\n        symbol2 = Symbol ? Symbol('b') : false;\n\n    QUnit.test('should compare primitives', function(assert) {\n      assert.expect(1);\n\n      var pairs = [\n        [1, 1, true], [1, Object(1), true], [1, '1', false], [1, 2, false],\n        [-0, -0, true], [0, 0, true], [0, Object(0), true], [Object(0), Object(0), true], [-0, 0, true], [0, '0', false], [0, null, false],\n        [NaN, NaN, true], [NaN, Object(NaN), true], [Object(NaN), Object(NaN), true], [NaN, 'a', false], [NaN, Infinity, false],\n        ['a', 'a', true], ['a', Object('a'), true], [Object('a'), Object('a'), true], ['a', 'b', false], ['a', ['a'], false],\n        [true, true, true], [true, Object(true), true], [Object(true), Object(true), true], [true, 1, false], [true, 'a', false],\n        [false, false, true], [false, Object(false), true], [Object(false), Object(false), true], [false, 0, false], [false, '', false],\n        [symbol1, symbol1, true], [symbol1, Object(symbol1), true], [Object(symbol1), Object(symbol1), true], [symbol1, symbol2, false],\n        [null, null, true], [null, undefined, false], [null, {}, false], [null, '', false],\n        [undefined, undefined, true], [undefined, null, false], [undefined, '', false]\n      ];\n\n      var expected = lodashStable.map(pairs, function(pair) {\n        return pair[2];\n      });\n\n      var actual = lodashStable.map(pairs, function(pair) {\n        return _.isEqual(pair[0], pair[1]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should compare arrays', function(assert) {\n      assert.expect(6);\n\n      var array1 = [true, null, 1, 'a', undefined],\n          array2 = [true, null, 1, 'a', undefined];\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [[1, 2, 3], new Date(2012, 4, 23), /x/, { 'e': 1 }];\n      array2 = [[1, 2, 3], new Date(2012, 4, 23), /x/, { 'e': 1 }];\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [1];\n      array1[2] = 3;\n\n      array2 = [1];\n      array2[1] = undefined;\n      array2[2] = 3;\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [Object(1), false, Object('a'), /x/, new Date(2012, 4, 23), ['a', 'b', [Object('c')]], { 'a': 1 }];\n      array2 = [1, Object(false), 'a', /x/, new Date(2012, 4, 23), ['a', Object('b'), ['c']], { 'a': 1 }];\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [1, 2, 3];\n      array2 = [3, 2, 1];\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n\n      array1 = [1, 2];\n      array2 = [1, 2, 3];\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n    });\n\n    QUnit.test('should treat arrays with identical values but different non-index properties as equal', function(assert) {\n      assert.expect(3);\n\n      var array1 = [1, 2, 3],\n          array2 = [1, 2, 3];\n\n      array1.every = array1.filter = array1.forEach =\n      array1.indexOf = array1.lastIndexOf = array1.map =\n      array1.some = array1.reduce = array1.reduceRight = null;\n\n      array2.concat = array2.join = array2.pop =\n      array2.reverse = array2.shift = array2.slice =\n      array2.sort = array2.splice = array2.unshift = null;\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = [1, 2, 3];\n      array1.a = 1;\n\n      array2 = [1, 2, 3];\n      array2.b = 1;\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1 = /c/.exec('abcde');\n      array2 = ['c'];\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n    });\n\n    QUnit.test('should compare sparse arrays', function(assert) {\n      assert.expect(3);\n\n      var array = Array(1);\n\n      assert.strictEqual(_.isEqual(array, Array(1)), true);\n      assert.strictEqual(_.isEqual(array, [undefined]), true);\n      assert.strictEqual(_.isEqual(array, Array(2)), false);\n    });\n\n    QUnit.test('should compare plain objects', function(assert) {\n      assert.expect(5);\n\n      var object1 = { 'a': true, 'b': null, 'c': 1, 'd': 'a', 'e': undefined },\n          object2 = { 'a': true, 'b': null, 'c': 1, 'd': 'a', 'e': undefined };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n\n      object1 = { 'a': [1, 2, 3], 'b': new Date(2012, 4, 23), 'c': /x/, 'd': { 'e': 1 } };\n      object2 = { 'a': [1, 2, 3], 'b': new Date(2012, 4, 23), 'c': /x/, 'd': { 'e': 1 } };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n\n      object1 = { 'a': 1, 'b': 2, 'c': 3 };\n      object2 = { 'a': 3, 'b': 2, 'c': 1 };\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n\n      object1 = { 'a': 1, 'b': 2, 'c': 3 };\n      object2 = { 'd': 1, 'e': 2, 'f': 3 };\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n\n      object1 = { 'a': 1, 'b': 2 };\n      object2 = { 'a': 1, 'b': 2, 'c': 3 };\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n    });\n\n    QUnit.test('should compare objects regardless of key order', function(assert) {\n      assert.expect(1);\n\n      var object1 = { 'a': 1, 'b': 2, 'c': 3 },\n          object2 = { 'c': 3, 'a': 1, 'b': 2 };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n    });\n\n    QUnit.test('should compare nested objects', function(assert) {\n      assert.expect(1);\n\n      var object1 = {\n        'a': [1, 2, 3],\n        'b': true,\n        'c': Object(1),\n        'd': 'a',\n        'e': {\n          'f': ['a', Object('b'), 'c'],\n          'g': Object(false),\n          'h': new Date(2012, 4, 23),\n          'i': noop,\n          'j': 'a'\n        }\n      };\n\n      var object2 = {\n        'a': [1, Object(2), 3],\n        'b': Object(true),\n        'c': 1,\n        'd': Object('a'),\n        'e': {\n          'f': ['a', 'b', 'c'],\n          'g': false,\n          'h': new Date(2012, 4, 23),\n          'i': noop,\n          'j': 'a'\n        }\n      };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n    });\n\n    QUnit.test('should compare object instances', function(assert) {\n      assert.expect(4);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.a = 1;\n\n      function Bar() {\n        this.a = 1;\n      }\n      Bar.prototype.a = 2;\n\n      assert.strictEqual(_.isEqual(new Foo, new Foo), true);\n      assert.strictEqual(_.isEqual(new Foo, new Bar), false);\n      assert.strictEqual(_.isEqual({ 'a': 1 }, new Foo), false);\n      assert.strictEqual(_.isEqual({ 'a': 2 }, new Bar), false);\n    });\n\n    QUnit.test('should compare objects with constructor properties', function(assert) {\n      assert.expect(5);\n\n      assert.strictEqual(_.isEqual({ 'constructor': 1 },   { 'constructor': 1 }), true);\n      assert.strictEqual(_.isEqual({ 'constructor': 1 },   { 'constructor': '1' }), false);\n      assert.strictEqual(_.isEqual({ 'constructor': [1] }, { 'constructor': [1] }), true);\n      assert.strictEqual(_.isEqual({ 'constructor': [1] }, { 'constructor': ['1'] }), false);\n      assert.strictEqual(_.isEqual({ 'constructor': Object }, {}), false);\n    });\n\n    QUnit.test('should compare arrays with circular references', function(assert) {\n      assert.expect(4);\n\n      var array1 = [],\n          array2 = [];\n\n      array1.push(array1);\n      array2.push(array2);\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1.push('b');\n      array2.push('b');\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1.push('c');\n      array2.push('d');\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n\n      array1 = ['a', 'b', 'c'];\n      array1[1] = array1;\n      array2 = ['a', ['a', 'b', 'c'], 'c'];\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n    });\n\n    QUnit.test('should have transitive equivalence for circular references of arrays', function(assert) {\n      assert.expect(3);\n\n      var array1 = [],\n          array2 = [array1],\n          array3 = [array2];\n\n      array1[0] = array1;\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n      assert.strictEqual(_.isEqual(array2, array3), true);\n      assert.strictEqual(_.isEqual(array1, array3), true);\n    });\n\n    QUnit.test('should compare objects with circular references', function(assert) {\n      assert.expect(4);\n\n      var object1 = {},\n          object2 = {};\n\n      object1.a = object1;\n      object2.a = object2;\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n\n      object1.b = 0;\n      object2.b = Object(0);\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n\n      object1.c = Object(1);\n      object2.c = Object(2);\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n\n      object1 = { 'a': 1, 'b': 2, 'c': 3 };\n      object1.b = object1;\n      object2 = { 'a': 1, 'b': { 'a': 1, 'b': 2, 'c': 3 }, 'c': 3 };\n\n      assert.strictEqual(_.isEqual(object1, object2), false);\n    });\n\n    QUnit.test('should have transitive equivalence for circular references of objects', function(assert) {\n      assert.expect(3);\n\n      var object1 = {},\n          object2 = { 'a': object1 },\n          object3 = { 'a': object2 };\n\n      object1.a = object1;\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n      assert.strictEqual(_.isEqual(object2, object3), true);\n      assert.strictEqual(_.isEqual(object1, object3), true);\n    });\n\n    QUnit.test('should compare objects with multiple circular references', function(assert) {\n      assert.expect(3);\n\n      var array1 = [{}],\n          array2 = [{}];\n\n      (array1[0].a = array1).push(array1);\n      (array2[0].a = array2).push(array2);\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1[0].b = 0;\n      array2[0].b = Object(0);\n\n      assert.strictEqual(_.isEqual(array1, array2), true);\n\n      array1[0].c = Object(1);\n      array2[0].c = Object(2);\n\n      assert.strictEqual(_.isEqual(array1, array2), false);\n    });\n\n    QUnit.test('should compare objects with complex circular references', function(assert) {\n      assert.expect(1);\n\n      var object1 = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': { 'a': 2 }\n      };\n\n      var object2 = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': { 'a': 2 }\n      };\n\n      object1.foo.b.c.d = object1;\n      object1.bar.b = object1.foo.b;\n\n      object2.foo.b.c.d = object2;\n      object2.bar.b = object2.foo.b;\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n    });\n\n    QUnit.test('should compare objects with shared property values', function(assert) {\n      assert.expect(1);\n\n      var object1 = {\n        'a': [1, 2]\n      };\n\n      var object2 = {\n        'a': [1, 2],\n        'b': [1, 2]\n      };\n\n      object1.b = object1.a;\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n    });\n\n    QUnit.test('should treat objects created by `Object.create(null)` like plain objects', function(assert) {\n      assert.expect(2);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.constructor = null;\n\n      var object1 = create(null);\n      object1.a = 1;\n\n      var object2 = { 'a': 1 };\n\n      assert.strictEqual(_.isEqual(object1, object2), true);\n      assert.strictEqual(_.isEqual(new Foo, object2), false);\n    });\n\n    QUnit.test('should avoid common type coercions', function(assert) {\n      assert.expect(9);\n\n      assert.strictEqual(_.isEqual(true, Object(false)), false);\n      assert.strictEqual(_.isEqual(Object(false), Object(0)), false);\n      assert.strictEqual(_.isEqual(false, Object('')), false);\n      assert.strictEqual(_.isEqual(Object(36), Object('36')), false);\n      assert.strictEqual(_.isEqual(0, ''), false);\n      assert.strictEqual(_.isEqual(1, true), false);\n      assert.strictEqual(_.isEqual(1337756400000, new Date(2012, 4, 23)), false);\n      assert.strictEqual(_.isEqual('36', 36), false);\n      assert.strictEqual(_.isEqual(36, '36'), false);\n    });\n\n    QUnit.test('should compare `arguments` objects', function(assert) {\n      assert.expect(2);\n\n      var args1 = (function() { return arguments; }()),\n          args2 = (function() { return arguments; }()),\n          args3 = (function() { return arguments; }(1, 2));\n\n      assert.strictEqual(_.isEqual(args1, args2), true);\n      assert.strictEqual(_.isEqual(args1, args3), false);\n    });\n\n    QUnit.test('should treat `arguments` objects like `Object` objects', function(assert) {\n      assert.expect(4);\n\n      var object = { '0': 1, '1': 2, '2': 3 };\n\n      function Foo() {}\n      Foo.prototype = object;\n\n      assert.strictEqual(_.isEqual(args, object), true);\n      assert.strictEqual(_.isEqual(object, args), true);\n      assert.strictEqual(_.isEqual(args, new Foo), false);\n      assert.strictEqual(_.isEqual(new Foo, args), false);\n    });\n\n    QUnit.test('should compare array buffers', function(assert) {\n      assert.expect(2);\n\n      if (ArrayBuffer) {\n        var buffer = new Int8Array([-1]).buffer;\n\n        assert.strictEqual(_.isEqual(buffer, new Uint8Array([255]).buffer), true);\n        assert.strictEqual(_.isEqual(buffer, new ArrayBuffer(1)), false);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should compare array views', function(assert) {\n      assert.expect(2);\n\n      lodashStable.times(2, function(index) {\n        var ns = index ? realm : root;\n\n        var pairs = lodashStable.map(arrayViews, function(type, viewIndex) {\n          var otherType = arrayViews[(viewIndex + 1) % arrayViews.length],\n              CtorA = ns[type] || function(n) { this.n = n; },\n              CtorB = ns[otherType] || function(n) { this.n = n; },\n              bufferA = ns[type] ? new ns.ArrayBuffer(8) : 8,\n              bufferB = ns[otherType] ? new ns.ArrayBuffer(8) : 8,\n              bufferC = ns[otherType] ? new ns.ArrayBuffer(16) : 16;\n\n          return [new CtorA(bufferA), new CtorA(bufferA), new CtorB(bufferB), new CtorB(bufferC)];\n        });\n\n        var expected = lodashStable.map(pairs, lodashStable.constant([true, false, false]));\n\n        var actual = lodashStable.map(pairs, function(pair) {\n          return [_.isEqual(pair[0], pair[1]), _.isEqual(pair[0], pair[2]), _.isEqual(pair[2], pair[3])];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should compare buffers', function(assert) {\n      assert.expect(3);\n\n      if (Buffer) {\n        var buffer = new Buffer([1]);\n\n        assert.strictEqual(_.isEqual(buffer, new Buffer([1])), true);\n        assert.strictEqual(_.isEqual(buffer, new Buffer([2])), false);\n        assert.strictEqual(_.isEqual(buffer, new Uint8Array([1])), false);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should compare date objects', function(assert) {\n      assert.expect(4);\n\n      var date = new Date(2012, 4, 23);\n\n      assert.strictEqual(_.isEqual(date, new Date(2012, 4, 23)), true);\n      assert.strictEqual(_.isEqual(new Date('a'), new Date('b')), true);\n      assert.strictEqual(_.isEqual(date, new Date(2013, 3, 25)), false);\n      assert.strictEqual(_.isEqual(date, { 'getTime': lodashStable.constant(+date) }), false);\n    });\n\n    QUnit.test('should compare error objects', function(assert) {\n      assert.expect(1);\n\n      var pairs = lodashStable.map([\n        'Error',\n        'EvalError',\n        'RangeError',\n        'ReferenceError',\n        'SyntaxError',\n        'TypeError',\n        'URIError'\n      ], function(type, index, errorTypes) {\n        var otherType = errorTypes[++index % errorTypes.length],\n            CtorA = root[type],\n            CtorB = root[otherType];\n\n        return [new CtorA('a'), new CtorA('a'), new CtorB('a'), new CtorB('b')];\n      });\n\n      var expected = lodashStable.map(pairs, lodashStable.constant([true, false, false]));\n\n      var actual = lodashStable.map(pairs, function(pair) {\n        return [_.isEqual(pair[0], pair[1]), _.isEqual(pair[0], pair[2]), _.isEqual(pair[2], pair[3])];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should compare functions', function(assert) {\n      assert.expect(2);\n\n      function a() { return 1 + 2; }\n      function b() { return 1 + 2; }\n\n      assert.strictEqual(_.isEqual(a, a), true);\n      assert.strictEqual(_.isEqual(a, b), false);\n    });\n\n    QUnit.test('should compare maps', function(assert) {\n      assert.expect(8);\n\n      if (Map) {\n        lodashStable.each([[map, new Map], [map, realm.map]], function(maps) {\n          var map1 = maps[0],\n              map2 = maps[1];\n\n          map1.set('a', 1);\n          map2.set('b', 2);\n          assert.strictEqual(_.isEqual(map1, map2), false);\n\n          map1.set('b', 2);\n          map2.set('a', 1);\n          assert.strictEqual(_.isEqual(map1, map2), true);\n\n          map1.delete('a');\n          map1.set('a', 1);\n          assert.strictEqual(_.isEqual(map1, map2), true);\n\n          map2.delete('a');\n          assert.strictEqual(_.isEqual(map1, map2), false);\n\n          map1.clear();\n          map2.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('should compare maps with circular references', function(assert) {\n      assert.expect(2);\n\n      if (Map) {\n        var map1 = new Map,\n            map2 = new Map;\n\n        map1.set('a', map1);\n        map2.set('a', map2);\n        assert.strictEqual(_.isEqual(map1, map2), true);\n\n        map1.set('b', 1);\n        map2.set('b', 2);\n        assert.strictEqual(_.isEqual(map1, map2), false);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should compare promises by reference', function(assert) {\n      assert.expect(4);\n\n      if (promise) {\n        lodashStable.each([[promise, Promise.resolve(1)], [promise, realm.promise]], function(promises) {\n          var promise1 = promises[0],\n              promise2 = promises[1];\n\n          assert.strictEqual(_.isEqual(promise1, promise2), false);\n          assert.strictEqual(_.isEqual(promise1, promise1), true);\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should compare regexes', function(assert) {\n      assert.expect(5);\n\n      assert.strictEqual(_.isEqual(/x/gim, /x/gim), true);\n      assert.strictEqual(_.isEqual(/x/gim, /x/mgi), true);\n      assert.strictEqual(_.isEqual(/x/gi, /x/g), false);\n      assert.strictEqual(_.isEqual(/x/, /y/), false);\n      assert.strictEqual(_.isEqual(/x/g, { 'global': true, 'ignoreCase': false, 'multiline': false, 'source': 'x' }), false);\n    });\n\n    QUnit.test('should compare sets', function(assert) {\n      assert.expect(8);\n\n      if (Set) {\n        lodashStable.each([[set, new Set], [set, realm.set]], function(sets) {\n          var set1 = sets[0],\n              set2 = sets[1];\n\n          set1.add(1);\n          set2.add(2);\n          assert.strictEqual(_.isEqual(set1, set2), false);\n\n          set1.add(2);\n          set2.add(1);\n          assert.strictEqual(_.isEqual(set1, set2), true);\n\n          set1.delete(1);\n          set1.add(1);\n          assert.strictEqual(_.isEqual(set1, set2), true);\n\n          set2.delete(1);\n          assert.strictEqual(_.isEqual(set1, set2), false);\n\n          set1.clear();\n          set2.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('should compare sets with circular references', function(assert) {\n      assert.expect(2);\n\n      if (Set) {\n        var set1 = new Set,\n            set2 = new Set;\n\n        set1.add(set1);\n        set2.add(set2);\n        assert.strictEqual(_.isEqual(set1, set2), true);\n\n        set1.add(1);\n        set2.add(2);\n        assert.strictEqual(_.isEqual(set1, set2), false);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should compare symbol properties', function(assert) {\n      assert.expect(3);\n\n      if (Symbol) {\n        var object1 = { 'a': 1 },\n            object2 = { 'a': 1 };\n\n        object1[symbol1] = { 'a': { 'b': 2 } };\n        object2[symbol1] = { 'a': { 'b': 2 } };\n\n        defineProperty(object2, symbol2, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 2\n        });\n\n        assert.strictEqual(_.isEqual(object1, object2), true);\n\n        object2[symbol1] = { 'a': 1 };\n        assert.strictEqual(_.isEqual(object1, object2), false);\n\n        delete object2[symbol1];\n        object2[Symbol('a')] = { 'a': { 'b': 2 } };\n        assert.strictEqual(_.isEqual(object1, object2), false);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should compare wrapped values', function(assert) {\n      assert.expect(32);\n\n      var stamp = +new Date;\n\n      var values = [\n        [[1, 2], [1, 2], [1, 2, 3]],\n        [true, true, false],\n        [new Date(stamp), new Date(stamp), new Date(stamp - 100)],\n        [{ 'a': 1, 'b': 2 }, { 'a': 1, 'b': 2 }, { 'a': 1, 'b': 1 }],\n        [1, 1, 2],\n        [NaN, NaN, Infinity],\n        [/x/, /x/, /x/i],\n        ['a', 'a', 'A']\n      ];\n\n      lodashStable.each(values, function(vals) {\n        if (!isNpm) {\n          var wrapped1 = _(vals[0]),\n              wrapped2 = _(vals[1]),\n              actual = wrapped1.isEqual(wrapped2);\n\n          assert.strictEqual(actual, true);\n          assert.strictEqual(_.isEqual(_(actual), _(true)), true);\n\n          wrapped1 = _(vals[0]);\n          wrapped2 = _(vals[2]);\n\n          actual = wrapped1.isEqual(wrapped2);\n          assert.strictEqual(actual, false);\n          assert.strictEqual(_.isEqual(_(actual), _(false)), true);\n        }\n        else {\n          skipAssert(assert, 4);\n        }\n      });\n    });\n\n    QUnit.test('should compare wrapped and non-wrapped values', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var object1 = _({ 'a': 1, 'b': 2 }),\n            object2 = { 'a': 1, 'b': 2 };\n\n        assert.strictEqual(object1.isEqual(object2), true);\n        assert.strictEqual(_.isEqual(object1, object2), true);\n\n        object1 = _({ 'a': 1, 'b': 2 });\n        object2 = { 'a': 1, 'b': 1 };\n\n        assert.strictEqual(object1.isEqual(object2), false);\n        assert.strictEqual(_.isEqual(object1, object2), false);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should work as an iteratee for `_.every`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.every([1, 1, 1], lodashStable.partial(_.isEqual, 1));\n      assert.ok(actual);\n    });\n\n    QUnit.test('should not error on DOM elements', function(assert) {\n      assert.expect(1);\n\n      if (document) {\n        var element1 = document.createElement('div'),\n            element2 = element1.cloneNode(true);\n\n        try {\n          assert.strictEqual(_.isEqual(element1, element2), false);\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `true` for like-objects from different documents', function(assert) {\n      assert.expect(4);\n\n      if (realm.object) {\n        assert.strictEqual(_.isEqual([1], realm.array), true);\n        assert.strictEqual(_.isEqual([2], realm.array), false);\n        assert.strictEqual(_.isEqual({ 'a': 1 }, realm.object), true);\n        assert.strictEqual(_.isEqual({ 'a': 2 }, realm.object), false);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should return `false` for objects with custom `toString` methods', function(assert) {\n      assert.expect(1);\n\n      var primitive,\n          object = { 'toString': function() { return primitive; } },\n          values = [true, null, 1, 'a', undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        primitive = value;\n        return _.isEqual(object, value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_('a').isEqual('a'), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_('a').chain().isEqual('a') instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isEqualWith');\n\n  (function() {\n    QUnit.test('should provide correct `customizer` arguments', function(assert) {\n      assert.expect(1);\n\n      var argsList = [],\n          object1 = { 'a': [1, 2], 'b': null },\n          object2 = { 'a': [1, 2], 'b': null };\n\n      object1.b = object2;\n      object2.b = object1;\n\n      var expected = [\n        [object1, object2],\n        [object1.a, object2.a, 'a', object1, object2],\n        [object1.a[0], object2.a[0], 0, object1.a, object2.a],\n        [object1.a[1], object2.a[1], 1, object1.a, object2.a],\n        [object1.b, object2.b, 'b', object1.b, object2.b]\n      ];\n\n      _.isEqualWith(object1, object2, function(assert) {\n        var length = arguments.length,\n            args = slice.call(arguments, 0, length - (length > 2 ? 1 : 0));\n\n        argsList.push(args);\n      });\n\n      assert.deepEqual(argsList, expected);\n    });\n\n    QUnit.test('should handle comparisons when `customizer` returns `undefined`', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isEqualWith('a', 'a', noop), true);\n      assert.strictEqual(_.isEqualWith(['a'], ['a'], noop), true);\n      assert.strictEqual(_.isEqualWith({ '0': 'a' }, { '0': 'a' }, noop), true);\n    });\n\n    QUnit.test('should not handle comparisons when `customizer` returns `true`', function(assert) {\n      assert.expect(3);\n\n      var customizer = function(value) {\n        return _.isString(value) || undefined;\n      };\n\n      assert.strictEqual(_.isEqualWith('a', 'b', customizer), true);\n      assert.strictEqual(_.isEqualWith(['a'], ['b'], customizer), true);\n      assert.strictEqual(_.isEqualWith({ '0': 'a' }, { '0': 'b' }, customizer), true);\n    });\n\n    QUnit.test('should not handle comparisons when `customizer` returns `false`', function(assert) {\n      assert.expect(3);\n\n      var customizer = function(value) {\n        return _.isString(value) ? false : undefined;\n      };\n\n      assert.strictEqual(_.isEqualWith('a', 'a', customizer), false);\n      assert.strictEqual(_.isEqualWith(['a'], ['a'], customizer), false);\n      assert.strictEqual(_.isEqualWith({ '0': 'a' }, { '0': 'a' }, customizer), false);\n    });\n\n    QUnit.test('should return a boolean value even when `customizer` does not', function(assert) {\n      assert.expect(2);\n\n      var actual = _.isEqualWith('a', 'b', stubC);\n      assert.strictEqual(actual, true);\n\n      var values = _.without(falsey, undefined),\n          expected = lodashStable.map(values, stubFalse);\n\n      actual = [];\n      lodashStable.each(values, function(value) {\n        actual.push(_.isEqualWith('a', 'a', lodashStable.constant(value)));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ensure `customizer` is a function', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3],\n          eq = _.partial(_.isEqualWith, array),\n          actual = lodashStable.map([array, [1, 0, 3]], eq);\n\n      assert.deepEqual(actual, [true, false]);\n    });\n\n    QUnit.test('should call `customizer` for values maps and sets', function(assert) {\n      assert.expect(2);\n\n      var value = { 'a': { 'b': 2 } };\n\n      if (Map) {\n        var map1 = new Map;\n        map1.set('a', value);\n\n        var map2 = new Map;\n        map2.set('a', value);\n      }\n      if (Set) {\n        var set1 = new Set;\n        set1.add(value);\n\n        var set2 = new Set;\n        set2.add(value);\n      }\n      lodashStable.each([[map1, map2], [set1, set2]], function(pair, index) {\n        if (pair[0]) {\n          var argsList = [],\n              array = lodashStable.toArray(pair[0]);\n\n          var expected = [\n            [pair[0], pair[1]],\n            [array[0], array[0], 0, array, array],\n            [array[0][0], array[0][0], 0, array[0], array[0]],\n            [array[0][1], array[0][1], 1, array[0], array[0]]\n          ];\n\n          if (index) {\n            expected.length = 2;\n          }\n          _.isEqualWith(pair[0], pair[1], function() {\n            var length = arguments.length,\n                args = slice.call(arguments, 0, length - (length > 2 ? 1 : 0));\n\n            argsList.push(args);\n          });\n\n          assert.deepEqual(argsList, expected, index ? 'Set' : 'Map');\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isError');\n\n  (function() {\n    QUnit.test('should return `true` for error objects', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(errors, stubTrue);\n\n      var actual = lodashStable.map(errors, function(error) {\n        return _.isError(error) === true;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `true` for subclassed values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isError(new CustomError('x')), true);\n    });\n\n    QUnit.test('should return `false` for non error objects', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isError(value) : _.isError();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isError(args), false);\n      assert.strictEqual(_.isError([1, 2, 3]), false);\n      assert.strictEqual(_.isError(true), false);\n      assert.strictEqual(_.isError(new Date), false);\n      assert.strictEqual(_.isError(_), false);\n      assert.strictEqual(_.isError(slice), false);\n      assert.strictEqual(_.isError({ 'a': 1 }), false);\n      assert.strictEqual(_.isError(1), false);\n      assert.strictEqual(_.isError(/x/), false);\n      assert.strictEqual(_.isError('a'), false);\n      assert.strictEqual(_.isError(symbol), false);\n    });\n\n    QUnit.test('should return `false` for plain objects', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isError({ 'name': 'Error', 'message': '' }), false);\n    });\n\n    QUnit.test('should work with an error object from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.errors) {\n        var expected = lodashStable.map(realm.errors, stubTrue);\n\n        var actual = lodashStable.map(realm.errors, function(error) {\n          return _.isError(error) === true;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isFinite');\n\n  (function() {\n    QUnit.test('should return `true` for finite values', function(assert) {\n      assert.expect(1);\n\n      var values = [0, 1, 3.14, -1],\n          expected = lodashStable.map(values, stubTrue),\n          actual = lodashStable.map(values, _.isFinite);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-finite values', function(assert) {\n      assert.expect(1);\n\n      var values = [NaN, Infinity, -Infinity, Object(1)],\n          expected = lodashStable.map(values, stubFalse),\n          actual = lodashStable.map(values, _.isFinite);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-numeric values', function(assert) {\n      assert.expect(10);\n\n      var values = [undefined, [], true, '', ' ', '2px'],\n          expected = lodashStable.map(values, stubFalse),\n          actual = lodashStable.map(values, _.isFinite);\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isFinite(args), false);\n      assert.strictEqual(_.isFinite([1, 2, 3]), false);\n      assert.strictEqual(_.isFinite(true), false);\n      assert.strictEqual(_.isFinite(new Date), false);\n      assert.strictEqual(_.isFinite(new Error), false);\n      assert.strictEqual(_.isFinite({ 'a': 1 }), false);\n      assert.strictEqual(_.isFinite(/x/), false);\n      assert.strictEqual(_.isFinite('a'), false);\n      assert.strictEqual(_.isFinite(symbol), false);\n    });\n\n    QUnit.test('should return `false` for numeric string values', function(assert) {\n      assert.expect(1);\n\n      var values = ['2', '0', '08'],\n          expected = lodashStable.map(values, stubFalse),\n          actual = lodashStable.map(values, _.isFinite);\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isFunction');\n\n  (function() {\n    QUnit.test('should return `true` for functions', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isFunction(_), true);\n      assert.strictEqual(_.isFunction(slice), true);\n    });\n\n    QUnit.test('should return `true` for async functions', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isFunction(asyncFunc), typeof asyncFunc == 'function');\n    });\n\n    QUnit.test('should return `true` for generator functions', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isFunction(genFunc), typeof genFunc == 'function');\n    });\n\n    QUnit.test('should return `true` for the `Proxy` constructor', function(assert) {\n      assert.expect(1);\n\n      if (Proxy) {\n        assert.strictEqual(_.isFunction(Proxy), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `true` for array view constructors', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(arrayViews, function(type) {\n        return objToString.call(root[type]) == funcTag;\n      });\n\n      var actual = lodashStable.map(arrayViews, function(type) {\n        return _.isFunction(root[type]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-functions', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isFunction(value) : _.isFunction();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isFunction(args), false);\n      assert.strictEqual(_.isFunction([1, 2, 3]), false);\n      assert.strictEqual(_.isFunction(true), false);\n      assert.strictEqual(_.isFunction(new Date), false);\n      assert.strictEqual(_.isFunction(new Error), false);\n      assert.strictEqual(_.isFunction({ 'a': 1 }), false);\n      assert.strictEqual(_.isFunction(1), false);\n      assert.strictEqual(_.isFunction(/x/), false);\n      assert.strictEqual(_.isFunction('a'), false);\n      assert.strictEqual(_.isFunction(symbol), false);\n\n      if (document) {\n        assert.strictEqual(_.isFunction(document.getElementsByTagName('body')), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with a function from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.function) {\n        assert.strictEqual(_.isFunction(realm.function), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('isInteger methods');\n\n  lodashStable.each(['isInteger', 'isSafeInteger'], function(methodName) {\n    var func = _[methodName],\n        isSafe = methodName == 'isSafeInteger';\n\n    QUnit.test('`_.' + methodName + '` should return `true` for integer values', function(assert) {\n      assert.expect(2);\n\n      var values = [-1, 0, 1],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value);\n      });\n\n      assert.deepEqual(actual, expected);\n      assert.strictEqual(func(MAX_INTEGER), !isSafe);\n    });\n\n    QUnit.test('should return `false` for non-integer number values', function(assert) {\n      assert.expect(1);\n\n      var values = [NaN, Infinity, -Infinity, Object(1), 3.14],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-numeric values', function(assert) {\n      assert.expect(10);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === 0;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? func(value) : func();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(func(args), false);\n      assert.strictEqual(func([1, 2, 3]), false);\n      assert.strictEqual(func(true), false);\n      assert.strictEqual(func(new Date), false);\n      assert.strictEqual(func(new Error), false);\n      assert.strictEqual(func({ 'a': 1 }), false);\n      assert.strictEqual(func(/x/), false);\n      assert.strictEqual(func('a'), false);\n      assert.strictEqual(func(symbol), false);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isLength');\n\n  (function() {\n    QUnit.test('should return `true` for lengths', function(assert) {\n      assert.expect(1);\n\n      var values = [0, 3, MAX_SAFE_INTEGER],\n          expected = lodashStable.map(values, stubTrue),\n          actual = lodashStable.map(values, _.isLength);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-lengths', function(assert) {\n      assert.expect(1);\n\n      var values = [-1, '1', 1.1, MAX_SAFE_INTEGER + 1],\n          expected = lodashStable.map(values, stubFalse),\n          actual = lodashStable.map(values, _.isLength);\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isMap');\n\n  (function() {\n    QUnit.test('should return `true` for maps', function(assert) {\n      assert.expect(1);\n\n      if (Map) {\n        assert.strictEqual(_.isMap(map), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-maps', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isMap(value) : _.isMap();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isMap(args), false);\n      assert.strictEqual(_.isMap([1, 2, 3]), false);\n      assert.strictEqual(_.isMap(true), false);\n      assert.strictEqual(_.isMap(new Date), false);\n      assert.strictEqual(_.isMap(new Error), false);\n      assert.strictEqual(_.isMap(_), false);\n      assert.strictEqual(_.isMap(slice), false);\n      assert.strictEqual(_.isMap({ 'a': 1 }), false);\n      assert.strictEqual(_.isMap(1), false);\n      assert.strictEqual(_.isMap(/x/), false);\n      assert.strictEqual(_.isMap('a'), false);\n      assert.strictEqual(_.isMap(symbol), false);\n      assert.strictEqual(_.isMap(weakMap), false);\n    });\n\n    QUnit.test('should work for objects with a non-function `constructor` (test in IE 11)', function(assert) {\n      assert.expect(1);\n\n      var values = [false, true],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.isMap({ 'constructor': value });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with maps from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.map) {\n        assert.strictEqual(_.isMap(realm.map), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isMatchWith');\n\n  (function() {\n    QUnit.test('should provide correct `customizer` arguments', function(assert) {\n      assert.expect(1);\n\n      var argsList = [],\n          object1 = { 'a': [1, 2], 'b': null },\n          object2 = { 'a': [1, 2], 'b': null };\n\n      object1.b = object2;\n      object2.b = object1;\n\n      var expected = [\n        [object1.a, object2.a, 'a', object1, object2],\n        [object1.a[0], object2.a[0], 0, object1.a, object2.a],\n        [object1.a[1], object2.a[1], 1, object1.a, object2.a],\n        [object1.b, object2.b, 'b', object1, object2],\n        [object1.b.a, object2.b.a, 'a', object1.b, object2.b],\n        [object1.b.a[0], object2.b.a[0], 0, object1.b.a, object2.b.a],\n        [object1.b.a[1], object2.b.a[1], 1, object1.b.a, object2.b.a],\n        [object1.b.b, object2.b.b, 'b', object1.b, object2.b]\n      ];\n\n      _.isMatchWith(object1, object2, function(assert) {\n        argsList.push(slice.call(arguments, 0, -1));\n      });\n\n      assert.deepEqual(argsList, expected);\n    });\n\n    QUnit.test('should handle comparisons when `customizer` returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isMatchWith({ 'a': 1 }, { 'a': 1 }, noop), true);\n    });\n\n    QUnit.test('should not handle comparisons when `customizer` returns `true`', function(assert) {\n      assert.expect(2);\n\n      var customizer = function(value) {\n        return _.isString(value) || undefined;\n      };\n\n      assert.strictEqual(_.isMatchWith(['a'], ['b'], customizer), true);\n      assert.strictEqual(_.isMatchWith({ '0': 'a' }, { '0': 'b' }, customizer), true);\n    });\n\n    QUnit.test('should not handle comparisons when `customizer` returns `false`', function(assert) {\n      assert.expect(2);\n\n      var customizer = function(value) {\n        return _.isString(value) ? false : undefined;\n      };\n\n      assert.strictEqual(_.isMatchWith(['a'], ['a'], customizer), false);\n      assert.strictEqual(_.isMatchWith({ '0': 'a' }, { '0': 'a' }, customizer), false);\n    });\n\n    QUnit.test('should return a boolean value even when `customizer` does not', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1 },\n          actual = _.isMatchWith(object, { 'a': 1 }, stubA);\n\n      assert.strictEqual(actual, true);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      actual = [];\n      lodashStable.each(falsey, function(value) {\n        actual.push(_.isMatchWith(object, { 'a': 2 }, lodashStable.constant(value)));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should provide `stack` to `customizer`', function(assert) {\n      assert.expect(1);\n\n      var actual;\n\n      _.isMatchWith({ 'a': 1 }, { 'a': 1 }, function() {\n        actual = _.last(arguments);\n      });\n\n      assert.ok(isNpm\n        ? actual.constructor.name == 'Stack'\n        : actual instanceof mapCaches.Stack\n      );\n    });\n\n    QUnit.test('should ensure `customizer` is a function', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1 },\n          matches = _.partial(_.isMatchWith, object),\n          actual = lodashStable.map([object, { 'a': 2 }], matches);\n\n      assert.deepEqual(actual, [true, false]);\n    });\n\n    QUnit.test('should call `customizer` for values maps and sets', function(assert) {\n      assert.expect(2);\n\n      var value = { 'a': { 'b': 2 } };\n\n      if (Map) {\n        var map1 = new Map;\n        map1.set('a', value);\n\n        var map2 = new Map;\n        map2.set('a', value);\n      }\n      if (Set) {\n        var set1 = new Set;\n        set1.add(value);\n\n        var set2 = new Set;\n        set2.add(value);\n      }\n      lodashStable.each([[map1, map2], [set1, set2]], function(pair, index) {\n        if (pair[0]) {\n          var argsList = [],\n              array = lodashStable.toArray(pair[0]),\n              object1 = { 'a': pair[0] },\n              object2 = { 'a': pair[1] };\n\n          var expected = [\n            [pair[0], pair[1], 'a', object1, object2],\n            [array[0], array[0], 0, array, array],\n            [array[0][0], array[0][0], 0, array[0], array[0]],\n            [array[0][1], array[0][1], 1, array[0], array[0]]\n          ];\n\n          if (index) {\n            expected.length = 2;\n          }\n          _.isMatchWith({ 'a': pair[0] }, { 'a': pair[1] }, function() {\n            argsList.push(slice.call(arguments, 0, -1));\n          });\n\n          assert.deepEqual(argsList, expected, index ? 'Set' : 'Map');\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNaN');\n\n  (function() {\n    QUnit.test('should return `true` for NaNs', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isNaN(NaN), true);\n      assert.strictEqual(_.isNaN(Object(NaN)), true);\n    });\n\n    QUnit.test('should return `false` for non-NaNs', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value !== value;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNaN(value) : _.isNaN();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNaN(args), false);\n      assert.strictEqual(_.isNaN([1, 2, 3]), false);\n      assert.strictEqual(_.isNaN(true), false);\n      assert.strictEqual(_.isNaN(new Date), false);\n      assert.strictEqual(_.isNaN(new Error), false);\n      assert.strictEqual(_.isNaN(_), false);\n      assert.strictEqual(_.isNaN(slice), false);\n      assert.strictEqual(_.isNaN({ 'a': 1 }), false);\n      assert.strictEqual(_.isNaN(1), false);\n      assert.strictEqual(_.isNaN(Object(1)), false);\n      assert.strictEqual(_.isNaN(/x/), false);\n      assert.strictEqual(_.isNaN('a'), false);\n      assert.strictEqual(_.isNaN(symbol), false);\n    });\n\n    QUnit.test('should work with `NaN` from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        assert.strictEqual(_.isNaN(realm.nan), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNative');\n\n  (function() {\n    QUnit.test('should return `true` for native methods', function(assert) {\n      assert.expect(1);\n\n      var values = [Array, body && body.cloneNode, create, root.encodeURI, Promise, slice, Uint8Array],\n          expected = lodashStable.map(values, Boolean),\n          actual = lodashStable.map(values, _.isNative);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non-native methods', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNative(value) : _.isNative();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNative(args), false);\n      assert.strictEqual(_.isNative([1, 2, 3]), false);\n      assert.strictEqual(_.isNative(true), false);\n      assert.strictEqual(_.isNative(new Date), false);\n      assert.strictEqual(_.isNative(new Error), false);\n      assert.strictEqual(_.isNative(_), false);\n      assert.strictEqual(_.isNative({ 'a': 1 }), false);\n      assert.strictEqual(_.isNative(1), false);\n      assert.strictEqual(_.isNative(/x/), false);\n      assert.strictEqual(_.isNative('a'), false);\n      assert.strictEqual(_.isNative(symbol), false);\n    });\n\n    QUnit.test('should work with native functions from another realm', function(assert) {\n      assert.expect(2);\n\n      if (realm.element) {\n        assert.strictEqual(_.isNative(realm.element.cloneNode), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n      if (realm.object) {\n        assert.strictEqual(_.isNative(realm.object.valueOf), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should throw an error if core-js is detected', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var lodash = _.runInContext({\n          '__core-js_shared__': {}\n        });\n\n        assert.raises(function() { lodash.isNative(noop); });\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should detect methods masquerading as native (test in Node.js)', function(assert) {\n      assert.expect(2);\n\n      if (!amd && _._baseEach) {\n        var path = require('path'),\n            basePath = path.dirname(filePath),\n            uid = 'e0gvgyrad1jor',\n            coreKey = '__core-js_shared__',\n            fakeSrcKey = 'Symbol(src)_1.' + uid;\n\n        root[coreKey] = { 'keys': { 'IE_PROTO': 'Symbol(IE_PROTO)_3.' + uid } };\n        emptyObject(require.cache);\n\n        var baseIsNative = interopRequire(path.join(basePath, '_baseIsNative'));\n        assert.strictEqual(baseIsNative(slice), true);\n\n        slice[fakeSrcKey] = slice + '';\n        assert.strictEqual(baseIsNative(slice), false);\n\n        delete slice[fakeSrcKey];\n        delete root[coreKey];\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNil');\n\n  (function() {\n    QUnit.test('should return `true` for nullish values', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isNil(null), true);\n      assert.strictEqual(_.isNil(), true);\n      assert.strictEqual(_.isNil(undefined), true);\n    });\n\n    QUnit.test('should return `false` for non-nullish values', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value == null;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNil(value) : _.isNil();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNil(args), false);\n      assert.strictEqual(_.isNil([1, 2, 3]), false);\n      assert.strictEqual(_.isNil(true), false);\n      assert.strictEqual(_.isNil(new Date), false);\n      assert.strictEqual(_.isNil(new Error), false);\n      assert.strictEqual(_.isNil(_), false);\n      assert.strictEqual(_.isNil(slice), false);\n      assert.strictEqual(_.isNil({ 'a': 1 }), false);\n      assert.strictEqual(_.isNil(1), false);\n      assert.strictEqual(_.isNil(/x/), false);\n      assert.strictEqual(_.isNil('a'), false);\n\n      if (Symbol) {\n        assert.strictEqual(_.isNil(symbol), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with nils from another realm', function(assert) {\n      assert.expect(2);\n\n      if (realm.object) {\n        assert.strictEqual(_.isNil(realm.null), true);\n        assert.strictEqual(_.isNil(realm.undefined), true);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNull');\n\n  (function() {\n    QUnit.test('should return `true` for `null` values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isNull(null), true);\n    });\n\n    QUnit.test('should return `false` for non `null` values', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === null;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNull(value) : _.isNull();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNull(args), false);\n      assert.strictEqual(_.isNull([1, 2, 3]), false);\n      assert.strictEqual(_.isNull(true), false);\n      assert.strictEqual(_.isNull(new Date), false);\n      assert.strictEqual(_.isNull(new Error), false);\n      assert.strictEqual(_.isNull(_), false);\n      assert.strictEqual(_.isNull(slice), false);\n      assert.strictEqual(_.isNull({ 'a': 1 }), false);\n      assert.strictEqual(_.isNull(1), false);\n      assert.strictEqual(_.isNull(/x/), false);\n      assert.strictEqual(_.isNull('a'), false);\n      assert.strictEqual(_.isNull(symbol), false);\n    });\n\n    QUnit.test('should work with nulls from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        assert.strictEqual(_.isNull(realm.null), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isNumber');\n\n  (function() {\n    QUnit.test('should return `true` for numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isNumber(0), true);\n      assert.strictEqual(_.isNumber(Object(0)), true);\n      assert.strictEqual(_.isNumber(NaN), true);\n    });\n\n    QUnit.test('should return `false` for non-numbers', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return typeof value == 'number';\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isNumber(value) : _.isNumber();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isNumber(args), false);\n      assert.strictEqual(_.isNumber([1, 2, 3]), false);\n      assert.strictEqual(_.isNumber(true), false);\n      assert.strictEqual(_.isNumber(new Date), false);\n      assert.strictEqual(_.isNumber(new Error), false);\n      assert.strictEqual(_.isNumber(_), false);\n      assert.strictEqual(_.isNumber(slice), false);\n      assert.strictEqual(_.isNumber({ 'a': 1 }), false);\n      assert.strictEqual(_.isNumber(/x/), false);\n      assert.strictEqual(_.isNumber('a'), false);\n      assert.strictEqual(_.isNumber(symbol), false);\n    });\n\n    QUnit.test('should work with numbers from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.number) {\n        assert.strictEqual(_.isNumber(realm.number), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isObject');\n\n  (function() {\n    QUnit.test('should return `true` for objects', function(assert) {\n      assert.expect(13);\n\n      assert.strictEqual(_.isObject(args), true);\n      assert.strictEqual(_.isObject([1, 2, 3]), true);\n      assert.strictEqual(_.isObject(Object(false)), true);\n      assert.strictEqual(_.isObject(new Date), true);\n      assert.strictEqual(_.isObject(new Error), true);\n      assert.strictEqual(_.isObject(_), true);\n      assert.strictEqual(_.isObject(slice), true);\n      assert.strictEqual(_.isObject({ 'a': 1 }), true);\n      assert.strictEqual(_.isObject(Object(0)), true);\n      assert.strictEqual(_.isObject(/x/), true);\n      assert.strictEqual(_.isObject(Object('a')), true);\n\n      if (document) {\n        assert.strictEqual(_.isObject(body), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n      if (Symbol) {\n        assert.strictEqual(_.isObject(Object(symbol)), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-objects', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(true, 1, 'a', symbol),\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.isObject(value) : _.isObject();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with objects from another realm', function(assert) {\n      assert.expect(8);\n\n      if (realm.element) {\n        assert.strictEqual(_.isObject(realm.element), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n      if (realm.object) {\n        assert.strictEqual(_.isObject(realm.boolean), true);\n        assert.strictEqual(_.isObject(realm.date), true);\n        assert.strictEqual(_.isObject(realm.function), true);\n        assert.strictEqual(_.isObject(realm.number), true);\n        assert.strictEqual(_.isObject(realm.object), true);\n        assert.strictEqual(_.isObject(realm.regexp), true);\n        assert.strictEqual(_.isObject(realm.string), true);\n      }\n      else {\n        skipAssert(assert, 7);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isObjectLike');\n\n  (function() {\n    QUnit.test('should return `true` for objects', function(assert) {\n      assert.expect(9);\n\n      assert.strictEqual(_.isObjectLike(args), true);\n      assert.strictEqual(_.isObjectLike([1, 2, 3]), true);\n      assert.strictEqual(_.isObjectLike(Object(false)), true);\n      assert.strictEqual(_.isObjectLike(new Date), true);\n      assert.strictEqual(_.isObjectLike(new Error), true);\n      assert.strictEqual(_.isObjectLike({ 'a': 1 }), true);\n      assert.strictEqual(_.isObjectLike(Object(0)), true);\n      assert.strictEqual(_.isObjectLike(/x/), true);\n      assert.strictEqual(_.isObjectLike(Object('a')), true);\n    });\n\n    QUnit.test('should return `false` for non-objects', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(true, _, slice, 1, 'a', symbol),\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.isObjectLike(value) : _.isObjectLike();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with objects from another realm', function(assert) {\n      assert.expect(6);\n\n      if (realm.object) {\n        assert.strictEqual(_.isObjectLike(realm.boolean), true);\n        assert.strictEqual(_.isObjectLike(realm.date), true);\n        assert.strictEqual(_.isObjectLike(realm.number), true);\n        assert.strictEqual(_.isObjectLike(realm.object), true);\n        assert.strictEqual(_.isObjectLike(realm.regexp), true);\n        assert.strictEqual(_.isObjectLike(realm.string), true);\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isPlainObject');\n\n  (function() {\n    var element = document && document.createElement('div');\n\n    QUnit.test('should detect plain objects', function(assert) {\n      assert.expect(5);\n\n      function Foo(a) {\n        this.a = 1;\n      }\n\n      assert.strictEqual(_.isPlainObject({}), true);\n      assert.strictEqual(_.isPlainObject({ 'a': 1 }), true);\n      assert.strictEqual(_.isPlainObject({ 'constructor': Foo }), true);\n      assert.strictEqual(_.isPlainObject([1, 2, 3]), false);\n      assert.strictEqual(_.isPlainObject(new Foo(1)), false);\n    });\n\n    QUnit.test('should return `true` for objects with a `[[Prototype]]` of `null`', function(assert) {\n      assert.expect(2);\n\n      var object = create(null);\n      assert.strictEqual(_.isPlainObject(object), true);\n\n      object.constructor = objectProto.constructor;\n      assert.strictEqual(_.isPlainObject(object), true);\n    });\n\n    QUnit.test('should return `true` for objects with a `valueOf` property', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.isPlainObject({ 'valueOf': 0 }), true);\n    });\n\n    QUnit.test('should return `true` for objects with a writable `Symbol.toStringTag` property', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && Symbol.toStringTag) {\n        var object = {};\n        object[Symbol.toStringTag] = 'X';\n\n        assert.deepEqual(_.isPlainObject(object), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for objects with a custom `[[Prototype]]`', function(assert) {\n      assert.expect(1);\n\n      var object = create({ 'a': 1 });\n      assert.strictEqual(_.isPlainObject(object), false);\n    });\n\n    QUnit.test('should return `false` for DOM elements', function(assert) {\n      assert.expect(1);\n\n      if (element) {\n        assert.strictEqual(_.isPlainObject(element), false);\n      } else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-Object objects', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.isPlainObject(arguments), false);\n      assert.strictEqual(_.isPlainObject(Error), false);\n      assert.strictEqual(_.isPlainObject(Math), false);\n    });\n\n    QUnit.test('should return `false` for non-objects', function(assert) {\n      assert.expect(4);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isPlainObject(value) : _.isPlainObject();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isPlainObject(true), false);\n      assert.strictEqual(_.isPlainObject('a'), false);\n      assert.strictEqual(_.isPlainObject(symbol), false);\n    });\n\n    QUnit.test('should return `false` for objects with a read-only `Symbol.toStringTag` property', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && Symbol.toStringTag) {\n        var object = {};\n        defineProperty(object, Symbol.toStringTag, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': false,\n          'value': 'X'\n        });\n\n        assert.deepEqual(_.isPlainObject(object), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should not mutate `value`', function(assert) {\n      assert.expect(2);\n\n      if (Symbol && Symbol.toStringTag) {\n        var proto = {};\n        proto[Symbol.toStringTag] = undefined;\n        var object = create(proto);\n\n        assert.strictEqual(_.isPlainObject(object), false);\n        assert.notOk(lodashStable.has(object, Symbol.toStringTag));\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work with objects from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        assert.strictEqual(_.isPlainObject(realm.object), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isRegExp');\n\n  (function() {\n    QUnit.test('should return `true` for regexes', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isRegExp(/x/), true);\n      assert.strictEqual(_.isRegExp(RegExp('x')), true);\n    });\n\n    QUnit.test('should return `false` for non-regexes', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isRegExp(value) : _.isRegExp();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isRegExp(args), false);\n      assert.strictEqual(_.isRegExp([1, 2, 3]), false);\n      assert.strictEqual(_.isRegExp(true), false);\n      assert.strictEqual(_.isRegExp(new Date), false);\n      assert.strictEqual(_.isRegExp(new Error), false);\n      assert.strictEqual(_.isRegExp(_), false);\n      assert.strictEqual(_.isRegExp(slice), false);\n      assert.strictEqual(_.isRegExp({ 'a': 1 }), false);\n      assert.strictEqual(_.isRegExp(1), false);\n      assert.strictEqual(_.isRegExp('a'), false);\n      assert.strictEqual(_.isRegExp(symbol), false);\n    });\n\n    QUnit.test('should work with regexes from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.regexp) {\n        assert.strictEqual(_.isRegExp(realm.regexp), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isSet');\n\n  (function() {\n    QUnit.test('should return `true` for sets', function(assert) {\n      assert.expect(1);\n\n      if (Set) {\n        assert.strictEqual(_.isSet(set), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non-sets', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isSet(value) : _.isSet();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isSet(args), false);\n      assert.strictEqual(_.isSet([1, 2, 3]), false);\n      assert.strictEqual(_.isSet(true), false);\n      assert.strictEqual(_.isSet(new Date), false);\n      assert.strictEqual(_.isSet(new Error), false);\n      assert.strictEqual(_.isSet(_), false);\n      assert.strictEqual(_.isSet(slice), false);\n      assert.strictEqual(_.isSet({ 'a': 1 }), false);\n      assert.strictEqual(_.isSet(1), false);\n      assert.strictEqual(_.isSet(/x/), false);\n      assert.strictEqual(_.isSet('a'), false);\n      assert.strictEqual(_.isSet(symbol), false);\n      assert.strictEqual(_.isSet(weakSet), false);\n    });\n\n    QUnit.test('should work for objects with a non-function `constructor` (test in IE 11)', function(assert) {\n      assert.expect(1);\n\n      var values = [false, true],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.isSet({ 'constructor': value });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with weak sets from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.set) {\n        assert.strictEqual(_.isSet(realm.set), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isString');\n\n  (function() {\n    QUnit.test('should return `true` for strings', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isString('a'), true);\n      assert.strictEqual(_.isString(Object('a')), true);\n    });\n\n    QUnit.test('should return `false` for non-strings', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === '';\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isString(value) : _.isString();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isString(args), false);\n      assert.strictEqual(_.isString([1, 2, 3]), false);\n      assert.strictEqual(_.isString(true), false);\n      assert.strictEqual(_.isString(new Date), false);\n      assert.strictEqual(_.isString(new Error), false);\n      assert.strictEqual(_.isString(_), false);\n      assert.strictEqual(_.isString(slice), false);\n      assert.strictEqual(_.isString({ '0': 1, 'length': 1 }), false);\n      assert.strictEqual(_.isString(1), false);\n      assert.strictEqual(_.isString(/x/), false);\n      assert.strictEqual(_.isString(symbol), false);\n    });\n\n    QUnit.test('should work with strings from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.string) {\n        assert.strictEqual(_.isString(realm.string), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isSymbol');\n\n  (function() {\n    QUnit.test('should return `true` for symbols', function(assert) {\n      assert.expect(2);\n\n      if (Symbol) {\n        assert.strictEqual(_.isSymbol(symbol), true);\n        assert.strictEqual(_.isSymbol(Object(symbol)), true);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should return `false` for non-symbols', function(assert) {\n      assert.expect(12);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isSymbol(value) : _.isSymbol();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isSymbol(args), false);\n      assert.strictEqual(_.isSymbol([1, 2, 3]), false);\n      assert.strictEqual(_.isSymbol(true), false);\n      assert.strictEqual(_.isSymbol(new Date), false);\n      assert.strictEqual(_.isSymbol(new Error), false);\n      assert.strictEqual(_.isSymbol(_), false);\n      assert.strictEqual(_.isSymbol(slice), false);\n      assert.strictEqual(_.isSymbol({ '0': 1, 'length': 1 }), false);\n      assert.strictEqual(_.isSymbol(1), false);\n      assert.strictEqual(_.isSymbol(/x/), false);\n      assert.strictEqual(_.isSymbol('a'), false);\n    });\n\n    QUnit.test('should work with symbols from another realm', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && realm.symbol) {\n        assert.strictEqual(_.isSymbol(realm.symbol), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isTypedArray');\n\n  (function() {\n    QUnit.test('should return `true` for typed arrays', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(typedArrays, function(type) {\n        return type in root;\n      });\n\n      var actual = lodashStable.map(typedArrays, function(type) {\n        var Ctor = root[type];\n        return Ctor ? _.isTypedArray(new Ctor(new ArrayBuffer(8))) : false;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `false` for non typed arrays', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isTypedArray(value) : _.isTypedArray();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isTypedArray(args), false);\n      assert.strictEqual(_.isTypedArray([1, 2, 3]), false);\n      assert.strictEqual(_.isTypedArray(true), false);\n      assert.strictEqual(_.isTypedArray(new Date), false);\n      assert.strictEqual(_.isTypedArray(new Error), false);\n      assert.strictEqual(_.isTypedArray(_), false);\n      assert.strictEqual(_.isTypedArray(slice), false);\n      assert.strictEqual(_.isTypedArray({ 'a': 1 }), false);\n      assert.strictEqual(_.isTypedArray(1), false);\n      assert.strictEqual(_.isTypedArray(/x/), false);\n      assert.strictEqual(_.isTypedArray('a'), false);\n      assert.strictEqual(_.isTypedArray(symbol), false);\n    });\n\n    QUnit.test('should work with typed arrays from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        var props = lodashStable.invokeMap(typedArrays, 'toLowerCase');\n\n        var expected = lodashStable.map(props, function(key) {\n          return realm[key] !== undefined;\n        });\n\n        var actual = lodashStable.map(props, function(key) {\n          var value = realm[key];\n          return value ? _.isTypedArray(value) : false;\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isUndefined');\n\n  (function() {\n    QUnit.test('should return `true` for `undefined` values', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.isUndefined(), true);\n      assert.strictEqual(_.isUndefined(undefined), true);\n    });\n\n    QUnit.test('should return `false` for non `undefined` values', function(assert) {\n      assert.expect(13);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined;\n      });\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isUndefined(value) : _.isUndefined();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isUndefined(args), false);\n      assert.strictEqual(_.isUndefined([1, 2, 3]), false);\n      assert.strictEqual(_.isUndefined(true), false);\n      assert.strictEqual(_.isUndefined(new Date), false);\n      assert.strictEqual(_.isUndefined(new Error), false);\n      assert.strictEqual(_.isUndefined(_), false);\n      assert.strictEqual(_.isUndefined(slice), false);\n      assert.strictEqual(_.isUndefined({ 'a': 1 }), false);\n      assert.strictEqual(_.isUndefined(1), false);\n      assert.strictEqual(_.isUndefined(/x/), false);\n      assert.strictEqual(_.isUndefined('a'), false);\n\n      if (Symbol) {\n        assert.strictEqual(_.isUndefined(symbol), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with `undefined` from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.object) {\n        assert.strictEqual(_.isUndefined(realm.undefined), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isWeakMap');\n\n  (function() {\n    QUnit.test('should return `true` for weak maps', function(assert) {\n      assert.expect(1);\n\n      if (WeakMap) {\n        assert.strictEqual(_.isWeakMap(weakMap), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non weak maps', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isWeakMap(value) : _.isWeakMap();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isWeakMap(args), false);\n      assert.strictEqual(_.isWeakMap([1, 2, 3]), false);\n      assert.strictEqual(_.isWeakMap(true), false);\n      assert.strictEqual(_.isWeakMap(new Date), false);\n      assert.strictEqual(_.isWeakMap(new Error), false);\n      assert.strictEqual(_.isWeakMap(_), false);\n      assert.strictEqual(_.isWeakMap(slice), false);\n      assert.strictEqual(_.isWeakMap({ 'a': 1 }), false);\n      assert.strictEqual(_.isWeakMap(map), false);\n      assert.strictEqual(_.isWeakMap(1), false);\n      assert.strictEqual(_.isWeakMap(/x/), false);\n      assert.strictEqual(_.isWeakMap('a'), false);\n      assert.strictEqual(_.isWeakMap(symbol), false);\n    });\n\n    QUnit.test('should work for objects with a non-function `constructor` (test in IE 11)', function(assert) {\n      assert.expect(1);\n\n      var values = [false, true],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.isWeakMap({ 'constructor': value });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with weak maps from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.weakMap) {\n        assert.strictEqual(_.isWeakMap(realm.weakMap), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.isWeakSet');\n\n  (function() {\n    QUnit.test('should return `true` for weak sets', function(assert) {\n      assert.expect(1);\n\n      if (WeakSet) {\n        assert.strictEqual(_.isWeakSet(weakSet), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return `false` for non weak sets', function(assert) {\n      assert.expect(14);\n\n      var expected = lodashStable.map(falsey, stubFalse);\n\n      var actual = lodashStable.map(falsey, function(value, index) {\n        return index ? _.isWeakSet(value) : _.isWeakSet();\n      });\n\n      assert.deepEqual(actual, expected);\n\n      assert.strictEqual(_.isWeakSet(args), false);\n      assert.strictEqual(_.isWeakSet([1, 2, 3]), false);\n      assert.strictEqual(_.isWeakSet(true), false);\n      assert.strictEqual(_.isWeakSet(new Date), false);\n      assert.strictEqual(_.isWeakSet(new Error), false);\n      assert.strictEqual(_.isWeakSet(_), false);\n      assert.strictEqual(_.isWeakSet(slice), false);\n      assert.strictEqual(_.isWeakSet({ 'a': 1 }), false);\n      assert.strictEqual(_.isWeakSet(1), false);\n      assert.strictEqual(_.isWeakSet(/x/), false);\n      assert.strictEqual(_.isWeakSet('a'), false);\n      assert.strictEqual(_.isWeakSet(set), false);\n      assert.strictEqual(_.isWeakSet(symbol), false);\n    });\n\n    QUnit.test('should work with weak sets from another realm', function(assert) {\n      assert.expect(1);\n\n      if (realm.weakSet) {\n        assert.strictEqual(_.isWeakSet(realm.weakSet), true);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('isType checks');\n\n  (function() {\n    QUnit.test('should return `false` for subclassed values', function(assert) {\n      assert.expect(7);\n\n      var funcs = [\n        'isArray', 'isBoolean', 'isDate', 'isFunction',\n        'isNumber', 'isRegExp', 'isString'\n      ];\n\n      lodashStable.each(funcs, function(methodName) {\n        function Foo() {}\n        Foo.prototype = root[methodName.slice(2)].prototype;\n\n        var object = new Foo;\n        if (objToString.call(object) == objectTag) {\n          assert.strictEqual(_[methodName](object), false, '`_.' + methodName + '` returns `false`');\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    QUnit.test('should not error on host objects (test in IE)', function(assert) {\n      assert.expect(26);\n\n      var funcs = [\n        'isArguments', 'isArray', 'isArrayBuffer', 'isArrayLike', 'isBoolean',\n        'isBuffer', 'isDate', 'isElement', 'isError', 'isFinite', 'isFunction',\n        'isInteger', 'isMap', 'isNaN', 'isNil', 'isNull', 'isNumber', 'isObject',\n        'isObjectLike', 'isRegExp', 'isSet', 'isSafeInteger', 'isString',\n        'isUndefined', 'isWeakMap', 'isWeakSet'\n      ];\n\n      lodashStable.each(funcs, function(methodName) {\n        if (xml) {\n          _[methodName](xml);\n          assert.ok(true, '`_.' + methodName + '` should not error');\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.iteratee');\n\n  (function() {\n    QUnit.test('should provide arguments to `func`', function(assert) {\n      assert.expect(1);\n\n      var fn = function() { return slice.call(arguments); },\n          iteratee = _.iteratee(fn),\n          actual = iteratee('a', 'b', 'c', 'd', 'e', 'f');\n\n      assert.deepEqual(actual, ['a', 'b', 'c', 'd', 'e', 'f']);\n    });\n\n    QUnit.test('should return `_.identity` when `func` is nullish', function(assert) {\n      assert.expect(1);\n\n      var object = {},\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([!isNpm && _.identity, object]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var identity = index ? _.iteratee(value) : _.iteratee();\n        return [!isNpm && identity, identity(object)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an iteratee created by `_.matches` when `func` is an object', function(assert) {\n      assert.expect(2);\n\n      var matches = _.iteratee({ 'a': 1, 'b': 2 });\n      assert.strictEqual(matches({ 'a': 1, 'b': 2, 'c': 3 }), true);\n      assert.strictEqual(matches({ 'b': 2 }), false);\n    });\n\n    QUnit.test('should not change `_.matches` behavior if `source` is modified', function(assert) {\n      assert.expect(9);\n\n      var sources = [\n        { 'a': { 'b': 2, 'c': 3 } },\n        { 'a': 1, 'b': 2 },\n        { 'a': 1 }\n      ];\n\n      lodashStable.each(sources, function(source, index) {\n        var object = lodashStable.cloneDeep(source),\n            matches = _.iteratee(source);\n\n        assert.strictEqual(matches(object), true);\n\n        if (index) {\n          source.a = 2;\n          source.b = 1;\n          source.c = 3;\n        } else {\n          source.a.b = 1;\n          source.a.c = 2;\n          source.a.d = 3;\n        }\n        assert.strictEqual(matches(object), true);\n        assert.strictEqual(matches(source), false);\n      });\n    });\n\n    QUnit.test('should return an iteratee created by `_.matchesProperty` when `func` is an array', function(assert) {\n      assert.expect(3);\n\n      var array = ['a', undefined],\n          matches = _.iteratee([0, 'a']);\n\n      assert.strictEqual(matches(array), true);\n\n      matches = _.iteratee(['0', 'a']);\n      assert.strictEqual(matches(array), true);\n\n      matches = _.iteratee([1, undefined]);\n      assert.strictEqual(matches(array), true);\n    });\n\n    QUnit.test('should support deep paths for `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': { 'c': 1, 'd': 2 } } },\n          matches = _.iteratee(['a.b', { 'c': 1 }]);\n\n      assert.strictEqual(matches(object), true);\n    });\n\n    QUnit.test('should not change `_.matchesProperty` behavior if `source` is modified', function(assert) {\n      assert.expect(9);\n\n      var sources = [\n        { 'a': { 'b': 2, 'c': 3 } },\n        { 'a': 1, 'b': 2 },\n        { 'a': 1 }\n      ];\n\n      lodashStable.each(sources, function(source, index) {\n        var object = { 'a': lodashStable.cloneDeep(source) },\n            matches = _.iteratee(['a', source]);\n\n        assert.strictEqual(matches(object), true);\n\n        if (index) {\n          source.a = 2;\n          source.b = 1;\n          source.c = 3;\n        } else {\n          source.a.b = 1;\n          source.a.c = 2;\n          source.a.d = 3;\n        }\n        assert.strictEqual(matches(object), true);\n        assert.strictEqual(matches({ 'a': source }), false);\n      });\n    });\n\n    QUnit.test('should return an iteratee created by `_.property` when `func` is a number or string', function(assert) {\n      assert.expect(2);\n\n      var array = ['a'],\n          prop = _.iteratee(0);\n\n      assert.strictEqual(prop(array), 'a');\n\n      prop = _.iteratee('0');\n      assert.strictEqual(prop(array), 'a');\n    });\n\n    QUnit.test('should support deep paths for `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': 2 } },\n          prop = _.iteratee('a.b');\n\n      assert.strictEqual(prop(object), 2);\n    });\n\n    QUnit.test('should work with functions created by `_.partial` and `_.partialRight`', function(assert) {\n      assert.expect(2);\n\n      var fn = function() {\n        var result = [this.a];\n        push.apply(result, arguments);\n        return result;\n      };\n\n      var expected = [1, 2, 3],\n          object = { 'a': 1 , 'iteratee': _.iteratee(_.partial(fn, 2)) };\n\n      assert.deepEqual(object.iteratee(3), expected);\n\n      object.iteratee = _.iteratee(_.partialRight(fn, 3));\n      assert.deepEqual(object.iteratee(2), expected);\n    });\n\n    QUnit.test('should use internal `iteratee` if external is unavailable', function(assert) {\n      assert.expect(1);\n\n      var iteratee = _.iteratee;\n      delete _.iteratee;\n\n      assert.deepEqual(_.map([{ 'a': 1 }], 'a'), [1]);\n\n      _.iteratee = iteratee;\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var fn = function() { return this instanceof Number; },\n          array = [fn, fn, fn],\n          iteratees = lodashStable.map(array, _.iteratee),\n          expected = lodashStable.map(array, stubFalse);\n\n      var actual = lodashStable.map(iteratees, function(iteratee) {\n        return iteratee();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('custom `_.iteratee` methods');\n\n  (function() {\n    var array = ['one', 'two', 'three'],\n        getPropA = _.partial(_.property, 'a'),\n        getPropB = _.partial(_.property, 'b'),\n        getLength = _.partial(_.property, 'length'),\n        iteratee = _.iteratee;\n\n    var getSum = function() {\n      return function(result, object) {\n        return result + object.a;\n      };\n    };\n\n    var objects = [\n      { 'a': 0, 'b': 0 },\n      { 'a': 1, 'b': 0 },\n      { 'a': 1, 'b': 1 }\n    ];\n\n    QUnit.test('`_.countBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getLength;\n        assert.deepEqual(_.countBy(array), { '3': 2, '5': 1 });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.differenceBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.differenceBy(objects, [objects[1]]), [objects[0]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.dropRightWhile` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.dropRightWhile(objects), objects.slice(0, 2));\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.dropWhile` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.dropWhile(objects.reverse()).reverse(), objects.reverse().slice(0, 2));\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.every` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.every(objects.slice(1)), true);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.filter` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 0 }, { 'a': 1 }];\n\n        _.iteratee = getPropA;\n        assert.deepEqual(_.filter(objects), [objects[1]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.find` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.find(objects), objects[1]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findIndex` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.findIndex(objects), 1);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findLast` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.findLast(objects), objects[2]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findLastIndex` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.findLastIndex(objects), 2);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findKey` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.strictEqual(_.findKey(objects), '2');\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.findLastKey` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.strictEqual(_.findLastKey(objects), '2');\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.groupBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getLength;\n        assert.deepEqual(_.groupBy(array), { '3': ['one', 'two'], '5': ['three'] });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.intersectionBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.intersectionBy(objects, [objects[2]]), [objects[1]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.keyBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getLength;\n        assert.deepEqual(_.keyBy(array), { '3': 'two', '5': 'three' });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.map` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.map(objects), [0, 1, 1]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.mapKeys` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.mapKeys({ 'a': { 'b': 2 } }), { '2':  { 'b': 2 } });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.mapValues` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.mapValues({ 'a': { 'b': 2 } }), { 'a': 2 });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.maxBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.maxBy(objects), objects[2]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.meanBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.strictEqual(_.meanBy(objects), 2 / 3);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.minBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.minBy(objects), objects[0]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.partition` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 1 }, { 'a': 1 }, { 'b': 2 }];\n\n        _.iteratee = getPropA;\n        assert.deepEqual(_.partition(objects), [objects.slice(0, 2), objects.slice(2)]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.pullAllBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.pullAllBy(objects.slice(), [{ 'a': 1, 'b': 0 }]), [objects[0]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.reduce` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getSum;\n        assert.strictEqual(_.reduce(objects, undefined, 0), 2);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.reduceRight` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getSum;\n        assert.strictEqual(_.reduceRight(objects, undefined, 0), 2);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.reject` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 0 }, { 'a': 1 }];\n\n        _.iteratee = getPropA;\n        assert.deepEqual(_.reject(objects), [objects[0]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.remove` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 0 }, { 'a': 1 }];\n\n        _.iteratee = getPropA;\n        _.remove(objects);\n        assert.deepEqual(objects, [{ 'a': 0 }]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.some` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.strictEqual(_.some(objects), true);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.sortBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.sortBy(objects.slice().reverse()), [objects[0], objects[2], objects[1]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.sortedIndexBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 30 }, { 'a': 50 }];\n\n        _.iteratee = getPropA;\n        assert.strictEqual(_.sortedIndexBy(objects, { 'a': 40 }), 1);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.sortedLastIndexBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var objects = [{ 'a': 30 }, { 'a': 50 }];\n\n        _.iteratee = getPropA;\n        assert.strictEqual(_.sortedLastIndexBy(objects, { 'a': 40 }), 1);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.sumBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.strictEqual(_.sumBy(objects), 1);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.takeRightWhile` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.takeRightWhile(objects), objects.slice(2));\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.takeWhile` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.takeWhile(objects.reverse()), objects.reverse().slice(2));\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.transform` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = function() {\n          return function(result, object) {\n            result.sum += object.a;\n          };\n        };\n\n        assert.deepEqual(_.transform(objects, undefined, { 'sum': 0 }), { 'sum': 2 });\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.uniqBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.uniqBy(objects), [objects[0], objects[2]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.unionBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropB;\n        assert.deepEqual(_.unionBy(objects.slice(0, 1), [objects[2]]), [objects[0], objects[2]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.xorBy` should use `_.iteratee` internally', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        _.iteratee = getPropA;\n        assert.deepEqual(_.xorBy(objects, objects.slice(1)), [objects[0]]);\n        _.iteratee = iteratee;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.join');\n\n  (function() {\n    var array = ['a', 'b', 'c'];\n\n    QUnit.test('should return join all array elements into a string', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.join(array, '~'), 'a~b~c');\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array);\n        assert.strictEqual(wrapped.join('~'), 'a~b~c');\n        assert.strictEqual(wrapped.value(), array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).chain().join('~') instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.keyBy');\n\n  (function() {\n    var array = [\n      { 'dir': 'left', 'code': 97 },\n      { 'dir': 'right', 'code': 100 }\n    ];\n\n    QUnit.test('should transform keys by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } };\n\n      var actual = _.keyBy(array, function(object) {\n        return String.fromCharCode(object.code);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [4, 6, 6],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '4': 4, '6': 6 }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.keyBy(array, value) : _.keyBy(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } },\n          actual = _.keyBy(array, 'dir');\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should only add values to own, not inherited, properties', function(assert) {\n      assert.expect(2);\n\n      var actual = _.keyBy([6.1, 4.2, 6.3], function(n) {\n        return Math.floor(n) > 4 ? 'hasOwnProperty' : 'constructor';\n      });\n\n      assert.deepEqual(actual.constructor, 4.2);\n      assert.deepEqual(actual.hasOwnProperty, 6.3);\n    });\n\n    QUnit.test('should work with a number for `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var array = [\n        [1, 'a'],\n        [2, 'a'],\n        [2, 'b']\n      ];\n\n      assert.deepEqual(_.keyBy(array, 0), { '1': [1, 'a'], '2': [2, 'b'] });\n      assert.deepEqual(_.keyBy(array, 1), { 'a': [2, 'a'], 'b': [2, 'b'] });\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.keyBy({ 'a': 6.1, 'b': 4.2, 'c': 6.3 }, Math.floor);\n      assert.deepEqual(actual, { '4': 4.2, '6': 6.3 });\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE).concat(\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 2), LARGE_ARRAY_SIZE),\n          lodashStable.range(Math.floor(LARGE_ARRAY_SIZE / 1.5), LARGE_ARRAY_SIZE)\n        );\n\n        var actual = _(array).keyBy().map(square).filter(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(_.map(_.keyBy(array), square), isEven)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('keys methods');\n\n  lodashStable.each(['keys', 'keysIn'], function(methodName) {\n    var func = _[methodName],\n        isKeys = methodName == 'keys';\n\n    QUnit.test('`_.' + methodName + '` should return the string keyed property names of `object`', function(assert) {\n      assert.expect(1);\n\n      var actual = func({ 'a': 1, 'b': 1 }).sort();\n\n      assert.deepEqual(actual, ['a', 'b']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isKeys ? 'not ' : '') + 'include inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var expected = isKeys ? ['a'] : ['a', 'b'],\n          actual = func(new Foo).sort();\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat sparse arrays as dense', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      array[2] = 3;\n\n      var actual = func(array).sort();\n\n      assert.deepEqual(actual, ['0', '1', '2']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return keys for custom properties on arrays', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      array.a = 1;\n\n      var actual = func(array).sort();\n\n      assert.deepEqual(actual, ['0', 'a']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isKeys ? 'not ' : '') + 'include inherited string keyed properties of arrays', function(assert) {\n      assert.expect(1);\n\n      arrayProto.a = 1;\n\n      var expected = isKeys ? ['0'] : ['0', 'a'],\n          actual = func([1]).sort();\n\n      assert.deepEqual(actual, expected);\n\n      delete arrayProto.a;\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var values = [args, strictArgs],\n          expected = lodashStable.map(values, lodashStable.constant(['0', '1', '2']));\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value).sort();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return keys for custom properties on `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var values = [args, strictArgs],\n          expected = lodashStable.map(values, lodashStable.constant(['0', '1', '2', 'a']));\n\n      var actual = lodashStable.map(values, function(value) {\n        value.a = 1;\n        var result = func(value).sort();\n        delete value.a;\n        return result;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isKeys ? 'not ' : '') + 'include inherited string keyed properties of `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var values = [args, strictArgs],\n          expected = lodashStable.map(values, lodashStable.constant(isKeys ? ['0', '1', '2'] : ['0', '1', '2', 'a']));\n\n      var actual = lodashStable.map(values, function(value) {\n        objectProto.a = 1;\n        var result = func(value).sort();\n        delete objectProto.a;\n        return result;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with string objects', function(assert) {\n      assert.expect(1);\n\n      var actual = func(Object('abc')).sort();\n\n      assert.deepEqual(actual, ['0', '1', '2']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return keys for custom properties on string objects', function(assert) {\n      assert.expect(1);\n\n      var object = Object('a');\n      object.a = 1;\n\n      var actual = func(object).sort();\n\n      assert.deepEqual(actual, ['0', 'a']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isKeys ? 'not ' : '') + 'include inherited string keyed properties of string objects', function(assert) {\n      assert.expect(1);\n\n      stringProto.a = 1;\n\n      var expected = isKeys ? ['0'] : ['0', 'a'],\n          actual = func(Object('a')).sort();\n\n      assert.deepEqual(actual, expected);\n\n      delete stringProto.a;\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with array-like objects', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'a', 'length': 1 },\n          actual = func(object).sort();\n\n      assert.deepEqual(actual, ['0', 'length']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce primitives to objects (test in IE 9)', function(assert) {\n      assert.expect(2);\n\n      var expected = lodashStable.map(primitives, function(value) {\n        return typeof value == 'string' ? ['0'] : [];\n      });\n\n      var actual = lodashStable.map(primitives, func);\n      assert.deepEqual(actual, expected);\n\n      // IE 9 doesn't box numbers in for-in loops.\n      numberProto.a = 1;\n      assert.deepEqual(func(0), isKeys ? [] : ['a']);\n      delete numberProto.a;\n    });\n\n    QUnit.test('`_.' + methodName + '` skips the `constructor` property on prototype objects', function(assert) {\n      assert.expect(3);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      var expected = ['a'];\n      assert.deepEqual(func(Foo.prototype), expected);\n\n      Foo.prototype = { 'constructor': Foo, 'a': 1 };\n      assert.deepEqual(func(Foo.prototype), expected);\n\n      var Fake = { 'prototype': {} };\n      Fake.prototype.constructor = Fake;\n      assert.deepEqual(func(Fake.prototype), ['constructor']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an empty array when `object` is nullish', function(assert) {\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        objectProto.a = 1;\n        var result = index ? func(value) : func();\n        delete objectProto.a;\n        return result;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.last');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    QUnit.test('should return the last element', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.last(array), 4);\n    });\n\n    QUnit.test('should return `undefined` when querying empty arrays', function(assert) {\n      assert.expect(1);\n\n      var array = [];\n      array['-1'] = 1;\n\n      assert.strictEqual(_.last([]), undefined);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.last);\n\n      assert.deepEqual(actual, [3, 6, 9]);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_(array).last(), 4);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).chain().last() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should not execute immediately when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(array).chain().last();\n        assert.strictEqual(wrapped.__wrapped__, array);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var largeArray = lodashStable.range(LARGE_ARRAY_SIZE),\n            smallArray = array;\n\n        lodashStable.times(2, function(index) {\n          var array = index ? largeArray : smallArray,\n              wrapped = _(array).filter(isEven);\n\n          assert.strictEqual(wrapped.last(), _.last(_.filter(array, isEven)));\n        });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.lowerCase');\n\n  (function() {\n    QUnit.test('should lowercase as space-separated words', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.lowerCase('--Foo-Bar--'), 'foo bar');\n      assert.strictEqual(_.lowerCase('fooBar'), 'foo bar');\n      assert.strictEqual(_.lowerCase('__FOO_BAR__'), 'foo bar');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.lowerFirst');\n\n  (function() {\n    QUnit.test('should lowercase only the first character', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.lowerFirst('fred'), 'fred');\n      assert.strictEqual(_.lowerFirst('Fred'), 'fred');\n      assert.strictEqual(_.lowerFirst('FRED'), 'fRED');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.lt');\n\n  (function() {\n    QUnit.test('should return `true` if `value` is less than `other`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.lt(1, 3), true);\n      assert.strictEqual(_.lt('abc', 'def'), true);\n    });\n\n    QUnit.test('should return `false` if `value` >= `other`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.lt(3, 1), false);\n      assert.strictEqual(_.lt(3, 3), false);\n      assert.strictEqual(_.lt('def', 'abc'), false);\n      assert.strictEqual(_.lt('def', 'def'), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.lte');\n\n  (function() {\n    QUnit.test('should return `true` if `value` is <= `other`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.lte(1, 3), true);\n      assert.strictEqual(_.lte(3, 3), true);\n      assert.strictEqual(_.lte('abc', 'def'), true);\n      assert.strictEqual(_.lte('def', 'def'), true);\n    });\n\n    QUnit.test('should return `false` if `value` > `other`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.lt(3, 1), false);\n      assert.strictEqual(_.lt('def', 'abc'), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.findLastIndex and lodash.lastIndexOf');\n\n  lodashStable.each(['findLastIndex', 'lastIndexOf'], function(methodName) {\n    var array = [1, 2, 3, 1, 2, 3],\n        func = _[methodName],\n        resolve = methodName == 'findLastIndex' ? lodashStable.curry(lodashStable.eq) : identity;\n\n    QUnit.test('`_.' + methodName + '` should return the index of the last matched value', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(3)), 5);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a positive `fromIndex`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(1), 2), 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `fromIndex` >= `length`', function(assert) {\n      assert.expect(1);\n\n      var values = [6, 8, Math.pow(2, 32), Infinity],\n          expected = lodashStable.map(values, lodashStable.constant([-1, 3, -1]));\n\n      var actual = lodashStable.map(values, function(fromIndex) {\n        return [\n          func(array, resolve(undefined), fromIndex),\n          func(array, resolve(1), fromIndex),\n          func(array, resolve(''), fromIndex)\n        ];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `fromIndex`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(2), -3), 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `fromIndex` <= `-length`', function(assert) {\n      assert.expect(1);\n\n      var values = [-6, -8, -Infinity],\n          expected = lodashStable.map(values, stubZero);\n\n      var actual = lodashStable.map(values, function(fromIndex) {\n        return func(array, resolve(1), fromIndex);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat falsey `fromIndex` values correctly', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? 5 : -1;\n      });\n\n      var actual = lodashStable.map(falsey, function(fromIndex) {\n        return func(array, resolve(3), fromIndex);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `fromIndex` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array, resolve(2), 4.2), 4);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('indexOf methods');\n\n  lodashStable.each(['indexOf', 'lastIndexOf', 'sortedIndexOf', 'sortedLastIndexOf'], function(methodName) {\n    var func = _[methodName],\n        isIndexOf = !/last/i.test(methodName),\n        isSorted = /^sorted/.test(methodName);\n\n    QUnit.test('`_.' + methodName + '` should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, lodashStable.constant(-1));\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? func(array) : func();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `-1` for an unmatched value', function(assert) {\n      assert.expect(5);\n\n      var array = [1, 2, 3],\n          empty = [];\n\n      assert.strictEqual(func(array, 4), -1);\n      assert.strictEqual(func(array, 4, true), -1);\n      assert.strictEqual(func(array, undefined, true), -1);\n\n      assert.strictEqual(func(empty, undefined), -1);\n      assert.strictEqual(func(empty, undefined, true), -1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not match values on empty arrays', function(assert) {\n      assert.expect(2);\n\n      var array = [];\n      array[-1] = 0;\n\n      assert.strictEqual(func(array, undefined), -1);\n      assert.strictEqual(func(array, 0, true), -1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(3);\n\n      var array = isSorted\n        ? [1, 2, NaN, NaN]\n        : [1, NaN, 3, NaN, 5, NaN];\n\n      if (isSorted) {\n        assert.strictEqual(func(array, NaN, true), isIndexOf ? 2 : 3);\n        skipAssert(assert, 2);\n      }\n      else {\n        assert.strictEqual(func(array, NaN), isIndexOf ? 1 : 5);\n        assert.strictEqual(func(array, NaN, 2), isIndexOf ? 3 : 1);\n        assert.strictEqual(func(array, NaN, -2), isIndexOf ? 5 : 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(func([-0], 0), 0);\n      assert.strictEqual(func([0], -0), 0);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.map');\n\n  (function() {\n    var array = [1, 2];\n\n    QUnit.test('should map values in `collection` to a new array', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1, 'b': 2 },\n          expected = ['1', '2'];\n\n      assert.deepEqual(_.map(array, String), expected);\n      assert.deepEqual(_.map(object, String), expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 'x' }, { 'a': 'y' }];\n      assert.deepEqual(_.map(objects, 'a'), ['x', 'y']);\n    });\n\n    QUnit.test('should iterate over own string keyed properties of objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var actual = _.map(new Foo, identity);\n      assert.deepEqual(actual, [1]);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1, 'b': 2 },\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2]));\n\n      lodashStable.each([array, object], function(collection) {\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? _.map(collection, value) : _.map(collection);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should accept a falsey `collection`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(collection, index) {\n        try {\n          return index ? _.map(collection) : _.map();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.map(1), []);\n    });\n\n    QUnit.test('should treat a nodelist as an array-like object', function(assert) {\n      assert.expect(1);\n\n      if (document) {\n        var actual = _.map(document.getElementsByTagName('body'), function(element) {\n          return element.nodeName.toLowerCase();\n        });\n\n        assert.deepEqual(actual, ['body']);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should work with objects with non-number length properties', function(assert) {\n      assert.expect(1);\n\n      var value = { 'value': 'x' },\n          object = { 'length': { 'value': 'x' } };\n\n      assert.deepEqual(_.map(object, identity), [value]);\n    });\n\n    QUnit.test('should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).map(noop) instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should provide correct `predicate` arguments in a lazy sequence', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var args,\n            array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            expected = [1, 0, _.map(array.slice(1), square)];\n\n        _(array).slice(1).map(function(value, index, array) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, [1, 0, array.slice(1)]);\n\n        args = undefined;\n        _(array).slice(1).map(square).map(function(value, index, array) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        args = undefined;\n        _(array).slice(1).map(square).map(function(value, index) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        args = undefined;\n        _(array).slice(1).map(square).map(function(value) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, [1]);\n\n        args = undefined;\n        _(array).slice(1).map(square).map(function() {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mapKeys');\n\n  (function() {\n    var array = [1, 2],\n        object = { 'a': 1, 'b': 2 };\n\n    QUnit.test('should map keys in `object` to a new object', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapKeys(object, String);\n      assert.deepEqual(actual, { '1': 1, '2': 2 });\n    });\n\n    QUnit.test('should treat arrays like objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapKeys(array, String);\n      assert.deepEqual(actual, { '1': 1, '2': 2 });\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapKeys({ 'a': { 'b': 'c' } }, 'b');\n      assert.deepEqual(actual, { 'c': { 'b': 'c' } });\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2 },\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant({ '1': 1, '2': 2 }));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.mapKeys(object, value) : _.mapKeys(object);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mapValues');\n\n  (function() {\n    var array = [1, 2],\n        object = { 'a': 1, 'b': 2 };\n\n    QUnit.test('should map values in `object` to a new object', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapValues(object, String);\n      assert.deepEqual(actual, { 'a': '1', 'b': '2' });\n    });\n\n    QUnit.test('should treat arrays like objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapValues(array, String);\n      assert.deepEqual(actual, { '0': '1', '1': '2' });\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mapValues({ 'a': { 'b': 2 } }, 'b');\n      assert.deepEqual(actual, { 'a': 2 });\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2 },\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([true, false]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var result = index ? _.mapValues(object, value) : _.mapValues(object);\n        return [lodashStable.isEqual(result, object), result === object];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mapKeys and lodash.mapValues');\n\n  lodashStable.each(['mapKeys', 'mapValues'], function(methodName) {\n    var func = _[methodName],\n        object = { 'a': 1, 'b': 2 };\n\n    QUnit.test('`_.' + methodName + '` should iterate over own string keyed properties of objects', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 'a';\n      }\n      Foo.prototype.b = 'b';\n\n      var actual = func(new Foo, function(value, key) { return key; });\n      assert.deepEqual(actual, { 'a': 'a' });\n    });\n\n    QUnit.test('`_.' + methodName + '` should accept a falsey `object`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubObject);\n\n      var actual = lodashStable.map(falsey, function(object, index) {\n        try {\n          return index ? func(object) : func();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(object)[methodName](noop) instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  QUnit.module('lodash.matches');\n\n  (function() {\n    QUnit.test('should not change behavior if `source` is modified', function(assert) {\n      assert.expect(9);\n\n      var sources = [\n        { 'a': { 'b': 2, 'c': 3 } },\n        { 'a': 1, 'b': 2 },\n        { 'a': 1 }\n      ];\n\n      lodashStable.each(sources, function(source, index) {\n        var object = lodashStable.cloneDeep(source),\n            par = _.matches(source);\n\n        assert.strictEqual(par(object), true);\n\n        if (index) {\n          source.a = 2;\n          source.b = 1;\n          source.c = 3;\n        } else {\n          source.a.b = 1;\n          source.a.c = 2;\n          source.a.d = 3;\n        }\n        assert.strictEqual(par(object), true);\n        assert.strictEqual(par(source), false);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('matches methods');\n\n  lodashStable.each(['matches', 'isMatch'], function(methodName) {\n    var isMatches = methodName == 'matches';\n\n    function matches(source) {\n      return isMatches ? _.matches(source) : function(object) {\n        return _.isMatch(object, source);\n      };\n    }\n\n    QUnit.test('`_.' + methodName + '` should perform a deep comparison between `source` and `object`', function(assert) {\n      assert.expect(5);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          par = matches({ 'a': 1 });\n\n      assert.strictEqual(par(object), true);\n\n      par = matches({ 'b': 1 });\n      assert.strictEqual(par(object), false);\n\n      par = matches({ 'a': 1, 'c': 3 });\n      assert.strictEqual(par(object), true);\n\n      par = matches({ 'c': 3, 'd': 4 });\n      assert.strictEqual(par(object), false);\n\n      object = { 'a': { 'b': { 'c': 1, 'd': 2 }, 'e': 3 }, 'f': 4 };\n      par = matches({ 'a': { 'b': { 'c': 1 } } });\n\n      assert.strictEqual(par(object), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match inherited string keyed `object` properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var object = { 'a': new Foo },\n          par = matches({ 'a': { 'b': 2 } });\n\n      assert.strictEqual(par(object), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not match by inherited `source` properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var objects = [{ 'a': 1 }, { 'a': 1, 'b': 2 }],\n          source = new Foo,\n          actual = lodashStable.map(objects, matches(source)),\n          expected = lodashStable.map(objects, stubTrue);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should compare a variety of `source` property values', function(assert) {\n      assert.expect(2);\n\n      var object1 = { 'a': false, 'b': true, 'c': '3', 'd': 4, 'e': [5], 'f': { 'g': 6 } },\n          object2 = { 'a': 0, 'b': 1, 'c': 3, 'd': '4', 'e': ['5'], 'f': { 'g': '6' } },\n          par = matches(object1);\n\n      assert.strictEqual(par(object1), true);\n      assert.strictEqual(par(object2), false);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      var object1 = { 'a': -0 },\n          object2 = { 'a': 0 },\n          par = matches(object1);\n\n      assert.strictEqual(par(object2), true);\n\n      par = matches(object2);\n      assert.strictEqual(par(object1), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should compare functions by reference', function(assert) {\n      assert.expect(3);\n\n      var object1 = { 'a': lodashStable.noop },\n          object2 = { 'a': noop },\n          object3 = { 'a': {} },\n          par = matches(object1);\n\n      assert.strictEqual(par(object1), true);\n      assert.strictEqual(par(object2), false);\n      assert.strictEqual(par(object3), false);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a function for `object`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.a = { 'b': 2, 'c': 3 };\n\n      var par = matches({ 'a': { 'b': 2 } });\n      assert.strictEqual(par(Foo), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a function for `source`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.a = 1;\n      Foo.b = function() {};\n      Foo.c = 3;\n\n      var objects = [{ 'a': 1 }, { 'a': 1, 'b': Foo.b, 'c': 3 }],\n          actual = lodashStable.map(objects, matches(Foo));\n\n      assert.deepEqual(actual, [false, true]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a non-plain `object`', function(assert) {\n      assert.expect(1);\n\n      function Foo(object) { lodashStable.assign(this, object); }\n\n      var object = new Foo({ 'a': new Foo({ 'b': 2, 'c': 3 }) }),\n          par = matches({ 'a': { 'b': 2 } });\n\n      assert.strictEqual(par(object), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should partial match arrays', function(assert) {\n      assert.expect(3);\n\n      var objects = [{ 'a': ['b'] }, { 'a': ['c', 'd'] }],\n          actual = lodashStable.filter(objects, matches({ 'a': ['d'] }));\n\n      assert.deepEqual(actual, [objects[1]]);\n\n      actual = lodashStable.filter(objects, matches({ 'a': ['b', 'd'] }));\n      assert.deepEqual(actual, []);\n\n      actual = lodashStable.filter(objects, matches({ 'a': ['d', 'b'] }));\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should partial match arrays with duplicate values', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1, 2] }, { 'a': [2, 2] }],\n          actual = lodashStable.filter(objects, matches({ 'a': [2, 2] }));\n\n      assert.deepEqual(actual, [objects[1]]);\n    });\n\n    QUnit.test('should partial match arrays of objects', function(assert) {\n      assert.expect(1);\n\n      var objects = [\n        { 'a': [{ 'b': 1, 'c': 2 }, { 'b': 4, 'c': 5, 'd': 6 }] },\n        { 'a': [{ 'b': 1, 'c': 2 }, { 'b': 4, 'c': 6, 'd': 7 }] }\n      ];\n\n      var actual = lodashStable.filter(objects, matches({ 'a': [{ 'b': 1 }, { 'b': 4, 'c': 5 }] }));\n      assert.deepEqual(actual, [objects[0]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should partial match maps', function(assert) {\n      assert.expect(3);\n\n      if (Map) {\n        var objects = [{ 'a': new Map }, { 'a': new Map }];\n        objects[0].a.set('a', 1);\n        objects[1].a.set('a', 1);\n        objects[1].a.set('b', 2);\n\n        var map = new Map;\n        map.set('b', 2);\n        var actual = lodashStable.filter(objects, matches({ 'a': map }));\n\n        assert.deepEqual(actual, [objects[1]]);\n\n        map.delete('b');\n        actual = lodashStable.filter(objects, matches({ 'a': map }));\n\n        assert.deepEqual(actual, objects);\n\n        map.set('c', 3);\n        actual = lodashStable.filter(objects, matches({ 'a': map }));\n\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should partial match sets', function(assert) {\n      assert.expect(3);\n\n      if (Set) {\n        var objects = [{ 'a': new Set }, { 'a': new Set }];\n        objects[0].a.add(1);\n        objects[1].a.add(1);\n        objects[1].a.add(2);\n\n        var set = new Set;\n        set.add(2);\n        var actual = lodashStable.filter(objects, matches({ 'a': set }));\n\n        assert.deepEqual(actual, [objects[1]]);\n\n        set.delete(2);\n        actual = lodashStable.filter(objects, matches({ 'a': set }));\n\n        assert.deepEqual(actual, objects);\n\n        set.add(3);\n        actual = lodashStable.filter(objects, matches({ 'a': set }));\n\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `undefined` values', function(assert) {\n      assert.expect(3);\n\n      var objects = [{ 'a': 1 }, { 'a': 1, 'b': 1 }, { 'a': 1, 'b': undefined }],\n          actual = lodashStable.map(objects, matches({ 'b': undefined })),\n          expected = [false, false, true];\n\n      assert.deepEqual(actual, expected);\n\n      actual = lodashStable.map(objects, matches({ 'a': 1, 'b': undefined }));\n\n      assert.deepEqual(actual, expected);\n\n      objects = [{ 'a': { 'b': 2 } }, { 'a': { 'b': 2, 'c': 3 } }, { 'a': { 'b': 2, 'c': undefined } }];\n      actual = lodashStable.map(objects, matches({ 'a': { 'c': undefined } }));\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `undefined` values on primitives', function(assert) {\n      assert.expect(3);\n\n      numberProto.a = 1;\n      numberProto.b = undefined;\n\n      try {\n        var par = matches({ 'b': undefined });\n        assert.strictEqual(par(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      try {\n        par = matches({ 'a': 1, 'b': undefined });\n        assert.strictEqual(par(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      numberProto.a = { 'b': 1, 'c': undefined };\n      try {\n        par = matches({ 'a': { 'c': undefined } });\n        assert.strictEqual(par(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      delete numberProto.a;\n      delete numberProto.b;\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `false` when `object` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse),\n          par = matches({ 'a': 1 });\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? par(value) : par();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing an empty `source`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1 },\n          expected = lodashStable.map(empties, stubTrue);\n\n      var actual = lodashStable.map(empties, function(value) {\n        var par = matches(value);\n        return par(object);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing an empty `source` to a nullish `object`', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubTrue),\n          par = matches({});\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? par(value) : par();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `true` when comparing a `source` of empty arrays and objects', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1], 'b': { 'c': 1 } }, { 'a': [2, 3], 'b': { 'd': 2 } }],\n          actual = lodashStable.filter(objects, matches({ 'a': [], 'b': {} }));\n\n      assert.deepEqual(actual, objects);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.matchesProperty');\n\n  (function() {\n    QUnit.test('should create a function that performs a deep comparison between a property value and `srcValue`', function(assert) {\n      assert.expect(6);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          matches = _.matchesProperty('a', 1);\n\n      assert.strictEqual(matches.length, 1);\n      assert.strictEqual(matches(object), true);\n\n      matches = _.matchesProperty('b', 3);\n      assert.strictEqual(matches(object), false);\n\n      matches = _.matchesProperty('a', { 'a': 1, 'c': 3 });\n      assert.strictEqual(matches({ 'a': object }), true);\n\n      matches = _.matchesProperty('a', { 'c': 3, 'd': 4 });\n      assert.strictEqual(matches(object), false);\n\n      object = { 'a': { 'b': { 'c': 1, 'd': 2 }, 'e': 3 }, 'f': 4 };\n      matches = _.matchesProperty('a', { 'b': { 'c': 1 } });\n\n      assert.strictEqual(matches(object), true);\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var matches = _.matchesProperty(path, 2);\n        assert.strictEqual(matches(object), true);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3];\n\n      lodashStable.each([1, [1]], function(path) {\n        var matches = _.matchesProperty(path, 2);\n        assert.strictEqual(matches(array), true);\n      });\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object1 = { '-0': 'a' },\n          object2 = { '0': 'b' },\n          pairs = [[object1, object2], [object1, object2], [object2, object1], [object2, object1]],\n          props = [-0, Object(-0), 0, Object(0)],\n          values = ['a', 'a', 'b', 'b'],\n          expected = lodashStable.map(props, lodashStable.constant([true, false]));\n\n      var actual = lodashStable.map(props, function(key, index) {\n        var matches = _.matchesProperty(key, values[index]),\n            pair = pairs[index];\n\n        return [matches(pair[0]), matches(pair[1])];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var object = { 'null': 1, 'undefined': 2, 'fn': 3, '[object Object]': 4 },\n          paths = [null, undefined, fn, {}],\n          expected = lodashStable.map(paths, stubTrue);\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var matches = _.matchesProperty(index ? [path] : path, object[path]);\n          return matches(object);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should match a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var matches = _.matchesProperty(path, 1);\n        assert.strictEqual(matches(object), true);\n      });\n    });\n\n    QUnit.test('should return `false` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var matches = _.matchesProperty(path, 1);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          try {\n            return index ? matches(value) : matches();\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `false` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var matches = _.matchesProperty(path, 1);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          try {\n            return index ? matches(value) : matches();\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `false` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var object = {};\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        var matches = _.matchesProperty(path, 1);\n        assert.strictEqual(matches(object), false);\n      });\n    });\n\n    QUnit.test('should match inherited string keyed `srcValue` properties', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.b = 2;\n\n      var object = { 'a': new Foo };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var matches = _.matchesProperty(path, { 'b': 2 });\n        assert.strictEqual(matches(object), true);\n      });\n    });\n\n    QUnit.test('should not match by inherited `srcValue` properties', function(assert) {\n      assert.expect(2);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var objects = [{ 'a': { 'a': 1 } }, { 'a': { 'a': 1, 'b': 2 } }],\n          expected = lodashStable.map(objects, stubTrue);\n\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.deepEqual(lodashStable.map(objects, _.matchesProperty(path, new Foo)), expected);\n      });\n    });\n\n    QUnit.test('should compare a variety of values', function(assert) {\n      assert.expect(2);\n\n      var object1 = { 'a': false, 'b': true, 'c': '3', 'd': 4, 'e': [5], 'f': { 'g': 6 } },\n          object2 = { 'a': 0, 'b': 1, 'c': 3, 'd': '4', 'e': ['5'], 'f': { 'g': '6' } },\n          matches = _.matchesProperty('a', object1);\n\n      assert.strictEqual(matches({ 'a': object1 }), true);\n      assert.strictEqual(matches({ 'a': object2 }), false);\n    });\n\n    QUnit.test('should match `-0` as `0`', function(assert) {\n      assert.expect(2);\n\n      var matches = _.matchesProperty('a', -0);\n      assert.strictEqual(matches({ 'a': 0 }), true);\n\n      matches = _.matchesProperty('a', 0);\n      assert.strictEqual(matches({ 'a': -0 }), true);\n    });\n\n    QUnit.test('should compare functions by reference', function(assert) {\n      assert.expect(3);\n\n      var object1 = { 'a': lodashStable.noop },\n          object2 = { 'a': noop },\n          object3 = { 'a': {} },\n          matches = _.matchesProperty('a', object1);\n\n      assert.strictEqual(matches({ 'a': object1 }), true);\n      assert.strictEqual(matches({ 'a': object2 }), false);\n      assert.strictEqual(matches({ 'a': object3 }), false);\n    });\n\n    QUnit.test('should work with a function for `srcValue`', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.a = 1;\n      Foo.b = function() {};\n      Foo.c = 3;\n\n      var objects = [{ 'a': { 'a': 1 } }, { 'a': { 'a': 1, 'b': Foo.b, 'c': 3 } }],\n          actual = lodashStable.map(objects, _.matchesProperty('a', Foo));\n\n      assert.deepEqual(actual, [false, true]);\n    });\n\n    QUnit.test('should work with a non-plain `srcValue`', function(assert) {\n      assert.expect(1);\n\n      function Foo(object) { lodashStable.assign(this, object); }\n\n      var object = new Foo({ 'a': new Foo({ 'b': 1, 'c': 2 }) }),\n          matches = _.matchesProperty('a', { 'b': 1 });\n\n      assert.strictEqual(matches(object), true);\n    });\n\n    QUnit.test('should partial match arrays', function(assert) {\n      assert.expect(3);\n\n      var objects = [{ 'a': ['b'] }, { 'a': ['c', 'd'] }],\n          actual = lodashStable.filter(objects, _.matchesProperty('a', ['d']));\n\n      assert.deepEqual(actual, [objects[1]]);\n\n      actual = lodashStable.filter(objects, _.matchesProperty('a', ['b', 'd']));\n      assert.deepEqual(actual, []);\n\n      actual = lodashStable.filter(objects, _.matchesProperty('a', ['d', 'b']));\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('should partial match arrays with duplicate values', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1, 2] }, { 'a': [2, 2] }],\n          actual = lodashStable.filter(objects, _.matchesProperty('a', [2, 2]));\n\n      assert.deepEqual(actual, [objects[1]]);\n    });\n\n    QUnit.test('should partial match arrays of objects', function(assert) {\n      assert.expect(1);\n\n      var objects = [\n        { 'a': [{ 'a': 1, 'b': 2 }, { 'a': 4, 'b': 5, 'c': 6 }] },\n        { 'a': [{ 'a': 1, 'b': 2 }, { 'a': 4, 'b': 6, 'c': 7 }] }\n      ];\n\n      var actual = lodashStable.filter(objects, _.matchesProperty('a', [{ 'a': 1 }, { 'a': 4, 'b': 5 }]));\n      assert.deepEqual(actual, [objects[0]]);\n    });\n    QUnit.test('should partial match maps', function(assert) {\n      assert.expect(3);\n\n      if (Map) {\n        var objects = [{ 'a': new Map }, { 'a': new Map }];\n        objects[0].a.set('a', 1);\n        objects[1].a.set('a', 1);\n        objects[1].a.set('b', 2);\n\n        var map = new Map;\n        map.set('b', 2);\n        var actual = lodashStable.filter(objects, _.matchesProperty('a', map));\n\n        assert.deepEqual(actual, [objects[1]]);\n\n        map.delete('b');\n        actual = lodashStable.filter(objects, _.matchesProperty('a', map));\n\n        assert.deepEqual(actual, objects);\n\n        map.set('c', 3);\n        actual = lodashStable.filter(objects, _.matchesProperty('a', map));\n\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should partial match sets', function(assert) {\n      assert.expect(3);\n\n      if (Set) {\n        var objects = [{ 'a': new Set }, { 'a': new Set }];\n        objects[0].a.add(1);\n        objects[1].a.add(1);\n        objects[1].a.add(2);\n\n        var set = new Set;\n        set.add(2);\n        var actual = lodashStable.filter(objects, _.matchesProperty('a', set));\n\n        assert.deepEqual(actual, [objects[1]]);\n\n        set.delete(2);\n        actual = lodashStable.filter(objects, _.matchesProperty('a', set));\n\n        assert.deepEqual(actual, objects);\n\n        set.add(3);\n        actual = lodashStable.filter(objects, _.matchesProperty('a', set));\n\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should match `undefined` values', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 1 }, { 'a': 1, 'b': 1 }, { 'a': 1, 'b': undefined }],\n          actual = lodashStable.map(objects, _.matchesProperty('b', undefined)),\n          expected = [false, false, true];\n\n      assert.deepEqual(actual, expected);\n\n      objects = [{ 'a': { 'a': 1 } }, { 'a': { 'a': 1, 'b': 1 } }, { 'a': { 'a': 1, 'b': undefined } }];\n      actual = lodashStable.map(objects, _.matchesProperty('a', { 'b': undefined }));\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should match `undefined` values of nested objects', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': { 'b': undefined } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var matches = _.matchesProperty(path, undefined);\n        assert.strictEqual(matches(object), true);\n      });\n\n      lodashStable.each(['a.a', ['a', 'a']], function(path) {\n        var matches = _.matchesProperty(path, undefined);\n        assert.strictEqual(matches(object), false);\n      });\n    });\n\n    QUnit.test('should match `undefined` values on primitives', function(assert) {\n      assert.expect(2);\n\n      numberProto.a = 1;\n      numberProto.b = undefined;\n\n      try {\n        var matches = _.matchesProperty('b', undefined);\n        assert.strictEqual(matches(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      numberProto.a = { 'b': 1, 'c': undefined };\n      try {\n        matches = _.matchesProperty('a', { 'c': undefined });\n        assert.strictEqual(matches(1), true);\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n      delete numberProto.a;\n      delete numberProto.b;\n    });\n\n    QUnit.test('should return `true` when comparing a `srcValue` of empty arrays and objects', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': [1], 'b': { 'c': 1 } }, { 'a': [2, 3], 'b': { 'd': 2 } }],\n          matches = _.matchesProperty('a', { 'a': [], 'b': {} });\n\n      var actual = lodashStable.filter(objects, function(object) {\n        return matches({ 'a': object });\n      });\n\n      assert.deepEqual(actual, objects);\n    });\n\n    QUnit.test('should not change behavior if `srcValue` is modified', function(assert) {\n      assert.expect(9);\n\n      lodashStable.each([{ 'a': { 'b': 2, 'c': 3 } }, { 'a': 1, 'b': 2 }, { 'a': 1 }], function(source, index) {\n        var object = lodashStable.cloneDeep(source),\n            matches = _.matchesProperty('a', source);\n\n        assert.strictEqual(matches({ 'a': object }), true);\n\n        if (index) {\n          source.a = 2;\n          source.b = 1;\n          source.c = 3;\n        } else {\n          source.a.b = 1;\n          source.a.c = 2;\n          source.a.d = 3;\n        }\n        assert.strictEqual(matches({ 'a': object }), true);\n        assert.strictEqual(matches({ 'a': source }), false);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.max');\n\n  (function() {\n    QUnit.test('should return the largest value from a collection', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.max([1, 2, 3]), 3);\n    });\n\n    QUnit.test('should return `undefined` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat([[]]),\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? _.max(value) : _.max();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with non-numeric collection values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.max(['a', 'b']), 'b');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mean');\n\n  (function() {\n    QUnit.test('should return the mean of an array of numbers', function(assert) {\n      assert.expect(1);\n\n      var array = [4, 2, 8, 6];\n      assert.strictEqual(_.mean(array), 5);\n    });\n\n    QUnit.test('should return `NaN` when passing empty `array` values', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubNaN),\n          actual = lodashStable.map(empties, _.mean);\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.meanBy');\n\n  (function() {\n    var objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }];\n\n    QUnit.test('should work with an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.meanBy(objects, function(object) {\n        return object.a;\n      });\n\n      assert.deepEqual(actual, 2);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.meanBy(objects, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [{ 'a': 2 }]);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var arrays = [[2], [3], [1]];\n      assert.strictEqual(_.meanBy(arrays, 0), 2);\n      assert.strictEqual(_.meanBy(objects, 'a'), 2);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.memoize');\n\n  (function() {\n    function CustomCache() {\n      this.clear();\n    }\n\n    CustomCache.prototype = {\n      'clear': function() {\n        this.__data__ = [];\n        return this;\n      },\n      'get': function(key) {\n        var entry = lodashStable.find(this.__data__, ['key', key]);\n        return entry && entry.value;\n      },\n      'has': function(key) {\n        return lodashStable.some(this.__data__, ['key', key]);\n      },\n      'set': function(key, value) {\n        this.__data__.push({ 'key': key, 'value': value });\n        return this;\n      }\n    };\n\n    function ImmutableCache() {\n      this.__data__ = [];\n    }\n\n    ImmutableCache.prototype = lodashStable.create(CustomCache.prototype, {\n      'constructor': ImmutableCache,\n      'clear': function() {\n        return new ImmutableCache;\n      },\n      'set': function(key, value) {\n        var result = new ImmutableCache;\n        result.__data__ = this.__data__.concat({ 'key': key, 'value': value });\n        return result;\n      }\n    });\n\n    QUnit.test('should memoize results based on the first argument given', function(assert) {\n      assert.expect(2);\n\n      var memoized = _.memoize(function(a, b, c) {\n        return a + b + c;\n      });\n\n      assert.strictEqual(memoized(1, 2, 3), 6);\n      assert.strictEqual(memoized(1, 3, 5), 6);\n    });\n\n    QUnit.test('should support a `resolver`', function(assert) {\n      assert.expect(2);\n\n      var fn = function(a, b, c) { return a + b + c; },\n          memoized = _.memoize(fn, fn);\n\n      assert.strictEqual(memoized(1, 2, 3), 6);\n      assert.strictEqual(memoized(1, 3, 5), 9);\n    });\n\n    QUnit.test('should use `this` binding of function for `resolver`', function(assert) {\n      assert.expect(2);\n\n      var fn = function(a, b, c) { return a + this.b + this.c; },\n          memoized = _.memoize(fn, fn);\n\n      var object = { 'memoized': memoized, 'b': 2, 'c': 3 };\n      assert.strictEqual(object.memoized(1), 6);\n\n      object.b = 3;\n      object.c = 5;\n      assert.strictEqual(object.memoized(1), 9);\n    });\n\n    QUnit.test('should throw a TypeError if `resolve` is truthy and not a function', function(assert) {\n      assert.expect(1);\n\n      assert.raises(function() { _.memoize(noop, true); }, TypeError);\n    });\n\n    QUnit.test('should not error if `resolver` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(resolver, index) {\n        try {\n          return _.isFunction(index ? _.memoize(noop, resolver) : _.memoize(noop));\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should check cache for own properties', function(assert) {\n      assert.expect(1);\n\n      var props = [\n        'constructor',\n        'hasOwnProperty',\n        'isPrototypeOf',\n        'propertyIsEnumerable',\n        'toLocaleString',\n        'toString',\n        'valueOf'\n      ];\n\n      var memoized = _.memoize(identity);\n\n      var actual = lodashStable.map(props, function(value) {\n        return memoized(value);\n      });\n\n      assert.deepEqual(actual, props);\n    });\n\n    QUnit.test('should cache the `__proto__` key', function(assert) {\n      assert.expect(8);\n\n      var array = [],\n          key = '__proto__';\n\n      lodashStable.times(2, function(index) {\n        var count = 0,\n            resolver = index ? identity : undefined;\n\n        var memoized = _.memoize(function() {\n          count++;\n          return array;\n        }, resolver);\n\n        var cache = memoized.cache;\n\n        memoized(key);\n        memoized(key);\n\n        assert.strictEqual(count, 1);\n        assert.strictEqual(cache.get(key), array);\n        assert.notOk(cache.__data__ instanceof Array);\n        assert.strictEqual(cache.delete(key), true);\n      });\n    });\n\n    QUnit.test('should allow `_.memoize.Cache` to be customized', function(assert) {\n      assert.expect(4);\n\n      var oldCache = _.memoize.Cache;\n      _.memoize.Cache = CustomCache;\n\n      var memoized = _.memoize(function(object) {\n        return object.id;\n      });\n\n      var cache = memoized.cache,\n          key1 = { 'id': 'a' },\n          key2 = { 'id': 'b' };\n\n      assert.strictEqual(memoized(key1), 'a');\n      assert.strictEqual(cache.has(key1), true);\n\n      assert.strictEqual(memoized(key2), 'b');\n      assert.strictEqual(cache.has(key2), true);\n\n      _.memoize.Cache = oldCache;\n    });\n\n    QUnit.test('should works with an immutable `_.memoize.Cache` ', function(assert) {\n      assert.expect(2);\n\n      var oldCache = _.memoize.Cache;\n      _.memoize.Cache = ImmutableCache;\n\n      var memoized = _.memoize(function(object) {\n        return object.id;\n      });\n\n      var key1 = { 'id': 'a' },\n          key2 = { 'id': 'b' };\n\n      memoized(key1);\n      memoized(key2);\n\n      var cache = memoized.cache;\n      assert.strictEqual(cache.has(key1), true);\n      assert.strictEqual(cache.has(key2), true);\n\n      _.memoize.Cache = oldCache;\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('memoizeCapped');\n\n  (function() {\n    var func = _._memoizeCapped;\n\n    QUnit.test('should enforce a max cache size of `MAX_MEMOIZE_SIZE`', function(assert) {\n      assert.expect(2);\n\n      if (func) {\n        var memoized = func(identity),\n            cache = memoized.cache;\n\n        lodashStable.times(MAX_MEMOIZE_SIZE, memoized);\n        assert.strictEqual(cache.size, MAX_MEMOIZE_SIZE);\n\n        memoized(MAX_MEMOIZE_SIZE);\n        assert.strictEqual(cache.size, 1);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.merge');\n\n  (function() {\n    QUnit.test('should merge `source` into `object`', function(assert) {\n      assert.expect(1);\n\n      var names = {\n        'characters': [\n          { 'name': 'barney' },\n          { 'name': 'fred' }\n        ]\n      };\n\n      var ages = {\n        'characters': [\n          { 'age': 36 },\n          { 'age': 40 }\n        ]\n      };\n\n      var heights = {\n        'characters': [\n          { 'height': '5\\'4\"' },\n          { 'height': '5\\'5\"' }\n        ]\n      };\n\n      var expected = {\n        'characters': [\n          { 'name': 'barney', 'age': 36, 'height': '5\\'4\"' },\n          { 'name': 'fred', 'age': 40, 'height': '5\\'5\"' }\n        ]\n      };\n\n      assert.deepEqual(_.merge(names, ages, heights), expected);\n    });\n\n    QUnit.test('should merge sources containing circular references', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'foo': { 'a': 1 },\n        'bar': { 'a': 2 }\n      };\n\n      var source = {\n        'foo': { 'b': { 'c': { 'd': {} } } },\n        'bar': {}\n      };\n\n      source.foo.b.c.d = source;\n      source.bar.b = source.foo.b;\n\n      var actual = _.merge(object, source);\n\n      assert.notStrictEqual(actual.bar.b, actual.foo.b);\n      assert.strictEqual(actual.foo.b.c.d, actual.foo.b.c.d.foo.b.c.d);\n    });\n\n    QUnit.test('should work with four arguments', function(assert) {\n      assert.expect(1);\n\n      var expected = { 'a': 4 },\n          actual = _.merge({ 'a': 1 }, { 'a': 2 }, { 'a': 3 }, expected);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should merge onto function `object` values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n\n      var source = { 'a': 1 },\n          actual = _.merge(Foo, source);\n\n      assert.strictEqual(actual, Foo);\n      assert.strictEqual(Foo.a, 1);\n    });\n\n    QUnit.test('should not merge onto function values of sources', function(assert) {\n      assert.expect(3);\n\n      var source1 = { 'a': function() {} },\n          source2 = { 'a': { 'b': 2 } },\n          actual = _.merge({}, source1, source2);\n\n      assert.deepEqual(actual, { 'a': { 'b': 2 } });\n\n      actual = _.merge(source1, source2);\n\n      assert.strictEqual(typeof actual.a, 'function');\n      assert.strictEqual(actual.a.b, 2);\n    });\n\n    QUnit.test('should merge onto non-plain `object` values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n\n      var object = new Foo,\n          actual = _.merge(object, { 'a': 1 });\n\n      assert.strictEqual(actual, object);\n      assert.strictEqual(object.a, 1);\n    });\n\n    QUnit.test('should treat sparse array sources as dense', function(assert) {\n      assert.expect(2);\n\n      var array = [1];\n      array[2] = 3;\n\n      var actual = _.merge([], array),\n          expected = array.slice();\n\n      expected[1] = undefined;\n\n      assert.ok('1' in actual);\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should merge `arguments` objects', function(assert) {\n      assert.expect(7);\n\n      var object1 = { 'value': args },\n          object2 = { 'value': { '3': 4 } },\n          expected = { '0': 1, '1': 2, '2': 3, '3': 4 },\n          actual = _.merge(object1, object2);\n\n      assert.notOk('3' in args);\n      assert.notOk(_.isArguments(actual.value));\n      assert.deepEqual(actual.value, expected);\n      object1.value = args;\n\n      actual = _.merge(object2, object1);\n      assert.notOk(_.isArguments(actual.value));\n      assert.deepEqual(actual.value, expected);\n\n      expected = { '0': 1, '1': 2, '2': 3 };\n\n      actual = _.merge({}, object1);\n      assert.notOk(_.isArguments(actual.value));\n      assert.deepEqual(actual.value, expected);\n    });\n\n    QUnit.test('should merge typed arrays', function(assert) {\n      assert.expect(4);\n\n      var array1 = [0],\n          array2 = [0, 0],\n          array3 = [0, 0, 0, 0],\n          array4 = [0, 0, 0, 0, 0, 0, 0, 0];\n\n      var arrays = [array2, array1, array4, array3, array2, array4, array4, array3, array2],\n          buffer = ArrayBuffer && new ArrayBuffer(8);\n\n      var expected = lodashStable.map(typedArrays, function(type, index) {\n        var array = arrays[index].slice();\n        array[0] = 1;\n        return root[type] ? { 'value': array } : false;\n      });\n\n      var actual = lodashStable.map(typedArrays, function(type) {\n        var Ctor = root[type];\n        return Ctor ? _.merge({ 'value': new Ctor(buffer) }, { 'value': [1] }) : false;\n      });\n\n      assert.ok(lodashStable.isArray(actual));\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(typedArrays, function(type, index) {\n        var array = arrays[index].slice();\n        array.push(1);\n        return root[type] ? { 'value': array } : false;\n      });\n\n      actual = lodashStable.map(typedArrays, function(type, index) {\n        var Ctor = root[type],\n            array = lodashStable.range(arrays[index].length);\n\n        array.push(1);\n        return Ctor ? _.merge({ 'value': array }, { 'value': new Ctor(buffer) }) : false;\n      });\n\n      assert.ok(lodashStable.isArray(actual));\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should assign `null` values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.merge({ 'a': 1 }, { 'a': null });\n      assert.strictEqual(actual.a, null);\n    });\n\n    QUnit.test('should assign non array/buffer/typed-array/plain-object source values directly', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n\n      var values = [new Foo, new Boolean, new Date, Foo, new Number, new String, new RegExp],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        var object = _.merge({}, { 'a': value, 'b': { 'c': value } });\n        return object.a === value && object.b.c === value;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should clone buffer source values', function(assert) {\n      assert.expect(3);\n\n      if (Buffer) {\n        var buffer = new Buffer([1]),\n            actual = _.merge({}, { 'value': buffer }).value;\n\n        assert.ok(lodashStable.isBuffer(actual));\n        assert.strictEqual(actual[0], buffer[0]);\n        assert.notStrictEqual(actual, buffer);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should deep clone array/typed-array/plain-object source values', function(assert) {\n      assert.expect(1);\n\n      var typedArray = Uint8Array\n        ? new Uint8Array([1])\n        : { 'buffer': [1] };\n\n      var props = ['0', 'buffer', 'a'],\n          values = [[{ 'a': 1 }], typedArray, { 'a': [1] }],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var key = props[index],\n            object = _.merge({}, { 'value': value }),\n            subValue = value[key],\n            newValue = object.value,\n            newSubValue = newValue[key];\n\n        return (\n          newValue !== value &&\n          newSubValue !== subValue &&\n          lodashStable.isEqual(newValue, value)\n        );\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not augment source objects', function(assert) {\n      assert.expect(6);\n\n      var source1 = { 'a': [{ 'a': 1 }] },\n          source2 = { 'a': [{ 'b': 2 }] },\n          actual = _.merge({}, source1, source2);\n\n      assert.deepEqual(source1.a, [{ 'a': 1 }]);\n      assert.deepEqual(source2.a, [{ 'b': 2 }]);\n      assert.deepEqual(actual.a, [{ 'a': 1, 'b': 2 }]);\n\n      var source1 = { 'a': [[1, 2, 3]] },\n          source2 = { 'a': [[3, 4]] },\n          actual = _.merge({}, source1, source2);\n\n      assert.deepEqual(source1.a, [[1, 2, 3]]);\n      assert.deepEqual(source2.a, [[3, 4]]);\n      assert.deepEqual(actual.a, [[3, 4, 3]]);\n    });\n\n    QUnit.test('should merge plain objects onto non-plain objects', function(assert) {\n      assert.expect(4);\n\n      function Foo(object) {\n        lodashStable.assign(this, object);\n      }\n\n      var object = { 'a': 1 },\n          actual = _.merge(new Foo, object);\n\n      assert.ok(actual instanceof Foo);\n      assert.deepEqual(actual, new Foo(object));\n\n      actual = _.merge([new Foo], [object]);\n      assert.ok(actual[0] instanceof Foo);\n      assert.deepEqual(actual, [new Foo(object)]);\n    });\n\n    QUnit.test('should not overwrite existing values with `undefined` values of object sources', function(assert) {\n      assert.expect(1);\n\n      var actual = _.merge({ 'a': 1 }, { 'a': undefined, 'b': undefined });\n      assert.deepEqual(actual, { 'a': 1, 'b': undefined });\n    });\n\n    QUnit.test('should not overwrite existing values with `undefined` values of array sources', function(assert) {\n      assert.expect(2);\n\n      var array = [1];\n      array[2] = 3;\n\n      var actual = _.merge([4, 5, 6], array),\n          expected = [1, 5, 3];\n\n      assert.deepEqual(actual, expected);\n\n      array = [1, , 3];\n      array[1] = undefined;\n\n      actual = _.merge([4, 5, 6], array);\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should skip merging when `object` and `source` are the same value', function(assert) {\n      assert.expect(1);\n\n      var object = {},\n          pass = true;\n\n      defineProperty(object, 'a', {\n        'configurable': true,\n        'enumerable': true,\n        'get': function() { pass = false; },\n        'set': function() { pass = false; }\n      });\n\n      _.merge(object, object);\n      assert.ok(pass);\n    });\n\n    QUnit.test('should convert values to arrays when merging arrays of `source`', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { '1': 'y', 'b': 'z', 'length': 2 } },\n          actual = _.merge(object, { 'a': ['x'] });\n\n      assert.deepEqual(actual, { 'a': ['x', 'y'] });\n\n      actual = _.merge({ 'a': {} }, { 'a': [] });\n      assert.deepEqual(actual, { 'a': [] });\n    });\n\n    QUnit.test('should not convert strings to arrays when merging arrays of `source`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 'abcde' },\n          actual = _.merge(object, { 'a': ['x', 'y', 'z'] });\n\n      assert.deepEqual(actual, { 'a': ['x', 'y', 'z'] });\n    });\n\n    QUnit.test('should not error on DOM elements', function(assert) {\n      assert.expect(1);\n\n      var object1 = { 'el': document && document.createElement('div') },\n          object2 = { 'el': document && document.createElement('div') },\n          pairs = [[{}, object1], [object1, object2]],\n          expected = lodashStable.map(pairs, stubTrue);\n\n      var actual = lodashStable.map(pairs, function(pair) {\n        try {\n          return _.merge(pair[0], pair[1]).el === pair[1].el;\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mergeWith');\n\n  (function() {\n    QUnit.test('should handle merging when `customizer` returns `undefined`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.mergeWith({ 'a': { 'b': [1, 1] } }, { 'a': { 'b': [0] } }, noop);\n      assert.deepEqual(actual, { 'a': { 'b': [0, 1] } });\n\n      actual = _.mergeWith([], [undefined], identity);\n      assert.deepEqual(actual, [undefined]);\n    });\n\n    QUnit.test('should clone sources when `customizer` returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      var source1 = { 'a': { 'b': { 'c': 1 } } },\n          source2 = { 'a': { 'b': { 'd': 2 } } };\n\n      _.mergeWith({}, source1, source2, noop);\n      assert.deepEqual(source1.a.b, { 'c': 1 });\n    });\n\n    QUnit.test('should defer to `customizer` for non `undefined` results', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mergeWith({ 'a': { 'b': [0, 1] } }, { 'a': { 'b': [2] } }, function(a, b) {\n        return lodashStable.isArray(a) ? a.concat(b) : undefined;\n      });\n\n      assert.deepEqual(actual, { 'a': { 'b': [0, 1, 2] } });\n    });\n\n    QUnit.test('should provide `stack` to `customizer`', function(assert) {\n      assert.expect(1);\n\n      var actual;\n\n      _.mergeWith({}, { 'a': { 'b': 2 } }, function() {\n        actual = _.last(arguments);\n      });\n\n      assert.ok(isNpm\n        ? actual.constructor.name == 'Stack'\n        : actual instanceof mapCaches.Stack\n      );\n    });\n\n    QUnit.test('should overwrite primitives with source object clones', function(assert) {\n      assert.expect(1);\n\n      var actual = _.mergeWith({ 'a': 0 }, { 'a': { 'b': ['c'] } }, function(a, b) {\n        return lodashStable.isArray(a) ? a.concat(b) : undefined;\n      });\n\n      assert.deepEqual(actual, { 'a': { 'b': ['c'] } });\n    });\n\n    QUnit.test('should pop the stack of sources for each sibling property', function(assert) {\n      assert.expect(1);\n\n      var array = ['b', 'c'],\n          object = { 'a': ['a'] },\n          source = { 'a': array, 'b': array };\n\n      var actual = _.mergeWith(object, source, function(a, b) {\n        return lodashStable.isArray(a) ? a.concat(b) : undefined;\n      });\n\n      assert.deepEqual(actual, { 'a': ['a', 'b', 'c'], 'b': ['b', 'c'] });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.method');\n\n  (function() {\n    QUnit.test('should create a function that calls a method of a given object', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': stubOne };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method.length, 1);\n        assert.strictEqual(method(object), 1);\n      });\n    });\n\n    QUnit.test('should work with deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': stubTwo } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(object), 2);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = lodashStable.times(3, _.constant);\n\n      lodashStable.each([1, [1]], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(array), 1);\n      });\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var expected = [1, 2, 3, 4],\n          object = { 'null': stubOne, 'undefined': stubTwo, 'fn': stubThree, '[object Object]': stubFour },\n          paths = [null, undefined, fn, {}];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var method = _.method(index ? [path] : path);\n          return method(object);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should work with inherited property values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = stubOne;\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(new Foo), 1);\n      });\n    });\n\n    QUnit.test('should use a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': stubOne, 'a': { 'b': stubTwo } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(object), 1);\n      });\n    });\n\n    QUnit.test('should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var method = _.method(path);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? method(value) : method();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var method = _.method(path);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? method(value) : method();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var object = {};\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(object), undefined);\n      });\n    });\n\n    QUnit.test('should apply partial arguments to function', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'fn': function() {\n          return slice.call(arguments);\n        }\n      };\n\n      lodashStable.each(['fn', ['fn']], function(path) {\n        var method = _.method(path, 1, 2, 3);\n        assert.deepEqual(method(object), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function() { return this.c; }, 'c': 1 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var method = _.method(path);\n        assert.strictEqual(method(object), 1);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.methodOf');\n\n  (function() {\n    QUnit.test('should create a function that calls a method of a given key', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': stubOne };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var methodOf = _.methodOf(object);\n        assert.strictEqual(methodOf.length, 1);\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n\n    QUnit.test('should work with deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': stubTwo } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var methodOf = _.methodOf(object);\n        assert.strictEqual(methodOf(path), 2);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = lodashStable.times(3, _.constant);\n\n      lodashStable.each([1, [1]], function(path) {\n        var methodOf = _.methodOf(array);\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var expected = [1, 2, 3, 4],\n          object = { 'null': stubOne, 'undefined': stubTwo, 'fn': stubThree, '[object Object]': stubFour },\n          paths = [null, undefined, fn, {}];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var methodOf = _.methodOf(object);\n          return methodOf(index ? [path] : path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should work with inherited property values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = stubOne;\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var methodOf = _.methodOf(new Foo);\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n\n    QUnit.test('should use a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': stubOne, 'a': { 'b': stubTwo } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var methodOf = _.methodOf(object);\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n\n    QUnit.test('should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var methodOf = index ? _.methodOf() : _.methodOf(value);\n          return methodOf(path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var methodOf = index ? _.methodOf() : _.methodOf(value);\n          return methodOf(path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var object = {},\n          methodOf = _.methodOf(object);\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        assert.strictEqual(methodOf(path), undefined);\n      });\n    });\n\n    QUnit.test('should apply partial arguments to function', function(assert) {\n      assert.expect(2);\n\n      var object = {\n        'fn': function() {\n          return slice.call(arguments);\n        }\n      };\n\n      var methodOf = _.methodOf(object, 1, 2, 3);\n\n      lodashStable.each(['fn', ['fn']], function(path) {\n        assert.deepEqual(methodOf(path), [1, 2, 3]);\n      });\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': function() { return this.c; }, 'c': 1 } },\n          methodOf = _.methodOf(object);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(methodOf(path), 1);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.min');\n\n  (function() {\n    QUnit.test('should return the smallest value from a collection', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.min([1, 2, 3]), 1);\n    });\n\n    QUnit.test('should return `undefined` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat([[]]),\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        try {\n          return index ? _.min(value) : _.min();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with non-numeric collection values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.min(['a', 'b']), 'a');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('extremum methods');\n\n  lodashStable.each(['max', 'maxBy', 'min', 'minBy'], function(methodName) {\n    var func = _[methodName],\n        isMax = /^max/.test(methodName);\n\n    QUnit.test('`_.' + methodName + '` should work with Date objects', function(assert) {\n      assert.expect(1);\n\n      var curr = new Date,\n          past = new Date(0);\n\n      assert.strictEqual(func([curr, past]), isMax ? curr : past);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with extremely large arrays', function(assert) {\n      assert.expect(1);\n\n      var array = lodashStable.range(0, 5e5);\n      assert.strictEqual(func(array), isMax ? 499999 : 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work when chaining on an array with only one value', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _([40])[methodName]();\n        assert.strictEqual(actual, 40);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  lodashStable.each(['maxBy', 'minBy'], function(methodName) {\n    var array = [1, 2, 3],\n        func = _[methodName],\n        isMax = methodName == 'maxBy';\n\n    QUnit.test('`_.' + methodName + '` should work with an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = func(array, function(n) {\n        return -n;\n      });\n\n      assert.strictEqual(actual, isMax ? 1 : 3);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }],\n          actual = func(objects, 'a');\n\n      assert.deepEqual(actual, objects[isMax ? 1 : 2]);\n\n      var arrays = [[2], [3], [1]];\n      actual = func(arrays, 0);\n\n      assert.deepEqual(actual, arrays[isMax ? 1 : 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work when `iteratee` returns +/-Infinity', function(assert) {\n      assert.expect(1);\n\n      var value = isMax ? -Infinity : Infinity,\n          object = { 'a': value };\n\n      var actual = func([object, { 'a': value }], function(object) {\n        return object.a;\n      });\n\n      assert.strictEqual(actual, object);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.mixin');\n\n  (function() {\n    function reset(wrapper) {\n      delete wrapper.a;\n      delete wrapper.prototype.a;\n      delete wrapper.b;\n      delete wrapper.prototype.b;\n    }\n\n    function Wrapper(value) {\n      if (!(this instanceof Wrapper)) {\n        return new Wrapper(value);\n      }\n      if (_.has(value, '__wrapped__')) {\n        var actions = slice.call(value.__actions__),\n            chain = value.__chain__;\n\n        value = value.__wrapped__;\n      }\n      this.__wrapped__ = value;\n      this.__actions__ = actions || [];\n      this.__chain__ = chain || false;\n    }\n\n    Wrapper.prototype.value = function() {\n      return getUnwrappedValue(this);\n    };\n\n    var array = ['a'],\n        source = { 'a': function(array) { return array[0]; }, 'b': 'B' };\n\n    QUnit.test('should mixin `source` methods into lodash', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        _.mixin(source);\n\n        assert.strictEqual(_.a(array), 'a');\n        assert.strictEqual(_(array).a().value(), 'a');\n        assert.notOk('b' in _);\n        assert.notOk('b' in _.prototype);\n\n        reset(_);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should mixin chaining methods by reference', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        _.mixin(source);\n        _.a = stubB;\n\n        assert.strictEqual(_.a(array), 'b');\n        assert.strictEqual(_(array).a().value(), 'a');\n\n        reset(_);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should use a default `object` of `this`', function(assert) {\n      assert.expect(3);\n\n      var object = lodashStable.create(_);\n      object.mixin(source);\n\n      assert.strictEqual(object.a(array), 'a');\n      assert.notOk('a' in _);\n      assert.notOk('a' in _.prototype);\n\n      reset(_);\n    });\n\n    QUnit.test('should accept an `object`', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n      _.mixin(object, source);\n      assert.strictEqual(object.a(array), 'a');\n    });\n\n    QUnit.test('should accept a function `object`', function(assert) {\n      assert.expect(2);\n\n      _.mixin(Wrapper, source);\n\n      var wrapped = Wrapper(array),\n          actual = wrapped.a();\n\n      assert.strictEqual(actual.value(), 'a');\n      assert.ok(actual instanceof Wrapper);\n\n      reset(Wrapper);\n    });\n\n    QUnit.test('should return `object`', function(assert) {\n      assert.expect(3);\n\n      var object = {};\n      assert.strictEqual(_.mixin(object, source), object);\n      assert.strictEqual(_.mixin(Wrapper, source), Wrapper);\n      assert.strictEqual(_.mixin(), _);\n\n      reset(Wrapper);\n    });\n\n    QUnit.test('should not assign inherited `source` methods', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype.a = noop;\n\n      var object = {};\n      assert.strictEqual(_.mixin(object, new Foo), object);\n    });\n\n    QUnit.test('should accept an `options`', function(assert) {\n      assert.expect(8);\n\n      function message(func, chain) {\n        return (func === _ ? 'lodash' : 'given') + ' function should ' + (chain ? '' : 'not ') + 'chain';\n      }\n\n      lodashStable.each([_, Wrapper], function(func) {\n        lodashStable.each([{ 'chain': false }, { 'chain': true }], function(options) {\n          if (!isNpm) {\n            if (func === _) {\n              _.mixin(source, options);\n            } else {\n              _.mixin(func, source, options);\n            }\n            var wrapped = func(array),\n                actual = wrapped.a();\n\n            if (options.chain) {\n              assert.strictEqual(actual.value(), 'a', message(func, true));\n              assert.ok(actual instanceof func, message(func, true));\n            } else {\n              assert.strictEqual(actual, 'a', message(func, false));\n              assert.notOk(actual instanceof func, message(func, false));\n            }\n            reset(func);\n          }\n          else {\n            skipAssert(assert, 2);\n          }\n        });\n      });\n    });\n\n    QUnit.test('should not extend lodash when an `object` is given with an empty `options` object', function(assert) {\n      assert.expect(1);\n\n      _.mixin({ 'a': noop }, {});\n      assert.notOk('a' in _);\n      reset(_);\n    });\n\n    QUnit.test('should not error for non-object `options` values', function(assert) {\n      assert.expect(2);\n\n      var pass = true;\n\n      try {\n        _.mixin({}, source, 1);\n      } catch (e) {\n        pass = false;\n      }\n      assert.ok(pass);\n\n      pass = true;\n\n      try {\n        _.mixin(source, 1);\n      } catch (e) {\n        pass = false;\n      }\n      assert.ok(pass);\n\n      reset(_);\n    });\n\n    QUnit.test('should not return the existing wrapped value when chaining', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([_, Wrapper], function(func) {\n        if (!isNpm) {\n          if (func === _) {\n            var wrapped = _(source),\n                actual = wrapped.mixin();\n\n            assert.strictEqual(actual.value(), _);\n          }\n          else {\n            wrapped = _(func);\n            actual = wrapped.mixin(source);\n            assert.notStrictEqual(actual, wrapped);\n          }\n          reset(func);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    QUnit.test('should produce methods that work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        _.mixin({ 'a': _.countBy, 'b': _.filter });\n\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            actual = _(array).a().map(square).b(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.b(_.map(_.a(array), square), isEven)));\n\n        reset(_);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.multiply');\n\n  (function() {\n    QUnit.test('should multiply two numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.multiply(6, 4), 24);\n      assert.strictEqual(_.multiply(-6, 4), -24);\n      assert.strictEqual(_.multiply(-6, -4), 24);\n    });\n\n    QUnit.test('should coerce arguments to numbers', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.multiply('6', '4'), 24);\n      assert.deepEqual(_.multiply('x', 'y'), NaN);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.orderBy');\n\n  (function() {\n    var objects = [\n      { 'a': 'x', 'b': 3 },\n      { 'a': 'y', 'b': 4 },\n      { 'a': 'x', 'b': 1 },\n      { 'a': 'y', 'b': 2 }\n    ];\n\n    QUnit.test('should sort by a single property by a specified order', function(assert) {\n      assert.expect(1);\n\n      var actual = _.orderBy(objects, 'a', 'desc');\n      assert.deepEqual(actual, [objects[1], objects[3], objects[0], objects[2]]);\n    });\n\n    QUnit.test('should sort by multiple properties by specified orders', function(assert) {\n      assert.expect(1);\n\n      var actual = _.orderBy(objects, ['a', 'b'], ['desc', 'asc']);\n      assert.deepEqual(actual, [objects[3], objects[1], objects[2], objects[0]]);\n    });\n\n    QUnit.test('should sort by a property in ascending order when its order is not specified', function(assert) {\n      assert.expect(2);\n\n      var expected = [objects[2], objects[0], objects[3], objects[1]],\n          actual = _.orderBy(objects, ['a', 'b']);\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(falsey, lodashStable.constant([objects[3], objects[1], objects[2], objects[0]]));\n\n      actual = lodashStable.map(falsey, function(order, index) {\n        return _.orderBy(objects, ['a', 'b'], index ? ['desc', order] : ['desc']);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `orders` specified as string objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.orderBy(objects, ['a'], [Object('desc')]);\n      assert.deepEqual(actual, [objects[1], objects[3], objects[0], objects[2]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.overArgs');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should transform each argument', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, doubled, square);\n      assert.deepEqual(over(5, 10), [10, 100]);\n    });\n\n    QUnit.test('should use `_.identity` when a predicate is nullish', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, undefined, null);\n      assert.deepEqual(over('a', 'b'), ['a', 'b']);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, 'b', 'a');\n      assert.deepEqual(over({ 'b': 2 }, { 'a': 1 }), [2, 1]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, { 'b': 1 }, { 'a': 1 });\n      assert.deepEqual(over({ 'b': 2 }, { 'a': 1 }), [false, true]);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, [['b', 1], ['a', 1]]);\n      assert.deepEqual(over({ 'b': 2 }, { 'a': 1 }), [false, true]);\n    });\n\n    QUnit.test('should differentiate between `_.property` and `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overArgs(fn, ['a', 1]);\n      assert.deepEqual(over({ 'a': 1 }, { '1': 2 }), [1, 2]);\n\n      over = _.overArgs(fn, [['a', 1]]);\n      assert.deepEqual(over({ 'a': 1 }), [true]);\n    });\n\n    QUnit.test('should flatten `transforms`', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, [doubled, square], String);\n      assert.deepEqual(over(5, 10, 15), [10, 100, '15']);\n    });\n\n    QUnit.test('should not transform any argument greater than the number of transforms', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, doubled, square);\n      assert.deepEqual(over(5, 10, 18), [10, 100, 18]);\n    });\n\n    QUnit.test('should not transform any arguments if no transforms are given', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn);\n      assert.deepEqual(over(5, 10, 18), [5, 10, 18]);\n    });\n\n    QUnit.test('should not pass `undefined` if there are more transforms than arguments', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(fn, doubled, identity);\n      assert.deepEqual(over(5), [10]);\n    });\n\n    QUnit.test('should provide the correct argument to each transform', function(assert) {\n      assert.expect(1);\n\n      var argsList = [],\n          transform = function() { argsList.push(slice.call(arguments)); },\n          over = _.overArgs(noop, transform, transform, transform);\n\n      over('a', 'b');\n      assert.deepEqual(argsList, [['a'], ['b']]);\n    });\n\n    QUnit.test('should use `this` binding of function for `transforms`', function(assert) {\n      assert.expect(1);\n\n      var over = _.overArgs(function(x) {\n        return this[x];\n      }, function(x) {\n        return this === x;\n      });\n\n      var object = { 'over': over, 'true': 1 };\n      assert.strictEqual(object.over(object), 1);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.negate');\n\n  (function() {\n    QUnit.test('should create a function that negates the result of `func`', function(assert) {\n      assert.expect(2);\n\n      var negate = _.negate(isEven);\n\n      assert.strictEqual(negate(1), true);\n      assert.strictEqual(negate(2), false);\n    });\n\n    QUnit.test('should create a function that negates the result of `func`', function(assert) {\n      assert.expect(2);\n\n      var negate = _.negate(isEven);\n\n      assert.strictEqual(negate(1), true);\n      assert.strictEqual(negate(2), false);\n    });\n\n    QUnit.test('should create a function that accepts multiple arguments', function(assert) {\n      assert.expect(1);\n\n      var argCount,\n          count = 5,\n          negate = _.negate(function() { argCount = arguments.length; }),\n          expected = lodashStable.times(count, stubTrue);\n\n      var actual = lodashStable.times(count, function(index) {\n        switch (index) {\n          case 0: negate(); break;\n          case 1: negate(1); break;\n          case 2: negate(1, 2); break;\n          case 3: negate(1, 2, 3); break;\n          case 4: negate(1, 2, 3, 4);\n        }\n        return argCount == index;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.noConflict');\n\n  (function() {\n    QUnit.test('should return the `lodash` function', function(assert) {\n      assert.expect(2);\n\n      if (!isModularize) {\n        assert.strictEqual(_.noConflict(), oldDash);\n        assert.notStrictEqual(root._, oldDash);\n        root._ = oldDash;\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should restore `_` only if `lodash` is the current `_` value', function(assert) {\n      assert.expect(2);\n\n      if (!isModularize) {\n        var object = root._ = {};\n        assert.strictEqual(_.noConflict(), oldDash);\n        assert.strictEqual(root._, object);\n        root._ = oldDash;\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work with a `root` of `this`', function(assert) {\n      assert.expect(2);\n\n      if (!coverage && !document && !isModularize && realm.object) {\n        var fs = require('fs'),\n            vm = require('vm'),\n            expected = {},\n            context = vm.createContext({ '_': expected, 'console': console }),\n            source = fs.readFileSync(filePath, 'utf8');\n\n        vm.runInContext(source + '\\nthis.lodash = this._.noConflict()', context);\n\n        assert.strictEqual(context._, expected);\n        assert.ok(context.lodash);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.now');\n\n  (function() {\n    QUnit.test('should return the number of milliseconds that have elapsed since the Unix epoch', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var stamp = +new Date,\n          actual = _.now();\n\n      assert.ok(actual >= stamp);\n\n      setTimeout(function() {\n        assert.ok(_.now() > actual);\n        done();\n      }, 32);\n    });\n\n    QUnit.test('should work with mocked `Date.now`', function(assert) {\n      assert.expect(1);\n\n      var now = Date.now;\n      Date.now = stubA;\n\n      var actual = _.now();\n      Date.now = now;\n\n      assert.strictEqual(actual, 'a');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.nth');\n\n  (function() {\n    var array = ['a', 'b', 'c', 'd'];\n\n    QUnit.test('should get the nth element of `array`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(array, function(value, index) {\n        return _.nth(array, index);\n      });\n\n      assert.deepEqual(actual, array);\n    });\n\n    QUnit.test('should work with a negative `n`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(lodashStable.range(1, array.length + 1), function(n) {\n        return _.nth(array, -n);\n      });\n\n      assert.deepEqual(actual, ['d', 'c', 'b', 'a']);\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(2);\n\n      var values = falsey,\n          expected = lodashStable.map(values, stubA);\n\n      var actual = lodashStable.map(values, function(n) {\n        return n ? _.nth(array, n) : _.nth(array);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      values = ['1', 1.6];\n      expected = lodashStable.map(values, stubB);\n\n      actual = lodashStable.map(values, function(n) {\n        return _.nth(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `undefined` for empty arrays', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined, []],\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(array) {\n        return _.nth(array, 1);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `undefined` for non-indexes', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2],\n          values = [Infinity, array.length],\n          expected = lodashStable.map(values, noop);\n\n      array[-1] = 3;\n\n      var actual = lodashStable.map(values, function(n) {\n        return _.nth(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.nthArg');\n\n  (function() {\n    var args = ['a', 'b', 'c', 'd'];\n\n    QUnit.test('should create a function that returns its nth argument', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(args, function(value, index) {\n        var func = _.nthArg(index);\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, args);\n    });\n\n    QUnit.test('should work with a negative `n`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(lodashStable.range(1, args.length + 1), function(n) {\n        var func = _.nthArg(-n);\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, ['d', 'c', 'b', 'a']);\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(2);\n\n      var values = falsey,\n          expected = lodashStable.map(values, stubA);\n\n      var actual = lodashStable.map(values, function(n) {\n        var func = n ? _.nthArg(n) : _.nthArg();\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      values = ['1', 1.6];\n      expected = lodashStable.map(values, stubB);\n\n      actual = lodashStable.map(values, function(n) {\n        var func = _.nthArg(n);\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `undefined` for empty arrays', function(assert) {\n      assert.expect(1);\n\n      var func = _.nthArg(1);\n      assert.strictEqual(func(), undefined);\n    });\n\n    QUnit.test('should return `undefined` for non-indexes', function(assert) {\n      assert.expect(1);\n\n      var values = [Infinity, args.length],\n          expected = lodashStable.map(values, noop);\n\n      var actual = lodashStable.map(values, function(n) {\n        var func = _.nthArg(n);\n        return func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.omit');\n\n  (function() {\n    var args = toArgs(['a', 'c']),\n        object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n        nested = { 'a': 1, 'b': { 'c': 2, 'd': 3 } };\n\n    QUnit.test('should flatten `paths`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.omit(object, 'a', 'c'), { 'b': 2, 'd': 4 });\n      assert.deepEqual(_.omit(object, ['a', 'd'], 'c'), { 'b': 2 });\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.omit(nested, 'b.c'), { 'a': 1, 'b': { 'd': 3} });\n    });\n\n    QUnit.test('should support path arrays', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } },\n          actual = _.omit(object, [['a.b']]);\n\n      assert.deepEqual(actual, { 'a': { 'b': 2 } });\n    });\n\n    QUnit.test('should omit a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.deepEqual(_.omit(object, path), { 'a': { 'b': 2 } });\n      });\n    });\n\n    QUnit.test('should coerce `paths` to strings', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.omit({ '0': 'a' }, 0), {});\n    });\n\n    QUnit.test('should return an empty object when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([null, undefined], function(value) {\n        objectProto.a = 1;\n        var actual = _.omit(value, 'valueOf');\n        delete objectProto.a;\n        assert.deepEqual(actual, {});\n      });\n    });\n\n    QUnit.test('should work with a primitive `object`', function(assert) {\n      assert.expect(1);\n\n      stringProto.a = 1;\n      stringProto.b = 2;\n\n      assert.deepEqual(_.omit('', 'b'), { 'a': 1 });\n\n      delete stringProto.a;\n      delete stringProto.b;\n    });\n\n    QUnit.test('should work with `arguments` object `paths`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.omit(object, args), { 'b': 2, 'd': 4 });\n    });\n\n    QUnit.test('should not mutate `object`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a'], 'a.b', ['a.b']], function(path) {\n        var object = { 'a': { 'b': 2 } };\n        _.omit(object, path);\n        assert.deepEqual(object, { 'a': { 'b': 2 } });\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.omitBy');\n\n  (function() {\n    QUnit.test('should work with a predicate argument', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\n\n      var actual = _.omitBy(object, function(n) {\n        return n != 2 && n != 4;\n      });\n\n      assert.deepEqual(actual, { 'b': 2, 'd': 4 });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('omit methods');\n\n  lodashStable.each(['omit', 'omitBy'], function(methodName) {\n    var expected = { 'b': 2, 'd': 4 },\n        func = _[methodName],\n        object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n        resolve = lodashStable.nthArg(1);\n\n    if (methodName == 'omitBy') {\n      resolve = function(object, props) {\n        props = lodashStable.castArray(props);\n        return function(value) {\n          return lodashStable.some(props, function(key) {\n            key = lodashStable.isSymbol(key) ? key : lodashStable.toString(key);\n            return object[key] === value;\n          });\n        };\n      };\n    }\n    QUnit.test('`_.' + methodName + '` should create an object with omitted string keyed properties', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(object, resolve(object, 'a')), { 'b': 2, 'c': 3, 'd': 4 });\n      assert.deepEqual(func(object, resolve(object, ['a', 'c'])), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should include inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype = object;\n\n      assert.deepEqual(func(new Foo, resolve(object, ['a', 'c'])), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)],\n          expected = [{ '0': 'b' }, { '0': 'b' }, { '-0': 'a' }, { '-0': 'a' }];\n\n      var actual = lodashStable.map(props, function(key) {\n        return func(object, resolve(object, key));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should include symbols', function(assert) {\n      assert.expect(3);\n\n      function Foo() {\n        this.a = 0;\n        this[symbol] = 1;\n      }\n\n      if (Symbol) {\n        var symbol2 = Symbol('b');\n        Foo.prototype[symbol2] = 2;\n\n        var symbol3 = Symbol('c');\n        defineProperty(Foo.prototype, symbol3, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 3\n        });\n\n        var foo = new Foo,\n            actual = func(foo, resolve(foo, 'a'));\n\n        assert.strictEqual(actual[symbol], 1);\n        assert.strictEqual(actual[symbol2], 2);\n        assert.notOk(symbol3 in actual);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should create an object with omitted symbols', function(assert) {\n      assert.expect(8);\n\n      function Foo() {\n        this.a = 0;\n        this[symbol] = 1;\n      }\n\n      if (Symbol) {\n        var symbol2 = Symbol('b');\n        Foo.prototype[symbol2] = 2;\n\n        var symbol3 = Symbol('c');\n        defineProperty(Foo.prototype, symbol3, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 3\n        });\n\n        var foo = new Foo,\n            actual = func(foo, resolve(foo, symbol));\n\n        assert.strictEqual(actual.a, 0);\n        assert.notOk(symbol in actual);\n        assert.strictEqual(actual[symbol2], 2);\n        assert.notOk(symbol3 in actual);\n\n        actual = func(foo, resolve(foo, symbol2));\n\n        assert.strictEqual(actual.a, 0);\n        assert.strictEqual(actual[symbol], 1);\n        assert.notOk(symbol2 in actual);\n        assert.notOk(symbol3 in actual);\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with an array `object`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(func(array, resolve(array, ['0', '2'])), { '1': 2 });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.once');\n\n  (function() {\n    QUnit.test('should invoke `func` once', function(assert) {\n      assert.expect(2);\n\n      var count = 0,\n          once = _.once(function() { return ++count; });\n\n      once();\n      assert.strictEqual(once(), 1);\n      assert.strictEqual(count, 1);\n    });\n\n    QUnit.test('should ignore recursive calls', function(assert) {\n      assert.expect(2);\n\n      var count = 0;\n\n      var once = _.once(function() {\n        once();\n        return ++count;\n      });\n\n      assert.strictEqual(once(), 1);\n      assert.strictEqual(count, 1);\n    });\n\n    QUnit.test('should not throw more than once', function(assert) {\n      assert.expect(2);\n\n      var once = _.once(function() {\n        throw new Error;\n      });\n\n      assert.raises(once);\n\n      once();\n      assert.ok(true);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.over');\n\n  (function() {\n    QUnit.test('should create a function that invokes `iteratees`', function(assert) {\n      assert.expect(1);\n\n      var over = _.over(Math.max, Math.min);\n      assert.deepEqual(over(1, 2, 3, 4), [4, 1]);\n    });\n\n    QUnit.test('should use `_.identity` when a predicate is nullish', function(assert) {\n      assert.expect(1);\n\n      var over = _.over(undefined, null);\n      assert.deepEqual(over('a', 'b', 'c'), ['a', 'a']);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.over('b', 'a');\n      assert.deepEqual(over({ 'a': 1, 'b': 2 }), [2, 1]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      var over = _.over({ 'b': 1 }, { 'a': 1 });\n      assert.deepEqual(over({ 'a': 1, 'b': 2 }), [false, true]);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.over([['b', 2], ['a', 2]]);\n\n      assert.deepEqual(over({ 'a': 1, 'b': 2 }), [true, false]);\n      assert.deepEqual(over({ 'a': 2, 'b': 1 }), [false, true]);\n    });\n\n    QUnit.test('should differentiate between `_.property` and `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(4);\n\n      var over = _.over(['a', 1]);\n\n      assert.deepEqual(over({ 'a': 1, '1': 2 }), [1, 2]);\n      assert.deepEqual(over({ 'a': 2, '1': 1 }), [2, 1]);\n\n      over = _.over([['a', 1]]);\n\n      assert.deepEqual(over({ 'a': 1 }), [true]);\n      assert.deepEqual(over({ 'a': 2 }), [false]);\n    });\n\n    QUnit.test('should provide arguments to predicates', function(assert) {\n      assert.expect(1);\n\n      var over = _.over(function() {\n        return slice.call(arguments);\n      });\n\n      assert.deepEqual(over('a', 'b', 'c'), [['a', 'b', 'c']]);\n    });\n\n    QUnit.test('should use `this` binding of function for `iteratees`', function(assert) {\n      assert.expect(1);\n\n      var over = _.over(function() { return this.b; }, function() { return this.a; }),\n          object = { 'over': over, 'a': 1, 'b': 2 };\n\n      assert.deepEqual(object.over(), [2, 1]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.overEvery');\n\n  (function() {\n    QUnit.test('should create a function that returns `true` if all predicates return truthy', function(assert) {\n      assert.expect(1);\n\n      var over = _.overEvery(stubTrue, stubOne, stubA);\n      assert.strictEqual(over(), true);\n    });\n\n    QUnit.test('should return `false` as soon as a predicate returns falsey', function(assert) {\n      assert.expect(2);\n\n      var count = 0,\n          countFalse = function() { count++; return false; },\n          countTrue = function() { count++; return true; },\n          over = _.overEvery(countTrue, countFalse, countTrue);\n\n      assert.strictEqual(over(), false);\n      assert.strictEqual(count, 2);\n    });\n\n    QUnit.test('should use `_.identity` when a predicate is nullish', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery(undefined, null);\n\n      assert.strictEqual(over(true), true);\n      assert.strictEqual(over(false), false);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery('b', 'a');\n\n      assert.strictEqual(over({ 'a': 1, 'b': 1 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 1 }), false);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery({ 'b': 2 }, { 'a': 1 });\n\n      assert.strictEqual(over({ 'a': 1, 'b': 2 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 2 }), false);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery([['b', 2], ['a', 1]]);\n\n      assert.strictEqual(over({ 'a': 1, 'b': 2 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 2 }), false);\n    });\n\n    QUnit.test('should differentiate between `_.property` and `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(5);\n\n      var over = _.overEvery(['a', 1]);\n\n      assert.strictEqual(over({ 'a': 1, '1': 1 }), true);\n      assert.strictEqual(over({ 'a': 1, '1': 0 }), false);\n      assert.strictEqual(over({ 'a': 0, '1': 1 }), false);\n\n      over = _.overEvery([['a', 1]]);\n\n      assert.strictEqual(over({ 'a': 1 }), true);\n      assert.strictEqual(over({ 'a': 2 }), false);\n    });\n\n    QUnit.test('should flatten `predicates`', function(assert) {\n      assert.expect(1);\n\n      var over = _.overEvery(stubTrue, [stubFalse]);\n      assert.strictEqual(over(), false);\n    });\n\n    QUnit.test('should provide arguments to predicates', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      var over = _.overEvery(function() {\n        args = slice.call(arguments);\n      });\n\n      over('a', 'b', 'c');\n      assert.deepEqual(args, ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should use `this` binding of function for `predicates`', function(assert) {\n      assert.expect(2);\n\n      var over = _.overEvery(function() { return this.b; }, function() { return this.a; }),\n          object = { 'over': over, 'a': 1, 'b': 2 };\n\n      assert.strictEqual(object.over(), true);\n\n      object.a = 0;\n      assert.strictEqual(object.over(), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.overSome');\n\n  (function() {\n    QUnit.test('should create a function that returns `true` if any predicates return truthy', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome(stubFalse, stubOne, stubString);\n      assert.strictEqual(over(), true);\n\n      over = _.overSome(stubNull, stubA, stubZero);\n      assert.strictEqual(over(), true);\n    });\n\n    QUnit.test('should return `true` as soon as `predicate` returns truthy', function(assert) {\n      assert.expect(2);\n\n      var count = 0,\n          countFalse = function() { count++; return false; },\n          countTrue = function() { count++; return true; },\n          over = _.overSome(countFalse, countTrue, countFalse);\n\n      assert.strictEqual(over(), true);\n      assert.strictEqual(count, 2);\n    });\n\n    QUnit.test('should return `false` if all predicates return falsey', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome(stubFalse, stubFalse, stubFalse);\n      assert.strictEqual(over(), false);\n\n      over = _.overSome(stubNull, stubZero, stubString);\n      assert.strictEqual(over(), false);\n    });\n\n    QUnit.test('should use `_.identity` when a predicate is nullish', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome(undefined, null);\n\n      assert.strictEqual(over(true), true);\n      assert.strictEqual(over(false), false);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome('b', 'a');\n\n      assert.strictEqual(over({ 'a': 1, 'b': 0 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 0 }), false);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome({ 'b': 2 }, { 'a': 1 });\n\n      assert.strictEqual(over({ 'a': 0, 'b': 2 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 0 }), false);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome([['b', 2], ['a', 1]]);\n\n      assert.strictEqual(over({ 'a': 0, 'b': 2 }), true);\n      assert.strictEqual(over({ 'a': 0, 'b': 0 }), false);\n    });\n\n    QUnit.test('should differentiate between `_.property` and `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(5);\n\n      var over = _.overSome(['a', 1]);\n\n      assert.strictEqual(over({ 'a': 0, '1': 0 }), false);\n      assert.strictEqual(over({ 'a': 1, '1': 0 }), true);\n      assert.strictEqual(over({ 'a': 0, '1': 1 }), true);\n\n      over = _.overSome([['a', 1]]);\n\n      assert.strictEqual(over({ 'a': 1 }), true);\n      assert.strictEqual(over({ 'a': 2 }), false);\n    });\n\n    QUnit.test('should flatten `predicates`', function(assert) {\n      assert.expect(1);\n\n      var over = _.overSome(stubFalse, [stubTrue]);\n      assert.strictEqual(over(), true);\n    });\n\n    QUnit.test('should provide arguments to predicates', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      var over = _.overSome(function() {\n        args = slice.call(arguments);\n      });\n\n      over('a', 'b', 'c');\n      assert.deepEqual(args, ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should use `this` binding of function for `predicates`', function(assert) {\n      assert.expect(2);\n\n      var over = _.overSome(function() { return this.b; }, function() { return this.a; }),\n          object = { 'over': over, 'a': 1, 'b': 2 };\n\n      assert.strictEqual(object.over(), true);\n\n      object.a = object.b = 0;\n      assert.strictEqual(object.over(), false);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pad');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should pad a string to a given length', function(assert) {\n      assert.expect(1);\n\n      var values = [, undefined],\n          expected = lodashStable.map(values, lodashStable.constant(' abc  '));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.pad(string, 6, value) : _.pad(string, 6);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should truncate pad characters to fit the pad length', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.pad(string, 8), '  abc   ');\n      assert.strictEqual(_.pad(string, 8, '_-'), '_-abc_-_');\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(1);\n\n      var values = [Object(string), { 'toString': lodashStable.constant(string) }],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.pad(value, 6) === ' abc  ';\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.padEnd');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should pad a string to a given length', function(assert) {\n      assert.expect(1);\n\n      var values = [, undefined],\n          expected = lodashStable.map(values, lodashStable.constant('abc   '));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.padEnd(string, 6, value) : _.padEnd(string, 6);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should truncate pad characters to fit the pad length', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.padEnd(string, 6, '_-'), 'abc_-_');\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(1);\n\n      var values = [Object(string), { 'toString': lodashStable.constant(string) }],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.padEnd(value, 6) === 'abc   ';\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.padStart');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should pad a string to a given length', function(assert) {\n      assert.expect(1);\n\n      var values = [, undefined],\n          expected = lodashStable.map(values, lodashStable.constant('   abc'));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.padStart(string, 6, value) : _.padStart(string, 6);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should truncate pad characters to fit the pad length', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.padStart(string, 6, '_-'), '_-_abc');\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(1);\n\n      var values = [Object(string), { 'toString': lodashStable.constant(string) }],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.padStart(value, 6) === '   abc';\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('pad methods');\n\n  lodashStable.each(['pad', 'padStart', 'padEnd'], function(methodName) {\n    var func = _[methodName],\n        isPad = methodName == 'pad',\n        isStart = methodName == 'padStart',\n        string = 'abc';\n\n    QUnit.test('`_.' + methodName + '` should not pad if string is >= `length`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(func(string, 2), string);\n      assert.strictEqual(func(string, 3), string);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat negative `length` as `0`', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([0, -2], function(length) {\n        assert.strictEqual(func(string, length), string);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `length` to a number', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each(['', '4'], function(length) {\n        var actual = length ? (isStart ? ' abc' : 'abc ') : string;\n        assert.strictEqual(func(string, length), actual);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat nullish values as empty strings', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each([undefined, '_-'], function(chars) {\n        var expected = chars ? (isPad ? '__' : chars) : '  ';\n        assert.strictEqual(func(null, 2, chars), expected);\n        assert.strictEqual(func(undefined, 2, chars), expected);\n        assert.strictEqual(func('', 2, chars), expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `string` when `chars` coerces to an empty string', function(assert) {\n      assert.expect(1);\n\n      var values = ['', Object('')],\n          expected = lodashStable.map(values, lodashStable.constant(string));\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.pad(string, 6, value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.parseInt');\n\n  (function() {\n    QUnit.test('should accept a `radix`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.range(2, 37);\n\n      var actual = lodashStable.map(expected, function(radix) {\n        return _.parseInt('10', radix);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use a radix of `10`, for non-hexadecimals, if `radix` is `undefined` or `0`', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.parseInt('10'), 10);\n      assert.strictEqual(_.parseInt('10', 0), 10);\n      assert.strictEqual(_.parseInt('10', 10), 10);\n      assert.strictEqual(_.parseInt('10', undefined), 10);\n    });\n\n    QUnit.test('should use a radix of `16`, for hexadecimals, if `radix` is `undefined` or `0`', function(assert) {\n      assert.expect(8);\n\n      lodashStable.each(['0x20', '0X20'], function(string) {\n        assert.strictEqual(_.parseInt(string), 32);\n        assert.strictEqual(_.parseInt(string, 0), 32);\n        assert.strictEqual(_.parseInt(string, 16), 32);\n        assert.strictEqual(_.parseInt(string, undefined), 32);\n      });\n    });\n\n    QUnit.test('should use a radix of `10` for string with leading zeros', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.parseInt('08'), 8);\n      assert.strictEqual(_.parseInt('08', 10), 8);\n    });\n\n    QUnit.test('should parse strings with leading whitespace', function(assert) {\n      assert.expect(2);\n\n      var expected = [8, 8, 10, 10, 32, 32, 32, 32];\n\n      lodashStable.times(2, function(index) {\n        var actual = [],\n            func = (index ? (lodashBizarro || {}) : _).parseInt;\n\n        if (func) {\n          lodashStable.times(2, function(otherIndex) {\n            var string = otherIndex ? '10' : '08';\n            actual.push(\n              func(whitespace + string, 10),\n              func(whitespace + string)\n            );\n          });\n\n          lodashStable.each(['0x20', '0X20'], function(string) {\n            actual.push(\n              func(whitespace + string),\n              func(whitespace + string, 16)\n            );\n          });\n\n          assert.deepEqual(actual, expected);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    QUnit.test('should coerce `radix` to a number', function(assert) {\n      assert.expect(2);\n\n      var object = { 'valueOf': stubZero };\n      assert.strictEqual(_.parseInt('08', object), 8);\n      assert.strictEqual(_.parseInt('0x20', object), 32);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(2);\n\n      var strings = lodashStable.map(['6', '08', '10'], Object),\n          actual = lodashStable.map(strings, _.parseInt);\n\n      assert.deepEqual(actual, [6, 8, 10]);\n\n      actual = lodashStable.map('123', _.parseInt);\n      assert.deepEqual(actual, [1, 2, 3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('partial methods');\n\n  lodashStable.each(['partial', 'partialRight'], function(methodName) {\n    var func = _[methodName],\n        isPartial = methodName == 'partial',\n        ph = func.placeholder;\n\n    QUnit.test('`_.' + methodName + '` partially applies arguments', function(assert) {\n      assert.expect(1);\n\n      var par = func(identity, 'a');\n      assert.strictEqual(par(), 'a');\n    });\n\n    QUnit.test('`_.' + methodName + '` creates a function that can be invoked with additional arguments', function(assert) {\n      assert.expect(1);\n\n      var fn = function(a, b) { return [a, b]; },\n          par = func(fn, 'a'),\n          expected = isPartial ? ['a', 'b'] : ['b', 'a'];\n\n      assert.deepEqual(par('b'), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` works when there are no partially applied arguments and the created function is invoked without additional arguments', function(assert) {\n      assert.expect(1);\n\n      var fn = function() { return arguments.length; },\n          par = func(fn);\n\n      assert.strictEqual(par(), 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` works when there are no partially applied arguments and the created function is invoked with additional arguments', function(assert) {\n      assert.expect(1);\n\n      var par = func(identity);\n      assert.strictEqual(par('a'), 'a');\n    });\n\n    QUnit.test('`_.' + methodName + '` should support placeholders', function(assert) {\n      assert.expect(4);\n\n      var fn = function() { return slice.call(arguments); },\n          par = func(fn, ph, 'b', ph);\n\n      assert.deepEqual(par('a', 'c'), ['a', 'b', 'c']);\n      assert.deepEqual(par('a'), ['a', 'b', undefined]);\n      assert.deepEqual(par(), [undefined, 'b', undefined]);\n\n      if (isPartial) {\n        assert.deepEqual(par('a', 'c', 'd'), ['a', 'b', 'c', 'd']);\n      } else {\n        par = func(fn, ph, 'c', ph);\n        assert.deepEqual(par('a', 'b', 'd'), ['a', 'b', 'c', 'd']);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should use `_.placeholder` when set', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var _ph = _.placeholder = {},\n            fn = function() { return slice.call(arguments); },\n            par = func(fn, _ph, 'b', ph),\n            expected = isPartial ? ['a', 'b', ph, 'c'] : ['a', 'c', 'b', ph];\n\n        assert.deepEqual(par('a', 'c'), expected);\n        delete _.placeholder;\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` creates a function with a `length` of `0`', function(assert) {\n      assert.expect(1);\n\n      var fn = function(a, b, c) {},\n          par = func(fn, 'a');\n\n      assert.strictEqual(par.length, 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ensure `new par` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(value) {\n        return value && object;\n      }\n\n      var object = {},\n          par = func(Foo);\n\n      assert.ok(new par instanceof Foo);\n      assert.strictEqual(new par(true), object);\n    });\n\n    QUnit.test('`_.' + methodName + '` should clone metadata for created functions', function(assert) {\n      assert.expect(3);\n\n      function greet(greeting, name) {\n        return greeting + ' ' + name;\n      }\n\n      var par1 = func(greet, 'hi'),\n          par2 = func(par1, 'barney'),\n          par3 = func(par1, 'pebbles');\n\n      assert.strictEqual(par1('fred'), isPartial ? 'hi fred' : 'fred hi');\n      assert.strictEqual(par2(), isPartial ? 'hi barney'  : 'barney hi');\n      assert.strictEqual(par3(), isPartial ? 'hi pebbles' : 'pebbles hi');\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with curried functions', function(assert) {\n      assert.expect(2);\n\n      var fn = function(a, b, c) { return a + b + c; },\n          curried = _.curry(func(fn, 1), 2);\n\n      assert.strictEqual(curried(2, 3), 6);\n      assert.strictEqual(curried(2)(3), 6);\n    });\n\n    QUnit.test('should work with placeholders and curried functions', function(assert) {\n      assert.expect(1);\n\n      var fn = function() { return slice.call(arguments); },\n          curried = _.curry(fn),\n          par = func(curried, ph, 'b', ph, 'd');\n\n      assert.deepEqual(par('a', 'c'), ['a', 'b', 'c', 'd']);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.partialRight');\n\n  (function() {\n    QUnit.test('should work as a deep `_.defaults`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { 'b': 2 } },\n          source = { 'a': { 'b': 3, 'c': 3 } },\n          expected = { 'a': { 'b': 2, 'c': 3 } };\n\n      var defaultsDeep = _.partialRight(_.mergeWith, function deep(value, other) {\n        return lodashStable.isObject(value) ? _.mergeWith(value, other, deep) : value;\n      });\n\n      assert.deepEqual(defaultsDeep(object, source), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('methods using `createWrapper`');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    var ph1 = _.bind.placeholder,\n        ph2 = _.bindKey.placeholder,\n        ph3 = _.partial.placeholder,\n        ph4 = _.partialRight.placeholder;\n\n    QUnit.test('should work with combinations of partial functions', function(assert) {\n      assert.expect(1);\n\n      var a = _.partial(fn),\n          b = _.partialRight(a, 3),\n          c = _.partial(b, 1);\n\n      assert.deepEqual(c(2), [1, 2, 3]);\n    });\n\n    QUnit.test('should work with combinations of bound and partial functions', function(assert) {\n      assert.expect(3);\n\n      var fn = function() {\n        var result = [this.a];\n        push.apply(result, arguments);\n        return result;\n      };\n\n      var expected = [1, 2, 3, 4],\n          object = { 'a': 1, 'fn': fn };\n\n      var a = _.bindKey(object, 'fn'),\n          b = _.partialRight(a, 4),\n          c = _.partial(b, 2);\n\n      assert.deepEqual(c(3), expected);\n\n      a = _.bind(fn, object);\n      b = _.partialRight(a, 4);\n      c = _.partial(b, 2);\n\n      assert.deepEqual(c(3), expected);\n\n      a = _.partial(fn, 2);\n      b = _.bind(a, object);\n      c = _.partialRight(b, 4);\n\n      assert.deepEqual(c(3), expected);\n    });\n\n    QUnit.test('should ensure `new combo` is an instance of `func`', function(assert) {\n      assert.expect(2);\n\n      function Foo(a, b, c) {\n        return b === 0 && object;\n      }\n\n      var combo = _.partial(_.partialRight(Foo, 3), 1),\n          object = {};\n\n      assert.ok(new combo(2) instanceof Foo);\n      assert.strictEqual(new combo(0), object);\n    });\n\n    QUnit.test('should work with combinations of functions with placeholders', function(assert) {\n      assert.expect(3);\n\n      var expected = [1, 2, 3, 4, 5, 6],\n          object = { 'fn': fn };\n\n      var a = _.bindKey(object, 'fn', ph2, 2),\n          b = _.partialRight(a, ph4, 6),\n          c = _.partial(b, 1, ph3, 4);\n\n      assert.deepEqual(c(3, 5), expected);\n\n      a = _.bind(fn, object, ph1, 2);\n      b = _.partialRight(a, ph4, 6);\n      c = _.partial(b, 1, ph3, 4);\n\n      assert.deepEqual(c(3, 5), expected);\n\n      a = _.partial(fn, ph3, 2);\n      b = _.bind(a, object, 1, ph1, 4);\n      c = _.partialRight(b, ph4, 6);\n\n      assert.deepEqual(c(3, 5), expected);\n    });\n\n    QUnit.test('should work with combinations of functions with overlapping placeholders', function(assert) {\n      assert.expect(3);\n\n      var expected = [1, 2, 3, 4],\n          object = { 'fn': fn };\n\n      var a = _.bindKey(object, 'fn', ph2, 2),\n          b = _.partialRight(a, ph4, 4),\n          c = _.partial(b, ph3, 3);\n\n      assert.deepEqual(c(1), expected);\n\n      a = _.bind(fn, object, ph1, 2);\n      b = _.partialRight(a, ph4, 4);\n      c = _.partial(b, ph3, 3);\n\n      assert.deepEqual(c(1), expected);\n\n      a = _.partial(fn, ph3, 2);\n      b = _.bind(a, object, ph1, 3);\n      c = _.partialRight(b, ph4, 4);\n\n      assert.deepEqual(c(1), expected);\n    });\n\n    QUnit.test('should work with recursively bound functions', function(assert) {\n      assert.expect(1);\n\n      var fn = function() {\n        return this.a;\n      };\n\n      var a = _.bind(fn, { 'a': 1 }),\n          b = _.bind(a,  { 'a': 2 }),\n          c = _.bind(b,  { 'a': 3 });\n\n      assert.strictEqual(c(), 1);\n    });\n\n    QUnit.test('should work when hot', function(assert) {\n      assert.expect(12);\n\n      lodashStable.times(2, function(index) {\n        var fn = function() {\n          var result = [this];\n          push.apply(result, arguments);\n          return result;\n        };\n\n        var object = {},\n            bound1 = index ? _.bind(fn, object, 1) : _.bind(fn, object),\n            expected = [object, 1, 2, 3];\n\n        var actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var bound2 = index ? _.bind(bound1, null, 2) : _.bind(bound1);\n          return index ? bound2(3) : bound2(1, 2, 3);\n        }));\n\n        assert.deepEqual(actual, expected);\n\n        actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var bound1 = index ? _.bind(fn, object, 1) : _.bind(fn, object),\n              bound2 = index ? _.bind(bound1, null, 2) : _.bind(bound1);\n\n          return index ? bound2(3) : bound2(1, 2, 3);\n        }));\n\n        assert.deepEqual(actual, expected);\n      });\n\n      lodashStable.each(['curry', 'curryRight'], function(methodName, index) {\n        var fn = function(a, b, c) { return [a, b, c]; },\n            curried = _[methodName](fn),\n            expected = index ? [3, 2, 1] :  [1, 2, 3];\n\n        var actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          return curried(1)(2)(3);\n        }));\n\n        assert.deepEqual(actual, expected);\n\n        actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var curried = _[methodName](fn);\n          return curried(1)(2)(3);\n        }));\n\n        assert.deepEqual(actual, expected);\n      });\n\n      lodashStable.each(['partial', 'partialRight'], function(methodName, index) {\n        var func = _[methodName],\n            fn = function() { return slice.call(arguments); },\n            par1 = func(fn, 1),\n            expected = index ? [3, 2, 1] : [1, 2, 3];\n\n        var actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var par2 = func(par1, 2);\n          return par2(3);\n        }));\n\n        assert.deepEqual(actual, expected);\n\n        actual = _.last(lodashStable.times(HOT_COUNT, function() {\n          var par1 = func(fn, 1),\n              par2 = func(par1, 2);\n\n          return par2(3);\n        }));\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.partition');\n\n  (function() {\n    var array = [1, 0, 1];\n\n    QUnit.test('should split elements into two groups by `predicate`', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.partition([], identity), [[], []]);\n      assert.deepEqual(_.partition(array, stubTrue), [array, []]);\n      assert.deepEqual(_.partition(array, stubFalse), [[], array]);\n    });\n\n    QUnit.test('should use `_.identity` when `predicate` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([[1, 1], [0]]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.partition(array, value) : _.partition(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 1 }, { 'a': 1 }, { 'b': 2 }],\n          actual = _.partition(objects, 'a');\n\n      assert.deepEqual(actual, [objects.slice(0, 2), objects.slice(2)]);\n    });\n\n    QUnit.test('should work with a number for `predicate`', function(assert) {\n      assert.expect(2);\n\n      var array = [\n        [1, 0],\n        [0, 1],\n        [1, 0]\n      ];\n\n      assert.deepEqual(_.partition(array, 0), [[array[0], array[2]], [array[1]]]);\n      assert.deepEqual(_.partition(array, 1), [[array[1]], [array[0], array[2]]]);\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.partition({ 'a': 1.1, 'b': 0.2, 'c': 1.3 }, Math.floor);\n      assert.deepEqual(actual, [[1.1, 1.3], [0.2]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pick');\n\n  (function() {\n    var args = toArgs(['a', 'c']),\n        object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n        nested = { 'a': 1, 'b': { 'c': 2, 'd': 3 } };\n\n    QUnit.test('should flatten `paths`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.pick(object, 'a', 'c'), { 'a': 1, 'c': 3 });\n      assert.deepEqual(_.pick(object, ['a', 'd'], 'c'), { 'a': 1, 'c': 3, 'd': 4 });\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.pick(nested, 'b.c'), { 'b': { 'c': 2 } });\n    });\n\n    QUnit.test('should support path arrays', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } },\n          actual = _.pick(object, [['a.b']]);\n\n      assert.deepEqual(actual, { 'a.b': 1 });\n    });\n\n    QUnit.test('should pick a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.deepEqual(_.pick(object, path), { 'a.b': 1 });\n      });\n    });\n\n    QUnit.test('should coerce `paths` to strings', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.pick({ '0': 'a', '1': 'b' }, 0), { '0': 'a' });\n    });\n\n    QUnit.test('should return an empty object when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([null, undefined], function(value) {\n        assert.deepEqual(_.pick(value, 'valueOf'), {});\n      });\n    });\n\n    QUnit.test('should work with a primitive `object`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.pick('', 'slice'), { 'slice': ''.slice });\n    });\n\n    QUnit.test('should work with `arguments` object `paths`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.pick(object, args), { 'a': 1, 'c': 3 });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pickBy');\n\n  (function() {\n    QUnit.test('should work with a predicate argument', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\n\n      var actual = _.pickBy(object, function(n) {\n        return n == 1 || n == 3;\n      });\n\n      assert.deepEqual(actual, { 'a': 1, 'c': 3 });\n    });\n\n    QUnit.test('should not treat keys with dots as deep paths', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a.b.c': 1 },\n          actual = _.pickBy(object, stubTrue);\n\n      assert.deepEqual(actual, { 'a.b.c': 1 });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('pick methods');\n\n  lodashStable.each(['pick', 'pickBy'], function(methodName) {\n    var expected = { 'a': 1, 'c': 3 },\n        func = _[methodName],\n        isPick = methodName == 'pick',\n        object = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 },\n        resolve = lodashStable.nthArg(1);\n\n    if (methodName == 'pickBy') {\n      resolve = function(object, props) {\n        props = lodashStable.castArray(props);\n        return function(value) {\n          return lodashStable.some(props, function(key) {\n            key = lodashStable.isSymbol(key) ? key : lodashStable.toString(key);\n            return object[key] === value;\n          });\n        };\n      };\n    }\n    QUnit.test('`_.' + methodName + '` should create an object of picked string keyed properties', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(object, resolve(object, 'a')), { 'a': 1 });\n      assert.deepEqual(func(object, resolve(object, ['a', 'c'])), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should pick inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {}\n      Foo.prototype = object;\n\n      var foo = new Foo;\n      assert.deepEqual(func(foo, resolve(foo, ['a', 'c'])), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)],\n          expected = [{ '-0': 'a' }, { '-0': 'a' }, { '0': 'b' }, { '0': 'b' }];\n\n      var actual = lodashStable.map(props, function(key) {\n        return func(object, resolve(object, key));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should pick symbols', function(assert) {\n      assert.expect(3);\n\n      function Foo() {\n        this[symbol] = 1;\n      }\n\n      if (Symbol) {\n        var symbol2 = Symbol('b');\n        Foo.prototype[symbol2] = 2;\n\n        var symbol3 = Symbol('c');\n        defineProperty(Foo.prototype, symbol3, {\n          'configurable': true,\n          'enumerable': false,\n          'writable': true,\n          'value': 3\n        });\n\n        var foo = new Foo,\n            actual = func(foo, resolve(foo, [symbol, symbol2, symbol3]));\n\n        assert.strictEqual(actual[symbol], 1);\n        assert.strictEqual(actual[symbol2], 2);\n\n        if (isPick) {\n          assert.strictEqual(actual[symbol3], 3);\n        } else {\n          assert.notOk(symbol3 in actual);\n        }\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with an array `object`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      assert.deepEqual(func(array, resolve(array, '1')), { '1': 2 });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.property');\n\n  (function() {\n    QUnit.test('should create a function that plucks a property value of a given object', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': 1 };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop.length, 1);\n        assert.strictEqual(prop(object), 1);\n      });\n    });\n\n    QUnit.test('should pluck deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(object), 2);\n      });\n    });\n\n    QUnit.test('should pluck inherited property values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {}\n      Foo.prototype.a = 1;\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(new Foo), 1);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3];\n\n      lodashStable.each([1, [1]], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(array), 2);\n      });\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        var prop = _.property(key);\n        return prop(object);\n      });\n\n      assert.deepEqual(actual, ['a', 'a', 'b', 'b']);\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var expected = [1, 2, 3, 4],\n          object = { 'null': 1, 'undefined': 2, 'fn': 3, '[object Object]': 4 },\n          paths = [null, undefined, fn, {}];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var prop = _.property(index ? [path] : path);\n          return prop(object);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should pluck a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(object), 1);\n      });\n    });\n\n    QUnit.test('should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var prop = _.property(path);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? prop(value) : prop();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var prop = _.property(path);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? prop(value) : prop();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var object = {};\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        var prop = _.property(path);\n        assert.strictEqual(prop(object), undefined);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.propertyOf');\n\n  (function() {\n    QUnit.test('should create a function that plucks a property value of a given key', function(assert) {\n      assert.expect(3);\n\n      var object = { 'a': 1 },\n          propOf = _.propertyOf(object);\n\n      assert.strictEqual(propOf.length, 1);\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.strictEqual(propOf(path), 1);\n      });\n    });\n\n    QUnit.test('should pluck deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': 2 } },\n          propOf = _.propertyOf(object);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(propOf(path), 2);\n      });\n    });\n\n    QUnit.test('should pluck inherited property values', function(assert) {\n      assert.expect(2);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var propOf = _.propertyOf(new Foo);\n\n      lodashStable.each(['b', ['b']], function(path) {\n        assert.strictEqual(propOf(path), 2);\n      });\n    });\n\n    QUnit.test('should work with a non-string `path`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          propOf = _.propertyOf(array);\n\n      lodashStable.each([1, [1]], function(path) {\n        assert.strictEqual(propOf(path), 2);\n      });\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        var propOf = _.propertyOf(object);\n        return propOf(key);\n      });\n\n      assert.deepEqual(actual, ['a', 'a', 'b', 'b']);\n    });\n\n    QUnit.test('should coerce `path` to a string', function(assert) {\n      assert.expect(2);\n\n      function fn() {}\n      fn.toString = lodashStable.constant('fn');\n\n      var expected = [1, 2, 3, 4],\n          object = { 'null': 1, 'undefined': 2, 'fn': 3, '[object Object]': 4 },\n          paths = [null, undefined, fn, {}];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(paths, function(path) {\n          var propOf = _.propertyOf(object);\n          return propOf(index ? [path] : path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should pluck a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } },\n          propOf = _.propertyOf(object);\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.strictEqual(propOf(path), 1);\n      });\n    });\n\n    QUnit.test('should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var propOf = index ? _.propertyOf(value) : _.propertyOf();\n          return propOf(path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, noop);\n\n      lodashStable.each(['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']], function(path) {\n        var actual = lodashStable.map(values, function(value, index) {\n          var propOf = index ? _.propertyOf(value) : _.propertyOf();\n          return propOf(path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(4);\n\n      var propOf = _.propertyOf({});\n\n      lodashStable.each(['a', 'a[1].b.c', ['a'], ['a', '1', 'b', 'c']], function(path) {\n        assert.strictEqual(propOf(path), undefined);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pullAll');\n\n  (function() {\n    QUnit.test('should work with the same value for `array` and `values`', function(assert) {\n      assert.expect(1);\n\n      var array = [{ 'a': 1 }, { 'b': 2 }],\n          actual = _.pullAll(array, array);\n\n      assert.deepEqual(actual, []);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pullAllBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n      var actual = _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], function(object) {\n        return object.x;\n      });\n\n      assert.deepEqual(actual, [{ 'x': 2 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args,\n          array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n      _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [{ 'x': 1 }]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pullAllWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 1 }, { 'x': 2, 'y': 2 }, { 'x': 3, 'y': 3 }],\n          expected = [objects[0], objects[2]],\n          actual = _.pullAllWith(objects, [{ 'x': 2, 'y': 2 }], lodashStable.isEqual);\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('pull methods');\n\n  lodashStable.each(['pull', 'pullAll', 'pullAllWith'], function(methodName) {\n    var func = _[methodName],\n        isPull = methodName == 'pull';\n\n    function pull(array, values) {\n      return isPull\n        ? func.apply(undefined, [array].concat(values))\n        : func(array, values);\n    }\n\n    QUnit.test('`_.' + methodName + '` should modify and return the array', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = pull(array, [1, 3]);\n\n      assert.strictEqual(actual, array);\n      assert.deepEqual(array, [2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve holes in arrays', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4];\n      delete array[1];\n      delete array[3];\n\n      pull(array, [1]);\n      assert.notOk('0' in array);\n      assert.notOk('2' in array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat holes as `undefined`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      delete array[1];\n\n      pull(array, [undefined]);\n      assert.deepEqual(array, [1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, NaN, 3, NaN];\n\n      pull(array, [NaN]);\n      assert.deepEqual(array, [1, 3]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.pullAt');\n\n  (function() {\n    QUnit.test('should modify the array and return removed elements', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = _.pullAt(array, [0, 1]);\n\n      assert.deepEqual(array, [3]);\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should work with unsorted indexes', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n          actual = _.pullAt(array, [1, 3, 11, 7, 5, 9]);\n\n      assert.deepEqual(array, [1, 3, 5, 7, 9, 11]);\n      assert.deepEqual(actual, [2, 4, 12, 8, 6, 10]);\n    });\n\n    QUnit.test('should work with repeated indexes', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4],\n          actual = _.pullAt(array, [0, 2, 0, 1, 0, 2]);\n\n      assert.deepEqual(array, [4]);\n      assert.deepEqual(actual, [1, 3, 1, 2, 1, 3]);\n    });\n\n    QUnit.test('should use `undefined` for nonexistent indexes', function(assert) {\n      assert.expect(2);\n\n      var array = ['a', 'b', 'c'],\n          actual = _.pullAt(array, [2, 4, 0]);\n\n      assert.deepEqual(array, ['b']);\n      assert.deepEqual(actual, ['c', undefined, 'a']);\n    });\n\n    QUnit.test('should flatten `indexes`', function(assert) {\n      assert.expect(4);\n\n      var array = ['a', 'b', 'c'];\n      assert.deepEqual(_.pullAt(array, 2, 0), ['c', 'a']);\n      assert.deepEqual(array, ['b']);\n\n      array = ['a', 'b', 'c', 'd'];\n      assert.deepEqual(_.pullAt(array, [3, 0], 2), ['d', 'a', 'c']);\n      assert.deepEqual(array, ['b']);\n    });\n\n    QUnit.test('should return an empty array when no indexes are given', function(assert) {\n      assert.expect(4);\n\n      var array = ['a', 'b', 'c'],\n          actual = _.pullAt(array);\n\n      assert.deepEqual(array, ['a', 'b', 'c']);\n      assert.deepEqual(actual, []);\n\n      actual = _.pullAt(array, [], []);\n\n      assert.deepEqual(array, ['a', 'b', 'c']);\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('should work with non-index paths', function(assert) {\n      assert.expect(2);\n\n      var values = lodashStable.reject(empties, function(value) {\n        return (value === 0) || lodashStable.isArray(value);\n      }).concat(-1, 1.1);\n\n      var array = lodashStable.transform(values, function(result, value) {\n        result[value] = 1;\n      }, []);\n\n      var expected = lodashStable.map(values, stubOne),\n          actual = _.pullAt(array, values);\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(values, noop);\n      actual = lodashStable.at(array, values);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        var array = [-1];\n        array['-0'] = -2;\n        return _.pullAt(array, key);\n      });\n\n      assert.deepEqual(actual, [[-2], [-2], [-1], [-1]]);\n    });\n\n    QUnit.test('should support deep paths', function(assert) {\n      assert.expect(3);\n\n      var array = [];\n      array.a = { 'b': 2 };\n\n      var actual = _.pullAt(array, 'a.b');\n\n      assert.deepEqual(actual, [2]);\n      assert.deepEqual(array.a, {});\n\n      try {\n        actual = _.pullAt(array, 'a.b.c');\n      } catch (e) {}\n\n      assert.deepEqual(actual, [undefined]);\n    });\n\n    QUnit.test('should work with a falsey `array` when keys are given', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.slice(),\n          expected = lodashStable.map(values, lodashStable.constant(Array(4)));\n\n      var actual = lodashStable.map(values, function(array) {\n        try {\n          return _.pullAt(array, 0, 1, 'pop', 'push');\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.random');\n\n  (function() {\n    var array = Array(1000);\n\n    QUnit.test('should return `0` or `1` when no arguments are given', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.uniq(lodashStable.map(array, function() {\n        return _.random();\n      })).sort();\n\n      assert.deepEqual(actual, [0, 1]);\n    });\n\n    QUnit.test('should support a `min` and `max`', function(assert) {\n      assert.expect(1);\n\n      var min = 5,\n          max = 10;\n\n      assert.ok(lodashStable.some(array, function() {\n        var result = _.random(min, max);\n        return result >= min && result <= max;\n      }));\n    });\n\n    QUnit.test('should support not providing a `max`', function(assert) {\n      assert.expect(1);\n\n      var min = 0,\n          max = 5;\n\n      assert.ok(lodashStable.some(array, function() {\n        var result = _.random(max);\n        return result >= min && result <= max;\n      }));\n    });\n\n    QUnit.test('should swap `min` and `max` when `min` > `max`', function(assert) {\n      assert.expect(1);\n\n      var min = 4,\n          max = 2,\n          expected = [2, 3, 4];\n\n      var actual = lodashStable.uniq(lodashStable.map(array, function() {\n        return _.random(min, max);\n      })).sort();\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should support large integer values', function(assert) {\n      assert.expect(2);\n\n      var min = Math.pow(2, 31),\n          max = Math.pow(2, 62);\n\n      assert.ok(lodashStable.every(array, function() {\n        var result = _.random(min, max);\n        return result >= min && result <= max;\n      }));\n\n      assert.ok(lodashStable.some(array, function() {\n        return _.random(MAX_INTEGER);\n      }));\n    });\n\n    QUnit.test('should coerce arguments to finite numbers', function(assert) {\n      assert.expect(1);\n\n      var actual = [\n        _.random(NaN, NaN),\n        _.random('1', '1'),\n        _.random(Infinity, Infinity)\n      ];\n\n      assert.deepEqual(actual, [0, 1, MAX_INTEGER]);\n    });\n\n    QUnit.test('should support floats', function(assert) {\n      assert.expect(2);\n\n      var min = 1.5,\n          max = 1.6,\n          actual = _.random(min, max);\n\n      assert.ok(actual % 1);\n      assert.ok(actual >= min && actual <= max);\n    });\n\n    QUnit.test('should support providing a `floating`', function(assert) {\n      assert.expect(3);\n\n      var actual = _.random(true);\n      assert.ok(actual % 1 && actual >= 0 && actual <= 1);\n\n      actual = _.random(2, true);\n      assert.ok(actual % 1 && actual >= 0 && actual <= 2);\n\n      actual = _.random(2, 4, true);\n      assert.ok(actual % 1 && actual >= 2 && actual <= 4);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3],\n          expected = lodashStable.map(array, stubTrue),\n          randoms = lodashStable.map(array, _.random);\n\n      var actual = lodashStable.map(randoms, function(result, index) {\n        return result >= 0 && result <= array[index] && (result % 1) == 0;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('range methods');\n\n  lodashStable.each(['range', 'rangeRight'], function(methodName) {\n    var func = _[methodName],\n        isRange = methodName == 'range';\n\n    function resolve(range) {\n      return isRange ? range : range.reverse();\n    }\n\n    QUnit.test('`_.' + methodName + '` should infer the sign of `step` when only `end` is given', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(4), resolve([0, 1, 2, 3]));\n      assert.deepEqual(func(-4), resolve([0, -1, -2, -3]));\n    });\n\n    QUnit.test('`_.' + methodName + '` should infer the sign of `step` when only `start` and `end` are given', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(1, 5), resolve([1, 2, 3, 4]));\n      assert.deepEqual(func(5, 1), resolve([5, 4, 3, 2]));\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `start`, `end`, and `step`', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(func(0, -4, -1), resolve([0, -1, -2, -3]));\n      assert.deepEqual(func(5, 1, -1), resolve([5, 4, 3, 2]));\n      assert.deepEqual(func(0, 20, 5), resolve([0, 5, 10, 15]));\n    });\n\n    QUnit.test('`_.' + methodName + '` should support a `step` of `0`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(1, 4, 0), [1, 1, 1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a `step` larger than `end`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(1, 5, 20), [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative `step`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(0, -4, -1), resolve([0, -1, -2, -3]));\n      assert.deepEqual(func(21, 10, -3), resolve([21, 18, 15, 12]));\n    });\n\n    QUnit.test('`_.' + methodName + '` should support `start` of `-0`', function(assert) {\n      assert.expect(1);\n\n      var actual = func(-0, 1);\n      assert.strictEqual(1 / actual[0], -Infinity);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat falsey `start` as `0`', function(assert) {\n      assert.expect(13);\n\n      lodashStable.each(falsey, function(value, index) {\n        if (index) {\n          assert.deepEqual(func(value), []);\n          assert.deepEqual(func(value, 1), [0]);\n        } else {\n          assert.deepEqual(func(), []);\n        }\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce arguments to finite numbers', function(assert) {\n      assert.expect(1);\n\n      var actual = [\n        func('1'),\n        func('0', 1),\n        func(0, 1, '1'),\n        func(NaN),\n        func(NaN, NaN)\n      ];\n\n      assert.deepEqual(actual, [[0], [0], [0], [], []]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          object = { 'a': 1, 'b': 2, 'c': 3 },\n          expected = lodashStable.map([[0], [0, 1], [0, 1, 2]], resolve);\n\n      lodashStable.each([array, object], function(collection) {\n        var actual = lodashStable.map(collection, func);\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.rearg');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should reorder arguments provided to `func`', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [2, 0, 1]);\n      assert.deepEqual(rearged('b', 'c', 'a'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should work with repeated indexes', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [1, 1, 1]);\n      assert.deepEqual(rearged('c', 'a', 'b'), ['a', 'a', 'a']);\n    });\n\n    QUnit.test('should use `undefined` for nonexistent indexes', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [1, 4]);\n      assert.deepEqual(rearged('b', 'a', 'c'), ['a', undefined, 'c']);\n    });\n\n    QUnit.test('should use `undefined` for non-index values', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.reject(empties, function(value) {\n        return (value === 0) || lodashStable.isArray(value);\n      }).concat(-1, 1.1);\n\n      var expected = lodashStable.map(values, lodashStable.constant([undefined, 'b', 'c']));\n\n      var actual = lodashStable.map(values, function(value) {\n        var rearged = _.rearg(fn, [value]);\n        return rearged('a', 'b', 'c');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not rearrange arguments when no indexes are given', function(assert) {\n      assert.expect(2);\n\n      var rearged = _.rearg(fn);\n      assert.deepEqual(rearged('a', 'b', 'c'), ['a', 'b', 'c']);\n\n      rearged = _.rearg(fn, [], []);\n      assert.deepEqual(rearged('a', 'b', 'c'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should accept multiple index arguments', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, 2, 0, 1);\n      assert.deepEqual(rearged('b', 'c', 'a'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should accept multiple arrays of indexes', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [2], [0, 1]);\n      assert.deepEqual(rearged('b', 'c', 'a'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should work with fewer indexes than arguments', function(assert) {\n      assert.expect(1);\n\n      var rearged = _.rearg(fn, [1, 0]);\n      assert.deepEqual(rearged('b', 'a', 'c'), ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should work on functions that have been rearged', function(assert) {\n      assert.expect(1);\n\n      var rearged1 = _.rearg(fn, 2, 1, 0),\n          rearged2 = _.rearg(rearged1, 1, 0, 2);\n\n      assert.deepEqual(rearged2('b', 'c', 'a'), ['a', 'b', 'c']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.reduce');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should use the first element of a collection as the default `accumulator`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.reduce(array), 1);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments when iterating an array', function(assert) {\n      assert.expect(2);\n\n      var args;\n\n      _.reduce(array, function() {\n        args || (args = slice.call(arguments));\n      }, 0);\n\n      assert.deepEqual(args, [0, 1, 0, array]);\n\n      args = undefined;\n      _.reduce(array, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [1, 2, 1, array]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments when iterating an object', function(assert) {\n      assert.expect(2);\n\n      var args,\n          object = { 'a': 1, 'b': 2 },\n          firstKey = _.head(_.keys(object));\n\n      var expected = firstKey == 'a'\n        ? [0, 1, 'a', object]\n        : [0, 2, 'b', object];\n\n      _.reduce(object, function() {\n        args || (args = slice.call(arguments));\n      }, 0);\n\n      assert.deepEqual(args, expected);\n\n      args = undefined;\n      expected = firstKey == 'a'\n        ? [1, 2, 'b', object]\n        : [2, 1, 'a', object];\n\n      _.reduce(object, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.reduceRight');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should use the last element of a collection as the default `accumulator`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.reduceRight(array), 3);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments when iterating an array', function(assert) {\n      assert.expect(2);\n\n      var args;\n\n      _.reduceRight(array, function() {\n        args || (args = slice.call(arguments));\n      }, 0);\n\n      assert.deepEqual(args, [0, 3, 2, array]);\n\n      args = undefined;\n      _.reduceRight(array, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [3, 2, 1, array]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments when iterating an object', function(assert) {\n      assert.expect(2);\n\n      var args,\n          object = { 'a': 1, 'b': 2 },\n          isFIFO = lodashStable.keys(object)[0] == 'a';\n\n      var expected = isFIFO\n        ? [0, 2, 'b', object]\n        : [0, 1, 'a', object];\n\n      _.reduceRight(object, function() {\n        args || (args = slice.call(arguments));\n      }, 0);\n\n      assert.deepEqual(args, expected);\n\n      args = undefined;\n      expected = isFIFO\n        ? [2, 1, 'a', object]\n        : [1, 2, 'b', object];\n\n      _.reduceRight(object, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('reduce methods');\n\n  lodashStable.each(['reduce', 'reduceRight'], function(methodName) {\n    var func = _[methodName],\n        array = [1, 2, 3],\n        isReduce = methodName == 'reduce';\n\n    QUnit.test('`_.' + methodName + '` should reduce a collection to a single value', function(assert) {\n      assert.expect(1);\n\n      var actual = func(['a', 'b', 'c'], function(accumulator, value) {\n        return accumulator + value;\n      }, '');\n\n      assert.strictEqual(actual, isReduce ? 'abc' : 'cba');\n    });\n\n    QUnit.test('`_.' + methodName + '` should support empty collections without an initial `accumulator` value', function(assert) {\n      assert.expect(1);\n\n      var actual = [],\n          expected = lodashStable.map(empties, noop);\n\n      lodashStable.each(empties, function(value) {\n        try {\n          actual.push(func(value, noop));\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support empty collections with an initial `accumulator` value', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, lodashStable.constant('x'));\n\n      var actual = lodashStable.map(empties, function(value) {\n        try {\n          return func(value, noop, 'x');\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle an initial `accumulator` value of `undefined`', function(assert) {\n      assert.expect(1);\n\n      var actual = func([], noop, undefined);\n      assert.strictEqual(actual, undefined);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `undefined` for empty collections when no `accumulator` is given (test in IE > 9 and modern browsers)', function(assert) {\n      assert.expect(2);\n\n      var array = [],\n          object = { '0': 1, 'length': 0 };\n\n      if ('__proto__' in array) {\n        array.__proto__ = object;\n        assert.strictEqual(func(array, noop), undefined);\n      }\n      else {\n        skipAssert(assert);\n      }\n      assert.strictEqual(func(object, noop), undefined);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.strictEqual(_(array)[methodName](add), 6);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(array).chain()[methodName](add) instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.reject');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return elements the `predicate` returns falsey for', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.reject(array, isEven), [1, 3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('filter methods');\n\n  lodashStable.each(['filter', 'reject'], function(methodName) {\n    var array = [1, 2, 3, 4],\n        func = _[methodName],\n        isFilter = methodName == 'filter',\n        objects = [{ 'a': 0 }, { 'a': 1 }];\n\n    QUnit.test('`_.' + methodName + '` should not modify the resulting value from within `predicate`', function(assert) {\n      assert.expect(1);\n\n      var actual = func([0], function(value, index, array) {\n        array[index] = 1;\n        return isFilter;\n      });\n\n      assert.deepEqual(actual, [0]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(objects, 'a'), [objects[isFilter ? 1 : 0]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(objects, objects[1]), [objects[isFilter ? 1 : 0]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not modify wrapped values', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _(array);\n\n        var actual = wrapped[methodName](function(n) {\n          return n < 3;\n        });\n\n        assert.deepEqual(actual.value(), isFilter ? [1, 2] : [3, 4]);\n\n        actual = wrapped[methodName](function(n) {\n          return n > 2;\n        });\n\n        assert.deepEqual(actual.value(), isFilter ? [3, 4] : [1, 2]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work in a lazy sequence', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            predicate = function(value) { return isFilter ? isEven(value) : !isEven(value); };\n\n        var object = lodashStable.zipObject(lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n          return ['key' + index, index];\n        }));\n\n        var actual = _(array).slice(1).map(square)[methodName](predicate).value();\n        assert.deepEqual(actual, _[methodName](lodashStable.map(array.slice(1), square), predicate));\n\n        actual = _(object).mapValues(square)[methodName](predicate).value();\n        assert.deepEqual(actual, _[methodName](lodashStable.mapValues(object, square), predicate));\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should provide correct `predicate` arguments in a lazy sequence', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var args,\n            array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            expected = [1, 0, lodashStable.map(array.slice(1), square)];\n\n        _(array).slice(1)[methodName](function(value, index, array) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, [1, 0, array.slice(1)]);\n\n        args = undefined;\n        _(array).slice(1).map(square)[methodName](function(value, index, array) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        args = undefined;\n        _(array).slice(1).map(square)[methodName](function(value, index) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        args = undefined;\n        _(array).slice(1).map(square)[methodName](function(value) {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, [1]);\n\n        args = undefined;\n        _(array).slice(1).map(square)[methodName](function() {\n          args || (args = slice.call(arguments));\n        }).value();\n\n        assert.deepEqual(args, expected);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.remove');\n\n  (function() {\n    QUnit.test('should modify the array and return removed elements', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4],\n          actual = _.remove(array, isEven);\n\n      assert.deepEqual(array, [1, 3]);\n      assert.deepEqual(actual, [2, 4]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var argsList = [],\n          array = [1, 2, 3],\n          clone = array.slice();\n\n      _.remove(array, function(n, index) {\n        var args = slice.call(arguments);\n        args[2] = args[2].slice();\n        argsList.push(args);\n        return isEven(index);\n      });\n\n      assert.deepEqual(argsList, [[1, 0, clone], [2, 1, clone], [3, 2, clone]]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 0, 'b': 1 }, { 'a': 1, 'b': 2 }];\n      _.remove(objects, { 'a': 1 });\n      assert.deepEqual(objects, [{ 'a': 0, 'b': 1 }]);\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 0, 'b': 1 }, { 'a': 1, 'b': 2 }];\n      _.remove(objects, ['a', 1]);\n      assert.deepEqual(objects, [{ 'a': 0, 'b': 1 }]);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'a': 0 }, { 'a': 1 }];\n      _.remove(objects, 'a');\n      assert.deepEqual(objects, [{ 'a': 0 }]);\n    });\n\n    QUnit.test('should preserve holes in arrays', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3, 4];\n      delete array[1];\n      delete array[3];\n\n      _.remove(array, function(n) {\n        return n === 1;\n      });\n\n      assert.notOk('0' in array);\n      assert.notOk('2' in array);\n    });\n\n    QUnit.test('should treat holes as `undefined`', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n      delete array[1];\n\n      _.remove(array, function(n) {\n        return n == null;\n      });\n\n      assert.deepEqual(array, [1, 3]);\n    });\n\n    QUnit.test('should not mutate the array until all elements to remove are determined', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3];\n\n      _.remove(array, function(n, index) {\n        return isEven(index);\n      });\n\n      assert.deepEqual(array, [2]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.repeat');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should repeat a string `n` times', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.repeat('*', 3), '***');\n      assert.strictEqual(_.repeat(string, 2), 'abcabc');\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? string : '';\n      });\n\n      var actual = lodashStable.map(falsey, function(n, index) {\n        return index ? _.repeat(string, n) : _.repeat(string);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty string if `n` is <= `0`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.repeat(string, 0), '');\n      assert.strictEqual(_.repeat(string, -2), '');\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.repeat(string, '2'), 'abcabc');\n      assert.strictEqual(_.repeat(string, 2.6), 'abcabc');\n      assert.strictEqual(_.repeat('*', { 'valueOf': stubThree }), '***');\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.repeat(Object(string), 2), 'abcabc');\n      assert.strictEqual(_.repeat({ 'toString': lodashStable.constant('*') }, 3), '***');\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(['a', 'b', 'c'], _.repeat);\n      assert.deepEqual(actual, ['a', 'b', 'c']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.replace');\n\n  (function() {\n    QUnit.test('should replace the matched pattern', function(assert) {\n      assert.expect(2);\n\n      var string = 'abcde';\n      assert.strictEqual(_.replace(string, 'de', '123'), 'abc123');\n      assert.strictEqual(_.replace(string, /[bd]/g, '-'), 'a-c-e');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.result');\n\n  (function() {\n    var object = { 'a': 1, 'b': stubB };\n\n    QUnit.test('should invoke function values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.result(object, 'b'), 'b');\n    });\n\n    QUnit.test('should invoke default function values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.result(object, 'c', object.b);\n      assert.strictEqual(actual, 'b');\n    });\n\n    QUnit.test('should invoke nested function values', function(assert) {\n      assert.expect(2);\n\n      var value = { 'a': lodashStable.constant({ 'b': stubB }) };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(_.result(value, path), 'b');\n      });\n    });\n\n    QUnit.test('should invoke deep property methods with the correct `this` binding', function(assert) {\n      assert.expect(2);\n\n      var value = { 'a': { 'b': function() { return this.c; }, 'c': 1 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(_.result(value, path), 1);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.get and lodash.result');\n\n  lodashStable.each(['get', 'result'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should get string keyed property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1 };\n\n      lodashStable.each(['a', ['a']], function(path) {\n        assert.strictEqual(func(object, path), 1);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var object = { '-0': 'a', '0': 'b' },\n          props = [-0, Object(-0), 0, Object(0)];\n\n      var actual = lodashStable.map(props, function(key) {\n        return func(object, key);\n      });\n\n      assert.deepEqual(actual, ['a', 'a', 'b', 'b']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should get symbol keyed property values', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        var object = {};\n        object[symbol] = 1;\n\n        assert.strictEqual(func(object, symbol), 1);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should get deep property values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(func(object, path), 2);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should get a key over a path', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a.b': 1, 'a': { 'b': 2 } };\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        assert.strictEqual(func(object, path), 1);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not coerce array paths to strings', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a,b,c': 3, 'a': { 'b': { 'c': 4 } } };\n      assert.strictEqual(func(object, ['a', 'b', 'c']), 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not ignore empty brackets', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': { '': 1 } };\n      assert.strictEqual(func(object, 'a[]'), 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle empty paths', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([['', ''], [[], ['']]], function(pair) {\n        assert.strictEqual(func({}, pair[0]), undefined);\n        assert.strictEqual(func({ '': 3 }, pair[1]), 3);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle complex paths', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { '-1.23': { '[\"b\"]': { 'c': { \"['d']\": { '\\ne\\n': { 'f': { 'g': 8 } } } } } } } };\n\n      var paths = [\n        'a[-1.23][\"[\\\\\"b\\\\\"]\"].c[\\'[\\\\\\'d\\\\\\']\\'][\\ne\\n][f].g',\n        ['a', '-1.23', '[\"b\"]', 'c', \"['d']\", '\\ne\\n', 'f', 'g']\n      ];\n\n      lodashStable.each(paths, function(path) {\n        assert.strictEqual(func(object, path), 8);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `undefined` when `object` is nullish', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['constructor', ['constructor']], function(path) {\n        assert.strictEqual(func(null, path), undefined);\n        assert.strictEqual(func(undefined, path), undefined);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `undefined` for deep paths when `object` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, noop),\n          paths = ['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']];\n\n      lodashStable.each(paths, function(path) {\n        var actual = lodashStable.map(values, function(value) {\n          return func(value, path);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `undefined` if parts of `path` are missing', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': [, null] };\n\n      lodashStable.each(['a[1].b.c', ['a', '1', 'b', 'c']], function(path) {\n        assert.strictEqual(func(object, path), undefined);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should be able to return `null` values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { 'b': null } };\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        assert.strictEqual(func(object, path), null);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should follow `path` over non-plain objects', function(assert) {\n      assert.expect(2);\n\n      var paths = ['a.b', ['a', 'b']];\n\n      lodashStable.each(paths, function(path) {\n        numberProto.a = { 'b': 2 };\n        assert.strictEqual(func(0, path), 2);\n        delete numberProto.a;\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the default value for `undefined` values', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': {} },\n          values = empties.concat(true, new Date, 1, /x/, 'a'),\n          expected = lodashStable.map(values, function(value) { return [value, value]; });\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var actual = lodashStable.map(values, function(value) {\n          return [func(object, path, value), func(null, path, value)];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the default value when `path` is empty', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func({}, [], 'a'), 'a');\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.rest');\n\n  (function() {\n    function fn(a, b, c) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should apply a rest parameter to `func`', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(fn);\n      assert.deepEqual(rest(1, 2, 3, 4), [1, 2, [3, 4]]);\n    });\n\n    QUnit.test('should work with `start`', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(fn, 1);\n      assert.deepEqual(rest(1, 2, 3, 4), [1, [2, 3, 4]]);\n    });\n\n    QUnit.test('should treat `start` as `0` for `NaN` or negative values', function(assert) {\n      assert.expect(1);\n\n      var values = [-1, NaN, 'a'],\n          expected = lodashStable.map(values, lodashStable.constant([[1, 2, 3, 4]]));\n\n      var actual = lodashStable.map(values, function(value) {\n        var rest = _.rest(fn, value);\n        return rest(1, 2, 3, 4);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce `start` to an integer', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(fn, 1.6);\n      assert.deepEqual(rest(1, 2, 3), [1, [2, 3]]);\n    });\n\n    QUnit.test('should use an empty array when `start` is not reached', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(fn);\n      assert.deepEqual(rest(1), [1, undefined, []]);\n    });\n\n    QUnit.test('should work on functions with more than three parameters', function(assert) {\n      assert.expect(1);\n\n      var rest = _.rest(function(a, b, c, d) {\n        return slice.call(arguments);\n      });\n\n      assert.deepEqual(rest(1, 2, 3, 4, 5), [1, 2, 3, [4, 5]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.reverse');\n\n  (function() {\n    var largeArray = lodashStable.range(LARGE_ARRAY_SIZE).concat(null),\n        smallArray = [0, 1, 2, null];\n\n    QUnit.test('should reverse `array`', function(assert) {\n      assert.expect(2);\n\n      var array = [1, 2, 3],\n          actual = _.reverse(array);\n\n      assert.strictEqual(actual, array);\n      assert.deepEqual(array, [3, 2, 1]);\n    });\n\n    QUnit.test('should return the wrapped reversed `array`', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var array = (index ? largeArray : smallArray).slice(),\n              clone = array.slice(),\n              wrapped = _(array).reverse(),\n              actual = wrapped.value();\n\n          assert.ok(wrapped instanceof _);\n          assert.strictEqual(actual, array);\n          assert.deepEqual(actual, clone.slice().reverse());\n        });\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var array = (index ? largeArray : smallArray).slice(),\n              expected = array.slice(),\n              actual = _(array).slice(1).reverse().value();\n\n          assert.deepEqual(actual, expected.slice(1).reverse());\n          assert.deepEqual(array, expected);\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should be lazy when in a lazy sequence', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var spy = {\n          'toString': function() {\n            throw new Error('spy was revealed');\n          }\n        };\n\n        var array = largeArray.concat(spy),\n            expected = array.slice();\n\n        try {\n          var wrapped = _(array).slice(1).map(String).reverse(),\n              actual = wrapped.last();\n        } catch (e) {}\n\n        assert.ok(wrapped instanceof _);\n        assert.strictEqual(actual, '1');\n        assert.deepEqual(array, expected);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should work in a hybrid sequence', function(assert) {\n      assert.expect(8);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var clone = (index ? largeArray : smallArray).slice();\n\n          lodashStable.each(['map', 'filter'], function(methodName) {\n            var array = clone.slice(),\n                expected = clone.slice(1, -1).reverse(),\n                actual = _(array)[methodName](identity).thru(_.compact).reverse().value();\n\n            assert.deepEqual(actual, expected);\n\n            array = clone.slice();\n            actual = _(array).thru(_.compact)[methodName](identity).pull(1).push(3).reverse().value();\n\n            assert.deepEqual(actual, [3].concat(expected.slice(0, -1)));\n          });\n        });\n      }\n      else {\n        skipAssert(assert, 8);\n      }\n    });\n\n    QUnit.test('should track the `__chain__` value of a wrapper', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        lodashStable.times(2, function(index) {\n          var array = (index ? largeArray : smallArray).slice(),\n              expected = array.slice().reverse(),\n              wrapped = _(array).chain().reverse().head();\n\n          assert.ok(wrapped instanceof _);\n          assert.strictEqual(wrapped.value(), _.head(expected));\n          assert.deepEqual(array, expected);\n        });\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('round methods');\n\n  lodashStable.each(['ceil', 'floor', 'round'], function(methodName) {\n    var func = _[methodName],\n        isCeil = methodName == 'ceil',\n        isFloor = methodName == 'floor';\n\n    QUnit.test('`_.' + methodName + '` should return a rounded number without a precision', function(assert) {\n      assert.expect(1);\n\n      var actual = func(4.006);\n      assert.strictEqual(actual, isCeil ? 5 : 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a precision of `0`', function(assert) {\n      assert.expect(1);\n\n      var actual = func(4.006, 0);\n      assert.strictEqual(actual, isCeil ? 5 : 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a positive precision', function(assert) {\n      assert.expect(2);\n\n      var actual = func(4.016, 2);\n      assert.strictEqual(actual, isFloor ? 4.01 : 4.02);\n\n      actual = func(4.1, 2);\n      assert.strictEqual(actual, 4.1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a negative precision', function(assert) {\n      assert.expect(1);\n\n      var actual = func(4160, -2);\n      assert.strictEqual(actual, isFloor ? 4100 : 4200);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `precision` to an integer', function(assert) {\n      assert.expect(3);\n\n      var actual = func(4.006, NaN);\n      assert.strictEqual(actual, isCeil ? 5 : 4);\n\n      var expected = isFloor ? 4.01 : 4.02;\n\n      actual = func(4.016, 2.6);\n      assert.strictEqual(actual, expected);\n\n      actual = func(4.016, '+2');\n      assert.strictEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with exponential notation and `precision`', function(assert) {\n      assert.expect(3);\n\n      var actual = func(5e1, 2);\n      assert.deepEqual(actual, 50);\n\n      actual = func('5e', 1);\n      assert.deepEqual(actual, NaN);\n\n      actual = func('5e1e1', 1);\n      assert.deepEqual(actual, NaN);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var values = [[0], [-0], ['0'], ['-0'], [0, 1], [-0, 1], ['0', 1], ['-0', 1]],\n          expected = [Infinity, -Infinity, Infinity, -Infinity, Infinity, -Infinity, Infinity, -Infinity];\n\n      var actual = lodashStable.map(values, function(args) {\n        return 1 / func.apply(undefined, args);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not return `NaN` for large `precision` values', function(assert) {\n      assert.expect(1);\n\n      var results = [\n        _.round(10.0000001, 1000),\n        _.round(MAX_SAFE_INTEGER, 293)\n      ];\n\n      var expected = lodashStable.map(results, stubFalse),\n          actual = lodashStable.map(results, lodashStable.isNaN);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.runInContext');\n\n  (function() {\n    QUnit.test('should not require a fully populated `context` object', function(assert) {\n      assert.expect(1);\n\n      if (!isModularize) {\n        var lodash = _.runInContext({\n          'setTimeout': function(func) { func(); }\n        });\n\n        var pass = false;\n        lodash.delay(function() { pass = true; }, 32);\n        assert.ok(pass);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should use a zeroed `_.uniqueId` counter', function(assert) {\n      assert.expect(3);\n\n      if (!isModularize) {\n        lodashStable.times(2, _.uniqueId);\n\n        var oldId = Number(_.uniqueId()),\n            lodash = _.runInContext();\n\n        assert.ok(_.uniqueId() > oldId);\n\n        var id = lodash.uniqueId();\n        assert.strictEqual(id, '1');\n        assert.ok(id < oldId);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sample');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return a random element', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sample(array);\n      assert.ok(lodashStable.includes(array, actual));\n    });\n\n    QUnit.test('should return `undefined` when sampling empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, noop);\n\n      var actual = lodashStable.transform(empties, function(result, value) {\n        try {\n          result.push(_.sample(value));\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should sample an object', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          actual = _.sample(object);\n\n      assert.ok(lodashStable.includes(array, actual));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sampleSize');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return an array of random elements', function(assert) {\n      assert.expect(2);\n\n      var actual = _.sampleSize(array, 2);\n\n      assert.strictEqual(actual.length, 2);\n      assert.deepEqual(lodashStable.difference(actual, array), []);\n    });\n\n    QUnit.test('should contain elements of the collection', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sampleSize(array, array.length).sort();\n\n      assert.deepEqual(actual, array);\n    });\n\n    QUnit.test('should treat falsey `size` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? ['a'] : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(size, index) {\n        return index ? _.sampleSize(['a'], size) : _.sampleSize(['a']);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty array when `n` < `1` or `NaN`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.sampleSize(array, n), []);\n      });\n    });\n\n    QUnit.test('should return all elements when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        var actual = _.sampleSize(array, n).sort();\n        assert.deepEqual(actual, array);\n      });\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sampleSize(array, 1.6);\n      assert.strictEqual(actual.length, 1);\n    });\n\n    QUnit.test('should return an empty array for empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubArray);\n\n      var actual = lodashStable.transform(empties, function(result, value) {\n        try {\n          result.push(_.sampleSize(value, 1));\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should sample an object', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': 1, 'b': 2, 'c': 3 },\n          actual = _.sampleSize(object, 2);\n\n      assert.strictEqual(actual.length, 2);\n      assert.deepEqual(lodashStable.difference(actual, lodashStable.values(object)), []);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([['a']], _.sampleSize);\n      assert.deepEqual(actual, [['a']]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.setWith');\n\n  (function() {\n    QUnit.test('should work with a `customizer` callback', function(assert) {\n      assert.expect(1);\n\n      var actual = _.setWith({ '0': {} }, '[0][1][2]', 3, function(value) {\n        return lodashStable.isObject(value) ? undefined : {};\n      });\n\n      assert.deepEqual(actual, { '0': { '1': { '2': 3 } } });\n    });\n\n    QUnit.test('should work with a `customizer` that returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.setWith({}, 'a[0].b.c', 4, noop);\n      assert.deepEqual(actual, { 'a': [{ 'b': { 'c': 4 } }] });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('set methods');\n\n  lodashStable.each(['update', 'updateWith', 'set', 'setWith'], function(methodName) {\n    var func = _[methodName],\n        isUpdate = /^update/.test(methodName);\n\n    var oldValue = 1,\n        value = 2,\n        updater = isUpdate ? lodashStable.constant(value) : value;\n\n    QUnit.test('`_.' + methodName + '` should set property values', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var object = { 'a': oldValue },\n            actual = func(object, path, updater);\n\n        assert.strictEqual(actual, object);\n        assert.strictEqual(object.a, value);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var props = [-0, Object(-0), 0, Object(0)],\n          expected = lodashStable.map(props, lodashStable.constant(value));\n\n      var actual = lodashStable.map(props, function(key) {\n        var object = { '-0': 'a', '0': 'b' };\n        func(object, key, updater);\n        return object[lodashStable.toString(key)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should unset symbol keyed property values', function(assert) {\n      assert.expect(2);\n\n      if (Symbol) {\n        var object = {};\n        object[symbol] = 1;\n\n        assert.strictEqual(_.unset(object, symbol), true);\n        assert.notOk(symbol in object);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should set deep property values', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var object = { 'a': { 'b': oldValue } },\n            actual = func(object, path, updater);\n\n        assert.strictEqual(actual, object);\n        assert.strictEqual(object.a.b, value);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should set a key over a path', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a.b', ['a.b']], function(path) {\n        var object = { 'a.b': oldValue },\n            actual = func(object, path, updater);\n\n        assert.strictEqual(actual, object);\n        assert.deepEqual(object, { 'a.b': value });\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not coerce array paths to strings', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a,b,c': 1, 'a': { 'b': { 'c': 1 } } };\n\n      func(object, ['a', 'b', 'c'], updater);\n      assert.strictEqual(object.a.b.c, value);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not ignore empty brackets', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n\n      func(object, 'a[]', updater);\n      assert.deepEqual(object, { 'a': { '': value } });\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle empty paths', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([['', ''], [[], ['']]], function(pair, index) {\n        var object = {};\n\n        func(object, pair[0], updater);\n        assert.deepEqual(object, index ? {} : { '': value });\n\n        func(object, pair[1], updater);\n        assert.deepEqual(object, { '': value });\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should handle complex paths', function(assert) {\n      assert.expect(2);\n\n      var object = { 'a': { '1.23': { '[\"b\"]': { 'c': { \"['d']\": { '\\ne\\n': { 'f': { 'g': oldValue } } } } } } } };\n\n      var paths = [\n        'a[-1.23][\"[\\\\\"b\\\\\"]\"].c[\\'[\\\\\\'d\\\\\\']\\'][\\ne\\n][f].g',\n        ['a', '-1.23', '[\"b\"]', 'c', \"['d']\", '\\ne\\n', 'f', 'g']\n      ];\n\n      lodashStable.each(paths, function(path) {\n        func(object, path, updater);\n        assert.strictEqual(object.a[-1.23]['[\"b\"]'].c[\"['d']\"]['\\ne\\n'].f.g, value);\n        object.a[-1.23]['[\"b\"]'].c[\"['d']\"]['\\ne\\n'].f.g = oldValue;\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should create parts of `path` that are missing', function(assert) {\n      assert.expect(6);\n\n      var object = {};\n\n      lodashStable.each(['a[1].b.c', ['a', '1', 'b', 'c']], function(path) {\n        var actual = func(object, path, updater);\n\n        assert.strictEqual(actual, object);\n        assert.deepEqual(actual, { 'a': [undefined, { 'b': { 'c': value } }] });\n        assert.notOk('0' in object.a);\n\n        delete object.a;\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not error when `object` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined],\n          expected = [[null, null], [undefined, undefined]];\n\n      var actual = lodashStable.map(values, function(value) {\n        try {\n          return [func(value, 'a.b', updater), func(value, ['a', 'b'], updater)];\n        } catch (e) {\n          return e.message;\n        }\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should overwrite primitives in the path', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var object = { 'a': '' };\n\n        func(object, path, updater);\n        assert.deepEqual(object, { 'a': { 'b': 2 } });\n      });;\n    });\n\n    QUnit.test('`_.' + methodName + '` should not create an array for missing non-index property names that start with numbers', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n\n      func(object, ['1a', '2b', '3c'], updater);\n      assert.deepEqual(object, { '1a': { '2b': { '3c': value } } });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not assign values that are the same as their destinations', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a'], { 'a': 1 }, NaN], function(value) {\n        var object = {},\n            pass = true,\n            updater = isUpdate ? lodashStable.constant(value) : value;\n\n        defineProperty(object, 'a', {\n          'configurable': true,\n          'enumerable': true,\n          'get': lodashStable.constant(value),\n          'set': function() { pass = false; }\n        });\n\n        func(object, 'a', updater);\n        assert.ok(pass);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.shuffle');\n\n  (function() {\n    var array = [1, 2, 3],\n        object = { 'a': 1, 'b': 2, 'c': 3 };\n\n    QUnit.test('should return a new array', function(assert) {\n      assert.expect(1);\n\n      assert.notStrictEqual(_.shuffle(array), array);\n    });\n\n    QUnit.test('should contain the same elements after a collection is shuffled', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.shuffle(array).sort(), array);\n      assert.deepEqual(_.shuffle(object).sort(), array);\n    });\n\n    QUnit.test('should shuffle small collections', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.times(1000, function(assert) {\n        return _.shuffle([1, 2]);\n      });\n\n      assert.deepEqual(lodashStable.sortBy(lodashStable.uniqBy(actual, String), '0'), [[1, 2], [2, 1]]);\n    });\n\n    QUnit.test('should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.shuffle(1), []);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.size');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should return the number of own enumerable string keyed properties of an object', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size({ 'one': 1, 'two': 2, 'three': 3 }), 3);\n    });\n\n    QUnit.test('should return the length of an array', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size(array), 3);\n    });\n\n    QUnit.test('should accept a falsey `object`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubZero);\n\n      var actual = lodashStable.map(falsey, function(object, index) {\n        try {\n          return index ? _.size(object) : _.size();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size(args), 3);\n    });\n\n    QUnit.test('should work with jQuery/MooTools DOM query collections', function(assert) {\n      assert.expect(1);\n\n      function Foo(elements) {\n        push.apply(this, elements);\n      }\n      Foo.prototype = { 'length': 0, 'splice': arrayProto.splice };\n\n      assert.strictEqual(_.size(new Foo(array)), 3);\n    });\n\n    QUnit.test('should work with maps', function(assert) {\n      assert.expect(2);\n\n      if (Map) {\n        lodashStable.each([new Map, realm.map], function(map) {\n          map.set('a', 1);\n          map.set('b', 2);\n          assert.strictEqual(_.size(map), 2);\n          map.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should work with sets', function(assert) {\n      assert.expect(2);\n\n      if (Set) {\n        lodashStable.each([new Set, realm.set], function(set) {\n          set.add(1);\n          set.add(2);\n          assert.strictEqual(_.size(set), 2);\n          set.clear();\n        });\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should not treat objects with negative lengths as array-like', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size({ 'length': -1 }), 1);\n    });\n\n    QUnit.test('should not treat objects with lengths larger than `MAX_SAFE_INTEGER` as array-like', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size({ 'length': MAX_SAFE_INTEGER + 1 }), 1);\n    });\n\n    QUnit.test('should not treat objects with non-number lengths as array-like', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.size({ 'length': '0' }), 1);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.slice');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should use a default `start` of `0` and a default `end` of `length`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.slice(array);\n      assert.deepEqual(actual, array);\n      assert.notStrictEqual(actual, array);\n    });\n\n    QUnit.test('should work with a positive `start`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.slice(array, 1), [2, 3]);\n      assert.deepEqual(_.slice(array, 1, 3), [2, 3]);\n    });\n\n    QUnit.test('should work with a `start` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(start) {\n        assert.deepEqual(_.slice(array, start), []);\n      });\n    });\n\n    QUnit.test('should treat falsey `start` values as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, lodashStable.constant(array));\n\n      var actual = lodashStable.map(falsey, function(start) {\n        return _.slice(array, start);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a negative `start`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.slice(array, -1), [3]);\n    });\n\n    QUnit.test('should work with a negative `start` <= negative `length`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-3, -4, -Infinity], function(start) {\n        assert.deepEqual(_.slice(array, start), array);\n      });\n    });\n\n    QUnit.test('should work with `start` >= `end`', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([2, 3], function(start) {\n        assert.deepEqual(_.slice(array, start, 2), []);\n      });\n    });\n\n    QUnit.test('should work with a positive `end`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.slice(array, 0, 1), [1]);\n    });\n\n    QUnit.test('should work with a `end` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(end) {\n        assert.deepEqual(_.slice(array, 0, end), array);\n      });\n    });\n\n    QUnit.test('should treat falsey `end` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? array : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(end, index) {\n        return index ? _.slice(array, 0, end) : _.slice(array, 0);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with a negative `end`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.slice(array, 0, -1), [1, 2]);\n    });\n\n    QUnit.test('should work with a negative `end` <= negative `length`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-3, -4, -Infinity], function(end) {\n        assert.deepEqual(_.slice(array, 0, end), []);\n      });\n    });\n\n    QUnit.test('should coerce `start` and `end` to integers', function(assert) {\n      assert.expect(1);\n\n      var positions = [[0.1, 1.6], ['0', 1], [0, '1'], ['1'], [NaN, 1], [1, NaN]];\n\n      var actual = lodashStable.map(positions, function(pos) {\n        return _.slice.apply(_, [array].concat(pos));\n      });\n\n      assert.deepEqual(actual, [[1], [1], [1], [2, 3], [1], []]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(2);\n\n      var array = [[1], [2, 3]],\n          actual = lodashStable.map(array, _.slice);\n\n      assert.deepEqual(actual, array);\n      assert.notStrictEqual(actual, array);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(38);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            length = array.length,\n            wrapped = _(array);\n\n        lodashStable.each(['map', 'filter'], function(methodName) {\n          assert.deepEqual(wrapped[methodName]().slice(0, -1).value(), array.slice(0, -1));\n          assert.deepEqual(wrapped[methodName]().slice(1).value(), array.slice(1));\n          assert.deepEqual(wrapped[methodName]().slice(1, 3).value(), array.slice(1, 3));\n          assert.deepEqual(wrapped[methodName]().slice(-1).value(), array.slice(-1));\n\n          assert.deepEqual(wrapped[methodName]().slice(length).value(), array.slice(length));\n          assert.deepEqual(wrapped[methodName]().slice(3, 2).value(), array.slice(3, 2));\n          assert.deepEqual(wrapped[methodName]().slice(0, -length).value(), array.slice(0, -length));\n          assert.deepEqual(wrapped[methodName]().slice(0, null).value(), array.slice(0, null));\n\n          assert.deepEqual(wrapped[methodName]().slice(0, length).value(), array.slice(0, length));\n          assert.deepEqual(wrapped[methodName]().slice(-length).value(), array.slice(-length));\n          assert.deepEqual(wrapped[methodName]().slice(null).value(), array.slice(null));\n\n          assert.deepEqual(wrapped[methodName]().slice(0, 1).value(), array.slice(0, 1));\n          assert.deepEqual(wrapped[methodName]().slice(NaN, '1').value(), array.slice(NaN, '1'));\n\n          assert.deepEqual(wrapped[methodName]().slice(0.1, 1.1).value(), array.slice(0.1, 1.1));\n          assert.deepEqual(wrapped[methodName]().slice('0', 1).value(), array.slice('0', 1));\n          assert.deepEqual(wrapped[methodName]().slice(0, '1').value(), array.slice(0, '1'));\n          assert.deepEqual(wrapped[methodName]().slice('1').value(), array.slice('1'));\n          assert.deepEqual(wrapped[methodName]().slice(NaN, 1).value(), array.slice(NaN, 1));\n          assert.deepEqual(wrapped[methodName]().slice(1, NaN).value(), array.slice(1, NaN));\n        });\n      }\n      else {\n        skipAssert(assert, 38);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.some');\n\n  (function() {\n    QUnit.test('should return `true` if `predicate` returns truthy for any element', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.some([false, 1, ''], identity), true);\n      assert.strictEqual(_.some([null, 'a', 0], identity), true);\n    });\n\n    QUnit.test('should return `false` for empty collections', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubFalse);\n\n      var actual = lodashStable.map(empties, function(value) {\n        try {\n          return _.some(value, identity);\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return `true` as soon as `predicate` returns truthy', function(assert) {\n      assert.expect(2);\n\n      var count = 0;\n\n      assert.strictEqual(_.some([null, true, null], function(value) {\n        count++;\n        return value;\n      }), true);\n\n      assert.strictEqual(count, 2);\n    });\n\n    QUnit.test('should return `false` if `predicate` returns falsey for all elements', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.some([false, false, false], identity), false);\n      assert.strictEqual(_.some([null, 0, ''], identity), false);\n    });\n\n    QUnit.test('should use `_.identity` when `predicate` is nullish', function(assert) {\n      assert.expect(2);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var array = [0, 0];\n        return index ? _.some(array, value) : _.some(array);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(values, stubTrue);\n      actual = lodashStable.map(values, function(value, index) {\n        var array = [0, 1];\n        return index ? _.some(array, value) : _.some(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 0, 'b': 0 }, { 'a': 0, 'b': 1 }];\n      assert.strictEqual(_.some(objects, 'a'), false);\n      assert.strictEqual(_.some(objects, 'b'), true);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(2);\n\n      var objects = [{ 'a': 0, 'b': 0 }, { 'a': 1, 'b': 1}];\n      assert.strictEqual(_.some(objects, { 'a': 0 }), true);\n      assert.strictEqual(_.some(objects, { 'b': 2 }), false);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([[1]], _.some);\n      assert.deepEqual(actual, [true]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sortBy');\n\n  (function() {\n    var objects = [\n      { 'a': 'x', 'b': 3 },\n      { 'a': 'y', 'b': 4 },\n      { 'a': 'x', 'b': 1 },\n      { 'a': 'y', 'b': 2 }\n    ];\n\n    QUnit.test('should sort in ascending order by `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(_.sortBy(objects, function(object) {\n        return object.b;\n      }), 'b');\n\n      assert.deepEqual(actual, [1, 2, 3, 4]);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [3, 2, 1],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2, 3]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.sortBy(array, value) : _.sortBy(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(_.sortBy(objects.concat(undefined), 'b'), 'b');\n      assert.deepEqual(actual, [1, 2, 3, 4, undefined]);\n    });\n\n    QUnit.test('should work with an object for `collection`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sortBy({ 'a': 1, 'b': 2, 'c': 3 }, Math.sin);\n      assert.deepEqual(actual, [3, 1, 2]);\n    });\n\n    QUnit.test('should move `NaN`, nullish, and symbol values to the end', function(assert) {\n      assert.expect(2);\n\n      var symbol1 = Symbol ? Symbol('a') : null,\n          symbol2 = Symbol ? Symbol('b') : null,\n          array = [NaN, undefined, null, 4, symbol1, null, 1, symbol2, undefined, 3, NaN, 2],\n          expected = [1, 2, 3, 4, symbol1, symbol2, null, null, undefined, undefined, NaN, NaN];\n\n      assert.deepEqual(_.sortBy(array), expected);\n\n      array = [NaN, undefined, symbol1, null, 'd', null, 'a', symbol2, undefined, 'c', NaN, 'b'];\n      expected = ['a', 'b', 'c', 'd', symbol1, symbol2, null, null, undefined, undefined, NaN, NaN];\n\n      assert.deepEqual(_.sortBy(array), expected);\n    });\n\n    QUnit.test('should treat number values for `collection` as empty', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.sortBy(1), []);\n    });\n\n    QUnit.test('should coerce arrays returned from `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sortBy(objects, function(object) {\n        var result = [object.a, object.b];\n        result.toString = function() { return String(this[0]); };\n        return result;\n      });\n\n      assert.deepEqual(actual, [objects[0], objects[2], objects[1], objects[3]]);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([[2, 1, 3], [3, 2, 1]], _.sortBy);\n      assert.deepEqual(actual, [[1, 2, 3], [1, 2, 3]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sortBy methods');\n\n  lodashStable.each(['orderBy', 'sortBy'], function(methodName) {\n    var func = _[methodName];\n\n    function Pair(a, b, c) {\n      this.a = a;\n      this.b = b;\n      this.c = c;\n    }\n\n    var objects = [\n      { 'a': 'x', 'b': 3 },\n      { 'a': 'y', 'b': 4 },\n      { 'a': 'x', 'b': 1 },\n      { 'a': 'y', 'b': 2 }\n    ];\n\n    var stableArray = [\n      new Pair(1, 1, 1), new Pair(1, 2, 1),\n      new Pair(1, 1, 1), new Pair(1, 2, 1),\n      new Pair(1, 3, 1), new Pair(1, 4, 1),\n      new Pair(1, 5, 1), new Pair(1, 6, 1),\n      new Pair(2, 1, 2), new Pair(2, 2, 2),\n      new Pair(2, 3, 2), new Pair(2, 4, 2),\n      new Pair(2, 5, 2), new Pair(2, 6, 2),\n      new Pair(undefined, 1, 1), new Pair(undefined, 2, 1),\n      new Pair(undefined, 3, 1), new Pair(undefined, 4, 1),\n      new Pair(undefined, 5, 1), new Pair(undefined, 6, 1)\n    ];\n\n    var stableObject = lodashStable.zipObject('abcdefghijklmnopqrst'.split(''), stableArray);\n\n    QUnit.test('`_.' + methodName + '` should sort multiple properties in ascending order', function(assert) {\n      assert.expect(1);\n\n      var actual = func(objects, ['a', 'b']);\n      assert.deepEqual(actual, [objects[2], objects[0], objects[3], objects[1]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support iteratees', function(assert) {\n      assert.expect(1);\n\n      var actual = func(objects, ['a', function(object) { return object.b; }]);\n      assert.deepEqual(actual, [objects[2], objects[0], objects[3], objects[1]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should perform a stable sort (test in IE > 8 and V8)', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([stableArray, stableObject], function(value, index) {\n        var actual = func(value, ['a', 'c']);\n        assert.deepEqual(actual, stableArray, index ? 'object' : 'array');\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should not error on nullish elements', function(assert) {\n      assert.expect(1);\n\n      try {\n        var actual = func(objects.concat(null, undefined), ['a', 'b']);\n      } catch (e) {}\n\n      assert.deepEqual(actual, [objects[2], objects[0], objects[3], objects[1], null, undefined]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.reduce`', function(assert) {\n      assert.expect(3);\n\n      var objects = [\n        { 'a': 'x', '0': 3 },\n        { 'a': 'y', '0': 4 },\n        { 'a': 'x', '0': 1 },\n        { 'a': 'y', '0': 2 }\n      ];\n\n      var funcs = [func, lodashStable.partialRight(func, 'bogus')];\n\n      lodashStable.each(['a', 0, [0]], function(props, index) {\n        var expected = lodashStable.map(funcs, lodashStable.constant(\n          index\n            ? [objects[2], objects[3], objects[0], objects[1]]\n            : [objects[0], objects[2], objects[1], objects[3]]\n        ));\n\n        var actual = lodashStable.map(funcs, function(func) {\n          return lodashStable.reduce([props], func, objects);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sortedIndex methods');\n\n  lodashStable.each(['sortedIndex', 'sortedLastIndex'], function(methodName) {\n    var func = _[methodName],\n        isSortedIndex = methodName == 'sortedIndex';\n\n    QUnit.test('`_.' + methodName + '` should return the insert index', function(assert) {\n      assert.expect(1);\n\n      var array = [30, 50],\n          values = [30, 40, 50],\n          expected = isSortedIndex ? [0, 1, 1] : [1, 1, 2];\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(array, value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with an array of strings', function(assert) {\n      assert.expect(1);\n\n      var array = ['a', 'c'],\n          values = ['a', 'b', 'c'],\n          expected = isSortedIndex ? [0, 1, 1] : [1, 1, 2];\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(array, value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should accept a nullish `array` and a `value`', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([0, 0, 0]));\n\n      var actual = lodashStable.map(values, function(array) {\n        return [func(array, 1), func(array, undefined), func(array, NaN)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should align with `_.sortBy`', function(assert) {\n      assert.expect(12);\n\n      var symbol1 = Symbol ? Symbol('a') : null,\n          symbol2 = Symbol ? Symbol('b') : null,\n          symbol3 = Symbol ? Symbol('c') : null,\n          expected = [1, '2', {}, symbol1, symbol2, null, undefined, NaN, NaN];\n\n      lodashStable.each([\n        [NaN, symbol1, null, 1, '2', {}, symbol2, NaN, undefined],\n        ['2', null, 1, symbol1, NaN, {}, NaN, symbol2, undefined]\n      ], function(array) {\n        assert.deepEqual(_.sortBy(array), expected);\n        assert.strictEqual(func(expected, 3), 2);\n        assert.strictEqual(func(expected, symbol3), isSortedIndex ? 3 : (Symbol ? 5 : 6));\n        assert.strictEqual(func(expected, null), isSortedIndex ? (Symbol ? 5 : 3) : 6);\n        assert.strictEqual(func(expected, undefined), isSortedIndex ? 6 : 7);\n        assert.strictEqual(func(expected, NaN), isSortedIndex ? 7 : 9);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should align with `_.sortBy` for nulls', function(assert) {\n      assert.expect(3);\n\n      var array = [null, null];\n\n      assert.strictEqual(func(array, null), isSortedIndex ? 0 : 2);\n      assert.strictEqual(func(array, 1), 0);\n      assert.strictEqual(func(array, 'a'), 0);\n    });\n\n    QUnit.test('`_.' + methodName + '` should align with `_.sortBy` for symbols', function(assert) {\n      assert.expect(3);\n\n      var symbol1 = Symbol ? Symbol('a') : null,\n          symbol2 = Symbol ? Symbol('b') : null,\n          symbol3 = Symbol ? Symbol('c') : null,\n          array = [symbol1, symbol2];\n\n      assert.strictEqual(func(array, symbol3), isSortedIndex ? 0 : 2);\n      assert.strictEqual(func(array, 1), 0);\n      assert.strictEqual(func(array, 'a'), 0);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sortedIndexBy methods');\n\n  lodashStable.each(['sortedIndexBy', 'sortedLastIndexBy'], function(methodName) {\n    var func = _[methodName],\n        isSortedIndexBy = methodName == 'sortedIndexBy';\n\n    QUnit.test('`_.' + methodName + '` should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      func([30, 50], 40, function(assert) {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [40]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 30 }, { 'x': 50 }],\n          actual = func(objects, { 'x': 40 }, 'x');\n\n      assert.strictEqual(actual, 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support arrays larger than `MAX_ARRAY_LENGTH / 2`', function(assert) {\n      assert.expect(12);\n\n      lodashStable.each([Math.ceil(MAX_ARRAY_LENGTH / 2), MAX_ARRAY_LENGTH], function(length) {\n        var array = [],\n            values = [MAX_ARRAY_LENGTH, NaN, undefined];\n\n        array.length = length;\n\n        lodashStable.each(values, function(value) {\n          var steps = 0;\n\n          var actual = func(array, value, function(value) {\n            steps++;\n            return value;\n          });\n\n          var expected = (isSortedIndexBy ? !lodashStable.isNaN(value) : lodashStable.isFinite(value))\n            ? 0\n            : Math.min(length, MAX_ARRAY_INDEX);\n\n          assert.ok(steps == 32 || steps == 33);\n          assert.strictEqual(actual, expected);\n        });\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sortedIndexOf methods');\n\n  lodashStable.each(['sortedIndexOf', 'sortedLastIndexOf'], function(methodName) {\n    var func = _[methodName],\n        isSortedIndexOf = methodName == 'sortedIndexOf';\n\n    QUnit.test('`_.' + methodName + '` should perform a binary search', function(assert) {\n      assert.expect(1);\n\n      var sorted = [4, 4, 5, 5, 6, 6];\n      assert.deepEqual(func(sorted, 5), isSortedIndexOf ? 2 : 3);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sortedUniq');\n\n  (function() {\n    QUnit.test('should return unique values of a sorted array', function(assert) {\n      assert.expect(3);\n\n      var expected = [1, 2, 3];\n\n      lodashStable.each([[1, 2, 3], [1, 1, 2, 2, 3], [1, 2, 3, 3, 3, 3, 3]], function(array) {\n        assert.deepEqual(_.sortedUniq(array), expected);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.split');\n\n  (function() {\n    QUnit.test('should split a string by `separator`', function(assert) {\n      assert.expect(3);\n\n      var string = 'abcde';\n      assert.deepEqual(_.split(string, 'c'), ['ab', 'de']);\n      assert.deepEqual(_.split(string, /[bd]/), ['a', 'c', 'e']);\n      assert.deepEqual(_.split(string, '', 2), ['a', 'b']);\n    });\n\n    QUnit.test('should return an array containing an empty string for empty values', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined, ''],\n          expected = lodashStable.map(values, lodashStable.constant(['']));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.split(value) : _.split();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var strings = ['abc', 'def', 'ghi'],\n          actual = lodashStable.map(strings, _.split);\n\n      assert.deepEqual(actual, [['abc'], ['def'], ['ghi']]);\n    });\n\n    QUnit.test('should allow mixed string and array prototype methods', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _('abc');\n        assert.strictEqual(wrapped.split('b').join(','), 'a,c');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.spread');\n\n  (function() {\n    function fn(a, b, c) {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should spread arguments to `func`', function(assert) {\n      assert.expect(2);\n\n      var spread = _.spread(fn),\n          expected = [1, 2];\n\n      assert.deepEqual(spread([1, 2]), expected);\n      assert.deepEqual(spread([1, 2], 3), expected);\n    });\n\n    QUnit.test('should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var spread = _.spread(stubTrue),\n          expected = lodashStable.map(falsey, stubTrue);\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? spread(array) : spread();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with `start`', function(assert) {\n      assert.expect(2);\n\n      var spread = _.spread(fn, 1),\n          expected = [1, 2, 3];\n\n      assert.deepEqual(spread(1, [2, 3]), expected);\n      assert.deepEqual(spread(1, [2, 3], 4), expected);\n    });\n\n    QUnit.test('should treat `start` as `0` for negative or `NaN` values', function(assert) {\n      assert.expect(1);\n\n      var values = [-1, NaN, 'a'],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2]));\n\n      var actual = lodashStable.map(values, function(value) {\n        var spread = _.spread(fn, value);\n        return spread([1, 2]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should coerce `start` to an integer', function(assert) {\n      assert.expect(2);\n\n      var spread = _.spread(fn, 1.6),\n          expected = [1, 2, 3];\n\n      assert.deepEqual(spread(1, [2, 3]), expected);\n      assert.deepEqual(spread(1, [2, 3], 4), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.startCase');\n\n  (function() {\n    QUnit.test('should uppercase only the first character of each word', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.startCase('--foo-bar--'), 'Foo Bar');\n      assert.strictEqual(_.startCase('fooBar'), 'Foo Bar');\n      assert.strictEqual(_.startCase('__FOO_BAR__'), 'FOO BAR');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.startsWith');\n\n  (function() {\n    var string = 'abc';\n\n    QUnit.test('should return `true` if a string starts with `target`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.startsWith(string, 'a'), true);\n    });\n\n    QUnit.test('should return `false` if a string does not start with `target`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.startsWith(string, 'b'), false);\n    });\n\n    QUnit.test('should work with a `position`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.startsWith(string, 'b', 1), true);\n    });\n\n    QUnit.test('should work with `position` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 5, MAX_SAFE_INTEGER, Infinity], function(position) {\n        assert.strictEqual(_.startsWith(string, 'a', position), false);\n      });\n    });\n\n    QUnit.test('should treat falsey `position` values as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubTrue);\n\n      var actual = lodashStable.map(falsey, function(position) {\n        return _.startsWith(string, 'a', position);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should treat a negative `position` as `0`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each([-1, -3, -Infinity], function(position) {\n        assert.strictEqual(_.startsWith(string, 'a', position), true);\n        assert.strictEqual(_.startsWith(string, 'b', position), false);\n      });\n    });\n\n    QUnit.test('should coerce `position` to an integer', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.startsWith(string, 'bc', 1.2), true);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.startsWith and lodash.endsWith');\n\n  lodashStable.each(['startsWith', 'endsWith'], function(methodName) {\n    var func = _[methodName],\n        isStartsWith = methodName == 'startsWith';\n\n    var string = 'abc',\n        chr = isStartsWith ? 'a' : 'c';\n\n    QUnit.test('`_.' + methodName + '` should coerce `string` to a string', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(func(Object(string), chr), true);\n      assert.strictEqual(func({ 'toString': lodashStable.constant(string) }, chr), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `target` to a string', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(func(string, Object(chr)), true);\n      assert.strictEqual(func(string, { 'toString': lodashStable.constant(chr) }), true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `position` to a number', function(assert) {\n      assert.expect(2);\n\n      var position = isStartsWith ? 1 : 2;\n\n      assert.strictEqual(func(string, 'b', Object(position)), true);\n      assert.strictEqual(func(string, 'b', { 'toString': lodashStable.constant(String(position)) }), true);\n    });\n\n    QUnit.test('should return `true` when `target` is an empty string regardless of `position`', function(assert) {\n      assert.expect(1);\n\n      var positions = [-Infinity, NaN, -3, -1, 0, 1, 2, 3, 5, MAX_SAFE_INTEGER, Infinity];\n\n      assert.ok(lodashStable.every(positions, function(position) {\n        return func(string, '', position);\n      }));\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('stub methods');\n\n  lodashStable.each(['noop', 'stubTrue', 'stubFalse', 'stubArray', 'stubObject', 'stubString'], function(methodName) {\n    var func = _[methodName];\n\n    var pair = ({\n      'stubArray': [[], 'an empty array'],\n      'stubFalse': [false, '`false`'],\n      'stubObject': [{}, 'an empty object'],\n      'stubString': ['', 'an empty string'],\n      'stubTrue': [true, '`true`'],\n      'noop': [undefined, '`undefined`']\n    })[methodName];\n\n    var values = Array(2).concat(empties, true, 1, 'a'),\n        expected = lodashStable.map(values, lodashStable.constant(pair[0]));\n\n    QUnit.test('`_.' + methodName + '` should return ' + pair[1], function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        if (index < 2) {\n          return index ? func.call({}) : func();\n        }\n        return func(value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.subtract');\n\n  (function() {\n    QUnit.test('should subtract two numbers', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.subtract(6, 4), 2);\n      assert.strictEqual(_.subtract(-6, 4), -10);\n      assert.strictEqual(_.subtract(-6, -4), -2);\n    });\n\n    QUnit.test('should coerce arguments to numbers', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.subtract('6', '4'), 2);\n      assert.deepEqual(_.subtract('x', 'y'), NaN);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('math operator methods');\n\n  lodashStable.each(['add', 'divide', 'multiply', 'subtract'], function(methodName) {\n    var func = _[methodName],\n        isAddSub = methodName == 'add' || methodName == 'subtract';\n\n    QUnit.test('`_.' + methodName + '` should return `' + (isAddSub ? 0 : 1) + '` when no arguments are given', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(), isAddSub ? 0 : 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with only one defined argument', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(func(6), 6);\n      assert.strictEqual(func(6, undefined), 6);\n      assert.strictEqual(func(undefined, 4), 4);\n    });\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(2);\n\n      var values = [0, '0', -0, '-0'],\n          expected = [[0, Infinity], ['0', Infinity], [-0, -Infinity], ['-0', -Infinity]];\n\n      lodashStable.times(2, function(index) {\n        var actual = lodashStable.map(values, function(value) {\n          var result = index ? func(undefined, value) : func(value);\n          return [result, 1 / result];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert objects to `NaN`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(func(0, {}), NaN);\n      assert.deepEqual(func({}, 0), NaN);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert symbols to `NaN`', function(assert) {\n      assert.expect(2);\n\n      if (Symbol) {\n        assert.deepEqual(func(0, symbol), NaN);\n        assert.deepEqual(func(symbol, 0), NaN);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _(1)[methodName](2);\n        assert.notOk(actual instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var actual = _(1).chain()[methodName](2);\n        assert.ok(actual instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.sumBy');\n\n  (function() {\n    var array = [6, 4, 2],\n        objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }];\n\n    QUnit.test('should work with an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.sumBy(objects, function(object) {\n        return object.a;\n      });\n\n      assert.deepEqual(actual, 6);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.sumBy(array, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [6]);\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var arrays = [[2], [3], [1]];\n      assert.strictEqual(_.sumBy(arrays, 0), 6);\n      assert.strictEqual(_.sumBy(objects, 'a'), 6);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('sum methods');\n\n  lodashStable.each(['sum', 'sumBy'], function(methodName) {\n    var array = [6, 4, 2],\n        func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the sum of an array of numbers', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(array), 12);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return `0` when passing empty `array` values', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(empties, stubZero);\n\n      var actual = lodashStable.map(empties, function(value) {\n        return func(value);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should skip `undefined` values', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func([1, undefined]), 1);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not skip `NaN` values', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func([1, NaN]), NaN);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not coerce values to numbers', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(func(['1', '2']), '12');\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.tail');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should accept a falsey `array`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(array, index) {\n        try {\n          return index ? _.tail(array) : _.tail();\n        } catch (e) {}\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should exclude the first element', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.tail(array), [2, 3]);\n    });\n\n    QUnit.test('should return an empty when querying empty arrays', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.tail([]), []);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.tail);\n\n      assert.deepEqual(actual, [[2, 3], [5, 6], [8, 9]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            values = [];\n\n        var actual = _(array).tail().filter(function(value) {\n          values.push(value);\n          return false;\n        })\n        .value();\n\n        assert.deepEqual(actual, []);\n        assert.deepEqual(values, array.slice(1));\n\n        values = [];\n\n        actual = _(array).filter(function(value) {\n          values.push(value);\n          return isEven(value);\n        })\n        .tail()\n        .value();\n\n        assert.deepEqual(actual, _.tail(_.filter(array, isEven)));\n        assert.deepEqual(values, array);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should not execute subsequent iteratees on an empty array in a lazy sequence', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            iteratee = function() { pass = false; },\n            pass = true,\n            actual = _(array).slice(0, 1).tail().map(iteratee).value();\n\n        assert.ok(pass);\n        assert.deepEqual(actual, []);\n\n        pass = true;\n        actual = _(array).filter().slice(0, 1).tail().map(iteratee).value();\n\n        assert.ok(pass);\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.take');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should take the first two elements', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.take(array, 2), [1, 2]);\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [1] : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(n) {\n        return _.take(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty array when `n` < `1`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.take(array, n), []);\n      });\n    });\n\n    QUnit.test('should return all elements when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        assert.deepEqual(_.take(array, n), array);\n      });\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.take);\n\n      assert.deepEqual(actual, [[1], [4], [7]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = lodashStable.range(1, LARGE_ARRAY_SIZE + 1),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            actual = _(array).take(2).take().value();\n\n        assert.deepEqual(actual, _.take(_.take(array, 2)));\n\n        actual = _(array).filter(predicate).take(2).take().value();\n        assert.deepEqual(values, [1, 2]);\n        assert.deepEqual(actual, _.take(_.take(_.filter(array, predicate), 2)));\n\n        actual = _(array).take(6).takeRight(4).take(2).takeRight().value();\n        assert.deepEqual(actual, _.takeRight(_.take(_.takeRight(_.take(array, 6), 4), 2)));\n\n        values = [];\n\n        actual = _(array).take(array.length - 1).filter(predicate).take(6).takeRight(4).take(2).takeRight().value();\n        assert.deepEqual(values, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n        assert.deepEqual(actual, _.takeRight(_.take(_.takeRight(_.take(_.filter(_.take(array, array.length - 1), predicate), 6), 4), 2)));\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.takeRight');\n\n  (function() {\n    var array = [1, 2, 3];\n\n    QUnit.test('should take the last two elements', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeRight(array, 2), [2, 3]);\n    });\n\n    QUnit.test('should treat falsey `n` values, except `undefined`, as `0`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, function(value) {\n        return value === undefined ? [3] : [];\n      });\n\n      var actual = lodashStable.map(falsey, function(n) {\n        return _.takeRight(array, n);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an empty array when `n` < `1`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([0, -1, -Infinity], function(n) {\n        assert.deepEqual(_.takeRight(array, n), []);\n      });\n    });\n\n    QUnit.test('should return all elements when `n` >= `length`', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each([3, 4, Math.pow(2, 32), Infinity], function(n) {\n        assert.deepEqual(_.takeRight(array, n), array);\n      });\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n          actual = lodashStable.map(array, _.takeRight);\n\n      assert.deepEqual(actual, [[3], [6], [9]]);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(6);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            actual = _(array).takeRight(2).takeRight().value();\n\n        assert.deepEqual(actual, _.takeRight(_.takeRight(array)));\n\n        actual = _(array).filter(predicate).takeRight(2).takeRight().value();\n        assert.deepEqual(values, array);\n        assert.deepEqual(actual, _.takeRight(_.takeRight(_.filter(array, predicate), 2)));\n\n        actual = _(array).takeRight(6).take(4).takeRight(2).take().value();\n        assert.deepEqual(actual, _.take(_.takeRight(_.take(_.takeRight(array, 6), 4), 2)));\n\n        values = [];\n\n        actual = _(array).filter(predicate).takeRight(6).take(4).takeRight(2).take().value();\n        assert.deepEqual(values, array);\n        assert.deepEqual(actual, _.take(_.takeRight(_.take(_.takeRight(_.filter(array, predicate), 6), 4), 2)));\n      }\n      else {\n        skipAssert(assert, 6);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.takeRightWhile');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    var objects = [\n      { 'a': 0, 'b': 0 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 2, 'b': 2 }\n    ];\n\n    QUnit.test('should take elements while `predicate` returns truthy', function(assert) {\n      assert.expect(1);\n\n      var actual = _.takeRightWhile(array, function(n) {\n        return n > 2;\n      });\n\n      assert.deepEqual(actual, [3, 4]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.takeRightWhile(array, function() {\n        args = slice.call(arguments);\n      });\n\n      assert.deepEqual(args, [4, 3, array]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeRightWhile(objects, { 'b': 2 }), objects.slice(2));\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeRightWhile(objects, ['b', 2]), objects.slice(2));\n    });\n\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeRightWhile(objects, 'b'), objects.slice(1));\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            predicate = function(n) { return n > 2; },\n            expected = _.takeRightWhile(array, predicate),\n            wrapped = _(array).takeRightWhile(predicate);\n\n        assert.deepEqual(wrapped.value(), expected);\n        assert.deepEqual(wrapped.reverse().value(), expected.slice().reverse());\n        assert.strictEqual(wrapped.last(), _.last(expected));\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should provide correct `predicate` arguments in a lazy sequence', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var args,\n            array = lodashStable.range(LARGE_ARRAY_SIZE + 1);\n\n        var expected = [\n          square(LARGE_ARRAY_SIZE),\n          LARGE_ARRAY_SIZE - 1,\n          lodashStable.map(array.slice(1), square)\n        ];\n\n        _(array).slice(1).takeRightWhile(function(value, index, array) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, [LARGE_ARRAY_SIZE, LARGE_ARRAY_SIZE - 1, array.slice(1)]);\n\n        _(array).slice(1).map(square).takeRightWhile(function(value, index, array) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        _(array).slice(1).map(square).takeRightWhile(function(value, index) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        _(array).slice(1).map(square).takeRightWhile(function(index) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, [square(LARGE_ARRAY_SIZE)]);\n\n        _(array).slice(1).map(square).takeRightWhile(function() {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.takeWhile');\n\n  (function() {\n    var array = [1, 2, 3, 4];\n\n    var objects = [\n      { 'a': 2, 'b': 2 },\n      { 'a': 1, 'b': 1 },\n      { 'a': 0, 'b': 0 }\n    ];\n\n    QUnit.test('should take elements while `predicate` returns truthy', function(assert) {\n      assert.expect(1);\n\n      var actual = _.takeWhile(array, function(n) {\n        return n < 3;\n      });\n\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('should provide correct `predicate` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.takeWhile(array, function() {\n        args = slice.call(arguments);\n      });\n\n      assert.deepEqual(args, [1, 0, array]);\n    });\n\n    QUnit.test('should work with `_.matches` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeWhile(objects, { 'b': 2 }), objects.slice(0, 1));\n    });\n\n    QUnit.test('should work with `_.matchesProperty` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeWhile(objects, ['b', 2]), objects.slice(0, 1));\n    });\n    QUnit.test('should work with `_.property` shorthands', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.takeWhile(objects, 'b'), objects.slice(0, 2));\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            predicate = function(n) { return n < 3; },\n            expected = _.takeWhile(array, predicate),\n            wrapped = _(array).takeWhile(predicate);\n\n        assert.deepEqual(wrapped.value(), expected);\n        assert.deepEqual(wrapped.reverse().value(), expected.slice().reverse());\n        assert.strictEqual(wrapped.last(), _.last(expected));\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence with `take`', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE);\n\n        var actual = _(array)\n          .takeWhile(function(n) { return n < 4; })\n          .take(2)\n          .takeWhile(function(n) { return n == 0; })\n          .value();\n\n        assert.deepEqual(actual, [0]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should provide correct `predicate` arguments in a lazy sequence', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var args,\n            array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            expected = [1, 0, lodashStable.map(array.slice(1), square)];\n\n        _(array).slice(1).takeWhile(function(value, index, array) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, [1, 0, array.slice(1)]);\n\n        _(array).slice(1).map(square).takeWhile(function(value, index, array) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        _(array).slice(1).map(square).takeWhile(function(value, index) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n\n        _(array).slice(1).map(square).takeWhile(function(value) {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, [1]);\n\n        _(array).slice(1).map(square).takeWhile(function() {\n          args = slice.call(arguments);\n        }).value();\n\n        assert.deepEqual(args, expected);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.tap');\n\n  (function() {\n    QUnit.test('should intercept and return the given value', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var intercepted,\n            array = [1, 2, 3];\n\n        var actual = _.tap(array, function(value) {\n          intercepted = value;\n        });\n\n        assert.strictEqual(actual, array);\n        assert.strictEqual(intercepted, array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should intercept unwrapped values and return wrapped values when chaining', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var intercepted,\n            array = [1, 2, 3];\n\n        var wrapped = _(array).tap(function(value) {\n          intercepted = value;\n          value.pop();\n        });\n\n        assert.ok(wrapped instanceof _);\n\n        wrapped.value();\n        assert.strictEqual(intercepted, array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.template');\n\n  (function() {\n    QUnit.test('should escape values in \"escape\" delimiters', function(assert) {\n      assert.expect(1);\n\n      var strings = ['<p><%- value %></p>', '<p><%-value%></p>', '<p><%-\\nvalue\\n%></p>'],\n          expected = lodashStable.map(strings, lodashStable.constant('<p>&amp;&lt;&gt;&quot;&#39;/</p>')),\n          data = { 'value': '&<>\"\\'/' };\n\n      var actual = lodashStable.map(strings, function(string) {\n        return _.template(string)(data);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not reference `_.escape` when \"escape\" delimiters are not used', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= typeof __e %>');\n      assert.strictEqual(compiled({}), 'undefined');\n    });\n\n    QUnit.test('should evaluate JavaScript in \"evaluate\" delimiters', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template(\n        '<ul><%\\\n        for (var key in collection) {\\\n          %><li><%= collection[key] %></li><%\\\n        } %></ul>'\n      );\n\n      var data = { 'collection': { 'a': 'A', 'b': 'B' } },\n          actual = compiled(data);\n\n      assert.strictEqual(actual, '<ul><li>A</li><li>B</li></ul>');\n    });\n\n    QUnit.test('should support \"evaluate\" delimiters with single line comments (test production builds)', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<% // A code comment. %><% if (value) { %>yap<% } else { %>nope<% } %>'),\n          data = { 'value': true };\n\n      assert.strictEqual(compiled(data), 'yap');\n    });\n\n    QUnit.test('should support referencing variables declared in \"evaluate\" delimiters from other delimiters', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<% var b = a; %><%= b.value %>'),\n          data = { 'a': { 'value': 1 } };\n\n      assert.strictEqual(compiled(data), '1');\n    });\n\n    QUnit.test('should interpolate data properties in \"interpolate\" delimiters', function(assert) {\n      assert.expect(1);\n\n      var strings = ['<%= a %>BC', '<%=a%>BC', '<%=\\na\\n%>BC'],\n          expected = lodashStable.map(strings, lodashStable.constant('ABC')),\n          data = { 'a': 'A' };\n\n      var actual = lodashStable.map(strings, function(string) {\n        return _.template(string)(data);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should support \"interpolate\" delimiters with escaped values', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= a ? \"a=\\\\\"A\\\\\"\" : \"\" %>'),\n          data = { 'a': true };\n\n      assert.strictEqual(compiled(data), 'a=\"A\"');\n    });\n\n    QUnit.test('should support \"interpolate\" delimiters containing ternary operators', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= value ? value : \"b\" %>'),\n          data = { 'value': 'a' };\n\n      assert.strictEqual(compiled(data), 'a');\n    });\n\n    QUnit.test('should support \"interpolate\" delimiters containing global values', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= typeof Math.abs %>');\n\n      try {\n        var actual = compiled();\n      } catch (e) {}\n\n      assert.strictEqual(actual, 'function');\n    });\n\n    QUnit.test('should support complex \"interpolate\" delimiters', function(assert) {\n      assert.expect(22);\n\n      lodashStable.forOwn({\n        '<%= a + b %>': '3',\n        '<%= b - a %>': '1',\n        '<%= a = b %>': '2',\n        '<%= !a %>': 'false',\n        '<%= ~a %>': '-2',\n        '<%= a * b %>': '2',\n        '<%= a / b %>': '0.5',\n        '<%= a % b %>': '1',\n        '<%= a >> b %>': '0',\n        '<%= a << b %>': '4',\n        '<%= a & b %>': '0',\n        '<%= a ^ b %>': '3',\n        '<%= a | b %>': '3',\n        '<%= {}.toString.call(0) %>': numberTag,\n        '<%= a.toFixed(2) %>': '1.00',\n        '<%= obj[\"a\"] %>': '1',\n        '<%= delete a %>': 'true',\n        '<%= \"a\" in obj %>': 'true',\n        '<%= obj instanceof Object %>': 'true',\n        '<%= new Boolean %>': 'false',\n        '<%= typeof a %>': 'number',\n        '<%= void a %>': ''\n      },\n      function(value, key) {\n        var compiled = _.template(key),\n            data = { 'a': 1, 'b': 2 };\n\n        assert.strictEqual(compiled(data), value, key);\n      });\n    });\n\n    QUnit.test('should support ES6 template delimiters', function(assert) {\n      assert.expect(2);\n\n      var data = { 'value': 2 };\n      assert.strictEqual(_.template('1${value}3')(data), '123');\n      assert.strictEqual(_.template('${\"{\" + value + \"\\\\}\"}')(data), '{2}');\n    });\n\n    QUnit.test('should support the \"imports\" option', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= a %>', { 'imports': { 'a': 1 } });\n      assert.strictEqual(compiled({}), '1');\n    });\n\n    QUnit.test('should support the \"variable\" options', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template(\n        '<% _.each( data.a, function( value ) { %>' +\n            '<%= value.valueOf() %>' +\n        '<% }) %>', { 'variable': 'data' }\n      );\n\n      var data = { 'a': [1, 2, 3] };\n\n      try {\n        assert.strictEqual(compiled(data), '123');\n      } catch (e) {\n        assert.ok(false, e.message);\n      }\n    });\n\n    QUnit.test('should support custom delimiters', function(assert) {\n      assert.expect(2);\n\n      lodashStable.times(2, function(index) {\n        var settingsClone = lodashStable.clone(_.templateSettings);\n\n        var settings = lodashStable.assign(index ? _.templateSettings : {}, {\n          'escape': /\\{\\{-([\\s\\S]+?)\\}\\}/g,\n          'evaluate': /\\{\\{([\\s\\S]+?)\\}\\}/g,\n          'interpolate': /\\{\\{=([\\s\\S]+?)\\}\\}/g\n        });\n\n        var expected = '<ul><li>0: a &amp; A</li><li>1: b &amp; B</li></ul>',\n            compiled = _.template('<ul>{{ _.each(collection, function(value, index) {}}<li>{{= index }}: {{- value }}</li>{{}); }}</ul>', index ? null : settings),\n            data = { 'collection': ['a & A', 'b & B'] };\n\n        assert.strictEqual(compiled(data), expected);\n        lodashStable.assign(_.templateSettings, settingsClone);\n      });\n    });\n\n    QUnit.test('should support custom delimiters containing special characters', function(assert) {\n      assert.expect(2);\n\n      lodashStable.times(2, function(index) {\n        var settingsClone = lodashStable.clone(_.templateSettings);\n\n        var settings = lodashStable.assign(index ? _.templateSettings : {}, {\n          'escape': /<\\?-([\\s\\S]+?)\\?>/g,\n          'evaluate': /<\\?([\\s\\S]+?)\\?>/g,\n          'interpolate': /<\\?=([\\s\\S]+?)\\?>/g\n        });\n\n        var expected = '<ul><li>0: a &amp; A</li><li>1: b &amp; B</li></ul>',\n            compiled = _.template('<ul><? _.each(collection, function(value, index) { ?><li><?= index ?>: <?- value ?></li><? }); ?></ul>', index ? null : settings),\n            data = { 'collection': ['a & A', 'b & B'] };\n\n        assert.strictEqual(compiled(data), expected);\n        lodashStable.assign(_.templateSettings, settingsClone);\n      });\n    });\n\n    QUnit.test('should use a `with` statement by default', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= index %><%= collection[index] %><% _.each(collection, function(value, index) { %><%= index %><% }); %>'),\n          actual = compiled({ 'index': 1, 'collection': ['a', 'b', 'c'] });\n\n      assert.strictEqual(actual, '1b012');\n    });\n\n    QUnit.test('should use `_.templateSettings.imports._.templateSettings`', function(assert) {\n      assert.expect(1);\n\n      var lodash = _.templateSettings.imports._,\n          settingsClone = lodashStable.clone(lodash.templateSettings);\n\n      lodash.templateSettings = lodashStable.assign(lodash.templateSettings, {\n        'interpolate': /\\{\\{=([\\s\\S]+?)\\}\\}/g\n      });\n\n      var compiled = _.template('{{= a }}');\n      assert.strictEqual(compiled({ 'a': 1 }), '1');\n\n      if (settingsClone) {\n        lodashStable.assign(lodash.templateSettings, settingsClone);\n      } else {\n        delete lodash.templateSettings;\n      }\n    });\n\n    QUnit.test('should fallback to `_.templateSettings`', function(assert) {\n      assert.expect(1);\n\n      var lodash = _.templateSettings.imports._,\n          delimiter = _.templateSettings.interpolate;\n\n      _.templateSettings.imports._ = { 'escape': lodashStable.escape };\n      _.templateSettings.interpolate = /\\{\\{=([\\s\\S]+?)\\}\\}/g;\n\n      var compiled = _.template('{{= a }}');\n      assert.strictEqual(compiled({ 'a': 1 }), '1');\n\n      _.templateSettings.imports._ = lodash;\n      _.templateSettings.interpolate = delimiter;\n    });\n\n    QUnit.test('should ignore `null` delimiters', function(assert) {\n      assert.expect(3);\n\n      var delimiter = {\n        'escape': /\\{\\{-([\\s\\S]+?)\\}\\}/g,\n        'evaluate': /\\{\\{([\\s\\S]+?)\\}\\}/g,\n        'interpolate': /\\{\\{=([\\s\\S]+?)\\}\\}/g\n      };\n\n      lodashStable.forOwn({\n        'escape': '{{- a }}',\n        'evaluate': '{{ print(a) }}',\n        'interpolate': '{{= a }}'\n      },\n      function(value, key) {\n        var settings = { 'escape': null, 'evaluate': null, 'interpolate': null };\n        settings[key] = delimiter[key];\n\n        var expected = '1 <%- a %> <% print(a) %> <%= a %>',\n            compiled = _.template(value + ' <%- a %> <% print(a) %> <%= a %>', settings),\n            data = { 'a': 1 };\n\n        assert.strictEqual(compiled(data), expected);\n      });\n    });\n\n    QUnit.test('should work without delimiters', function(assert) {\n      assert.expect(1);\n\n      var expected = 'abc';\n      assert.strictEqual(_.template(expected)({}), expected);\n    });\n\n    QUnit.test('should work with `this` references', function(assert) {\n      assert.expect(2);\n\n      var compiled = _.template('a<%= this.String(\"b\") %>c');\n      assert.strictEqual(compiled(), 'abc');\n\n      var object = { 'b': 'B' };\n      object.compiled = _.template('A<%= this.b %>C', { 'variable': 'obj' });\n      assert.strictEqual(object.compiled(), 'ABC');\n    });\n\n    QUnit.test('should work with backslashes', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= a %> \\\\b'),\n          data = { 'a': 'A' };\n\n      assert.strictEqual(compiled(data), 'A \\\\b');\n    });\n\n    QUnit.test('should work with escaped characters in string literals', function(assert) {\n      assert.expect(2);\n\n      var compiled = _.template('<% print(\"\\'\\\\n\\\\r\\\\t\\\\u2028\\\\u2029\\\\\\\\\") %>');\n      assert.strictEqual(compiled(), \"'\\n\\r\\t\\u2028\\u2029\\\\\");\n\n      var data = { 'a': 'A' };\n      compiled = _.template('\\'\\n\\r\\t<%= a %>\\u2028\\u2029\\\\\"');\n      assert.strictEqual(compiled(data), '\\'\\n\\r\\tA\\u2028\\u2029\\\\\"');\n    });\n\n    QUnit.test('should handle \\\\u2028 & \\\\u2029 characters', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('\\u2028<%= \"\\\\u2028\\\\u2029\" %>\\u2029');\n      assert.strictEqual(compiled(), '\\u2028\\u2028\\u2029\\u2029');\n    });\n\n    QUnit.test('should work with statements containing quotes', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template(\"<%\\\n        if (a == 'A' || a == \\\"a\\\") {\\\n          %>'a',\\\"A\\\"<%\\\n        } %>\"\n      );\n\n      var data = { 'a': 'A' };\n      assert.strictEqual(compiled(data), \"'a',\\\"A\\\"\");\n    });\n\n    QUnit.test('should work with templates containing newlines and comments', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%\\n\\\n        // A code comment.\\n\\\n        if (value) { value += 3; }\\n\\\n        %><p><%= value %></p>'\n      );\n\n      assert.strictEqual(compiled({ 'value': 3 }), '<p>6</p>');\n    });\n\n    QUnit.test('should tokenize delimiters', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<span class=\"icon-<%= type %>2\"></span>'),\n          data = { 'type': 1 };\n\n      assert.strictEqual(compiled(data), '<span class=\"icon-12\"></span>');\n    });\n\n    QUnit.test('should evaluate delimiters once', function(assert) {\n      assert.expect(1);\n\n      var actual = [],\n          compiled = _.template('<%= func(\"a\") %><%- func(\"b\") %><% func(\"c\") %>'),\n          data = { 'func': function(value) { actual.push(value); } };\n\n      compiled(data);\n      assert.deepEqual(actual, ['a', 'b', 'c']);\n    });\n\n    QUnit.test('should match delimiters before escaping text', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<<\\n a \\n>>', { 'evaluate': /<<(.*?)>>/g });\n      assert.strictEqual(compiled(), '<<\\n a \\n>>');\n    });\n\n    QUnit.test('should resolve nullish values to an empty string', function(assert) {\n      assert.expect(3);\n\n      var compiled = _.template('<%= a %><%- a %>'),\n          data = { 'a': null };\n\n      assert.strictEqual(compiled(data), '');\n\n      data = { 'a': undefined };\n      assert.strictEqual(compiled(data), '');\n\n      data = { 'a': {} };\n      compiled = _.template('<%= a.b %><%- a.b %>');\n      assert.strictEqual(compiled(data), '');\n    });\n\n    QUnit.test('should return an empty string for empty values', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined, ''],\n          expected = lodashStable.map(values, stubString),\n          data = { 'a': 1 };\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var compiled = index ? _.template(value) : _.template();\n        return compiled(data);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should parse delimiters without newlines', function(assert) {\n      assert.expect(1);\n\n      var expected = '<<\\nprint(\"<p>\" + (value ? \"yes\" : \"no\") + \"</p>\")\\n>>',\n          compiled = _.template(expected, { 'evaluate': /<<(.+?)>>/g }),\n          data = { 'value': true };\n\n      assert.strictEqual(compiled(data), expected);\n    });\n\n    QUnit.test('should support recursive calls', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('<%= a %><% a = _.template(c)(obj) %><%= a %>'),\n          data = { 'a': 'A', 'b': 'B', 'c': '<%= b %>' };\n\n      assert.strictEqual(compiled(data), 'AB');\n    });\n\n    QUnit.test('should coerce `text` to a string', function(assert) {\n      assert.expect(1);\n\n      var object = { 'toString': lodashStable.constant('<%= a %>') },\n          data = { 'a': 1 };\n\n      assert.strictEqual(_.template(object)(data), '1');\n    });\n\n    QUnit.test('should not modify the `options` object', function(assert) {\n      assert.expect(1);\n\n      var options = {};\n      _.template('', options);\n      assert.deepEqual(options, {});\n    });\n\n    QUnit.test('should not modify `_.templateSettings` when `options` are given', function(assert) {\n      assert.expect(2);\n\n      var data = { 'a': 1 };\n\n      assert.notOk('a' in _.templateSettings);\n      _.template('', {}, data);\n      assert.notOk('a' in _.templateSettings);\n\n      delete _.templateSettings.a;\n    });\n\n    QUnit.test('should not error for non-object `data` and `options` values', function(assert) {\n      assert.expect(2);\n\n      _.template('')(1);\n      assert.ok(true, '`data` value');\n\n      _.template('', 1)(1);\n      assert.ok(true, '`options` value');\n    });\n\n    QUnit.test('should expose the source on compiled templates', function(assert) {\n      assert.expect(1);\n\n      var compiled = _.template('x'),\n          values = [String(compiled), compiled.source],\n          expected = lodashStable.map(values, stubTrue);\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.includes(value, '__p');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should expose the source on SyntaxErrors', function(assert) {\n      assert.expect(1);\n\n      try {\n        _.template('<% if x %>');\n      } catch (e) {\n        var source = e.source;\n      }\n      assert.ok(lodashStable.includes(source, '__p'));\n    });\n\n    QUnit.test('should not include sourceURLs in the source', function(assert) {\n      assert.expect(1);\n\n      var options = { 'sourceURL': '/a/b/c' },\n          compiled = _.template('x', options),\n          values = [compiled.source, undefined];\n\n      try {\n        _.template('<% if x %>', options);\n      } catch (e) {\n        values[1] = e.source;\n      }\n      var expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.includes(value, 'sourceURL');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = ['<%= a %>', '<%- b %>', '<% print(c) %>'],\n          compiles = lodashStable.map(array, _.template),\n          data = { 'a': 'one', 'b': '\"two\"', 'c': 'three' };\n\n      var actual = lodashStable.map(compiles, function(compiled) {\n        return compiled(data);\n      });\n\n      assert.deepEqual(actual, ['one', '&quot;two&quot;', 'three']);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.truncate');\n\n  (function() {\n    var string = 'hi-diddly-ho there, neighborino';\n\n    QUnit.test('should use a default `length` of `30`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.truncate(string), 'hi-diddly-ho there, neighbo...');\n    });\n\n    QUnit.test('should not truncate if `string` is <= `length`', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.truncate(string, { 'length': string.length }), string);\n      assert.strictEqual(_.truncate(string, { 'length': string.length + 2 }), string);\n    });\n\n    QUnit.test('should truncate string the given length', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.truncate(string, { 'length': 24 }), 'hi-diddly-ho there, n...');\n    });\n\n    QUnit.test('should support a `omission` option', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.truncate(string, { 'omission': ' [...]' }), 'hi-diddly-ho there, neig [...]');\n    });\n\n    QUnit.test('should coerce nullish `omission` values to strings', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.truncate(string, { 'omission': null }), 'hi-diddly-ho there, neighbnull');\n      assert.strictEqual(_.truncate(string, { 'omission': undefined }), 'hi-diddly-ho there, nundefined');\n    });\n\n    QUnit.test('should support a `length` option', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.truncate(string, { 'length': 4 }), 'h...');\n    });\n\n    QUnit.test('should support a `separator` option', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.truncate(string, { 'length': 24, 'separator': ' ' }), 'hi-diddly-ho there,...');\n      assert.strictEqual(_.truncate(string, { 'length': 24, 'separator': /,? +/ }), 'hi-diddly-ho there...');\n      assert.strictEqual(_.truncate(string, { 'length': 24, 'separator': /,? +/g }), 'hi-diddly-ho there...');\n    });\n\n    QUnit.test('should treat negative `length` as `0`', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each([0, -2], function(length) {\n        assert.strictEqual(_.truncate(string, { 'length': length }), '...');\n      });\n    });\n\n    QUnit.test('should coerce `length` to an integer', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['', NaN, 4.6, '4'], function(length, index) {\n        var actual = index > 1 ? 'h...' : '...';\n        assert.strictEqual(_.truncate(string, { 'length': { 'valueOf': lodashStable.constant(length) } }), actual);\n      });\n    });\n\n    QUnit.test('should coerce `string` to a string', function(assert) {\n      assert.expect(2);\n\n      assert.strictEqual(_.truncate(Object(string), { 'length': 4 }), 'h...');\n      assert.strictEqual(_.truncate({ 'toString': lodashStable.constant(string) }, { 'length': 5 }), 'hi...');\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map([string, string, string], _.truncate),\n          truncated = 'hi-diddly-ho there, neighbo...';\n\n      assert.deepEqual(actual, [truncated, truncated, truncated]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.throttle');\n\n  (function() {\n    QUnit.test('should throttle a function', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          throttled = _.throttle(function() { callCount++; }, 32);\n\n      throttled();\n      throttled();\n      throttled();\n\n      var lastCount = callCount;\n      assert.ok(callCount);\n\n      setTimeout(function() {\n        assert.ok(callCount > lastCount);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('subsequent calls should return the result of the first call', function(assert) {\n      assert.expect(5);\n\n      var done = assert.async();\n\n      var throttled = _.throttle(identity, 32),\n          results = [throttled('a'), throttled('b')];\n\n      assert.deepEqual(results, ['a', 'a']);\n\n      setTimeout(function() {\n        var results = [throttled('c'), throttled('d')];\n        assert.notEqual(results[0], 'a');\n        assert.notStrictEqual(results[0], undefined);\n\n        assert.notEqual(results[1], 'd');\n        assert.notStrictEqual(results[1], undefined);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('should clear timeout when `func` is called', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      if (!isModularize) {\n        var callCount = 0,\n            dateCount = 0;\n\n        var lodash = _.runInContext({\n          'Date': {\n            'now': function() {\n              return ++dateCount == 5 ? Infinity : +new Date;\n            }\n          }\n        });\n\n        var throttled = lodash.throttle(function() { callCount++; }, 32);\n\n        throttled();\n        throttled();\n\n        setTimeout(function() {\n          assert.strictEqual(callCount, 2);\n          done();\n        }, 64);\n      }\n      else {\n        skipAssert(assert);\n        done();\n      }\n    });\n\n    QUnit.test('should not trigger a trailing call when invoked once', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          throttled = _.throttle(function() { callCount++; }, 32);\n\n      throttled();\n      assert.strictEqual(callCount, 1);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        done();\n      }, 64);\n    });\n\n    lodashStable.times(2, function(index) {\n      QUnit.test('should trigger a call when invoked repeatedly' + (index ? ' and `leading` is `false`' : ''), function(assert) {\n        assert.expect(1);\n\n        var done = assert.async();\n\n        var callCount = 0,\n            limit = (argv || isPhantom) ? 1000 : 320,\n            options = index ? { 'leading': false } : {},\n            throttled = _.throttle(function() { callCount++; }, 32, options);\n\n        var start = +new Date;\n        while ((new Date - start) < limit) {\n          throttled();\n        }\n        var actual = callCount > 1;\n        setTimeout(function() {\n          assert.ok(actual);\n          done();\n        }, 1);\n      });\n    });\n\n    QUnit.test('should trigger a second throttled call as soon as possible', function(assert) {\n      assert.expect(3);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var throttled = _.throttle(function() {\n        callCount++;\n      }, 128, { 'leading': false });\n\n      throttled();\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        throttled();\n      }, 192);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n      }, 254);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 384);\n    });\n\n    QUnit.test('should apply default options', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          throttled = _.throttle(function() { callCount++; }, 32, {});\n\n      throttled();\n      throttled();\n      assert.strictEqual(callCount, 1);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 2);\n        done();\n      }, 128);\n    });\n\n    QUnit.test('should support a `leading` option', function(assert) {\n      assert.expect(2);\n\n      var withLeading = _.throttle(identity, 32, { 'leading': true });\n      assert.strictEqual(withLeading('a'), 'a');\n\n      var withoutLeading = _.throttle(identity, 32, { 'leading': false });\n      assert.strictEqual(withoutLeading('a'), undefined);\n    });\n\n    QUnit.test('should support a `trailing` option', function(assert) {\n      assert.expect(6);\n\n      var done = assert.async();\n\n      var withCount = 0,\n          withoutCount = 0;\n\n      var withTrailing = _.throttle(function(value) {\n        withCount++;\n        return value;\n      }, 64, { 'trailing': true });\n\n      var withoutTrailing = _.throttle(function(value) {\n        withoutCount++;\n        return value;\n      }, 64, { 'trailing': false });\n\n      assert.strictEqual(withTrailing('a'), 'a');\n      assert.strictEqual(withTrailing('b'), 'a');\n\n      assert.strictEqual(withoutTrailing('a'), 'a');\n      assert.strictEqual(withoutTrailing('b'), 'a');\n\n      setTimeout(function() {\n        assert.strictEqual(withCount, 2);\n        assert.strictEqual(withoutCount, 1);\n        done();\n      }, 256);\n    });\n\n    QUnit.test('should not update `lastCalled`, at the end of the timeout, when `trailing` is `false`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var throttled = _.throttle(function() {\n        callCount++;\n      }, 64, { 'trailing': false });\n\n      throttled();\n      throttled();\n\n      setTimeout(function() {\n        throttled();\n        throttled();\n      }, 96);\n\n      setTimeout(function() {\n        assert.ok(callCount > 1);\n        done();\n      }, 192);\n    });\n\n    QUnit.test('should work with a system time of `0`', function(assert) {\n      assert.expect(3);\n\n      var done = assert.async();\n\n      if (!isModularize) {\n        var callCount = 0,\n            dateCount = 0;\n\n        var lodash = _.runInContext({\n          'Date': {\n            'now': function() {\n              return ++dateCount < 4 ? 0 : +new Date;\n            }\n          }\n        });\n\n        var throttled = lodash.throttle(function(value) {\n          callCount++;\n          return value;\n        }, 32);\n\n        var results = [throttled('a'), throttled('b'), throttled('c')];\n        assert.deepEqual(results, ['a', 'a', 'a']);\n        assert.strictEqual(callCount, 1);\n\n        setTimeout(function() {\n          assert.strictEqual(callCount, 2);\n          done();\n        }, 64);\n      }\n      else {\n        skipAssert(assert, 3);\n        done();\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.debounce and lodash.throttle');\n\n  lodashStable.each(['debounce', 'throttle'], function(methodName) {\n    var func = _[methodName],\n        isDebounce = methodName == 'debounce';\n\n    QUnit.test('`_.' + methodName + '` should not error for non-object `options` values', function(assert) {\n      assert.expect(1);\n\n      func(noop, 32, 1);\n      assert.ok(true);\n    });\n\n    QUnit.test('`_.' + methodName + '` should use a default `wait` of `0`', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          funced = func(function() { callCount++; });\n\n      funced();\n\n      setTimeout(function() {\n        funced();\n        assert.strictEqual(callCount, isDebounce ? 1 : 2);\n        done();\n      }, 32);\n    });\n\n    QUnit.test('`_.' + methodName + '` should invoke `func` with the correct `this` binding', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var actual = [],\n          object = { 'funced': func(function() { actual.push(this); }, 32) },\n          expected = lodashStable.times(isDebounce ? 1 : 2, lodashStable.constant(object));\n\n      object.funced();\n      if (!isDebounce) {\n        object.funced();\n      }\n      setTimeout(function() {\n        assert.deepEqual(actual, expected);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('`_.' + methodName + '` supports recursive calls', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var actual = [],\n          args = lodashStable.map(['a', 'b', 'c'], function(chr) { return [{}, chr]; }),\n          expected = args.slice(),\n          queue = args.slice();\n\n      var funced = func(function() {\n        var current = [this];\n        push.apply(current, arguments);\n        actual.push(current);\n\n        var next = queue.shift();\n        if (next) {\n          funced.call(next[0], next[1]);\n        }\n      }, 32);\n\n      var next = queue.shift();\n      funced.call(next[0], next[1]);\n      assert.deepEqual(actual, expected.slice(0, isDebounce ? 0 : 1));\n\n      setTimeout(function() {\n        assert.deepEqual(actual, expected.slice(0, actual.length));\n        done();\n      }, 256);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work if the system time is set backwards', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      if (!isModularize) {\n        var callCount = 0,\n            dateCount = 0;\n\n        var lodash = _.runInContext({\n          'Date': {\n            'now': function() {\n              return ++dateCount == 4\n                ? +new Date(2012, 3, 23, 23, 27, 18)\n                : +new Date;\n            }\n          }\n        });\n\n        var funced = lodash[methodName](function() {\n          callCount++;\n        }, 32);\n\n        funced();\n\n        setTimeout(function() {\n          funced();\n          assert.strictEqual(callCount, isDebounce ? 1 : 2);\n          done();\n        }, 64);\n      }\n      else {\n        skipAssert(assert);\n        done();\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should support cancelling delayed calls', function(assert) {\n      assert.expect(1);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var funced = func(function() {\n        callCount++;\n      }, 32, { 'leading': false });\n\n      funced();\n      funced.cancel();\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 0);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('`_.' + methodName + '` should reset `lastCalled` after cancelling', function(assert) {\n      assert.expect(3);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var funced = func(function() {\n        return ++callCount;\n      }, 32, { 'leading': true });\n\n      assert.strictEqual(funced(), 1);\n      funced.cancel();\n\n      assert.strictEqual(funced(), 2);\n      funced();\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 3);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support flushing delayed calls', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0;\n\n      var funced = func(function() {\n        return ++callCount;\n      }, 32, { 'leading': false });\n\n      funced();\n      assert.strictEqual(funced.flush(), 1);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 1);\n        done();\n      }, 64);\n    });\n\n    QUnit.test('`_.' + methodName + '` should noop `cancel` and `flush` when nothing is queued', function(assert) {\n      assert.expect(2);\n\n      var done = assert.async();\n\n      var callCount = 0,\n          funced = func(function() { callCount++; }, 32);\n\n      funced.cancel();\n      assert.strictEqual(funced.flush(), undefined);\n\n      setTimeout(function() {\n        assert.strictEqual(callCount, 0);\n        done();\n      }, 64);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.times');\n\n  (function() {\n    QUnit.test('should coerce non-finite `n` values to `0`', function(assert) {\n      assert.expect(3);\n\n      lodashStable.each([-Infinity, NaN, Infinity], function(n) {\n        assert.deepEqual(_.times(n), []);\n      });\n    });\n\n    QUnit.test('should coerce `n` to an integer', function(assert) {\n      assert.expect(1);\n\n      var actual = _.times(2.6, _.identity);\n      assert.deepEqual(actual, [0, 1]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.times(1, function(assert) {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [0]);\n    });\n\n    QUnit.test('should use `_.identity` when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant([0, 1, 2]));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.times(3, value) : _.times(3);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an array of the results of each `iteratee` execution', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.times(3, doubled), [0, 2, 4]);\n    });\n\n    QUnit.test('should return an empty array for falsey and negative `n` values', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(-1, -Infinity),\n          expected = lodashStable.map(values, stubArray);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.times(value) : _.times();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.deepEqual(_(3).times(), [0, 1, 2]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        assert.ok(_(3).chain().times() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toArray');\n\n  (function() {\n    QUnit.test('should convert objects to arrays', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(_.toArray({ 'a': 1, 'b': 2 }), [1, 2]);\n    });\n\n    QUnit.test('should convert iterables to arrays', function(assert) {\n      assert.expect(1);\n\n      if (Symbol && Symbol.iterator) {\n        var object = { '0': 'a', 'length': 1 };\n        object[Symbol.iterator] = arrayProto[Symbol.iterator];\n\n        assert.deepEqual(_.toArray(object), ['a']);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should convert maps to arrays', function(assert) {\n      assert.expect(1);\n\n      if (Map) {\n        var map = new Map;\n        map.set('a', 1);\n        map.set('b', 2);\n        assert.deepEqual(_.toArray(map), [['a', 1], ['b', 2]]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should convert strings to arrays', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.toArray(''), []);\n      assert.deepEqual(_.toArray('ab'), ['a', 'b']);\n      assert.deepEqual(_.toArray(Object('ab')), ['a', 'b']);\n    });\n\n    QUnit.test('should work in a lazy sequence', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE + 1);\n\n        var object = lodashStable.zipObject(lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n          return ['key' + index, index];\n        }));\n\n        var actual = _(array).slice(1).map(String).toArray().value();\n        assert.deepEqual(actual, lodashStable.map(array.slice(1), String));\n\n        actual = _(object).toArray().slice(1).map(String).value();\n        assert.deepEqual(actual, _.map(_.toArray(object).slice(1), String));\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toLower');\n\n  (function() {\n    QUnit.test('should convert whole string to lower case', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.toLower('--Foo-Bar--'), '--foo-bar--');\n      assert.deepEqual(_.toLower('fooBar'), 'foobar');\n      assert.deepEqual(_.toLower('__FOO_BAR__'), '__foo_bar__');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toUpper');\n\n  (function() {\n    QUnit.test('should convert whole string to upper case', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.toUpper('--Foo-Bar'), '--FOO-BAR');\n      assert.deepEqual(_.toUpper('fooBar'), 'FOOBAR');\n      assert.deepEqual(_.toUpper('__FOO_BAR__'), '__FOO_BAR__');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.slice and lodash.toArray');\n\n  lodashStable.each(['slice', 'toArray'], function(methodName) {\n    var array = [1, 2, 3],\n        func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return a dense array', function(assert) {\n      assert.expect(3);\n\n      var sparse = Array(3);\n      sparse[1] = 2;\n\n      var actual = func(sparse);\n\n      assert.ok('0' in actual);\n      assert.ok('2' in actual);\n      assert.deepEqual(actual, sparse);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat array-like objects like arrays', function(assert) {\n      assert.expect(2);\n\n      var object = { '0': 'a', 'length': 1 };\n      assert.deepEqual(func(object), ['a']);\n      assert.deepEqual(func(args), array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a shallow clone of arrays', function(assert) {\n      assert.expect(2);\n\n      var actual = func(array);\n      assert.deepEqual(actual, array);\n      assert.notStrictEqual(actual, array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with a node list for `collection`', function(assert) {\n      assert.expect(1);\n\n      if (document) {\n        try {\n          var actual = func(document.getElementsByTagName('body'));\n        } catch (e) {}\n\n        assert.deepEqual(actual, [body]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('toInteger methods');\n\n  lodashStable.each(['toInteger', 'toSafeInteger'], function(methodName) {\n    var func = _[methodName],\n        isSafe = methodName == 'toSafeInteger';\n\n    QUnit.test('`_.' + methodName + '` should convert values to integers', function(assert) {\n      assert.expect(6);\n\n      assert.strictEqual(func(-5.6), -5);\n      assert.strictEqual(func('5.6'), 5);\n      assert.strictEqual(func(), 0);\n      assert.strictEqual(func(NaN), 0);\n\n      var expected = isSafe ? MAX_SAFE_INTEGER : MAX_INTEGER;\n      assert.strictEqual(func(Infinity), expected);\n      assert.strictEqual(func(-Infinity), -expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support `value` of `-0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / func(-0), -Infinity);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toLength');\n\n  (function() {\n    QUnit.test('should return a valid length', function(assert) {\n      assert.expect(4);\n\n      assert.strictEqual(_.toLength(-1), 0);\n      assert.strictEqual(_.toLength('1'), 1);\n      assert.strictEqual(_.toLength(1.1), 1);\n      assert.strictEqual(_.toLength(MAX_INTEGER), MAX_ARRAY_LENGTH);\n    });\n\n    QUnit.test('should return `value` if a valid length', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.toLength(0), 0);\n      assert.strictEqual(_.toLength(3), 3);\n      assert.strictEqual(_.toLength(MAX_ARRAY_LENGTH), MAX_ARRAY_LENGTH);\n    });\n\n    QUnit.test('should convert `-0` to `0`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(1 / _.toLength(-0), Infinity);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('number coercion methods');\n\n  lodashStable.each(['toFinite', 'toInteger', 'toNumber', 'toSafeInteger'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should preserve the sign of `0`', function(assert) {\n      assert.expect(2);\n\n      var values = [0, '0', -0, '-0'],\n          expected = [[0, Infinity], [0, Infinity], [-0, -Infinity], [-0, -Infinity]];\n\n      lodashStable.times(2, function(index) {\n        var others = lodashStable.map(values, index ? Object : identity);\n\n        var actual = lodashStable.map(others, function(value) {\n          var result = func(value);\n          return [result, 1 / result];\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  });\n\n  lodashStable.each(['toFinite', 'toInteger', 'toLength', 'toNumber', 'toSafeInteger'], function(methodName) {\n    var func = _[methodName],\n        isToFinite = methodName == 'toFinite',\n        isToLength = methodName == 'toLength',\n        isToNumber = methodName == 'toNumber',\n        isToSafeInteger = methodName == 'toSafeInteger';\n\n    function negative(string) {\n      return '-' + string;\n    }\n\n    function pad(string) {\n      return whitespace + string + whitespace;\n    }\n\n    function positive(string) {\n      return '+' + string;\n    }\n\n    QUnit.test('`_.' + methodName + '` should pass thru primitive number values', function(assert) {\n      assert.expect(1);\n\n      var values = [0, 1, NaN];\n\n      var expected = lodashStable.map(values, function(value) {\n        return (!isToNumber && value !== value) ? 0 : value;\n      });\n\n      var actual = lodashStable.map(values, func);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert number primitives and objects to numbers', function(assert) {\n      assert.expect(1);\n\n      var values = [2, 1.2, MAX_SAFE_INTEGER, MAX_INTEGER, Infinity, NaN];\n\n      var expected = lodashStable.map(values, function(value) {\n        if (!isToNumber) {\n          if (!isToFinite && value == 1.2) {\n            value = 1;\n          }\n          else if (value == Infinity) {\n            value = MAX_INTEGER;\n          }\n          else if (value !== value) {\n            value = 0;\n          }\n          if (isToLength || isToSafeInteger) {\n            value = Math.min(value, isToLength ? MAX_ARRAY_LENGTH : MAX_SAFE_INTEGER);\n          }\n        }\n        var neg = isToLength ? 0 : -value;\n        return [value, value, neg, neg];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return [func(value), func(Object(value)), func(-value), func(Object(-value))];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert string primitives and objects to numbers', function(assert) {\n      assert.expect(1);\n\n      var transforms = [identity, pad, positive, negative];\n\n      var values = [\n        '10', '1.234567890', (MAX_SAFE_INTEGER + ''),\n        '1e+308', '1e308', '1E+308', '1E308',\n        '5e-324', '5E-324',\n        'Infinity', 'NaN'\n      ];\n\n      var expected = lodashStable.map(values, function(value) {\n        var n = +value;\n        if (!isToNumber) {\n          if (!isToFinite && n == 1.234567890) {\n            n = 1;\n          }\n          else if (n == Infinity) {\n            n = MAX_INTEGER;\n          }\n          else if ((!isToFinite && n == Number.MIN_VALUE) || n !== n) {\n            n = 0;\n          }\n          if (isToLength || isToSafeInteger) {\n            n = Math.min(n, isToLength ? MAX_ARRAY_LENGTH : MAX_SAFE_INTEGER);\n          }\n        }\n        var neg = isToLength ? 0 : -n;\n        return [n, n, n, n, n, n, neg, neg];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.flatMap(transforms, function(mod) {\n          return [func(mod(value)), func(Object(mod(value)))];\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert binary/octal strings to numbers', function(assert) {\n      assert.expect(1);\n\n      var numbers = [42, 5349, 1715004],\n          transforms = [identity, pad],\n          values = ['0b101010', '0o12345', '0x1a2b3c'];\n\n      var expected = lodashStable.map(numbers, function(n) {\n        return lodashStable.times(8, lodashStable.constant(n));\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        var upper = value.toUpperCase();\n        return lodashStable.flatMap(transforms, function(mod) {\n          return [func(mod(value)), func(Object(mod(value))), func(mod(upper)), func(Object(mod(upper)))];\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert invalid binary/octal strings to `' + (isToNumber ? 'NaN' : '0') + '`', function(assert) {\n      assert.expect(1);\n\n      var transforms = [identity, pad, positive, negative],\n          values = ['0b', '0o', '0x', '0b1010102', '0o123458', '0x1a2b3x'];\n\n      var expected = lodashStable.map(values, function(n) {\n        return lodashStable.times(8, lodashStable.constant(isToNumber ? NaN : 0));\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return lodashStable.flatMap(transforms, function(mod) {\n          return [func(mod(value)), func(Object(mod(value)))];\n        });\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert symbols to `' + (isToNumber ? 'NaN' : '0') + '`', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        var object1 = Object(symbol),\n            object2 = Object(symbol),\n            values = [symbol, object1, object2],\n            expected = lodashStable.map(values, lodashStable.constant(isToNumber ? NaN : 0));\n\n        object2.valueOf = undefined;\n        var actual = lodashStable.map(values, func);\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert empty values to `0` or `NaN`', function(assert) {\n      assert.expect(1);\n\n      var values = falsey.concat(whitespace);\n\n      var expected = lodashStable.map(values, function(value) {\n        return (isToNumber && value !== whitespace) ? Number(value) : 0;\n      });\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? func(value) : func();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce objects to numbers', function(assert) {\n      assert.expect(1);\n\n      var values = [\n        {},\n        [],\n        [1],\n        [1, 2],\n        { 'valueOf': '1.1' },\n        { 'valueOf': '1.1', 'toString': lodashStable.constant('2.2') },\n        { 'valueOf': lodashStable.constant('1.1'), 'toString': '2.2' },\n        { 'valueOf': lodashStable.constant('1.1'), 'toString': lodashStable.constant('2.2') },\n        { 'valueOf': lodashStable.constant('-0x1a2b3c') },\n        { 'toString': lodashStable.constant('-0x1a2b3c') },\n        { 'valueOf': lodashStable.constant('0o12345') },\n        { 'toString': lodashStable.constant('0o12345') },\n        { 'valueOf': lodashStable.constant('0b101010') },\n        { 'toString': lodashStable.constant('0b101010') }\n      ];\n\n      var expected = [\n        NaN,  0,   1,   NaN,\n        NaN,  2.2, 1.1, 1.1,\n        NaN,  NaN,\n        5349, 5349,\n        42,   42\n      ];\n\n      if (isToFinite) {\n        expected = [\n          0,    0,    1,   0,\n          0,    2.2,  1.1, 1.1,\n          0,    0,\n          5349, 5349,\n          42,   42\n        ];\n      }\n      else if (!isToNumber) {\n        expected = [\n          0,    0,    1, 0,\n          0,    2,    1, 1,\n          0,    0,\n          5349, 5349,\n          42,   42\n        ];\n      }\n      var actual = lodashStable.map(values, func);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toPairs');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.entries, _.toPairs);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toPairsIn');\n\n  (function() {\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.entriesIn, _.toPairsIn);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('toPairs methods');\n\n  lodashStable.each(['toPairs', 'toPairsIn'], function(methodName) {\n    var func = _[methodName],\n        isToPairs = methodName == 'toPairs';\n\n    QUnit.test('`_.' + methodName + '` should create an array of string keyed-value pairs', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2 },\n          actual = lodashStable.sortBy(func(object), 0);\n\n      assert.deepEqual(actual, [['a', 1], ['b', 2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isToPairs ? 'not ' : '') + 'include inherited string keyed property values', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var expected = isToPairs ? [['a', 1]] : [['a', 1], ['b', 2]],\n          actual = lodashStable.sortBy(func(new Foo), 0);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert objects with a `length` property', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'a', '1': 'b', 'length': 2 },\n          actual = lodashStable.sortBy(func(object), 0);\n\n      assert.deepEqual(actual, [['0', 'a'], ['1', 'b'], ['length', 2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert maps', function(assert) {\n      assert.expect(1);\n\n      if (Map) {\n        var map = new Map;\n        map.set('a', 1);\n        map.set('b', 2);\n        assert.deepEqual(func(map), [['a', 1], ['b', 2]]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert sets', function(assert) {\n      assert.expect(1);\n\n      if (Set) {\n        var set = new Set;\n        set.add(1);\n        set.add(2);\n        assert.deepEqual(func(set), [[1, 1], [2, 2]]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should convert strings', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each(['xo', Object('xo')], function(string) {\n        var actual = lodashStable.sortBy(func(string), 0);\n        assert.deepEqual(actual, [['0', 'x'], ['1', 'o']]);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toPath');\n\n  (function() {\n    QUnit.test('should convert a string to a path', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.toPath('a.b.c'), ['a', 'b', 'c']);\n      assert.deepEqual(_.toPath('a[0].b.c'), ['a', '0', 'b', 'c']);\n    });\n\n    QUnit.test('should coerce array elements to strings', function(assert) {\n      assert.expect(4);\n\n      var array = ['a', 'b', 'c'];\n\n      lodashStable.each([array, lodashStable.map(array, Object)], function(value) {\n        var actual = _.toPath(value);\n        assert.deepEqual(actual, array);\n        assert.notStrictEqual(actual, array);\n      });\n    });\n\n    QUnit.test('should return new path array', function(assert) {\n      assert.expect(1);\n\n      assert.notStrictEqual(_.toPath('a.b.c'), _.toPath('a.b.c'));\n    });\n\n    QUnit.test('should not coerce symbols to strings', function(assert) {\n      assert.expect(4);\n\n      if (Symbol) {\n        var object = Object(symbol);\n        lodashStable.each([symbol, object, [symbol], [object]], function(value) {\n          var actual = _.toPath(value);\n          assert.ok(lodashStable.isSymbol(actual[0]));\n        });\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should handle complex paths', function(assert) {\n      assert.expect(1);\n\n      var actual = _.toPath('a[-1.23][\"[\\\\\"b\\\\\"]\"].c[\\'[\\\\\\'d\\\\\\']\\'][\\ne\\n][f].g');\n      assert.deepEqual(actual, ['a', '-1.23', '[\"b\"]', 'c', \"['d']\", '\\ne\\n', 'f', 'g']);\n    });\n\n    QUnit.test('should handle consecutive empty brackets and dots', function(assert) {\n      assert.expect(12);\n\n      var expected = ['', 'a'];\n      assert.deepEqual(_.toPath('.a'), expected);\n      assert.deepEqual(_.toPath('[].a'), expected);\n\n      expected = ['', '', 'a'];\n      assert.deepEqual(_.toPath('..a'), expected);\n      assert.deepEqual(_.toPath('[][].a'), expected);\n\n      expected = ['a', '', 'b'];\n      assert.deepEqual(_.toPath('a..b'), expected);\n      assert.deepEqual(_.toPath('a[].b'), expected);\n\n      expected = ['a', '', '', 'b'];\n      assert.deepEqual(_.toPath('a...b'), expected);\n      assert.deepEqual(_.toPath('a[][].b'), expected);\n\n      expected = ['a', ''];\n      assert.deepEqual(_.toPath('a.'), expected);\n      assert.deepEqual(_.toPath('a[]'), expected);\n\n      expected = ['a', '', ''];\n      assert.deepEqual(_.toPath('a..'), expected);\n      assert.deepEqual(_.toPath('a[][]'), expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toPlainObject');\n\n  (function() {\n    QUnit.test('should flatten inherited string keyed properties', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.b = 2;\n      }\n      Foo.prototype.c = 3;\n\n      var actual = lodashStable.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n      assert.deepEqual(actual, { 'a': 1, 'b': 2, 'c': 3 });\n    });\n\n    QUnit.test('should convert `arguments` objects to plain objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.toPlainObject(args),\n          expected = { '0': 1, '1': 2, '2': 3 };\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should convert arrays to plain objects', function(assert) {\n      assert.expect(1);\n\n      var actual = _.toPlainObject(['a', 'b', 'c']),\n          expected = { '0': 'a', '1': 'b', '2': 'c' };\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.toString');\n\n  (function() {\n    QUnit.test('should treat nullish values as empty strings', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubString);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.toString(value) : _.toString();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var values = [-0, Object(-0), 0, Object(0)],\n          expected = ['-0', '-0', '0', '0'],\n          actual = lodashStable.map(values, _.toString);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should preserve the sign of `0` in an array', function(assert) {\n      assert.expect(1);\n\n      var values = [-0, Object(-0), 0, Object(0)];\n      assert.deepEqual(_.toString(values), '-0,-0,0,0');\n    });\n\n    QUnit.test('should not error on symbols', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        try {\n          assert.strictEqual(_.toString(symbol), 'Symbol(a)');\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should not error on an array of symbols', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        try {\n          assert.strictEqual(_.toString([symbol]), 'Symbol(a)');\n        } catch (e) {\n          assert.ok(false, e.message);\n        }\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should return the `toString` result of the wrapped value', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _([1, 2, 3]);\n        assert.strictEqual(wrapped.toString(), '1,2,3');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.transform');\n\n  (function() {\n    function Foo() {\n      this.a = 1;\n      this.b = 2;\n      this.c = 3;\n    }\n\n    QUnit.test('should create an object with the same `[[Prototype]]` as `object` when `accumulator` is nullish', function(assert) {\n      assert.expect(4);\n\n      var accumulators = [, null, undefined],\n          object = new Foo,\n          expected = lodashStable.map(accumulators, stubTrue);\n\n      var iteratee = function(result, value, key) {\n        result[key] = square(value);\n      };\n\n      var mapper = function(accumulator, index) {\n        return index ? _.transform(object, iteratee, accumulator) : _.transform(object, iteratee);\n      };\n\n      var results = lodashStable.map(accumulators, mapper);\n\n      var actual = lodashStable.map(results, function(result) {\n        return result instanceof Foo;\n      });\n\n      assert.deepEqual(actual, expected);\n\n      expected = lodashStable.map(accumulators, lodashStable.constant({ 'a': 1, 'b': 4, 'c': 9 }));\n      actual = lodashStable.map(results, lodashStable.toPlainObject);\n\n      assert.deepEqual(actual, expected);\n\n      object = { 'a': 1, 'b': 2, 'c': 3 };\n      actual = lodashStable.map(accumulators, mapper);\n\n      assert.deepEqual(actual, expected);\n\n      object = [1, 2, 3];\n      expected = lodashStable.map(accumulators, lodashStable.constant([1, 4, 9]));\n      actual = lodashStable.map(accumulators, mapper);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should create regular arrays from typed arrays', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(typedArrays, stubTrue);\n\n      var actual = lodashStable.map(typedArrays, function(type) {\n        var Ctor = root[type],\n            array = Ctor ? new Ctor(new ArrayBuffer(24)) : [];\n\n        return lodashStable.isArray(_.transform(array, noop));\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should support an `accumulator` value', function(assert) {\n      assert.expect(6);\n\n      var values = [new Foo, [1, 2, 3], { 'a': 1, 'b': 2, 'c': 3 }],\n          expected = lodashStable.map(values, lodashStable.constant([1, 4, 9]));\n\n      var actual = lodashStable.map(values, function(value) {\n        return _.transform(value, function(result, value) {\n          result.push(square(value));\n        }, []);\n      });\n\n      assert.deepEqual(actual, expected);\n\n      var object = { 'a': 1, 'b': 4, 'c': 9 },\n      expected = [object, { '0': 1, '1': 4, '2': 9 }, object];\n\n      actual = lodashStable.map(values, function(value) {\n        return _.transform(value, function(result, value, key) {\n          result[key] = square(value);\n        }, {});\n      });\n\n      assert.deepEqual(actual, expected);\n\n      lodashStable.each([[], {}], function(accumulator) {\n        var actual = lodashStable.map(values, function(value) {\n          return _.transform(value, noop, accumulator);\n        });\n\n        assert.ok(lodashStable.every(actual, function(result) {\n          return result === accumulator;\n        }));\n\n        assert.strictEqual(_.transform(null, null, accumulator), accumulator);\n      });\n    });\n\n    QUnit.test('should treat sparse arrays as dense', function(assert) {\n      assert.expect(1);\n\n      var actual = _.transform(Array(1), function(result, value, index) {\n        result[index] = String(value);\n      });\n\n      assert.deepEqual(actual, ['undefined']);\n    });\n\n    QUnit.test('should work without an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      assert.ok(_.transform(new Foo) instanceof Foo);\n    });\n\n    QUnit.test('should ensure `object` is an object before using its `[[Prototype]]`', function(assert) {\n      assert.expect(2);\n\n      var Ctors = [Boolean, Boolean, Number, Number, Number, String, String],\n          values = [false, true, 0, 1, NaN, '', 'a'],\n          expected = lodashStable.map(values, stubObject);\n\n      var results = lodashStable.map(values, function(value) {\n        return _.transform(value);\n      });\n\n      assert.deepEqual(results, expected);\n\n      expected = lodashStable.map(values, stubFalse);\n\n      var actual = lodashStable.map(results, function(value, index) {\n        return value instanceof Ctors[index];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should ensure `object` constructor is a function before using its `[[Prototype]]`', function(assert) {\n      assert.expect(1);\n\n      Foo.prototype.constructor = null;\n      assert.notOk(_.transform(new Foo) instanceof Foo);\n      Foo.prototype.constructor = Foo;\n    });\n\n    QUnit.test('should create an empty object when given a falsey `object`', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubObject);\n\n      var actual = lodashStable.map(falsey, function(object, index) {\n        return index ? _.transform(object) : _.transform();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    lodashStable.each({\n      'array': [1, 2, 3],\n      'object': { 'a': 1, 'b': 2, 'c': 3 }\n    },\n    function(object, key) {\n      QUnit.test('should provide correct `iteratee` arguments when transforming an ' + key, function(assert) {\n        assert.expect(2);\n\n        var args;\n\n        _.transform(object, function() {\n          args || (args = slice.call(arguments));\n        });\n\n        var first = args[0];\n        if (key == 'array') {\n          assert.ok(first !== object && lodashStable.isArray(first));\n          assert.deepEqual(args, [first, 1, 0, object]);\n        } else {\n          assert.ok(first !== object && lodashStable.isPlainObject(first));\n          assert.deepEqual(args, [first, 1, 'a', object]);\n        }\n      });\n    });\n\n    QUnit.test('should create an object from the same realm as `object`', function(assert) {\n      assert.expect(1);\n\n      var objects = lodashStable.filter(realm, function(value) {\n        return lodashStable.isObject(value) && !lodashStable.isElement(value);\n      });\n\n      var expected = lodashStable.map(objects, stubTrue);\n\n      var actual = lodashStable.map(objects, function(object) {\n        var Ctor = object.constructor,\n            result = _.transform(object);\n\n        if (result === object) {\n          return false;\n        }\n        if (lodashStable.isTypedArray(object)) {\n          return result instanceof Array;\n        }\n        return result instanceof Ctor || !(new Ctor instanceof Ctor);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('trim methods');\n\n  lodashStable.each(['trim', 'trimStart', 'trimEnd'], function(methodName, index) {\n    var func = _[methodName],\n        parts = [];\n\n    if (index != 2) {\n      parts.push('leading');\n    }\n    if (index != 1) {\n      parts.push('trailing');\n    }\n    parts = parts.join(' and ');\n\n    QUnit.test('`_.' + methodName + '` should remove ' + parts + ' whitespace', function(assert) {\n      assert.expect(1);\n\n      var string = whitespace + 'a b c' + whitespace,\n          expected = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : '');\n\n      assert.strictEqual(func(string), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `string` to a string', function(assert) {\n      assert.expect(1);\n\n      var object = { 'toString': lodashStable.constant(whitespace + 'a b c' + whitespace) },\n          expected = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : '');\n\n      assert.strictEqual(func(object), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should remove ' + parts + ' `chars`', function(assert) {\n      assert.expect(1);\n\n      var string = '-_-a-b-c-_-',\n          expected = (index == 2 ? '-_-' : '') + 'a-b-c' + (index == 1 ? '-_-' : '');\n\n      assert.strictEqual(func(string, '_-'), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should coerce `chars` to a string', function(assert) {\n      assert.expect(1);\n\n      var object = { 'toString': lodashStable.constant('_-') },\n          string = '-_-a-b-c-_-',\n          expected = (index == 2 ? '-_-' : '') + 'a-b-c' + (index == 1 ? '-_-' : '');\n\n      assert.strictEqual(func(string, object), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an empty string for empty values and `chars`', function(assert) {\n      assert.expect(6);\n\n      lodashStable.each([null, '_-'], function(chars) {\n        assert.strictEqual(func(null, chars), '');\n        assert.strictEqual(func(undefined, chars), '');\n        assert.strictEqual(func('', chars), '');\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `undefined` or empty string values for `chars`', function(assert) {\n      assert.expect(2);\n\n      var string = whitespace + 'a b c' + whitespace,\n          expected = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : '');\n\n      assert.strictEqual(func(string, undefined), expected);\n      assert.strictEqual(func(string, ''), string);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var string = Object(whitespace + 'a b c' + whitespace),\n          trimmed = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : ''),\n          actual = lodashStable.map([string, string, string], func);\n\n      assert.deepEqual(actual, [trimmed, trimmed, trimmed]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var string = whitespace + 'a b c' + whitespace,\n            expected = (index == 2 ? whitespace : '') + 'a b c' + (index == 1 ? whitespace : '');\n\n        assert.strictEqual(_(string)[methodName](), expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var string = whitespace + 'a b c' + whitespace;\n        assert.ok(_(string).chain()[methodName]() instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('uncommon symbols');\n\n  (function() {\n    var flag = '\\ud83c\\uddfa\\ud83c\\uddf8',\n        heart = '\\u2764' + emojiVar,\n        hearts = '\\ud83d\\udc95',\n        comboGlyph = '\\ud83d\\udc68\\u200d' + heart + '\\u200d\\ud83d\\udc8B\\u200d\\ud83d\\udc68',\n        hashKeycap = '#' + emojiVar + '\\u20e3',\n        leafs = '\\ud83c\\udf42',\n        mic = '\\ud83c\\udf99',\n        noMic = mic + '\\u20e0',\n        raisedHand = '\\u270B' + emojiVar,\n        rocket = '\\ud83d\\ude80',\n        thumbsUp = '\\ud83d\\udc4d';\n\n    QUnit.test('should account for astral symbols', function(assert) {\n      assert.expect(34);\n\n      var allHearts = _.repeat(hearts, 10),\n          chars = hearts + comboGlyph,\n          string = 'A ' + leafs + ', ' + comboGlyph + ', and ' + rocket,\n          trimChars = comboGlyph + hearts,\n          trimString = trimChars + string + trimChars;\n\n      assert.strictEqual(_.camelCase(hearts + ' the ' + leafs), hearts + 'The' + leafs);\n      assert.strictEqual(_.camelCase(string), 'a' + leafs + comboGlyph + 'And' + rocket);\n      assert.strictEqual(_.capitalize(rocket), rocket);\n\n      assert.strictEqual(_.pad(string, 16), ' ' + string + '  ');\n      assert.strictEqual(_.padStart(string, 16), '   ' + string);\n      assert.strictEqual(_.padEnd(string, 16), string + '   ');\n\n      assert.strictEqual(_.pad(string, 16, chars), hearts + string + chars);\n      assert.strictEqual(_.padStart(string, 16, chars), chars + hearts + string);\n      assert.strictEqual(_.padEnd(string, 16, chars), string + chars + hearts);\n\n      assert.strictEqual(_.size(string), 13);\n      assert.deepEqual(_.split(string, ' '), ['A', leafs + ',', comboGlyph + ',', 'and', rocket]);\n      assert.deepEqual(_.split(string, ' ', 3), ['A', leafs + ',', comboGlyph + ',']);\n      assert.deepEqual(_.split(string, undefined), [string]);\n      assert.deepEqual(_.split(string, undefined, -1), [string]);\n      assert.deepEqual(_.split(string, undefined, 0), []);\n\n      var expected = ['A', ' ', leafs, ',', ' ', comboGlyph, ',', ' ', 'a', 'n', 'd', ' ', rocket];\n\n      assert.deepEqual(_.split(string, ''), expected);\n      assert.deepEqual(_.split(string, '', 6), expected.slice(0, 6));\n      assert.deepEqual(_.toArray(string), expected);\n\n      assert.strictEqual(_.trim(trimString, chars), string);\n      assert.strictEqual(_.trimStart(trimString, chars), string + trimChars);\n      assert.strictEqual(_.trimEnd(trimString, chars), trimChars + string);\n\n      assert.strictEqual(_.truncate(string, { 'length': 13 }), string);\n      assert.strictEqual(_.truncate(string, { 'length': 6 }), 'A ' + leafs + '...');\n\n      assert.deepEqual(_.words(string), ['A', leafs, comboGlyph, 'and', rocket]);\n      assert.deepEqual(_.toArray(hashKeycap), [hashKeycap]);\n      assert.deepEqual(_.toArray(noMic), [noMic]);\n\n      lodashStable.times(2, function(index) {\n        var separator = index ? RegExp(hearts) : hearts,\n            options = { 'length': 4, 'separator': separator },\n            actual = _.truncate(string, options);\n\n        assert.strictEqual(actual, 'A...');\n        assert.strictEqual(actual.length, 4);\n\n        actual = _.truncate(allHearts, options);\n        assert.strictEqual(actual, hearts + '...');\n        assert.strictEqual(actual.length, 5);\n      });\n    });\n\n    QUnit.test('should account for combining diacritical marks', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.map(comboMarks, function(mark) {\n        return 'o' + mark;\n      });\n\n      var expected = lodashStable.map(values, function(value) {\n        return [1, [value], [value]];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return [_.size(value), _.toArray(value), _.words(value)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should account for fitzpatrick modifiers', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.map(fitzModifiers, function(modifier) {\n        return thumbsUp + modifier;\n      });\n\n      var expected = lodashStable.map(values, function(value) {\n        return [1, [value], [value]];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return [_.size(value), _.toArray(value), _.words(value)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should account for regional symbols', function(assert) {\n      assert.expect(6);\n\n      var pair = flag.match(/\\ud83c[\\udde6-\\uddff]/g),\n          regionals = pair.join(' ');\n\n      assert.strictEqual(_.size(flag), 1);\n      assert.strictEqual(_.size(regionals), 3);\n\n      assert.deepEqual(_.toArray(flag), [flag]);\n      assert.deepEqual(_.toArray(regionals), [pair[0], ' ', pair[1]]);\n\n      assert.deepEqual(_.words(flag), [flag]);\n      assert.deepEqual(_.words(regionals), [pair[0], pair[1]]);\n    });\n\n    QUnit.test('should account for variation selectors', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.size(heart), 1);\n      assert.deepEqual(_.toArray(heart), [heart]);\n      assert.deepEqual(_.words(heart), [heart]);\n    });\n\n    QUnit.test('should account for variation selectors with fitzpatrick modifiers', function(assert) {\n      assert.expect(1);\n\n      var values = lodashStable.map(fitzModifiers, function(modifier) {\n        return raisedHand + modifier;\n      });\n\n      var expected = lodashStable.map(values, function(value) {\n        return [1, [value], [value]];\n      });\n\n      var actual = lodashStable.map(values, function(value) {\n        return [_.size(value), _.toArray(value), _.words(value)];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should match lone surrogates', function(assert) {\n      assert.expect(3);\n\n      var pair = hearts.split(''),\n          surrogates = pair[0] + ' ' + pair[1];\n\n      assert.strictEqual(_.size(surrogates), 3);\n      assert.deepEqual(_.toArray(surrogates), [pair[0], ' ', pair[1]]);\n      assert.deepEqual(_.words(surrogates), []);\n    });\n\n    QUnit.test('should match side by side fitzpatrick modifiers separately ', function(assert) {\n      assert.expect(1);\n\n      var string = fitzModifiers[0] + fitzModifiers[0];\n      assert.deepEqual(_.toArray(string), [fitzModifiers[0], fitzModifiers[0]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unary');\n\n  (function() {\n    function fn() {\n      return slice.call(arguments);\n    }\n\n    QUnit.test('should cap the number of arguments provided to `func`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(['6', '8', '10'], _.unary(parseInt));\n      assert.deepEqual(actual, [6, 8, 10]);\n    });\n\n    QUnit.test('should not force a minimum argument count', function(assert) {\n      assert.expect(1);\n\n      var capped = _.unary(fn);\n      assert.deepEqual(capped(), []);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(1);\n\n      var capped = _.unary(function(a, b) { return this; }),\n          object = { 'capped': capped };\n\n      assert.strictEqual(object.capped(), object);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unescape');\n\n  (function() {\n    var escaped = '&amp;&lt;&gt;&quot;&#39;/',\n        unescaped = '&<>\"\\'/';\n\n    escaped += escaped;\n    unescaped += unescaped;\n\n    QUnit.test('should unescape entities in order', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.unescape('&amp;lt;'), '&lt;');\n    });\n\n    QUnit.test('should unescape the proper entities', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.unescape(escaped), unescaped);\n    });\n\n    QUnit.test('should handle strings with nothing to unescape', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.unescape('abc'), 'abc');\n    });\n\n    QUnit.test('should unescape the same characters escaped by `_.escape`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(_.unescape(_.escape(unescaped)), unescaped);\n    });\n\n    lodashStable.each(['&#96;', '&#x2F;'], function(entity) {\n      QUnit.test('should not unescape the \"' + entity + '\" entity', function(assert) {\n        assert.expect(1);\n\n        assert.strictEqual(_.unescape(entity), entity);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('union methods');\n\n  lodashStable.each(['union', 'unionBy', 'unionWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the union of two arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2], [1, 2]);\n      assert.deepEqual(actual, [2, 1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the union of multiple arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2], [1, 2], [2, 3]);\n      assert.deepEqual(actual, [2, 1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should not flatten nested arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([1, 3, 2], [1, [5]], [2, [4]]);\n      assert.deepEqual(actual, [1, 3, 2, [5], [4]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore values that are not arrays or `arguments` objects', function(assert) {\n      assert.expect(3);\n\n      var array = [0];\n      assert.deepEqual(func(array, 3, { '0': 1 }, null), array);\n      assert.deepEqual(func(null, array, null, [2, 1]), [0, 2, 1]);\n      assert.deepEqual(func(array, null, args, null), [0, 1, 2, 3]);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unionBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.unionBy([2.1], [1.2, 2.3], Math.floor);\n      assert.deepEqual(actual, [2.1, 1.2]);\n\n      actual = _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 1 }, { 'x': 2 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.unionBy([2.1], [1.2, 2.3], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [2.1]);\n    });\n\n    QUnit.test('should output values from the first possible array', function(assert) {\n      assert.expect(1);\n\n      var actual = _.unionBy([{ 'x': 1, 'y': 1 }], [{ 'x': 1, 'y': 2 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 1, 'y': 1 }]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unionWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],\n          others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }],\n          actual = _.unionWith(objects, others, lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[0], objects[1], others[0]]);\n    });\n\n    QUnit.test('should output values from the first possible array', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 1 }],\n          others = [{ 'x': 1, 'y': 2 }];\n\n      var actual = _.unionWith(objects, others, function(a, b) {\n        return a.x == b.x;\n      });\n\n      assert.deepEqual(actual, [{ 'x': 1, 'y': 1 }]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('uniq methods');\n\n  lodashStable.each(['uniq', 'uniqBy', 'uniqWith', 'sortedUniq', 'sortedUniqBy'], function(methodName) {\n    var func = _[methodName],\n        isSorted = /^sorted/.test(methodName),\n        objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }, { 'a': 2 }, { 'a': 3 }, { 'a': 1 }];\n\n    if (isSorted) {\n      objects = _.sortBy(objects, 'a');\n    }\n    else {\n      QUnit.test('`_.' + methodName + '` should return unique values of an unsorted array', function(assert) {\n        assert.expect(1);\n\n        var array = [2, 1, 2];\n        assert.deepEqual(func(array), [2, 1]);\n      });\n    }\n    QUnit.test('`_.' + methodName + '` should return unique values of a sorted array', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 2];\n      assert.deepEqual(func(array), [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat object instances as unique', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(objects), objects);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat `-0` as `0`', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.map(func([-0, 0]), lodashStable.toString);\n      assert.deepEqual(actual, ['0']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should match `NaN`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func([NaN, NaN]), [NaN]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays', function(assert) {\n      assert.expect(1);\n\n      var largeArray = [],\n          expected = [0, {}, 'a'],\n          count = Math.ceil(LARGE_ARRAY_SIZE / expected.length);\n\n      lodashStable.each(expected, function(value) {\n        lodashStable.times(count, function() {\n          largeArray.push(value);\n        });\n      });\n\n      assert.deepEqual(func(largeArray), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of `-0` as `0`', function(assert) {\n      assert.expect(1);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n        return isEven(index) ? -0 : 0;\n      });\n\n      var actual = lodashStable.map(func(largeArray), lodashStable.toString);\n      assert.deepEqual(actual, ['0']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of boolean, `NaN`, and nullish values', function(assert) {\n      assert.expect(1);\n\n      var largeArray = [],\n          expected = [null, undefined, false, true, NaN],\n          count = Math.ceil(LARGE_ARRAY_SIZE / expected.length);\n\n      lodashStable.each(expected, function(value) {\n        lodashStable.times(count, function() {\n          largeArray.push(value);\n        });\n      });\n\n      assert.deepEqual(func(largeArray), expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of symbols', function(assert) {\n      assert.expect(1);\n\n      if (Symbol) {\n        var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, Symbol);\n        assert.deepEqual(func(largeArray), largeArray);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with large arrays of well-known symbols', function(assert) {\n      assert.expect(1);\n\n      // See http://www.ecma-international.org/ecma-262/6.0/#sec-well-known-symbols.\n      if (Symbol) {\n        var expected = [\n          Symbol.hasInstance, Symbol.isConcatSpreadable, Symbol.iterator,\n          Symbol.match, Symbol.replace, Symbol.search, Symbol.species,\n          Symbol.split, Symbol.toPrimitive, Symbol.toStringTag, Symbol.unscopables\n        ];\n\n        var largeArray = [],\n            count = Math.ceil(LARGE_ARRAY_SIZE / expected.length);\n\n        expected = lodashStable.map(expected, function(symbol) {\n          return symbol || {};\n        });\n\n        lodashStable.each(expected, function(value) {\n          lodashStable.times(count, function() {\n            largeArray.push(value);\n          });\n        });\n\n        assert.deepEqual(func(largeArray), expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should distinguish between numbers and numeric strings', function(assert) {\n      assert.expect(1);\n\n      var largeArray = [],\n          expected = ['2', 2, Object('2'), Object(2)],\n          count = Math.ceil(LARGE_ARRAY_SIZE / expected.length);\n\n      lodashStable.each(expected, function(value) {\n        lodashStable.times(count, function() {\n          largeArray.push(value);\n        });\n      });\n\n      assert.deepEqual(func(largeArray), expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.uniq');\n\n  (function() {\n    QUnit.test('should perform an unsorted uniq when used as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var array = [[2, 1, 2], [1, 2, 1]],\n          actual = lodashStable.map(array, lodashStable.uniq);\n\n      assert.deepEqual(actual, [[2, 1], [1, 2]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('uniqBy methods');\n\n  lodashStable.each(['uniqBy', 'sortedUniqBy'], function(methodName) {\n    var func = _[methodName],\n        isSorted = methodName == 'sortedUniqBy',\n        objects = [{ 'a': 2 }, { 'a': 3 }, { 'a': 1 }, { 'a': 2 }, { 'a': 3 }, { 'a': 1 }];\n\n    if (isSorted) {\n      objects = _.sortBy(objects, 'a');\n    }\n    QUnit.test('`_.' + methodName + '` should work with an `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var expected = isSorted ? [{ 'a': 1 }, { 'a': 2 }, { 'a': 3 }] : objects.slice(0, 3);\n\n      var actual = func(objects, function(object) {\n        return object.a;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work with large arrays', function(assert) {\n      assert.expect(2);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function() {\n        return [1, 2];\n      });\n\n      var actual = func(largeArray, String);\n      assert.strictEqual(actual[0], largeArray[0]);\n      assert.deepEqual(actual, [[1, 2]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      func(objects, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [objects[0]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `_.property` shorthands', function(assert) {\n      assert.expect(2);\n\n      var expected = isSorted ? [{ 'a': 1 }, { 'a': 2 }, { 'a': 3 }] : objects.slice(0, 3),\n          actual = func(objects, 'a');\n\n      assert.deepEqual(actual, expected);\n\n      var arrays = [[2], [3], [1], [2], [3], [1]];\n      if (isSorted) {\n        arrays = lodashStable.sortBy(arrays, 0);\n      }\n      expected = isSorted ? [[1], [2], [3]] : arrays.slice(0, 3);\n      actual = func(arrays, 0);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    lodashStable.each({\n      'an array': [0, 'a'],\n      'an object': { '0': 'a' },\n      'a number': 0,\n      'a string': '0'\n    },\n    function(iteratee, key) {\n      QUnit.test('`_.' + methodName + '` should work with ' + key + ' for `iteratee`', function(assert) {\n        assert.expect(1);\n\n        var actual = func([['a'], ['a'], ['b']], iteratee);\n        assert.deepEqual(actual, [['a'], ['b']]);\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.uniqWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }],\n          actual = _.uniqWith(objects, lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[0], objects[1]]);\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {\n        return isEven(index) ? -0 : 0;\n      });\n\n      var arrays = [[-0, 0], largeArray],\n          expected = lodashStable.map(arrays, lodashStable.constant(['-0']));\n\n      var actual = lodashStable.map(arrays, function(array) {\n        return lodashStable.map(_.uniqWith(array, lodashStable.eq), lodashStable.toString);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.uniqueId');\n\n  (function() {\n    QUnit.test('should generate unique ids', function(assert) {\n      assert.expect(1);\n\n      var actual = lodashStable.times(1000, function(assert) {\n        return _.uniqueId();\n      });\n\n      assert.strictEqual(lodashStable.uniq(actual).length, actual.length);\n    });\n\n    QUnit.test('should return a string value when not providing a `prefix`', function(assert) {\n      assert.expect(1);\n\n      assert.strictEqual(typeof _.uniqueId(), 'string');\n    });\n\n    QUnit.test('should coerce the prefix argument to a string', function(assert) {\n      assert.expect(1);\n\n      var actual = [_.uniqueId(3), _.uniqueId(2), _.uniqueId(1)];\n      assert.ok(/3\\d+,2\\d+,1\\d+/.test(actual));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unset');\n\n  (function() {\n    QUnit.test('should unset property values', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a', ['a']], function(path) {\n        var object = { 'a': 1, 'c': 2 };\n        assert.strictEqual(_.unset(object, path), true);\n        assert.deepEqual(object, { 'c': 2 });\n      });\n    });\n\n    QUnit.test('should preserve the sign of `0`', function(assert) {\n      assert.expect(1);\n\n      var props = [-0, Object(-0), 0, Object(0)],\n          expected = lodashStable.map(props, lodashStable.constant([true, false]));\n\n      var actual = lodashStable.map(props, function(key) {\n        var object = { '-0': 'a', '0': 'b' };\n        return [_.unset(object, key), lodashStable.toString(key) in object];\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should unset symbol keyed property values', function(assert) {\n      assert.expect(2);\n\n      if (Symbol) {\n        var object = {};\n        object[symbol] = 1;\n\n        assert.strictEqual(_.unset(object, symbol), true);\n        assert.notOk(symbol in object);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should unset deep property values', function(assert) {\n      assert.expect(4);\n\n      lodashStable.each(['a.b', ['a', 'b']], function(path) {\n        var object = { 'a': { 'b': null } };\n        assert.strictEqual(_.unset(object, path), true);\n        assert.deepEqual(object, { 'a': {} });\n      });\n    });\n\n    QUnit.test('should handle complex paths', function(assert) {\n      assert.expect(4);\n\n      var paths = [\n        'a[-1.23][\"[\\\\\"b\\\\\"]\"].c[\\'[\\\\\\'d\\\\\\']\\'][\\ne\\n][f].g',\n        ['a', '-1.23', '[\"b\"]', 'c', \"['d']\", '\\ne\\n', 'f', 'g']\n      ];\n\n      lodashStable.each(paths, function(path) {\n        var object = { 'a': { '-1.23': { '[\"b\"]': { 'c': { \"['d']\": { '\\ne\\n': { 'f': { 'g': 8 } } } } } } } };\n        assert.strictEqual(_.unset(object, path), true);\n        assert.notOk('g' in object.a[-1.23]['[\"b\"]'].c[\"['d']\"]['\\ne\\n'].f);\n      });\n    });\n\n    QUnit.test('should return `true` for nonexistent paths', function(assert) {\n      assert.expect(5);\n\n      var object = { 'a': { 'b': { 'c': null } } };\n\n      lodashStable.each(['z', 'a.z', 'a.b.z', 'a.b.c.z'], function(path) {\n        assert.strictEqual(_.unset(object, path), true);\n      });\n\n      assert.deepEqual(object, { 'a': { 'b': { 'c': null } } });\n    });\n\n    QUnit.test('should not error when `object` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [null, undefined],\n          expected = [[true, true], [true, true]];\n\n      var actual = lodashStable.map(values, function(value) {\n        try {\n          return [_.unset(value, 'a.b'), _.unset(value, ['a', 'b'])];\n        } catch (e) {\n          return e.message;\n        }\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should follow `path` over non-plain objects', function(assert) {\n      assert.expect(8);\n\n      var object = { 'a': '' },\n          paths = ['constructor.prototype.a', ['constructor', 'prototype', 'a']];\n\n      lodashStable.each(paths, function(path) {\n        numberProto.a = 1;\n\n        var actual = _.unset(0, path);\n        assert.strictEqual(actual, true);\n        assert.notOk('a' in numberProto);\n\n        delete numberProto.a;\n      });\n\n      lodashStable.each(['a.replace.b', ['a', 'replace', 'b']], function(path) {\n        stringProto.replace.b = 1;\n\n        var actual = _.unset(object, path);\n        assert.strictEqual(actual, true);\n        assert.notOk('a' in stringProto.replace);\n\n        delete stringProto.replace.b;\n      });\n    });\n\n    QUnit.test('should return `false` for non-configurable properties', function(assert) {\n      assert.expect(1);\n\n      var object = {};\n\n      if (!isStrict) {\n        defineProperty(object, 'a', {\n          'configurable': false,\n          'enumerable': true,\n          'writable': true,\n          'value': 1,\n        });\n        assert.strictEqual(_.unset(object, 'a'), false);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unzipWith');\n\n  (function() {\n    QUnit.test('should unzip arrays combining regrouped elements with `iteratee`', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 4], [2, 5], [3, 6]];\n\n      var actual = _.unzipWith(array, function(a, b, c) {\n        return a + b + c;\n      });\n\n      assert.deepEqual(actual, [6, 15]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.unzipWith([[1, 3, 5], [2, 4, 6]], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [1, 2]);\n    });\n\n    QUnit.test('should perform a basic unzip when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 3], [2, 4]],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant(_.unzip(array)));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.unzipWith(array, value) : _.unzipWith(array);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.updateWith');\n\n  (function() {\n    QUnit.test('should work with a `customizer` callback', function(assert) {\n      assert.expect(1);\n\n      var actual = _.updateWith({ '0': {} }, '[0][1][2]', stubThree, function(value) {\n        return lodashStable.isObject(value) ? undefined : {};\n      });\n\n      assert.deepEqual(actual, { '0': { '1': { '2': 3 } } });\n    });\n\n    QUnit.test('should work with a `customizer` that returns `undefined`', function(assert) {\n      assert.expect(1);\n\n      var actual = _.updateWith({}, 'a[0].b.c', stubFour, noop);\n      assert.deepEqual(actual, { 'a': [{ 'b': { 'c': 4 } }] });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('update methods');\n\n  lodashStable.each(['update', 'updateWith'], function(methodName) {\n    var func = _[methodName],\n        oldValue = 1;\n\n    QUnit.test('`_.' + methodName + '` should invoke `updater` with the value on `path` of `object`', function(assert) {\n      assert.expect(4);\n\n      var object = { 'a': [{ 'b': { 'c': oldValue } }] },\n          expected = oldValue + 1;\n\n      lodashStable.each(['a[0].b.c', ['a', '0', 'b', 'c']], function(path) {\n        func(object, path, function(n) {\n          assert.strictEqual(n, oldValue);\n          return ++n;\n        });\n\n        assert.strictEqual(object.a[0].b.c, expected);\n        object.a[0].b.c = oldValue;\n      });\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.upperCase');\n\n  (function() {\n    QUnit.test('should uppercase as space-separated words', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.upperCase('--foo-bar--'), 'FOO BAR');\n      assert.strictEqual(_.upperCase('fooBar'), 'FOO BAR');\n      assert.strictEqual(_.upperCase('__foo_bar__'), 'FOO BAR');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.upperFirst');\n\n  (function() {\n    QUnit.test('should uppercase only the first character', function(assert) {\n      assert.expect(3);\n\n      assert.strictEqual(_.upperFirst('fred'), 'Fred');\n      assert.strictEqual(_.upperFirst('Fred'), 'Fred');\n      assert.strictEqual(_.upperFirst('FRED'), 'FRED');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('values methods');\n\n  lodashStable.each(['values', 'valuesIn'], function(methodName) {\n    var func = _[methodName],\n        isValues = methodName == 'values';\n\n    QUnit.test('`_.' + methodName + '` should get string keyed values of `object`', function(assert) {\n      assert.expect(1);\n\n      var object = { 'a': 1, 'b': 2 },\n          actual = func(object).sort();\n\n      assert.deepEqual(actual, [1, 2]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with an object that has a `length` property', function(assert) {\n      assert.expect(1);\n\n      var object = { '0': 'a', '1': 'b', 'length': 2 },\n          actual = func(object).sort();\n\n      assert.deepEqual(actual, [2, 'a', 'b']);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isValues ? 'not ' : '') + 'include inherited string keyed property values', function(assert) {\n      assert.expect(1);\n\n      function Foo() {\n        this.a = 1;\n      }\n      Foo.prototype.b = 2;\n\n      var expected = isValues ? [1] : [1, 2],\n          actual = func(new Foo).sort();\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var values = [args, strictArgs],\n          expected = lodashStable.map(values, lodashStable.constant([1, 2, 3]));\n\n      var actual = lodashStable.map(values, function(value) {\n        return func(value).sort();\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.without');\n\n  (function() {\n    QUnit.test('should return the difference of values', function(assert) {\n      assert.expect(1);\n\n      var actual = _.without([2, 1, 2, 3], 1, 2);\n      assert.deepEqual(actual, [3]);\n    });\n\n    QUnit.test('should use strict equality to determine the values to reject', function(assert) {\n      assert.expect(2);\n\n      var object1 = { 'a': 1 },\n          object2 = { 'b': 2 },\n          array = [object1, object2];\n\n      assert.deepEqual(_.without(array, { 'a': 1 }), array);\n      assert.deepEqual(_.without(array, object1), [object2]);\n    });\n\n    QUnit.test('should remove all occurrences of each value from an array', function(assert) {\n      assert.expect(1);\n\n      var array = [1, 2, 3, 1, 2, 3];\n      assert.deepEqual(_.without(array, 1, 2), [3, 3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.words');\n\n  (function() {\n    QUnit.test('should match words containing Latin Unicode letters', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(burredLetters, function(letter) {\n        return [letter];\n      });\n\n      var actual = lodashStable.map(burredLetters, function(letter) {\n        return _.words(letter);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should support a `pattern`', function(assert) {\n      assert.expect(2);\n\n      assert.deepEqual(_.words('abcd', /ab|cd/g), ['ab', 'cd']);\n      assert.deepEqual(_.words('abcd', 'ab|cd'), ['ab']);\n    });\n\n    QUnit.test('should work with compound words', function(assert) {\n      assert.expect(12);\n\n      assert.deepEqual(_.words('12ft'), ['12', 'ft']);\n      assert.deepEqual(_.words('aeiouAreVowels'), ['aeiou', 'Are', 'Vowels']);\n      assert.deepEqual(_.words('enable 6h format'), ['enable', '6', 'h', 'format']);\n      assert.deepEqual(_.words('enable 24H format'), ['enable', '24', 'H', 'format']);\n      assert.deepEqual(_.words('isISO8601'), ['is', 'ISO', '8601']);\n      assert.deepEqual(_.words('LETTERSAeiouAreVowels'), ['LETTERS', 'Aeiou', 'Are', 'Vowels']);\n      assert.deepEqual(_.words('tooLegit2Quit'), ['too', 'Legit', '2', 'Quit']);\n      assert.deepEqual(_.words('walk500Miles'), ['walk', '500', 'Miles']);\n      assert.deepEqual(_.words('xhr2Request'), ['xhr', '2', 'Request']);\n      assert.deepEqual(_.words('XMLHttp'), ['XML', 'Http']);\n      assert.deepEqual(_.words('XmlHTTP'), ['Xml', 'HTTP']);\n      assert.deepEqual(_.words('XmlHttp'), ['Xml', 'Http']);\n    });\n\n    QUnit.test('should work with compound words containing diacritical marks', function(assert) {\n      assert.expect(3);\n\n      assert.deepEqual(_.words('LETTERS\u00c6iouAreVowels'), ['LETTERS', '\u00c6iou', 'Are', 'Vowels']);\n      assert.deepEqual(_.words('\u00e6iouAreVowels'), ['\u00e6iou', 'Are', 'Vowels']);\n      assert.deepEqual(_.words('\u00e6iou2Consonants'), ['\u00e6iou', '2', 'Consonants']);\n    });\n\n    QUnit.test('should not treat contractions as separate words', function(assert) {\n      assert.expect(4);\n\n      var postfixes = ['d', 'll', 'm', 're', 's', 't', 've'];\n\n      lodashStable.each([\"'\", '\\u2019'], function(apos) {\n        lodashStable.times(2, function(index) {\n          var actual = lodashStable.map(postfixes, function(postfix) {\n            var string = 'a b' + apos + postfix +  ' c';\n            return _.words(string[index ? 'toUpperCase' : 'toLowerCase']());\n          });\n\n          var expected = lodashStable.map(postfixes, function(postfix) {\n            var words = ['a', 'b' + apos + postfix, 'c'];\n            return lodashStable.map(words, function(word) {\n              return word[index ? 'toUpperCase' : 'toLowerCase']();\n            });\n          });\n\n          assert.deepEqual(actual, expected);\n        });\n      });\n    });\n\n    QUnit.test('should not treat ordinal numbers as separate words', function(assert) {\n      assert.expect(2);\n\n      var ordinals = ['1st', '2nd', '3rd', '4th'];\n\n      lodashStable.times(2, function(index) {\n        var expected = lodashStable.map(ordinals, function(ordinal) {\n          return [ordinal[index ? 'toUpperCase' : 'toLowerCase']()];\n        });\n\n        var actual = lodashStable.map(expected, function(words) {\n          return _.words(words[0]);\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n\n    QUnit.test('should not treat mathematical operators as words', function(assert) {\n      assert.expect(1);\n\n      var operators = ['\\xac', '\\xb1', '\\xd7', '\\xf7'],\n          expected = lodashStable.map(operators, stubArray),\n          actual = lodashStable.map(operators, _.words);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should not treat punctuation as words', function(assert) {\n      assert.expect(1);\n\n      var marks = [\n        '\\u2012', '\\u2013', '\\u2014', '\\u2015',\n        '\\u2024', '\\u2025', '\\u2026',\n        '\\u205d', '\\u205e'\n      ];\n\n      var expected = lodashStable.map(marks, stubArray),\n          actual = lodashStable.map(marks, _.words);\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should work as an iteratee for methods like `_.map`', function(assert) {\n      assert.expect(1);\n\n      var strings = lodashStable.map(['a', 'b', 'c'], Object),\n          actual = lodashStable.map(strings, _.words);\n\n      assert.deepEqual(actual, [['a'], ['b'], ['c']]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.wrap');\n\n  (function() {\n    QUnit.test('should create a wrapped function', function(assert) {\n      assert.expect(1);\n\n      var p = _.wrap(lodashStable.escape, function(func, text) {\n        return '<p>' + func(text) + '</p>';\n      });\n\n      assert.strictEqual(p('fred, barney, & pebbles'), '<p>fred, barney, &amp; pebbles</p>');\n    });\n\n    QUnit.test('should provide correct `wrapper` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      var wrapped = _.wrap(noop, function() {\n        args || (args = slice.call(arguments));\n      });\n\n      wrapped(1, 2, 3);\n      assert.deepEqual(args, [noop, 1, 2, 3]);\n    });\n\n    QUnit.test('should use `_.identity` when `wrapper` is nullish', function(assert) {\n      assert.expect(1);\n\n      var values = [, null, undefined],\n          expected = lodashStable.map(values, stubA);\n\n      var actual = lodashStable.map(values, function(value, index) {\n        var wrapped = index ? _.wrap('a', value) : _.wrap('a');\n        return wrapped('b', 'c');\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(1);\n\n      var p = _.wrap(lodashStable.escape, function(func) {\n        return '<p>' + func(this.text) + '</p>';\n      });\n\n      var object = { 'p': p, 'text': 'fred, barney, & pebbles' };\n      assert.strictEqual(object.p(), '<p>fred, barney, &amp; pebbles</p>');\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('xor methods');\n\n  lodashStable.each(['xor', 'xorBy', 'xorWith'], function(methodName) {\n    var func = _[methodName];\n\n    QUnit.test('`_.' + methodName + '` should return the symmetric difference of two arrays', function(assert) {\n      assert.expect(1);\n\n      var actual = func([2, 1], [2, 3]);\n      assert.deepEqual(actual, [1, 3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return the symmetric difference of multiple arrays', function(assert) {\n      assert.expect(2);\n\n      var actual = func([2, 1], [2, 3], [3, 4]);\n      assert.deepEqual(actual, [1, 4]);\n\n      actual = func([1, 2], [2, 1], [1, 2]);\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an empty array when comparing the same array', function(assert) {\n      assert.expect(1);\n\n      var array = [1],\n          actual = func(array, array, array);\n\n      assert.deepEqual(actual, []);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return an array of unique values', function(assert) {\n      assert.expect(2);\n\n      var actual = func([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]);\n      assert.deepEqual(actual, [1, 4]);\n\n      actual = func([1, 1]);\n      assert.deepEqual(actual, [1]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a new array when a single array is given', function(assert) {\n      assert.expect(1);\n\n      var array = [1];\n      assert.notStrictEqual(func(array), array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore individual secondary arguments', function(assert) {\n      assert.expect(1);\n\n      var array = [0];\n      assert.deepEqual(func(array, 3, null, { '0': 1 }), array);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore values that are not arrays or `arguments` objects', function(assert) {\n      assert.expect(3);\n\n      var array = [1, 2];\n      assert.deepEqual(func(array, 3, { '0': 1 }, null), array);\n      assert.deepEqual(func(null, array, null, [2, 3]), [1, 3]);\n      assert.deepEqual(func(array, null, args, null), [3]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should return a wrapped value when chaining', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _([1, 2, 3])[methodName]([5, 2, 1, 4]);\n        assert.ok(wrapped instanceof _);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('`_.' + methodName + '` should work when in a lazy sequence before `head` or `last`', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE + 1),\n            wrapped = _(array).slice(1)[methodName]([LARGE_ARRAY_SIZE, LARGE_ARRAY_SIZE + 1]);\n\n        var actual = lodashStable.map(['head', 'last'], function(methodName) {\n          return wrapped[methodName]();\n        });\n\n        assert.deepEqual(actual, [1, LARGE_ARRAY_SIZE + 1]);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.xorBy');\n\n  (function() {\n    QUnit.test('should accept an `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var actual = _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n      assert.deepEqual(actual, [1.2, 3.4]);\n\n      actual = _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n      assert.deepEqual(actual, [{ 'x': 2 }]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.xorBy([2.1, 1.2], [2.3, 3.4], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [2.3]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.xorWith');\n\n  (function() {\n    QUnit.test('should work with a `comparator`', function(assert) {\n      assert.expect(1);\n\n      var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],\n          others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }],\n          actual = _.xorWith(objects, others, lodashStable.isEqual);\n\n      assert.deepEqual(actual, [objects[1], others[0]]);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('zipObject methods');\n\n  lodashStable.each(['zipObject', 'zipObjectDeep'], function(methodName) {\n    var func = _[methodName],\n        object = { 'barney': 36, 'fred': 40 },\n        isDeep = methodName == 'zipObjectDeep';\n\n    QUnit.test('`_.' + methodName + '` should zip together key/value arrays into an object', function(assert) {\n      assert.expect(1);\n\n      var actual = func(['barney', 'fred'], [36, 40]);\n      assert.deepEqual(actual, object);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore extra `values`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(['a'], [1, 2]), { 'a': 1 });\n    });\n\n    QUnit.test('`_.' + methodName + '` should assign `undefined` values for extra `keys`', function(assert) {\n      assert.expect(1);\n\n      assert.deepEqual(func(['a', 'b'], [1]), { 'a': 1, 'b': undefined });\n    });\n\n    QUnit.test('`_.' + methodName + '` should ' + (isDeep ? '' : 'not ') + 'support deep paths', function(assert) {\n      assert.expect(2);\n\n      lodashStable.each(['a.b.c', ['a', 'b', 'c']], function(path, index) {\n        var expected = isDeep ? ({ 'a': { 'b': { 'c': 1 } } }) : (index ? { 'a,b,c': 1 } : { 'a.b.c': 1 });\n        assert.deepEqual(func([path], [1]), expected);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work in a lazy sequence', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var values = lodashStable.range(LARGE_ARRAY_SIZE),\n            props = lodashStable.map(values, function(value) { return 'key' + value; }),\n            actual = _(props)[methodName](values).map(square).filter(isEven).take().value();\n\n        assert.deepEqual(actual, _.take(_.filter(_.map(func(props, values), square), isEven)));\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.zipWith');\n\n  (function() {\n    QUnit.test('should zip arrays combining grouped elements with `iteratee`', function(assert) {\n      assert.expect(2);\n\n      var array1 = [1, 2, 3],\n          array2 = [4, 5, 6],\n          array3 = [7, 8, 9];\n\n      var actual = _.zipWith(array1, array2, array3, function(a, b, c) {\n        return a + b + c;\n      });\n\n      assert.deepEqual(actual, [12, 15, 18]);\n\n      var actual = _.zipWith(array1, [], function(a, b) {\n        return a + (b || 0);\n      });\n\n      assert.deepEqual(actual, [1, 2, 3]);\n    });\n\n    QUnit.test('should provide correct `iteratee` arguments', function(assert) {\n      assert.expect(1);\n\n      var args;\n\n      _.zipWith([1, 2], [3, 4], [5, 6], function() {\n        args || (args = slice.call(arguments));\n      });\n\n      assert.deepEqual(args, [1, 3, 5]);\n    });\n\n    QUnit.test('should perform a basic zip when `iteratee` is nullish', function(assert) {\n      assert.expect(1);\n\n      var array1 = [1, 2],\n          array2 = [3, 4],\n          values = [, null, undefined],\n          expected = lodashStable.map(values, lodashStable.constant(_.zip(array1, array2)));\n\n      var actual = lodashStable.map(values, function(value, index) {\n        return index ? _.zipWith(array1, array2, value) : _.zipWith(array1, array2);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash.unzip and lodash.zip');\n\n  lodashStable.each(['unzip', 'zip'], function(methodName, index) {\n    var func = _[methodName];\n    func = lodashStable.bind(index ? func.apply : func.call, func, null);\n\n    var object = {\n      'an empty array': [\n        [],\n        []\n      ],\n      '0-tuples': [\n        [[], []],\n        []\n      ],\n      '2-tuples': [\n        [['barney', 'fred'], [36, 40]],\n        [['barney', 36], ['fred', 40]]\n      ],\n      '3-tuples': [\n        [['barney', 'fred'], [36, 40], [false, true]],\n        [['barney', 36, false], ['fred', 40, true]]\n      ]\n    };\n\n    lodashStable.forOwn(object, function(pair, key) {\n      QUnit.test('`_.' + methodName + '` should work with ' + key, function(assert) {\n        assert.expect(2);\n\n        var actual = func(pair[0]);\n        assert.deepEqual(actual, pair[1]);\n        assert.deepEqual(func(actual), actual.length ? pair[0] : []);\n      });\n    });\n\n    QUnit.test('`_.' + methodName + '` should work with tuples of different lengths', function(assert) {\n      assert.expect(4);\n\n      var pair = [\n        [['barney', 36], ['fred', 40, false]],\n        [['barney', 'fred'], [36, 40], [undefined, false]]\n      ];\n\n      var actual = func(pair[0]);\n      assert.ok('0' in actual[2]);\n      assert.deepEqual(actual, pair[1]);\n\n      actual = func(actual);\n      assert.ok('2' in actual[0]);\n      assert.deepEqual(actual, [['barney', 36, undefined], ['fred', 40, false]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should treat falsey values as empty arrays', function(assert) {\n      assert.expect(1);\n\n      var expected = lodashStable.map(falsey, stubArray);\n\n      var actual = lodashStable.map(falsey, function(value) {\n        return func([value, value, value]);\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    QUnit.test('`_.' + methodName + '` should ignore values that are not arrays or `arguments` objects', function(assert) {\n      assert.expect(1);\n\n      var array = [[1, 2], [3, 4], null, undefined, { '0': 1 }];\n      assert.deepEqual(func(array), [[1, 3], [2, 4]]);\n    });\n\n    QUnit.test('`_.' + methodName + '` should support consuming its return value', function(assert) {\n      assert.expect(1);\n\n      var expected = [['barney', 'fred'], [36, 40]];\n      assert.deepEqual(func(func(func(func(expected)))), expected);\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).commit');\n\n  (function() {\n    QUnit.test('should execute the chained sequence and returns the wrapped result', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = [1],\n            wrapped = _(array).push(2).push(3);\n\n        assert.deepEqual(array, [1]);\n\n        var otherWrapper = wrapped.commit();\n        assert.ok(otherWrapper instanceof _);\n        assert.deepEqual(otherWrapper.value(), [1, 2, 3]);\n        assert.deepEqual(wrapped.value(), [1, 2, 3, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should track the `__chain__` value of a wrapper', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var wrapped = _([1]).chain().commit().head();\n        assert.ok(wrapped instanceof _);\n        assert.strictEqual(wrapped.value(), 1);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).next');\n\n  lodashStable.each([false, true], function(implicit) {\n    function chain(value) {\n      return implicit ? _(value) : _.chain(value);\n    }\n\n    var chainType = 'in an ' + (implicit ? 'implicit' : 'explict') + ' chain';\n\n    QUnit.test('should follow the iterator protocol ' + chainType, function(assert) {\n      assert.expect(3);\n\n      if (!isNpm) {\n        var wrapped = chain([1, 2]);\n\n        assert.deepEqual(wrapped.next(), { 'done': false, 'value': 1 });\n        assert.deepEqual(wrapped.next(), { 'done': false, 'value': 2 });\n        assert.deepEqual(wrapped.next(), { 'done': true,  'value': undefined });\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should act as an iterable ' + chainType, function(assert) {\n      assert.expect(2);\n\n      if (!isNpm && Symbol && Symbol.iterator) {\n        var array = [1, 2],\n            wrapped = chain(array);\n\n        assert.strictEqual(wrapped[Symbol.iterator](), wrapped);\n        assert.deepEqual(lodashStable.toArray(wrapped), array);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should use `_.toArray` to generate the iterable result ' + chainType, function(assert) {\n      assert.expect(3);\n\n      if (!isNpm && Array.from) {\n        var hearts = '\\ud83d\\udc95',\n            values = [[1], { 'a': 1 }, hearts];\n\n        lodashStable.each(values, function(value) {\n          var wrapped = chain(value);\n          assert.deepEqual(Array.from(wrapped), _.toArray(value));\n        });\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n\n    QUnit.test('should reset the iterator correctly ' + chainType, function(assert) {\n      assert.expect(4);\n\n      if (!isNpm && Symbol && Symbol.iterator) {\n        var array = [1, 2],\n            wrapped = chain(array);\n\n        assert.deepEqual(lodashStable.toArray(wrapped), array);\n        assert.deepEqual(lodashStable.toArray(wrapped), [], 'produces an empty array for exhausted iterator');\n\n        var other = wrapped.filter();\n        assert.deepEqual(lodashStable.toArray(other), array, 'reset for new chain segments');\n        assert.deepEqual(lodashStable.toArray(wrapped), [], 'iterator is still exhausted');\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should work in a lazy sequence ' + chainType, function(assert) {\n      assert.expect(3);\n\n      if (!isNpm && Symbol && Symbol.iterator) {\n        var array = lodashStable.range(LARGE_ARRAY_SIZE),\n            predicate = function(value) { values.push(value); return isEven(value); },\n            values = [],\n            wrapped = chain(array);\n\n        assert.deepEqual(lodashStable.toArray(wrapped), array);\n\n        wrapped = wrapped.filter(predicate);\n        assert.deepEqual(lodashStable.toArray(wrapped), _.filter(array, isEven), 'reset for new lazy chain segments');\n        assert.deepEqual(values, array, 'memoizes iterator values');\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).plant');\n\n  (function() {\n    QUnit.test('should clone the chained sequence planting `value` as the wrapped value', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array1 = [5, null, 3, null, 1],\n            array2 = [10, null, 8, null, 6],\n            wrapped1 = _(array1).thru(_.compact).map(square).takeRight(2).sort(),\n            wrapped2 = wrapped1.plant(array2);\n\n        assert.deepEqual(wrapped2.value(), [36, 64]);\n        assert.deepEqual(wrapped1.value(), [1, 9]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should clone `chainAll` settings', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var array1 = [2, 4],\n            array2 = [6, 8],\n            wrapped1 = _(array1).chain().map(square),\n            wrapped2 = wrapped1.plant(array2);\n\n        assert.deepEqual(wrapped2.head().value(), 36);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should reset iterator data on cloned sequences', function(assert) {\n      assert.expect(3);\n\n      if (!isNpm && Symbol && Symbol.iterator) {\n        var array1 = [2, 4],\n            array2 = [6, 8],\n            wrapped1 = _(array1).map(square);\n\n        assert.deepEqual(lodashStable.toArray(wrapped1), [4, 16]);\n        assert.deepEqual(lodashStable.toArray(wrapped1), []);\n\n        var wrapped2 = wrapped1.plant(array2);\n        assert.deepEqual(lodashStable.toArray(wrapped2), [36, 64]);\n      }\n      else {\n        skipAssert(assert, 3);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).pop');\n\n  (function() {\n    QUnit.test('should remove elements from the end of `array`', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var array = [1, 2],\n            wrapped = _(array);\n\n        assert.strictEqual(wrapped.pop(), 2);\n        assert.deepEqual(wrapped.value(), [1]);\n        assert.strictEqual(wrapped.pop(), 1);\n\n        var actual = wrapped.value();\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).pop() : _().pop();\n            return result === undefined;\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).push');\n\n  (function() {\n    QUnit.test('should append elements to `array`', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = [1],\n            wrapped = _(array).push(2, 3),\n            actual = wrapped.value();\n\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, [1, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).push(1).value() : _().push(1).value();\n            return lodashStable.eq(result, value);\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).shift');\n\n  (function() {\n    QUnit.test('should remove elements from the front of `array`', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var array = [1, 2],\n            wrapped = _(array);\n\n        assert.strictEqual(wrapped.shift(), 1);\n        assert.deepEqual(wrapped.value(), [2]);\n        assert.strictEqual(wrapped.shift(), 2);\n\n        var actual = wrapped.value();\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).shift() : _().shift();\n            return result === undefined;\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).sort');\n\n  (function() {\n    QUnit.test('should return the wrapped sorted `array`', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = [3, 1, 2],\n            wrapped = _(array).sort(),\n            actual = wrapped.value();\n\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, [1, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).sort().value() : _().sort().value();\n            return lodashStable.eq(result, value);\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).splice');\n\n  (function() {\n    QUnit.test('should support removing and inserting elements', function(assert) {\n      assert.expect(5);\n\n      if (!isNpm) {\n        var array = [1, 2],\n            wrapped = _(array);\n\n        assert.deepEqual(wrapped.splice(1, 1, 3).value(), [2]);\n        assert.deepEqual(wrapped.value(), [1, 3]);\n        assert.deepEqual(wrapped.splice(0, 2).value(), [1, 3]);\n\n        var actual = wrapped.value();\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, []);\n      }\n      else {\n        skipAssert(assert, 5);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).splice(0, 1).value() : _().splice(0, 1).value();\n            return lodashStable.isEqual(result, []);\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).unshift');\n\n  (function() {\n    QUnit.test('should prepend elements to `array`', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var array = [3],\n            wrapped = _(array).unshift(1, 2),\n            actual = wrapped.value();\n\n        assert.strictEqual(actual, array);\n        assert.deepEqual(actual, [1, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var expected = lodashStable.map(falsey, stubTrue);\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          try {\n            var result = index ? _(value).unshift(1).value() : _().unshift(1).value();\n            return lodashStable.eq(result, value);\n          } catch (e) {}\n        });\n\n        assert.deepEqual(actual, expected);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...).value');\n\n  (function() {\n    QUnit.test('should execute the chained sequence and extract the unwrapped value', function(assert) {\n      assert.expect(4);\n\n      if (!isNpm) {\n        var array = [1],\n            wrapped = _(array).push(2).push(3);\n\n        assert.deepEqual(array, [1]);\n        assert.deepEqual(wrapped.value(), [1, 2, 3]);\n        assert.deepEqual(wrapped.value(), [1, 2, 3, 2, 3]);\n        assert.deepEqual(array, [1, 2, 3, 2, 3]);\n      }\n      else {\n        skipAssert(assert, 4);\n      }\n    });\n\n    QUnit.test('should return the `valueOf` result of the wrapped value', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm) {\n        var wrapped = _(123);\n        assert.strictEqual(Number(wrapped), 123);\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should stringify the wrapped value when used by `JSON.stringify`', function(assert) {\n      assert.expect(1);\n\n      if (!isNpm && JSON) {\n        var wrapped = _([1, 2, 3]);\n        assert.strictEqual(JSON.stringify(wrapped), '[1,2,3]');\n      }\n      else {\n        skipAssert(assert);\n      }\n    });\n\n    QUnit.test('should be aliased', function(assert) {\n      assert.expect(2);\n\n      if (!isNpm) {\n        var expected = _.prototype.value;\n        assert.strictEqual(_.prototype.toJSON, expected);\n        assert.strictEqual(_.prototype.valueOf, expected);\n      }\n      else {\n        skipAssert(assert, 2);\n      }\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...) methods that return the wrapped modified array');\n\n  (function() {\n    var funcs = [\n      'push',\n      'reverse',\n      'sort',\n      'unshift'\n    ];\n\n    lodashStable.each(funcs, function(methodName) {\n      QUnit.test('`_(...).' + methodName + '` should return a new wrapper', function(assert) {\n        assert.expect(2);\n\n        if (!isNpm) {\n          var array = [1, 2, 3],\n              wrapped = _(array),\n              actual = wrapped[methodName]();\n\n          assert.ok(actual instanceof _);\n          assert.notStrictEqual(actual, wrapped);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...) methods that return new wrapped values');\n\n  (function() {\n    var funcs = [\n      'castArray',\n      'concat',\n      'difference',\n      'differenceBy',\n      'differenceWith',\n      'intersection',\n      'intersectionBy',\n      'intersectionWith',\n      'pull',\n      'pullAll',\n      'pullAt',\n      'sampleSize',\n      'shuffle',\n      'slice',\n      'splice',\n      'split',\n      'toArray',\n      'union',\n      'unionBy',\n      'unionWith',\n      'uniq',\n      'uniqBy',\n      'uniqWith',\n      'words',\n      'xor',\n      'xorBy',\n      'xorWith'\n    ];\n\n    lodashStable.each(funcs, function(methodName) {\n      QUnit.test('`_(...).' + methodName + '` should return a new wrapped value', function(assert) {\n        assert.expect(2);\n\n        if (!isNpm) {\n          var value = methodName == 'split' ? 'abc' : [1, 2, 3],\n              wrapped = _(value),\n              actual = wrapped[methodName]();\n\n          assert.ok(actual instanceof _);\n          assert.notStrictEqual(actual, wrapped);\n        }\n        else {\n          skipAssert(assert, 2);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash(...) methods that return unwrapped values');\n\n  (function() {\n    var funcs = [\n      'add',\n      'camelCase',\n      'capitalize',\n      'ceil',\n      'clone',\n      'deburr',\n      'defaultTo',\n      'divide',\n      'endsWith',\n      'escape',\n      'escapeRegExp',\n      'every',\n      'find',\n      'floor',\n      'has',\n      'hasIn',\n      'head',\n      'includes',\n      'isArguments',\n      'isArray',\n      'isArrayBuffer',\n      'isArrayLike',\n      'isBoolean',\n      'isBuffer',\n      'isDate',\n      'isElement',\n      'isEmpty',\n      'isEqual',\n      'isError',\n      'isFinite',\n      'isFunction',\n      'isInteger',\n      'isMap',\n      'isNaN',\n      'isNative',\n      'isNil',\n      'isNull',\n      'isNumber',\n      'isObject',\n      'isObjectLike',\n      'isPlainObject',\n      'isRegExp',\n      'isSafeInteger',\n      'isSet',\n      'isString',\n      'isUndefined',\n      'isWeakMap',\n      'isWeakSet',\n      'join',\n      'kebabCase',\n      'last',\n      'lowerCase',\n      'lowerFirst',\n      'max',\n      'maxBy',\n      'min',\n      'minBy',\n      'multiply',\n      'nth',\n      'pad',\n      'padEnd',\n      'padStart',\n      'parseInt',\n      'pop',\n      'random',\n      'reduce',\n      'reduceRight',\n      'repeat',\n      'replace',\n      'round',\n      'sample',\n      'shift',\n      'size',\n      'snakeCase',\n      'some',\n      'startCase',\n      'startsWith',\n      'subtract',\n      'sum',\n      'toFinite',\n      'toInteger',\n      'toLower',\n      'toNumber',\n      'toSafeInteger',\n      'toString',\n      'toUpper',\n      'trim',\n      'trimEnd',\n      'trimStart',\n      'truncate',\n      'unescape',\n      'upperCase',\n      'upperFirst'\n    ];\n\n    lodashStable.each(funcs, function(methodName) {\n      QUnit.test('`_(...).' + methodName + '` should return an unwrapped value when implicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          var actual = _()[methodName]();\n          assert.notOk(actual instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n\n      QUnit.test('`_(...).' + methodName + '` should return a wrapped value when explicitly chaining', function(assert) {\n        assert.expect(1);\n\n        if (!isNpm) {\n          var actual = _().chain()[methodName]();\n          assert.ok(actual instanceof _);\n        }\n        else {\n          skipAssert(assert);\n        }\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('\"Arrays\" category methods');\n\n  (function() {\n    var args = toArgs([1, null, [3], null, 5]),\n        sortedArgs = toArgs([1, [3], 5, null, null]),\n        array = [1, 2, 3, 4, 5, 6];\n\n    QUnit.test('should work with `arguments` objects', function(assert) {\n      assert.expect(30);\n\n      function message(methodName) {\n        return '`_.' + methodName + '` should work with `arguments` objects';\n      }\n\n      assert.deepEqual(_.difference(args, [null]), [1, [3], 5], message('difference'));\n      assert.deepEqual(_.difference(array, args), [2, 3, 4, 6], '_.difference should work with `arguments` objects as secondary arguments');\n\n      assert.deepEqual(_.union(args, [null, 6]), [1, null, [3], 5, 6], message('union'));\n      assert.deepEqual(_.union(array, args), array.concat([null, [3]]), '_.union should work with `arguments` objects as secondary arguments');\n\n      assert.deepEqual(_.compact(args), [1, [3], 5], message('compact'));\n      assert.deepEqual(_.drop(args, 3), [null, 5], message('drop'));\n      assert.deepEqual(_.dropRight(args, 3), [1, null], message('dropRight'));\n      assert.deepEqual(_.dropRightWhile(args,identity), [1, null, [3], null], message('dropRightWhile'));\n      assert.deepEqual(_.dropWhile(args,identity), [null, [3], null, 5], message('dropWhile'));\n      assert.deepEqual(_.findIndex(args, identity), 0, message('findIndex'));\n      assert.deepEqual(_.findLastIndex(args, identity), 4, message('findLastIndex'));\n      assert.deepEqual(_.flatten(args), [1, null, 3, null, 5], message('flatten'));\n      assert.deepEqual(_.head(args), 1, message('head'));\n      assert.deepEqual(_.indexOf(args, 5), 4, message('indexOf'));\n      assert.deepEqual(_.initial(args), [1, null, [3], null], message('initial'));\n      assert.deepEqual(_.intersection(args, [1]), [1], message('intersection'));\n      assert.deepEqual(_.last(args), 5, message('last'));\n      assert.deepEqual(_.lastIndexOf(args, 1), 0, message('lastIndexOf'));\n      assert.deepEqual(_.sortedIndex(sortedArgs, 6), 3, message('sortedIndex'));\n      assert.deepEqual(_.sortedIndexOf(sortedArgs, 5), 2, message('sortedIndexOf'));\n      assert.deepEqual(_.sortedLastIndex(sortedArgs, 5), 3, message('sortedLastIndex'));\n      assert.deepEqual(_.sortedLastIndexOf(sortedArgs, 1), 0, message('sortedLastIndexOf'));\n      assert.deepEqual(_.tail(args, 4), [null, [3], null, 5], message('tail'));\n      assert.deepEqual(_.take(args, 2), [1, null], message('take'));\n      assert.deepEqual(_.takeRight(args, 1), [5], message('takeRight'));\n      assert.deepEqual(_.takeRightWhile(args, identity), [5], message('takeRightWhile'));\n      assert.deepEqual(_.takeWhile(args, identity), [1], message('takeWhile'));\n      assert.deepEqual(_.uniq(args), [1, null, [3], 5], message('uniq'));\n      assert.deepEqual(_.without(args, null), [1, [3], 5], message('without'));\n      assert.deepEqual(_.zip(args, args), [[1, 1], [null, null], [[3], [3]], [null, null], [5, 5]], message('zip'));\n    });\n\n    QUnit.test('should accept falsey primary arguments', function(assert) {\n      assert.expect(4);\n\n      function message(methodName) {\n        return '`_.' + methodName + '` should accept falsey primary arguments';\n      }\n\n      assert.deepEqual(_.difference(null, array), [], message('difference'));\n      assert.deepEqual(_.intersection(null, array), [], message('intersection'));\n      assert.deepEqual(_.union(null, array), array, message('union'));\n      assert.deepEqual(_.xor(null, array), array, message('xor'));\n    });\n\n    QUnit.test('should accept falsey secondary arguments', function(assert) {\n      assert.expect(3);\n\n      function message(methodName) {\n        return '`_.' + methodName + '` should accept falsey secondary arguments';\n      }\n\n      assert.deepEqual(_.difference(array, null), array, message('difference'));\n      assert.deepEqual(_.intersection(array, null), [], message('intersection'));\n      assert.deepEqual(_.union(array, null), array, message('union'));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('\"Strings\" category methods');\n\n  (function() {\n    var stringMethods = [\n      'camelCase',\n      'capitalize',\n      'escape',\n      'kebabCase',\n      'lowerCase',\n      'lowerFirst',\n      'pad',\n      'padEnd',\n      'padStart',\n      'repeat',\n      'snakeCase',\n      'toLower',\n      'toUpper',\n      'trim',\n      'trimEnd',\n      'trimStart',\n      'truncate',\n      'unescape',\n      'upperCase',\n      'upperFirst'\n    ];\n\n    lodashStable.each(stringMethods, function(methodName) {\n      var func = _[methodName];\n\n      QUnit.test('`_.' + methodName + '` should return an empty string for empty values', function(assert) {\n        assert.expect(1);\n\n        var values = [, null, undefined, ''],\n            expected = lodashStable.map(values, stubString);\n\n        var actual = lodashStable.map(values, function(value, index) {\n          return index ? func(value) : func();\n        });\n\n        assert.deepEqual(actual, expected);\n      });\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.module('lodash methods');\n\n  (function() {\n    var allMethods = lodashStable.reject(_.functions(_).sort(), function(methodName) {\n      return lodashStable.startsWith(methodName, '_');\n    });\n\n    var checkFuncs = [\n      'after',\n      'ary',\n      'before',\n      'bind',\n      'curry',\n      'curryRight',\n      'debounce',\n      'defer',\n      'delay',\n      'flip',\n      'flow',\n      'flowRight',\n      'memoize',\n      'negate',\n      'once',\n      'partial',\n      'partialRight',\n      'rearg',\n      'rest',\n      'spread',\n      'throttle',\n      'unary'\n    ];\n\n    var noBinding = [\n      'flip',\n      'memoize',\n      'negate',\n      'once',\n      'overArgs',\n      'partial',\n      'partialRight',\n      'rearg',\n      'rest',\n      'spread'\n    ];\n\n    var rejectFalsey = [\n      'tap',\n      'thru'\n    ].concat(checkFuncs);\n\n    var returnArrays = [\n      'at',\n      'chunk',\n      'compact',\n      'difference',\n      'drop',\n      'filter',\n      'flatten',\n      'functions',\n      'initial',\n      'intersection',\n      'invokeMap',\n      'keys',\n      'map',\n      'orderBy',\n      'pull',\n      'pullAll',\n      'pullAt',\n      'range',\n      'rangeRight',\n      'reject',\n      'remove',\n      'shuffle',\n      'sortBy',\n      'tail',\n      'take',\n      'times',\n      'toArray',\n      'toPairs',\n      'toPairsIn',\n      'union',\n      'uniq',\n      'values',\n      'without',\n      'xor',\n      'zip'\n    ];\n\n    var acceptFalsey = lodashStable.difference(allMethods, rejectFalsey);\n\n    QUnit.test('should accept falsey arguments', function(assert) {\n      assert.expect(316);\n\n      var arrays = lodashStable.map(falsey, stubArray);\n\n      lodashStable.each(acceptFalsey, function(methodName) {\n        var expected = arrays,\n            func = _[methodName];\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          return index ? func(value) : func();\n        });\n\n        if (methodName == 'noConflict') {\n          root._ = oldDash;\n        }\n        else if (methodName == 'pull' || methodName == 'pullAll') {\n          expected = falsey;\n        }\n        if (lodashStable.includes(returnArrays, methodName) && methodName != 'sample') {\n          assert.deepEqual(actual, expected, '_.' + methodName + ' returns an array');\n        }\n        assert.ok(true, '`_.' + methodName + '` accepts falsey arguments');\n      });\n\n      // Skip tests for missing methods of modularized builds.\n      lodashStable.each(['chain', 'noConflict', 'runInContext'], function(methodName) {\n        if (!_[methodName]) {\n          skipAssert(assert);\n        }\n      });\n    });\n\n    QUnit.test('should return an array', function(assert) {\n      assert.expect(70);\n\n      var array = [1, 2, 3];\n\n      lodashStable.each(returnArrays, function(methodName) {\n        var actual,\n            func = _[methodName];\n\n        switch (methodName) {\n          case 'invokeMap':\n            actual = func(array, 'toFixed');\n            break;\n          case 'sample':\n            actual = func(array, 1);\n            break;\n          default:\n            actual = func(array);\n        }\n        assert.ok(lodashStable.isArray(actual), '_.' + methodName + ' returns an array');\n\n        var isPull = methodName == 'pull' || methodName == 'pullAll';\n        assert.strictEqual(actual === array, isPull, '_.' + methodName + ' should ' + (isPull ? '' : 'not ') + 'return the given array');\n      });\n    });\n\n    QUnit.test('should throw an error for falsey arguments', function(assert) {\n      assert.expect(24);\n\n      lodashStable.each(rejectFalsey, function(methodName) {\n        var expected = lodashStable.map(falsey, stubTrue),\n            func = _[methodName];\n\n        var actual = lodashStable.map(falsey, function(value, index) {\n          var pass = !index && /^(?:backflow|compose|cond|flow(Right)?|over(?:Every|Some)?)$/.test(methodName);\n\n          try {\n            index ? func(value) : func();\n          } catch (e) {\n            pass = !pass && (e instanceof TypeError) &&\n              (!lodashStable.includes(checkFuncs, methodName) || (e.message == FUNC_ERROR_TEXT));\n          }\n          return pass;\n        });\n\n        assert.deepEqual(actual, expected, '`_.' + methodName + '` rejects falsey arguments');\n      });\n    });\n\n    QUnit.test('should use `this` binding of function', function(assert) {\n      assert.expect(30);\n\n      lodashStable.each(noBinding, function(methodName) {\n        var fn = function() { return this.a; },\n            func = _[methodName],\n            isNegate = methodName == 'negate',\n            object = { 'a': 1 },\n            expected = isNegate ? false : 1;\n\n        var wrapper = func(_.bind(fn, object));\n        assert.strictEqual(wrapper(), expected, '`_.' + methodName + '` can consume a bound function');\n\n        wrapper = _.bind(func(fn), object);\n        assert.strictEqual(wrapper(), expected, '`_.' + methodName + '` can be bound');\n\n        object.wrapper = func(fn);\n        assert.strictEqual(object.wrapper(), expected, '`_.' + methodName + '` uses the `this` of its parent object');\n      });\n    });\n\n    QUnit.test('should not contain minified method names (test production builds)', function(assert) {\n      assert.expect(1);\n\n      var shortNames = ['_', 'at', 'eq', 'gt', 'lt'];\n      assert.ok(lodashStable.every(_.functions(_), function(methodName) {\n        return methodName.length > 2 || lodashStable.includes(shortNames, methodName);\n      }));\n    });\n  }());\n\n  /*--------------------------------------------------------------------------*/\n\n  QUnit.config.asyncRetries = 10;\n  QUnit.config.hidepassed = true;\n\n  if (!document) {\n    QUnit.config.noglobals = true;\n    QUnit.load();\n    QUnit.start();\n  }\n}.call(this));\n"], "filenames": ["lodash.js", "test/test.js"], "buggy_code_start_loc": [1248, 7540], "buggy_code_end_loc": [3647, 7540], "fixing_code_start_loc": [1249, 7541], "fixing_code_end_loc": [3661, 7556], "type": "NVD-CWE-noinfo", "message": "lodash node module before 4.17.5 suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of \"Object\" via __proto__, causing the addition or modification of an existing property that will exist on all objects.", "other": {"cve": {"id": "CVE-2018-3721", "sourceIdentifier": "support@hackerone.com", "published": "2018-06-07T02:29:08.317", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "lodash node module before 4.17.5 suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of \"Object\" via __proto__, causing the addition or modification of an existing property that will exist on all objects."}, {"lang": "es", "value": "El m\u00f3dulo de node lodash en versiones anteriores a la 4.17.5 se ve afectada por una vulnerabilidad MAID (modificaci\u00f3n de datos asumidos como asumible) mediante las funciones \"defaultsDeep\", \"merge\" y \"mergeWith\", lo que permite que un usuario malicioso modifique el prototipo de \"Object\" mediante __proto__, provocando la adici\u00f3n o modificaci\u00f3n de una propiedad existente que va a existir en todos los objetos."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-471"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:lodash:lodash:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "4.17.5", "matchCriteriaId": "F1E3DEC7-ABF9-477C-82B8-1644C96BD7DF"}]}]}], "references": [{"url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a", "source": "support@hackerone.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/310443", "source": "support@hackerone.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20190919-0004/", "source": "support@hackerone.com"}]}, "github_commit_url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a"}}