{"buggy_code": ["# Change Log\n\n## [Unreleased]\n\n## v4.5.0 - 2021-12-02\n\n### Added\n\n- `autoFocus` prop for supported interactive elements ([#253](https://github.com/yhatt/jsx-slack/issues/253), [#254](https://github.com/yhatt/jsx-slack/pull/254))\n- Guide for setting up jsx-slack in Deno (Slack CLI) and esbuild ([#245](https://github.com/yhatt/jsx-slack/issues/245), [#252](https://github.com/yhatt/jsx-slack/pull/252))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#255](https://github.com/yhatt/jsx-slack/pull/255))\n\n## v4.4.3 - 2021-11-18\n\n### Fixed\n\n- Fix Deno's type error by adding manual type assertion for `<Blocks>` ([#245](https://github.com/yhatt/jsx-slack/issues/245), [#251](https://github.com/yhatt/jsx-slack/pull/251))\n\n## v4.4.2 - 2021-11-17\n\n### Fixed\n\n- Fix internal type of `<Blocks>` for making better type support for ESM CDN ([#245](https://github.com/yhatt/jsx-slack/issues/245), [#250](https://github.com/yhatt/jsx-slack/pull/250))\n\n## v4.4.1 - 2021-11-17\n\n### Fixed\n\n- Avoid using namespace alias and use isomorphic namespace in JSX runtime ([#249](https://github.com/yhatt/jsx-slack/pull/249))\n\n## v4.4.0 - 2021-11-17\n\n### Removed\n\n- Direct dependencies to `hast-util-to-mdast` and `he` ([#247](https://github.com/yhatt/jsx-slack/pull/247))\n\n### Changed\n\n- Upgrade development Node version to v16 LTS ([#246](https://github.com/yhatt/jsx-slack/pull/246))\n- Upgrade dependent packages to the latest version ([#246](https://github.com/yhatt/jsx-slack/pull/246))\n- Setup esbuild transpile and prebundling ([#247](https://github.com/yhatt/jsx-slack/pull/247))\n\n## v4.3.0 - 2021-06-25\n\n### Added\n\n- Support assigning [`submit_disabled` field](https://api.slack.com/reference/workflows/configuration-view) by setting `submit` prop as `false` in `<Modal type=\"workflow_step\">` ([#233](https://github.com/yhatt/jsx-slack/issues/233), [#234](https://github.com/yhatt/jsx-slack/pull/234))\n\n### Fixed\n\n- Broken JSDoc links in some IDEs ([#235](https://github.com/yhatt/jsx-slack/pull/235))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#236](https://github.com/yhatt/jsx-slack/pull/236))\n\n## v4.2.1 - 2021-06-18\n\n### Fixed\n\n- Fixed resolution error when using JSX runtime script through ES modules ([#231](https://github.com/yhatt/jsx-slack/issues/231), [#232](https://github.com/yhatt/jsx-slack/pull/232))\n\n## v4.2.0 - 2021-06-16\n\n### Added\n\n- ES modules support ([#227](https://github.com/yhatt/jsx-slack/pull/227))\n- CI test against Node 16 ([#228](https://github.com/yhatt/jsx-slack/pull/228))\n\n### Changed\n\n- Upgrade Node and dependent packages to the latest version ([#228](https://github.com/yhatt/jsx-slack/pull/228))\n- Rename `master` branch to `main` ([#229](https://github.com/yhatt/jsx-slack/pull/229))\n\n## v4.1.0 - 2021-06-14\n\n### Added\n\n- Added type exports that are similar to `@types/react` ([#226](https://github.com/yhatt/jsx-slack/pull/226))\n  - `FunctionCompnent` / `FC` (Alias to same types in `JSXSlack` namespace)\n  - `VoidFunctionComponent` / `VFC` (Alias to same types in `JSXSlack` namespace)\n  - `Node` (Similar to `ReactNode` but for jsx-slack. Alias to `JSXSlack.ChildElements`)\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#225](https://github.com/yhatt/jsx-slack/pull/225))\n\n## v4.0.0 - 2021-04-25\n\n### Breaking\n\n- Dropped Node 10 support ([#219](https://github.com/yhatt/jsx-slack/pull/219))\n\n### Changed\n\n- Allow containing `<Input>` and input components in `<Blocks>` ([#218](https://github.com/yhatt/jsx-slack/issues/218), [#220](https://github.com/yhatt/jsx-slack/pull/220))\n- Upgrade dependent packages to the latest version ([#219](https://github.com/yhatt/jsx-slack/pull/219))\n\n### Removed\n\n- Remove deprecated `jsxslack.raw` ([#221](https://github.com/yhatt/jsx-slack/pull/221))\n\n## v3.0.0 - 2021-02-25\n\n### Breaking\n\nThe package name has renamed from `@speee-js/jsx-slack` to `jsx-slack`.\n\n### Added\n\n- JSX automatic runtime support for TypeScript 4.1 ([#214](https://github.com/yhatt/jsx-slack/pull/214), [#194](https://github.com/yhatt/jsx-slack/issues/194))\n\n### Changed\n\n- Rename package from `@speee-js/jsx-slack` to `jsx-slack` ([#213](https://github.com/yhatt/jsx-slack/issues/213), [#215](https://github.com/yhatt/jsx-slack/pull/215))\n- GitHub repository has transferred to [yhatt/jsx-slack](https://github.com/yhatt/jsx-slack) ([#215](https://github.com/yhatt/jsx-slack/pull/215))\n\n## v2.6.0 - 2020-10-20\n\n### Added\n\n- [Configurable `dispatchAction` prop](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#input) for `<Input type=\"text\">` and `<Textarea>` (equivalent to [`dispatch_action_config` for the plain-text input](https://api.slack.com/reference/block-kit/block-elements#input)) ([#204](https://github.com/yhatt/jsx-slack/issues/204), [#205](https://github.com/yhatt/jsx-slack/pull/205))\n- [`<Mrkdwn raw>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#bypass-html-like-formatting) to bypass HTML-like formatting and auto-escaping ([#161](https://github.com/yhatt/jsx-slack/issues/161), [#207](https://github.com/yhatt/jsx-slack/pull/207))\n\n### Fixed\n\n- Escaped underscores within Korean emoji shorthand have broken ([#203](https://github.com/yhatt/jsx-slack/issues/203), [#206](https://github.com/yhatt/jsx-slack/pull/206))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#208](https://github.com/yhatt/jsx-slack/pull/208))\n\n## v2.5.1 - 2020-10-08\n\n### Added\n\n- [`<TimePicker>` interactive component](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#time-picker) ([#199](https://github.com/yhatt/jsx-slack/issues/199), [#202](https://github.com/yhatt/jsx-slack/pull/202))\n\n### Fixed\n\n- Update demo schema for `dispatchAction` prop ([#201](https://github.com/yhatt/jsx-slack/pull/201))\n\n## v2.5.0 - 2020-10-07\n\n### Changed\n\n- `<Input>` and input components are available in home tab container `<Home>` ([#195](https://github.com/yhatt/jsx-slack/issues/195), [#200](https://github.com/yhatt/jsx-slack/pull/200))\n- Allow using `<RadioButtonGroup>` and `<CheckboxGroup>` in message container `<Blocks>` ([#196](https://github.com/yhatt/jsx-slack/issues/196), [#197](https://github.com/yhatt/jsx-slack/pull/197))\n- Upgrade dependent packages to the latest version ([#191](https://github.com/yhatt/jsx-slack/pull/191), [#198](https://github.com/yhatt/jsx-slack/pull/198))\n\n### Added\n\n- `dispatchAction` prop for `<Input>` layout block and input components ([#200](https://github.com/yhatt/jsx-slack/pull/200))\n- Docs: [`jsxFragmentFactory` compiler option for TypeScript v4](https://github.com/yhatt/jsx-slack/blob/main/docs/how-to-setup-jsx-transpiler.md#typescript) ([#173](https://github.com/yhatt/jsx-slack/issues/173), [#191](https://github.com/yhatt/jsx-slack/pull/191))\n\n## v2.4.0 - 2020-07-30\n\n### Added\n\n- [`<Header>` component](https://github.com/yhatt/jsx-slack/blob/main/docs/layout-blocks.md#header) for layout block ([#184](https://github.com/yhatt/jsx-slack/issues/184), [#185](https://github.com/yhatt/jsx-slack/pull/185))\n\n### Fixed\n\n- Fix typos in `how-to-setup-jsx-transpiler.md` ([#183](https://github.com/yhatt/jsx-slack/pull/183) by [@mashabow](https://github.com/mashabow))\n\n## v2.3.0 - 2020-07-22\n\n### Added\n\n- `type` prop and [`workflow_step` type](https://api.slack.com/reference/workflows/configuration-view) for `<Modal>` ([#176](https://github.com/yhatt/jsx-slack/issues/176), [#177](https://github.com/yhatt/jsx-slack/pull/177))\n- React-compatible camelCased `dateTime` prop for `<time>` ([#179](https://github.com/yhatt/jsx-slack/issues/179), [#182](https://github.com/yhatt/jsx-slack/pull/182))\n- Test against Node 14 ([#181](https://github.com/yhatt/jsx-slack/pull/181))\n\n### Changed\n\n- `datetime` prop for `<time>` is now aliasing into added camelCased prop ([#179](https://github.com/yhatt/jsx-slack/issues/179), [#182](https://github.com/yhatt/jsx-slack/pull/182))\n- Upgrade dependent packages to the latest version ([#178](https://github.com/yhatt/jsx-slack/pull/178))\n\n## v2.2.1 - 2020-07-17\n\n### Fixed\n\n- Fix wrong extension for the path of type definition: `.js` -> `.d.ts` ([#171](https://github.com/yhatt/jsx-slack/pull/171))\n- Update how to generate Block Kit Builder URL in demo page ([#168](https://github.com/yhatt/jsx-slack/issues/168), [#172](https://github.com/yhatt/jsx-slack/pull/172))\n\n### Changed\n\n- Upgrade Node and dependent packages to the latest version ([#175](https://github.com/yhatt/jsx-slack/pull/175))\n\n## v2.2.0 - 2020-05-21\n\n### Added\n\n- [`<Call>` layout block component](https://github.com/yhatt/jsx-slack/blob/main/docs/layout-blocks.md#call) to show a card of registered call ([#164](https://github.com/yhatt/jsx-slack/issues/164), [#165](https://github.com/yhatt/jsx-slack/pull/165))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#166](https://github.com/yhatt/jsx-slack/pull/166))\n\n## v2.1.0 - 2020-05-01\n\n### Added\n\n- Accept [special initial conversation `current`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#special-initial-conversation-current) in `<ConversationsSelect>` ([#154](https://github.com/yhatt/jsx-slack/issues/154), [#155](https://github.com/yhatt/jsx-slack/pull/155))\n\n### Changed\n\n- Upgrade Node and dependent packages to the latest version ([#158](https://github.com/yhatt/jsx-slack/pull/158))\n- Refactor special link detection ([#159](https://github.com/yhatt/jsx-slack/pull/159))\n- Update demo REPL ([#157](https://github.com/yhatt/jsx-slack/pull/157))\n  - Move template examples on README into REPL demo\n  - Use Web fonts to get better rendering\n  - Disable preview button if Slack may return 414 error due to too long URL\n\n## v2.0.0 - 2020-04-23\n\n<p align=\"center\">\n  <img src=\"./demo/public/logo.svg\" width=\"100\" />\n</p>\n\njsx-slack v2 has improved JSX structure and built-in components to output the _real_ JSON from JSX!\n\n**[\u25b6\ufe0e See highlight of v2 updates](https://github.com/yhatt/jsx-slack/blob/main/docs/highlight/v2.md)**\n\n### [Breaking](https://github.com/yhatt/jsx-slack/blob/main/docs/highlight/v2.md#breaking-change)\n\n- Checked states defined in `<CheckboxGroup values>` and `<Checkbox checked>` do no longer merge\n\n* [Breaking for TypeScript](https://github.com/yhatt/jsx-slack/blob/main/docs/highlight/v2.md#changes-for-TypeScript)\n  - Require TypeScript >= 3.7 when using jsx-slack through TypeScript\n  - Container components have strict type checking for its children\n  - Exported type `JSXSlack.Child` and `JSXSlack.Children` have been renamed into `JSXSlack.ChildElement` and `JSXSlack.ChildElements` and no longer provided generics\n\n### Changed\n\n- Fully rewrote JSX structure to render from JSX to JSON directly ([#128](https://github.com/yhatt/jsx-slack/issues/128))\n- All built-in components can render the partial JSON of Block Kit\n- `<Home>` container now accepts `<Input type=\"hidden\" />` and custom transformer to store private metadata\n- `value` prop for `<Option>` has made optional to follow HTML specification\n- `confirm` prop for interactive block elements accepts the raw confirm composition object\n- `<a>` tag renders short syntax for hyperlink if possible\n- Throws error with more helpful message and stacktrace when there is invalid JSX structure ([#143](https://github.com/yhatt/jsx-slack/pull/143))\n- Bundle modules through rollup ([#144](https://github.com/yhatt/jsx-slack/pull/144))\n\n### Added\n\n- React-compatible public APIs: `JSXSlack.createElement`, `JSXSlack.isValidElement`, and `JSXSlack.Children` helpers\n- HTML-compatible `<Option selected>` and `<RadioButton checked>`\n- `value` prop as an alias into `initialXXX` prop in some interactive components\n- Added JSDoc to many public APIs and components\n- Support new JSX transpile via `automatic` runtime in Babel >= 7.9 _(experimental)_ ([#142](https://github.com/yhatt/jsx-slack/pull/142))\n- REPL demo now generates the permalink to specific JSX ([#149](https://github.com/yhatt/jsx-slack/pull/149))\n- Dark mode for REPL demo ([#150](https://github.com/yhatt/jsx-slack/pull/150))\n- New logo and logo type ([#152](https://github.com/yhatt/jsx-slack/pull/152))\n\n### Fixed\n\n- Suggest string literals on IDE when typing the kind of conversation in `<ConversationsSelect include>` ([#145](https://github.com/yhatt/jsx-slack/pull/145))\n- Fix typo in `README.md` ([#146](https://github.com/yhatt/jsx-slack/pull/146) by [@BLNCinema](https://github.com/BLNCinema))\n\n### Removed\n\n- Deprecated features in v1: `JSXSlack.legacyParser()` and `jsxslack.fragment`\n\n### Deprecated\n\n- `jsxslack.raw` template literal tag (It has become just an alias to `jsxslack` in v2)\n\n## v1.7.0 - 2020-04-07\n\n### Added\n\n- `style` prop for `<Confirm>` composition object component ([#114](https://github.com/yhatt/jsx-slack/issues/114), [#139](https://github.com/yhatt/jsx-slack/pull/139))\n- `<Button>` inherits its style to assigned confirm composition object if `<Confirm>` has not defined style ([#139](https://github.com/yhatt/jsx-slack/pull/139))\n\n### Changed\n\n- All props of `<Confirm>` component have made optional ([#138](https://github.com/yhatt/jsx-slack/issues/138), [#139](https://github.com/yhatt/jsx-slack/pull/139))\n- Upgrade dependent packages to the latest version ([#137](https://github.com/yhatt/jsx-slack/pull/137), [#140](https://github.com/yhatt/jsx-slack/pull/140))\n\n## v1.6.0 - 2020-03-20\n\n### Added\n\n- `responseUrlEnabled` property for modal's input component to `<ConversationsSelect>` and `<ChannelsSelect>` ([#134](https://github.com/yhatt/jsx-slack/issues/134), [#135](https://github.com/yhatt/jsx-slack/pull/135))\n- Experimental filter properties to `<ConversationsSelect>`: `include`, `excludeExternalSharedChannels`, and `excludeBotUsers` ([#133](https://github.com/yhatt/jsx-slack/issues/133), [#136](https://github.com/yhatt/jsx-slack/pull/136))\n\n## v1.5.1 - 2020-03-16\n\n### Added\n\n- `value` attribute for `<li>` element ([#130](https://github.com/yhatt/jsx-slack/pull/130))\n\n### Fixed\n\n- Fix mention detection to match to longer Slack ID ([#129](https://github.com/yhatt/jsx-slack/pull/129))\n\n### Changed\n\n- Upgrade deep dependencies ([#131](https://github.com/yhatt/jsx-slack/pull/131))\n\n## v1.5.0 - 2020-03-12\n\n### Changed\n\n- Improve escaping special characters to keep original character as possible ([#124](https://github.com/yhatt/jsx-slack/issues/124), [#125](https://github.com/yhatt/jsx-slack/pull/125))\n- Make JSX element for passing to Slack API serializable to JSON directly ([#126](https://github.com/yhatt/jsx-slack/pull/126))\n- `jsxslack` template literal tag now returns raw JSX element, or JSON if serializable ([#127](https://github.com/yhatt/jsx-slack/pull/127))\n\n### Added\n\n- `jsxslack.raw` template literal tag to generate JSX element always ([#127](https://github.com/yhatt/jsx-slack/pull/127))\n\n### Deprecated\n\n- Confusable `jsxslack.fragment` template literal tag has deprecated (Use `jsxslack` or `jsxslack.raw` instead) ([#127](https://github.com/yhatt/jsx-slack/pull/127))\n\n## v1.4.0 - 2020-03-06\n\n### Added\n\n- Support `type` attribute for `<ol>` element ([#117](https://github.com/yhatt/jsx-slack/pull/117))\n\n### Changed\n\n- Allow text formatting through mrkdwn and HTML-like elements in `<RadioButton>` ([#119](https://github.com/yhatt/jsx-slack/issues/119), [#122](https://github.com/yhatt/jsx-slack/pull/122))\n- Change spaces for indenting lists into unicode spaces that were based on measured width in Slack's font ([#117](https://github.com/yhatt/jsx-slack/pull/117))\n- Upgrade development Node and dependent packages to the latest version ([#123](https://github.com/yhatt/jsx-slack/pull/123))\n\n### Fixed\n\n- Prevent over-escaping for link and time formatting ([#118](https://github.com/yhatt/jsx-slack/issues/118), [#120](https://github.com/yhatt/jsx-slack/pull/120))\n\n### Deprecated\n\n- Mark the legacy parser as deprecated ([#121](https://github.com/yhatt/jsx-slack/pull/121))\n\n## v1.3.1 - 2020-02-14\n\n### Fixed\n\n- Fix regression about not rendered special spaces around the content ([#113](https://github.com/yhatt/jsx-slack/pull/113))\n\n## v1.3.0 - 2020-02-14\n\n### Changed\n\n- [Fully-rewrite HTML parser](https://github.com/yhatt/jsx-slack/blob/main/docs/html-like-formatting.md#about-parser) to reduce bundle size drastically (x43 smaller) ([#112](https://github.com/yhatt/jsx-slack/pull/112))\n\n### Added\n\n- [`legacyParser()`](https://github.com/yhatt/jsx-slack/blob/main/docs/html-like-formatting.md#legacy-parser) for switching into legacy parser ([#112](https://github.com/yhatt/jsx-slack/pull/112))\n\n## v1.2.0 - 2020-02-10\n\n### Added\n\n- [`<CheckboxGroup>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#checkbox-group) and [`<Checkbox>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#checkbox) interactive component ([#108](https://github.com/yhatt/jsx-slack/issues/108), [#109](https://github.com/yhatt/jsx-slack/pull/109))\n- [Redirect the content of `<small>` element into `description`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#redirect-small-into-description) in `<Checkbox>` and `<RadioButton>` ([#109](https://github.com/yhatt/jsx-slack/pull/109))\n- Add the build for ES modules to make tree-shakable ([#110](https://github.com/yhatt/jsx-slack/pull/110))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#107](https://github.com/yhatt/jsx-slack/pull/107))\n- Upgrade development Node to 12.15.0\n\n## v1.1.0 - 2020-01-20\n\n### Added\n\n- [Custom transformer](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#custom-transformer) for modal's private metadata ([#106](https://github.com/yhatt/jsx-slack/pull/106))\n\n### Changed\n\n- Mark `<Home>` container as stable ([#105](https://github.com/yhatt/jsx-slack/pull/105))\n\n## v1.0.0 - 2020-01-10\n\n### Breaking\n\n- Components for [the outdated dialog](https://api.slack.com/dialogs) provided in `jsx-slack/dialog` can no longer use ([#84](https://github.com/yhatt/jsx-slack/pull/84))\n- Drop Node 8 support ([#100](https://github.com/yhatt/jsx-slack/pull/100))\n\n### Added\n\n- `<Mrkdwn>` text composition component ([#73](https://github.com/yhatt/jsx-slack/issues/73), [#97](https://github.com/yhatt/jsx-slack/pull/97) by [@javaPhil](https://github.com/javaPhil), [#103](https://github.com/yhatt/jsx-slack/pull/103))\n\n### Fixed\n\n- Prevent over-escaping in valid emoji shorthand ([#98](https://github.com/yhatt/jsx-slack/issues/98), [#101](https://github.com/yhatt/jsx-slack/pull/101))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#92](https://github.com/yhatt/jsx-slack/pull/92), [#104](https://github.com/yhatt/jsx-slack/pull/104))\n- Upgrade development Node to 12.14.1 ([#104](https://github.com/yhatt/jsx-slack/pull/104))\n\n### Removed\n\n- Remove deprecated dialog support ([#84](https://github.com/yhatt/jsx-slack/pull/84), [#99](https://github.com/yhatt/jsx-slack/pull/99))\n- Get rid of `lodash.flattendeep` dependency ([#102](https://github.com/yhatt/jsx-slack/pull/102))\n\n## v0.12.0 - 2019-11-22\n\n### Added\n\n- Radio buttons for modal ([#88](https://github.com/yhatt/jsx-slack/issues/88), [#91](https://github.com/yhatt/jsx-slack/pull/91))\n  - `<RadioButtonGroup>` now can use in `<Modal>` container and acts as input component for modal\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#90](https://github.com/yhatt/jsx-slack/pull/90))\n\n## v0.11.1 - 2019-11-13\n\n### Fixed\n\n- Don't throw error even if `<Overflow>` has only one `<OverflowItem>` ([#85](https://github.com/yhatt/jsx-slack/issues/85), [#86](https://github.com/yhatt/jsx-slack/pull/86))\n- Fix 413 error from Block Kit Builder when translated huge JSON on REPL demo ([#82](https://github.com/yhatt/jsx-slack/pull/82))\n- Improve internal type definitions for overloaded props ([#83](https://github.com/yhatt/jsx-slack/pull/83))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#87](https://github.com/yhatt/jsx-slack/pull/87))\n\n## v0.11.0 - 2019-10-24\n\n### Added\n\n- Add (an experimental) `<Home>` container component for home tab ([#75](https://github.com/yhatt/jsx-slack/issues/75), [#78](https://github.com/yhatt/jsx-slack/pull/78))\n- [`<RadioButtonGroup>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#radio-button-group) and [`<RadioButton>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#radio-button) interactive component for home tab ([#74](https://github.com/yhatt/jsx-slack/issues/74), [#80](https://github.com/yhatt/jsx-slack/pull/80))\n- \"Copy to clipboard\" button on REPL demo ([#77](https://github.com/yhatt/jsx-slack/pull/77))\n\n### Changed\n\n- Upgrade Node for development to v12 LTS ([#79](https://github.com/yhatt/jsx-slack/pull/79))\n\n### Fixed\n\n- Throw an error when using `<File>` in `<Modal>` ([#76](https://github.com/yhatt/jsx-slack/pull/76))\n- REPL demo can transfer the complete modal JSON to Block Kit Builder ([#77](https://github.com/yhatt/jsx-slack/pull/77))\n\n### Deprecated\n\n- Output warning about deprecated dialog components ([#72](https://github.com/yhatt/jsx-slack/pull/72))\n\n## v0.10.2 - 2019-10-11\n\n### Fixed\n\n- Make interpolated fragments in template literal work correctly ([#71](https://github.com/yhatt/jsx-slack/pull/71))\n\n## v0.10.1 - 2019-10-10\n\n### Fixed\n\n- Fix invalid array children in template literal ([#69](https://github.com/yhatt/jsx-slack/pull/69))\n\n### Changed\n\n- Upgrade Node and dependent packages to the latest version ([#70](https://github.com/yhatt/jsx-slack/pull/70))\n\n## v0.10.0 - 2019-10-02\n\n### Added\n\n- [Multi-select menus](https://api.slack.com/reference/block-kit/block-elements#multi_select) ([#56](https://github.com/yhatt/jsx-slack/issues/56), [#58](https://github.com/yhatt/jsx-slack/pull/58))\n- [Modals support](https://api.slack.com/block-kit/surfaces/modals) ([#57](https://github.com/yhatt/jsx-slack/issues/57))\n  - `<Modal>` container component ([#60](https://github.com/yhatt/jsx-slack/pull/60))\n  - `<Input>` layout block and component ([#61](https://github.com/yhatt/jsx-slack/pull/61))\n  - `<Textarea>` component ([#62](https://github.com/yhatt/jsx-slack/pull/62))\n  - Input-compatible props to select-like elements and `<DatePicker>` ([#63](https://github.com/yhatt/jsx-slack/pull/63))\n  - Intrinsic HTML elements of input components ([#65](https://github.com/yhatt/jsx-slack/pull/65))\n  - Add extra types for `<Input>` component ([#66](https://github.com/yhatt/jsx-slack/pull/66))\n  - Update REPL demo to support Modals ([#68](https://github.com/yhatt/jsx-slack/pull/68))\n\n### Changed\n\n- Bump dependent packages to the latest version ([#59](https://github.com/yhatt/jsx-slack/pull/59))\n- Check invalid elements in `<Blocks>` and `<Input>` strictly ([#64](https://github.com/yhatt/jsx-slack/pull/64))\n- Split test cases for Block Kit components into multiple files ([#66](https://github.com/yhatt/jsx-slack/pull/66))\n- Organize documentation ([#20](https://github.com/yhatt/jsx-slack/issues/20), [#67](https://github.com/yhatt/jsx-slack/pull/67))\n\n### Deprecated\n\n- Mark `<Dialog>` as soft-deprecated in favor of Slack Modals ([#60](https://github.com/yhatt/jsx-slack/pull/60))\n\n## v0.9.2 - 2019-08-29\n\n### Fixed\n\n- Nested fragments fail ([#53](https://github.com/yhatt/jsx-slack/issues/53), [#54](https://github.com/yhatt/jsx-slack/pull/54))\n\n### Changed\n\n- Update dependent packages to the latest version ([#52](https://github.com/yhatt/jsx-slack/pull/52))\n\n## v0.9.1 - 2019-08-15\n\n### Fixed\n\n- Fix regression of not preserved `<pre>` whitespaces ([#48](https://github.com/yhatt/jsx-slack/issues/48), [#49](https://github.com/yhatt/jsx-slack/pull/49))\n\n### Changed\n\n- Update dependent packages to the latest version ([#50](https://github.com/yhatt/jsx-slack/pull/50))\n\n## v0.9.0 - 2019-08-15\n\n### Breaking\n\n- Disabled heuristic detection for HTML entities (Escaping works [just as same as React JSX](https://reactjs.org/docs/jsx-in-depth.html#string-literals)) ([#33](https://github.com/yhatt/jsx-slack/pull/33))\n- Some raw characters for mrkdwn link, `<`, `>`, and `&` will always escape to entities ([#45](https://github.com/yhatt/jsx-slack/issues/45))\n\n### Changed\n\n- Improve html entity decoding in JSX and template literal tag ([#33](https://github.com/yhatt/jsx-slack/pull/33), [#45](https://github.com/yhatt/jsx-slack/issues/45), [#47](https://github.com/yhatt/jsx-slack/pull/47))\n- Allow links in the inside of `<code>` and `<pre>` element ([#16](https://github.com/yhatt/jsx-slack/pull/16), [#46](https://github.com/yhatt/jsx-slack/pull/46))\n\n## v0.8.1 - 2019-08-07\n\n### Added\n\n- Better dialog support for `jsxslack` template literal ([#42](https://github.com/yhatt/jsx-slack/issues/42), [#43](https://github.com/yhatt/jsx-slack/pull/43))\n- Update REPL demo to add dialog example ([#43](https://github.com/yhatt/jsx-slack/pull/43))\n\n### Fixed\n\n- Coerce number-expected prop to integer ([#44](https://github.com/yhatt/jsx-slack/pull/44))\n\n## v0.8.0 - 2019-08-06\n\n### Added\n\n- Dialog support ([#19](https://github.com/yhatt/jsx-slack/issues/19), [#39](https://github.com/yhatt/jsx-slack/pull/39))\n\n### Fixed\n\n- Don't prevent generating `<SelectFragment>` with no options ([#41](https://github.com/yhatt/jsx-slack/pull/41))\n\n### Changed\n\n- Update `htm` to [v2.2.0](https://github.com/developit/htm/releases/tag/2.2.0) ([#38](https://github.com/yhatt/jsx-slack/pull/38))\n\n## v0.7.0 - 2019-07-29\n\n### Added\n\n- `<File>` block component ([#34](https://github.com/yhatt/jsx-slack/issues/34), [#35](https://github.com/yhatt/jsx-slack/pull/35))\n- `jsxslack.fragment` template literal tag ([#32](https://github.com/yhatt/jsx-slack/pull/32))\n- Codecov integration and coverage badge ([#36](https://github.com/yhatt/jsx-slack/pull/36))\n\n### Changed\n\n- Update dependent packages to the latest version ([#37](https://github.com/yhatt/jsx-slack/pull/37))\n\n## v0.6.0 - 2019-07-20\n\n### Added\n\n- Convert `<span>` in `<Context>` into mrkdwn element ([#26](https://github.com/yhatt/jsx-slack/issues/26), [#31](https://github.com/yhatt/jsx-slack/pull/31))\n- `<Fragment>` built-in component ([#29](https://github.com/yhatt/jsx-slack/pull/29))\n\n## v0.5.1 - 2019-07-14\n\n### Added\n\n- Support mention to global user ID for Enterprise Grid ([#25](https://github.com/yhatt/jsx-slack/pull/25))\n\n### Changed\n\n- Update dependent packages to the latest version ([#28](https://github.com/yhatt/jsx-slack/pull/28))\n\n## v0.5.0 - 2019-06-28\n\n### Added\n\n- Support Node.js 12 ([#23](https://github.com/yhatt/jsx-slack/pull/23))\n\n### Changed\n\n- Make interchangeable with `<Image>` component and intrinsic `<img>` tag ([#21](https://github.com/yhatt/jsx-slack/pull/21))\n- Upgrade dependent packages to the latest version ([#24](https://github.com/yhatt/jsx-slack/pull/24))\n\n### Removed\n\n- Remove deprecated `<Block>` component ([#22](https://github.com/yhatt/jsx-slack/pull/22))\n\n## v0.4.3 - 2019-05-15\n\n### Fixed\n\n- Fix vanishing styled channel links and mentions ([#15](https://github.com/yhatt/jsx-slack/issues/15), [#17](https://github.com/yhatt/jsx-slack/pull/17))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#18](https://github.com/yhatt/jsx-slack/pull/18))\n\n## v0.4.2 - 2019-04-13\n\n### Added\n\n- Add `style` prop for `<Button>` component ([#13](https://github.com/yhatt/jsx-slack/issues/13), [#14](https://github.com/yhatt/jsx-slack/pull/14))\n\n## v0.4.1 - 2019-03-13\n\n### Added\n\n- `<Blocks>` container component ([#12](https://github.com/yhatt/jsx-slack/pull/12))\n\n### Deprecated\n\n- Mark a confusable `<Block>` fragment component as deprecated in favor of added `<Blocks>` ([#11](https://github.com/yhatt/jsx-slack/issues/11), [#12](https://github.com/yhatt/jsx-slack/pull/12))\n\n## v0.4.0 - 2019-03-12\n\n### Added\n\n- Support nested list ([#10](https://github.com/yhatt/jsx-slack/pull/10))\n\n## v0.3.0 - 2019-03-11\n\n### Added\n\n- Add `<SelectFragment>` component ([#9](https://github.com/yhatt/jsx-slack/pull/9))\n\n### Changed\n\n- Right-aligned number in ordered list ([#8](https://github.com/yhatt/jsx-slack/pull/8))\n\n## v0.2.0 - 2019-03-07\n\n### Added\n\n- `jsxslack` template literal tag for using jsx-slack without transpiler, powered by [htm](https://github.com/developit/htm) ([#6](https://github.com/yhatt/jsx-slack/issues/6), [#7](https://github.com/yhatt/jsx-slack/pull/7))\n\n### Fixed\n\n- Improve `README.md` with some minor fixes ([#4](https://github.com/yhatt/jsx-slack/pull/4))\n- Revert ignored audit ([#5](https://github.com/yhatt/jsx-slack/pull/5))\n\n## v0.1.0 - 2019-03-01\n\n- Initial release.\n", "// An internal HTML tag and emoji shorthand should not escape\nconst preventEscapeRegex =\n  /(<.*?>|:[-a-z0-9\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cd\u00ce\u00cf\u00d1\u00d3\u00d4\u00d5\u00d6\u0152\u0153\u00d9\u00da\u00db\u00dc\u0178\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00ff_\uff3f+\uff0b'\\u1100-\\u11ff\\u2e80-\\u2fd5\\u3005\\u3041-\\u3096\\u30a0-\\u30ff\\u3130-\\u318f\\u3400-\\u4db5\\u4e00-\\u9fcb\\ua960-\\ua97f\\uac00-\\ud7ff\\uff10-\\uff19\\uff41-\\uff5a\\uff61-\\uff9f]+:)/\n\nconst generateReplacerForEscape = (fallback: string) => (matched: string) =>\n  `<span data-escape=\"${fallback.repeat(matched.length)}\">${matched}</span>`\n\nexport const escapeReplacers = {\n  blockquote: (partial: string) =>\n    partial\n      .replace(\n        /^((?:<.*?>)*)(&gt;)/gm,\n        (_, leading, character) => `${leading}\\u00ad${character}`\n      )\n      .replace(\n        /^((?:<.*?>)*)(\uff1e)/gm,\n        (_, leading, character) =>\n          `${leading}${generateReplacerForEscape('\\u00ad\uff1e')(character)}`\n      ),\n  bold: (partial: string) =>\n    partial\n      .replace(/\\*+/g, generateReplacerForEscape('\\u2217'))\n      .replace(/\uff0a+/g, generateReplacerForEscape('\\ufe61')),\n  italic: (partial: string) =>\n    partial\n      .replace(/_+/g, generateReplacerForEscape('\\u02cd'))\n      .replace(/\uff3f+/g, generateReplacerForEscape('\\u2e0f')),\n  code: (partial: string) =>\n    partial\n      .replace(/`+/g, generateReplacerForEscape('\\u02cb'))\n      .replace(/\uff40+/g, generateReplacerForEscape('\\u02cb')),\n  strikethrough: (partial: string) =>\n    partial.replace(/~+/g, generateReplacerForEscape('\\u223c')),\n} as const\n\nconst escapeCharsDefaultReplacer = (partial: string) =>\n  Object.values(escapeReplacers).reduce((p, fn) => fn(p), partial)\n\nexport const escapeChars = (\n  mrkdwn: string,\n  replacer: (partial: string) => string = escapeCharsDefaultReplacer\n) =>\n  mrkdwn\n    .split(preventEscapeRegex)\n    .reduce(\n      (acc, str, i) => [...acc, i % 2 ? str : replacer(str)],\n      [] as string[]\n    )\n    .join('')\n\nexport const escapeEntity = (str: string) =>\n  str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\nconst replaceUnmatchedString = (\n  str: string,\n  capturedMatcher: RegExp,\n  replacer: (fragment: string) => string | ConcatArray<string>\n) =>\n  str\n    .split(capturedMatcher)\n    .reduce((acc, s, i) => acc.concat(i % 2 ? s : replacer(s)), [] as string[])\n    .join('')\n\nexport const escapeEverythingContents = (str: string) =>\n  replaceUnmatchedString(str, /(<[\\s\\S]*?>)/, (s) =>\n    replaceUnmatchedString(s, /(&\\w+;)/, (ss) =>\n      [...ss].map((x) => `&#${x.codePointAt(0)};`)\n    )\n  )\n\nexport const decodeEntity = (obj: any) => {\n  if (typeof obj === 'string')\n    return obj.replace(/&(amp|gt|lt|quot|#\\d+);/g, (_, entity) => {\n      if (entity.startsWith('#'))\n        return String.fromCodePoint(Number.parseInt(entity.slice(1), 10))\n\n      return { amp: '&', gt: '>', lt: '<', quot: '\"' }[entity]\n    })\n\n  return obj\n}\n", "/** @jsx JSXSlack.h */\n/** @jsxFrag JSXSlack.Fragment */\nimport { JSXSlack } from '../src/index'\nimport { mrkdwn } from '../src/mrkdwn/index'\n\nbeforeEach(() => JSXSlack.exactMode(false))\n\ndescribe('HTML parser for mrkdwn', () => {\n  it('throws error when using not supported tag', () => {\n    // @ts-expect-error\n    expect(() => mrkdwn(<div>test</div>)).toThrow(/unknown/i)\n  })\n\n  // https://api.slack.com/messaging/composing/formatting#escaping\n  describe('Escape entity', () => {\n    it('replaces \"&\" with \"&amp;\"', () => {\n      expect(mrkdwn('&&&')).toBe('&amp;&amp;&amp;')\n      expect(mrkdwn('&heart;')).toBe('&amp;heart;')\n    })\n\n    it('allows double escaping', () => {\n      expect(mrkdwn('true &amp;& false')).toBe('true &amp;amp;&amp; false')\n      expect(mrkdwn('A&lt;=&gt;B')).toBe('A&amp;lt;=&amp;gt;B')\n    })\n\n    it('replaces \"<\" with \"&lt;\"', () => expect(mrkdwn('a<2')).toBe('a&lt;2'))\n    it('replaces \">\" with \"&gt;\"', () => expect(mrkdwn('b>0')).toBe('b&gt;0'))\n\n    it('does not conflict element-like string with internals', () => {\n      expect(mrkdwn('<br />')).toBe('&lt;br /&gt;')\n      expect(mrkdwn('<<pre:0>>')).toBe('&lt;&lt;pre:0&gt;&gt;')\n    })\n  })\n\n  describe('HTML entities', () => {\n    it('decodes HTML entities passed as JSX', () =>\n      expect(mrkdwn(<i>&hearts;</i>)).toBe('_\\u2665_'))\n\n    it('re-encodes special characters in Slack', () =>\n      expect(mrkdwn(<i>&lt;&amp;&gt;</i>)).toBe('_&lt;&amp;&gt;_'))\n\n    it('does not decode HTML entities passed as string literal', () => {\n      expect(mrkdwn(<i>{'&hearts;'}</i>)).toBe('_&amp;hearts;_')\n      expect(mrkdwn(<i>{'&lt;&amp;&gt;'}</i>)).toBe(\n        '_&amp;lt;&amp;amp;&amp;gt;_'\n      )\n      expect(mrkdwn(<i>&lt;{'<mixed>'}&gt;</i>)).toBe('_&lt;&lt;mixed&gt;&gt;_')\n    })\n\n    it('keeps special spaces around the content', () => {\n      expect(\n        mrkdwn(\n          <i>\n            {'  '}test{'  '}\n          </i>\n        )\n      ).toBe('_test_')\n      expect(mrkdwn(<i>&#9;&#9;tab&#9;&#9;</i>)).toBe('_tab_')\n      expect(\n        mrkdwn(<i>&thinsp;&nbsp;&ensp;&emsp;sp&emsp;&ensp;&nbsp;&thinsp;</i>)\n      ).toBe('_\\u2009\\u00a0\\u2002\\u2003sp\\u2003\\u2002\\u00a0\\u2009_')\n    })\n  })\n\n  describe('Italic', () => {\n    it('replaces <i> tag to italic markup', () =>\n      expect(mrkdwn(<i>Hello</i>)).toBe('_Hello_'))\n\n    it('replaces <em> tag to italic markup', () =>\n      expect(mrkdwn(<em>Hello</em>)).toBe('_Hello_'))\n\n    it('allows containing the other markup', () =>\n      expect(\n        mrkdwn(\n          <i>\n            Hello, <b>World</b>!\n          </i>\n        )\n      ).toBe('_Hello, *World*!_'))\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <i>\n            <i>Double</i>\n          </i>\n        )\n      ).toBe('_Double_'))\n\n    it('allows containing underscore by using fallback of date formatting', () => {\n      expect(mrkdwn(<i>italic_text</i>)).toBe(\n        '_italic<!date^00000000^{_}|_>text_'\n      )\n\n      // Full-width underscore (Alternative for italic markup)\n      expect(mrkdwn(<i>Hello, \uff3fWorld\uff3f!</i>)).toBe(\n        '_Hello, <!date^00000000^{_}|\uff3f>World<!date^00000000^{_}|\uff3f>!_'\n      )\n    })\n\n    it('replaces underscore with similar character within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <i>_test_</i>\n          </a>\n        )\n      ).toBe('<https://example.com/|_\\u02cdtest\\u02cd_>')\n\n      expect(\n        mrkdwn(\n          <i>\n            <a href=\"https://example.com/\">_test_</a>\n          </i>\n        )\n      ).toBe('_<https://example.com/|\\u02cdtest\\u02cd>_')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <i>\uff3ftest\uff3f</i>\n          </a>\n        )\n      ).toBe('<https://example.com/|_\\u2e0ftest\\u2e0f_>')\n\n      expect(\n        mrkdwn(\n          <i>\n            <a href=\"https://example.com/\">\uff3ftest\uff3f</a>\n          </i>\n        )\n      ).toBe('_<https://example.com/|\\u2e0ftest\\u2e0f>_')\n    })\n\n    it('does not escape underscore contained in valid emoji shorthand', () => {\n      expect(mrkdwn(<i>:arrow_down:</i>)).toBe('_:arrow_down:_')\n      expect(mrkdwn(<i>:\u7d75\uff3f\u6587\u5b57:</i>)).toBe('_:\u7d75\uff3f\u6587\u5b57:_')\n    })\n\n    it('does not escape underscore contained in valid link', () => {\n      expect(\n        mrkdwn(\n          <i>\n            <a href=\"https://example.com/a_b_c\">_link_</a>\n          </i>\n        )\n      ).toBe('_<https://example.com/a_b_c|\\u02cdlink\\u02cd>_')\n    })\n\n    it('does not escape underscore contained in valid time formatting', () => {\n      // NOTE: Fallback text will render as plain text even if containing character for formatting\n      expect(\n        mrkdwn(\n          <i>\n            <time dateTime={1234567890} fallback=\"fall_back\">\n              {'{date_num} {time_secs}'}\n            </time>\n          </i>\n        )\n      ).toBe('_<!date^1234567890^{date_num} {time_secs}|fall_back>_')\n    })\n\n    it('applies markup per each lines when text has multiline', () => {\n      expect(\n        mrkdwn(\n          <i>\n            foo\n            <br />\n            bar\n          </i>\n        )\n      ).toBe('_foo_\\n_bar_')\n\n      expect(\n        mrkdwn(\n          <i>\n            <p>foo</p>\n            <p>bar</p>\n          </i>\n        )\n      ).toBe('_foo_\\n\\n_bar_')\n    })\n\n    it('inserts invisible spaces around markup chars when rendered in exact mode', () => {\n      JSXSlack.exactMode(true)\n      expect(mrkdwn(<i>Hello</i>)).toBe('\\u200b_\\u200bHello\\u200b_\\u200b')\n    })\n  })\n\n  describe('Bold', () => {\n    it('replaces <b> tag to bold markup', () =>\n      expect(mrkdwn(<b>Hello</b>)).toBe('*Hello*'))\n\n    it('replaces <strong> tag to bold markup', () =>\n      expect(mrkdwn(<strong>Hello</strong>)).toBe('*Hello*'))\n\n    it('allows containing the other markup', () =>\n      expect(\n        mrkdwn(\n          <b>\n            Hello, <i>World</i>!\n          </b>\n        )\n      ).toBe('*Hello, _World_!*'))\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <b>\n            <b>Double</b>\n          </b>\n        )\n      ).toBe('*Double*'))\n\n    it('allows containing asterisk by using fallback of date formatting', () => {\n      expect(mrkdwn(<b>bold*text</b>)).toBe('*bold<!date^00000000^{_}|*>text*')\n\n      // Full-width asterisk (Alternative for bold markup)\n      expect(mrkdwn(<b>Hello, \uff0aWorld\uff0a!</b>)).toBe(\n        '*Hello, <!date^00000000^{_}|\uff0a>World<!date^00000000^{_}|\uff0a>!*'\n      )\n    })\n\n    it('replaces asterisk with similar character within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <b>*test*</b>\n          </a>\n        )\n      ).toBe('<https://example.com/|*\\u2217test\\u2217*>')\n\n      expect(\n        mrkdwn(\n          <b>\n            <a href=\"https://example.com/\">*test*</a>\n          </b>\n        )\n      ).toBe('*<https://example.com/|\\u2217test\\u2217>*')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <b>\uff0atest\uff0a</b>\n          </a>\n        )\n      ).toBe('<https://example.com/|*\\ufe61test\\ufe61*>')\n\n      expect(\n        mrkdwn(\n          <b>\n            <a href=\"https://example.com/\">\uff0atest\uff0a</a>\n          </b>\n        )\n      ).toBe('*<https://example.com/|\\ufe61test\\ufe61>*')\n    })\n\n    it('applies markup per each lines when text has multiline', () => {\n      expect(\n        mrkdwn(\n          <b>\n            foo\n            <br />\n            bar\n          </b>\n        )\n      ).toBe('*foo*\\n*bar*')\n\n      expect(\n        mrkdwn(\n          <b>\n            <p>foo</p>\n            <p>bar</p>\n          </b>\n        )\n      ).toBe('*foo*\\n\\n*bar*')\n    })\n\n    it('inserts invisible spaces around markup chars when rendered in exact mode', () => {\n      JSXSlack.exactMode(true)\n      expect(mrkdwn(<b>Hello</b>)).toBe('\\u200b*\\u200bHello\\u200b*\\u200b')\n    })\n  })\n\n  describe('Strikethrough', () => {\n    it('replaces <s> tag to strikethrough markup', () =>\n      expect(mrkdwn(<s>Hello</s>)).toBe('~Hello~'))\n\n    it('replaces <strike> tag to strikethrough markup', () =>\n      expect(mrkdwn(<strike>Hello</strike>)).toBe('~Hello~'))\n\n    it('replaces <del> tag to strikethrough markup', () =>\n      expect(mrkdwn(<del>Hello</del>)).toBe('~Hello~'))\n\n    it('allows containing the other markup', () =>\n      expect(\n        mrkdwn(\n          <s>\n            Hello, <b>World</b>!\n          </s>\n        )\n      ).toBe('~Hello, *World*!~'))\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <s>\n            <s>Double</s>\n          </s>\n        )\n      ).toBe('~Double~'))\n\n    it('allows containing tilde by using fallback of date formatting', () =>\n      expect(mrkdwn(<s>strike~through</s>)).toBe(\n        '~strike<!date^00000000^{_}|~>through~'\n      ))\n\n    it('replaces tilde with tilde operatpr within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <s>~strikethrough~</s>\n          </a>\n        )\n      ).toBe('<https://example.com/|~\\u223cstrikethrough\\u223c~>')\n\n      expect(\n        mrkdwn(\n          <s>\n            <a href=\"https://example.com/\">~strikethrough~</a>\n          </s>\n        )\n      ).toBe('~<https://example.com/|\\u223cstrikethrough\\u223c>~')\n    })\n\n    it('applies markup per each lines when text has multiline', () => {\n      expect(\n        mrkdwn(\n          <s>\n            foo\n            <br />\n            bar\n          </s>\n        )\n      ).toBe('~foo~\\n~bar~')\n\n      expect(\n        mrkdwn(\n          <s>\n            <p>foo</p>\n            <p>bar</p>\n          </s>\n        )\n      ).toBe('~foo~\\n\\n~bar~')\n    })\n\n    it('inserts invisible spaces around markup chars when rendered in exact mode', () => {\n      JSXSlack.exactMode(true)\n      expect(mrkdwn(<s>Hello</s>)).toBe('\\u200b~\\u200bHello\\u200b~\\u200b')\n    })\n  })\n\n  describe('Inline code', () => {\n    it('replaces <code> tag to inline code markup', () => {\n      expect(mrkdwn(<code>Inline code</code>)).toBe('`Inline code`')\n      expect(mrkdwn(<code>*allow* _using_ ~markup~</code>)).toBe(\n        '`*allow* _using_ ~markup~`'\n      )\n    })\n\n    it('renders HTML special characters correctly', () =>\n      expect(mrkdwn(<code>{'<abbr title=\"and\">&</abbr>'}</code>)).toBe(\n        '`&lt;abbr title=\"and\"&gt;&amp;&lt;/abbr&gt;`'\n      ))\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <code>\n            <code>Double</code>\n          </code>\n        )\n      ).toBe('`Double`'))\n\n    it('does never apply nested markup', () =>\n      expect(\n        mrkdwn(\n          <code>\n            <b>bold</b> <i>italic</i> <s>strikethrough</s>\n          </code>\n        )\n      ).toBe('`bold italic strikethrough`'))\n\n    it('allows containing backtick by using fallback of date formatting', () => {\n      expect(mrkdwn(<code>`code`</code>)).toBe(\n        '`<!date^00000000^{_}|`>code<!date^00000000^{_}|`>`'\n      )\n\n      // Full-width backtick (Alternative for inline code markup)\n      expect(mrkdwn(<code>\uff40code\uff40</code>)).toBe(\n        '`<!date^00000000^{_}|\uff40>code<!date^00000000^{_}|\uff40>`'\n      )\n    })\n\n    it('replaces backtick with similar character within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <code>`code`</code>\n          </a>\n        )\n      ).toBe('<https://example.com/|`\\u02cbcode\\u02cb`>')\n\n      expect(\n        mrkdwn(\n          <code>\n            <a href=\"https://example.com/\">`code`</a>\n          </code>\n        )\n      ).toBe('`<https://example.com/|\\u02cbcode\\u02cb>`')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <code>\uff40code\uff40</code>\n          </a>\n        )\n      ).toBe('<https://example.com/|`\\u02cbcode\\u02cb`>')\n\n      expect(\n        mrkdwn(\n          <code>\n            <a href=\"https://example.com/\">\uff40code\uff40</a>\n          </code>\n        )\n      ).toBe('`<https://example.com/|\\u02cbcode\\u02cb>`')\n    })\n\n    it('applies markup per each lines when code has multiline', () => {\n      expect(\n        mrkdwn(\n          <code>\n            foo\n            <br />\n            bar\n          </code>\n        )\n      ).toBe('`foo`\\n`bar`')\n\n      expect(\n        mrkdwn(\n          <code>\n            foo\n            <br />\n            <br />\n            bar\n          </code>\n        )\n      ).toBe('`foo`\\n\\n`bar`')\n    })\n\n    it('allows containing link', () => {\n      expect(\n        mrkdwn(\n          <>\n            <code>\n              <a href=\"https://example.com/\">{'<example>'}</a>\n            </code>\n            <br />\n            <code>\n              <a href=\"@channel\" />\n            </code>\n          </>\n        )\n      ).toBe('`<https://example.com/|&lt;example&gt;>`\\n`<!channel|channel>`')\n    })\n\n    it('allows containing time tag for localization', () => {\n      expect(\n        mrkdwn(\n          <code>\n            <time dateTime=\"1552212000\">{'{date_num}'}</time>\n          </code>\n        )\n      ).toBe('`<!date^1552212000^{date_num}|2019-03-10>`')\n    })\n\n    it('inserts invisible spaces around markup chars when rendered in exact mode', () => {\n      JSXSlack.exactMode(true)\n      expect(mrkdwn(<code>code</code>)).toBe('\\u200b`\\u200bcode\\u200b`\\u200b')\n    })\n  })\n\n  describe('Line break', () => {\n    it('replaces <br> tag to line break', () =>\n      expect(\n        mrkdwn(\n          <>\n            Hello,\n            <br />\n            <br />\n            <br />\n            World!\n          </>\n        )\n      ).toBe('Hello,\\n\\n\\nWorld!'))\n  })\n\n  describe('Paragraph', () => {\n    it('has no differences between 1 paragraph and plain rendering', () =>\n      expect(mrkdwn(<p>Hello!</p>)).toBe(mrkdwn('Hello!')))\n\n    it('makes a blank like between paragraphs', () => {\n      expect(\n        mrkdwn(\n          <>\n            <p>Hello!</p>\n            <p>World!</p>\n          </>\n        )\n      ).toBe('Hello!\\n\\nWorld!')\n\n      // Combination with plain text\n      expect(\n        mrkdwn(\n          <>\n            A<p>B</p>C\n          </>\n        )\n      ).toBe('A\\n\\nB\\n\\nC')\n    })\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <p>\n            <p>Double</p>\n          </p>\n        )\n      ).toBe('Double'))\n  })\n\n  describe('Blockquote', () => {\n    it('makes a blank like between blockquotes', () => {\n      expect(\n        mrkdwn(\n          <>\n            <blockquote>Hello!</blockquote>\n            <blockquote>World!</blockquote>\n          </>\n        )\n      ).toBe('&gt; Hello!\\n&gt; \\n\\n&gt; World!\\n&gt; ')\n\n      // Combination with plain text and line breaks\n      expect(\n        mrkdwn(\n          <>\n            A<blockquote>B</blockquote>C\n          </>\n        )\n      ).toBe('A\\n\\n&gt; B\\n&gt; \\n\\nC')\n\n      // Combination with paragraph\n      expect(\n        mrkdwn(\n          <>\n            <p>test</p>\n            <blockquote>\n              <p>foo</p>\n              <p>bar</p>\n            </blockquote>\n            <p>test</p>\n          </>\n        )\n      ).toBe('test\\n\\n&gt; foo\\n&gt; \\n&gt; bar\\n&gt; \\n\\ntest')\n\n      expect(\n        mrkdwn(\n          <b>\n            <blockquote>\n              <p>A</p>\n              <i>B</i>\n              <p>C</p>\n            </blockquote>\n          </b>\n        )\n      ).toBe('&gt; *A*\\n&gt; \\n&gt; *_B_*\\n&gt; \\n&gt; *C*\\n&gt; ')\n    })\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <blockquote>\n            <blockquote>Double</blockquote>\n          </blockquote>\n        )\n      ).toBe('&gt; Double\\n&gt; '))\n\n    it('escapes blockquote mrkdwn character by inserting soft hyphen', () =>\n      expect(mrkdwn(<blockquote>&gt; blockquote</blockquote>)).toBe(\n        '&gt; \\u00ad&gt; blockquote\\n&gt; '\n      ))\n\n    it('escapes full-width quote character by using fallback of date formatting', () =>\n      expect(mrkdwn(<blockquote>\uff1eblockquote</blockquote>)).toBe(\n        '&gt; <!date^00000000^{_}|\uff1e>blockquote\\n&gt; '\n      ))\n\n    it('always inserts soft hyphen when included quote character within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <blockquote>&gt; blockquote</blockquote>\n          </a>\n        )\n      ).toBe('&gt; <https://example.com/|\\u00ad&gt; blockquote>\\n&gt; ')\n\n      expect(\n        mrkdwn(\n          <blockquote>\n            <a href=\"https://example.com/\">&gt; blockquote</a>\n          </blockquote>\n        )\n      ).toBe('&gt; <https://example.com/|\\u00ad&gt; blockquote>\\n&gt; ')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <blockquote>\uff1eblockquote</blockquote>\n          </a>\n        )\n      ).toBe('&gt; <https://example.com/|\\u00ad\uff1eblockquote>\\n&gt; ')\n\n      expect(\n        mrkdwn(\n          <blockquote>\n            <a href=\"https://example.com/\">\uff1eblockquote</a>\n          </blockquote>\n        )\n      ).toBe('&gt; <https://example.com/|\\u00ad\uff1eblockquote>\\n&gt; ')\n    })\n  })\n\n  describe('Pre-formatted text', () => {\n    it('makes line break and space between around contents', () => {\n      expect(\n        mrkdwn(\n          <>\n            foo<pre>{'pre\\nformatted\\ntext'}</pre>bar\n          </>\n        )\n      ).toBe('foo\\n```\\npre\\nformatted\\ntext\\n```\\nbar')\n\n      expect(\n        mrkdwn(\n          <>\n            <p>foo</p>\n            <pre>{'pre\\nformatted\\ntext'}</pre>\n            <p>bar</p>\n          </>\n        )\n      ).toBe('foo\\n\\n```\\npre\\nformatted\\ntext\\n```\\n\\nbar')\n    })\n\n    it('preserves whitespaces for indent', () => {\n      const preformatted = '{\\n  hello\\n}'\n      expect(mrkdwn(<pre>{preformatted}</pre>)).toBe('```\\n{\\n  hello\\n}\\n```')\n\n      // with <a> link\n      expect(\n        mrkdwn(\n          <pre>\n            {'{\\n  '}\n            <a href=\"https://example.com/\">hello</a>\n            {'\\n}'}\n          </pre>\n        )\n      ).toBe('```\\n{\\n  <https://example.com/|hello>\\n}\\n```')\n    })\n\n    it('allows wrapping by text format character', () =>\n      expect(\n        mrkdwn(\n          <b>\n            <i>\n              <pre>{'bold\\nand italic'}</pre>\n            </i>\n          </b>\n        )\n      ).toBe('*_```\\nbold\\nand italic\\n```_*'))\n\n    it('does not apply wrapped strikethrough by Slack restriction', () =>\n      expect(\n        mrkdwn(\n          <s>\n            <blockquote>\n              strikethrough and\n              <pre>{'quoted\\ntext'}</pre>\n            </blockquote>\n          </s>\n        )\n      ).toBe('&gt; ~strikethrough and~\\n&gt; ```\\nquoted\\ntext\\n```\\n&gt; '))\n\n    it('renders HTML special characters correctly', () =>\n      expect(mrkdwn(<pre>{'<abbr title=\"and\">&</abbr>'}</pre>)).toBe(\n        '```\\n&lt;abbr title=\"and\"&gt;&amp;&lt;/abbr&gt;\\n```'\n      ))\n\n    it('allows containing link', () => {\n      expect(\n        mrkdwn(\n          <pre>\n            <a href=\"https://example.com/\">example</a>\n          </pre>\n        )\n      ).toBe('```\\n<https://example.com/|example>\\n```')\n\n      // with format\n      expect(\n        mrkdwn(\n          <pre>\n            <a href=\"https://example.com/\">\n              <b>Bold</b> link\n            </a>\n            <br />\n            {'and plain\\ntext'}\n          </pre>\n        )\n      ).toBe('```\\n<https://example.com/|*Bold* link>\\nand plain\\ntext\\n```')\n    })\n  })\n\n  describe('List', () => {\n    it('converts unordered list to mimicked text', () => {\n      expect(\n        mrkdwn(\n          <ul>\n            <li>a</li>\n            <li>\n              <b>b</b>\n            </li>\n            <li>c</li>\n          </ul>\n        )\n      ).toBe('\u2022 a\\n\u2022 *b*\\n\u2022 c')\n    })\n\n    it('converts ordered list to plain text', () => {\n      expect(\n        mrkdwn(\n          <ol>\n            <li>a</li>\n            <li>b</li>\n            <li>\n              <code>c</code>\n            </li>\n          </ol>\n        )\n      ).toBe('1. a\\n2. b\\n3. `c`')\n    })\n\n    it('allows multiline content by aligned indent', () => {\n      expect(\n        mrkdwn(\n          <ul>\n            <li>\n              Hello, <br />\n              world!\n            </li>\n            <li>\n              <p>Paragraph</p>\n              <p>supported</p>\n            </li>\n          </ul>\n        )\n      ).toBe('\u2022 Hello,\\n\\u2007 world!\\n\u2022 Paragraph\\n\\u2007 \\n\\u2007 supported')\n\n      expect(\n        mrkdwn(\n          <ol>\n            <li>\n              Ordered\n              <br />\n              list\n            </li>\n            <li>\n              <p>Well</p>\n              <p>aligned</p>\n            </li>\n          </ol>\n        )\n      ).toBe('1. Ordered\\n\u2003\u200a list\\n2. Well\\n\u2003\u200a \\n\u2003\u200a aligned')\n    })\n\n    it('allows setting start number via start attribute in ordered list', () => {\n      expect(\n        mrkdwn(\n          <ol start={9}>\n            <li>Change</li>\n            <li>\n              Start\n              <br />\n              number\n            </li>\n          </ol>\n        )\n      ).toBe('\\u20079. Change\\n10. Start\\n\u2003\u2007\u200a number')\n\n      // Coerce to integer\n      expect(\n        mrkdwn(\n          <ol start={3.5}>\n            <li>test</li>\n          </ol>\n        )\n      ).toBe(\n        mrkdwn(\n          <ol start={3}>\n            <li>test</li>\n          </ol>\n        )\n      )\n    })\n\n    it('renders ordered number with lowercase latin alphabet when type attribute is \"a\"', () =>\n      expect(\n        mrkdwn(\n          <ol type={'a'} start={-1}>\n            <li>-1</li>\n            <li>0</li>\n            <li>1</li>\n            <li>2</li>\n            <li>3</li>\n          </ol>\n        )\n      ).toBe('-1. -1\\n\u20040. 0\\n\u2004\u200aa. 1\\n\u2004b. 2\\n\u2004\u2009c. 3'))\n\n    it('renders ordered number with uppercase latin alphabet when type attribute is \"A\"', () => {\n      expect(\n        mrkdwn(\n          <ol type={'A'} start={25}>\n            <li>25</li>\n            <li>26</li>\n            <li>27</li>\n          </ol>\n        )\n      ).toBe('\u2007\u2009Y. 25\\n\u2003Z. 26\\nAA. 27')\n\n      expect(\n        mrkdwn(\n          <ol type={'A'} start={700}>\n            <li>700</li>\n            <li>701</li>\n            <li>702</li>\n            <li>703</li>\n            <li>704</li>\n          </ol>\n        )\n      ).toBe('\u2003ZX. 700\\n\u2003ZY. 701\\n\u2003\u200aZZ. 702\\nAAA. 703\\nAAB. 704')\n    })\n\n    it('renders ordered number with lowercase roman numeric when type attribute is \"i\"', () =>\n      expect(\n        mrkdwn(\n          <ol type={'i'} start={-1}>\n            {[...Array(12)].map((_, i) => (\n              <li>{i - 1}</li>\n            ))}\n          </ol>\n        )\n      ).toBe(\n        '\u2005-1. -1\\n\u2007\u200a0. 0\\n\u2003\u2008i. 1\\n\u2003ii. 2\\n\u2002iii. 3\\n\u2004\u2009iv. 4\\n\u2007\u2009v. 5\\n\u2004\u2009vi. 6\\n\u2008vii. 7\\nviii. 8\\n\u2004\u2009ix. 9\\n\u2007\u2009x. 10'\n      ))\n\n    it('renders ordered number with uppercase roman numeric when type attribute is \"I\"', () => {\n      expect(\n        mrkdwn(\n          <ol type={'I'} start={45}>\n            {[...Array(10)].map((_, i) => (\n              <li>{i + 45}</li>\n            ))}\n          </ol>\n        )\n      ).toBe(\n        '\u2003\u200aXLV. 45\\n\u2002XLVI. 46\\n\u2005XLVII. 47\\nXLVIII. 48\\n\u2007XLIX. 49\\n\u2003\u2003\u2007\u200aL. 50\\n\u2003\u2003\u2004LI. 51\\n\u2003\u2003\u200aLII. 52\\n\u2003\u2002\u200aLIII. 53\\n\u2003\u2004\u2009LIV. 54'\n      )\n\n      expect(\n        mrkdwn(\n          <ol type={'I'} start={3991}>\n            {[...Array(10)].map((_, i) => (\n              <li>{i + 3991}</li>\n            ))}\n          </ol>\n        )\n      ).toBe(\n        '\u2003\u2004\u2009MMMCMXCI. 3991\\n\u2003\u2006MMMCMXCII. 3992\\n\u2007\u200aMMMCMXCIII. 3993\\n\u2002MMMCMXCIV. 3994\\n\u2003\u200aMMMCMXCV. 3995\\n\u2002MMMCMXCVI. 3996\\n\u2005MMMCMXCVII. 3997\\nMMMCMXCVIII. 3998\\n\u2007MMMCMXCIX. 3999\\n\u2003\u2003\u2003\u2003\u2003\u2003\u2004\u200a4000. 4000'\n      )\n    })\n\n    it('changes ordered number in the middle of list through value prop', () =>\n      expect(\n        mrkdwn(\n          <ol>\n            <li>1</li>\n            <li>2</li>\n            <li value={100}>100</li>\n            <li>101</li>\n            <li>102</li>\n          </ol>\n        )\n      ).toBe('\u2003\u2004\u200a1. 1\\n\u2003\u2004\u200a2. 2\\n100. 100\\n101. 101\\n102. 102'))\n\n    it('allows sub list', () => {\n      expect(\n        mrkdwn(\n          <ul>\n            <li>test</li>\n            <ul>\n              <li>sub-list with direct nesting</li>\n            </ul>\n            <li>\n              <ul>\n                <li>sub-list</li>\n                <li>\n                  and\n                  <ul>\n                    <li>sub-sub-list</li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        )\n      ).toBe(\n        '\u2022 test\\n\u2007 \u25e6 sub-list with direct nesting\\n\u2022 \u25e6 sub-list\\n\u2007 \u25e6 and\\n\u2007 \u2004\u200a \u25aa\ufe0e sub-sub-list'\n      )\n    })\n\n    it('allows sub ordered list', () => {\n      expect(\n        mrkdwn(\n          <ol start={2}>\n            <li>test</li>\n            <ol>\n              <li>sub-list with direct nesting</li>\n            </ol>\n            <li>\n              <ol>\n                <li>sub-list</li>\n                <li>\n                  and\n                  <ul>\n                    <li>sub-sub-list</li>\n                  </ul>\n                </li>\n              </ol>\n            </li>\n          </ol>\n        )\n      ).toBe(\n        '2. test\\n\u2003\u200a 1. sub-list with direct nesting\\n3. 1. sub-list\\n\u2003\u200a 2. and\\n\u2003\u200a \u2003\u200a \u25aa\ufe0e sub-sub-list'\n      )\n    })\n\n    it('does not allow unsupported block components', () => {\n      expect(\n        mrkdwn(\n          <ul>\n            <li>\n              <pre>pre</pre>\n            </li>\n            <li>\n              <blockquote>blockquote</blockquote>\n            </li>\n          </ul>\n        )\n      ).toBe('\u2022 pre\\n\u2022 blockquote')\n    })\n  })\n\n  describe('Link and mention', () => {\n    it('converts <a> tag to mrkdwn link format', () => {\n      expect(mrkdwn(<a href=\"https://example.com/\">Example</a>)).toBe(\n        '<https://example.com/|Example>'\n      )\n      expect(mrkdwn(<a href=\"mailto:mail@example.com\">E-mail</a>)).toBe(\n        '<mailto:mail@example.com|E-mail>'\n      )\n    })\n\n    it('allows using elements inside <a> tag', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <i>with</i> <b>text</b> <s>formatting</s>\n          </a>\n        )\n      ).toBe('<https://example.com/|_with_ *text* ~formatting~>')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <pre>{'Link\\npre-formatted\\ntext'}</pre>\n          </a>\n        )\n      ).toBe('<https://example.com/|```Link pre-formatted text```>')\n\n      // Apply link to the content if wrapped in block element\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <blockquote>\n              Link blockquote\n              <br />\n              (Single line only)\n            </blockquote>\n          </a>\n        )\n      ).toBe(\n        '&gt; <https://example.com/|Link blockquote (Single line only)>\\n&gt; '\n      )\n    })\n\n    it('does not allow multiline contents to prevent breaking link', () =>\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            Ignore\n            <br />\n            multiline\n          </a>\n        )\n      ).toBe('<https://example.com/|Ignore multiline>'))\n\n    it('is distributed to each content if wrapped in block elements', () =>\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            text\n            <p>paragraph</p>\n            <blockquote>blockquote</blockquote>\n          </a>\n        )\n      ).toBe(\n        '<https://example.com/|text>\\n\\n<https://example.com/|paragraph>\\n\\n&gt; <https://example.com/|blockquote>\\n&gt; '\n      ))\n\n    it('escapes chars in URL by percent encoding', () =>\n      expect(\n        mrkdwn(<a href='https://example.com/?regex=\"<(i|em)>\"'>escape test</a>)\n      ).toBe('<https://example.com/?regex=%22%3C(i%7Cem)%3E%22|escape test>'))\n\n    it('uses short syntax if the content and URL are exactly same', () => {\n      expect(\n        mrkdwn(<a href=\"https://example.com/\">https://example.com/</a>)\n      ).toBe('<https://example.com/>')\n\n      const complexURL = `https://example.com/?regex='<b>'&fwc=\"\uff0a\"`\n\n      expect(mrkdwn(<a href={complexURL}>{complexURL}</a>)).toBe(\n        `<https://example.com/?regex='&lt;b&gt;'&amp;fwc=\"\uff0a\">`\n      )\n    })\n\n    it('does not use short syntax even though having the same content if URL has included pipe', () =>\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/?q=a|b|c\">\n            https://example.com/?q=a|b|c\n          </a>\n        )\n      ).toBe('<https://example.com/?q=a%7Cb%7Cc|https://example.com/?q=a|b|c>'))\n\n    it('renders as plain text if href is empty', () =>\n      expect(mrkdwn(<a href=\"\">empty</a>)).toBe('empty'))\n\n    it('converts to channel link when referenced public channel ID', () => {\n      expect(mrkdwn(<a href=\"#C0123ABCD\" />)).toBe('<#C0123ABCD>')\n      expect(mrkdwn(<a href=\"#CLONGERCHANNELID\" />)).toBe('<#CLONGERCHANNELID>')\n      expect(mrkdwn(<a href=\"#CWXYZ9876\">Ignore contents</a>)).toBe(\n        '<#CWXYZ9876>'\n      )\n      expect(\n        mrkdwn(\n          <b>\n            <a href=\"#C0123ABCD\" />\n          </b>\n        )\n      ).toBe('*<#C0123ABCD>*')\n    })\n\n    it('converts to user mention when referenced user ID', () => {\n      expect(mrkdwn(<a href=\"@U0123ABCD\" />)).toBe('<@U0123ABCD>')\n      expect(mrkdwn(<a href=\"@ULONGERUSERID\" />)).toBe('<@ULONGERUSERID>')\n      expect(mrkdwn(<a href=\"@WGLOBALID\" />)).toBe('<@WGLOBALID>')\n      expect(mrkdwn(<a href=\"@UWXYZ9876\">Ignore contents</a>)).toBe(\n        '<@UWXYZ9876>'\n      )\n      expect(\n        mrkdwn(\n          <i>\n            <a href=\"@U0123ABCD\" />\n          </i>\n        )\n      ).toBe('_<@U0123ABCD>_')\n    })\n\n    it('converts to user group mention when referenced subteam ID', () => {\n      expect(mrkdwn(<a href=\"@S0123ABCD\" />)).toBe('<!subteam^S0123ABCD>')\n      expect(mrkdwn(<a href=\"@SLONGERSUBTEAMID\" />)).toBe(\n        '<!subteam^SLONGERSUBTEAMID>'\n      )\n      expect(mrkdwn(<a href=\"@SWXYZ9876\">Ignore contents</a>)).toBe(\n        '<!subteam^SWXYZ9876>'\n      )\n      expect(\n        mrkdwn(\n          <s>\n            <a href=\"@S0123ABCD\" />\n          </s>\n        )\n      ).toBe('~<!subteam^S0123ABCD>~')\n    })\n\n    it('converts special mentions', () => {\n      expect(mrkdwn(<a href=\"@here\" />)).toBe('<!here|here>')\n      expect(mrkdwn(<a href=\"@channel\" />)).toBe('<!channel|channel>')\n      expect(mrkdwn(<a href=\"@everyone\" />)).toBe('<!everyone|everyone>')\n      expect(mrkdwn(<a href=\"@here\">Ignore contents</a>)).toBe('<!here|here>')\n      expect(\n        mrkdwn(\n          <b>\n            <i>\n              <a href=\"@here\" />\n            </i>\n          </b>\n        )\n      ).toBe('*_<!here|here>_*')\n    })\n  })\n\n  describe('Time localization', () => {\n    const today = new Date()\n    const yesterday = new Date(today.getTime() - 86400000)\n    const tomorrow = new Date(today.getTime() + 86400000)\n\n    it('converts <time> tag to mrkdwn format', () => {\n      expect(\n        mrkdwn(\n          <time dateTime=\"1552212000\" fallback=\"fallback\">\n            {'{date_num}'}\n          </time>\n        )\n      ).toBe('<!date^1552212000^{date_num}|fallback>')\n    })\n\n    it('has aliased datetime prop into camelCase prop', () => {\n      expect(\n        mrkdwn(\n          // eslint-disable-next-line react/no-unknown-property\n          <time datetime={1552212000} fallback=\"fallback\">\n            {'{date_num}'}\n          </time>\n        )\n      ).toBe('<!date^1552212000^{date_num}|fallback>')\n\n      // Prefers to camelCase\n      expect(\n        mrkdwn(\n          <time\n            dateTime={'1234567890'}\n            datetime={1552212000} // eslint-disable-line react/no-unknown-property\n            fallback=\"fallback\"\n          >\n            {'{date_num}'}\n          </time>\n        )\n      ).toBe('<!date^1234567890^{date_num}|fallback>')\n    })\n\n    it('generates UTC fallback text from content if fallback attr is not defined', () => {\n      // 1552212000 => 2019-03-10 10:00:00 UTC (= 02:00 PST = 03:00 PDT)\n      expect(mrkdwn(<time dateTime={1552212000}>{'{date_num}'}</time>)).toBe(\n        '<!date^1552212000^{date_num}|2019-03-10>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{date}'}</time>)).toBe(\n        '<!date^1552212000^{date}|March 10th, 2019>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{date_short}'}</time>)).toBe(\n        '<!date^1552212000^{date_short}|Mar 10, 2019>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{date_long}'}</time>)).toBe(\n        '<!date^1552212000^{date_long}|Sunday, March 10th, 2019>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{time}'}</time>)).toBe(\n        '<!date^1552212000^{time}|10:00 AM>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{time_secs}'}</time>)).toBe(\n        '<!date^1552212000^{time_secs}|10:00:00 AM>'\n      )\n\n      // HTML entities\n      expect(\n        mrkdwn(<time dateTime={1552212000}>&lt;{'{date_num}'}&gt;</time>)\n      ).toBe('<!date^1552212000^&lt;{date_num}&gt;|&lt;2019-03-10&gt;>')\n\n      expect(\n        mrkdwn(<time dateTime={1552212000}>&#123;date_num&#125; &hearts;</time>)\n      ).toBe('<!date^1552212000^{date_num} \\u2665|2019-03-10 \\u2665>')\n    })\n\n    test.each`\n      dateTime     | format                      | contain\n      ${today}     | ${'{date_pretty}'}          | ${'Today'}\n      ${today}     | ${'{date_short_pretty}'}    | ${'Today'}\n      ${today}     | ${'{date_long_pretty}'}     | ${'Today'}\n      ${today}     | ${'At {date_pretty}'}       | ${'At today'}\n      ${today}     | ${'At {date_short_pretty}'} | ${'At today'}\n      ${today}     | ${'At {date_long_pretty}'}  | ${'At today'}\n      ${yesterday} | ${'{date_pretty}'}          | ${'Yesterday'}\n      ${yesterday} | ${'{date_short_pretty}'}    | ${'Yesterday'}\n      ${yesterday} | ${'{date_long_pretty}'}     | ${'Yesterday'}\n      ${yesterday} | ${'At {date_pretty}'}       | ${'At yesterday'}\n      ${yesterday} | ${'At {date_short_pretty}'} | ${'At yesterday'}\n      ${yesterday} | ${'At {date_long_pretty}'}  | ${'At yesterday'}\n      ${tomorrow}  | ${'{date_pretty}'}          | ${'Tomorrow'}\n      ${tomorrow}  | ${'{date_short_pretty}'}    | ${'Tomorrow'}\n      ${tomorrow}  | ${'{date_long_pretty}'}     | ${'Tomorrow'}\n      ${tomorrow}  | ${'At {date_pretty}'}       | ${'At tomorrow'}\n      ${tomorrow}  | ${'At {date_short_pretty}'} | ${'At tomorrow'}\n      ${tomorrow}  | ${'At {date_long_pretty}'}  | ${'At tomorrow'}\n    `(\n      'generates prettified fallback date \"$contain\" with format \"$format\"',\n      ({ dateTime, format, contain }) => {\n        expect(mrkdwn(<time dateTime={dateTime}>{format}</time>)).toContain(\n          `|${contain}>`\n        )\n      }\n    )\n\n    it('ignores any elements in children', () => {\n      const date = new Date(Date.UTC(2019, 2, 10, 10, 0, 0))\n\n      expect(\n        mrkdwn(\n          <time dateTime={date} fallback=\"fallback\">\n            <i>with</i> <b>text</b> <s>formatting</s>\n          </time>\n        )\n      ).toBe('<!date^1552212000^with text formatting|fallback>')\n\n      expect(\n        mrkdwn(\n          <time dateTime={date} fallback=\"fallback\">\n            Convert\n            <br />\n            line breaks\n            <br />\n            <br />\n            to a space\n          </time>\n        )\n      ).toBe('<!date^1552212000^Convert line breaks to a space|fallback>')\n\n      expect(\n        mrkdwn(\n          <time dateTime={date} fallback=\"fallback\">\n            <blockquote>test</blockquote>\n            <pre>test</pre>\n            <code>test</code>\n            <a href=\"https://example.com/\">test</a>\n          </time>\n        )\n      ).toBe('<!date^1552212000^testtesttesttest|fallback>')\n    })\n\n    it('integrates mrkdwn when <time> tag is linked', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <time dateTime={1552212000} fallback=\"2019-03-10\">\n              {'{date_num}'}\n            </time>\n          </a>\n        )\n      ).toBe('<!date^1552212000^{date_num}^https://example.com/|2019-03-10>')\n    })\n\n    it('escapes brackets in contents and fallback', () => {\n      // NOTE: We have to escape brackets but Slack won't decode entities in fallback.\n      expect(\n        mrkdwn(\n          <time dateTime={1552212000} fallback=\"<2019-03-10>\">\n            {'<{date_num}>'}\n          </time>\n        )\n      ).toBe('<!date^1552212000^&lt;{date_num}&gt;|&lt;2019-03-10&gt;>')\n    })\n\n    it('escapes divider in contents and fallback', () => {\n      expect(\n        mrkdwn(\n          <time dateTime={1552212000} fallback=\"by XXX | 2019-03-10\">\n            by XXX | {'{date_num}'}\n          </time>\n        )\n      ).toBe(\n        '<!date^1552212000^by XXX \\u01c0 {date_num}|by XXX \\u01c0 2019-03-10>'\n      )\n    })\n  })\n})\n"], "fixing_code": ["# Change Log\n\n## [Unreleased]\n\n### Fixed\n\n- Fix performance issues of tags in `<blockquote>`\n\n## v4.5.0 - 2021-12-02\n\n### Added\n\n- `autoFocus` prop for supported interactive elements ([#253](https://github.com/yhatt/jsx-slack/issues/253), [#254](https://github.com/yhatt/jsx-slack/pull/254))\n- Guide for setting up jsx-slack in Deno (Slack CLI) and esbuild ([#245](https://github.com/yhatt/jsx-slack/issues/245), [#252](https://github.com/yhatt/jsx-slack/pull/252))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#255](https://github.com/yhatt/jsx-slack/pull/255))\n\n## v4.4.3 - 2021-11-18\n\n### Fixed\n\n- Fix Deno's type error by adding manual type assertion for `<Blocks>` ([#245](https://github.com/yhatt/jsx-slack/issues/245), [#251](https://github.com/yhatt/jsx-slack/pull/251))\n\n## v4.4.2 - 2021-11-17\n\n### Fixed\n\n- Fix internal type of `<Blocks>` for making better type support for ESM CDN ([#245](https://github.com/yhatt/jsx-slack/issues/245), [#250](https://github.com/yhatt/jsx-slack/pull/250))\n\n## v4.4.1 - 2021-11-17\n\n### Fixed\n\n- Avoid using namespace alias and use isomorphic namespace in JSX runtime ([#249](https://github.com/yhatt/jsx-slack/pull/249))\n\n## v4.4.0 - 2021-11-17\n\n### Removed\n\n- Direct dependencies to `hast-util-to-mdast` and `he` ([#247](https://github.com/yhatt/jsx-slack/pull/247))\n\n### Changed\n\n- Upgrade development Node version to v16 LTS ([#246](https://github.com/yhatt/jsx-slack/pull/246))\n- Upgrade dependent packages to the latest version ([#246](https://github.com/yhatt/jsx-slack/pull/246))\n- Setup esbuild transpile and prebundling ([#247](https://github.com/yhatt/jsx-slack/pull/247))\n\n## v4.3.0 - 2021-06-25\n\n### Added\n\n- Support assigning [`submit_disabled` field](https://api.slack.com/reference/workflows/configuration-view) by setting `submit` prop as `false` in `<Modal type=\"workflow_step\">` ([#233](https://github.com/yhatt/jsx-slack/issues/233), [#234](https://github.com/yhatt/jsx-slack/pull/234))\n\n### Fixed\n\n- Broken JSDoc links in some IDEs ([#235](https://github.com/yhatt/jsx-slack/pull/235))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#236](https://github.com/yhatt/jsx-slack/pull/236))\n\n## v4.2.1 - 2021-06-18\n\n### Fixed\n\n- Fixed resolution error when using JSX runtime script through ES modules ([#231](https://github.com/yhatt/jsx-slack/issues/231), [#232](https://github.com/yhatt/jsx-slack/pull/232))\n\n## v4.2.0 - 2021-06-16\n\n### Added\n\n- ES modules support ([#227](https://github.com/yhatt/jsx-slack/pull/227))\n- CI test against Node 16 ([#228](https://github.com/yhatt/jsx-slack/pull/228))\n\n### Changed\n\n- Upgrade Node and dependent packages to the latest version ([#228](https://github.com/yhatt/jsx-slack/pull/228))\n- Rename `master` branch to `main` ([#229](https://github.com/yhatt/jsx-slack/pull/229))\n\n## v4.1.0 - 2021-06-14\n\n### Added\n\n- Added type exports that are similar to `@types/react` ([#226](https://github.com/yhatt/jsx-slack/pull/226))\n  - `FunctionCompnent` / `FC` (Alias to same types in `JSXSlack` namespace)\n  - `VoidFunctionComponent` / `VFC` (Alias to same types in `JSXSlack` namespace)\n  - `Node` (Similar to `ReactNode` but for jsx-slack. Alias to `JSXSlack.ChildElements`)\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#225](https://github.com/yhatt/jsx-slack/pull/225))\n\n## v4.0.0 - 2021-04-25\n\n### Breaking\n\n- Dropped Node 10 support ([#219](https://github.com/yhatt/jsx-slack/pull/219))\n\n### Changed\n\n- Allow containing `<Input>` and input components in `<Blocks>` ([#218](https://github.com/yhatt/jsx-slack/issues/218), [#220](https://github.com/yhatt/jsx-slack/pull/220))\n- Upgrade dependent packages to the latest version ([#219](https://github.com/yhatt/jsx-slack/pull/219))\n\n### Removed\n\n- Remove deprecated `jsxslack.raw` ([#221](https://github.com/yhatt/jsx-slack/pull/221))\n\n## v3.0.0 - 2021-02-25\n\n### Breaking\n\nThe package name has renamed from `@speee-js/jsx-slack` to `jsx-slack`.\n\n### Added\n\n- JSX automatic runtime support for TypeScript 4.1 ([#214](https://github.com/yhatt/jsx-slack/pull/214), [#194](https://github.com/yhatt/jsx-slack/issues/194))\n\n### Changed\n\n- Rename package from `@speee-js/jsx-slack` to `jsx-slack` ([#213](https://github.com/yhatt/jsx-slack/issues/213), [#215](https://github.com/yhatt/jsx-slack/pull/215))\n- GitHub repository has transferred to [yhatt/jsx-slack](https://github.com/yhatt/jsx-slack) ([#215](https://github.com/yhatt/jsx-slack/pull/215))\n\n## v2.6.0 - 2020-10-20\n\n### Added\n\n- [Configurable `dispatchAction` prop](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#input) for `<Input type=\"text\">` and `<Textarea>` (equivalent to [`dispatch_action_config` for the plain-text input](https://api.slack.com/reference/block-kit/block-elements#input)) ([#204](https://github.com/yhatt/jsx-slack/issues/204), [#205](https://github.com/yhatt/jsx-slack/pull/205))\n- [`<Mrkdwn raw>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#bypass-html-like-formatting) to bypass HTML-like formatting and auto-escaping ([#161](https://github.com/yhatt/jsx-slack/issues/161), [#207](https://github.com/yhatt/jsx-slack/pull/207))\n\n### Fixed\n\n- Escaped underscores within Korean emoji shorthand have broken ([#203](https://github.com/yhatt/jsx-slack/issues/203), [#206](https://github.com/yhatt/jsx-slack/pull/206))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#208](https://github.com/yhatt/jsx-slack/pull/208))\n\n## v2.5.1 - 2020-10-08\n\n### Added\n\n- [`<TimePicker>` interactive component](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#time-picker) ([#199](https://github.com/yhatt/jsx-slack/issues/199), [#202](https://github.com/yhatt/jsx-slack/pull/202))\n\n### Fixed\n\n- Update demo schema for `dispatchAction` prop ([#201](https://github.com/yhatt/jsx-slack/pull/201))\n\n## v2.5.0 - 2020-10-07\n\n### Changed\n\n- `<Input>` and input components are available in home tab container `<Home>` ([#195](https://github.com/yhatt/jsx-slack/issues/195), [#200](https://github.com/yhatt/jsx-slack/pull/200))\n- Allow using `<RadioButtonGroup>` and `<CheckboxGroup>` in message container `<Blocks>` ([#196](https://github.com/yhatt/jsx-slack/issues/196), [#197](https://github.com/yhatt/jsx-slack/pull/197))\n- Upgrade dependent packages to the latest version ([#191](https://github.com/yhatt/jsx-slack/pull/191), [#198](https://github.com/yhatt/jsx-slack/pull/198))\n\n### Added\n\n- `dispatchAction` prop for `<Input>` layout block and input components ([#200](https://github.com/yhatt/jsx-slack/pull/200))\n- Docs: [`jsxFragmentFactory` compiler option for TypeScript v4](https://github.com/yhatt/jsx-slack/blob/main/docs/how-to-setup-jsx-transpiler.md#typescript) ([#173](https://github.com/yhatt/jsx-slack/issues/173), [#191](https://github.com/yhatt/jsx-slack/pull/191))\n\n## v2.4.0 - 2020-07-30\n\n### Added\n\n- [`<Header>` component](https://github.com/yhatt/jsx-slack/blob/main/docs/layout-blocks.md#header) for layout block ([#184](https://github.com/yhatt/jsx-slack/issues/184), [#185](https://github.com/yhatt/jsx-slack/pull/185))\n\n### Fixed\n\n- Fix typos in `how-to-setup-jsx-transpiler.md` ([#183](https://github.com/yhatt/jsx-slack/pull/183) by [@mashabow](https://github.com/mashabow))\n\n## v2.3.0 - 2020-07-22\n\n### Added\n\n- `type` prop and [`workflow_step` type](https://api.slack.com/reference/workflows/configuration-view) for `<Modal>` ([#176](https://github.com/yhatt/jsx-slack/issues/176), [#177](https://github.com/yhatt/jsx-slack/pull/177))\n- React-compatible camelCased `dateTime` prop for `<time>` ([#179](https://github.com/yhatt/jsx-slack/issues/179), [#182](https://github.com/yhatt/jsx-slack/pull/182))\n- Test against Node 14 ([#181](https://github.com/yhatt/jsx-slack/pull/181))\n\n### Changed\n\n- `datetime` prop for `<time>` is now aliasing into added camelCased prop ([#179](https://github.com/yhatt/jsx-slack/issues/179), [#182](https://github.com/yhatt/jsx-slack/pull/182))\n- Upgrade dependent packages to the latest version ([#178](https://github.com/yhatt/jsx-slack/pull/178))\n\n## v2.2.1 - 2020-07-17\n\n### Fixed\n\n- Fix wrong extension for the path of type definition: `.js` -> `.d.ts` ([#171](https://github.com/yhatt/jsx-slack/pull/171))\n- Update how to generate Block Kit Builder URL in demo page ([#168](https://github.com/yhatt/jsx-slack/issues/168), [#172](https://github.com/yhatt/jsx-slack/pull/172))\n\n### Changed\n\n- Upgrade Node and dependent packages to the latest version ([#175](https://github.com/yhatt/jsx-slack/pull/175))\n\n## v2.2.0 - 2020-05-21\n\n### Added\n\n- [`<Call>` layout block component](https://github.com/yhatt/jsx-slack/blob/main/docs/layout-blocks.md#call) to show a card of registered call ([#164](https://github.com/yhatt/jsx-slack/issues/164), [#165](https://github.com/yhatt/jsx-slack/pull/165))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#166](https://github.com/yhatt/jsx-slack/pull/166))\n\n## v2.1.0 - 2020-05-01\n\n### Added\n\n- Accept [special initial conversation `current`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#special-initial-conversation-current) in `<ConversationsSelect>` ([#154](https://github.com/yhatt/jsx-slack/issues/154), [#155](https://github.com/yhatt/jsx-slack/pull/155))\n\n### Changed\n\n- Upgrade Node and dependent packages to the latest version ([#158](https://github.com/yhatt/jsx-slack/pull/158))\n- Refactor special link detection ([#159](https://github.com/yhatt/jsx-slack/pull/159))\n- Update demo REPL ([#157](https://github.com/yhatt/jsx-slack/pull/157))\n  - Move template examples on README into REPL demo\n  - Use Web fonts to get better rendering\n  - Disable preview button if Slack may return 414 error due to too long URL\n\n## v2.0.0 - 2020-04-23\n\n<p align=\"center\">\n  <img src=\"./demo/public/logo.svg\" width=\"100\" />\n</p>\n\njsx-slack v2 has improved JSX structure and built-in components to output the _real_ JSON from JSX!\n\n**[\u25b6\ufe0e See highlight of v2 updates](https://github.com/yhatt/jsx-slack/blob/main/docs/highlight/v2.md)**\n\n### [Breaking](https://github.com/yhatt/jsx-slack/blob/main/docs/highlight/v2.md#breaking-change)\n\n- Checked states defined in `<CheckboxGroup values>` and `<Checkbox checked>` do no longer merge\n\n* [Breaking for TypeScript](https://github.com/yhatt/jsx-slack/blob/main/docs/highlight/v2.md#changes-for-TypeScript)\n  - Require TypeScript >= 3.7 when using jsx-slack through TypeScript\n  - Container components have strict type checking for its children\n  - Exported type `JSXSlack.Child` and `JSXSlack.Children` have been renamed into `JSXSlack.ChildElement` and `JSXSlack.ChildElements` and no longer provided generics\n\n### Changed\n\n- Fully rewrote JSX structure to render from JSX to JSON directly ([#128](https://github.com/yhatt/jsx-slack/issues/128))\n- All built-in components can render the partial JSON of Block Kit\n- `<Home>` container now accepts `<Input type=\"hidden\" />` and custom transformer to store private metadata\n- `value` prop for `<Option>` has made optional to follow HTML specification\n- `confirm` prop for interactive block elements accepts the raw confirm composition object\n- `<a>` tag renders short syntax for hyperlink if possible\n- Throws error with more helpful message and stacktrace when there is invalid JSX structure ([#143](https://github.com/yhatt/jsx-slack/pull/143))\n- Bundle modules through rollup ([#144](https://github.com/yhatt/jsx-slack/pull/144))\n\n### Added\n\n- React-compatible public APIs: `JSXSlack.createElement`, `JSXSlack.isValidElement`, and `JSXSlack.Children` helpers\n- HTML-compatible `<Option selected>` and `<RadioButton checked>`\n- `value` prop as an alias into `initialXXX` prop in some interactive components\n- Added JSDoc to many public APIs and components\n- Support new JSX transpile via `automatic` runtime in Babel >= 7.9 _(experimental)_ ([#142](https://github.com/yhatt/jsx-slack/pull/142))\n- REPL demo now generates the permalink to specific JSX ([#149](https://github.com/yhatt/jsx-slack/pull/149))\n- Dark mode for REPL demo ([#150](https://github.com/yhatt/jsx-slack/pull/150))\n- New logo and logo type ([#152](https://github.com/yhatt/jsx-slack/pull/152))\n\n### Fixed\n\n- Suggest string literals on IDE when typing the kind of conversation in `<ConversationsSelect include>` ([#145](https://github.com/yhatt/jsx-slack/pull/145))\n- Fix typo in `README.md` ([#146](https://github.com/yhatt/jsx-slack/pull/146) by [@BLNCinema](https://github.com/BLNCinema))\n\n### Removed\n\n- Deprecated features in v1: `JSXSlack.legacyParser()` and `jsxslack.fragment`\n\n### Deprecated\n\n- `jsxslack.raw` template literal tag (It has become just an alias to `jsxslack` in v2)\n\n## v1.7.0 - 2020-04-07\n\n### Added\n\n- `style` prop for `<Confirm>` composition object component ([#114](https://github.com/yhatt/jsx-slack/issues/114), [#139](https://github.com/yhatt/jsx-slack/pull/139))\n- `<Button>` inherits its style to assigned confirm composition object if `<Confirm>` has not defined style ([#139](https://github.com/yhatt/jsx-slack/pull/139))\n\n### Changed\n\n- All props of `<Confirm>` component have made optional ([#138](https://github.com/yhatt/jsx-slack/issues/138), [#139](https://github.com/yhatt/jsx-slack/pull/139))\n- Upgrade dependent packages to the latest version ([#137](https://github.com/yhatt/jsx-slack/pull/137), [#140](https://github.com/yhatt/jsx-slack/pull/140))\n\n## v1.6.0 - 2020-03-20\n\n### Added\n\n- `responseUrlEnabled` property for modal's input component to `<ConversationsSelect>` and `<ChannelsSelect>` ([#134](https://github.com/yhatt/jsx-slack/issues/134), [#135](https://github.com/yhatt/jsx-slack/pull/135))\n- Experimental filter properties to `<ConversationsSelect>`: `include`, `excludeExternalSharedChannels`, and `excludeBotUsers` ([#133](https://github.com/yhatt/jsx-slack/issues/133), [#136](https://github.com/yhatt/jsx-slack/pull/136))\n\n## v1.5.1 - 2020-03-16\n\n### Added\n\n- `value` attribute for `<li>` element ([#130](https://github.com/yhatt/jsx-slack/pull/130))\n\n### Fixed\n\n- Fix mention detection to match to longer Slack ID ([#129](https://github.com/yhatt/jsx-slack/pull/129))\n\n### Changed\n\n- Upgrade deep dependencies ([#131](https://github.com/yhatt/jsx-slack/pull/131))\n\n## v1.5.0 - 2020-03-12\n\n### Changed\n\n- Improve escaping special characters to keep original character as possible ([#124](https://github.com/yhatt/jsx-slack/issues/124), [#125](https://github.com/yhatt/jsx-slack/pull/125))\n- Make JSX element for passing to Slack API serializable to JSON directly ([#126](https://github.com/yhatt/jsx-slack/pull/126))\n- `jsxslack` template literal tag now returns raw JSX element, or JSON if serializable ([#127](https://github.com/yhatt/jsx-slack/pull/127))\n\n### Added\n\n- `jsxslack.raw` template literal tag to generate JSX element always ([#127](https://github.com/yhatt/jsx-slack/pull/127))\n\n### Deprecated\n\n- Confusable `jsxslack.fragment` template literal tag has deprecated (Use `jsxslack` or `jsxslack.raw` instead) ([#127](https://github.com/yhatt/jsx-slack/pull/127))\n\n## v1.4.0 - 2020-03-06\n\n### Added\n\n- Support `type` attribute for `<ol>` element ([#117](https://github.com/yhatt/jsx-slack/pull/117))\n\n### Changed\n\n- Allow text formatting through mrkdwn and HTML-like elements in `<RadioButton>` ([#119](https://github.com/yhatt/jsx-slack/issues/119), [#122](https://github.com/yhatt/jsx-slack/pull/122))\n- Change spaces for indenting lists into unicode spaces that were based on measured width in Slack's font ([#117](https://github.com/yhatt/jsx-slack/pull/117))\n- Upgrade development Node and dependent packages to the latest version ([#123](https://github.com/yhatt/jsx-slack/pull/123))\n\n### Fixed\n\n- Prevent over-escaping for link and time formatting ([#118](https://github.com/yhatt/jsx-slack/issues/118), [#120](https://github.com/yhatt/jsx-slack/pull/120))\n\n### Deprecated\n\n- Mark the legacy parser as deprecated ([#121](https://github.com/yhatt/jsx-slack/pull/121))\n\n## v1.3.1 - 2020-02-14\n\n### Fixed\n\n- Fix regression about not rendered special spaces around the content ([#113](https://github.com/yhatt/jsx-slack/pull/113))\n\n## v1.3.0 - 2020-02-14\n\n### Changed\n\n- [Fully-rewrite HTML parser](https://github.com/yhatt/jsx-slack/blob/main/docs/html-like-formatting.md#about-parser) to reduce bundle size drastically (x43 smaller) ([#112](https://github.com/yhatt/jsx-slack/pull/112))\n\n### Added\n\n- [`legacyParser()`](https://github.com/yhatt/jsx-slack/blob/main/docs/html-like-formatting.md#legacy-parser) for switching into legacy parser ([#112](https://github.com/yhatt/jsx-slack/pull/112))\n\n## v1.2.0 - 2020-02-10\n\n### Added\n\n- [`<CheckboxGroup>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#checkbox-group) and [`<Checkbox>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#checkbox) interactive component ([#108](https://github.com/yhatt/jsx-slack/issues/108), [#109](https://github.com/yhatt/jsx-slack/pull/109))\n- [Redirect the content of `<small>` element into `description`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#redirect-small-into-description) in `<Checkbox>` and `<RadioButton>` ([#109](https://github.com/yhatt/jsx-slack/pull/109))\n- Add the build for ES modules to make tree-shakable ([#110](https://github.com/yhatt/jsx-slack/pull/110))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#107](https://github.com/yhatt/jsx-slack/pull/107))\n- Upgrade development Node to 12.15.0\n\n## v1.1.0 - 2020-01-20\n\n### Added\n\n- [Custom transformer](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#custom-transformer) for modal's private metadata ([#106](https://github.com/yhatt/jsx-slack/pull/106))\n\n### Changed\n\n- Mark `<Home>` container as stable ([#105](https://github.com/yhatt/jsx-slack/pull/105))\n\n## v1.0.0 - 2020-01-10\n\n### Breaking\n\n- Components for [the outdated dialog](https://api.slack.com/dialogs) provided in `jsx-slack/dialog` can no longer use ([#84](https://github.com/yhatt/jsx-slack/pull/84))\n- Drop Node 8 support ([#100](https://github.com/yhatt/jsx-slack/pull/100))\n\n### Added\n\n- `<Mrkdwn>` text composition component ([#73](https://github.com/yhatt/jsx-slack/issues/73), [#97](https://github.com/yhatt/jsx-slack/pull/97) by [@javaPhil](https://github.com/javaPhil), [#103](https://github.com/yhatt/jsx-slack/pull/103))\n\n### Fixed\n\n- Prevent over-escaping in valid emoji shorthand ([#98](https://github.com/yhatt/jsx-slack/issues/98), [#101](https://github.com/yhatt/jsx-slack/pull/101))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#92](https://github.com/yhatt/jsx-slack/pull/92), [#104](https://github.com/yhatt/jsx-slack/pull/104))\n- Upgrade development Node to 12.14.1 ([#104](https://github.com/yhatt/jsx-slack/pull/104))\n\n### Removed\n\n- Remove deprecated dialog support ([#84](https://github.com/yhatt/jsx-slack/pull/84), [#99](https://github.com/yhatt/jsx-slack/pull/99))\n- Get rid of `lodash.flattendeep` dependency ([#102](https://github.com/yhatt/jsx-slack/pull/102))\n\n## v0.12.0 - 2019-11-22\n\n### Added\n\n- Radio buttons for modal ([#88](https://github.com/yhatt/jsx-slack/issues/88), [#91](https://github.com/yhatt/jsx-slack/pull/91))\n  - `<RadioButtonGroup>` now can use in `<Modal>` container and acts as input component for modal\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#90](https://github.com/yhatt/jsx-slack/pull/90))\n\n## v0.11.1 - 2019-11-13\n\n### Fixed\n\n- Don't throw error even if `<Overflow>` has only one `<OverflowItem>` ([#85](https://github.com/yhatt/jsx-slack/issues/85), [#86](https://github.com/yhatt/jsx-slack/pull/86))\n- Fix 413 error from Block Kit Builder when translated huge JSON on REPL demo ([#82](https://github.com/yhatt/jsx-slack/pull/82))\n- Improve internal type definitions for overloaded props ([#83](https://github.com/yhatt/jsx-slack/pull/83))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#87](https://github.com/yhatt/jsx-slack/pull/87))\n\n## v0.11.0 - 2019-10-24\n\n### Added\n\n- Add (an experimental) `<Home>` container component for home tab ([#75](https://github.com/yhatt/jsx-slack/issues/75), [#78](https://github.com/yhatt/jsx-slack/pull/78))\n- [`<RadioButtonGroup>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#radio-button-group) and [`<RadioButton>`](https://github.com/yhatt/jsx-slack/blob/main/docs/block-elements.md#radio-button) interactive component for home tab ([#74](https://github.com/yhatt/jsx-slack/issues/74), [#80](https://github.com/yhatt/jsx-slack/pull/80))\n- \"Copy to clipboard\" button on REPL demo ([#77](https://github.com/yhatt/jsx-slack/pull/77))\n\n### Changed\n\n- Upgrade Node for development to v12 LTS ([#79](https://github.com/yhatt/jsx-slack/pull/79))\n\n### Fixed\n\n- Throw an error when using `<File>` in `<Modal>` ([#76](https://github.com/yhatt/jsx-slack/pull/76))\n- REPL demo can transfer the complete modal JSON to Block Kit Builder ([#77](https://github.com/yhatt/jsx-slack/pull/77))\n\n### Deprecated\n\n- Output warning about deprecated dialog components ([#72](https://github.com/yhatt/jsx-slack/pull/72))\n\n## v0.10.2 - 2019-10-11\n\n### Fixed\n\n- Make interpolated fragments in template literal work correctly ([#71](https://github.com/yhatt/jsx-slack/pull/71))\n\n## v0.10.1 - 2019-10-10\n\n### Fixed\n\n- Fix invalid array children in template literal ([#69](https://github.com/yhatt/jsx-slack/pull/69))\n\n### Changed\n\n- Upgrade Node and dependent packages to the latest version ([#70](https://github.com/yhatt/jsx-slack/pull/70))\n\n## v0.10.0 - 2019-10-02\n\n### Added\n\n- [Multi-select menus](https://api.slack.com/reference/block-kit/block-elements#multi_select) ([#56](https://github.com/yhatt/jsx-slack/issues/56), [#58](https://github.com/yhatt/jsx-slack/pull/58))\n- [Modals support](https://api.slack.com/block-kit/surfaces/modals) ([#57](https://github.com/yhatt/jsx-slack/issues/57))\n  - `<Modal>` container component ([#60](https://github.com/yhatt/jsx-slack/pull/60))\n  - `<Input>` layout block and component ([#61](https://github.com/yhatt/jsx-slack/pull/61))\n  - `<Textarea>` component ([#62](https://github.com/yhatt/jsx-slack/pull/62))\n  - Input-compatible props to select-like elements and `<DatePicker>` ([#63](https://github.com/yhatt/jsx-slack/pull/63))\n  - Intrinsic HTML elements of input components ([#65](https://github.com/yhatt/jsx-slack/pull/65))\n  - Add extra types for `<Input>` component ([#66](https://github.com/yhatt/jsx-slack/pull/66))\n  - Update REPL demo to support Modals ([#68](https://github.com/yhatt/jsx-slack/pull/68))\n\n### Changed\n\n- Bump dependent packages to the latest version ([#59](https://github.com/yhatt/jsx-slack/pull/59))\n- Check invalid elements in `<Blocks>` and `<Input>` strictly ([#64](https://github.com/yhatt/jsx-slack/pull/64))\n- Split test cases for Block Kit components into multiple files ([#66](https://github.com/yhatt/jsx-slack/pull/66))\n- Organize documentation ([#20](https://github.com/yhatt/jsx-slack/issues/20), [#67](https://github.com/yhatt/jsx-slack/pull/67))\n\n### Deprecated\n\n- Mark `<Dialog>` as soft-deprecated in favor of Slack Modals ([#60](https://github.com/yhatt/jsx-slack/pull/60))\n\n## v0.9.2 - 2019-08-29\n\n### Fixed\n\n- Nested fragments fail ([#53](https://github.com/yhatt/jsx-slack/issues/53), [#54](https://github.com/yhatt/jsx-slack/pull/54))\n\n### Changed\n\n- Update dependent packages to the latest version ([#52](https://github.com/yhatt/jsx-slack/pull/52))\n\n## v0.9.1 - 2019-08-15\n\n### Fixed\n\n- Fix regression of not preserved `<pre>` whitespaces ([#48](https://github.com/yhatt/jsx-slack/issues/48), [#49](https://github.com/yhatt/jsx-slack/pull/49))\n\n### Changed\n\n- Update dependent packages to the latest version ([#50](https://github.com/yhatt/jsx-slack/pull/50))\n\n## v0.9.0 - 2019-08-15\n\n### Breaking\n\n- Disabled heuristic detection for HTML entities (Escaping works [just as same as React JSX](https://reactjs.org/docs/jsx-in-depth.html#string-literals)) ([#33](https://github.com/yhatt/jsx-slack/pull/33))\n- Some raw characters for mrkdwn link, `<`, `>`, and `&` will always escape to entities ([#45](https://github.com/yhatt/jsx-slack/issues/45))\n\n### Changed\n\n- Improve html entity decoding in JSX and template literal tag ([#33](https://github.com/yhatt/jsx-slack/pull/33), [#45](https://github.com/yhatt/jsx-slack/issues/45), [#47](https://github.com/yhatt/jsx-slack/pull/47))\n- Allow links in the inside of `<code>` and `<pre>` element ([#16](https://github.com/yhatt/jsx-slack/pull/16), [#46](https://github.com/yhatt/jsx-slack/pull/46))\n\n## v0.8.1 - 2019-08-07\n\n### Added\n\n- Better dialog support for `jsxslack` template literal ([#42](https://github.com/yhatt/jsx-slack/issues/42), [#43](https://github.com/yhatt/jsx-slack/pull/43))\n- Update REPL demo to add dialog example ([#43](https://github.com/yhatt/jsx-slack/pull/43))\n\n### Fixed\n\n- Coerce number-expected prop to integer ([#44](https://github.com/yhatt/jsx-slack/pull/44))\n\n## v0.8.0 - 2019-08-06\n\n### Added\n\n- Dialog support ([#19](https://github.com/yhatt/jsx-slack/issues/19), [#39](https://github.com/yhatt/jsx-slack/pull/39))\n\n### Fixed\n\n- Don't prevent generating `<SelectFragment>` with no options ([#41](https://github.com/yhatt/jsx-slack/pull/41))\n\n### Changed\n\n- Update `htm` to [v2.2.0](https://github.com/developit/htm/releases/tag/2.2.0) ([#38](https://github.com/yhatt/jsx-slack/pull/38))\n\n## v0.7.0 - 2019-07-29\n\n### Added\n\n- `<File>` block component ([#34](https://github.com/yhatt/jsx-slack/issues/34), [#35](https://github.com/yhatt/jsx-slack/pull/35))\n- `jsxslack.fragment` template literal tag ([#32](https://github.com/yhatt/jsx-slack/pull/32))\n- Codecov integration and coverage badge ([#36](https://github.com/yhatt/jsx-slack/pull/36))\n\n### Changed\n\n- Update dependent packages to the latest version ([#37](https://github.com/yhatt/jsx-slack/pull/37))\n\n## v0.6.0 - 2019-07-20\n\n### Added\n\n- Convert `<span>` in `<Context>` into mrkdwn element ([#26](https://github.com/yhatt/jsx-slack/issues/26), [#31](https://github.com/yhatt/jsx-slack/pull/31))\n- `<Fragment>` built-in component ([#29](https://github.com/yhatt/jsx-slack/pull/29))\n\n## v0.5.1 - 2019-07-14\n\n### Added\n\n- Support mention to global user ID for Enterprise Grid ([#25](https://github.com/yhatt/jsx-slack/pull/25))\n\n### Changed\n\n- Update dependent packages to the latest version ([#28](https://github.com/yhatt/jsx-slack/pull/28))\n\n## v0.5.0 - 2019-06-28\n\n### Added\n\n- Support Node.js 12 ([#23](https://github.com/yhatt/jsx-slack/pull/23))\n\n### Changed\n\n- Make interchangeable with `<Image>` component and intrinsic `<img>` tag ([#21](https://github.com/yhatt/jsx-slack/pull/21))\n- Upgrade dependent packages to the latest version ([#24](https://github.com/yhatt/jsx-slack/pull/24))\n\n### Removed\n\n- Remove deprecated `<Block>` component ([#22](https://github.com/yhatt/jsx-slack/pull/22))\n\n## v0.4.3 - 2019-05-15\n\n### Fixed\n\n- Fix vanishing styled channel links and mentions ([#15](https://github.com/yhatt/jsx-slack/issues/15), [#17](https://github.com/yhatt/jsx-slack/pull/17))\n\n### Changed\n\n- Upgrade dependent packages to the latest version ([#18](https://github.com/yhatt/jsx-slack/pull/18))\n\n## v0.4.2 - 2019-04-13\n\n### Added\n\n- Add `style` prop for `<Button>` component ([#13](https://github.com/yhatt/jsx-slack/issues/13), [#14](https://github.com/yhatt/jsx-slack/pull/14))\n\n## v0.4.1 - 2019-03-13\n\n### Added\n\n- `<Blocks>` container component ([#12](https://github.com/yhatt/jsx-slack/pull/12))\n\n### Deprecated\n\n- Mark a confusable `<Block>` fragment component as deprecated in favor of added `<Blocks>` ([#11](https://github.com/yhatt/jsx-slack/issues/11), [#12](https://github.com/yhatt/jsx-slack/pull/12))\n\n## v0.4.0 - 2019-03-12\n\n### Added\n\n- Support nested list ([#10](https://github.com/yhatt/jsx-slack/pull/10))\n\n## v0.3.0 - 2019-03-11\n\n### Added\n\n- Add `<SelectFragment>` component ([#9](https://github.com/yhatt/jsx-slack/pull/9))\n\n### Changed\n\n- Right-aligned number in ordered list ([#8](https://github.com/yhatt/jsx-slack/pull/8))\n\n## v0.2.0 - 2019-03-07\n\n### Added\n\n- `jsxslack` template literal tag for using jsx-slack without transpiler, powered by [htm](https://github.com/developit/htm) ([#6](https://github.com/yhatt/jsx-slack/issues/6), [#7](https://github.com/yhatt/jsx-slack/pull/7))\n\n### Fixed\n\n- Improve `README.md` with some minor fixes ([#4](https://github.com/yhatt/jsx-slack/pull/4))\n- Revert ignored audit ([#5](https://github.com/yhatt/jsx-slack/pull/5))\n\n## v0.1.0 - 2019-03-01\n\n- Initial release.\n", "// An internal HTML tag and emoji shorthand should not escape\nconst preventEscapeRegex =\n  /(<.*?>|:[-a-z0-9\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cd\u00ce\u00cf\u00d1\u00d3\u00d4\u00d5\u00d6\u0152\u0153\u00d9\u00da\u00db\u00dc\u0178\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00ff_\uff3f+\uff0b'\\u1100-\\u11ff\\u2e80-\\u2fd5\\u3005\\u3041-\\u3096\\u30a0-\\u30ff\\u3130-\\u318f\\u3400-\\u4db5\\u4e00-\\u9fcb\\ua960-\\ua97f\\uac00-\\ud7ff\\uff10-\\uff19\\uff41-\\uff5a\\uff61-\\uff9f]+:)/\n\nconst generateReplacerForEscape = (fallback: string) => (matched: string) =>\n  `<span data-escape=\"${fallback.repeat(matched.length)}\">${matched}</span>`\n\nexport const escapeReplacers = {\n  blockquote: (partial: string) =>\n    partial\n      .replace(/^((?:<.*?>)*)(.{4})/gm, (matched, leading, character) =>\n        character === '&gt;' ? `${leading}\\u00ad&gt;` : matched\n      )\n      .replace(\n        /^((?:<.*?>)*)(\uff1e)/gm,\n        (_, leading, character) =>\n          `${leading}${generateReplacerForEscape('\\u00ad\uff1e')(character)}`\n      ),\n  bold: (partial: string) =>\n    partial\n      .replace(/\\*+/g, generateReplacerForEscape('\\u2217'))\n      .replace(/\uff0a+/g, generateReplacerForEscape('\\ufe61')),\n  italic: (partial: string) =>\n    partial\n      .replace(/_+/g, generateReplacerForEscape('\\u02cd'))\n      .replace(/\uff3f+/g, generateReplacerForEscape('\\u2e0f')),\n  code: (partial: string) =>\n    partial\n      .replace(/`+/g, generateReplacerForEscape('\\u02cb'))\n      .replace(/\uff40+/g, generateReplacerForEscape('\\u02cb')),\n  strikethrough: (partial: string) =>\n    partial.replace(/~+/g, generateReplacerForEscape('\\u223c')),\n} as const\n\nconst escapeCharsDefaultReplacer = (partial: string) =>\n  Object.values(escapeReplacers).reduce((p, fn) => fn(p), partial)\n\nexport const escapeChars = (\n  mrkdwn: string,\n  replacer: (partial: string) => string = escapeCharsDefaultReplacer\n) =>\n  mrkdwn\n    .split(preventEscapeRegex)\n    .reduce(\n      (acc, str, i) => [...acc, i % 2 ? str : replacer(str)],\n      [] as string[]\n    )\n    .join('')\n\nexport const escapeEntity = (str: string) =>\n  str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\nconst replaceUnmatchedString = (\n  str: string,\n  capturedMatcher: RegExp,\n  replacer: (fragment: string) => string | ConcatArray<string>\n) =>\n  str\n    .split(capturedMatcher)\n    .reduce((acc, s, i) => acc.concat(i % 2 ? s : replacer(s)), [] as string[])\n    .join('')\n\nexport const escapeEverythingContents = (str: string) =>\n  replaceUnmatchedString(str, /(<[\\s\\S]*?>)/, (s) =>\n    replaceUnmatchedString(s, /(&\\w+;)/, (ss) =>\n      [...ss].map((x) => `&#${x.codePointAt(0)};`)\n    )\n  )\n\nexport const decodeEntity = (obj: any) => {\n  if (typeof obj === 'string')\n    return obj.replace(/&(amp|gt|lt|quot|#\\d+);/g, (_, entity) => {\n      if (entity.startsWith('#'))\n        return String.fromCodePoint(Number.parseInt(entity.slice(1), 10))\n\n      return { amp: '&', gt: '>', lt: '<', quot: '\"' }[entity]\n    })\n\n  return obj\n}\n", "/** @jsx JSXSlack.h */\n/** @jsxFrag JSXSlack.Fragment */\nimport { JSXSlack } from '../src/index'\nimport { mrkdwn } from '../src/mrkdwn/index'\n\nbeforeEach(() => JSXSlack.exactMode(false))\n\ndescribe('HTML parser for mrkdwn', () => {\n  it('throws error when using not supported tag', () => {\n    // @ts-expect-error\n    expect(() => mrkdwn(<div>test</div>)).toThrow(/unknown/i)\n  })\n\n  // https://api.slack.com/messaging/composing/formatting#escaping\n  describe('Escape entity', () => {\n    it('replaces \"&\" with \"&amp;\"', () => {\n      expect(mrkdwn('&&&')).toBe('&amp;&amp;&amp;')\n      expect(mrkdwn('&heart;')).toBe('&amp;heart;')\n    })\n\n    it('allows double escaping', () => {\n      expect(mrkdwn('true &amp;& false')).toBe('true &amp;amp;&amp; false')\n      expect(mrkdwn('A&lt;=&gt;B')).toBe('A&amp;lt;=&amp;gt;B')\n    })\n\n    it('replaces \"<\" with \"&lt;\"', () => expect(mrkdwn('a<2')).toBe('a&lt;2'))\n    it('replaces \">\" with \"&gt;\"', () => expect(mrkdwn('b>0')).toBe('b&gt;0'))\n\n    it('does not conflict element-like string with internals', () => {\n      expect(mrkdwn('<br />')).toBe('&lt;br /&gt;')\n      expect(mrkdwn('<<pre:0>>')).toBe('&lt;&lt;pre:0&gt;&gt;')\n    })\n  })\n\n  describe('HTML entities', () => {\n    it('decodes HTML entities passed as JSX', () =>\n      expect(mrkdwn(<i>&hearts;</i>)).toBe('_\\u2665_'))\n\n    it('re-encodes special characters in Slack', () =>\n      expect(mrkdwn(<i>&lt;&amp;&gt;</i>)).toBe('_&lt;&amp;&gt;_'))\n\n    it('does not decode HTML entities passed as string literal', () => {\n      expect(mrkdwn(<i>{'&hearts;'}</i>)).toBe('_&amp;hearts;_')\n      expect(mrkdwn(<i>{'&lt;&amp;&gt;'}</i>)).toBe(\n        '_&amp;lt;&amp;amp;&amp;gt;_'\n      )\n      expect(mrkdwn(<i>&lt;{'<mixed>'}&gt;</i>)).toBe('_&lt;&lt;mixed&gt;&gt;_')\n    })\n\n    it('keeps special spaces around the content', () => {\n      expect(\n        mrkdwn(\n          <i>\n            {'  '}test{'  '}\n          </i>\n        )\n      ).toBe('_test_')\n      expect(mrkdwn(<i>&#9;&#9;tab&#9;&#9;</i>)).toBe('_tab_')\n      expect(\n        mrkdwn(<i>&thinsp;&nbsp;&ensp;&emsp;sp&emsp;&ensp;&nbsp;&thinsp;</i>)\n      ).toBe('_\\u2009\\u00a0\\u2002\\u2003sp\\u2003\\u2002\\u00a0\\u2009_')\n    })\n  })\n\n  describe('Italic', () => {\n    it('replaces <i> tag to italic markup', () =>\n      expect(mrkdwn(<i>Hello</i>)).toBe('_Hello_'))\n\n    it('replaces <em> tag to italic markup', () =>\n      expect(mrkdwn(<em>Hello</em>)).toBe('_Hello_'))\n\n    it('allows containing the other markup', () =>\n      expect(\n        mrkdwn(\n          <i>\n            Hello, <b>World</b>!\n          </i>\n        )\n      ).toBe('_Hello, *World*!_'))\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <i>\n            <i>Double</i>\n          </i>\n        )\n      ).toBe('_Double_'))\n\n    it('allows containing underscore by using fallback of date formatting', () => {\n      expect(mrkdwn(<i>italic_text</i>)).toBe(\n        '_italic<!date^00000000^{_}|_>text_'\n      )\n\n      // Full-width underscore (Alternative for italic markup)\n      expect(mrkdwn(<i>Hello, \uff3fWorld\uff3f!</i>)).toBe(\n        '_Hello, <!date^00000000^{_}|\uff3f>World<!date^00000000^{_}|\uff3f>!_'\n      )\n    })\n\n    it('replaces underscore with similar character within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <i>_test_</i>\n          </a>\n        )\n      ).toBe('<https://example.com/|_\\u02cdtest\\u02cd_>')\n\n      expect(\n        mrkdwn(\n          <i>\n            <a href=\"https://example.com/\">_test_</a>\n          </i>\n        )\n      ).toBe('_<https://example.com/|\\u02cdtest\\u02cd>_')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <i>\uff3ftest\uff3f</i>\n          </a>\n        )\n      ).toBe('<https://example.com/|_\\u2e0ftest\\u2e0f_>')\n\n      expect(\n        mrkdwn(\n          <i>\n            <a href=\"https://example.com/\">\uff3ftest\uff3f</a>\n          </i>\n        )\n      ).toBe('_<https://example.com/|\\u2e0ftest\\u2e0f>_')\n    })\n\n    it('does not escape underscore contained in valid emoji shorthand', () => {\n      expect(mrkdwn(<i>:arrow_down:</i>)).toBe('_:arrow_down:_')\n      expect(mrkdwn(<i>:\u7d75\uff3f\u6587\u5b57:</i>)).toBe('_:\u7d75\uff3f\u6587\u5b57:_')\n    })\n\n    it('does not escape underscore contained in valid link', () => {\n      expect(\n        mrkdwn(\n          <i>\n            <a href=\"https://example.com/a_b_c\">_link_</a>\n          </i>\n        )\n      ).toBe('_<https://example.com/a_b_c|\\u02cdlink\\u02cd>_')\n    })\n\n    it('does not escape underscore contained in valid time formatting', () => {\n      // NOTE: Fallback text will render as plain text even if containing character for formatting\n      expect(\n        mrkdwn(\n          <i>\n            <time dateTime={1234567890} fallback=\"fall_back\">\n              {'{date_num} {time_secs}'}\n            </time>\n          </i>\n        )\n      ).toBe('_<!date^1234567890^{date_num} {time_secs}|fall_back>_')\n    })\n\n    it('applies markup per each lines when text has multiline', () => {\n      expect(\n        mrkdwn(\n          <i>\n            foo\n            <br />\n            bar\n          </i>\n        )\n      ).toBe('_foo_\\n_bar_')\n\n      expect(\n        mrkdwn(\n          <i>\n            <p>foo</p>\n            <p>bar</p>\n          </i>\n        )\n      ).toBe('_foo_\\n\\n_bar_')\n    })\n\n    it('inserts invisible spaces around markup chars when rendered in exact mode', () => {\n      JSXSlack.exactMode(true)\n      expect(mrkdwn(<i>Hello</i>)).toBe('\\u200b_\\u200bHello\\u200b_\\u200b')\n    })\n  })\n\n  describe('Bold', () => {\n    it('replaces <b> tag to bold markup', () =>\n      expect(mrkdwn(<b>Hello</b>)).toBe('*Hello*'))\n\n    it('replaces <strong> tag to bold markup', () =>\n      expect(mrkdwn(<strong>Hello</strong>)).toBe('*Hello*'))\n\n    it('allows containing the other markup', () =>\n      expect(\n        mrkdwn(\n          <b>\n            Hello, <i>World</i>!\n          </b>\n        )\n      ).toBe('*Hello, _World_!*'))\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <b>\n            <b>Double</b>\n          </b>\n        )\n      ).toBe('*Double*'))\n\n    it('allows containing asterisk by using fallback of date formatting', () => {\n      expect(mrkdwn(<b>bold*text</b>)).toBe('*bold<!date^00000000^{_}|*>text*')\n\n      // Full-width asterisk (Alternative for bold markup)\n      expect(mrkdwn(<b>Hello, \uff0aWorld\uff0a!</b>)).toBe(\n        '*Hello, <!date^00000000^{_}|\uff0a>World<!date^00000000^{_}|\uff0a>!*'\n      )\n    })\n\n    it('replaces asterisk with similar character within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <b>*test*</b>\n          </a>\n        )\n      ).toBe('<https://example.com/|*\\u2217test\\u2217*>')\n\n      expect(\n        mrkdwn(\n          <b>\n            <a href=\"https://example.com/\">*test*</a>\n          </b>\n        )\n      ).toBe('*<https://example.com/|\\u2217test\\u2217>*')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <b>\uff0atest\uff0a</b>\n          </a>\n        )\n      ).toBe('<https://example.com/|*\\ufe61test\\ufe61*>')\n\n      expect(\n        mrkdwn(\n          <b>\n            <a href=\"https://example.com/\">\uff0atest\uff0a</a>\n          </b>\n        )\n      ).toBe('*<https://example.com/|\\ufe61test\\ufe61>*')\n    })\n\n    it('applies markup per each lines when text has multiline', () => {\n      expect(\n        mrkdwn(\n          <b>\n            foo\n            <br />\n            bar\n          </b>\n        )\n      ).toBe('*foo*\\n*bar*')\n\n      expect(\n        mrkdwn(\n          <b>\n            <p>foo</p>\n            <p>bar</p>\n          </b>\n        )\n      ).toBe('*foo*\\n\\n*bar*')\n    })\n\n    it('inserts invisible spaces around markup chars when rendered in exact mode', () => {\n      JSXSlack.exactMode(true)\n      expect(mrkdwn(<b>Hello</b>)).toBe('\\u200b*\\u200bHello\\u200b*\\u200b')\n    })\n  })\n\n  describe('Strikethrough', () => {\n    it('replaces <s> tag to strikethrough markup', () =>\n      expect(mrkdwn(<s>Hello</s>)).toBe('~Hello~'))\n\n    it('replaces <strike> tag to strikethrough markup', () =>\n      expect(mrkdwn(<strike>Hello</strike>)).toBe('~Hello~'))\n\n    it('replaces <del> tag to strikethrough markup', () =>\n      expect(mrkdwn(<del>Hello</del>)).toBe('~Hello~'))\n\n    it('allows containing the other markup', () =>\n      expect(\n        mrkdwn(\n          <s>\n            Hello, <b>World</b>!\n          </s>\n        )\n      ).toBe('~Hello, *World*!~'))\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <s>\n            <s>Double</s>\n          </s>\n        )\n      ).toBe('~Double~'))\n\n    it('allows containing tilde by using fallback of date formatting', () =>\n      expect(mrkdwn(<s>strike~through</s>)).toBe(\n        '~strike<!date^00000000^{_}|~>through~'\n      ))\n\n    it('replaces tilde with tilde operatpr within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <s>~strikethrough~</s>\n          </a>\n        )\n      ).toBe('<https://example.com/|~\\u223cstrikethrough\\u223c~>')\n\n      expect(\n        mrkdwn(\n          <s>\n            <a href=\"https://example.com/\">~strikethrough~</a>\n          </s>\n        )\n      ).toBe('~<https://example.com/|\\u223cstrikethrough\\u223c>~')\n    })\n\n    it('applies markup per each lines when text has multiline', () => {\n      expect(\n        mrkdwn(\n          <s>\n            foo\n            <br />\n            bar\n          </s>\n        )\n      ).toBe('~foo~\\n~bar~')\n\n      expect(\n        mrkdwn(\n          <s>\n            <p>foo</p>\n            <p>bar</p>\n          </s>\n        )\n      ).toBe('~foo~\\n\\n~bar~')\n    })\n\n    it('inserts invisible spaces around markup chars when rendered in exact mode', () => {\n      JSXSlack.exactMode(true)\n      expect(mrkdwn(<s>Hello</s>)).toBe('\\u200b~\\u200bHello\\u200b~\\u200b')\n    })\n  })\n\n  describe('Inline code', () => {\n    it('replaces <code> tag to inline code markup', () => {\n      expect(mrkdwn(<code>Inline code</code>)).toBe('`Inline code`')\n      expect(mrkdwn(<code>*allow* _using_ ~markup~</code>)).toBe(\n        '`*allow* _using_ ~markup~`'\n      )\n    })\n\n    it('renders HTML special characters correctly', () =>\n      expect(mrkdwn(<code>{'<abbr title=\"and\">&</abbr>'}</code>)).toBe(\n        '`&lt;abbr title=\"and\"&gt;&amp;&lt;/abbr&gt;`'\n      ))\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <code>\n            <code>Double</code>\n          </code>\n        )\n      ).toBe('`Double`'))\n\n    it('does never apply nested markup', () =>\n      expect(\n        mrkdwn(\n          <code>\n            <b>bold</b> <i>italic</i> <s>strikethrough</s>\n          </code>\n        )\n      ).toBe('`bold italic strikethrough`'))\n\n    it('allows containing backtick by using fallback of date formatting', () => {\n      expect(mrkdwn(<code>`code`</code>)).toBe(\n        '`<!date^00000000^{_}|`>code<!date^00000000^{_}|`>`'\n      )\n\n      // Full-width backtick (Alternative for inline code markup)\n      expect(mrkdwn(<code>\uff40code\uff40</code>)).toBe(\n        '`<!date^00000000^{_}|\uff40>code<!date^00000000^{_}|\uff40>`'\n      )\n    })\n\n    it('replaces backtick with similar character within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <code>`code`</code>\n          </a>\n        )\n      ).toBe('<https://example.com/|`\\u02cbcode\\u02cb`>')\n\n      expect(\n        mrkdwn(\n          <code>\n            <a href=\"https://example.com/\">`code`</a>\n          </code>\n        )\n      ).toBe('`<https://example.com/|\\u02cbcode\\u02cb>`')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <code>\uff40code\uff40</code>\n          </a>\n        )\n      ).toBe('<https://example.com/|`\\u02cbcode\\u02cb`>')\n\n      expect(\n        mrkdwn(\n          <code>\n            <a href=\"https://example.com/\">\uff40code\uff40</a>\n          </code>\n        )\n      ).toBe('`<https://example.com/|\\u02cbcode\\u02cb>`')\n    })\n\n    it('applies markup per each lines when code has multiline', () => {\n      expect(\n        mrkdwn(\n          <code>\n            foo\n            <br />\n            bar\n          </code>\n        )\n      ).toBe('`foo`\\n`bar`')\n\n      expect(\n        mrkdwn(\n          <code>\n            foo\n            <br />\n            <br />\n            bar\n          </code>\n        )\n      ).toBe('`foo`\\n\\n`bar`')\n    })\n\n    it('allows containing link', () => {\n      expect(\n        mrkdwn(\n          <>\n            <code>\n              <a href=\"https://example.com/\">{'<example>'}</a>\n            </code>\n            <br />\n            <code>\n              <a href=\"@channel\" />\n            </code>\n          </>\n        )\n      ).toBe('`<https://example.com/|&lt;example&gt;>`\\n`<!channel|channel>`')\n    })\n\n    it('allows containing time tag for localization', () => {\n      expect(\n        mrkdwn(\n          <code>\n            <time dateTime=\"1552212000\">{'{date_num}'}</time>\n          </code>\n        )\n      ).toBe('`<!date^1552212000^{date_num}|2019-03-10>`')\n    })\n\n    it('inserts invisible spaces around markup chars when rendered in exact mode', () => {\n      JSXSlack.exactMode(true)\n      expect(mrkdwn(<code>code</code>)).toBe('\\u200b`\\u200bcode\\u200b`\\u200b')\n    })\n  })\n\n  describe('Line break', () => {\n    it('replaces <br> tag to line break', () =>\n      expect(\n        mrkdwn(\n          <>\n            Hello,\n            <br />\n            <br />\n            <br />\n            World!\n          </>\n        )\n      ).toBe('Hello,\\n\\n\\nWorld!'))\n  })\n\n  describe('Paragraph', () => {\n    it('has no differences between 1 paragraph and plain rendering', () =>\n      expect(mrkdwn(<p>Hello!</p>)).toBe(mrkdwn('Hello!')))\n\n    it('makes a blank like between paragraphs', () => {\n      expect(\n        mrkdwn(\n          <>\n            <p>Hello!</p>\n            <p>World!</p>\n          </>\n        )\n      ).toBe('Hello!\\n\\nWorld!')\n\n      // Combination with plain text\n      expect(\n        mrkdwn(\n          <>\n            A<p>B</p>C\n          </>\n        )\n      ).toBe('A\\n\\nB\\n\\nC')\n    })\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <p>\n            <p>Double</p>\n          </p>\n        )\n      ).toBe('Double'))\n  })\n\n  describe('Blockquote', () => {\n    it('makes a blank like between blockquotes', () => {\n      expect(\n        mrkdwn(\n          <>\n            <blockquote>Hello!</blockquote>\n            <blockquote>World!</blockquote>\n          </>\n        )\n      ).toBe('&gt; Hello!\\n&gt; \\n\\n&gt; World!\\n&gt; ')\n\n      // Combination with plain text and line breaks\n      expect(\n        mrkdwn(\n          <>\n            A<blockquote>B</blockquote>C\n          </>\n        )\n      ).toBe('A\\n\\n&gt; B\\n&gt; \\n\\nC')\n\n      // Combination with paragraph\n      expect(\n        mrkdwn(\n          <>\n            <p>test</p>\n            <blockquote>\n              <p>foo</p>\n              <p>bar</p>\n            </blockquote>\n            <p>test</p>\n          </>\n        )\n      ).toBe('test\\n\\n&gt; foo\\n&gt; \\n&gt; bar\\n&gt; \\n\\ntest')\n\n      expect(\n        mrkdwn(\n          <b>\n            <blockquote>\n              <p>A</p>\n              <i>B</i>\n              <p>C</p>\n            </blockquote>\n          </b>\n        )\n      ).toBe('&gt; *A*\\n&gt; \\n&gt; *_B_*\\n&gt; \\n&gt; *C*\\n&gt; ')\n    })\n\n    it('renders many tags in the blockquote tag immediately', () => {\n      const startTime = Date.now()\n\n      mrkdwn(\n        <blockquote>\n          {[...Array(30)].map((_, i) => (\n            <b>{i}</b>\n          ))}\n        </blockquote>\n      )\n\n      const processTime = Date.now() - startTime\n      expect(processTime).toBeLessThan(1000)\n    })\n\n    it('ignores invalid double markup', () =>\n      expect(\n        mrkdwn(\n          <blockquote>\n            <blockquote>Double</blockquote>\n          </blockquote>\n        )\n      ).toBe('&gt; Double\\n&gt; '))\n\n    it('escapes blockquote mrkdwn character by inserting soft hyphen', () =>\n      expect(mrkdwn(<blockquote>&gt; blockquote</blockquote>)).toBe(\n        '&gt; \\u00ad&gt; blockquote\\n&gt; '\n      ))\n\n    it('escapes full-width quote character by using fallback of date formatting', () =>\n      expect(mrkdwn(<blockquote>\uff1eblockquote</blockquote>)).toBe(\n        '&gt; <!date^00000000^{_}|\uff1e>blockquote\\n&gt; '\n      ))\n\n    it('always inserts soft hyphen when included quote character within hyperlink', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <blockquote>&gt; blockquote</blockquote>\n          </a>\n        )\n      ).toBe('&gt; <https://example.com/|\\u00ad&gt; blockquote>\\n&gt; ')\n\n      expect(\n        mrkdwn(\n          <blockquote>\n            <a href=\"https://example.com/\">&gt; blockquote</a>\n          </blockquote>\n        )\n      ).toBe('&gt; <https://example.com/|\\u00ad&gt; blockquote>\\n&gt; ')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <blockquote>\uff1eblockquote</blockquote>\n          </a>\n        )\n      ).toBe('&gt; <https://example.com/|\\u00ad\uff1eblockquote>\\n&gt; ')\n\n      expect(\n        mrkdwn(\n          <blockquote>\n            <a href=\"https://example.com/\">\uff1eblockquote</a>\n          </blockquote>\n        )\n      ).toBe('&gt; <https://example.com/|\\u00ad\uff1eblockquote>\\n&gt; ')\n    })\n  })\n\n  describe('Pre-formatted text', () => {\n    it('makes line break and space between around contents', () => {\n      expect(\n        mrkdwn(\n          <>\n            foo<pre>{'pre\\nformatted\\ntext'}</pre>bar\n          </>\n        )\n      ).toBe('foo\\n```\\npre\\nformatted\\ntext\\n```\\nbar')\n\n      expect(\n        mrkdwn(\n          <>\n            <p>foo</p>\n            <pre>{'pre\\nformatted\\ntext'}</pre>\n            <p>bar</p>\n          </>\n        )\n      ).toBe('foo\\n\\n```\\npre\\nformatted\\ntext\\n```\\n\\nbar')\n    })\n\n    it('preserves whitespaces for indent', () => {\n      const preformatted = '{\\n  hello\\n}'\n      expect(mrkdwn(<pre>{preformatted}</pre>)).toBe('```\\n{\\n  hello\\n}\\n```')\n\n      // with <a> link\n      expect(\n        mrkdwn(\n          <pre>\n            {'{\\n  '}\n            <a href=\"https://example.com/\">hello</a>\n            {'\\n}'}\n          </pre>\n        )\n      ).toBe('```\\n{\\n  <https://example.com/|hello>\\n}\\n```')\n    })\n\n    it('allows wrapping by text format character', () =>\n      expect(\n        mrkdwn(\n          <b>\n            <i>\n              <pre>{'bold\\nand italic'}</pre>\n            </i>\n          </b>\n        )\n      ).toBe('*_```\\nbold\\nand italic\\n```_*'))\n\n    it('does not apply wrapped strikethrough by Slack restriction', () =>\n      expect(\n        mrkdwn(\n          <s>\n            <blockquote>\n              strikethrough and\n              <pre>{'quoted\\ntext'}</pre>\n            </blockquote>\n          </s>\n        )\n      ).toBe('&gt; ~strikethrough and~\\n&gt; ```\\nquoted\\ntext\\n```\\n&gt; '))\n\n    it('renders HTML special characters correctly', () =>\n      expect(mrkdwn(<pre>{'<abbr title=\"and\">&</abbr>'}</pre>)).toBe(\n        '```\\n&lt;abbr title=\"and\"&gt;&amp;&lt;/abbr&gt;\\n```'\n      ))\n\n    it('allows containing link', () => {\n      expect(\n        mrkdwn(\n          <pre>\n            <a href=\"https://example.com/\">example</a>\n          </pre>\n        )\n      ).toBe('```\\n<https://example.com/|example>\\n```')\n\n      // with format\n      expect(\n        mrkdwn(\n          <pre>\n            <a href=\"https://example.com/\">\n              <b>Bold</b> link\n            </a>\n            <br />\n            {'and plain\\ntext'}\n          </pre>\n        )\n      ).toBe('```\\n<https://example.com/|*Bold* link>\\nand plain\\ntext\\n```')\n    })\n  })\n\n  describe('List', () => {\n    it('converts unordered list to mimicked text', () => {\n      expect(\n        mrkdwn(\n          <ul>\n            <li>a</li>\n            <li>\n              <b>b</b>\n            </li>\n            <li>c</li>\n          </ul>\n        )\n      ).toBe('\u2022 a\\n\u2022 *b*\\n\u2022 c')\n    })\n\n    it('converts ordered list to plain text', () => {\n      expect(\n        mrkdwn(\n          <ol>\n            <li>a</li>\n            <li>b</li>\n            <li>\n              <code>c</code>\n            </li>\n          </ol>\n        )\n      ).toBe('1. a\\n2. b\\n3. `c`')\n    })\n\n    it('allows multiline content by aligned indent', () => {\n      expect(\n        mrkdwn(\n          <ul>\n            <li>\n              Hello, <br />\n              world!\n            </li>\n            <li>\n              <p>Paragraph</p>\n              <p>supported</p>\n            </li>\n          </ul>\n        )\n      ).toBe('\u2022 Hello,\\n\\u2007 world!\\n\u2022 Paragraph\\n\\u2007 \\n\\u2007 supported')\n\n      expect(\n        mrkdwn(\n          <ol>\n            <li>\n              Ordered\n              <br />\n              list\n            </li>\n            <li>\n              <p>Well</p>\n              <p>aligned</p>\n            </li>\n          </ol>\n        )\n      ).toBe('1. Ordered\\n\u2003\u200a list\\n2. Well\\n\u2003\u200a \\n\u2003\u200a aligned')\n    })\n\n    it('allows setting start number via start attribute in ordered list', () => {\n      expect(\n        mrkdwn(\n          <ol start={9}>\n            <li>Change</li>\n            <li>\n              Start\n              <br />\n              number\n            </li>\n          </ol>\n        )\n      ).toBe('\\u20079. Change\\n10. Start\\n\u2003\u2007\u200a number')\n\n      // Coerce to integer\n      expect(\n        mrkdwn(\n          <ol start={3.5}>\n            <li>test</li>\n          </ol>\n        )\n      ).toBe(\n        mrkdwn(\n          <ol start={3}>\n            <li>test</li>\n          </ol>\n        )\n      )\n    })\n\n    it('renders ordered number with lowercase latin alphabet when type attribute is \"a\"', () =>\n      expect(\n        mrkdwn(\n          <ol type={'a'} start={-1}>\n            <li>-1</li>\n            <li>0</li>\n            <li>1</li>\n            <li>2</li>\n            <li>3</li>\n          </ol>\n        )\n      ).toBe('-1. -1\\n\u20040. 0\\n\u2004\u200aa. 1\\n\u2004b. 2\\n\u2004\u2009c. 3'))\n\n    it('renders ordered number with uppercase latin alphabet when type attribute is \"A\"', () => {\n      expect(\n        mrkdwn(\n          <ol type={'A'} start={25}>\n            <li>25</li>\n            <li>26</li>\n            <li>27</li>\n          </ol>\n        )\n      ).toBe('\u2007\u2009Y. 25\\n\u2003Z. 26\\nAA. 27')\n\n      expect(\n        mrkdwn(\n          <ol type={'A'} start={700}>\n            <li>700</li>\n            <li>701</li>\n            <li>702</li>\n            <li>703</li>\n            <li>704</li>\n          </ol>\n        )\n      ).toBe('\u2003ZX. 700\\n\u2003ZY. 701\\n\u2003\u200aZZ. 702\\nAAA. 703\\nAAB. 704')\n    })\n\n    it('renders ordered number with lowercase roman numeric when type attribute is \"i\"', () =>\n      expect(\n        mrkdwn(\n          <ol type={'i'} start={-1}>\n            {[...Array(12)].map((_, i) => (\n              <li>{i - 1}</li>\n            ))}\n          </ol>\n        )\n      ).toBe(\n        '\u2005-1. -1\\n\u2007\u200a0. 0\\n\u2003\u2008i. 1\\n\u2003ii. 2\\n\u2002iii. 3\\n\u2004\u2009iv. 4\\n\u2007\u2009v. 5\\n\u2004\u2009vi. 6\\n\u2008vii. 7\\nviii. 8\\n\u2004\u2009ix. 9\\n\u2007\u2009x. 10'\n      ))\n\n    it('renders ordered number with uppercase roman numeric when type attribute is \"I\"', () => {\n      expect(\n        mrkdwn(\n          <ol type={'I'} start={45}>\n            {[...Array(10)].map((_, i) => (\n              <li>{i + 45}</li>\n            ))}\n          </ol>\n        )\n      ).toBe(\n        '\u2003\u200aXLV. 45\\n\u2002XLVI. 46\\n\u2005XLVII. 47\\nXLVIII. 48\\n\u2007XLIX. 49\\n\u2003\u2003\u2007\u200aL. 50\\n\u2003\u2003\u2004LI. 51\\n\u2003\u2003\u200aLII. 52\\n\u2003\u2002\u200aLIII. 53\\n\u2003\u2004\u2009LIV. 54'\n      )\n\n      expect(\n        mrkdwn(\n          <ol type={'I'} start={3991}>\n            {[...Array(10)].map((_, i) => (\n              <li>{i + 3991}</li>\n            ))}\n          </ol>\n        )\n      ).toBe(\n        '\u2003\u2004\u2009MMMCMXCI. 3991\\n\u2003\u2006MMMCMXCII. 3992\\n\u2007\u200aMMMCMXCIII. 3993\\n\u2002MMMCMXCIV. 3994\\n\u2003\u200aMMMCMXCV. 3995\\n\u2002MMMCMXCVI. 3996\\n\u2005MMMCMXCVII. 3997\\nMMMCMXCVIII. 3998\\n\u2007MMMCMXCIX. 3999\\n\u2003\u2003\u2003\u2003\u2003\u2003\u2004\u200a4000. 4000'\n      )\n    })\n\n    it('changes ordered number in the middle of list through value prop', () =>\n      expect(\n        mrkdwn(\n          <ol>\n            <li>1</li>\n            <li>2</li>\n            <li value={100}>100</li>\n            <li>101</li>\n            <li>102</li>\n          </ol>\n        )\n      ).toBe('\u2003\u2004\u200a1. 1\\n\u2003\u2004\u200a2. 2\\n100. 100\\n101. 101\\n102. 102'))\n\n    it('allows sub list', () => {\n      expect(\n        mrkdwn(\n          <ul>\n            <li>test</li>\n            <ul>\n              <li>sub-list with direct nesting</li>\n            </ul>\n            <li>\n              <ul>\n                <li>sub-list</li>\n                <li>\n                  and\n                  <ul>\n                    <li>sub-sub-list</li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        )\n      ).toBe(\n        '\u2022 test\\n\u2007 \u25e6 sub-list with direct nesting\\n\u2022 \u25e6 sub-list\\n\u2007 \u25e6 and\\n\u2007 \u2004\u200a \u25aa\ufe0e sub-sub-list'\n      )\n    })\n\n    it('allows sub ordered list', () => {\n      expect(\n        mrkdwn(\n          <ol start={2}>\n            <li>test</li>\n            <ol>\n              <li>sub-list with direct nesting</li>\n            </ol>\n            <li>\n              <ol>\n                <li>sub-list</li>\n                <li>\n                  and\n                  <ul>\n                    <li>sub-sub-list</li>\n                  </ul>\n                </li>\n              </ol>\n            </li>\n          </ol>\n        )\n      ).toBe(\n        '2. test\\n\u2003\u200a 1. sub-list with direct nesting\\n3. 1. sub-list\\n\u2003\u200a 2. and\\n\u2003\u200a \u2003\u200a \u25aa\ufe0e sub-sub-list'\n      )\n    })\n\n    it('does not allow unsupported block components', () => {\n      expect(\n        mrkdwn(\n          <ul>\n            <li>\n              <pre>pre</pre>\n            </li>\n            <li>\n              <blockquote>blockquote</blockquote>\n            </li>\n          </ul>\n        )\n      ).toBe('\u2022 pre\\n\u2022 blockquote')\n    })\n  })\n\n  describe('Link and mention', () => {\n    it('converts <a> tag to mrkdwn link format', () => {\n      expect(mrkdwn(<a href=\"https://example.com/\">Example</a>)).toBe(\n        '<https://example.com/|Example>'\n      )\n      expect(mrkdwn(<a href=\"mailto:mail@example.com\">E-mail</a>)).toBe(\n        '<mailto:mail@example.com|E-mail>'\n      )\n    })\n\n    it('allows using elements inside <a> tag', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <i>with</i> <b>text</b> <s>formatting</s>\n          </a>\n        )\n      ).toBe('<https://example.com/|_with_ *text* ~formatting~>')\n\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <pre>{'Link\\npre-formatted\\ntext'}</pre>\n          </a>\n        )\n      ).toBe('<https://example.com/|```Link pre-formatted text```>')\n\n      // Apply link to the content if wrapped in block element\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <blockquote>\n              Link blockquote\n              <br />\n              (Single line only)\n            </blockquote>\n          </a>\n        )\n      ).toBe(\n        '&gt; <https://example.com/|Link blockquote (Single line only)>\\n&gt; '\n      )\n    })\n\n    it('does not allow multiline contents to prevent breaking link', () =>\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            Ignore\n            <br />\n            multiline\n          </a>\n        )\n      ).toBe('<https://example.com/|Ignore multiline>'))\n\n    it('is distributed to each content if wrapped in block elements', () =>\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            text\n            <p>paragraph</p>\n            <blockquote>blockquote</blockquote>\n          </a>\n        )\n      ).toBe(\n        '<https://example.com/|text>\\n\\n<https://example.com/|paragraph>\\n\\n&gt; <https://example.com/|blockquote>\\n&gt; '\n      ))\n\n    it('escapes chars in URL by percent encoding', () =>\n      expect(\n        mrkdwn(<a href='https://example.com/?regex=\"<(i|em)>\"'>escape test</a>)\n      ).toBe('<https://example.com/?regex=%22%3C(i%7Cem)%3E%22|escape test>'))\n\n    it('uses short syntax if the content and URL are exactly same', () => {\n      expect(\n        mrkdwn(<a href=\"https://example.com/\">https://example.com/</a>)\n      ).toBe('<https://example.com/>')\n\n      const complexURL = `https://example.com/?regex='<b>'&fwc=\"\uff0a\"`\n\n      expect(mrkdwn(<a href={complexURL}>{complexURL}</a>)).toBe(\n        `<https://example.com/?regex='&lt;b&gt;'&amp;fwc=\"\uff0a\">`\n      )\n    })\n\n    it('does not use short syntax even though having the same content if URL has included pipe', () =>\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/?q=a|b|c\">\n            https://example.com/?q=a|b|c\n          </a>\n        )\n      ).toBe('<https://example.com/?q=a%7Cb%7Cc|https://example.com/?q=a|b|c>'))\n\n    it('renders as plain text if href is empty', () =>\n      expect(mrkdwn(<a href=\"\">empty</a>)).toBe('empty'))\n\n    it('converts to channel link when referenced public channel ID', () => {\n      expect(mrkdwn(<a href=\"#C0123ABCD\" />)).toBe('<#C0123ABCD>')\n      expect(mrkdwn(<a href=\"#CLONGERCHANNELID\" />)).toBe('<#CLONGERCHANNELID>')\n      expect(mrkdwn(<a href=\"#CWXYZ9876\">Ignore contents</a>)).toBe(\n        '<#CWXYZ9876>'\n      )\n      expect(\n        mrkdwn(\n          <b>\n            <a href=\"#C0123ABCD\" />\n          </b>\n        )\n      ).toBe('*<#C0123ABCD>*')\n    })\n\n    it('converts to user mention when referenced user ID', () => {\n      expect(mrkdwn(<a href=\"@U0123ABCD\" />)).toBe('<@U0123ABCD>')\n      expect(mrkdwn(<a href=\"@ULONGERUSERID\" />)).toBe('<@ULONGERUSERID>')\n      expect(mrkdwn(<a href=\"@WGLOBALID\" />)).toBe('<@WGLOBALID>')\n      expect(mrkdwn(<a href=\"@UWXYZ9876\">Ignore contents</a>)).toBe(\n        '<@UWXYZ9876>'\n      )\n      expect(\n        mrkdwn(\n          <i>\n            <a href=\"@U0123ABCD\" />\n          </i>\n        )\n      ).toBe('_<@U0123ABCD>_')\n    })\n\n    it('converts to user group mention when referenced subteam ID', () => {\n      expect(mrkdwn(<a href=\"@S0123ABCD\" />)).toBe('<!subteam^S0123ABCD>')\n      expect(mrkdwn(<a href=\"@SLONGERSUBTEAMID\" />)).toBe(\n        '<!subteam^SLONGERSUBTEAMID>'\n      )\n      expect(mrkdwn(<a href=\"@SWXYZ9876\">Ignore contents</a>)).toBe(\n        '<!subteam^SWXYZ9876>'\n      )\n      expect(\n        mrkdwn(\n          <s>\n            <a href=\"@S0123ABCD\" />\n          </s>\n        )\n      ).toBe('~<!subteam^S0123ABCD>~')\n    })\n\n    it('converts special mentions', () => {\n      expect(mrkdwn(<a href=\"@here\" />)).toBe('<!here|here>')\n      expect(mrkdwn(<a href=\"@channel\" />)).toBe('<!channel|channel>')\n      expect(mrkdwn(<a href=\"@everyone\" />)).toBe('<!everyone|everyone>')\n      expect(mrkdwn(<a href=\"@here\">Ignore contents</a>)).toBe('<!here|here>')\n      expect(\n        mrkdwn(\n          <b>\n            <i>\n              <a href=\"@here\" />\n            </i>\n          </b>\n        )\n      ).toBe('*_<!here|here>_*')\n    })\n  })\n\n  describe('Time localization', () => {\n    const today = new Date()\n    const yesterday = new Date(today.getTime() - 86400000)\n    const tomorrow = new Date(today.getTime() + 86400000)\n\n    it('converts <time> tag to mrkdwn format', () => {\n      expect(\n        mrkdwn(\n          <time dateTime=\"1552212000\" fallback=\"fallback\">\n            {'{date_num}'}\n          </time>\n        )\n      ).toBe('<!date^1552212000^{date_num}|fallback>')\n    })\n\n    it('has aliased datetime prop into camelCase prop', () => {\n      expect(\n        mrkdwn(\n          // eslint-disable-next-line react/no-unknown-property\n          <time datetime={1552212000} fallback=\"fallback\">\n            {'{date_num}'}\n          </time>\n        )\n      ).toBe('<!date^1552212000^{date_num}|fallback>')\n\n      // Prefers to camelCase\n      expect(\n        mrkdwn(\n          <time\n            dateTime={'1234567890'}\n            datetime={1552212000} // eslint-disable-line react/no-unknown-property\n            fallback=\"fallback\"\n          >\n            {'{date_num}'}\n          </time>\n        )\n      ).toBe('<!date^1234567890^{date_num}|fallback>')\n    })\n\n    it('generates UTC fallback text from content if fallback attr is not defined', () => {\n      // 1552212000 => 2019-03-10 10:00:00 UTC (= 02:00 PST = 03:00 PDT)\n      expect(mrkdwn(<time dateTime={1552212000}>{'{date_num}'}</time>)).toBe(\n        '<!date^1552212000^{date_num}|2019-03-10>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{date}'}</time>)).toBe(\n        '<!date^1552212000^{date}|March 10th, 2019>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{date_short}'}</time>)).toBe(\n        '<!date^1552212000^{date_short}|Mar 10, 2019>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{date_long}'}</time>)).toBe(\n        '<!date^1552212000^{date_long}|Sunday, March 10th, 2019>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{time}'}</time>)).toBe(\n        '<!date^1552212000^{time}|10:00 AM>'\n      )\n\n      expect(mrkdwn(<time dateTime={1552212000}>{'{time_secs}'}</time>)).toBe(\n        '<!date^1552212000^{time_secs}|10:00:00 AM>'\n      )\n\n      // HTML entities\n      expect(\n        mrkdwn(<time dateTime={1552212000}>&lt;{'{date_num}'}&gt;</time>)\n      ).toBe('<!date^1552212000^&lt;{date_num}&gt;|&lt;2019-03-10&gt;>')\n\n      expect(\n        mrkdwn(<time dateTime={1552212000}>&#123;date_num&#125; &hearts;</time>)\n      ).toBe('<!date^1552212000^{date_num} \\u2665|2019-03-10 \\u2665>')\n    })\n\n    test.each`\n      dateTime     | format                      | contain\n      ${today}     | ${'{date_pretty}'}          | ${'Today'}\n      ${today}     | ${'{date_short_pretty}'}    | ${'Today'}\n      ${today}     | ${'{date_long_pretty}'}     | ${'Today'}\n      ${today}     | ${'At {date_pretty}'}       | ${'At today'}\n      ${today}     | ${'At {date_short_pretty}'} | ${'At today'}\n      ${today}     | ${'At {date_long_pretty}'}  | ${'At today'}\n      ${yesterday} | ${'{date_pretty}'}          | ${'Yesterday'}\n      ${yesterday} | ${'{date_short_pretty}'}    | ${'Yesterday'}\n      ${yesterday} | ${'{date_long_pretty}'}     | ${'Yesterday'}\n      ${yesterday} | ${'At {date_pretty}'}       | ${'At yesterday'}\n      ${yesterday} | ${'At {date_short_pretty}'} | ${'At yesterday'}\n      ${yesterday} | ${'At {date_long_pretty}'}  | ${'At yesterday'}\n      ${tomorrow}  | ${'{date_pretty}'}          | ${'Tomorrow'}\n      ${tomorrow}  | ${'{date_short_pretty}'}    | ${'Tomorrow'}\n      ${tomorrow}  | ${'{date_long_pretty}'}     | ${'Tomorrow'}\n      ${tomorrow}  | ${'At {date_pretty}'}       | ${'At tomorrow'}\n      ${tomorrow}  | ${'At {date_short_pretty}'} | ${'At tomorrow'}\n      ${tomorrow}  | ${'At {date_long_pretty}'}  | ${'At tomorrow'}\n    `(\n      'generates prettified fallback date \"$contain\" with format \"$format\"',\n      ({ dateTime, format, contain }) => {\n        expect(mrkdwn(<time dateTime={dateTime}>{format}</time>)).toContain(\n          `|${contain}>`\n        )\n      }\n    )\n\n    it('ignores any elements in children', () => {\n      const date = new Date(Date.UTC(2019, 2, 10, 10, 0, 0))\n\n      expect(\n        mrkdwn(\n          <time dateTime={date} fallback=\"fallback\">\n            <i>with</i> <b>text</b> <s>formatting</s>\n          </time>\n        )\n      ).toBe('<!date^1552212000^with text formatting|fallback>')\n\n      expect(\n        mrkdwn(\n          <time dateTime={date} fallback=\"fallback\">\n            Convert\n            <br />\n            line breaks\n            <br />\n            <br />\n            to a space\n          </time>\n        )\n      ).toBe('<!date^1552212000^Convert line breaks to a space|fallback>')\n\n      expect(\n        mrkdwn(\n          <time dateTime={date} fallback=\"fallback\">\n            <blockquote>test</blockquote>\n            <pre>test</pre>\n            <code>test</code>\n            <a href=\"https://example.com/\">test</a>\n          </time>\n        )\n      ).toBe('<!date^1552212000^testtesttesttest|fallback>')\n    })\n\n    it('integrates mrkdwn when <time> tag is linked', () => {\n      expect(\n        mrkdwn(\n          <a href=\"https://example.com/\">\n            <time dateTime={1552212000} fallback=\"2019-03-10\">\n              {'{date_num}'}\n            </time>\n          </a>\n        )\n      ).toBe('<!date^1552212000^{date_num}^https://example.com/|2019-03-10>')\n    })\n\n    it('escapes brackets in contents and fallback', () => {\n      // NOTE: We have to escape brackets but Slack won't decode entities in fallback.\n      expect(\n        mrkdwn(\n          <time dateTime={1552212000} fallback=\"<2019-03-10>\">\n            {'<{date_num}>'}\n          </time>\n        )\n      ).toBe('<!date^1552212000^&lt;{date_num}&gt;|&lt;2019-03-10&gt;>')\n    })\n\n    it('escapes divider in contents and fallback', () => {\n      expect(\n        mrkdwn(\n          <time dateTime={1552212000} fallback=\"by XXX | 2019-03-10\">\n            by XXX | {'{date_num}'}\n          </time>\n        )\n      ).toBe(\n        '<!date^1552212000^by XXX \\u01c0 {date_num}|by XXX \\u01c0 2019-03-10>'\n      )\n    })\n  })\n})\n"], "filenames": ["CHANGELOG.md", "src/mrkdwn/escape.ts", "test/mrkdwn.tsx"], "buggy_code_start_loc": [3, 11, 587], "buggy_code_end_loc": [3, 14, 587], "fixing_code_start_loc": [4, 11, 588], "fixing_code_end_loc": [8, 13, 603], "type": "NVD-CWE-Other", "message": "jsx-slack is a library for building JSON objects for Slack Block Kit surfaces from JSX. In versions prior to 4.5.1 users are vulnerable to a regular expression denial-of-service (ReDoS) attack. If attacker can put a lot of JSX elements into `<blockquote>` tag, an internal regular expression for escaping characters may consume an excessive amount of computing resources. jsx-slack v4.5.1 has patched to a regex for escaping blockquote characters. Users are advised to upgrade as soon as possible.", "other": {"cve": {"id": "CVE-2021-43838", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-17T19:15:07.683", "lastModified": "2022-01-03T13:24:34.363", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "jsx-slack is a library for building JSON objects for Slack Block Kit surfaces from JSX. In versions prior to 4.5.1 users are vulnerable to a regular expression denial-of-service (ReDoS) attack. If attacker can put a lot of JSX elements into `<blockquote>` tag, an internal regular expression for escaping characters may consume an excessive amount of computing resources. jsx-slack v4.5.1 has patched to a regex for escaping blockquote characters. Users are advised to upgrade as soon as possible."}, {"lang": "es", "value": "jsx-slack es una biblioteca para construir objetos JSON para las superficies del Slack Block Kit desde JSX. En versiones anteriores a la 4.5.1, los usuarios son vulnerables a un ataque de denegaci\u00f3n de servicio por expresi\u00f3n regular (ReDoS). Si el atacante puede poner muchos elementos JSX en la etiqueta \"<blockquote>\", una expresi\u00f3n regular interna para escapar caracteres puede consumir una cantidad excesiva de recursos inform\u00e1ticos. jsx-slack versi\u00f3n v4.5.1 ha parcheado a una expresi\u00f3n regular para escapar caracteres de blockquote. Se recomienda a usuarios que se actualicen lo antes posible</blockquote>"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jsx-slack_project:jsx-slack:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "4.5.2", "matchCriteriaId": "7E7A11E3-74FF-4031-892F-552C8FB985A1"}]}]}], "references": [{"url": "https://github.com/yhatt/jsx-slack/commit/36e4a10405e4c7745333e245fcc5029c02c7065d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/yhatt/jsx-slack/security/advisories/GHSA-55xv-f85c-248q", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yhatt/jsx-slack/commit/36e4a10405e4c7745333e245fcc5029c02c7065d"}}