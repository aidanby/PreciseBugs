{"buggy_code": ["<?php\n/**\n * Log-in form for the \"member\" authentication method\n * @package framework\n * @subpackage security\n */\nclass MemberLoginForm extends LoginForm {\n\n\t/**\n\t * This field is used in the \"You are logged in as %s\" message\n\t * @var string\n\t */\n\tpublic $loggedInAsField = 'FirstName';\n\n\tprotected $authenticator_class = 'MemberAuthenticator';\n\t\n\t/**\n\t * Constructor\n\t *\n\t * @param Controller $controller The parent controller, necessary to\n\t *                               create the appropriate form action tag.\n\t * @param string $name The method on the controller that will return this\n\t *                     form object.\n\t * @param FieldList|FormField $fields All of the fields in the form - a\n\t *                                   {@link FieldList} of {@link FormField}\n\t *                                   objects.\n\t * @param FieldList|FormAction $actions All of the action buttons in the\n\t *                                     form - a {@link FieldList} of\n\t *                                     {@link FormAction} objects\n\t * @param bool $checkCurrentUser If set to TRUE, it will be checked if a\n\t *                               the user is currently logged in, and if\n\t *                               so, only a logout button will be rendered\n\t * @param string $authenticatorClassName Name of the authenticator class that this form uses.\n\t */\n\tpublic function __construct($controller, $name, $fields = null, $actions = null,\n\t\t\t\t\t\t\t\t$checkCurrentUser = true) {\n\n\t\t// This is now set on the class directly to make it easier to create subclasses\n\t\t// $this->authenticator_class = $authenticatorClassName;\n\n\t\t$customCSS = project() . '/css/member_login.css';\n\t\tif(Director::fileExists($customCSS)) {\n\t\t\tRequirements::css($customCSS);\n\t\t}\n\t\t\n\t\tif(isset($_REQUEST['BackURL'])) {\n\t\t\t$backURL = $_REQUEST['BackURL'];\n\t\t} else {\n\t\t\t$backURL = Session::get('BackURL');\n\t\t}\n\n\t\tif($checkCurrentUser && Member::currentUser() && Member::logged_in_session_exists()) {\n\t\t\t$fields = new FieldList(\n\t\t\t\tnew HiddenField(\"AuthenticationMethod\", null, $this->authenticator_class, $this)\n\t\t\t);\n\t\t\t$actions = new FieldList(\n\t\t\t\tnew FormAction(\"logout\", _t('Member.BUTTONLOGINOTHER', \"Log in as someone else\"))\n\t\t\t);\n\t\t} else {\n\t\t\tif(!$fields) {\n\t\t\t\t$label=singleton('Member')->fieldLabel(Member::config()->unique_identifier_field);\n\t\t\t\t$fields = new FieldList(\n\t\t\t\t\tnew HiddenField(\"AuthenticationMethod\", null, $this->authenticator_class, $this),\n\t\t\t\t\t// Regardless of what the unique identifer field is (usually 'Email'), it will be held in the\n\t\t\t\t\t// 'Email' value, below:\n\t\t\t\t\tnew TextField(\"Email\", $label, Session::get('SessionForms.MemberLoginForm.Email'), null, $this),\n\t\t\t\t\tnew PasswordField(\"Password\", _t('Member.PASSWORD', 'Password'))\n\t\t\t\t);\n\t\t\t\tif(Security::config()->autologin_enabled) {\n\t\t\t\t\t$fields->push(new CheckboxField(\n\t\t\t\t\t\t\"Remember\", \n\t\t\t\t\t\t_t('Member.REMEMBERME', \"Remember me next time?\")\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!$actions) {\n\t\t\t\t$actions = new FieldList(\n\t\t\t\t\tnew FormAction('dologin', _t('Member.BUTTONLOGIN', \"Log in\")),\n\t\t\t\t\tnew LiteralField(\n\t\t\t\t\t\t'forgotPassword',\n\t\t\t\t\t\t'<p id=\"ForgotPassword\"><a href=\"Security/lostpassword\">'\n\t\t\t\t\t\t. _t('Member.BUTTONLOSTPASSWORD', \"I've lost my password\") . '</a></p>'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif(isset($backURL)) {\n\t\t\t$fields->push(new HiddenField('BackURL', 'BackURL', $backURL));\n\t\t}\n\n\t\tparent::__construct($controller, $name, $fields, $actions);\n\n\t\t// Focus on the email input when the page is loaded\n\t\tRequirements::customScript(<<<JS\n\t\t\t(function() {\n\t\t\t\tvar el = document.getElementById(\"MemberLoginForm_LoginForm_Email\");\n\t\t\t\tif(el && el.focus) el.focus();\n\t\t\t})();\nJS\n\t\t);\n\t}\n\n\t/**\n\t * Get message from session\n\t */\n\tprotected function getMessageFromSession() {\n\t\tparent::getMessageFromSession();\n\t\tif(($member = Member::currentUser()) && !Session::get('MemberLoginForm.force_message')) {\n\t\t\t$this->message = _t(\n\t\t\t\t'Member.LOGGEDINAS', \n\t\t\t\t\"You're logged in as {name}.\", \n\t\t\t\tarray('name' => $member->{$this->loggedInAsField})\n\t\t\t);\n\t\t}\n\t\tSession::set('MemberLoginForm.force_message', false);\n\t}\n\n\n\t/**\n\t * Login form handler method\n\t *\n\t * This method is called when the user clicks on \"Log in\"\n\t *\n\t * @param array $data Submitted data\n\t */\n\tpublic function dologin($data) {\n\t\tif($this->performLogin($data)) {\n\t\t\t$this->logInUserAndRedirect($data);\n\t\t} else {\n\t\t\tif(array_key_exists('Email', $data)){\n\t\t\t\tSession::set('SessionForms.MemberLoginForm.Email', $data['Email']);\n\t\t\t\tSession::set('SessionForms.MemberLoginForm.Remember', isset($data['Remember']));\n\t\t\t}\n\n\t\t\tif(isset($_REQUEST['BackURL'])) $backURL = $_REQUEST['BackURL']; \n\t\t\telse $backURL = null; \n\n\t\t\tif($backURL) Session::set('BackURL', $backURL);\n\t\t\t\n\t\t\t// Show the right tab on failed login\n\t\t\t$loginLink = Director::absoluteURL($this->controller->Link('login'));\n\t\t\tif($backURL) $loginLink .= '?BackURL=' . urlencode($backURL);\n\t\t\t$this->controller->redirect($loginLink . '#' . $this->FormName() .'_tab');\n\t\t}\n\t}\n\n\t/**\n\t * Login in the user and figure out where to redirect the browser.\n\t *\n\t * The $data has this format\n\t * array(\n\t *   'AuthenticationMethod' => 'MemberAuthenticator',\n\t *   'Email' => 'sam@silverstripe.com',\n\t *   'Password' => '1nitialPassword',\n\t *   'BackURL' => 'test/link',\n\t *   [Optional: 'Remember' => 1 ]\n\t * )\n\t *\n\t * @param array $data\n\t * @return void\n\t */\n\tprotected function logInUserAndRedirect($data) {\n\t\tSession::clear('SessionForms.MemberLoginForm.Email');\n\t\tSession::clear('SessionForms.MemberLoginForm.Remember');\n\n\t\tif(Member::currentUser()->isPasswordExpired()) {\n\t\t\tif(isset($_REQUEST['BackURL']) && $backURL = $_REQUEST['BackURL']) {\n\t\t\t\tSession::set('BackURL', $backURL);\n\t\t\t}\n\t\t\t$cp = new ChangePasswordForm($this->controller, 'ChangePasswordForm');\n\t\t\t$cp->sessionMessage('Your password has expired. Please choose a new one.', 'good');\n\t\t\treturn $this->controller->redirect('Security/changepassword');\n\t\t}\n\t\t\n\t\t// Absolute redirection URLs may cause spoofing\n\t\tif(isset($_REQUEST['BackURL']) && $_REQUEST['BackURL'] && Director::is_site_url($_REQUEST['BackURL']) ) {\n\t\t\treturn $this->controller->redirect($_REQUEST['BackURL']);\n\t\t}\n\n\t\t// Spoofing attack, redirect to homepage instead of spoofing url\n\t\tif(isset($_REQUEST['BackURL']) && $_REQUEST['BackURL'] && !Director::is_site_url($_REQUEST['BackURL'])) {\n\t\t\treturn $this->controller->redirect(Director::absoluteBaseURL());\n\t\t}\n\n\t\t// If a default login dest has been set, redirect to that.\n\t\tif (Security::config()->default_login_dest) {\n\t\t\treturn $this->controller->redirect(Director::absoluteBaseURL() . Security::config()->default_login_dest);\n\t\t}\n\n\t\t// Redirect the user to the page where he came from\n\t\t$member = Member::currentUser();\n\t\tif($member) {\n\t\t\t$firstname = Convert::raw2xml($member->FirstName);\n\t\t\tif(!empty($data['Remember'])) {\n\t\t\t\tSession::set('SessionForms.MemberLoginForm.Remember', '1');\n\t\t\t\t$member->logIn(true);\n\t\t\t} else {\n\t\t\t\t$member->logIn();\n\t\t\t}\n\n\t\t\tSession::set('Security.Message.message',\n\t\t\t\t_t('Member.WELCOMEBACK', \"Welcome Back, {firstname}\", array('firstname' => $firstname))\n\t\t\t);\n\t\t\tSession::set(\"Security.Message.type\", \"good\");\n\t\t}\n\t\tController::curr()->redirectBack();\n\t}\n\n\n\t/**\n\t * Log out form handler method\n\t *\n\t * This method is called when the user clicks on \"logout\" on the form\n\t * created when the parameter <i>$checkCurrentUser</i> of the\n\t * {@link __construct constructor} was set to TRUE and the user was\n\t * currently logged in.\n\t */\n\tpublic function logout() {\n\t\t$s = new Security();\n\t\t$s->logout();\n\t}\n\n\n\t/**\n\t * Try to authenticate the user\n\t *\n\t * @param array Submitted data\n\t * @return Member Returns the member object on successful authentication\n\t *                or NULL on failure.\n\t */\n\tpublic function performLogin($data) {\n\t\t$member = call_user_func_array(array($this->authenticator_class, 'authenticate'), array($data, $this));\n\t\tif($member) {\n\t\t\t$member->LogIn(isset($data['Remember']));\n\t\t\treturn $member;\n\t\t} else {\n\t\t\t$this->extend('authenticationFailed', $data);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * Forgot password form handler method\n\t *\n\t * This method is called when the user clicks on \"I've lost my password\"\n\t *\n\t * @param array $data Submitted data\n\t */\n\tpublic function forgotPassword($data) {\n\t\t$SQL_data = Convert::raw2sql($data);\n\t\t$SQL_email = $SQL_data['Email'];\n\t\t$member = DataObject::get_one('Member', \"\\\"Email\\\" = '{$SQL_email}'\");\n\n\t\tif($member) {\n\t\t\t$token = $member->generateAutologinTokenAndStoreHash();\n\n\t\t\t$e = Member_ForgotPasswordEmail::create();\n\t\t\t$e->populateTemplate($member);\n\t\t\t$e->populateTemplate(array(\n\t\t\t\t'PasswordResetLink' => Security::getPasswordResetLink($member, $token)\n\t\t\t));\n\t\t\t$e->setTo($member->Email);\n\t\t\t$e->send();\n\n\t\t\t$this->controller->redirect('Security/passwordsent/' . urlencode($data['Email']));\n\t\t} elseif($data['Email']) {\n\t\t\t// Avoid information disclosure by displaying the same status,\n\t\t\t// regardless wether the email address actually exists\n\t\t\t$this->controller->redirect('Security/passwordsent/' . urlencode($data['Email']));\n\t\t} else {\n\t\t\t$this->sessionMessage(\n\t\t\t\t_t('Member.ENTEREMAIL', 'Please enter an email address to get a password reset link.'),\n\t\t\t\t'bad'\n\t\t\t);\n\t\t\t\n\t\t\t$this->controller->redirect('Security/lostpassword');\n\t\t}\n\t}\n\n}\n"], "fixing_code": ["<?php\n/**\n * Log-in form for the \"member\" authentication method\n * @package framework\n * @subpackage security\n */\nclass MemberLoginForm extends LoginForm {\n\n\t/**\n\t * This field is used in the \"You are logged in as %s\" message\n\t * @var string\n\t */\n\tpublic $loggedInAsField = 'FirstName';\n\n\tprotected $authenticator_class = 'MemberAuthenticator';\n\t\n\t/**\n\t * Constructor\n\t *\n\t * @param Controller $controller The parent controller, necessary to\n\t *                               create the appropriate form action tag.\n\t * @param string $name The method on the controller that will return this\n\t *                     form object.\n\t * @param FieldList|FormField $fields All of the fields in the form - a\n\t *                                   {@link FieldList} of {@link FormField}\n\t *                                   objects.\n\t * @param FieldList|FormAction $actions All of the action buttons in the\n\t *                                     form - a {@link FieldList} of\n\t *                                     {@link FormAction} objects\n\t * @param bool $checkCurrentUser If set to TRUE, it will be checked if a\n\t *                               the user is currently logged in, and if\n\t *                               so, only a logout button will be rendered\n\t * @param string $authenticatorClassName Name of the authenticator class that this form uses.\n\t */\n\tpublic function __construct($controller, $name, $fields = null, $actions = null,\n\t\t\t\t\t\t\t\t$checkCurrentUser = true) {\n\n\t\t// This is now set on the class directly to make it easier to create subclasses\n\t\t// $this->authenticator_class = $authenticatorClassName;\n\n\t\t$customCSS = project() . '/css/member_login.css';\n\t\tif(Director::fileExists($customCSS)) {\n\t\t\tRequirements::css($customCSS);\n\t\t}\n\t\t\n\t\tif(isset($_REQUEST['BackURL'])) {\n\t\t\t$backURL = $_REQUEST['BackURL'];\n\t\t} else {\n\t\t\t$backURL = Session::get('BackURL');\n\t\t}\n\n\t\tif($checkCurrentUser && Member::currentUser() && Member::logged_in_session_exists()) {\n\t\t\t$fields = new FieldList(\n\t\t\t\tnew HiddenField(\"AuthenticationMethod\", null, $this->authenticator_class, $this)\n\t\t\t);\n\t\t\t$actions = new FieldList(\n\t\t\t\tnew FormAction(\"logout\", _t('Member.BUTTONLOGINOTHER', \"Log in as someone else\"))\n\t\t\t);\n\t\t} else {\n\t\t\tif(!$fields) {\n\t\t\t\t$label=singleton('Member')->fieldLabel(Member::config()->unique_identifier_field);\n\t\t\t\t$fields = new FieldList(\n\t\t\t\t\tnew HiddenField(\"AuthenticationMethod\", null, $this->authenticator_class, $this),\n\t\t\t\t\t// Regardless of what the unique identifer field is (usually 'Email'), it will be held in the\n\t\t\t\t\t// 'Email' value, below:\n\t\t\t\t\tnew TextField(\"Email\", $label, Session::get('SessionForms.MemberLoginForm.Email'), null, $this),\n\t\t\t\t\tnew PasswordField(\"Password\", _t('Member.PASSWORD', 'Password'))\n\t\t\t\t);\n\t\t\t\tif(Security::config()->autologin_enabled) {\n\t\t\t\t\t$fields->push(new CheckboxField(\n\t\t\t\t\t\t\"Remember\", \n\t\t\t\t\t\t_t('Member.REMEMBERME', \"Remember me next time?\")\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!$actions) {\n\t\t\t\t$actions = new FieldList(\n\t\t\t\t\tnew FormAction('dologin', _t('Member.BUTTONLOGIN', \"Log in\")),\n\t\t\t\t\tnew LiteralField(\n\t\t\t\t\t\t'forgotPassword',\n\t\t\t\t\t\t'<p id=\"ForgotPassword\"><a href=\"Security/lostpassword\">'\n\t\t\t\t\t\t. _t('Member.BUTTONLOSTPASSWORD', \"I've lost my password\") . '</a></p>'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif(isset($backURL)) {\n\t\t\t$fields->push(new HiddenField('BackURL', 'BackURL', $backURL));\n\t\t}\n\n\t\t// Reduce attack surface by enforcing POST requests\n\t\t$this->setFormMethod('POST', true);\n\n\t\tparent::__construct($controller, $name, $fields, $actions);\n\n\t\t// Focus on the email input when the page is loaded\n\t\tRequirements::customScript(<<<JS\n\t\t\t(function() {\n\t\t\t\tvar el = document.getElementById(\"MemberLoginForm_LoginForm_Email\");\n\t\t\t\tif(el && el.focus) el.focus();\n\t\t\t})();\nJS\n\t\t);\n\t}\n\n\t/**\n\t * Get message from session\n\t */\n\tprotected function getMessageFromSession() {\n\t\tparent::getMessageFromSession();\n\t\tif(($member = Member::currentUser()) && !Session::get('MemberLoginForm.force_message')) {\n\t\t\t$this->message = _t(\n\t\t\t\t'Member.LOGGEDINAS', \n\t\t\t\t\"You're logged in as {name}.\", \n\t\t\t\tarray('name' => $member->{$this->loggedInAsField})\n\t\t\t);\n\t\t}\n\t\tSession::set('MemberLoginForm.force_message', false);\n\t}\n\n\n\t/**\n\t * Login form handler method\n\t *\n\t * This method is called when the user clicks on \"Log in\"\n\t *\n\t * @param array $data Submitted data\n\t */\n\tpublic function dologin($data) {\n\t\tif($this->performLogin($data)) {\n\t\t\t$this->logInUserAndRedirect($data);\n\t\t} else {\n\t\t\tif(array_key_exists('Email', $data)){\n\t\t\t\tSession::set('SessionForms.MemberLoginForm.Email', $data['Email']);\n\t\t\t\tSession::set('SessionForms.MemberLoginForm.Remember', isset($data['Remember']));\n\t\t\t}\n\n\t\t\tif(isset($_REQUEST['BackURL'])) $backURL = $_REQUEST['BackURL']; \n\t\t\telse $backURL = null; \n\n\t\t\tif($backURL) Session::set('BackURL', $backURL);\n\t\t\t\n\t\t\t// Show the right tab on failed login\n\t\t\t$loginLink = Director::absoluteURL($this->controller->Link('login'));\n\t\t\tif($backURL) $loginLink .= '?BackURL=' . urlencode($backURL);\n\t\t\t$this->controller->redirect($loginLink . '#' . $this->FormName() .'_tab');\n\t\t}\n\t}\n\n\t/**\n\t * Login in the user and figure out where to redirect the browser.\n\t *\n\t * The $data has this format\n\t * array(\n\t *   'AuthenticationMethod' => 'MemberAuthenticator',\n\t *   'Email' => 'sam@silverstripe.com',\n\t *   'Password' => '1nitialPassword',\n\t *   'BackURL' => 'test/link',\n\t *   [Optional: 'Remember' => 1 ]\n\t * )\n\t *\n\t * @param array $data\n\t * @return void\n\t */\n\tprotected function logInUserAndRedirect($data) {\n\t\tSession::clear('SessionForms.MemberLoginForm.Email');\n\t\tSession::clear('SessionForms.MemberLoginForm.Remember');\n\n\t\tif(Member::currentUser()->isPasswordExpired()) {\n\t\t\tif(isset($_REQUEST['BackURL']) && $backURL = $_REQUEST['BackURL']) {\n\t\t\t\tSession::set('BackURL', $backURL);\n\t\t\t}\n\t\t\t$cp = new ChangePasswordForm($this->controller, 'ChangePasswordForm');\n\t\t\t$cp->sessionMessage('Your password has expired. Please choose a new one.', 'good');\n\t\t\treturn $this->controller->redirect('Security/changepassword');\n\t\t}\n\t\t\n\t\t// Absolute redirection URLs may cause spoofing\n\t\tif(isset($_REQUEST['BackURL']) && $_REQUEST['BackURL'] && Director::is_site_url($_REQUEST['BackURL']) ) {\n\t\t\treturn $this->controller->redirect($_REQUEST['BackURL']);\n\t\t}\n\n\t\t// Spoofing attack, redirect to homepage instead of spoofing url\n\t\tif(isset($_REQUEST['BackURL']) && $_REQUEST['BackURL'] && !Director::is_site_url($_REQUEST['BackURL'])) {\n\t\t\treturn $this->controller->redirect(Director::absoluteBaseURL());\n\t\t}\n\n\t\t// If a default login dest has been set, redirect to that.\n\t\tif (Security::config()->default_login_dest) {\n\t\t\treturn $this->controller->redirect(Director::absoluteBaseURL() . Security::config()->default_login_dest);\n\t\t}\n\n\t\t// Redirect the user to the page where he came from\n\t\t$member = Member::currentUser();\n\t\tif($member) {\n\t\t\t$firstname = Convert::raw2xml($member->FirstName);\n\t\t\tif(!empty($data['Remember'])) {\n\t\t\t\tSession::set('SessionForms.MemberLoginForm.Remember', '1');\n\t\t\t\t$member->logIn(true);\n\t\t\t} else {\n\t\t\t\t$member->logIn();\n\t\t\t}\n\n\t\t\tSession::set('Security.Message.message',\n\t\t\t\t_t('Member.WELCOMEBACK', \"Welcome Back, {firstname}\", array('firstname' => $firstname))\n\t\t\t);\n\t\t\tSession::set(\"Security.Message.type\", \"good\");\n\t\t}\n\t\tController::curr()->redirectBack();\n\t}\n\n\n\t/**\n\t * Log out form handler method\n\t *\n\t * This method is called when the user clicks on \"logout\" on the form\n\t * created when the parameter <i>$checkCurrentUser</i> of the\n\t * {@link __construct constructor} was set to TRUE and the user was\n\t * currently logged in.\n\t */\n\tpublic function logout() {\n\t\t$s = new Security();\n\t\t$s->logout();\n\t}\n\n\n\t/**\n\t * Try to authenticate the user\n\t *\n\t * @param array Submitted data\n\t * @return Member Returns the member object on successful authentication\n\t *                or NULL on failure.\n\t */\n\tpublic function performLogin($data) {\n\t\t$member = call_user_func_array(array($this->authenticator_class, 'authenticate'), array($data, $this));\n\t\tif($member) {\n\t\t\t$member->LogIn(isset($data['Remember']));\n\t\t\treturn $member;\n\t\t} else {\n\t\t\t$this->extend('authenticationFailed', $data);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * Forgot password form handler method\n\t *\n\t * This method is called when the user clicks on \"I've lost my password\"\n\t *\n\t * @param array $data Submitted data\n\t */\n\tpublic function forgotPassword($data) {\n\t\t$SQL_data = Convert::raw2sql($data);\n\t\t$SQL_email = $SQL_data['Email'];\n\t\t$member = DataObject::get_one('Member', \"\\\"Email\\\" = '{$SQL_email}'\");\n\n\t\tif($member) {\n\t\t\t$token = $member->generateAutologinTokenAndStoreHash();\n\n\t\t\t$e = Member_ForgotPasswordEmail::create();\n\t\t\t$e->populateTemplate($member);\n\t\t\t$e->populateTemplate(array(\n\t\t\t\t'PasswordResetLink' => Security::getPasswordResetLink($member, $token)\n\t\t\t));\n\t\t\t$e->setTo($member->Email);\n\t\t\t$e->send();\n\n\t\t\t$this->controller->redirect('Security/passwordsent/' . urlencode($data['Email']));\n\t\t} elseif($data['Email']) {\n\t\t\t// Avoid information disclosure by displaying the same status,\n\t\t\t// regardless wether the email address actually exists\n\t\t\t$this->controller->redirect('Security/passwordsent/' . urlencode($data['Email']));\n\t\t} else {\n\t\t\t$this->sessionMessage(\n\t\t\t\t_t('Member.ENTEREMAIL', 'Please enter an email address to get a password reset link.'),\n\t\t\t\t'bad'\n\t\t\t);\n\t\t\t\n\t\t\t$this->controller->redirect('Security/lostpassword');\n\t\t}\n\t}\n\n}\n"], "filenames": ["security/MemberLoginForm.php"], "buggy_code_start_loc": [91], "buggy_code_end_loc": [91], "fixing_code_start_loc": [92], "fixing_code_end_loc": [95], "type": "CWE-20", "message": "security/MemberLoginForm.php in SilverStripe 3.0.3 supports login using a GET request, which makes it easier for remote attackers to conduct phishing attacks without detection by the victim.", "other": {"cve": {"id": "CVE-2013-2653", "sourceIdentifier": "cve@mitre.org", "published": "2013-11-13T00:55:02.887", "lastModified": "2013-11-13T14:33:12.420", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "security/MemberLoginForm.php in SilverStripe 3.0.3 supports login using a GET request, which makes it easier for remote attackers to conduct phishing attacks without detection by the victim."}, {"lang": "es", "value": "security/MemberLoginForm.php en SilverStripe 3.0.3 ofrece soporte al inicio de sesi\u00f3n mediante el uso de una petici\u00f3n GET, lo que hace m\u00e1s sencillo para atacantes remotos llevar a cabo ataques de phishing sin detecci\u00f3n por parte de la v\u00edctima."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:silverstripe:silverstripe:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "80B4D143-794B-4155-A654-B621A3180917"}]}]}], "references": [{"url": "http://seclists.org/bugtraq/2013/Aug/12", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "https://github.com/chillu/silverstripe-framework/commit/3e88c98ca513880e2b43ed7f27ade17fef5d9170", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/chillu/silverstripe-framework/commit/3e88c98ca513880e2b43ed7f27ade17fef5d9170"}}