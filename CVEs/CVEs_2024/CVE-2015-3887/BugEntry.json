{"buggy_code": ["#!/bin/sh\n\nprefix=/usr/local\n\nismac() {\n\tuname -s | grep Darwin >/dev/null\n}\n\nisx86_64() {\n\tuname -m | grep -i X86_64 >/dev/null\n}\n\nisbsd() {\n\tuname -s | grep BSD >/dev/null\n}\n\nisopenbsd() {\n\tuname -s | grep OpenBSD >/dev/null\n}\n\nusage() {\n\techo \"supported arguments\"\n\techo \"--prefix=/path \t\tdefault: $prefix\"\n\techo \"--exec_prefix=/path\tdefault: $prefix/bin\"\n\techo \"--bindir=/path\t\tdefault: $prefix/bin\"\n\techo \"--libdir=/path\t\tdefault: $prefix/lib\"\n\techo \"--includedir=/path\tdefault: $prefix/include\"\n\techo \"--sysconfdir=/path\tdefault: $prefix/etc\"\n\tismac && isx86_64 && echo \"--fat-binary : build for both i386 and x86_64 architectures on 64-bit Macs\"\n\techo \"--help : show this text\"\n\texit 1\n}\n\nspliteq() {\n\targ=$1\n\techo \"${arg#*=}\"\n\t#alternatives echo \"$arg\" | cut -d= -f2-\n\t# or echo \"$arg\" | sed 's/[^=]*=//'\n}\n\nfat_binary=\n\nparsearg() {\n\tcase \"$1\" in\n\t--prefix=*) prefix=`spliteq $1`;;\n\t--exec_prefix=*) exec_prefix=`spliteq $1`;;\n\t--bindir=*) bindir=`spliteq $1`;;\n\t--libdir=*) libdir=`spliteq $1`;;\n\t--includedir=*) includedir=`spliteq $1`;;\n\t--sysconfdir=*) sysconfdir=`spliteq $1`;;\n\t--fat-binary) fat_binary=1;;\n\t--help) usage;;\n\tesac\n}\n\nwhile true ; do\n\tcase $1 in\n\t-*) parsearg \"$1\"; shift;;\n\t*) break ;;\n\tesac\ndone\n\nif [ -z \"$exec_prefix\" ] ; then\n\texec_prefix=$prefix\nfi\n\nif [ -z \"$libdir\" ] ; then\n\tlibdir=$prefix/lib\nfi\n\nif [ -z \"$includedir\" ] ; then\n\tincludedir=$prefix/include\nfi\n\nif [ -z \"$sysconfdir\" ] ; then\n\tsysconfdir=$prefix/etc\nfi\n\nif [ -z \"$bindir\" ] ; then\n\tbindir=$exec_prefix/bin\nfi\n\nif [ -z \"$CC\" ] ; then\n\tCC=cc\nfi\n\necho CC?=$CC>config.mak\n[ -z \"$CPPFLAGS\" ] || echo CPPFLAGS?=$CPPFLAGS>>config.mak\n[ -z \"$CFLAGS\" ] || echo USER_CFLAGS?=$CFLAGS>>config.mak\n[ -z \"$LDFLAGS\" ] || echo USER_LDFLAGS?=$LDFLAGS>>config.mak\necho prefix=$prefix>>config.mak\necho exec_prefix=$exec_prefix>>config.mak\necho bindir=$bindir>>config.mak\necho libdir=$libdir>>config.mak\necho includedir=$includedir>>config.mak\necho sysconfdir=$sysconfdir>>config.mak\nmake_cmd=make\nif ismac ; then\n\techo NO_AS_NEEDED=>>config.mak\n\techo LDSO_SUFFIX=dylib>>config.mak\n\techo MAC_CFLAGS+=-DIS_MAC=1>>config.mak\n\tif isx86_64 && [ \"$fat_binary\" = 1 ] ; then\n\t\techo \"Configuring a fat binary for i386 and x86_64\"\n\t\techo MAC_CFLAGS+=-arch i386 -arch x86_64>>config.mak\n\t\techo LDFLAGS+=-arch i386 -arch x86_64>>config.mak\n\tfi\n\techo LD_SET_SONAME=-Wl,-install_name,>>config.mak\nelif isbsd ; then\n\techo LIBDL=>>config.mak\n\techo \"CFLAGS+=-DIS_BSD\">>config.mak\n\tisopenbsd && echo \"CFLAGS+=-DIS_OPENBSD\">>config.mak\n\tmake_cmd=gmake\nfi\n\necho \"Done, now run $make_cmd && $make_cmd install\"\n", "/*   (C) 2011, 2012 rofl0r\n *                                                                         *\n *   This program is free software; you can redistribute it and/or modify  *\n *   it under the terms of the GNU General Public License as published by  *\n *   the Free Software Foundation; either version 2 of the License, or     *\n *   (at your option) any later version.                                   *\n *                                                                         *\n ***************************************************************************/\n\n#undef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 200809L\n#undef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 700\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\n#include \"common.h\"\n\nstatic int usage(char **argv) {\n\tprintf(\"\\nUsage:\\t%s -q -f config_file program_name [arguments]\\n\"\n\t       \"\\t-q makes proxychains quiet - this overrides the config setting\\n\"\n\t       \"\\t-f allows to manually specify a configfile to use\\n\"\n\t       \"\\tfor example : proxychains telnet somehost.com\\n\" \"More help in README file\\n\\n\", argv[0]);\n\treturn EXIT_FAILURE;\n}\n\nstatic const char *dll_name = DLL_NAME;\n\nstatic char own_dir[256];\nstatic const char *dll_dirs[] = {\n\t\".\",\n\town_dir,\n\tLIB_DIR,\n\t\"/lib\",\n\t\"/usr/lib\",\n\t\"/usr/local/lib\",\n\t\"/lib64\",\n\tNULL\n};\n\nstatic void set_own_dir(const char *argv0) {\n\tsize_t l = strlen(argv0);\n\twhile(l && argv0[l - 1] != '/')\n\t\tl--;\n\tif(l == 0)\n\t\tmemcpy(own_dir, \".\", 2);\n\telse {\n\t\tmemcpy(own_dir, argv0, l - 1);\n\t\town_dir[l] = 0;\n\t}\n}\n\n#define MAX_COMMANDLINE_FLAGS 2\n\nint main(int argc, char *argv[]) {\n\tchar *path = NULL;\n\tchar buf[256];\n\tchar pbuf[256];\n\tint start_argv = 1;\n\tint quiet = 0;\n\tsize_t i;\n\tconst char *prefix = NULL;\n\n\tfor(i = 0; i < MAX_COMMANDLINE_FLAGS; i++) {\n\t\tif(start_argv < argc && argv[start_argv][0] == '-') {\n\t\t\tif(argv[start_argv][1] == 'q') {\n\t\t\t\tquiet = 1;\n\t\t\t\tstart_argv++;\n\t\t\t} else if(argv[start_argv][1] == 'f') {\n\n\t\t\t\tif(start_argv + 1 < argc)\n\t\t\t\t\tpath = argv[start_argv + 1];\n\t\t\t\telse\n\t\t\t\t\treturn usage(argv);\n\n\t\t\t\tstart_argv += 2;\n\t\t\t}\n\t\t} else\n\t\t\tbreak;\n\t}\n\n\tif(start_argv >= argc)\n\t\treturn usage(argv);\n\n\t/* check if path of config file has not been passed via command line */\n\tpath = get_config_path(path, pbuf, sizeof(pbuf));\n\n\tif(!quiet)\n\t\tfprintf(stderr, LOG_PREFIX \"config file found: %s\\n\", path);\n\n\t/* Set PROXYCHAINS_CONF_FILE to get proxychains lib to use new config file. */\n\tsetenv(PROXYCHAINS_CONF_FILE_ENV_VAR, path, 1);\n\n\tif(quiet)\n\t\tsetenv(PROXYCHAINS_QUIET_MODE_ENV_VAR, \"1\", 1);\n\n\n\t// search DLL\n\n\tset_own_dir(argv[0]);\n\n\ti = 0;\n\n\twhile(dll_dirs[i]) {\n\t\tsnprintf(buf, sizeof(buf), \"%s/%s\", dll_dirs[i], dll_name);\n\t\tif(access(buf, R_OK) != -1) {\n\t\t\tprefix = dll_dirs[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\n\tif(!prefix) {\n\t\tfprintf(stderr, \"couldnt locate %s\\n\", dll_name);\n\t\treturn EXIT_FAILURE;\n\t}\n\tif(!quiet)\n\t\tfprintf(stderr, LOG_PREFIX \"preloading %s/%s\\n\", prefix, dll_name);\n\n#ifdef IS_MAC\n\tputenv(\"DYLD_FORCE_FLAT_NAMESPACE=1\");\n#define LD_PRELOAD_ENV \"DYLD_INSERT_LIBRARIES\"\n#define LD_PRELOAD_SEP \":\"\n#else\n#define LD_PRELOAD_ENV \"LD_PRELOAD\"\n/* all historic implementations of BSD and linux dynlinkers seem to support\n   space as LD_PRELOAD separator, with colon added only recently.\n   we use the old syntax for maximum compat */\n#define LD_PRELOAD_SEP \" \"\n#endif\n\tchar *old_val = getenv(LD_PRELOAD_ENV);\n\tsnprintf(buf, sizeof(buf), LD_PRELOAD_ENV \"=%s/%s%s%s\",\n\t         prefix, dll_name,\n\t         /* append previous LD_PRELOAD content, if existent */\n\t         old_val ? LD_PRELOAD_SEP : \"\",\n\t         old_val ? old_val : \"\");\n\tputenv(buf);\n\texecvp(argv[start_argv], &argv[start_argv]);\n\tperror(\"proxychains can't load process....\");\n\n\treturn EXIT_FAILURE;\n}\n"], "fixing_code": ["#!/bin/sh\n\nprefix=/usr/local\n\nismac() {\n\tuname -s | grep Darwin >/dev/null\n}\n\nisx86_64() {\n\tuname -m | grep -i X86_64 >/dev/null\n}\n\nisbsd() {\n\tuname -s | grep BSD >/dev/null\n}\n\nisopenbsd() {\n\tuname -s | grep OpenBSD >/dev/null\n}\n\nusage() {\n\techo \"supported arguments\"\n\techo \"--prefix=/path \t\tdefault: $prefix\"\n\techo \"--exec_prefix=/path\tdefault: $prefix/bin\"\n\techo \"--bindir=/path\t\tdefault: $prefix/bin\"\n\techo \"--libdir=/path\t\tdefault: $prefix/lib\"\n\techo \"--includedir=/path\tdefault: $prefix/include\"\n\techo \"--sysconfdir=/path\tdefault: $prefix/etc\"\n\techo \"--ignore-cve\t\tdefault: no\"\n\techo \"\tif set to yes ignores CVE-2015-3887 and makes it possible\"\n\techo \"\tto preload from current dir (insecure)\"\n\tismac && isx86_64 && echo \"--fat-binary : build for both i386 and x86_64 architectures on 64-bit Macs\"\n\techo \"--help : show this text\"\n\texit 1\n}\n\nspliteq() {\n\targ=$1\n\techo \"${arg#*=}\"\n\t#alternatives echo \"$arg\" | cut -d= -f2-\n\t# or echo \"$arg\" | sed 's/[^=]*=//'\n}\n\nfat_binary=\nignore_cve=no\nparsearg() {\n\tcase \"$1\" in\n\t--prefix=*) prefix=`spliteq $1`;;\n\t--exec_prefix=*) exec_prefix=`spliteq $1`;;\n\t--bindir=*) bindir=`spliteq $1`;;\n\t--libdir=*) libdir=`spliteq $1`;;\n\t--includedir=*) includedir=`spliteq $1`;;\n\t--sysconfdir=*) sysconfdir=`spliteq $1`;;\n\t--ignore-cve) ignore_cve=1;;\n\t--ignore-cve=*) ignore_cve=`spliteq $1`;;\n\t--fat-binary) fat_binary=1;;\n\t--help) usage;;\n\tesac\n}\n\nwhile true ; do\n\tcase $1 in\n\t-*) parsearg \"$1\"; shift;;\n\t*) break ;;\n\tesac\ndone\n\nif [ -z \"$exec_prefix\" ] ; then\n\texec_prefix=$prefix\nfi\n\nif [ -z \"$libdir\" ] ; then\n\tlibdir=$prefix/lib\nfi\n\nif [ -z \"$includedir\" ] ; then\n\tincludedir=$prefix/include\nfi\n\nif [ -z \"$sysconfdir\" ] ; then\n\tsysconfdir=$prefix/etc\nfi\n\nif [ -z \"$bindir\" ] ; then\n\tbindir=$exec_prefix/bin\nfi\n\nif [ -z \"$CC\" ] ; then\n\tCC=cc\nfi\n\necho CC?=$CC>config.mak\n[ -z \"$CPPFLAGS\" ] || echo CPPFLAGS?=$CPPFLAGS>>config.mak\n[ -z \"$CFLAGS\" ] || echo USER_CFLAGS?=$CFLAGS>>config.mak\n[ -z \"$LDFLAGS\" ] || echo USER_LDFLAGS?=$LDFLAGS>>config.mak\necho prefix=$prefix>>config.mak\necho exec_prefix=$exec_prefix>>config.mak\necho bindir=$bindir>>config.mak\necho libdir=$libdir>>config.mak\necho includedir=$includedir>>config.mak\necho sysconfdir=$sysconfdir>>config.mak\n[ \"$ignore_cve\" = \"no\" ] && echo CPPFLAGS+= -DSUPER_SECURE>>config.mak\nmake_cmd=make\nif ismac ; then\n\techo NO_AS_NEEDED=>>config.mak\n\techo LDSO_SUFFIX=dylib>>config.mak\n\techo MAC_CFLAGS+=-DIS_MAC=1>>config.mak\n\tif isx86_64 && [ \"$fat_binary\" = 1 ] ; then\n\t\techo \"Configuring a fat binary for i386 and x86_64\"\n\t\techo MAC_CFLAGS+=-arch i386 -arch x86_64>>config.mak\n\t\techo LDFLAGS+=-arch i386 -arch x86_64>>config.mak\n\tfi\n\techo LD_SET_SONAME=-Wl,-install_name,>>config.mak\nelif isbsd ; then\n\techo LIBDL=>>config.mak\n\techo \"CFLAGS+=-DIS_BSD\">>config.mak\n\tisopenbsd && echo \"CFLAGS+=-DIS_OPENBSD\">>config.mak\n\tmake_cmd=gmake\nfi\n\necho \"Done, now run $make_cmd && $make_cmd install\"\n", "/*   (C) 2011, 2012 rofl0r\n *                                                                         *\n *   This program is free software; you can redistribute it and/or modify  *\n *   it under the terms of the GNU General Public License as published by  *\n *   the Free Software Foundation; either version 2 of the License, or     *\n *   (at your option) any later version.                                   *\n *                                                                         *\n ***************************************************************************/\n\n#undef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 200809L\n#undef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 700\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\n#include \"common.h\"\n\nstatic int usage(char **argv) {\n\tprintf(\"\\nUsage:\\t%s -q -f config_file program_name [arguments]\\n\"\n\t       \"\\t-q makes proxychains quiet - this overrides the config setting\\n\"\n\t       \"\\t-f allows to manually specify a configfile to use\\n\"\n\t       \"\\tfor example : proxychains telnet somehost.com\\n\" \"More help in README file\\n\\n\", argv[0]);\n\treturn EXIT_FAILURE;\n}\n\nstatic const char *dll_name = DLL_NAME;\n\nstatic char own_dir[256];\nstatic const char *dll_dirs[] = {\n#ifndef SUPER_SECURE /* CVE-2015-3887 */\n\t\".\",\n#endif\n\town_dir,\n\tLIB_DIR,\n\t\"/lib\",\n\t\"/usr/lib\",\n\t\"/usr/local/lib\",\n\t\"/lib64\",\n\tNULL\n};\n\nstatic void set_own_dir(const char *argv0) {\n\tsize_t l = strlen(argv0);\n\twhile(l && argv0[l - 1] != '/')\n\t\tl--;\n\tif(l == 0)\n#ifdef SUPER_SECURE\n\t\tmemcpy(own_dir, \"/dev/null/\", 2);\n#else\n\t\tmemcpy(own_dir, \".\", 2);\n#endif\n\telse {\n\t\tmemcpy(own_dir, argv0, l - 1);\n\t\town_dir[l] = 0;\n\t}\n}\n\n#define MAX_COMMANDLINE_FLAGS 2\n\nint main(int argc, char *argv[]) {\n\tchar *path = NULL;\n\tchar buf[256];\n\tchar pbuf[256];\n\tint start_argv = 1;\n\tint quiet = 0;\n\tsize_t i;\n\tconst char *prefix = NULL;\n\n\tfor(i = 0; i < MAX_COMMANDLINE_FLAGS; i++) {\n\t\tif(start_argv < argc && argv[start_argv][0] == '-') {\n\t\t\tif(argv[start_argv][1] == 'q') {\n\t\t\t\tquiet = 1;\n\t\t\t\tstart_argv++;\n\t\t\t} else if(argv[start_argv][1] == 'f') {\n\n\t\t\t\tif(start_argv + 1 < argc)\n\t\t\t\t\tpath = argv[start_argv + 1];\n\t\t\t\telse\n\t\t\t\t\treturn usage(argv);\n\n\t\t\t\tstart_argv += 2;\n\t\t\t}\n\t\t} else\n\t\t\tbreak;\n\t}\n\n\tif(start_argv >= argc)\n\t\treturn usage(argv);\n\n\t/* check if path of config file has not been passed via command line */\n\tpath = get_config_path(path, pbuf, sizeof(pbuf));\n\n\tif(!quiet)\n\t\tfprintf(stderr, LOG_PREFIX \"config file found: %s\\n\", path);\n\n\t/* Set PROXYCHAINS_CONF_FILE to get proxychains lib to use new config file. */\n\tsetenv(PROXYCHAINS_CONF_FILE_ENV_VAR, path, 1);\n\n\tif(quiet)\n\t\tsetenv(PROXYCHAINS_QUIET_MODE_ENV_VAR, \"1\", 1);\n\n\n\t// search DLL\n\n\tset_own_dir(argv[0]);\n\n\ti = 0;\n\n\twhile(dll_dirs[i]) {\n\t\tsnprintf(buf, sizeof(buf), \"%s/%s\", dll_dirs[i], dll_name);\n\t\tif(access(buf, R_OK) != -1) {\n\t\t\tprefix = dll_dirs[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\n\tif(!prefix) {\n\t\tfprintf(stderr, \"couldnt locate %s\\n\", dll_name);\n\t\treturn EXIT_FAILURE;\n\t}\n\tif(!quiet)\n\t\tfprintf(stderr, LOG_PREFIX \"preloading %s/%s\\n\", prefix, dll_name);\n\n#ifdef IS_MAC\n\tputenv(\"DYLD_FORCE_FLAT_NAMESPACE=1\");\n#define LD_PRELOAD_ENV \"DYLD_INSERT_LIBRARIES\"\n#define LD_PRELOAD_SEP \":\"\n#else\n#define LD_PRELOAD_ENV \"LD_PRELOAD\"\n/* all historic implementations of BSD and linux dynlinkers seem to support\n   space as LD_PRELOAD separator, with colon added only recently.\n   we use the old syntax for maximum compat */\n#define LD_PRELOAD_SEP \" \"\n#endif\n\tchar *old_val = getenv(LD_PRELOAD_ENV);\n\tsnprintf(buf, sizeof(buf), LD_PRELOAD_ENV \"=%s/%s%s%s\",\n\t         prefix, dll_name,\n\t         /* append previous LD_PRELOAD content, if existent */\n\t         old_val ? LD_PRELOAD_SEP : \"\",\n\t         old_val ? old_val : \"\");\n\tputenv(buf);\n\texecvp(argv[start_argv], &argv[start_argv]);\n\tperror(\"proxychains can't load process....\");\n\n\treturn EXIT_FAILURE;\n}\n"], "filenames": ["configure", "src/main.c"], "buggy_code_start_loc": [28, 35], "buggy_code_end_loc": [96, 51], "fixing_code_start_loc": [29, 36], "fixing_code_end_loc": [103, 58], "type": "CWE-426", "message": "Untrusted search path vulnerability in ProxyChains-NG before 4.9 allows local users to gain privileges via a Trojan horse libproxychains4.so library in the current working directory, which is referenced in the LD_PRELOAD path.", "other": {"cve": {"id": "CVE-2015-3887", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-21T16:29:00.177", "lastModified": "2017-10-03T17:47:03.077", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Untrusted search path vulnerability in ProxyChains-NG before 4.9 allows local users to gain privileges via a Trojan horse libproxychains4.so library in the current working directory, which is referenced in the LD_PRELOAD path."}, {"lang": "es", "value": "Una vulnerabilidad de tipo ruta de b\u00fasqueda no confiable en ProxyChains-NG en versiones anteriores a la 4.9 permite que los usuarios locales obtengan privilegios mediante una biblioteca troyana libproxychains4.so en el directorio de trabajo actual, que se referencia en la ruta LD_PRELOAD."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 7.2}, "baseSeverity": "HIGH", "exploitabilityScore": 3.9, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-426"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:proxychains-ng_project:proxychains-ng:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.8.1", "matchCriteriaId": "25FF389B-4FCC-40E2-BF65-FC942B85E9AE"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2015/05/13/11", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/74648", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1147013", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/rofl0r/proxychains-ng/blob/v4.9/README#L56", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes"]}, {"url": "https://github.com/rofl0r/proxychains-ng/commit/9ab7dbeb3baff67a51d0c5e71465c453be0890b5#diff-803c5170888b8642f2a97e5e9423d399", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/rofl0r/proxychains-ng/issues/60", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/rofl0r/proxychains-ng/commit/9ab7dbeb3baff67a51d0c5e71465c453be0890b5#diff-803c5170888b8642f2a97e5e9423d399"}}