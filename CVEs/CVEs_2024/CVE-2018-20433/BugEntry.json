{"buggy_code": ["/*\n * Distributed as part of c3p0 v.0.9.5.2\n *\n * Copyright (C) 2015 Machinery For Change, Inc.\n *\n * Author: Steve Waldman <swaldman@mchange.com>\n *\n * This library is free software; you can redistribute it and/or modify\n * it under the terms of EITHER:\n *\n *     1) The GNU Lesser General Public License (LGPL), version 2.1, as \n *        published by the Free Software Foundation\n *\n * OR\n *\n *     2) The Eclipse Public License (EPL), version 1.0\n *\n * You may choose which license to accept if you wish to redistribute\n * or modify this work. You may offer derivatives of this work\n * under the license you have chosen, or you may provide the same\n * choice of license which you have been offered here.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n *\n * You should have received copies of both LGPL v2.1 and EPL v1.0\n * along with this software; see the files LICENSE-EPL and LICENSE-LGPL.\n * If not, the text of these licenses are currently available at\n *\n * LGPL v2.1: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html\n *  EPL v1.0: http://www.eclipse.org/org/documents/epl-v10.php \n * \n */\n\npackage com.mchange.v2.c3p0.cfg;\n\nimport java.io.*;\nimport java.util.*;\nimport javax.xml.parsers.*;\nimport org.w3c.dom.*;\nimport com.mchange.v2.log.*;\n\nimport com.mchange.v1.xml.DomParseUtils;\n\npublic final class C3P0ConfigXmlUtils\n{\n    public final static String XML_CONFIG_RSRC_PATH     = \"/c3p0-config.xml\";\n\n    final static MLogger logger = MLog.getLogger( C3P0ConfigXmlUtils.class );\n\n    public final static String LINESEP;\n\n    private final static String[] MISSPELL_PFXS = {\"/c3p0\", \"/c3pO\", \"/c3po\", \"/C3P0\", \"/C3PO\"}; \n    private final static char[]   MISSPELL_LINES = {'-', '_'};\n    private final static String[] MISSPELL_CONFIG = {\"config\", \"CONFIG\"};\n    private final static String[] MISSPELL_XML = {\"xml\", \"XML\"};\n\n    // its an ugly way to do this, but since resources are not listable...\n    //\n    // this is only executed once, and does about 40 tests (for now)\n    // should I care about the cost in initialization time?\n    //\n    // should only be run if we've checked for the correct file, but\n    // not found it\n    private final static void warnCommonXmlConfigResourceMisspellings()\n    {\n        if (logger.isLoggable( MLevel.WARNING) )\n        {\n            for (int a = 0, lena = MISSPELL_PFXS.length; a < lena; ++a)\n            {\n                StringBuffer sb = new StringBuffer(16);\n                sb.append( MISSPELL_PFXS[a] );\n                for (int b = 0, lenb = MISSPELL_LINES.length; b < lenb; ++b)\n                {\n                    sb.append(MISSPELL_LINES[b]);\n                    for (int c = 0, lenc = MISSPELL_CONFIG.length; c < lenc; ++c)\n                    {\n                        sb.append(MISSPELL_CONFIG[c]);\n                        sb.append('.');\n                        for (int d = 0, lend = MISSPELL_XML.length; d < lend; ++d)\n                        {\n                            sb.append(MISSPELL_XML[d]);\n                            String test = sb.toString();\n                            if (!test.equals(XML_CONFIG_RSRC_PATH))\n                            {\n                                Object hopefullyNull = C3P0ConfigXmlUtils.class.getResource( test );\n                                if (hopefullyNull != null)\n                                {\n                                    logger.warning(\"POSSIBLY MISSPELLED c3p0-conf.xml RESOURCE FOUND. \" +\n                                                   \"Please ensure the file name is c3p0-config.xml, all lower case, \" +\n                                                   \"with the digit 0 (NOT the letter O) in c3p0. It should be placed \" +\n                                                   \" in the top level of c3p0's effective classpath.\");\n                                    return;\n                                }\n                            }\n                        }\n                    }\n\n                }\n            }\n        }\n    }\n\n    static\n    {\n        String ls;\n\n        try\n        { ls = System.getProperty(\"line.separator\", \"\\r\\n\"); }\n        catch (Exception e)\n        { ls = \"\\r\\n\"; }\n\n        LINESEP = ls;\n\n    }\n\n    public static C3P0Config extractXmlConfigFromDefaultResource() throws Exception\n    {\n        InputStream is = null;\n\n        try\n        {\n            is = C3P0ConfigUtils.class.getResourceAsStream(XML_CONFIG_RSRC_PATH);\n            if ( is == null )\n            {\n                warnCommonXmlConfigResourceMisspellings();\n                return null;\n            }\n            else\n                return extractXmlConfigFromInputStream( is );\n        }\n        finally\n        {\n            try { if (is != null) is.close(); }\n            catch (Exception e)\n            {\n                if ( logger.isLoggable( MLevel.FINE ) )\n                    logger.log(MLevel.FINE,\"Exception on resource InputStream close.\", e);\n            }\n        }\n    }\n\n    public static C3P0Config extractXmlConfigFromInputStream(InputStream is) throws Exception\n    {\n        DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();\n        DocumentBuilder db = fact.newDocumentBuilder();\n        Document doc = db.parse( is );\n\n        return extractConfigFromXmlDoc(doc);\n    }\n\n    public static C3P0Config extractConfigFromXmlDoc(Document doc) throws Exception\n    {\n        Element docElem = doc.getDocumentElement();\n        if (docElem.getTagName().equals(\"c3p0-config\"))\n        {\n            NamedScope defaults;\n            HashMap configNamesToNamedScopes = new HashMap();\n\n            Element defaultConfigElem = DomParseUtils.uniqueChild( docElem, \"default-config\" );\n            if (defaultConfigElem != null)\n                defaults = extractNamedScopeFromLevel( defaultConfigElem );\n            else\n                defaults = new NamedScope();\n            NodeList nl = DomParseUtils.immediateChildElementsByTagName(docElem, \"named-config\");\n            for (int i = 0, len = nl.getLength(); i < len; ++i)\n            {\n                Element namedConfigElem = (Element) nl.item(i);\n                String configName = namedConfigElem.getAttribute(\"name\");\n                if (configName != null && configName.length() > 0)\n                {\n                    NamedScope namedConfig = extractNamedScopeFromLevel( namedConfigElem );\n                    configNamesToNamedScopes.put( configName, namedConfig);\n                }\n                else\n                    logger.warning(\"Configuration XML contained named-config element without name attribute: \" + namedConfigElem);\n            }\n            return new C3P0Config( defaults, configNamesToNamedScopes );\n        }\n        else\n            throw new Exception(\"Root element of c3p0 config xml should be 'c3p0-config', not '\" + docElem.getTagName() + \"'.\");\n    }\n\n    private static NamedScope extractNamedScopeFromLevel(Element elem)\n    {\n        HashMap props = extractPropertiesFromLevel( elem );\n        HashMap userNamesToOverrides = new HashMap();\n\n        NodeList nl = DomParseUtils.immediateChildElementsByTagName(elem, \"user-overrides\");\n        for (int i = 0, len = nl.getLength(); i < len; ++i)\n        {\n            Element perUserConfigElem = (Element) nl.item(i);\n            String userName = perUserConfigElem.getAttribute(\"user\");\n            if (userName != null && userName.length() > 0)\n            {\n                HashMap userProps = extractPropertiesFromLevel( perUserConfigElem );\n                userNamesToOverrides.put( userName, userProps );\n            }\n            else\n                logger.warning(\"Configuration XML contained user-overrides element without user attribute: \" + LINESEP + perUserConfigElem);\n        }\n\n\tHashMap extensions = extractExtensionsFromLevel( elem );\n\n        return new NamedScope(props, userNamesToOverrides, extensions);\n    }\n\n    private static HashMap extractExtensionsFromLevel(Element elem)\n    {\n        HashMap out = new HashMap();\n        NodeList nl = DomParseUtils.immediateChildElementsByTagName(elem, \"extensions\");\n        for (int i = 0, len = nl.getLength(); i < len; ++i)\n        {\n            Element extensionsElem = (Element) nl.item(i);\n\t    out.putAll( extractPropertiesFromLevel( extensionsElem ) );\n        }\n\treturn out;\n    }\n\n    private static HashMap extractPropertiesFromLevel(Element elem)\n    {\n        // System.err.println( \"extractPropertiesFromLevel()\" );\n\n        HashMap out = new HashMap();\n\n        try\n        {\n            NodeList nl = DomParseUtils.immediateChildElementsByTagName(elem, \"property\");\n            int len = nl.getLength();\n            for (int i = 0; i < len; ++i)\n            {\n                Element propertyElem = (Element) nl.item(i);\n                String propName = propertyElem.getAttribute(\"name\");\n                if (propName != null && propName.length() > 0)\n                {\n                    String propVal = DomParseUtils.allTextFromElement(propertyElem, true);\n                    out.put( propName, propVal );\n                    //System.err.println( propName + \" -> \" + propVal );\n                }\n                else\n                    logger.warning(\"Configuration XML contained property element without name attribute: \" + LINESEP + propertyElem);\n            }\n        }\n        catch (Exception e)\n        {\n            logger.log( MLevel.WARNING, \n                            \"An exception occurred while reading config XML. \" +\n                            \"Some configuration information has probably been ignored.\", \n                            e );\n        }\n\n        return out;\n    }\n\n    private C3P0ConfigXmlUtils()\n    {}\n}\n"], "fixing_code": ["/*\n * Distributed as part of c3p0 v.0.9.5.2\n *\n * Copyright (C) 2015 Machinery For Change, Inc.\n *\n * Author: Steve Waldman <swaldman@mchange.com>\n *\n * This library is free software; you can redistribute it and/or modify\n * it under the terms of EITHER:\n *\n *     1) The GNU Lesser General Public License (LGPL), version 2.1, as \n *        published by the Free Software Foundation\n *\n * OR\n *\n *     2) The Eclipse Public License (EPL), version 1.0\n *\n * You may choose which license to accept if you wish to redistribute\n * or modify this work. You may offer derivatives of this work\n * under the license you have chosen, or you may provide the same\n * choice of license which you have been offered here.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n *\n * You should have received copies of both LGPL v2.1 and EPL v1.0\n * along with this software; see the files LICENSE-EPL and LICENSE-LGPL.\n * If not, the text of these licenses are currently available at\n *\n * LGPL v2.1: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html\n *  EPL v1.0: http://www.eclipse.org/org/documents/epl-v10.php \n * \n */\n\npackage com.mchange.v2.c3p0.cfg;\n\nimport java.io.*;\nimport java.util.*;\nimport javax.xml.parsers.*;\nimport org.w3c.dom.*;\nimport com.mchange.v2.log.*;\n\nimport com.mchange.v1.xml.DomParseUtils;\n\npublic final class C3P0ConfigXmlUtils\n{\n    public final static String XML_CONFIG_RSRC_PATH     = \"/c3p0-config.xml\";\n\n    final static MLogger logger = MLog.getLogger( C3P0ConfigXmlUtils.class );\n\n    public final static String LINESEP;\n\n    private final static String[] MISSPELL_PFXS = {\"/c3p0\", \"/c3pO\", \"/c3po\", \"/C3P0\", \"/C3PO\"}; \n    private final static char[]   MISSPELL_LINES = {'-', '_'};\n    private final static String[] MISSPELL_CONFIG = {\"config\", \"CONFIG\"};\n    private final static String[] MISSPELL_XML = {\"xml\", \"XML\"};\n\n    // its an ugly way to do this, but since resources are not listable...\n    //\n    // this is only executed once, and does about 40 tests (for now)\n    // should I care about the cost in initialization time?\n    //\n    // should only be run if we've checked for the correct file, but\n    // not found it\n    private final static void warnCommonXmlConfigResourceMisspellings()\n    {\n        if (logger.isLoggable( MLevel.WARNING) )\n        {\n            for (int a = 0, lena = MISSPELL_PFXS.length; a < lena; ++a)\n            {\n                StringBuffer sb = new StringBuffer(16);\n                sb.append( MISSPELL_PFXS[a] );\n                for (int b = 0, lenb = MISSPELL_LINES.length; b < lenb; ++b)\n                {\n                    sb.append(MISSPELL_LINES[b]);\n                    for (int c = 0, lenc = MISSPELL_CONFIG.length; c < lenc; ++c)\n                    {\n                        sb.append(MISSPELL_CONFIG[c]);\n                        sb.append('.');\n                        for (int d = 0, lend = MISSPELL_XML.length; d < lend; ++d)\n                        {\n                            sb.append(MISSPELL_XML[d]);\n                            String test = sb.toString();\n                            if (!test.equals(XML_CONFIG_RSRC_PATH))\n                            {\n                                Object hopefullyNull = C3P0ConfigXmlUtils.class.getResource( test );\n                                if (hopefullyNull != null)\n                                {\n                                    logger.warning(\"POSSIBLY MISSPELLED c3p0-conf.xml RESOURCE FOUND. \" +\n                                                   \"Please ensure the file name is c3p0-config.xml, all lower case, \" +\n                                                   \"with the digit 0 (NOT the letter O) in c3p0. It should be placed \" +\n                                                   \" in the top level of c3p0's effective classpath.\");\n                                    return;\n                                }\n                            }\n                        }\n                    }\n\n                }\n            }\n        }\n    }\n\n    static\n    {\n        String ls;\n\n        try\n        { ls = System.getProperty(\"line.separator\", \"\\r\\n\"); }\n        catch (Exception e)\n        { ls = \"\\r\\n\"; }\n\n        LINESEP = ls;\n\n    }\n\n    public static C3P0Config extractXmlConfigFromDefaultResource() throws Exception\n    {\n        InputStream is = null;\n\n        try\n        {\n            is = C3P0ConfigUtils.class.getResourceAsStream(XML_CONFIG_RSRC_PATH);\n            if ( is == null )\n            {\n                warnCommonXmlConfigResourceMisspellings();\n                return null;\n            }\n            else\n                return extractXmlConfigFromInputStream( is );\n        }\n        finally\n        {\n            try { if (is != null) is.close(); }\n            catch (Exception e)\n            {\n                if ( logger.isLoggable( MLevel.FINE ) )\n                    logger.log(MLevel.FINE,\"Exception on resource InputStream close.\", e);\n            }\n        }\n    }\n\n    public static C3P0Config extractXmlConfigFromInputStream(InputStream is) throws Exception\n    {\n        DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();\n\tfact.setExpandEntityReferences(false);\n        DocumentBuilder db = fact.newDocumentBuilder();\n        Document doc = db.parse( is );\n\n        return extractConfigFromXmlDoc(doc);\n    }\n\n    public static C3P0Config extractConfigFromXmlDoc(Document doc) throws Exception\n    {\n        Element docElem = doc.getDocumentElement();\n        if (docElem.getTagName().equals(\"c3p0-config\"))\n        {\n            NamedScope defaults;\n            HashMap configNamesToNamedScopes = new HashMap();\n\n            Element defaultConfigElem = DomParseUtils.uniqueChild( docElem, \"default-config\" );\n            if (defaultConfigElem != null)\n                defaults = extractNamedScopeFromLevel( defaultConfigElem );\n            else\n                defaults = new NamedScope();\n            NodeList nl = DomParseUtils.immediateChildElementsByTagName(docElem, \"named-config\");\n            for (int i = 0, len = nl.getLength(); i < len; ++i)\n            {\n                Element namedConfigElem = (Element) nl.item(i);\n                String configName = namedConfigElem.getAttribute(\"name\");\n                if (configName != null && configName.length() > 0)\n                {\n                    NamedScope namedConfig = extractNamedScopeFromLevel( namedConfigElem );\n                    configNamesToNamedScopes.put( configName, namedConfig);\n                }\n                else\n                    logger.warning(\"Configuration XML contained named-config element without name attribute: \" + namedConfigElem);\n            }\n            return new C3P0Config( defaults, configNamesToNamedScopes );\n        }\n        else\n            throw new Exception(\"Root element of c3p0 config xml should be 'c3p0-config', not '\" + docElem.getTagName() + \"'.\");\n    }\n\n    private static NamedScope extractNamedScopeFromLevel(Element elem)\n    {\n        HashMap props = extractPropertiesFromLevel( elem );\n        HashMap userNamesToOverrides = new HashMap();\n\n        NodeList nl = DomParseUtils.immediateChildElementsByTagName(elem, \"user-overrides\");\n        for (int i = 0, len = nl.getLength(); i < len; ++i)\n        {\n            Element perUserConfigElem = (Element) nl.item(i);\n            String userName = perUserConfigElem.getAttribute(\"user\");\n            if (userName != null && userName.length() > 0)\n            {\n                HashMap userProps = extractPropertiesFromLevel( perUserConfigElem );\n                userNamesToOverrides.put( userName, userProps );\n            }\n            else\n                logger.warning(\"Configuration XML contained user-overrides element without user attribute: \" + LINESEP + perUserConfigElem);\n        }\n\n\tHashMap extensions = extractExtensionsFromLevel( elem );\n\n        return new NamedScope(props, userNamesToOverrides, extensions);\n    }\n\n    private static HashMap extractExtensionsFromLevel(Element elem)\n    {\n        HashMap out = new HashMap();\n        NodeList nl = DomParseUtils.immediateChildElementsByTagName(elem, \"extensions\");\n        for (int i = 0, len = nl.getLength(); i < len; ++i)\n        {\n            Element extensionsElem = (Element) nl.item(i);\n\t    out.putAll( extractPropertiesFromLevel( extensionsElem ) );\n        }\n\treturn out;\n    }\n\n    private static HashMap extractPropertiesFromLevel(Element elem)\n    {\n        // System.err.println( \"extractPropertiesFromLevel()\" );\n\n        HashMap out = new HashMap();\n\n        try\n        {\n            NodeList nl = DomParseUtils.immediateChildElementsByTagName(elem, \"property\");\n            int len = nl.getLength();\n            for (int i = 0; i < len; ++i)\n            {\n                Element propertyElem = (Element) nl.item(i);\n                String propName = propertyElem.getAttribute(\"name\");\n                if (propName != null && propName.length() > 0)\n                {\n                    String propVal = DomParseUtils.allTextFromElement(propertyElem, true);\n                    out.put( propName, propVal );\n                    //System.err.println( propName + \" -> \" + propVal );\n                }\n                else\n                    logger.warning(\"Configuration XML contained property element without name attribute: \" + LINESEP + propertyElem);\n            }\n        }\n        catch (Exception e)\n        {\n            logger.log( MLevel.WARNING, \n                            \"An exception occurred while reading config XML. \" +\n                            \"Some configuration information has probably been ignored.\", \n                            e );\n        }\n\n        return out;\n    }\n\n    private C3P0ConfigXmlUtils()\n    {}\n}\n"], "filenames": ["src/java/com/mchange/v2/c3p0/cfg/C3P0ConfigXmlUtils.java"], "buggy_code_start_loc": [146], "buggy_code_end_loc": [146], "fixing_code_start_loc": [147], "fixing_code_end_loc": [148], "type": "CWE-611", "message": "c3p0 0.9.5.2 allows XXE in extractXmlConfigFromInputStream in com/mchange/v2/c3p0/cfg/C3P0ConfigXmlUtils.java during initialization.", "other": {"cve": {"id": "CVE-2018-20433", "sourceIdentifier": "cve@mitre.org", "published": "2018-12-24T13:29:00.210", "lastModified": "2019-05-29T05:29:00.287", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "c3p0 0.9.5.2 allows XXE in extractXmlConfigFromInputStream in com/mchange/v2/c3p0/cfg/C3P0ConfigXmlUtils.java during initialization."}, {"lang": "es", "value": "c3p0 0.9.5.2 permite XEE (XML External Entity) en extractXmlConfigFromInputStream en com/mchange/v2/c3p0/cfg/C3P0ConfigXmlUtils.java durante la inicializaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mchange:c3p0:0.9.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "E72926D2-16E5-4F20-87AC-8918D659F86B"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}]}]}], "references": [{"url": "https://github.com/zhutougg/c3p0/commit/2eb0ea97f745740b18dd45e4a909112d4685f87b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/12/msg00021.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BFIVX6HOVNLAM7W3SUAMHYRNLCVQSAWR/", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MQ47OFV57Y2DAHMGA5H3JOL4WHRWRFN4/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/zhutougg/c3p0/commit/2eb0ea97f745740b18dd45e4a909112d4685f87b"}}